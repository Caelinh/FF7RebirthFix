#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EndDataBase

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "EndDataBase_structs.hpp"
#include "EndDataObject_structs.hpp"


namespace SDK
{

// Class EndDataBase.EndBattleCountAPI
// 0x0000 (0x0028 - 0x0028)
class UEndBattleCountAPI : public UObject
{
public:
	static bool GetBattleCountLogBoolByBP(class FName ownerCharaName, EEndBattleCountLogType Type, class FName TargetCharaName, class FName subTypeName, class FName territoryID);
	static float GetBattleCountLogFloatByBP(class FName ownerCharaName, EEndBattleCountLogType Type, class FName TargetCharaName, class FName subTypeName, class FName territoryID);
	static int32 GetBattleCountLogIntByBP(class FName ownerCharaName, EEndBattleCountLogType Type, class FName TargetCharaName, class FName subTypeName, class FName territoryID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndBattleCountAPI">();
	}
	static class UEndBattleCountAPI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndBattleCountAPI>();
	}
};
static_assert(alignof(UEndBattleCountAPI) == 0x000008, "Wrong alignment on UEndBattleCountAPI");
static_assert(sizeof(UEndBattleCountAPI) == 0x000028, "Wrong size on UEndBattleCountAPI");

// Class EndDataBase.EndDataBaseDataBaseAPI
// 0x0008 (0x0030 - 0x0028)
class UEndDataBaseDataBaseAPI : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void EnemyBook_IncrementKillCount_BP(class FName enemyBookTableId);
	static int32 GetChapterProgress();
	static class FName GetDebugChapterID();
	static EPlayerType GetDefaultBattleLeaderTypeBP();
	static EPlayerType GetDefaultPartyLeaderTypeBP();
	static int32 GetItemNumBP(int32 UniqueId);
	static float GetLocationWorkFloat(class FName LocationWorkID);
	static int32 GetLocationWorkInteger(class FName LocationWorkID);
	static struct FVector GetPlayerPosition(EPlayerType Type);
	static struct FRotator GetPlayerRotation(EPlayerType Type);
	static float GetResidentWorkFloat(const class FName ResidentWorkID);
	static int32 GetResidentWorkInteger(const class FName ResidentWorkID);
	static const class FName GetTestPlayModeTableID();
	static bool GetUpdatePlayTimeFlag();
	static void Hoge00();
	static void Hoge01();
	static void Hoge02();
	static void Hoge03();
	static void Hoge04();
	static void Hoge05();
	static void Hoge06();
	static void Hoge07();
	static void Hoge08();
	static void Hoge09();
	static bool IsClassic();
	static bool IsDebugPartyList();
	static bool IsDifficulty(EDifficultyType Difficulty);
	static bool IsFinishStreamMateriaModel();
	static bool IsStoryFlag(const class FName& StoryFlagId);
	static void SetDebugChapterID(const class FString& DebugChapterID);
	static void SetDefaultBattleLeaderTypeBP(EPlayerType Type);
	static void SetDefaultPartyLeaderTypeBP(EPlayerType Type);
	static void SetLocationWorkFloat(class FName LocationWorkID, float Value);
	static void SetLocationWorkInteger(class FName LocationWorkID, int32 Value);
	static void SetResidentWorkFloat(const class FName ResidentWorkID, float Value);
	static void SetResidentWorkInteger(const class FName ResidentWorkID, int32 Value);
	static void SetStoryFlagBP(const class FName& StoryFlagId, bool Value);
	static void SetTestPlayModeTableID(class FName setTableID);
	static void SetupInitialParameter(class FName debugPartyListDataTableId);
	static void StartPlayTime();
	static void StartStreamMateriaModel();
	static void StopPlayTime();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndDataBaseDataBaseAPI">();
	}
	static class UEndDataBaseDataBaseAPI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndDataBaseDataBaseAPI>();
	}
};
static_assert(alignof(UEndDataBaseDataBaseAPI) == 0x000008, "Wrong alignment on UEndDataBaseDataBaseAPI");
static_assert(sizeof(UEndDataBaseDataBaseAPI) == 0x000030, "Wrong size on UEndDataBaseDataBaseAPI");

// Class EndDataBase.EndItemAPI
// 0x0000 (0x0028 - 0x0028)
class UEndItemAPI final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndItemAPI">();
	}
	static class UEndItemAPI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndItemAPI>();
	}
};
static_assert(alignof(UEndItemAPI) == 0x000008, "Wrong alignment on UEndItemAPI");
static_assert(sizeof(UEndItemAPI) == 0x000028, "Wrong size on UEndItemAPI");

// Class EndDataBase.EndDataBaseDataObjectAPI
// 0x0000 (0x0028 - 0x0028)
class UEndDataBaseDataObjectAPI : public UObject
{
public:
	static void ClearDebugFlag(EEndDataObjectDebugFlag Flag);
	static TMap<EPlayerType, class FName> GetActorNameMap();
	static TArray<class FString> GetChapterList(const class FString& LocationName);
	static class FName GetDebugID();
	static TArray<EEquipmentType> GetEquipmentTypeList();
	static TArray<class FString> GetFieldTestLocationNameDetails(bool bWithBack);
	static TArray<class FString> GetLocationDetails();
	static class FName GetLocationIdFromLocationWorkId(class FName dataObjectId);
	static TArray<class FString> GetLocationNameDetails();
	static TArray<class FString> GetLocationNames();
	static TArray<class FName> GetLocationPresetList(const class FString& LocationName);
	static TArray<class FString> GetLocationSlotList(const class FString& LocationName);
	static TArray<EPlayerType> GetPlayerTypeListSortFavPointBP(const TArray<EPlayerType>& InList, EEndFavPointSortType sortType);
	static class FName GetResidentID();
	static float GetResidentParameterFloatBP(const class FName ID, float DefaultValue);
	static int32 GetResidentParameterIntegerBP(const class FName ID, int32 DefaultValue);
	static class FName GetResidentParameterNameBP(const class FName ID, class FName DefaultValue);
	static class FString GetResidentParameterStringBP(const class FName ID, const class FString& DefaultValue);
	static TArray<class FString> GetTestCutSceneEnviSetNameList(const TArray<class FString>& CutSceneNames);
	static TArray<class FString> GetTestCutSceneNameList(const class FString& LocationName);
	static class FName GetTestPlayModeSettingDataName(const class FName& TableID);
	static TArray<class FName> GetTestPlayModeSettingDataObjectIds();
	static class FName GetTestPlayModeTitleLocation(const class FName& TableID);
	static TMap<EPlayerType, class FName> GetWeaponNameMap();
	static bool IsDebugFlag(EEndDataObjectDebugFlag Flag);
	static bool IsExistDataObjectBP();
	static bool IsExistDataObjectFromTypeBP(EDataObjectType Type);
	static void SetDebugFlag(EEndDataObjectDebugFlag Flag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndDataBaseDataObjectAPI">();
	}
	static class UEndDataBaseDataObjectAPI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndDataBaseDataObjectAPI>();
	}
};
static_assert(alignof(UEndDataBaseDataObjectAPI) == 0x000008, "Wrong alignment on UEndDataBaseDataObjectAPI");
static_assert(sizeof(UEndDataBaseDataObjectAPI) == 0x000028, "Wrong size on UEndDataBaseDataObjectAPI");

// Class EndDataBase.EndSaveGame
// 0x0000 (0x0028 - 0x0028)
class UEndSaveGame final : public USaveGame
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndSaveGame">();
	}
	static class UEndSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndSaveGame>();
	}
};
static_assert(alignof(UEndSaveGame) == 0x000008, "Wrong alignment on UEndSaveGame");
static_assert(sizeof(UEndSaveGame) == 0x000028, "Wrong size on UEndSaveGame");

}

