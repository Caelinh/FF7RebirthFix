#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VFXNiagara

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Niagara_structs.hpp"


namespace SDK
{

// Enum VFXNiagara.EVFXAttachRotationKind
// NumValues: 0x0004
enum class EVFXAttachRotationKind : uint8
{
	EVNR_Socket                              = 0,
	EVNR_Actor                               = 1,
	EVNR_World                               = 2,
	EVNR_MAX                                 = 3,
};

// ScriptStruct VFXNiagara.VFXNiagaraUserParameter
// 0x0060 (0x0060 - 0x0000)
struct FVFXNiagaraUserParameter final
{
public:
	struct FNiagaraVariable                       m_Variable;                                        // 0x0000(0x0020)(Edit, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNiagaraVariant                        m_Variant;                                         // 0x0020(0x0028)(Edit, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        m_ObjectPath;                                      // 0x0048(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVFXNiagaraUserParameter) == 0x000008, "Wrong alignment on FVFXNiagaraUserParameter");
static_assert(sizeof(FVFXNiagaraUserParameter) == 0x000060, "Wrong size on FVFXNiagaraUserParameter");
static_assert(offsetof(FVFXNiagaraUserParameter, m_Variable) == 0x000000, "Member 'FVFXNiagaraUserParameter::m_Variable' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraUserParameter, m_Variant) == 0x000020, "Member 'FVFXNiagaraUserParameter::m_Variant' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraUserParameter, m_ObjectPath) == 0x000048, "Member 'FVFXNiagaraUserParameter::m_ObjectPath' has a wrong offset!");

// ScriptStruct VFXNiagara.VFXNiagaraParameterInfo
// 0x0028 (0x0028 - 0x0000)
struct FVFXNiagaraParameterInfo final
{
public:
	struct FSoftObjectPath                        m_Template;                                        // 0x0000(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVFXNiagaraUserParameter>       m_UserParams;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVFXNiagaraParameterInfo) == 0x000008, "Wrong alignment on FVFXNiagaraParameterInfo");
static_assert(sizeof(FVFXNiagaraParameterInfo) == 0x000028, "Wrong size on FVFXNiagaraParameterInfo");
static_assert(offsetof(FVFXNiagaraParameterInfo, m_Template) == 0x000000, "Member 'FVFXNiagaraParameterInfo::m_Template' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraParameterInfo, m_UserParams) == 0x000018, "Member 'FVFXNiagaraParameterInfo::m_UserParams' has a wrong offset!");

// ScriptStruct VFXNiagara.VFXRefActorTransformInfo
// 0x0050 (0x0050 - 0x0000)
struct FVFXRefActorTransformInfo final
{
public:
	struct FSoftObjectPath                        m_Actor;                                           // 0x0000(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ActorName;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_RelativeLocation;                                // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               m_RelativeRotation;                                // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                m_RelativeScale;                                   // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVFXRefActorTransformInfo) == 0x000008, "Wrong alignment on FVFXRefActorTransformInfo");
static_assert(sizeof(FVFXRefActorTransformInfo) == 0x000050, "Wrong size on FVFXRefActorTransformInfo");
static_assert(offsetof(FVFXRefActorTransformInfo, m_Actor) == 0x000000, "Member 'FVFXRefActorTransformInfo::m_Actor' has a wrong offset!");
static_assert(offsetof(FVFXRefActorTransformInfo, m_ActorName) == 0x000018, "Member 'FVFXRefActorTransformInfo::m_ActorName' has a wrong offset!");
static_assert(offsetof(FVFXRefActorTransformInfo, m_RelativeLocation) == 0x000028, "Member 'FVFXRefActorTransformInfo::m_RelativeLocation' has a wrong offset!");
static_assert(offsetof(FVFXRefActorTransformInfo, m_RelativeRotation) == 0x000034, "Member 'FVFXRefActorTransformInfo::m_RelativeRotation' has a wrong offset!");
static_assert(offsetof(FVFXRefActorTransformInfo, m_RelativeScale) == 0x000040, "Member 'FVFXRefActorTransformInfo::m_RelativeScale' has a wrong offset!");

// ScriptStruct VFXNiagara.VFXNiagaraCharacterInfo
// 0x0040 (0x0040 - 0x0000)
struct FVFXNiagaraCharacterInfo final
{
public:
	struct FVector                                m_Position;                                        // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  m_Rotation;                                        // 0x0010(0x0010)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                m_Velocity;                                        // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Radius;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Type;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVFXNiagaraCharacterInfo) == 0x000010, "Wrong alignment on FVFXNiagaraCharacterInfo");
static_assert(sizeof(FVFXNiagaraCharacterInfo) == 0x000040, "Wrong size on FVFXNiagaraCharacterInfo");
static_assert(offsetof(FVFXNiagaraCharacterInfo, m_Position) == 0x000000, "Member 'FVFXNiagaraCharacterInfo::m_Position' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraCharacterInfo, m_Rotation) == 0x000010, "Member 'FVFXNiagaraCharacterInfo::m_Rotation' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraCharacterInfo, m_Velocity) == 0x000020, "Member 'FVFXNiagaraCharacterInfo::m_Velocity' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraCharacterInfo, m_Radius) == 0x00002C, "Member 'FVFXNiagaraCharacterInfo::m_Radius' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraCharacterInfo, m_Type) == 0x000030, "Member 'FVFXNiagaraCharacterInfo::m_Type' has a wrong offset!");

// ScriptStruct VFXNiagara.VFXMaterialParameterBase
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FVFXMaterialParameterBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialParameterInfo                 m_ParameterInfo;                                   // 0x0008(0x0010)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ParameterHash;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  m_ParameterId;                                     // 0x001C(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_GroupName;                                       // 0x002C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVFXMaterialParameterBase) == 0x000008, "Wrong alignment on FVFXMaterialParameterBase");
static_assert(sizeof(FVFXMaterialParameterBase) == 0x000038, "Wrong size on FVFXMaterialParameterBase");
static_assert(offsetof(FVFXMaterialParameterBase, m_ParameterInfo) == 0x000008, "Member 'FVFXMaterialParameterBase::m_ParameterInfo' has a wrong offset!");
static_assert(offsetof(FVFXMaterialParameterBase, m_ParameterHash) == 0x000018, "Member 'FVFXMaterialParameterBase::m_ParameterHash' has a wrong offset!");
static_assert(offsetof(FVFXMaterialParameterBase, m_ParameterId) == 0x00001C, "Member 'FVFXMaterialParameterBase::m_ParameterId' has a wrong offset!");
static_assert(offsetof(FVFXMaterialParameterBase, m_GroupName) == 0x00002C, "Member 'FVFXMaterialParameterBase::m_GroupName' has a wrong offset!");

// ScriptStruct VFXNiagara.VFXMaterialTextureParameter
// 0x0018 (0x0050 - 0x0038)
struct FVFXMaterialTextureParameter final : public FVFXMaterialParameterBase
{
public:
	class UTexture*                               m_Value;                                           // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVFXMaterialTextureParameter) == 0x000008, "Wrong alignment on FVFXMaterialTextureParameter");
static_assert(sizeof(FVFXMaterialTextureParameter) == 0x000050, "Wrong size on FVFXMaterialTextureParameter");
static_assert(offsetof(FVFXMaterialTextureParameter, m_Value) == 0x000038, "Member 'FVFXMaterialTextureParameter::m_Value' has a wrong offset!");

// ScriptStruct VFXNiagara.VFXMaterialScalarParameter
// 0x0008 (0x0040 - 0x0038)
struct FVFXMaterialScalarParameter final : public FVFXMaterialParameterBase
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVFXMaterialScalarParameter) == 0x000008, "Wrong alignment on FVFXMaterialScalarParameter");
static_assert(sizeof(FVFXMaterialScalarParameter) == 0x000040, "Wrong size on FVFXMaterialScalarParameter");

// ScriptStruct VFXNiagara.VFXMaterialVectorParameter
// 0x0018 (0x0050 - 0x0038)
struct alignas(0x10) FVFXMaterialVectorParameter final : public FVFXMaterialParameterBase
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVFXMaterialVectorParameter) == 0x000010, "Wrong alignment on FVFXMaterialVectorParameter");
static_assert(sizeof(FVFXMaterialVectorParameter) == 0x000050, "Wrong size on FVFXMaterialVectorParameter");

// ScriptStruct VFXNiagara.VFXNiagaraCreateParams
// 0x0068 (0x0068 - 0x0000)
struct FVFXNiagaraCreateParams
{
public:
	uint8                                         m_bEnable : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVFXNiagaraParameterInfo               m_NiagaraParameterInfo;                            // 0x0008(0x0028)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         m_Attached : 1;                                    // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bSynchroParentActorTick : 1;                     // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EVFXAttachRotationKind                        m_NotifyRotationKind;                              // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   m_SocketName;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_LocationOffset;                                  // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               m_RotationOffset;                                  // 0x004C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                m_Scale;                                           // 0x0058(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVFXNiagaraCreateParams) == 0x000008, "Wrong alignment on FVFXNiagaraCreateParams");
static_assert(sizeof(FVFXNiagaraCreateParams) == 0x000068, "Wrong size on FVFXNiagaraCreateParams");
static_assert(offsetof(FVFXNiagaraCreateParams, m_NiagaraParameterInfo) == 0x000008, "Member 'FVFXNiagaraCreateParams::m_NiagaraParameterInfo' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraCreateParams, m_NotifyRotationKind) == 0x000034, "Member 'FVFXNiagaraCreateParams::m_NotifyRotationKind' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraCreateParams, m_SocketName) == 0x000038, "Member 'FVFXNiagaraCreateParams::m_SocketName' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraCreateParams, m_LocationOffset) == 0x000040, "Member 'FVFXNiagaraCreateParams::m_LocationOffset' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraCreateParams, m_RotationOffset) == 0x00004C, "Member 'FVFXNiagaraCreateParams::m_RotationOffset' has a wrong offset!");
static_assert(offsetof(FVFXNiagaraCreateParams, m_Scale) == 0x000058, "Member 'FVFXNiagaraCreateParams::m_Scale' has a wrong offset!");

}

