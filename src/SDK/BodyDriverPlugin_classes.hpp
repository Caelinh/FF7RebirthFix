#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BodyDriverPlugin

#include "Basic.hpp"

#include "BodyDriverPlugin_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class BodyDriverPlugin.BodyDriver_ArchtypeTuningSet
// 0x0090 (0x00C0 - 0x0030)
class UBodyDriver_ArchtypeTuningSet final : public UDataAsset
{
public:
	bool                                          UseArchType;                                       // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ArchetypeIsSelf;                                   // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBaseForExplosions;                              // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBoundsInsteadOfPushes;                          // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFrontWoundGrabs;                              // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSideHeadShotForHeadAlways;                      // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableReachForWound;                              // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableBrace;                                      // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableWindmill;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveClavicleHitsToUpperArm;                        // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveLowerLegHitsToThighs;                          // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveNeckHitsToHead;                                // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideFallenLimitBlendRate;                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenBaseInitialBoundScale;                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArchetypeJointSpeedClamp;                          // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HandAndForearmsCountsAsNonFootOnGround;            // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AppendagesCountsAsNonFootOnGround;                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplosionForceScale;                               // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchInitialDistance;                              // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchInitialDistanceMultiplierForNonExplosions;    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchMoveRate;                                     // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchMoveRateMultiplierForNonExplosions;           // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EeBodyParts>                           AdditionalPatchProbeParts;                         // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PatchSize;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchSizeMultiplierForNonExplosions;               // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchMinDist;                                      // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EeBodyParts>                           DisableCollisionLinks;                             // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ArchetypeInitialBoundScale;                        // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EeBodyParts>                           ArchetypeInitialBoundScaleParts;                   // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseArchTypeForDebugImpulsesTuning;                 // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseArchTypeForApplyImpulseTuning;                  // 0x00A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseArchTypeForApplyExplosionTuning;                // 0x00AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB[0x1];                                       // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SwitchToFallSlopeAngle;                            // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeFallSlopAngleBasedOnMovement;                // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SwitchToFallSlopeAngleTrue;                        // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchToFallSlopeAngleTrueIfBase;                  // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_ArchtypeTuningSet">();
	}
	static class UBodyDriver_ArchtypeTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_ArchtypeTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_ArchtypeTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_ArchtypeTuningSet");
static_assert(sizeof(UBodyDriver_ArchtypeTuningSet) == 0x0000C0, "Wrong size on UBodyDriver_ArchtypeTuningSet");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseArchType) == 0x000030, "Member 'UBodyDriver_ArchtypeTuningSet::UseArchType' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ArchetypeIsSelf) == 0x000031, "Member 'UBodyDriver_ArchtypeTuningSet::ArchetypeIsSelf' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseBaseForExplosions) == 0x000032, "Member 'UBodyDriver_ArchtypeTuningSet::UseBaseForExplosions' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseBoundsInsteadOfPushes) == 0x000033, "Member 'UBodyDriver_ArchtypeTuningSet::UseBoundsInsteadOfPushes' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ForceFrontWoundGrabs) == 0x000034, "Member 'UBodyDriver_ArchtypeTuningSet::ForceFrontWoundGrabs' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseSideHeadShotForHeadAlways) == 0x000035, "Member 'UBodyDriver_ArchtypeTuningSet::UseSideHeadShotForHeadAlways' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, DisableReachForWound) == 0x000036, "Member 'UBodyDriver_ArchtypeTuningSet::DisableReachForWound' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, DisableBrace) == 0x000037, "Member 'UBodyDriver_ArchtypeTuningSet::DisableBrace' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, DisableWindmill) == 0x000038, "Member 'UBodyDriver_ArchtypeTuningSet::DisableWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, MoveClavicleHitsToUpperArm) == 0x000039, "Member 'UBodyDriver_ArchtypeTuningSet::MoveClavicleHitsToUpperArm' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, MoveLowerLegHitsToThighs) == 0x00003A, "Member 'UBodyDriver_ArchtypeTuningSet::MoveLowerLegHitsToThighs' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, MoveNeckHitsToHead) == 0x00003B, "Member 'UBodyDriver_ArchtypeTuningSet::MoveNeckHitsToHead' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, OverrideFallenLimitBlendRate) == 0x00003C, "Member 'UBodyDriver_ArchtypeTuningSet::OverrideFallenLimitBlendRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, FallenBaseInitialBoundScale) == 0x000040, "Member 'UBodyDriver_ArchtypeTuningSet::FallenBaseInitialBoundScale' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ArchetypeJointSpeedClamp) == 0x000044, "Member 'UBodyDriver_ArchtypeTuningSet::ArchetypeJointSpeedClamp' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, HandAndForearmsCountsAsNonFootOnGround) == 0x000048, "Member 'UBodyDriver_ArchtypeTuningSet::HandAndForearmsCountsAsNonFootOnGround' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, AppendagesCountsAsNonFootOnGround) == 0x000049, "Member 'UBodyDriver_ArchtypeTuningSet::AppendagesCountsAsNonFootOnGround' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ExplosionForceScale) == 0x00004C, "Member 'UBodyDriver_ArchtypeTuningSet::ExplosionForceScale' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchInitialDistance) == 0x000050, "Member 'UBodyDriver_ArchtypeTuningSet::PatchInitialDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchInitialDistanceMultiplierForNonExplosions) == 0x000054, "Member 'UBodyDriver_ArchtypeTuningSet::PatchInitialDistanceMultiplierForNonExplosions' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchMoveRate) == 0x000058, "Member 'UBodyDriver_ArchtypeTuningSet::PatchMoveRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchMoveRateMultiplierForNonExplosions) == 0x00005C, "Member 'UBodyDriver_ArchtypeTuningSet::PatchMoveRateMultiplierForNonExplosions' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, AdditionalPatchProbeParts) == 0x000060, "Member 'UBodyDriver_ArchtypeTuningSet::AdditionalPatchProbeParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchSize) == 0x000070, "Member 'UBodyDriver_ArchtypeTuningSet::PatchSize' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchSizeMultiplierForNonExplosions) == 0x000074, "Member 'UBodyDriver_ArchtypeTuningSet::PatchSizeMultiplierForNonExplosions' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchMinDist) == 0x000078, "Member 'UBodyDriver_ArchtypeTuningSet::PatchMinDist' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, DisableCollisionLinks) == 0x000080, "Member 'UBodyDriver_ArchtypeTuningSet::DisableCollisionLinks' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ArchetypeInitialBoundScale) == 0x000090, "Member 'UBodyDriver_ArchtypeTuningSet::ArchetypeInitialBoundScale' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ArchetypeInitialBoundScaleParts) == 0x000098, "Member 'UBodyDriver_ArchtypeTuningSet::ArchetypeInitialBoundScaleParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseArchTypeForDebugImpulsesTuning) == 0x0000A8, "Member 'UBodyDriver_ArchtypeTuningSet::UseArchTypeForDebugImpulsesTuning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseArchTypeForApplyImpulseTuning) == 0x0000A9, "Member 'UBodyDriver_ArchtypeTuningSet::UseArchTypeForApplyImpulseTuning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseArchTypeForApplyExplosionTuning) == 0x0000AA, "Member 'UBodyDriver_ArchtypeTuningSet::UseArchTypeForApplyExplosionTuning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, SwitchToFallSlopeAngle) == 0x0000AC, "Member 'UBodyDriver_ArchtypeTuningSet::SwitchToFallSlopeAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ChangeFallSlopAngleBasedOnMovement) == 0x0000B0, "Member 'UBodyDriver_ArchtypeTuningSet::ChangeFallSlopAngleBasedOnMovement' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, SwitchToFallSlopeAngleTrue) == 0x0000B4, "Member 'UBodyDriver_ArchtypeTuningSet::SwitchToFallSlopeAngleTrue' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, SwitchToFallSlopeAngleTrueIfBase) == 0x0000B8, "Member 'UBodyDriver_ArchtypeTuningSet::SwitchToFallSlopeAngleTrueIfBase' has a wrong offset!");

// Class BodyDriverPlugin.BodyDriver_BipedBalanceTuningSet
// 0x1B60 (0x1B90 - 0x0030)
class UBodyDriver_BipedBalanceTuningSet final : public UDataAsset
{
public:
	struct FImpulse                               PushImpulseData;                                   // 0x0030(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               WeakImpulseData;                                   // 0x01C8(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               MediumImpulseData;                                 // 0x0360(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               StrongImpulseData;                                 // 0x04F8(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               RunningImpulseData;                                // 0x0690(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               MediumMeleeImpulseData;                            // 0x0828(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               RunningMeleeImpulseData;                           // 0x09C0(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               SpecialHeadShotImpulseData;                        // 0x0B58(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               SpecialHeadRunningShotImpulseData;                 // 0x0CF0(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               LaunchImpulseData;                                 // 0x0E88(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               BlowImpulseData;                                   // 0x1020(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               StrikeImpulseData;                                 // 0x11B8(0x0198)(Edit, NativeAccessSpecifierPublic)
	float                                         DelayImpulseTime;                                  // 0x1350(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1354[0x4];                                     // 0x1354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectedBlendout                      DirectedBlendoutData;                              // 0x1358(0x01B0)(Edit, NativeAccessSpecifierPublic)
	float                                         COMVelFac;                                         // 0x1508(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRampedCOMVelFac;                                // 0x150C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150D[0x3];                                     // 0x150D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SideMultMin;                                       // 0x1510(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipHeightBlendRate;                                // 0x1514(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngMagClampBoth;                                   // 0x1518(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngMagClampPlanar;                                 // 0x151C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinMagClampBoth;                                   // 0x1520(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistPelvis;                                     // 0x1524(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistPelvis;                                     // 0x1528(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinUPMagClampBoth;                                 // 0x152C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LindampingMoving;                                  // 0x1530(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinUPdampingMoving;                                // 0x1534(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisSpaceGoalUPClampDistMax;                     // 0x1538(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisSpaceGoalPlanarClampDist;                    // 0x153C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLandCompression;                               // 0x1540(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostHipOffset;                                    // 0x1544(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHipHeightOffset;                                // 0x1548(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FacingBasedOnVelMinSpeed;                          // 0x154C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReduceDampingFightingDesiredDirection;             // 0x1550(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseDampingOverTime;                           // 0x1551(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1552[0x2];                                     // 0x1552(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumRequiredLegVerticalDistance;                // 0x1554(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartWeakGravityTime;                              // 0x1558(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopInitialPops;                                   // 0x155C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155D[0x3];                                     // 0x155D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopInitialPopTime;                                // 0x1560(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShrinkBoundsWhenBalancing;                         // 0x1564(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1565[0x3];                                     // 0x1565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShrinkBoundsUprightness;                           // 0x1568(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShrinkBoundsScale;                                 // 0x156C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForelegsControlChest;                              // 0x1570(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ControlPredCOM;                                    // 0x1571(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1572[0x2];                                     // 0x1572(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SwingWeightStagger;                                // 0x1574(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPointForwardOffset;                         // 0x1578(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPointSideOffset;                            // 0x157C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceClampToAngularGoalBottomRange;               // 0x1580(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceClampToAngularGoalTopRange;                  // 0x1584(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerRiseClamp;                                  // 0x1588(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerRiseClampBalanced;                          // 0x158C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerRiseClampSwinging;                          // 0x1590(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerRiseClampTwistedAndBehind;                  // 0x1594(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerRiseClampWoundedLeg;                        // 0x1598(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerRiseClampFinalStep;                         // 0x159C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerUltimateFacingDirectionMagBothPlanted;      // 0x15A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerUltimateFacingDirectionMagSwinging;         // 0x15A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxErrorStepNeutral;                               // 0x15A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortestPlantMax;                                  // 0x15AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTimeBetweenLiftPreps;                          // 0x15B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredPlantedFeet;                               // 0x15B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPhaseComputeStep;                               // 0x15B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootPartSideOffset;                                // 0x15BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BufftopRange;                                      // 0x15C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffbottomRange;                                   // 0x15C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BufftopVal;                                        // 0x15C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffbottomVal;                                     // 0x15CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffAdditive;                                      // 0x15D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxErrorStepNeutralActual;                         // 0x15D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalStepSpeedThresh;                              // 0x15D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReducedSwingTimeMult;                              // 0x15DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeContinueStep;                                 // 0x15E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepCCDWeight;                                     // 0x15E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepHeight;                                        // 0x15E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepTime;                                          // 0x15EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepDist;                                          // 0x15F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingStiffness;                                    // 0x15F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingStiffnessFinal;                               // 0x15F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlantStiffness;                                    // 0x15FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlantAnkleStiffness;                               // 0x1600(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlantStiffnessFullyCompressedMult;                 // 0x1604(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDistanceBasedCompressionLogic;                  // 0x1608(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1609[0x3];                                     // 0x1609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinalCompressionMult;                              // 0x160C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x1610(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeHeight;                                   // 0x1614(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTimeFinalMult;                              // 0x1618(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTimeAnkle;                                  // 0x161C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralStanceDistanceMult;                         // 0x1620(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorCheckStanceDistanceMult;                      // 0x1624(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostImpulseStepSpeedMult;                          // 0x1628(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseStanceBlendTimeDueToBodyAngle;             // 0x162C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162D[0x3];                                     // 0x162D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAllowedFootTiltAngle;                           // 0x1630(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitBeforeSteppingAfterImpulse;                    // 0x1634(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleSizeOtherFoot;                               // 0x1638(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlantedFootUnintentionallyLiftedMaxTime;           // 0x163C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlanSteppingUnintentionallyLiftedMaxTime;          // 0x1640(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LowerUnintentionallyLiftedTimeIfRunning;           // 0x1644(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReducePlantedStiffnessAsTimePassesForceFall;       // 0x1645(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1646[0x2];                                     // 0x1646(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitToReducePlantStiffnessDueToTime;               // 0x1648(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReducePlantedStiffnessAsTimePassesForceFallBlendTime; // 0x164C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReducePlantedStiffnessAsTimePassesForceFallFinalMult; // 0x1650(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseBlendTimeAsTimePassesForceFallBottomRange; // 0x1654(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseBlendTimeAsTimePassesForceFallTopRange;    // 0x1658(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseBlendTimeAsTimePassesForceFallTopVal;      // 0x165C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StiffnessWithGRFRatioMin;                          // 0x1660(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StiffnessWithGRFRatioMax;                          // 0x1664(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SupportCOPBalancingMaxDist;                        // 0x1668(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxExtensionRatioInitial;                          // 0x166C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxExtensionRatio;                                 // 0x1670(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxExtensionRatioFinal;                            // 0x1674(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationBlendForPlant;                          // 0x1678(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationBlendForPlantBlendOutTime;              // 0x167C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitComVelFacMultOverride;                         // 0x1680(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepPawsStrong;                                    // 0x1684(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReducePlantStiffnessDueToBodyAngle;                // 0x1685(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckForFailedPlantsOrSwings;                      // 0x1686(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwingStartFromCurrentPose;                         // 0x1687(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwingInitiallyBendKneeRelativeToCurrent;           // 0x1688(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpecialForePawPlantWeightHandling;                 // 0x1689(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168A[0x2];                                     // 0x168A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBlendHeightPlanted;                             // 0x168C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceStepTorsoAngle;                               // 0x1690(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxForceStepsFromBodyAngle;                        // 0x1694(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KneeCloseToGroundDistOverride;                     // 0x1698(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169C[0x4];                                     // 0x169C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 OverrideHandPlantIKWeights;                        // 0x16A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 OverrideLegPlantIKWeights;                         // 0x16B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 OverrideHandSwingIKWeights;                        // 0x16C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 OverrideLegSwingIKWeights;                         // 0x16D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          RampUpStiffnessPostActivation;                     // 0x16E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAllPlantedStiffnessBoost;                       // 0x16E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16E2[0x2];                                     // 0x16E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReducePlantStiffnessDueToBodyAngleTopRange;        // 0x16E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReducePlantStiffnessDueToBodyAngleBottomRange;     // 0x16E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReducePlantStiffnessDueToBodyAngleTopVal;          // 0x16EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepFontLegsForwardAndViceVersa;                   // 0x16F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F1[0x3];                                     // 0x16F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllowedOppositeSideBreachDistance;                 // 0x16F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableAbortingSwingIfAccidentallyPivot;           // 0x16F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoRampDownCOMVelFac;                               // 0x16F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16FA[0x2];                                     // 0x16FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RampDownCOMVelFacStartTime;                        // 0x16FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RampDownCOMVelFacEndTime;                          // 0x1700(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RampDownCOMVelFacEndValue;                         // 0x1704(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DecreaseCOMVelFacDueToLean;                        // 0x1708(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StaggerIncreaseSwingTimeOverTime;                  // 0x1709(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170A[0x2];                                     // 0x170A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaggerIncreaseSwingTimeOverTimeBottomRange;       // 0x170C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerIncreaseSwingTimeOverTimeTopRange;          // 0x1710(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialMinPhaseWhenOppositeSagitalOrDiagonalSwinging; // 0x1714(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMinPhaseWhenOppositeSagitalOrDiagonalSwinging; // 0x1718(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingTimeIncreaseAmountOverTime;                   // 0x171C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForeLegStanceWidthAdjustment;                      // 0x1720(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForeLegStanceWidthAdjustmentFinal;                 // 0x1724(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForeLegStanceWidthAdjustmentBlendToFinalStart;     // 0x1728(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForeLegStanceWidthAdjustmentBlendToFinalTime;      // 0x172C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HindLegStanceWidthAdjustment;                      // 0x1730(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReduceSwingStiffnessAsTimePassesForceFall;         // 0x1734(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1735[0x3];                                     // 0x1735(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HindLegStrengthBump;                               // 0x1738(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HindLegStrengthBumpSwinging;                       // 0x173C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForelegInitialStrengthBump;                        // 0x1740(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForelegPostInitialStrengthBump;                    // 0x1744(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForeLegCompressedTopRangeMult;                     // 0x1748(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuadStaggerStepFocusedNewWay;                      // 0x174C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174D[0x3];                                     // 0x174D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceSwingStiffnessDueToBodyAngleForceFallBottomRange; // 0x1750(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         COMControlStiffnessBalanced;                       // 0x1754(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         COMControlCurrentPoseStrength;                     // 0x1758(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         COMControlLinMagCap;                               // 0x175C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeLimWindmillSingle;                            // 0x1760(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeLimWindmillBoth;                              // 0x1764(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampWindmillMin;                                  // 0x1768(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampWindmillMax;                                  // 0x176C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightWindmill;                                    // 0x1770(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseStiffnessWindmill;                              // 0x1774(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultWindmill;                                      // 0x1778(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistWindmill;                                      // 0x177C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadWindmill;                                       // 0x1780(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardOffsetWindmill;                             // 0x1784(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpOffsetWindmill;                                  // 0x1788(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindmillMaxLengthRatio;                            // 0x178C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceInitialWindmillTime;                          // 0x1790(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundExtraHandBuffer;                      // 0x1794(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundExpandShoulderLimitRatioAfterConstraintMade; // 0x1798(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundExpandWristLimitRatioAfterConstraintMade; // 0x179C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReflectSpineBackWoundsToTheClosestSide;            // 0x17A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReachForWoundGrabFrontOfClosestLeg;                // 0x17A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceHeadHitsToReachWithBothHands;                 // 0x17A2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A3[0x1];                                     // 0x17A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChanceOfAnyReach;                                  // 0x17A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceOfDoubleReach;                               // 0x17A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundUseCOMVelFac;                         // 0x17AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundExtraSideOffset;                      // 0x17B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadReachFromBehindSideOffset;                     // 0x17B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadReachFromBehindForwardOffset;                  // 0x17B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadReachFromBehindUpOffset;                       // 0x17BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadReachSideOffset;                               // 0x17C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadReachForwardOffset;                            // 0x17C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadReachUpOffset;                                 // 0x17C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachArmAroundMinDist;                             // 0x17CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForLegBuffer;                                 // 0x17D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundConstraintDistance;                   // 0x17D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReachForWoundLoosenLimitsAfterConstraint;          // 0x17D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReachForWoundBiasIKPathHeightUp;                   // 0x17D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReachForWoundAllowConstraints;                     // 0x17DA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DB[0x1];                                     // 0x17DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BraceLenth;                                        // 0x17DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DontStopBraceUnlessLowVelocity;                    // 0x17E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E1[0x3];                                     // 0x17E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BraceOpenWristLimitsRatio;                         // 0x17E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceFacingDotLim;                                 // 0x17E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceFacingDotLimBracing;                          // 0x17EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceSideDotLim;                                   // 0x17F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceSideDotLimBracing;                            // 0x17F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceBehinfBackDotLim;                             // 0x17F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceInitialDelay;                                 // 0x17FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceRaiseHandInitialTime;                         // 0x1800(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceMinVelocity;                                  // 0x1804(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideCOMVelFacForBrace;                         // 0x1808(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceTopValSpeed;                                  // 0x180C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceBottomValSpeed;                               // 0x1810(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceTopValStiffness;                              // 0x1814(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceBottomValStiffness;                           // 0x1818(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceSpeedIncreaseCloseToGround;                   // 0x181C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceStiffnessIncreaseCloseToGround;               // 0x1820(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoSavageAttack;                                    // 0x1824(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SavageAttackUsePitchClamping;                      // 0x1825(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SavageAttackOffsetsUseSpineDirs;                   // 0x1826(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1827[0x1];                                     // 0x1827(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SavageAttackDebugTarget;                           // 0x1828(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageWindupTime;                                  // 0x1834(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageSpringTime;                                  // 0x1838(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackPostWaitTime;                          // 0x183C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackOtherArmPhaseGoTime;                   // 0x1840(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackDistance;                              // 0x1844(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackConeAngle;                             // 0x1848(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackConeAngleDownAttacks;                  // 0x184C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackPivotForwardOffset;                    // 0x1850(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackPivotSideOffset;                       // 0x1854(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackPivotUpOffsetMin;                      // 0x1858(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackPivotUpOffsetMax;                      // 0x185C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackForwardPullbackOffset;                 // 0x1860(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackSidePullbackOffset;                    // 0x1864(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackUpPullbackOffset;                      // 0x1868(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackOverrideArcAngle;                      // 0x186C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackSpineStiffness;                        // 0x1870(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackSpineSpeed;                            // 0x1874(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SavageAttackSpineFlattenAxis;                      // 0x1878(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1879[0x3];                                     // 0x1879(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SavageAttackUpPullbackSpeed;                       // 0x187C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackUpPullbackStiffness;                   // 0x1880(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackUpPullbackWeight;                      // 0x1884(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackUpPullbackBlendRate;                   // 0x1888(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageSpineMaxOffsetAngle;                         // 0x188C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageSpinePriority;                               // 0x1890(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageMiddleRangeFollowThoughMult;                 // 0x1894(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackWindupBaseWeight;                      // 0x1898(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackReduceStiffnessTopRange;               // 0x189C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackReduceStiffnessBottomRange;            // 0x18A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackReduceStiffnessTopVal;                 // 0x18A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PriorityCurrentPose;                               // 0x18A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseStiffnessCurrentPose;                           // 0x18AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PriorityTrackingPose;                              // 0x18B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseStiffnessTrackingPose;                          // 0x18B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultArmsJointSpeed;                             // 0x18B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialHeadWeaknessTime;                           // 0x18BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpineWeaknessTime;                          // 0x18C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SlowJointSpeedOverTime;                            // 0x18C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C5[0x3];                                     // 0x18C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideNeckStiffness;                             // 0x18C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideNeckRecoveryRate;                          // 0x18CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeBodyParts                                   SpineBalanceEndPartOverride;                       // 0x18D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D1[0x3];                                     // 0x18D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HunchStaggerTopRange;                              // 0x18D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HunchStaggerBottomRange;                           // 0x18D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HunchStaggerTopVal;                                // 0x18DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HunchStaggerBottomVal;                             // 0x18E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HunchFromCurrentPose;                              // 0x18E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowSpineUpright;                                 // 0x18E5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E6[0x2];                                     // 0x18E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpineUprightMinVel;                                // 0x18E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HunchAngleMax;                                     // 0x18EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoHeadlook;                                        // 0x18F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18F1[0x3];                                     // 0x18F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Headlookdist;                                      // 0x18F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadlookDistUnbalanced;                            // 0x18F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Headlookrange;                                     // 0x18FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseStiffnessHeadLook;                              // 0x1900(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightHeadLook;                                    // 0x1904(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampHeadLook;                                     // 0x1908(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeBodyParts                                   HeadLookBasePartOverride;                          // 0x190C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowLookingAtWound;                               // 0x190D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowLookingAtBracePoint;                          // 0x190E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_190F[0x1];                                     // 0x190F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardOffsetHeadPos;                              // 0x1910(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpOffsetHeadPos;                                   // 0x1914(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedAlpha;                                        // 0x1918(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenOverAngleFromUpright;                        // 0x191C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenOverAngleFromUprightInitialBoost;            // 0x1920(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenOverAngleFromUprightInitialBoostTime;        // 0x1924(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraTimeWithForNonFootOnGroundBeforeFall;         // 0x1928(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbablyFallingCheckMinSpeed;                      // 0x192C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseRagdollFrictionIfProbablyFalling;          // 0x1930(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreLean;                                        // 0x1931(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreNonFootOnGround;                             // 0x1932(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBipedThatMayStartOnAllFours;                     // 0x1933(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchToFallTimeout;                               // 0x1934(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchToFallTipAngle;                              // 0x1938(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesChance;                                 // 0x193C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeUntilAttempt;                       // 0x1940(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesSwitchToDropTimeout;                    // 0x1944(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FallToKneesUseStabilizationRegardless;             // 0x1948(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1949[0x3];                                     // 0x1949(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallToKneesErrorToStopStepping;                    // 0x194C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesAbortBodyAngle;                         // 0x1950(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1954[0x4];                                     // 0x1954(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpulse                               FallToKneesStabilizationHandling;                  // 0x1958(0x0198)(Edit, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeUntilDropMin;                       // 0x1AF0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeUntilDropMax;                       // 0x1AF4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeUntilFallMin;                       // 0x1AF8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeUntilFallMax;                       // 0x1AFC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeBalanceRequired;                    // 0x1B00(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesPushCOMDistance;                        // 0x1B04(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesPushAngle;                              // 0x1B08(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesPushMagFall;                            // 0x1B0C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesPushTime;                               // 0x1B10(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesFinalStrengthRatioArms;                 // 0x1B14(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeToHunchBlendout;                    // 0x1B18(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1C[0x4];                                     // 0x1B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EeBodyParts>                           FallToKneesPushIncludeParts;                       // 0x1B20(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          FallToKneesStopStaggerStayUprightIfNotAttemptingKnees; // 0x1B30(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFallToKneesFrictionWhenFallen;                  // 0x1B31(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDesiredCOMRoute;                                // 0x1B32(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B33[0x1];                                     // 0x1B33(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PushToSideWaitTime;                                // 0x1B34(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushToSideRampTime;                                // 0x1B38(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushToSideMagMax;                                  // 0x1B3C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushToSideUprightLim;                              // 0x1B40(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SupportForceLeans;                                 // 0x1B44(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCurrentVelDirectionForLean;                     // 0x1B45(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B46[0x2];                                     // 0x1B46(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FacingMult;                                        // 0x1B48(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownMult;                                          // 0x1B4C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeNeckForPush;                                // 0x1B50(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResistForwardOrBackwardFall;                       // 0x1B51(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SupportForceLeanHindlegsAlso;                      // 0x1B52(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B53[0x1];                                     // 0x1B53(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SupportForceLeanBreachDistance;                    // 0x1B54(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SupportForceLeansStartTime;                        // 0x1B58(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApplyPointUpOffset;                                // 0x1B5C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoRobotPowerDown;                                  // 0x1B60(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B61[0x3];                                     // 0x1B61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmsPowerDownStartTime;                            // 0x1B64(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmsPowerDownDuration;                             // 0x1B68(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmsPowerDownMinStrengthMultiplier;                // 0x1B6C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBodyPowerDownStartTime;                       // 0x1B70(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBodyPowerDownDuration;                        // 0x1B74(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBodyPowerDownMinStrengthMultiplier;           // 0x1B78(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerBodyPowerDownStartTime;                       // 0x1B7C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerBodyPowerDownDuration;                        // 0x1B80(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerBodyPowerDownMinStrengthMultiplier;           // 0x1B84(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RateCOMWeight;                                     // 0x1B88(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8C[0x4];                                     // 0x1B8C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_BipedBalanceTuningSet">();
	}
	static class UBodyDriver_BipedBalanceTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_BipedBalanceTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_BipedBalanceTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_BipedBalanceTuningSet");
static_assert(sizeof(UBodyDriver_BipedBalanceTuningSet) == 0x001B90, "Wrong size on UBodyDriver_BipedBalanceTuningSet");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PushImpulseData) == 0x000030, "Member 'UBodyDriver_BipedBalanceTuningSet::PushImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WeakImpulseData) == 0x0001C8, "Member 'UBodyDriver_BipedBalanceTuningSet::WeakImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MediumImpulseData) == 0x000360, "Member 'UBodyDriver_BipedBalanceTuningSet::MediumImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StrongImpulseData) == 0x0004F8, "Member 'UBodyDriver_BipedBalanceTuningSet::StrongImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RunningImpulseData) == 0x000690, "Member 'UBodyDriver_BipedBalanceTuningSet::RunningImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MediumMeleeImpulseData) == 0x000828, "Member 'UBodyDriver_BipedBalanceTuningSet::MediumMeleeImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RunningMeleeImpulseData) == 0x0009C0, "Member 'UBodyDriver_BipedBalanceTuningSet::RunningMeleeImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SpecialHeadShotImpulseData) == 0x000B58, "Member 'UBodyDriver_BipedBalanceTuningSet::SpecialHeadShotImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SpecialHeadRunningShotImpulseData) == 0x000CF0, "Member 'UBodyDriver_BipedBalanceTuningSet::SpecialHeadRunningShotImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LaunchImpulseData) == 0x000E88, "Member 'UBodyDriver_BipedBalanceTuningSet::LaunchImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BlowImpulseData) == 0x001020, "Member 'UBodyDriver_BipedBalanceTuningSet::BlowImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StrikeImpulseData) == 0x0011B8, "Member 'UBodyDriver_BipedBalanceTuningSet::StrikeImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DelayImpulseTime) == 0x001350, "Member 'UBodyDriver_BipedBalanceTuningSet::DelayImpulseTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DirectedBlendoutData) == 0x001358, "Member 'UBodyDriver_BipedBalanceTuningSet::DirectedBlendoutData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, COMVelFac) == 0x001508, "Member 'UBodyDriver_BipedBalanceTuningSet::COMVelFac' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseRampedCOMVelFac) == 0x00150C, "Member 'UBodyDriver_BipedBalanceTuningSet::UseRampedCOMVelFac' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SideMultMin) == 0x001510, "Member 'UBodyDriver_BipedBalanceTuningSet::SideMultMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HipHeightBlendRate) == 0x001514, "Member 'UBodyDriver_BipedBalanceTuningSet::HipHeightBlendRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AngMagClampBoth) == 0x001518, "Member 'UBodyDriver_BipedBalanceTuningSet::AngMagClampBoth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AngMagClampPlanar) == 0x00151C, "Member 'UBodyDriver_BipedBalanceTuningSet::AngMagClampPlanar' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LinMagClampBoth) == 0x001520, "Member 'UBodyDriver_BipedBalanceTuningSet::LinMagClampBoth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MinDistPelvis) == 0x001524, "Member 'UBodyDriver_BipedBalanceTuningSet::MinDistPelvis' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxDistPelvis) == 0x001528, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxDistPelvis' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LinUPMagClampBoth) == 0x00152C, "Member 'UBodyDriver_BipedBalanceTuningSet::LinUPMagClampBoth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LindampingMoving) == 0x001530, "Member 'UBodyDriver_BipedBalanceTuningSet::LindampingMoving' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LinUPdampingMoving) == 0x001534, "Member 'UBodyDriver_BipedBalanceTuningSet::LinUPdampingMoving' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PelvisSpaceGoalUPClampDistMax) == 0x001538, "Member 'UBodyDriver_BipedBalanceTuningSet::PelvisSpaceGoalUPClampDistMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PelvisSpaceGoalPlanarClampDist) == 0x00153C, "Member 'UBodyDriver_BipedBalanceTuningSet::PelvisSpaceGoalPlanarClampDist' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FootLandCompression) == 0x001540, "Member 'UBodyDriver_BipedBalanceTuningSet::FootLandCompression' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BoostHipOffset) == 0x001544, "Member 'UBodyDriver_BipedBalanceTuningSet::BoostHipOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxHipHeightOffset) == 0x001548, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxHipHeightOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FacingBasedOnVelMinSpeed) == 0x00154C, "Member 'UBodyDriver_BipedBalanceTuningSet::FacingBasedOnVelMinSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReduceDampingFightingDesiredDirection) == 0x001550, "Member 'UBodyDriver_BipedBalanceTuningSet::ReduceDampingFightingDesiredDirection' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseDampingOverTime) == 0x001551, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseDampingOverTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MinimumRequiredLegVerticalDistance) == 0x001554, "Member 'UBodyDriver_BipedBalanceTuningSet::MinimumRequiredLegVerticalDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StartWeakGravityTime) == 0x001558, "Member 'UBodyDriver_BipedBalanceTuningSet::StartWeakGravityTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StopInitialPops) == 0x00155C, "Member 'UBodyDriver_BipedBalanceTuningSet::StopInitialPops' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StopInitialPopTime) == 0x001560, "Member 'UBodyDriver_BipedBalanceTuningSet::StopInitialPopTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ShrinkBoundsWhenBalancing) == 0x001564, "Member 'UBodyDriver_BipedBalanceTuningSet::ShrinkBoundsWhenBalancing' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ShrinkBoundsUprightness) == 0x001568, "Member 'UBodyDriver_BipedBalanceTuningSet::ShrinkBoundsUprightness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ShrinkBoundsScale) == 0x00156C, "Member 'UBodyDriver_BipedBalanceTuningSet::ShrinkBoundsScale' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForelegsControlChest) == 0x001570, "Member 'UBodyDriver_BipedBalanceTuningSet::ForelegsControlChest' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ControlPredCOM) == 0x001571, "Member 'UBodyDriver_BipedBalanceTuningSet::ControlPredCOM' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SwingWeightStagger) == 0x001574, "Member 'UBodyDriver_BipedBalanceTuningSet::SwingWeightStagger' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ControlPointForwardOffset) == 0x001578, "Member 'UBodyDriver_BipedBalanceTuningSet::ControlPointForwardOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ControlPointSideOffset) == 0x00157C, "Member 'UBodyDriver_BipedBalanceTuningSet::ControlPointSideOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReduceClampToAngularGoalBottomRange) == 0x001580, "Member 'UBodyDriver_BipedBalanceTuningSet::ReduceClampToAngularGoalBottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReduceClampToAngularGoalTopRange) == 0x001584, "Member 'UBodyDriver_BipedBalanceTuningSet::ReduceClampToAngularGoalTopRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerRiseClamp) == 0x001588, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerRiseClamp' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerRiseClampBalanced) == 0x00158C, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerRiseClampBalanced' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerRiseClampSwinging) == 0x001590, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerRiseClampSwinging' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerRiseClampTwistedAndBehind) == 0x001594, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerRiseClampTwistedAndBehind' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerRiseClampWoundedLeg) == 0x001598, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerRiseClampWoundedLeg' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerRiseClampFinalStep) == 0x00159C, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerRiseClampFinalStep' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerUltimateFacingDirectionMagBothPlanted) == 0x0015A0, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerUltimateFacingDirectionMagBothPlanted' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerUltimateFacingDirectionMagSwinging) == 0x0015A4, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerUltimateFacingDirectionMagSwinging' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxErrorStepNeutral) == 0x0015A8, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxErrorStepNeutral' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ShortestPlantMax) == 0x0015AC, "Member 'UBodyDriver_BipedBalanceTuningSet::ShortestPlantMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WaitTimeBetweenLiftPreps) == 0x0015B0, "Member 'UBodyDriver_BipedBalanceTuningSet::WaitTimeBetweenLiftPreps' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RequiredPlantedFeet) == 0x0015B4, "Member 'UBodyDriver_BipedBalanceTuningSet::RequiredPlantedFeet' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxPhaseComputeStep) == 0x0015B8, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxPhaseComputeStep' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RootPartSideOffset) == 0x0015BC, "Member 'UBodyDriver_BipedBalanceTuningSet::RootPartSideOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BufftopRange) == 0x0015C0, "Member 'UBodyDriver_BipedBalanceTuningSet::BufftopRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BuffbottomRange) == 0x0015C4, "Member 'UBodyDriver_BipedBalanceTuningSet::BuffbottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BufftopVal) == 0x0015C8, "Member 'UBodyDriver_BipedBalanceTuningSet::BufftopVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BuffbottomVal) == 0x0015CC, "Member 'UBodyDriver_BipedBalanceTuningSet::BuffbottomVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BuffAdditive) == 0x0015D0, "Member 'UBodyDriver_BipedBalanceTuningSet::BuffAdditive' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxErrorStepNeutralActual) == 0x0015D4, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxErrorStepNeutralActual' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FinalStepSpeedThresh) == 0x0015D8, "Member 'UBodyDriver_BipedBalanceTuningSet::FinalStepSpeedThresh' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducedSwingTimeMult) == 0x0015DC, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducedSwingTimeMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RangeContinueStep) == 0x0015E0, "Member 'UBodyDriver_BipedBalanceTuningSet::RangeContinueStep' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StepCCDWeight) == 0x0015E4, "Member 'UBodyDriver_BipedBalanceTuningSet::StepCCDWeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StepHeight) == 0x0015E8, "Member 'UBodyDriver_BipedBalanceTuningSet::StepHeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StepTime) == 0x0015EC, "Member 'UBodyDriver_BipedBalanceTuningSet::StepTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StepDist) == 0x0015F0, "Member 'UBodyDriver_BipedBalanceTuningSet::StepDist' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SwingStiffness) == 0x0015F4, "Member 'UBodyDriver_BipedBalanceTuningSet::SwingStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SwingStiffnessFinal) == 0x0015F8, "Member 'UBodyDriver_BipedBalanceTuningSet::SwingStiffnessFinal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PlantStiffness) == 0x0015FC, "Member 'UBodyDriver_BipedBalanceTuningSet::PlantStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PlantAnkleStiffness) == 0x001600, "Member 'UBodyDriver_BipedBalanceTuningSet::PlantAnkleStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PlantStiffnessFullyCompressedMult) == 0x001604, "Member 'UBodyDriver_BipedBalanceTuningSet::PlantStiffnessFullyCompressedMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseDistanceBasedCompressionLogic) == 0x001608, "Member 'UBodyDriver_BipedBalanceTuningSet::UseDistanceBasedCompressionLogic' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FinalCompressionMult) == 0x00160C, "Member 'UBodyDriver_BipedBalanceTuningSet::FinalCompressionMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BlendInTime) == 0x001610, "Member 'UBodyDriver_BipedBalanceTuningSet::BlendInTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BlendTimeHeight) == 0x001614, "Member 'UBodyDriver_BipedBalanceTuningSet::BlendTimeHeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BlendInTimeFinalMult) == 0x001618, "Member 'UBodyDriver_BipedBalanceTuningSet::BlendInTimeFinalMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BlendInTimeAnkle) == 0x00161C, "Member 'UBodyDriver_BipedBalanceTuningSet::BlendInTimeAnkle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, NeutralStanceDistanceMult) == 0x001620, "Member 'UBodyDriver_BipedBalanceTuningSet::NeutralStanceDistanceMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ErrorCheckStanceDistanceMult) == 0x001624, "Member 'UBodyDriver_BipedBalanceTuningSet::ErrorCheckStanceDistanceMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PostImpulseStepSpeedMult) == 0x001628, "Member 'UBodyDriver_BipedBalanceTuningSet::PostImpulseStepSpeedMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseStanceBlendTimeDueToBodyAngle) == 0x00162C, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseStanceBlendTimeDueToBodyAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxAllowedFootTiltAngle) == 0x001630, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxAllowedFootTiltAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WaitBeforeSteppingAfterImpulse) == 0x001634, "Member 'UBodyDriver_BipedBalanceTuningSet::WaitBeforeSteppingAfterImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, CircleSizeOtherFoot) == 0x001638, "Member 'UBodyDriver_BipedBalanceTuningSet::CircleSizeOtherFoot' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PlantedFootUnintentionallyLiftedMaxTime) == 0x00163C, "Member 'UBodyDriver_BipedBalanceTuningSet::PlantedFootUnintentionallyLiftedMaxTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PlanSteppingUnintentionallyLiftedMaxTime) == 0x001640, "Member 'UBodyDriver_BipedBalanceTuningSet::PlanSteppingUnintentionallyLiftedMaxTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LowerUnintentionallyLiftedTimeIfRunning) == 0x001644, "Member 'UBodyDriver_BipedBalanceTuningSet::LowerUnintentionallyLiftedTimeIfRunning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducePlantedStiffnessAsTimePassesForceFall) == 0x001645, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducePlantedStiffnessAsTimePassesForceFall' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WaitToReducePlantStiffnessDueToTime) == 0x001648, "Member 'UBodyDriver_BipedBalanceTuningSet::WaitToReducePlantStiffnessDueToTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducePlantedStiffnessAsTimePassesForceFallBlendTime) == 0x00164C, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducePlantedStiffnessAsTimePassesForceFallBlendTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducePlantedStiffnessAsTimePassesForceFallFinalMult) == 0x001650, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducePlantedStiffnessAsTimePassesForceFallFinalMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseBlendTimeAsTimePassesForceFallBottomRange) == 0x001654, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseBlendTimeAsTimePassesForceFallBottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseBlendTimeAsTimePassesForceFallTopRange) == 0x001658, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseBlendTimeAsTimePassesForceFallTopRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseBlendTimeAsTimePassesForceFallTopVal) == 0x00165C, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseBlendTimeAsTimePassesForceFallTopVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StiffnessWithGRFRatioMin) == 0x001660, "Member 'UBodyDriver_BipedBalanceTuningSet::StiffnessWithGRFRatioMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StiffnessWithGRFRatioMax) == 0x001664, "Member 'UBodyDriver_BipedBalanceTuningSet::StiffnessWithGRFRatioMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SupportCOPBalancingMaxDist) == 0x001668, "Member 'UBodyDriver_BipedBalanceTuningSet::SupportCOPBalancingMaxDist' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxExtensionRatioInitial) == 0x00166C, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxExtensionRatioInitial' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxExtensionRatio) == 0x001670, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxExtensionRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxExtensionRatioFinal) == 0x001674, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxExtensionRatioFinal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxRotationBlendForPlant) == 0x001678, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxRotationBlendForPlant' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxRotationBlendForPlantBlendOutTime) == 0x00167C, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxRotationBlendForPlantBlendOutTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, InitComVelFacMultOverride) == 0x001680, "Member 'UBodyDriver_BipedBalanceTuningSet::InitComVelFacMultOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, KeepPawsStrong) == 0x001684, "Member 'UBodyDriver_BipedBalanceTuningSet::KeepPawsStrong' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducePlantStiffnessDueToBodyAngle) == 0x001685, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducePlantStiffnessDueToBodyAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, CheckForFailedPlantsOrSwings) == 0x001686, "Member 'UBodyDriver_BipedBalanceTuningSet::CheckForFailedPlantsOrSwings' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SwingStartFromCurrentPose) == 0x001687, "Member 'UBodyDriver_BipedBalanceTuningSet::SwingStartFromCurrentPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SwingInitiallyBendKneeRelativeToCurrent) == 0x001688, "Member 'UBodyDriver_BipedBalanceTuningSet::SwingInitiallyBendKneeRelativeToCurrent' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SpecialForePawPlantWeightHandling) == 0x001689, "Member 'UBodyDriver_BipedBalanceTuningSet::SpecialForePawPlantWeightHandling' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxBlendHeightPlanted) == 0x00168C, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxBlendHeightPlanted' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForceStepTorsoAngle) == 0x001690, "Member 'UBodyDriver_BipedBalanceTuningSet::ForceStepTorsoAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxForceStepsFromBodyAngle) == 0x001694, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxForceStepsFromBodyAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, KneeCloseToGroundDistOverride) == 0x001698, "Member 'UBodyDriver_BipedBalanceTuningSet::KneeCloseToGroundDistOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, OverrideHandPlantIKWeights) == 0x0016A0, "Member 'UBodyDriver_BipedBalanceTuningSet::OverrideHandPlantIKWeights' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, OverrideLegPlantIKWeights) == 0x0016B0, "Member 'UBodyDriver_BipedBalanceTuningSet::OverrideLegPlantIKWeights' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, OverrideHandSwingIKWeights) == 0x0016C0, "Member 'UBodyDriver_BipedBalanceTuningSet::OverrideHandSwingIKWeights' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, OverrideLegSwingIKWeights) == 0x0016D0, "Member 'UBodyDriver_BipedBalanceTuningSet::OverrideLegSwingIKWeights' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RampUpStiffnessPostActivation) == 0x0016E0, "Member 'UBodyDriver_BipedBalanceTuningSet::RampUpStiffnessPostActivation' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseAllPlantedStiffnessBoost) == 0x0016E1, "Member 'UBodyDriver_BipedBalanceTuningSet::UseAllPlantedStiffnessBoost' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducePlantStiffnessDueToBodyAngleTopRange) == 0x0016E4, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducePlantStiffnessDueToBodyAngleTopRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducePlantStiffnessDueToBodyAngleBottomRange) == 0x0016E8, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducePlantStiffnessDueToBodyAngleBottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducePlantStiffnessDueToBodyAngleTopVal) == 0x0016EC, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducePlantStiffnessDueToBodyAngleTopVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, KeepFontLegsForwardAndViceVersa) == 0x0016F0, "Member 'UBodyDriver_BipedBalanceTuningSet::KeepFontLegsForwardAndViceVersa' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AllowedOppositeSideBreachDistance) == 0x0016F4, "Member 'UBodyDriver_BipedBalanceTuningSet::AllowedOppositeSideBreachDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DisableAbortingSwingIfAccidentallyPivot) == 0x0016F8, "Member 'UBodyDriver_BipedBalanceTuningSet::DisableAbortingSwingIfAccidentallyPivot' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DoRampDownCOMVelFac) == 0x0016F9, "Member 'UBodyDriver_BipedBalanceTuningSet::DoRampDownCOMVelFac' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RampDownCOMVelFacStartTime) == 0x0016FC, "Member 'UBodyDriver_BipedBalanceTuningSet::RampDownCOMVelFacStartTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RampDownCOMVelFacEndTime) == 0x001700, "Member 'UBodyDriver_BipedBalanceTuningSet::RampDownCOMVelFacEndTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RampDownCOMVelFacEndValue) == 0x001704, "Member 'UBodyDriver_BipedBalanceTuningSet::RampDownCOMVelFacEndValue' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DecreaseCOMVelFacDueToLean) == 0x001708, "Member 'UBodyDriver_BipedBalanceTuningSet::DecreaseCOMVelFacDueToLean' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerIncreaseSwingTimeOverTime) == 0x001709, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerIncreaseSwingTimeOverTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerIncreaseSwingTimeOverTimeBottomRange) == 0x00170C, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerIncreaseSwingTimeOverTimeBottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerIncreaseSwingTimeOverTimeTopRange) == 0x001710, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerIncreaseSwingTimeOverTimeTopRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, InitialMinPhaseWhenOppositeSagitalOrDiagonalSwinging) == 0x001714, "Member 'UBodyDriver_BipedBalanceTuningSet::InitialMinPhaseWhenOppositeSagitalOrDiagonalSwinging' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DefaultMinPhaseWhenOppositeSagitalOrDiagonalSwinging) == 0x001718, "Member 'UBodyDriver_BipedBalanceTuningSet::DefaultMinPhaseWhenOppositeSagitalOrDiagonalSwinging' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SwingTimeIncreaseAmountOverTime) == 0x00171C, "Member 'UBodyDriver_BipedBalanceTuningSet::SwingTimeIncreaseAmountOverTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForeLegStanceWidthAdjustment) == 0x001720, "Member 'UBodyDriver_BipedBalanceTuningSet::ForeLegStanceWidthAdjustment' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForeLegStanceWidthAdjustmentFinal) == 0x001724, "Member 'UBodyDriver_BipedBalanceTuningSet::ForeLegStanceWidthAdjustmentFinal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForeLegStanceWidthAdjustmentBlendToFinalStart) == 0x001728, "Member 'UBodyDriver_BipedBalanceTuningSet::ForeLegStanceWidthAdjustmentBlendToFinalStart' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForeLegStanceWidthAdjustmentBlendToFinalTime) == 0x00172C, "Member 'UBodyDriver_BipedBalanceTuningSet::ForeLegStanceWidthAdjustmentBlendToFinalTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HindLegStanceWidthAdjustment) == 0x001730, "Member 'UBodyDriver_BipedBalanceTuningSet::HindLegStanceWidthAdjustment' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReduceSwingStiffnessAsTimePassesForceFall) == 0x001734, "Member 'UBodyDriver_BipedBalanceTuningSet::ReduceSwingStiffnessAsTimePassesForceFall' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HindLegStrengthBump) == 0x001738, "Member 'UBodyDriver_BipedBalanceTuningSet::HindLegStrengthBump' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HindLegStrengthBumpSwinging) == 0x00173C, "Member 'UBodyDriver_BipedBalanceTuningSet::HindLegStrengthBumpSwinging' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForelegInitialStrengthBump) == 0x001740, "Member 'UBodyDriver_BipedBalanceTuningSet::ForelegInitialStrengthBump' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForelegPostInitialStrengthBump) == 0x001744, "Member 'UBodyDriver_BipedBalanceTuningSet::ForelegPostInitialStrengthBump' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForeLegCompressedTopRangeMult) == 0x001748, "Member 'UBodyDriver_BipedBalanceTuningSet::ForeLegCompressedTopRangeMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, QuadStaggerStepFocusedNewWay) == 0x00174C, "Member 'UBodyDriver_BipedBalanceTuningSet::QuadStaggerStepFocusedNewWay' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReduceSwingStiffnessDueToBodyAngleForceFallBottomRange) == 0x001750, "Member 'UBodyDriver_BipedBalanceTuningSet::ReduceSwingStiffnessDueToBodyAngleForceFallBottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, COMControlStiffnessBalanced) == 0x001754, "Member 'UBodyDriver_BipedBalanceTuningSet::COMControlStiffnessBalanced' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, COMControlCurrentPoseStrength) == 0x001758, "Member 'UBodyDriver_BipedBalanceTuningSet::COMControlCurrentPoseStrength' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, COMControlLinMagCap) == 0x00175C, "Member 'UBodyDriver_BipedBalanceTuningSet::COMControlLinMagCap' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RangeLimWindmillSingle) == 0x001760, "Member 'UBodyDriver_BipedBalanceTuningSet::RangeLimWindmillSingle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RangeLimWindmillBoth) == 0x001764, "Member 'UBodyDriver_BipedBalanceTuningSet::RangeLimWindmillBoth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ClampWindmillMin) == 0x001768, "Member 'UBodyDriver_BipedBalanceTuningSet::ClampWindmillMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ClampWindmillMax) == 0x00176C, "Member 'UBodyDriver_BipedBalanceTuningSet::ClampWindmillMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WeightWindmill) == 0x001770, "Member 'UBodyDriver_BipedBalanceTuningSet::WeightWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseStiffnessWindmill) == 0x001774, "Member 'UBodyDriver_BipedBalanceTuningSet::UseStiffnessWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MultWindmill) == 0x001778, "Member 'UBodyDriver_BipedBalanceTuningSet::MultWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DistWindmill) == 0x00177C, "Member 'UBodyDriver_BipedBalanceTuningSet::DistWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RadWindmill) == 0x001780, "Member 'UBodyDriver_BipedBalanceTuningSet::RadWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForwardOffsetWindmill) == 0x001784, "Member 'UBodyDriver_BipedBalanceTuningSet::ForwardOffsetWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UpOffsetWindmill) == 0x001788, "Member 'UBodyDriver_BipedBalanceTuningSet::UpOffsetWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WindmillMaxLengthRatio) == 0x00178C, "Member 'UBodyDriver_BipedBalanceTuningSet::WindmillMaxLengthRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForceInitialWindmillTime) == 0x001790, "Member 'UBodyDriver_BipedBalanceTuningSet::ForceInitialWindmillTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundExtraHandBuffer) == 0x001794, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundExtraHandBuffer' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundExpandShoulderLimitRatioAfterConstraintMade) == 0x001798, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundExpandShoulderLimitRatioAfterConstraintMade' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundExpandWristLimitRatioAfterConstraintMade) == 0x00179C, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundExpandWristLimitRatioAfterConstraintMade' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReflectSpineBackWoundsToTheClosestSide) == 0x0017A0, "Member 'UBodyDriver_BipedBalanceTuningSet::ReflectSpineBackWoundsToTheClosestSide' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundGrabFrontOfClosestLeg) == 0x0017A1, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundGrabFrontOfClosestLeg' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForceHeadHitsToReachWithBothHands) == 0x0017A2, "Member 'UBodyDriver_BipedBalanceTuningSet::ForceHeadHitsToReachWithBothHands' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ChanceOfAnyReach) == 0x0017A4, "Member 'UBodyDriver_BipedBalanceTuningSet::ChanceOfAnyReach' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ChanceOfDoubleReach) == 0x0017A8, "Member 'UBodyDriver_BipedBalanceTuningSet::ChanceOfDoubleReach' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundUseCOMVelFac) == 0x0017AC, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundUseCOMVelFac' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundExtraSideOffset) == 0x0017B0, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundExtraSideOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HeadReachFromBehindSideOffset) == 0x0017B4, "Member 'UBodyDriver_BipedBalanceTuningSet::HeadReachFromBehindSideOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HeadReachFromBehindForwardOffset) == 0x0017B8, "Member 'UBodyDriver_BipedBalanceTuningSet::HeadReachFromBehindForwardOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HeadReachFromBehindUpOffset) == 0x0017BC, "Member 'UBodyDriver_BipedBalanceTuningSet::HeadReachFromBehindUpOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HeadReachSideOffset) == 0x0017C0, "Member 'UBodyDriver_BipedBalanceTuningSet::HeadReachSideOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HeadReachForwardOffset) == 0x0017C4, "Member 'UBodyDriver_BipedBalanceTuningSet::HeadReachForwardOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HeadReachUpOffset) == 0x0017C8, "Member 'UBodyDriver_BipedBalanceTuningSet::HeadReachUpOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachArmAroundMinDist) == 0x0017CC, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachArmAroundMinDist' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForLegBuffer) == 0x0017D0, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForLegBuffer' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundConstraintDistance) == 0x0017D4, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundConstraintDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundLoosenLimitsAfterConstraint) == 0x0017D8, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundLoosenLimitsAfterConstraint' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundBiasIKPathHeightUp) == 0x0017D9, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundBiasIKPathHeightUp' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundAllowConstraints) == 0x0017DA, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundAllowConstraints' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceLenth) == 0x0017DC, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceLenth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DontStopBraceUnlessLowVelocity) == 0x0017E0, "Member 'UBodyDriver_BipedBalanceTuningSet::DontStopBraceUnlessLowVelocity' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceOpenWristLimitsRatio) == 0x0017E4, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceOpenWristLimitsRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceFacingDotLim) == 0x0017E8, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceFacingDotLim' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceFacingDotLimBracing) == 0x0017EC, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceFacingDotLimBracing' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceSideDotLim) == 0x0017F0, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceSideDotLim' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceSideDotLimBracing) == 0x0017F4, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceSideDotLimBracing' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceBehinfBackDotLim) == 0x0017F8, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceBehinfBackDotLim' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceInitialDelay) == 0x0017FC, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceInitialDelay' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceRaiseHandInitialTime) == 0x001800, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceRaiseHandInitialTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceMinVelocity) == 0x001804, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceMinVelocity' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, OverrideCOMVelFacForBrace) == 0x001808, "Member 'UBodyDriver_BipedBalanceTuningSet::OverrideCOMVelFacForBrace' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceTopValSpeed) == 0x00180C, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceTopValSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceBottomValSpeed) == 0x001810, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceBottomValSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceTopValStiffness) == 0x001814, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceTopValStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceBottomValStiffness) == 0x001818, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceBottomValStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceSpeedIncreaseCloseToGround) == 0x00181C, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceSpeedIncreaseCloseToGround' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceStiffnessIncreaseCloseToGround) == 0x001820, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceStiffnessIncreaseCloseToGround' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DoSavageAttack) == 0x001824, "Member 'UBodyDriver_BipedBalanceTuningSet::DoSavageAttack' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUsePitchClamping) == 0x001825, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUsePitchClamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackOffsetsUseSpineDirs) == 0x001826, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackOffsetsUseSpineDirs' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackDebugTarget) == 0x001828, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackDebugTarget' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageWindupTime) == 0x001834, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageWindupTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageSpringTime) == 0x001838, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageSpringTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackPostWaitTime) == 0x00183C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackPostWaitTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackOtherArmPhaseGoTime) == 0x001840, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackOtherArmPhaseGoTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackDistance) == 0x001844, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackConeAngle) == 0x001848, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackConeAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackConeAngleDownAttacks) == 0x00184C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackConeAngleDownAttacks' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackPivotForwardOffset) == 0x001850, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackPivotForwardOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackPivotSideOffset) == 0x001854, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackPivotSideOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackPivotUpOffsetMin) == 0x001858, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackPivotUpOffsetMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackPivotUpOffsetMax) == 0x00185C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackPivotUpOffsetMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackForwardPullbackOffset) == 0x001860, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackForwardPullbackOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackSidePullbackOffset) == 0x001864, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackSidePullbackOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUpPullbackOffset) == 0x001868, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUpPullbackOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackOverrideArcAngle) == 0x00186C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackOverrideArcAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackSpineStiffness) == 0x001870, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackSpineStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackSpineSpeed) == 0x001874, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackSpineSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackSpineFlattenAxis) == 0x001878, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackSpineFlattenAxis' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUpPullbackSpeed) == 0x00187C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUpPullbackSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUpPullbackStiffness) == 0x001880, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUpPullbackStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUpPullbackWeight) == 0x001884, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUpPullbackWeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUpPullbackBlendRate) == 0x001888, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUpPullbackBlendRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageSpineMaxOffsetAngle) == 0x00188C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageSpineMaxOffsetAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageSpinePriority) == 0x001890, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageSpinePriority' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageMiddleRangeFollowThoughMult) == 0x001894, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageMiddleRangeFollowThoughMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackWindupBaseWeight) == 0x001898, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackWindupBaseWeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackReduceStiffnessTopRange) == 0x00189C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackReduceStiffnessTopRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackReduceStiffnessBottomRange) == 0x0018A0, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackReduceStiffnessBottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackReduceStiffnessTopVal) == 0x0018A4, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackReduceStiffnessTopVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PriorityCurrentPose) == 0x0018A8, "Member 'UBodyDriver_BipedBalanceTuningSet::PriorityCurrentPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseStiffnessCurrentPose) == 0x0018AC, "Member 'UBodyDriver_BipedBalanceTuningSet::UseStiffnessCurrentPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PriorityTrackingPose) == 0x0018B0, "Member 'UBodyDriver_BipedBalanceTuningSet::PriorityTrackingPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseStiffnessTrackingPose) == 0x0018B4, "Member 'UBodyDriver_BipedBalanceTuningSet::UseStiffnessTrackingPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DefaultArmsJointSpeed) == 0x0018B8, "Member 'UBodyDriver_BipedBalanceTuningSet::DefaultArmsJointSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, InitialHeadWeaknessTime) == 0x0018BC, "Member 'UBodyDriver_BipedBalanceTuningSet::InitialHeadWeaknessTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, InitialSpineWeaknessTime) == 0x0018C0, "Member 'UBodyDriver_BipedBalanceTuningSet::InitialSpineWeaknessTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SlowJointSpeedOverTime) == 0x0018C4, "Member 'UBodyDriver_BipedBalanceTuningSet::SlowJointSpeedOverTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, OverrideNeckStiffness) == 0x0018C8, "Member 'UBodyDriver_BipedBalanceTuningSet::OverrideNeckStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, OverrideNeckRecoveryRate) == 0x0018CC, "Member 'UBodyDriver_BipedBalanceTuningSet::OverrideNeckRecoveryRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SpineBalanceEndPartOverride) == 0x0018D0, "Member 'UBodyDriver_BipedBalanceTuningSet::SpineBalanceEndPartOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchStaggerTopRange) == 0x0018D4, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchStaggerTopRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchStaggerBottomRange) == 0x0018D8, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchStaggerBottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchStaggerTopVal) == 0x0018DC, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchStaggerTopVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchStaggerBottomVal) == 0x0018E0, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchStaggerBottomVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchFromCurrentPose) == 0x0018E4, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchFromCurrentPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AllowSpineUpright) == 0x0018E5, "Member 'UBodyDriver_BipedBalanceTuningSet::AllowSpineUpright' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SpineUprightMinVel) == 0x0018E8, "Member 'UBodyDriver_BipedBalanceTuningSet::SpineUprightMinVel' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchAngleMax) == 0x0018EC, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchAngleMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DoHeadlook) == 0x0018F0, "Member 'UBodyDriver_BipedBalanceTuningSet::DoHeadlook' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, Headlookdist) == 0x0018F4, "Member 'UBodyDriver_BipedBalanceTuningSet::Headlookdist' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HeadlookDistUnbalanced) == 0x0018F8, "Member 'UBodyDriver_BipedBalanceTuningSet::HeadlookDistUnbalanced' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, Headlookrange) == 0x0018FC, "Member 'UBodyDriver_BipedBalanceTuningSet::Headlookrange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseStiffnessHeadLook) == 0x001900, "Member 'UBodyDriver_BipedBalanceTuningSet::UseStiffnessHeadLook' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WeightHeadLook) == 0x001904, "Member 'UBodyDriver_BipedBalanceTuningSet::WeightHeadLook' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ClampHeadLook) == 0x001908, "Member 'UBodyDriver_BipedBalanceTuningSet::ClampHeadLook' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HeadLookBasePartOverride) == 0x00190C, "Member 'UBodyDriver_BipedBalanceTuningSet::HeadLookBasePartOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AllowLookingAtWound) == 0x00190D, "Member 'UBodyDriver_BipedBalanceTuningSet::AllowLookingAtWound' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AllowLookingAtBracePoint) == 0x00190E, "Member 'UBodyDriver_BipedBalanceTuningSet::AllowLookingAtBracePoint' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForwardOffsetHeadPos) == 0x001910, "Member 'UBodyDriver_BipedBalanceTuningSet::ForwardOffsetHeadPos' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UpOffsetHeadPos) == 0x001914, "Member 'UBodyDriver_BipedBalanceTuningSet::UpOffsetHeadPos' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SpeedAlpha) == 0x001918, "Member 'UBodyDriver_BipedBalanceTuningSet::SpeedAlpha' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallenOverAngleFromUpright) == 0x00191C, "Member 'UBodyDriver_BipedBalanceTuningSet::FallenOverAngleFromUpright' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallenOverAngleFromUprightInitialBoost) == 0x001920, "Member 'UBodyDriver_BipedBalanceTuningSet::FallenOverAngleFromUprightInitialBoost' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallenOverAngleFromUprightInitialBoostTime) == 0x001924, "Member 'UBodyDriver_BipedBalanceTuningSet::FallenOverAngleFromUprightInitialBoostTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ExtraTimeWithForNonFootOnGroundBeforeFall) == 0x001928, "Member 'UBodyDriver_BipedBalanceTuningSet::ExtraTimeWithForNonFootOnGroundBeforeFall' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ProbablyFallingCheckMinSpeed) == 0x00192C, "Member 'UBodyDriver_BipedBalanceTuningSet::ProbablyFallingCheckMinSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseRagdollFrictionIfProbablyFalling) == 0x001930, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseRagdollFrictionIfProbablyFalling' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IgnoreLean) == 0x001931, "Member 'UBodyDriver_BipedBalanceTuningSet::IgnoreLean' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IgnoreNonFootOnGround) == 0x001932, "Member 'UBodyDriver_BipedBalanceTuningSet::IgnoreNonFootOnGround' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IsBipedThatMayStartOnAllFours) == 0x001933, "Member 'UBodyDriver_BipedBalanceTuningSet::IsBipedThatMayStartOnAllFours' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SwitchToFallTimeout) == 0x001934, "Member 'UBodyDriver_BipedBalanceTuningSet::SwitchToFallTimeout' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SwitchToFallTipAngle) == 0x001938, "Member 'UBodyDriver_BipedBalanceTuningSet::SwitchToFallTipAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesChance) == 0x00193C, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesChance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeUntilAttempt) == 0x001940, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeUntilAttempt' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesSwitchToDropTimeout) == 0x001944, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesSwitchToDropTimeout' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesUseStabilizationRegardless) == 0x001948, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesUseStabilizationRegardless' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesErrorToStopStepping) == 0x00194C, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesErrorToStopStepping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesAbortBodyAngle) == 0x001950, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesAbortBodyAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesStabilizationHandling) == 0x001958, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesStabilizationHandling' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeUntilDropMin) == 0x001AF0, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeUntilDropMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeUntilDropMax) == 0x001AF4, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeUntilDropMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeUntilFallMin) == 0x001AF8, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeUntilFallMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeUntilFallMax) == 0x001AFC, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeUntilFallMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeBalanceRequired) == 0x001B00, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeBalanceRequired' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesPushCOMDistance) == 0x001B04, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesPushCOMDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesPushAngle) == 0x001B08, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesPushAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesPushMagFall) == 0x001B0C, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesPushMagFall' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesPushTime) == 0x001B10, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesPushTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesFinalStrengthRatioArms) == 0x001B14, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesFinalStrengthRatioArms' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeToHunchBlendout) == 0x001B18, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeToHunchBlendout' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesPushIncludeParts) == 0x001B20, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesPushIncludeParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesStopStaggerStayUprightIfNotAttemptingKnees) == 0x001B30, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesStopStaggerStayUprightIfNotAttemptingKnees' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseFallToKneesFrictionWhenFallen) == 0x001B31, "Member 'UBodyDriver_BipedBalanceTuningSet::UseFallToKneesFrictionWhenFallen' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseDesiredCOMRoute) == 0x001B32, "Member 'UBodyDriver_BipedBalanceTuningSet::UseDesiredCOMRoute' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PushToSideWaitTime) == 0x001B34, "Member 'UBodyDriver_BipedBalanceTuningSet::PushToSideWaitTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PushToSideRampTime) == 0x001B38, "Member 'UBodyDriver_BipedBalanceTuningSet::PushToSideRampTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PushToSideMagMax) == 0x001B3C, "Member 'UBodyDriver_BipedBalanceTuningSet::PushToSideMagMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PushToSideUprightLim) == 0x001B40, "Member 'UBodyDriver_BipedBalanceTuningSet::PushToSideUprightLim' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SupportForceLeans) == 0x001B44, "Member 'UBodyDriver_BipedBalanceTuningSet::SupportForceLeans' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseCurrentVelDirectionForLean) == 0x001B45, "Member 'UBodyDriver_BipedBalanceTuningSet::UseCurrentVelDirectionForLean' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FacingMult) == 0x001B48, "Member 'UBodyDriver_BipedBalanceTuningSet::FacingMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DownMult) == 0x001B4C, "Member 'UBodyDriver_BipedBalanceTuningSet::DownMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncludeNeckForPush) == 0x001B50, "Member 'UBodyDriver_BipedBalanceTuningSet::IncludeNeckForPush' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ResistForwardOrBackwardFall) == 0x001B51, "Member 'UBodyDriver_BipedBalanceTuningSet::ResistForwardOrBackwardFall' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SupportForceLeanHindlegsAlso) == 0x001B52, "Member 'UBodyDriver_BipedBalanceTuningSet::SupportForceLeanHindlegsAlso' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SupportForceLeanBreachDistance) == 0x001B54, "Member 'UBodyDriver_BipedBalanceTuningSet::SupportForceLeanBreachDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SupportForceLeansStartTime) == 0x001B58, "Member 'UBodyDriver_BipedBalanceTuningSet::SupportForceLeansStartTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ApplyPointUpOffset) == 0x001B5C, "Member 'UBodyDriver_BipedBalanceTuningSet::ApplyPointUpOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DoRobotPowerDown) == 0x001B60, "Member 'UBodyDriver_BipedBalanceTuningSet::DoRobotPowerDown' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ArmsPowerDownStartTime) == 0x001B64, "Member 'UBodyDriver_BipedBalanceTuningSet::ArmsPowerDownStartTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ArmsPowerDownDuration) == 0x001B68, "Member 'UBodyDriver_BipedBalanceTuningSet::ArmsPowerDownDuration' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ArmsPowerDownMinStrengthMultiplier) == 0x001B6C, "Member 'UBodyDriver_BipedBalanceTuningSet::ArmsPowerDownMinStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UpperBodyPowerDownStartTime) == 0x001B70, "Member 'UBodyDriver_BipedBalanceTuningSet::UpperBodyPowerDownStartTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UpperBodyPowerDownDuration) == 0x001B74, "Member 'UBodyDriver_BipedBalanceTuningSet::UpperBodyPowerDownDuration' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UpperBodyPowerDownMinStrengthMultiplier) == 0x001B78, "Member 'UBodyDriver_BipedBalanceTuningSet::UpperBodyPowerDownMinStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LowerBodyPowerDownStartTime) == 0x001B7C, "Member 'UBodyDriver_BipedBalanceTuningSet::LowerBodyPowerDownStartTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LowerBodyPowerDownDuration) == 0x001B80, "Member 'UBodyDriver_BipedBalanceTuningSet::LowerBodyPowerDownDuration' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LowerBodyPowerDownMinStrengthMultiplier) == 0x001B84, "Member 'UBodyDriver_BipedBalanceTuningSet::LowerBodyPowerDownMinStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RateCOMWeight) == 0x001B88, "Member 'UBodyDriver_BipedBalanceTuningSet::RateCOMWeight' has a wrong offset!");

// Class BodyDriverPlugin.BodyDriver_BaseDataTuningSet
// 0x01F8 (0x0228 - 0x0030)
class UBodyDriver_BaseDataTuningSet final : public UDataAsset
{
public:
	bool                                          EnableBodyDriver;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          PhysicsAssetCheck;                                 // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeCharacterType                               CharacterType;                                     // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReferencePoseForward;                              // 0x0044(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Head;                                              // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Chest;                                             // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeftHand;                                          // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandLocalPointingDir;                          // 0x0080(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandLocalUpDir;                                // 0x008C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeftHandLength;                                    // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RightHand;                                         // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandLocalPointingDir;                         // 0x00B0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandLocalUpDir;                               // 0x00BC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightHandLength;                                   // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LeftFoot;                                          // 0x00D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftFootLocalPointingDir;                          // 0x00E0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftFootLocalUpDir;                                // 0x00EC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeftFootLength;                                    // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RightFoot;                                         // 0x0100(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightFootLocalPointingDir;                         // 0x0110(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightFootLocalUpDir;                               // 0x011C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightFootLength;                                   // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FExtraSupportLimbPair>          ExtraSupportLimbPairs;                             // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EeBodyParts>                           StandingSelfCollisionExcludedParts;                // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EeBodyParts>                           FallenSelfCollisionExcludedParts;                  // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TotalMass;                                         // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppendageMassMultWhenNotBalancing;                 // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TreatAuthoredMassesAsDensities;                    // 0x0168(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseReferenceForIdlePose;                           // 0x0169(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseIdlePoseForReference;                           // 0x016A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B[0x1];                                      // 0x016B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpBoundHack;                                       // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseIdleForTracking;                                // 0x0170(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StandingFootFriction;                              // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartedRunningThreshold;                           // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartedWalkingThreshold;                           // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalDriveIterations;                           // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InternalDriveIterations;                           // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPositionIterations;                             // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinVelocityIterations;                             // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPartInitialLinearVelocity;                      // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPartInitialAngularVelocity;                     // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KillInitialVerticalVelocity;                       // 0x0198(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GraduallyRestoreJointLimitMaxBlendTime;            // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GraduallyRestoreJointLimitMaxMultiplier;           // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialLimitTwistWideningAdd;                      // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialLimitSwingWideningAdd;                      // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EeBodyParts>                           InitialLimitWideningParts;                         // 0x01B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PushesPartRadius;                                  // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushesMaxMagnitude;                                // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushesMagnitudeScaleDepth;                         // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingDirectionWeight;                              // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMeleeAngleFromAttacker;                         // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMeleeAngleFromAttacker;                         // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DontAllowOffAxisImpacts;                           // 0x01D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBalanceBehaviorForStagger;                      // 0x01D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA[0x2];                                      // 0x01DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MeleeDirectionRandomizationAllowance;              // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultBodyJointSpeed;                             // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableBonamik;                                    // 0x01E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableBonamikOnlyAfterFalling;                    // 0x01E5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SlipperyFeet;                                      // 0x01E6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeBodyParts                                   OverridePartForBodyAngleComputation;               // 0x01E7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverridePelvisToHeadUprightAngle;                  // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOldLegLengthComputation;                        // 0x01EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeBodyParts                                   RootPartForQuadrupeds;                             // 0x01ED(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE[0x2];                                      // 0x01EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LegLengthMultForRequiredUPDistance;                // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GraduallyReturnBoundsRate;                         // 0x01F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GraduallyReturnBoundsSize;                         // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GraduallyReturnBoundsSizeFallen;                   // 0x01FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GraduallyReturnBoundsSizeHead;                     // 0x0200(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GraduallyReturnBoundsDontReturnHandsOrFeet;        // 0x0204(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnforceOutOfCollision;                             // 0x0205(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableFallFromHeightLogic;                        // 0x0206(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableInitialRunWalkLogic;                        // 0x0207(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumContactsRequiredForPlantedSupport;              // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableMotorStiffnessLimits;                       // 0x020C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowAutoSwitchToExplosionInCertainCases;          // 0x020D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E[0x2];                                      // 0x020E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OtherJointsLimitRatioExplosionMult;                // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShoulderLimitOpenRatioWhenFallenExplosionMult;     // 0x0214(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffGroundEpsilon;                                  // 0x0218(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFullBodyShake;                                  // 0x021C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IdlePoseTime;                                      // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowForceBaseForHighFPS;                          // 0x0224(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableAllCollision;                               // 0x0225(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyUsePostDeathMotionSwitchToFall;                // 0x0226(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInertiaFix;                                     // 0x0227(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_BaseDataTuningSet">();
	}
	static class UBodyDriver_BaseDataTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_BaseDataTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_BaseDataTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_BaseDataTuningSet");
static_assert(sizeof(UBodyDriver_BaseDataTuningSet) == 0x000228, "Wrong size on UBodyDriver_BaseDataTuningSet");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, EnableBodyDriver) == 0x000030, "Member 'UBodyDriver_BaseDataTuningSet::EnableBodyDriver' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, Scale) == 0x000034, "Member 'UBodyDriver_BaseDataTuningSet::Scale' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, PhysicsAssetCheck) == 0x000038, "Member 'UBodyDriver_BaseDataTuningSet::PhysicsAssetCheck' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, CharacterType) == 0x000040, "Member 'UBodyDriver_BaseDataTuningSet::CharacterType' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, ReferencePoseForward) == 0x000044, "Member 'UBodyDriver_BaseDataTuningSet::ReferencePoseForward' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, Head) == 0x000050, "Member 'UBodyDriver_BaseDataTuningSet::Head' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, Chest) == 0x000060, "Member 'UBodyDriver_BaseDataTuningSet::Chest' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftHand) == 0x000070, "Member 'UBodyDriver_BaseDataTuningSet::LeftHand' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftHandLocalPointingDir) == 0x000080, "Member 'UBodyDriver_BaseDataTuningSet::LeftHandLocalPointingDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftHandLocalUpDir) == 0x00008C, "Member 'UBodyDriver_BaseDataTuningSet::LeftHandLocalUpDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftHandLength) == 0x000098, "Member 'UBodyDriver_BaseDataTuningSet::LeftHandLength' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightHand) == 0x0000A0, "Member 'UBodyDriver_BaseDataTuningSet::RightHand' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightHandLocalPointingDir) == 0x0000B0, "Member 'UBodyDriver_BaseDataTuningSet::RightHandLocalPointingDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightHandLocalUpDir) == 0x0000BC, "Member 'UBodyDriver_BaseDataTuningSet::RightHandLocalUpDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightHandLength) == 0x0000C8, "Member 'UBodyDriver_BaseDataTuningSet::RightHandLength' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftFoot) == 0x0000D0, "Member 'UBodyDriver_BaseDataTuningSet::LeftFoot' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftFootLocalPointingDir) == 0x0000E0, "Member 'UBodyDriver_BaseDataTuningSet::LeftFootLocalPointingDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftFootLocalUpDir) == 0x0000EC, "Member 'UBodyDriver_BaseDataTuningSet::LeftFootLocalUpDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftFootLength) == 0x0000F8, "Member 'UBodyDriver_BaseDataTuningSet::LeftFootLength' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightFoot) == 0x000100, "Member 'UBodyDriver_BaseDataTuningSet::RightFoot' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightFootLocalPointingDir) == 0x000110, "Member 'UBodyDriver_BaseDataTuningSet::RightFootLocalPointingDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightFootLocalUpDir) == 0x00011C, "Member 'UBodyDriver_BaseDataTuningSet::RightFootLocalUpDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightFootLength) == 0x000128, "Member 'UBodyDriver_BaseDataTuningSet::RightFootLength' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, ExtraSupportLimbPairs) == 0x000130, "Member 'UBodyDriver_BaseDataTuningSet::ExtraSupportLimbPairs' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, StandingSelfCollisionExcludedParts) == 0x000140, "Member 'UBodyDriver_BaseDataTuningSet::StandingSelfCollisionExcludedParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, FallenSelfCollisionExcludedParts) == 0x000150, "Member 'UBodyDriver_BaseDataTuningSet::FallenSelfCollisionExcludedParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, TotalMass) == 0x000160, "Member 'UBodyDriver_BaseDataTuningSet::TotalMass' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, AppendageMassMultWhenNotBalancing) == 0x000164, "Member 'UBodyDriver_BaseDataTuningSet::AppendageMassMultWhenNotBalancing' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, TreatAuthoredMassesAsDensities) == 0x000168, "Member 'UBodyDriver_BaseDataTuningSet::TreatAuthoredMassesAsDensities' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UseReferenceForIdlePose) == 0x000169, "Member 'UBodyDriver_BaseDataTuningSet::UseReferenceForIdlePose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UseIdlePoseForReference) == 0x00016A, "Member 'UBodyDriver_BaseDataTuningSet::UseIdlePoseForReference' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UpBoundHack) == 0x00016C, "Member 'UBodyDriver_BaseDataTuningSet::UpBoundHack' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UseIdleForTracking) == 0x000170, "Member 'UBodyDriver_BaseDataTuningSet::UseIdleForTracking' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, StandingFootFriction) == 0x000174, "Member 'UBodyDriver_BaseDataTuningSet::StandingFootFriction' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, StartedRunningThreshold) == 0x000178, "Member 'UBodyDriver_BaseDataTuningSet::StartedRunningThreshold' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, StartedWalkingThreshold) == 0x00017C, "Member 'UBodyDriver_BaseDataTuningSet::StartedWalkingThreshold' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, ExternalDriveIterations) == 0x000180, "Member 'UBodyDriver_BaseDataTuningSet::ExternalDriveIterations' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, InternalDriveIterations) == 0x000184, "Member 'UBodyDriver_BaseDataTuningSet::InternalDriveIterations' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MinPositionIterations) == 0x000188, "Member 'UBodyDriver_BaseDataTuningSet::MinPositionIterations' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MinVelocityIterations) == 0x00018C, "Member 'UBodyDriver_BaseDataTuningSet::MinVelocityIterations' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MaxPartInitialLinearVelocity) == 0x000190, "Member 'UBodyDriver_BaseDataTuningSet::MaxPartInitialLinearVelocity' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MaxPartInitialAngularVelocity) == 0x000194, "Member 'UBodyDriver_BaseDataTuningSet::MaxPartInitialAngularVelocity' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, KillInitialVerticalVelocity) == 0x000198, "Member 'UBodyDriver_BaseDataTuningSet::KillInitialVerticalVelocity' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, GraduallyRestoreJointLimitMaxBlendTime) == 0x00019C, "Member 'UBodyDriver_BaseDataTuningSet::GraduallyRestoreJointLimitMaxBlendTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, GraduallyRestoreJointLimitMaxMultiplier) == 0x0001A0, "Member 'UBodyDriver_BaseDataTuningSet::GraduallyRestoreJointLimitMaxMultiplier' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, InitialLimitTwistWideningAdd) == 0x0001A4, "Member 'UBodyDriver_BaseDataTuningSet::InitialLimitTwistWideningAdd' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, InitialLimitSwingWideningAdd) == 0x0001A8, "Member 'UBodyDriver_BaseDataTuningSet::InitialLimitSwingWideningAdd' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, InitialLimitWideningParts) == 0x0001B0, "Member 'UBodyDriver_BaseDataTuningSet::InitialLimitWideningParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, PushesPartRadius) == 0x0001C0, "Member 'UBodyDriver_BaseDataTuningSet::PushesPartRadius' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, PushesMaxMagnitude) == 0x0001C4, "Member 'UBodyDriver_BaseDataTuningSet::PushesMaxMagnitude' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, PushesMagnitudeScaleDepth) == 0x0001C8, "Member 'UBodyDriver_BaseDataTuningSet::PushesMagnitudeScaleDepth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, SwingDirectionWeight) == 0x0001CC, "Member 'UBodyDriver_BaseDataTuningSet::SwingDirectionWeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MinMeleeAngleFromAttacker) == 0x0001D0, "Member 'UBodyDriver_BaseDataTuningSet::MinMeleeAngleFromAttacker' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MaxMeleeAngleFromAttacker) == 0x0001D4, "Member 'UBodyDriver_BaseDataTuningSet::MaxMeleeAngleFromAttacker' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DontAllowOffAxisImpacts) == 0x0001D8, "Member 'UBodyDriver_BaseDataTuningSet::DontAllowOffAxisImpacts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UseBalanceBehaviorForStagger) == 0x0001D9, "Member 'UBodyDriver_BaseDataTuningSet::UseBalanceBehaviorForStagger' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MeleeDirectionRandomizationAllowance) == 0x0001DC, "Member 'UBodyDriver_BaseDataTuningSet::MeleeDirectionRandomizationAllowance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DefaultBodyJointSpeed) == 0x0001E0, "Member 'UBodyDriver_BaseDataTuningSet::DefaultBodyJointSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DisableBonamik) == 0x0001E4, "Member 'UBodyDriver_BaseDataTuningSet::DisableBonamik' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DisableBonamikOnlyAfterFalling) == 0x0001E5, "Member 'UBodyDriver_BaseDataTuningSet::DisableBonamikOnlyAfterFalling' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, SlipperyFeet) == 0x0001E6, "Member 'UBodyDriver_BaseDataTuningSet::SlipperyFeet' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, OverridePartForBodyAngleComputation) == 0x0001E7, "Member 'UBodyDriver_BaseDataTuningSet::OverridePartForBodyAngleComputation' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, OverridePelvisToHeadUprightAngle) == 0x0001E8, "Member 'UBodyDriver_BaseDataTuningSet::OverridePelvisToHeadUprightAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UseOldLegLengthComputation) == 0x0001EC, "Member 'UBodyDriver_BaseDataTuningSet::UseOldLegLengthComputation' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RootPartForQuadrupeds) == 0x0001ED, "Member 'UBodyDriver_BaseDataTuningSet::RootPartForQuadrupeds' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LegLengthMultForRequiredUPDistance) == 0x0001F0, "Member 'UBodyDriver_BaseDataTuningSet::LegLengthMultForRequiredUPDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, GraduallyReturnBoundsRate) == 0x0001F4, "Member 'UBodyDriver_BaseDataTuningSet::GraduallyReturnBoundsRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, GraduallyReturnBoundsSize) == 0x0001F8, "Member 'UBodyDriver_BaseDataTuningSet::GraduallyReturnBoundsSize' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, GraduallyReturnBoundsSizeFallen) == 0x0001FC, "Member 'UBodyDriver_BaseDataTuningSet::GraduallyReturnBoundsSizeFallen' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, GraduallyReturnBoundsSizeHead) == 0x000200, "Member 'UBodyDriver_BaseDataTuningSet::GraduallyReturnBoundsSizeHead' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, GraduallyReturnBoundsDontReturnHandsOrFeet) == 0x000204, "Member 'UBodyDriver_BaseDataTuningSet::GraduallyReturnBoundsDontReturnHandsOrFeet' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, EnforceOutOfCollision) == 0x000205, "Member 'UBodyDriver_BaseDataTuningSet::EnforceOutOfCollision' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DisableFallFromHeightLogic) == 0x000206, "Member 'UBodyDriver_BaseDataTuningSet::DisableFallFromHeightLogic' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DisableInitialRunWalkLogic) == 0x000207, "Member 'UBodyDriver_BaseDataTuningSet::DisableInitialRunWalkLogic' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, NumContactsRequiredForPlantedSupport) == 0x000208, "Member 'UBodyDriver_BaseDataTuningSet::NumContactsRequiredForPlantedSupport' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DisableMotorStiffnessLimits) == 0x00020C, "Member 'UBodyDriver_BaseDataTuningSet::DisableMotorStiffnessLimits' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, AllowAutoSwitchToExplosionInCertainCases) == 0x00020D, "Member 'UBodyDriver_BaseDataTuningSet::AllowAutoSwitchToExplosionInCertainCases' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, OtherJointsLimitRatioExplosionMult) == 0x000210, "Member 'UBodyDriver_BaseDataTuningSet::OtherJointsLimitRatioExplosionMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, ShoulderLimitOpenRatioWhenFallenExplosionMult) == 0x000214, "Member 'UBodyDriver_BaseDataTuningSet::ShoulderLimitOpenRatioWhenFallenExplosionMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, OffGroundEpsilon) == 0x000218, "Member 'UBodyDriver_BaseDataTuningSet::OffGroundEpsilon' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UseFullBodyShake) == 0x00021C, "Member 'UBodyDriver_BaseDataTuningSet::UseFullBodyShake' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, IdlePoseTime) == 0x000220, "Member 'UBodyDriver_BaseDataTuningSet::IdlePoseTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, AllowForceBaseForHighFPS) == 0x000224, "Member 'UBodyDriver_BaseDataTuningSet::AllowForceBaseForHighFPS' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DisableAllCollision) == 0x000225, "Member 'UBodyDriver_BaseDataTuningSet::DisableAllCollision' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, OnlyUsePostDeathMotionSwitchToFall) == 0x000226, "Member 'UBodyDriver_BaseDataTuningSet::OnlyUsePostDeathMotionSwitchToFall' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UseInertiaFix) == 0x000227, "Member 'UBodyDriver_BaseDataTuningSet::UseInertiaFix' has a wrong offset!");

// Class BodyDriverPlugin.BodyDriver_DebugImpulseTuningSet
// 0x0050 (0x0080 - 0x0030)
class UBodyDriver_DebugImpulseTuningSet final : public UDataAsset
{
public:
	float                                         ForceSwitchToAnimTime;                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRandomImpulses;                              // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TreatAsMelee;                                      // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TreatAsExplosion;                                  // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TreatAsShake;                                      // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyDriverMessageType                        ImpulseType;                                       // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Frequency;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyApplyOncePerActivation;                        // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyWhenInactive;                                 // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyWhenUnbalanced;                               // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitToApplyAfterBalancing;                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceOfWeakRandomImpulse;                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceOfStrongRandomImpulse;                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceOfMeleeMediumRandomImpulse;                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeBodyParts                                   PartOverride;                                      // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOverrideImpulseDirection;                       // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpulseDirectionOverride;                          // 0x0058(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDirectionOverrideTransOffset;               // 0x0064(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseLastAppliedImpulse;                             // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableClickImpulses;                               // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChanceOfWeakClickImpulse;                          // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceOfStrongClickImpulse;                        // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFBIKTestMode;                                // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_DebugImpulseTuningSet">();
	}
	static class UBodyDriver_DebugImpulseTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_DebugImpulseTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_DebugImpulseTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_DebugImpulseTuningSet");
static_assert(sizeof(UBodyDriver_DebugImpulseTuningSet) == 0x000080, "Wrong size on UBodyDriver_DebugImpulseTuningSet");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ForceSwitchToAnimTime) == 0x000030, "Member 'UBodyDriver_DebugImpulseTuningSet::ForceSwitchToAnimTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, EnableRandomImpulses) == 0x000034, "Member 'UBodyDriver_DebugImpulseTuningSet::EnableRandomImpulses' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, TreatAsMelee) == 0x000035, "Member 'UBodyDriver_DebugImpulseTuningSet::TreatAsMelee' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, TreatAsExplosion) == 0x000036, "Member 'UBodyDriver_DebugImpulseTuningSet::TreatAsExplosion' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, TreatAsShake) == 0x000037, "Member 'UBodyDriver_DebugImpulseTuningSet::TreatAsShake' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ImpulseType) == 0x000038, "Member 'UBodyDriver_DebugImpulseTuningSet::ImpulseType' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, Frequency) == 0x00003C, "Member 'UBodyDriver_DebugImpulseTuningSet::Frequency' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, OnlyApplyOncePerActivation) == 0x000040, "Member 'UBodyDriver_DebugImpulseTuningSet::OnlyApplyOncePerActivation' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ApplyWhenInactive) == 0x000041, "Member 'UBodyDriver_DebugImpulseTuningSet::ApplyWhenInactive' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ApplyWhenUnbalanced) == 0x000042, "Member 'UBodyDriver_DebugImpulseTuningSet::ApplyWhenUnbalanced' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, WaitToApplyAfterBalancing) == 0x000044, "Member 'UBodyDriver_DebugImpulseTuningSet::WaitToApplyAfterBalancing' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ChanceOfWeakRandomImpulse) == 0x000048, "Member 'UBodyDriver_DebugImpulseTuningSet::ChanceOfWeakRandomImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ChanceOfStrongRandomImpulse) == 0x00004C, "Member 'UBodyDriver_DebugImpulseTuningSet::ChanceOfStrongRandomImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ChanceOfMeleeMediumRandomImpulse) == 0x000050, "Member 'UBodyDriver_DebugImpulseTuningSet::ChanceOfMeleeMediumRandomImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, PartOverride) == 0x000054, "Member 'UBodyDriver_DebugImpulseTuningSet::PartOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, UseOverrideImpulseDirection) == 0x000055, "Member 'UBodyDriver_DebugImpulseTuningSet::UseOverrideImpulseDirection' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ImpulseDirectionOverride) == 0x000058, "Member 'UBodyDriver_DebugImpulseTuningSet::ImpulseDirectionOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ImpulseDirectionOverrideTransOffset) == 0x000064, "Member 'UBodyDriver_DebugImpulseTuningSet::ImpulseDirectionOverrideTransOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, UseLastAppliedImpulse) == 0x000070, "Member 'UBodyDriver_DebugImpulseTuningSet::UseLastAppliedImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, EnableClickImpulses) == 0x000071, "Member 'UBodyDriver_DebugImpulseTuningSet::EnableClickImpulses' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ChanceOfWeakClickImpulse) == 0x000074, "Member 'UBodyDriver_DebugImpulseTuningSet::ChanceOfWeakClickImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ChanceOfStrongClickImpulse) == 0x000078, "Member 'UBodyDriver_DebugImpulseTuningSet::ChanceOfStrongClickImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, EnableFBIKTestMode) == 0x00007C, "Member 'UBodyDriver_DebugImpulseTuningSet::EnableFBIKTestMode' has a wrong offset!");

// Class BodyDriverPlugin.BodyDriver_BipedFallTuningSet
// 0x3300 (0x3330 - 0x0030)
class UBodyDriver_BipedFallTuningSet final : public UDataAsset
{
public:
	bool                                          OnlyUseSimpleRagdollMode;                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwitchExplosionsToBullet;                          // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeBodyParts                                   OverrideHitPartForSwitchToBullet;                  // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallenRagdollFriction;                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RaiseFrictionOnFeetWhenFallen;                     // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAverageFallenFrictionCombineMode;               // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFallenRagdollFriction;                        // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BraceDisableConsidersBodyAngle;                    // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TrackDeathAnimationWhenSimpleRagdoll;              // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinActivationTime;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActivationTime;                                 // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRagdollActivationTimeOverride> ActivationTimeOverrides;                           // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PostFallForceCleanupTimeOverride;                  // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialTrackingStrength;                           // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalTrackingStrength;                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingStrengthBlendoutTime;                      // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingPoseBlendToGoalTime;                       // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialToMidDampingBlendTime;                      // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidToFinalDampingBlendTime;                        // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialDamping;                                    // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidDamping;                                        // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalDamping;                                      // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideAppendageDamping;                          // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TrackAppendagesOnly;                               // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TrackAppendagesArmsOnly;                           // 0x0085(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OpenJointLimitMultOnTrackedParts;                  // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableDampingOverrideOnTrackedParts;              // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseTrueIdleForTracking;                            // 0x008D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableAllHandlingBesidesStiffnessAndDamping;      // 0x008E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallenMaxHipToFootDistMult;                        // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenAnkleLimitRatio;                             // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenNeckLimitRatio;                              // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenOtherLimitBlendRate;                         // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckDampingMult;                                   // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExtendElbowsWhenFallen;                            // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowBipedHipAndOtherLimitOverride;                // 0x00A5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShoulderLimitOpenRatioWhenFallen;                  // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipLimitOpenRatioWhenFallen;                       // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherJointsLimitRatio;                             // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PushHandsAwayFromChest;                            // 0x00B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExtendSpineNeckHips;                               // 0x00B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AvoidFlayedArms;                                   // 0x00B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrectShoulder;                                   // 0x00B7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoWrithe;                                          // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReduceFeetStickingToEachOther;                     // 0x00B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PushToSideIfSittingUp;                             // 0x00BA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MakeHeavyLimbsToPreventRoll;                       // 0x00BB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckFallFromHeightDistance;                       // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FreezeJointLimitsForFall;                          // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WeakedJointsOnGroundRegardless;                    // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyModifyJointLimitsIfOnSide;                     // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PushToSideIfNotOnSide;                             // 0x00C3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseVelocityChangeForLinearForce;                   // 0x00C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowBrace;                                        // 0x00C5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGravityAndAirResistanceControl        GravityAndAirResistanceControl;                    // 0x00C8(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ExtendSpineDuration;                               // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtendSpineStiffness;                              // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtendSpineSpeed;                                  // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExtendSpineUseNewMethod;                           // 0x0114(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OnSideAngleLimit;                                  // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimbMassMultInitial;                               // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimbMassMultMin;                                   // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffMaxDistOffGroundForForces;                      // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffMaxDistOffGroundForForcesHigh;                  // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffMaxDistOffGroundForHeaviness;                   // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushMagMax;                                        // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushMagMin;                                        // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExplosion                             MediumExplosionData;                               // 0x0138(0x0498)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             LaunchSmallCloseData;                              // 0x05D0(0x0498)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             LaunchSmallFarData;                                // 0x0A68(0x0498)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             BlowSmallCloseData;                                // 0x0F00(0x0498)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             BlowSmallFarData;                                  // 0x1398(0x0498)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             StrikeData;                                        // 0x1830(0x0498)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             FallFromBikeData;                                  // 0x1CC8(0x0498)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             FallFromBikeDataMelee;                             // 0x2160(0x0498)(Edit, NativeAccessSpecifierPublic)
	struct FFallArmsLegsAndSpineControl           BodyControl;                                       // 0x25F8(0x00D8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpulse                               OverrideFallImpulseData;                           // 0x26D0(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               OverrideFallImpulseDataBullet;                     // 0x2868(0x0198)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             ExplosionDataForMelee;                             // 0x2A00(0x0498)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             ExplosionDataForBullet;                            // 0x2E98(0x0498)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_BipedFallTuningSet">();
	}
	static class UBodyDriver_BipedFallTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_BipedFallTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_BipedFallTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_BipedFallTuningSet");
static_assert(sizeof(UBodyDriver_BipedFallTuningSet) == 0x003330, "Wrong size on UBodyDriver_BipedFallTuningSet");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OnlyUseSimpleRagdollMode) == 0x000030, "Member 'UBodyDriver_BipedFallTuningSet::OnlyUseSimpleRagdollMode' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, SwitchExplosionsToBullet) == 0x000031, "Member 'UBodyDriver_BipedFallTuningSet::SwitchExplosionsToBullet' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OverrideHitPartForSwitchToBullet) == 0x000032, "Member 'UBodyDriver_BipedFallTuningSet::OverrideHitPartForSwitchToBullet' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallenRagdollFriction) == 0x000034, "Member 'UBodyDriver_BipedFallTuningSet::FallenRagdollFriction' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, RaiseFrictionOnFeetWhenFallen) == 0x000038, "Member 'UBodyDriver_BipedFallTuningSet::RaiseFrictionOnFeetWhenFallen' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, UseAverageFallenFrictionCombineMode) == 0x000039, "Member 'UBodyDriver_BipedFallTuningSet::UseAverageFallenFrictionCombineMode' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ForceFallenRagdollFriction) == 0x00003A, "Member 'UBodyDriver_BipedFallTuningSet::ForceFallenRagdollFriction' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, BraceDisableConsidersBodyAngle) == 0x00003B, "Member 'UBodyDriver_BipedFallTuningSet::BraceDisableConsidersBodyAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, TrackDeathAnimationWhenSimpleRagdoll) == 0x00003C, "Member 'UBodyDriver_BipedFallTuningSet::TrackDeathAnimationWhenSimpleRagdoll' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MinActivationTime) == 0x000040, "Member 'UBodyDriver_BipedFallTuningSet::MinActivationTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MaxActivationTime) == 0x000044, "Member 'UBodyDriver_BipedFallTuningSet::MaxActivationTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ActivationTimeOverrides) == 0x000048, "Member 'UBodyDriver_BipedFallTuningSet::ActivationTimeOverrides' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, PostFallForceCleanupTimeOverride) == 0x000058, "Member 'UBodyDriver_BipedFallTuningSet::PostFallForceCleanupTimeOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, InitialTrackingStrength) == 0x00005C, "Member 'UBodyDriver_BipedFallTuningSet::InitialTrackingStrength' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FinalTrackingStrength) == 0x000060, "Member 'UBodyDriver_BipedFallTuningSet::FinalTrackingStrength' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, TrackingStrengthBlendoutTime) == 0x000064, "Member 'UBodyDriver_BipedFallTuningSet::TrackingStrengthBlendoutTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, TrackingPoseBlendToGoalTime) == 0x000068, "Member 'UBodyDriver_BipedFallTuningSet::TrackingPoseBlendToGoalTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, InitialToMidDampingBlendTime) == 0x00006C, "Member 'UBodyDriver_BipedFallTuningSet::InitialToMidDampingBlendTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MidToFinalDampingBlendTime) == 0x000070, "Member 'UBodyDriver_BipedFallTuningSet::MidToFinalDampingBlendTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, InitialDamping) == 0x000074, "Member 'UBodyDriver_BipedFallTuningSet::InitialDamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MidDamping) == 0x000078, "Member 'UBodyDriver_BipedFallTuningSet::MidDamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FinalDamping) == 0x00007C, "Member 'UBodyDriver_BipedFallTuningSet::FinalDamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OverrideAppendageDamping) == 0x000080, "Member 'UBodyDriver_BipedFallTuningSet::OverrideAppendageDamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, TrackAppendagesOnly) == 0x000084, "Member 'UBodyDriver_BipedFallTuningSet::TrackAppendagesOnly' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, TrackAppendagesArmsOnly) == 0x000085, "Member 'UBodyDriver_BipedFallTuningSet::TrackAppendagesArmsOnly' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OpenJointLimitMultOnTrackedParts) == 0x000088, "Member 'UBodyDriver_BipedFallTuningSet::OpenJointLimitMultOnTrackedParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, DisableDampingOverrideOnTrackedParts) == 0x00008C, "Member 'UBodyDriver_BipedFallTuningSet::DisableDampingOverrideOnTrackedParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, UseTrueIdleForTracking) == 0x00008D, "Member 'UBodyDriver_BipedFallTuningSet::UseTrueIdleForTracking' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, DisableAllHandlingBesidesStiffnessAndDamping) == 0x00008E, "Member 'UBodyDriver_BipedFallTuningSet::DisableAllHandlingBesidesStiffnessAndDamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallenMaxHipToFootDistMult) == 0x000090, "Member 'UBodyDriver_BipedFallTuningSet::FallenMaxHipToFootDistMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallenAnkleLimitRatio) == 0x000094, "Member 'UBodyDriver_BipedFallTuningSet::FallenAnkleLimitRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallenNeckLimitRatio) == 0x000098, "Member 'UBodyDriver_BipedFallTuningSet::FallenNeckLimitRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallenOtherLimitBlendRate) == 0x00009C, "Member 'UBodyDriver_BipedFallTuningSet::FallenOtherLimitBlendRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, NeckDampingMult) == 0x0000A0, "Member 'UBodyDriver_BipedFallTuningSet::NeckDampingMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExtendElbowsWhenFallen) == 0x0000A4, "Member 'UBodyDriver_BipedFallTuningSet::ExtendElbowsWhenFallen' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, AllowBipedHipAndOtherLimitOverride) == 0x0000A5, "Member 'UBodyDriver_BipedFallTuningSet::AllowBipedHipAndOtherLimitOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ShoulderLimitOpenRatioWhenFallen) == 0x0000A8, "Member 'UBodyDriver_BipedFallTuningSet::ShoulderLimitOpenRatioWhenFallen' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, HipLimitOpenRatioWhenFallen) == 0x0000AC, "Member 'UBodyDriver_BipedFallTuningSet::HipLimitOpenRatioWhenFallen' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OtherJointsLimitRatio) == 0x0000B0, "Member 'UBodyDriver_BipedFallTuningSet::OtherJointsLimitRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, PushHandsAwayFromChest) == 0x0000B4, "Member 'UBodyDriver_BipedFallTuningSet::PushHandsAwayFromChest' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExtendSpineNeckHips) == 0x0000B5, "Member 'UBodyDriver_BipedFallTuningSet::ExtendSpineNeckHips' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, AvoidFlayedArms) == 0x0000B6, "Member 'UBodyDriver_BipedFallTuningSet::AvoidFlayedArms' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, CorrectShoulder) == 0x0000B7, "Member 'UBodyDriver_BipedFallTuningSet::CorrectShoulder' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, DoWrithe) == 0x0000B8, "Member 'UBodyDriver_BipedFallTuningSet::DoWrithe' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ReduceFeetStickingToEachOther) == 0x0000B9, "Member 'UBodyDriver_BipedFallTuningSet::ReduceFeetStickingToEachOther' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, PushToSideIfSittingUp) == 0x0000BA, "Member 'UBodyDriver_BipedFallTuningSet::PushToSideIfSittingUp' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MakeHeavyLimbsToPreventRoll) == 0x0000BB, "Member 'UBodyDriver_BipedFallTuningSet::MakeHeavyLimbsToPreventRoll' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, CheckFallFromHeightDistance) == 0x0000BC, "Member 'UBodyDriver_BipedFallTuningSet::CheckFallFromHeightDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FreezeJointLimitsForFall) == 0x0000C0, "Member 'UBodyDriver_BipedFallTuningSet::FreezeJointLimitsForFall' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, WeakedJointsOnGroundRegardless) == 0x0000C1, "Member 'UBodyDriver_BipedFallTuningSet::WeakedJointsOnGroundRegardless' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OnlyModifyJointLimitsIfOnSide) == 0x0000C2, "Member 'UBodyDriver_BipedFallTuningSet::OnlyModifyJointLimitsIfOnSide' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, PushToSideIfNotOnSide) == 0x0000C3, "Member 'UBodyDriver_BipedFallTuningSet::PushToSideIfNotOnSide' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, UseVelocityChangeForLinearForce) == 0x0000C4, "Member 'UBodyDriver_BipedFallTuningSet::UseVelocityChangeForLinearForce' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, AllowBrace) == 0x0000C5, "Member 'UBodyDriver_BipedFallTuningSet::AllowBrace' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, GravityAndAirResistanceControl) == 0x0000C8, "Member 'UBodyDriver_BipedFallTuningSet::GravityAndAirResistanceControl' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExtendSpineDuration) == 0x000108, "Member 'UBodyDriver_BipedFallTuningSet::ExtendSpineDuration' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExtendSpineStiffness) == 0x00010C, "Member 'UBodyDriver_BipedFallTuningSet::ExtendSpineStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExtendSpineSpeed) == 0x000110, "Member 'UBodyDriver_BipedFallTuningSet::ExtendSpineSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExtendSpineUseNewMethod) == 0x000114, "Member 'UBodyDriver_BipedFallTuningSet::ExtendSpineUseNewMethod' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OnSideAngleLimit) == 0x000118, "Member 'UBodyDriver_BipedFallTuningSet::OnSideAngleLimit' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, LimbMassMultInitial) == 0x00011C, "Member 'UBodyDriver_BipedFallTuningSet::LimbMassMultInitial' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, LimbMassMultMin) == 0x000120, "Member 'UBodyDriver_BipedFallTuningSet::LimbMassMultMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, EffMaxDistOffGroundForForces) == 0x000124, "Member 'UBodyDriver_BipedFallTuningSet::EffMaxDistOffGroundForForces' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, EffMaxDistOffGroundForForcesHigh) == 0x000128, "Member 'UBodyDriver_BipedFallTuningSet::EffMaxDistOffGroundForForcesHigh' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, EffMaxDistOffGroundForHeaviness) == 0x00012C, "Member 'UBodyDriver_BipedFallTuningSet::EffMaxDistOffGroundForHeaviness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, PushMagMax) == 0x000130, "Member 'UBodyDriver_BipedFallTuningSet::PushMagMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, PushMagMin) == 0x000134, "Member 'UBodyDriver_BipedFallTuningSet::PushMagMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MediumExplosionData) == 0x000138, "Member 'UBodyDriver_BipedFallTuningSet::MediumExplosionData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, LaunchSmallCloseData) == 0x0005D0, "Member 'UBodyDriver_BipedFallTuningSet::LaunchSmallCloseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, LaunchSmallFarData) == 0x000A68, "Member 'UBodyDriver_BipedFallTuningSet::LaunchSmallFarData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, BlowSmallCloseData) == 0x000F00, "Member 'UBodyDriver_BipedFallTuningSet::BlowSmallCloseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, BlowSmallFarData) == 0x001398, "Member 'UBodyDriver_BipedFallTuningSet::BlowSmallFarData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, StrikeData) == 0x001830, "Member 'UBodyDriver_BipedFallTuningSet::StrikeData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallFromBikeData) == 0x001CC8, "Member 'UBodyDriver_BipedFallTuningSet::FallFromBikeData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallFromBikeDataMelee) == 0x002160, "Member 'UBodyDriver_BipedFallTuningSet::FallFromBikeDataMelee' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, BodyControl) == 0x0025F8, "Member 'UBodyDriver_BipedFallTuningSet::BodyControl' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OverrideFallImpulseData) == 0x0026D0, "Member 'UBodyDriver_BipedFallTuningSet::OverrideFallImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OverrideFallImpulseDataBullet) == 0x002868, "Member 'UBodyDriver_BipedFallTuningSet::OverrideFallImpulseDataBullet' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionDataForMelee) == 0x002A00, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionDataForMelee' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionDataForBullet) == 0x002E98, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionDataForBullet' has a wrong offset!");

// Class BodyDriverPlugin.BodyDriver_FullBodyBipedIKTuningSet
// 0x0008 (0x0038 - 0x0030)
class UBodyDriver_FullBodyBipedIKTuningSet final : public UDataAsset
{
public:
	bool                                          UseFullBodyBipedIK;                                // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFabrik;                                         // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_FullBodyBipedIKTuningSet">();
	}
	static class UBodyDriver_FullBodyBipedIKTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_FullBodyBipedIKTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_FullBodyBipedIKTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_FullBodyBipedIKTuningSet");
static_assert(sizeof(UBodyDriver_FullBodyBipedIKTuningSet) == 0x000038, "Wrong size on UBodyDriver_FullBodyBipedIKTuningSet");
static_assert(offsetof(UBodyDriver_FullBodyBipedIKTuningSet, UseFullBodyBipedIK) == 0x000030, "Member 'UBodyDriver_FullBodyBipedIKTuningSet::UseFullBodyBipedIK' has a wrong offset!");
static_assert(offsetof(UBodyDriver_FullBodyBipedIKTuningSet, UseFabrik) == 0x000031, "Member 'UBodyDriver_FullBodyBipedIKTuningSet::UseFabrik' has a wrong offset!");

// Class BodyDriverPlugin.InputObject_BodyDriver
// 0x0008 (0x0030 - 0x0028)
class UInputObject_BodyDriver final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputObject_BodyDriver">();
	}
	static class UInputObject_BodyDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputObject_BodyDriver>();
	}
};
static_assert(alignof(UInputObject_BodyDriver) == 0x000008, "Wrong alignment on UInputObject_BodyDriver");
static_assert(sizeof(UInputObject_BodyDriver) == 0x000030, "Wrong size on UInputObject_BodyDriver");

// Class BodyDriverPlugin.BodyDriver_ShakeTuningSet
// 0x0638 (0x0668 - 0x0030)
class UBodyDriver_ShakeTuningSet final : public UDataAsset
{
public:
	bool                                          UseShake;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpulse                               ShakeImpulseData;                                  // 0x0038(0x0198)(Edit, NativeAccessSpecifierPublic)
	int32                                         LinkSpread;                                        // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PelvisLinkSpread;                                  // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTimeStart;                                 // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutDuration;                                  // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JointStrengthInitial;                              // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JointStrengthFinal;                                // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JointStrengthBlendTime;                            // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmStiffnessMult;                                  // 0x01EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSubsequentHitStrengthMultiplier;                // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EeBodyParts>                           ForceConstrainedParts;                             // 0x01F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ConstraintReturnLinVel;                            // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstraintReturnAngVel;                            // 0x020C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelerationStrength;                              // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetBlendTimeOnSubsequentHits;                    // 0x0214(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpulseReductionFactor;                            // 0x0218(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactReductionFactor;                             // 0x021C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseShakeForLiveExplosions;                         // 0x0220(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFallArmsLegsAndSpineControl           ExplosionBodyControl;                              // 0x0224(0x00D8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpulse                               ExplosionImpulseData;                              // 0x0300(0x0198)(Edit, NativeAccessSpecifierPublic)
	float                                         ExplosionBlendOutTimeStart;                        // 0x0498(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionBlendOutDuration;                         // 0x049C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunningMinSpeed;                                   // 0x04A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpulse                               ShakeImpulseRunningData;                           // 0x04A8(0x0198)(Edit, NativeAccessSpecifierPublic)
	float                                         BlendOutTimeStartRunning;                          // 0x0640(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutDurationRunning;                           // 0x0644(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JointStrengthInitialRunning;                       // 0x0648(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JointStrengthFinalRunning;                         // 0x064C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JointStrengthBlendTimeRunning;                     // 0x0650(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmStiffnessMultRunning;                           // 0x0654(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSubsequentHitStrengthMultiplierRunning;         // 0x0658(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetBlendTimeOnSubsequentHitsRunning;             // 0x065C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpulseReductionFactorRunning;                     // 0x0660(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactReductionFactorRunning;                      // 0x0664(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_ShakeTuningSet">();
	}
	static class UBodyDriver_ShakeTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_ShakeTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_ShakeTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_ShakeTuningSet");
static_assert(sizeof(UBodyDriver_ShakeTuningSet) == 0x000668, "Wrong size on UBodyDriver_ShakeTuningSet");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, UseShake) == 0x000030, "Member 'UBodyDriver_ShakeTuningSet::UseShake' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ShakeImpulseData) == 0x000038, "Member 'UBodyDriver_ShakeTuningSet::ShakeImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, LinkSpread) == 0x0001D0, "Member 'UBodyDriver_ShakeTuningSet::LinkSpread' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, PelvisLinkSpread) == 0x0001D4, "Member 'UBodyDriver_ShakeTuningSet::PelvisLinkSpread' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, BlendOutTimeStart) == 0x0001D8, "Member 'UBodyDriver_ShakeTuningSet::BlendOutTimeStart' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, BlendOutDuration) == 0x0001DC, "Member 'UBodyDriver_ShakeTuningSet::BlendOutDuration' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, JointStrengthInitial) == 0x0001E0, "Member 'UBodyDriver_ShakeTuningSet::JointStrengthInitial' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, JointStrengthFinal) == 0x0001E4, "Member 'UBodyDriver_ShakeTuningSet::JointStrengthFinal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, JointStrengthBlendTime) == 0x0001E8, "Member 'UBodyDriver_ShakeTuningSet::JointStrengthBlendTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ArmStiffnessMult) == 0x0001EC, "Member 'UBodyDriver_ShakeTuningSet::ArmStiffnessMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, MinSubsequentHitStrengthMultiplier) == 0x0001F0, "Member 'UBodyDriver_ShakeTuningSet::MinSubsequentHitStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ForceConstrainedParts) == 0x0001F8, "Member 'UBodyDriver_ShakeTuningSet::ForceConstrainedParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ConstraintReturnLinVel) == 0x000208, "Member 'UBodyDriver_ShakeTuningSet::ConstraintReturnLinVel' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ConstraintReturnAngVel) == 0x00020C, "Member 'UBodyDriver_ShakeTuningSet::ConstraintReturnAngVel' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, AccelerationStrength) == 0x000210, "Member 'UBodyDriver_ShakeTuningSet::AccelerationStrength' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ResetBlendTimeOnSubsequentHits) == 0x000214, "Member 'UBodyDriver_ShakeTuningSet::ResetBlendTimeOnSubsequentHits' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ImpulseReductionFactor) == 0x000218, "Member 'UBodyDriver_ShakeTuningSet::ImpulseReductionFactor' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ImpactReductionFactor) == 0x00021C, "Member 'UBodyDriver_ShakeTuningSet::ImpactReductionFactor' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, UseShakeForLiveExplosions) == 0x000220, "Member 'UBodyDriver_ShakeTuningSet::UseShakeForLiveExplosions' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ExplosionBodyControl) == 0x000224, "Member 'UBodyDriver_ShakeTuningSet::ExplosionBodyControl' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ExplosionImpulseData) == 0x000300, "Member 'UBodyDriver_ShakeTuningSet::ExplosionImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ExplosionBlendOutTimeStart) == 0x000498, "Member 'UBodyDriver_ShakeTuningSet::ExplosionBlendOutTimeStart' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ExplosionBlendOutDuration) == 0x00049C, "Member 'UBodyDriver_ShakeTuningSet::ExplosionBlendOutDuration' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, RunningMinSpeed) == 0x0004A0, "Member 'UBodyDriver_ShakeTuningSet::RunningMinSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ShakeImpulseRunningData) == 0x0004A8, "Member 'UBodyDriver_ShakeTuningSet::ShakeImpulseRunningData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, BlendOutTimeStartRunning) == 0x000640, "Member 'UBodyDriver_ShakeTuningSet::BlendOutTimeStartRunning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, BlendOutDurationRunning) == 0x000644, "Member 'UBodyDriver_ShakeTuningSet::BlendOutDurationRunning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, JointStrengthInitialRunning) == 0x000648, "Member 'UBodyDriver_ShakeTuningSet::JointStrengthInitialRunning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, JointStrengthFinalRunning) == 0x00064C, "Member 'UBodyDriver_ShakeTuningSet::JointStrengthFinalRunning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, JointStrengthBlendTimeRunning) == 0x000650, "Member 'UBodyDriver_ShakeTuningSet::JointStrengthBlendTimeRunning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ArmStiffnessMultRunning) == 0x000654, "Member 'UBodyDriver_ShakeTuningSet::ArmStiffnessMultRunning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, MinSubsequentHitStrengthMultiplierRunning) == 0x000658, "Member 'UBodyDriver_ShakeTuningSet::MinSubsequentHitStrengthMultiplierRunning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ResetBlendTimeOnSubsequentHitsRunning) == 0x00065C, "Member 'UBodyDriver_ShakeTuningSet::ResetBlendTimeOnSubsequentHitsRunning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ImpulseReductionFactorRunning) == 0x000660, "Member 'UBodyDriver_ShakeTuningSet::ImpulseReductionFactorRunning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ShakeTuningSet, ImpactReductionFactorRunning) == 0x000664, "Member 'UBodyDriver_ShakeTuningSet::ImpactReductionFactorRunning' has a wrong offset!");

}

