#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: btsc_COMMON_VRTurks

#include "Basic.hpp"

#include "EndDataBase_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function btsc_COMMON_VRTurks.btsc_COMMON_VRTurks_C.ExecuteUbergraph_btsc_COMMON_VRTurks
// 0x0080 (0x0080 - 0x0000)
struct btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Damage;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_CauserCharaName;                      // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_DamagedCharaName;                     // 0x0010(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_AbilityID;                            // 0x0018(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bBind;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bGuard;                               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_HitBoneName;                          // 0x0024(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAttributeHit;                        // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bResistHit;                           // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_DamageSourceID;                       // 0x0030(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndBattleAttributeType                       K2Node_Event_appendAttribute;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_JustHitRotYaw;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitPosition;                          // 0x0040(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHeal;                                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bBurst;                               // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_block;                                // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_TalkID;                               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEndCharacter*                          CallFunc_GetCharaFromActorName_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayer_ReturnValue;                     // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess_1;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess_2;                    // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess_3;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBattleSceneCount_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHPPercent_ReturnValue;                  // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHPPercent_ReturnValue_1;                // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   K2Node_Event_battleScenenBPName;                   // 0x0070(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_territoryID;                          // 0x0078(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks) == 0x000008, "Wrong alignment on btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks");
static_assert(sizeof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks) == 0x000080, "Wrong size on btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, EntryPoint) == 0x000000, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::EntryPoint' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_Damage) == 0x000004, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_CauserCharaName) == 0x000008, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_CauserCharaName' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_DamagedCharaName) == 0x000010, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_DamagedCharaName' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_AbilityID) == 0x000018, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_AbilityID' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_bBind) == 0x000020, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_bBind' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_bGuard) == 0x000021, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_bGuard' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_HitBoneName) == 0x000024, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_HitBoneName' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_bAttributeHit) == 0x00002C, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_bAttributeHit' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_bResistHit) == 0x00002D, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_bResistHit' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_DamageSourceID) == 0x000030, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_DamageSourceID' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_appendAttribute) == 0x000038, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_appendAttribute' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_JustHitRotYaw) == 0x00003C, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_JustHitRotYaw' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_HitPosition) == 0x000040, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_HitPosition' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_bHeal) == 0x00004C, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_bHeal' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_bBurst) == 0x00004D, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_bBurst' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_block) == 0x00004E, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_block' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_TalkID) == 0x000050, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_TalkID' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, CallFunc_GetCharaFromActorName_ReturnValue) == 0x000058, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::CallFunc_GetCharaFromActorName_ReturnValue' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_SwitchName_CmpSuccess) == 0x000060, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, CallFunc_IsPlayer_ReturnValue) == 0x000061, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::CallFunc_IsPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_SwitchName_CmpSuccess_1) == 0x000062, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_SwitchName_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_SwitchName_CmpSuccess_2) == 0x000063, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_SwitchName_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_SwitchName_CmpSuccess_3) == 0x000064, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_SwitchName_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, CallFunc_GetBattleSceneCount_ReturnValue) == 0x000068, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::CallFunc_GetBattleSceneCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00006C, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_SwitchInteger_CmpSuccess) == 0x00006D, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, CallFunc_IsHPPercent_ReturnValue) == 0x00006E, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::CallFunc_IsHPPercent_ReturnValue' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, CallFunc_IsHPPercent_ReturnValue_1) == 0x00006F, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::CallFunc_IsHPPercent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_battleScenenBPName) == 0x000070, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_battleScenenBPName' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks, K2Node_Event_territoryID) == 0x000078, "Member 'btsc_COMMON_VRTurks_C_ExecuteUbergraph_btsc_COMMON_VRTurks::K2Node_Event_territoryID' has a wrong offset!");

// Function btsc_COMMON_VRTurks.btsc_COMMON_VRTurks_C.OnEntryBattleScene
// 0x0010 (0x0010 - 0x0000)
struct btsc_COMMON_VRTurks_C_OnEntryBattleScene final
{
public:
	class FName                                   battleScenenBPName;                                // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   territoryID;                                       // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(btsc_COMMON_VRTurks_C_OnEntryBattleScene) == 0x000004, "Wrong alignment on btsc_COMMON_VRTurks_C_OnEntryBattleScene");
static_assert(sizeof(btsc_COMMON_VRTurks_C_OnEntryBattleScene) == 0x000010, "Wrong size on btsc_COMMON_VRTurks_C_OnEntryBattleScene");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnEntryBattleScene, battleScenenBPName) == 0x000000, "Member 'btsc_COMMON_VRTurks_C_OnEntryBattleScene::battleScenenBPName' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnEntryBattleScene, territoryID) == 0x000008, "Member 'btsc_COMMON_VRTurks_C_OnEntryBattleScene::territoryID' has a wrong offset!");

// Function btsc_COMMON_VRTurks.btsc_COMMON_VRTurks_C.OnBattleTalkEnded
// 0x0008 (0x0008 - 0x0000)
struct btsc_COMMON_VRTurks_C_OnBattleTalkEnded final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(btsc_COMMON_VRTurks_C_OnBattleTalkEnded) == 0x000004, "Wrong alignment on btsc_COMMON_VRTurks_C_OnBattleTalkEnded");
static_assert(sizeof(btsc_COMMON_VRTurks_C_OnBattleTalkEnded) == 0x000008, "Wrong size on btsc_COMMON_VRTurks_C_OnBattleTalkEnded");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnBattleTalkEnded, TalkID) == 0x000000, "Member 'btsc_COMMON_VRTurks_C_OnBattleTalkEnded::TalkID' has a wrong offset!");

// Function btsc_COMMON_VRTurks.btsc_COMMON_VRTurks_C.OnTakeDamage
// 0x004C (0x004C - 0x0000)
struct btsc_COMMON_VRTurks_C_OnTakeDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CauserCharaName;                                   // 0x0004(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DamagedCharaName;                                  // 0x000C(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AbilityId;                                         // 0x0014(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBind;                                             // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bGuard;                                            // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   hitBoneName;                                       // 0x0020(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttributeHit;                                     // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bResistHit;                                        // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DamageSourceID;                                    // 0x002C(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndBattleAttributeType                       appendAttribute;                                   // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         justHitRotYaw;                                     // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitPosition;                                       // 0x003C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHeal;                                             // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBurst;                                            // 0x0049(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLock;                                             // 0x004A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(btsc_COMMON_VRTurks_C_OnTakeDamage) == 0x000004, "Wrong alignment on btsc_COMMON_VRTurks_C_OnTakeDamage");
static_assert(sizeof(btsc_COMMON_VRTurks_C_OnTakeDamage) == 0x00004C, "Wrong size on btsc_COMMON_VRTurks_C_OnTakeDamage");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, Damage) == 0x000000, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, CauserCharaName) == 0x000004, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::CauserCharaName' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, DamagedCharaName) == 0x00000C, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::DamagedCharaName' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, AbilityId) == 0x000014, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::AbilityId' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, bBind) == 0x00001C, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::bBind' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, bGuard) == 0x00001D, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::bGuard' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, hitBoneName) == 0x000020, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::hitBoneName' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, bAttributeHit) == 0x000028, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::bAttributeHit' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, bResistHit) == 0x000029, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::bResistHit' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, DamageSourceID) == 0x00002C, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::DamageSourceID' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, appendAttribute) == 0x000034, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::appendAttribute' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, justHitRotYaw) == 0x000038, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::justHitRotYaw' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, hitPosition) == 0x00003C, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::hitPosition' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, bHeal) == 0x000048, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::bHeal' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, bBurst) == 0x000049, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::bBurst' has a wrong offset!");
static_assert(offsetof(btsc_COMMON_VRTurks_C_OnTakeDamage, bLock) == 0x00004A, "Member 'btsc_COMMON_VRTurks_C_OnTakeDamage::bLock' has a wrong offset!");

}

