#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MobPrefabTemplate_ReactionAndContact_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MobPrefabBase01_Single_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MobPrefabTemplate_ReactionAndContact_01.MobPrefabTemplate_ReactionAndContact_01_C
// 0x0290 (0x0790 - 0x0500)
#pragma pack(push, 0x1)
class alignas(0x10) AMobPrefabTemplate_ReactionAndContact_01_C : public AMobPrefabBase01_Single_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0500(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	TSoftClassPtr<class UClass>                   CharacterClass01;                                  // 0x0508(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	class FName                                   LoopMotionName01;                                  // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   AttachActor01;                                     // 0x0538(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   AttachSocketName01;                                // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableReaction01;                                  // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableContact01;                                   // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ContactDuringReaction01;                           // 0x056A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56B[0x1];                                      // 0x056B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ContactForwardLeftMotionName01;                    // 0x056C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ContactForwardRightMotionName01;                   // 0x0574(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ContactBackLeftMotionName01;                       // 0x057C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ContactBackRightMotionName01;                      // 0x0584(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_Threshold;                                // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle_Threshold;                                   // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height_Threshold;                                  // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Continuation_Time;                                 // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Target_Name;                                       // 0x059C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FromMobPrefabCenter;                               // 0x05A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A5[0x3];                                      // 0x05A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ContactBlendTime01;                                // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AC[0x4];                                      // 0x05AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FName>                ContactPropagateMotionTable01;                     // 0x05B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class FName>                ContactPropagateForwardLeftMotionTable01;          // 0x0600(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class FName>                ContactPropagateForwardRightMotionTable01;         // 0x0650(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class FName>                ContactPropagateBackLeftMotionTable01;             // 0x06A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class FName>                ContactPropagateBackRightMotionTable01;            // 0x06F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ContactPropagateBlendTime01;                       // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ContactOutMotionName01;                            // 0x0744(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ContactOutBlendTime01;                             // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ContactOutReplaceBaseMotionName01;                 // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ReactionMotionName01;                              // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReactionBlendTime01;                               // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ReactionReplaceBaseMotionName01;                   // 0x0764(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ReactionOutMotionName01;                           // 0x076C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReactionOutBlendTime01;                            // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ReactionOutReplaceBaseMotionName01;                // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReactionOnce01;                                    // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ForceDisableReaction;                              // 0x0781(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_MobPrefabTemplate_ReactionAndContact_01(int32 EntryPoint);
	void OnPreUpdateRegistry();
	void CreateMobCommand();
	void Initialize(class FName MobId, TSoftClassPtr<class UClass> CharacterClass, class FName LoopMotionName, const TSoftClassPtr<class UClass>& AttachActor, class FName AttachSocketName);
	void GetContext(class FName MobId, bool* EnableReaction, bool* EnableContact, bool* ContactDuringReaction, class FName* ForwardLeftMotion, class FName* ForwardRightMotion, class FName* BackLeftMotion, class FName* BackRightMotion, float* ContactBlendTime, TMap<class FName, class FName>* ContactPropagateMotionTable, TMap<class FName, class FName>* ContactPropagateForwardLeftMotionTable, TMap<class FName, class FName>* ContactPropagateForwardRightMotionTable, TMap<class FName, class FName>* ContactPropagateBackLeftMotionTable, TMap<class FName, class FName>* ContactPropagateBackRightMotionTable, float* ContactPropagateBlendTime, class FName* ContactOutMotionName, float* ContactOutBlendTime, class FName* ContactOutReplaceBaseMotionName, class FName* Motion, float* BlendTime, class FName* ReplaceBaseMotion, class FName* ReactionOutMotionName, float* ReactionOutBlendTime, class FName* ReactionOutReplaceBaseMotionName, bool* PlayMotionOnce);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MobPrefabTemplate_ReactionAndContact_01_C">();
	}
	static class AMobPrefabTemplate_ReactionAndContact_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMobPrefabTemplate_ReactionAndContact_01_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AMobPrefabTemplate_ReactionAndContact_01_C) == 0x000010, "Wrong alignment on AMobPrefabTemplate_ReactionAndContact_01_C");
static_assert(sizeof(AMobPrefabTemplate_ReactionAndContact_01_C) == 0x000790, "Wrong size on AMobPrefabTemplate_ReactionAndContact_01_C");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, UberGraphFrame) == 0x000500, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, CharacterClass01) == 0x000508, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::CharacterClass01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, LoopMotionName01) == 0x000530, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::LoopMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, AttachActor01) == 0x000538, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::AttachActor01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, AttachSocketName01) == 0x000560, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::AttachSocketName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, EnableReaction01) == 0x000568, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::EnableReaction01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, EnableContact01) == 0x000569, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::EnableContact01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactDuringReaction01) == 0x00056A, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactDuringReaction01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactForwardLeftMotionName01) == 0x00056C, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactForwardLeftMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactForwardRightMotionName01) == 0x000574, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactForwardRightMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactBackLeftMotionName01) == 0x00057C, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactBackLeftMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactBackRightMotionName01) == 0x000584, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactBackRightMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, Distance_Threshold) == 0x00058C, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::Distance_Threshold' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, Angle_Threshold) == 0x000590, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::Angle_Threshold' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, Height_Threshold) == 0x000594, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::Height_Threshold' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, Continuation_Time) == 0x000598, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::Continuation_Time' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, Target_Name) == 0x00059C, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::Target_Name' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, FromMobPrefabCenter) == 0x0005A4, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::FromMobPrefabCenter' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactBlendTime01) == 0x0005A8, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactBlendTime01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactPropagateMotionTable01) == 0x0005B0, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactPropagateMotionTable01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactPropagateForwardLeftMotionTable01) == 0x000600, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactPropagateForwardLeftMotionTable01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactPropagateForwardRightMotionTable01) == 0x000650, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactPropagateForwardRightMotionTable01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactPropagateBackLeftMotionTable01) == 0x0006A0, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactPropagateBackLeftMotionTable01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactPropagateBackRightMotionTable01) == 0x0006F0, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactPropagateBackRightMotionTable01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactPropagateBlendTime01) == 0x000740, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactPropagateBlendTime01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactOutMotionName01) == 0x000744, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactOutMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactOutBlendTime01) == 0x00074C, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactOutBlendTime01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ContactOutReplaceBaseMotionName01) == 0x000750, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ContactOutReplaceBaseMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ReactionMotionName01) == 0x000758, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ReactionMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ReactionBlendTime01) == 0x000760, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ReactionBlendTime01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ReactionReplaceBaseMotionName01) == 0x000764, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ReactionReplaceBaseMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ReactionOutMotionName01) == 0x00076C, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ReactionOutMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ReactionOutBlendTime01) == 0x000774, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ReactionOutBlendTime01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ReactionOutReplaceBaseMotionName01) == 0x000778, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ReactionOutReplaceBaseMotionName01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ReactionOnce01) == 0x000780, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ReactionOnce01' has a wrong offset!");
static_assert(offsetof(AMobPrefabTemplate_ReactionAndContact_01_C, ForceDisableReaction) == 0x000781, "Member 'AMobPrefabTemplate_ReactionAndContact_01_C::ForceDisableReaction' has a wrong offset!");

}

