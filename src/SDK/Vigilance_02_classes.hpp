#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Vigilance_02

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Vigilance_02.Vigilance_02_C
// 0x00B0 (0x0478 - 0x03C8)
class UVigilance_02_C final : public UEndUserWidget
{
public:
	class UWidgetAnimation*                       Color_Shift;                                       // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Preemptive_In;                                     // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Battle_In;                                         // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Loop;                                              // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              Base_Txt;                                          // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Base_Txt2;                                         // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_00;                                         // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_Light_Center;                               // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_Light_L;                                    // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_Light_R;                                    // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_LightAdd_L;                                 // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_LightAdd_R;                                 // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndCircle*                             Gauge_00;                                          // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndCircle*                             Gauge_01;                                          // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVigilance_GaugeHead_C*                 GaugeHead1;                                        // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVigilance_GaugeHead_C*                 GaugeHead2;                                        // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVigilance_GaugeHead_C*                 GaugeHead3;                                        // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVigilance_GaugeHead_C*                 GaugeHead4;                                        // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           Ims_OutLine;                                       // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndPieImage*                           NewGauge_00;                                       // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndPieImage*                           NewGauge_01;                                       // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Vigilance_02_C">();
	}
	static class UVigilance_02_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVigilance_02_C>();
	}
};
static_assert(alignof(UVigilance_02_C) == 0x000008, "Wrong alignment on UVigilance_02_C");
static_assert(sizeof(UVigilance_02_C) == 0x000478, "Wrong size on UVigilance_02_C");
static_assert(offsetof(UVigilance_02_C, Color_Shift) == 0x0003C8, "Member 'UVigilance_02_C::Color_Shift' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Preemptive_In) == 0x0003D0, "Member 'UVigilance_02_C::Preemptive_In' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Battle_In) == 0x0003D8, "Member 'UVigilance_02_C::Battle_In' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Loop) == 0x0003E0, "Member 'UVigilance_02_C::Loop' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, In) == 0x0003E8, "Member 'UVigilance_02_C::In' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Base_Txt) == 0x0003F0, "Member 'UVigilance_02_C::Base_Txt' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Base_Txt2) == 0x0003F8, "Member 'UVigilance_02_C::Base_Txt2' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Effect_00) == 0x000400, "Member 'UVigilance_02_C::Effect_00' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Effect_Light_Center) == 0x000408, "Member 'UVigilance_02_C::Effect_Light_Center' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Effect_Light_L) == 0x000410, "Member 'UVigilance_02_C::Effect_Light_L' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Effect_Light_R) == 0x000418, "Member 'UVigilance_02_C::Effect_Light_R' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Effect_LightAdd_L) == 0x000420, "Member 'UVigilance_02_C::Effect_LightAdd_L' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Effect_LightAdd_R) == 0x000428, "Member 'UVigilance_02_C::Effect_LightAdd_R' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Gauge_00) == 0x000430, "Member 'UVigilance_02_C::Gauge_00' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Gauge_01) == 0x000438, "Member 'UVigilance_02_C::Gauge_01' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, GaugeHead1) == 0x000440, "Member 'UVigilance_02_C::GaugeHead1' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, GaugeHead2) == 0x000448, "Member 'UVigilance_02_C::GaugeHead2' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, GaugeHead3) == 0x000450, "Member 'UVigilance_02_C::GaugeHead3' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, GaugeHead4) == 0x000458, "Member 'UVigilance_02_C::GaugeHead4' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, Ims_OutLine) == 0x000460, "Member 'UVigilance_02_C::Ims_OutLine' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, NewGauge_00) == 0x000468, "Member 'UVigilance_02_C::NewGauge_00' has a wrong offset!");
static_assert(offsetof(UVigilance_02_C, NewGauge_01) == 0x000470, "Member 'UVigilance_02_C::NewGauge_01' has a wrong offset!");

}

