#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Sort

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Sort.Sort_C
// 0x0068 (0x0470 - 0x0408)
class USort_C final : public UEndNewSortWindow
{
public:
	class UEndImage*                              Bg;                                                // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Bg_1;                                              // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Bg_2;                                              // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              EndImage_58;                                       // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              ListPoint_3;                                       // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              ListPoint_4;                                       // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              ListPoint_5;                                       // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              ListPoint_6;                                       // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              ListPoint_7;                                       // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              ListPoint_8;                                       // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndTextBlock*                          Txt_Mark;                                          // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndTextBlock*                          Txt_Title;                                         // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndTextBlock*                          Txt_Title_1;                                       // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Sort_C">();
	}
	static class USort_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USort_C>();
	}
};
static_assert(alignof(USort_C) == 0x000008, "Wrong alignment on USort_C");
static_assert(sizeof(USort_C) == 0x000470, "Wrong size on USort_C");
static_assert(offsetof(USort_C, Bg) == 0x000408, "Member 'USort_C::Bg' has a wrong offset!");
static_assert(offsetof(USort_C, Bg_1) == 0x000410, "Member 'USort_C::Bg_1' has a wrong offset!");
static_assert(offsetof(USort_C, Bg_2) == 0x000418, "Member 'USort_C::Bg_2' has a wrong offset!");
static_assert(offsetof(USort_C, EndImage_58) == 0x000420, "Member 'USort_C::EndImage_58' has a wrong offset!");
static_assert(offsetof(USort_C, ListPoint_3) == 0x000428, "Member 'USort_C::ListPoint_3' has a wrong offset!");
static_assert(offsetof(USort_C, ListPoint_4) == 0x000430, "Member 'USort_C::ListPoint_4' has a wrong offset!");
static_assert(offsetof(USort_C, ListPoint_5) == 0x000438, "Member 'USort_C::ListPoint_5' has a wrong offset!");
static_assert(offsetof(USort_C, ListPoint_6) == 0x000440, "Member 'USort_C::ListPoint_6' has a wrong offset!");
static_assert(offsetof(USort_C, ListPoint_7) == 0x000448, "Member 'USort_C::ListPoint_7' has a wrong offset!");
static_assert(offsetof(USort_C, ListPoint_8) == 0x000450, "Member 'USort_C::ListPoint_8' has a wrong offset!");
static_assert(offsetof(USort_C, Txt_Mark) == 0x000458, "Member 'USort_C::Txt_Mark' has a wrong offset!");
static_assert(offsetof(USort_C, Txt_Title) == 0x000460, "Member 'USort_C::Txt_Title' has a wrong offset!");
static_assert(offsetof(USort_C, Txt_Title_1) == 0x000468, "Member 'USort_C::Txt_Title_1' has a wrong offset!");

}

