#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkillTree_Cursor

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SkillTree_Cursor.SkillTree_Cursor_C
// 0x0098 (0x0460 - 0x03C8)
class USkillTree_Cursor_C final : public UEndUserWidget
{
public:
	class UWidgetAnimation*                       Focus_In_Large;                                    // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Focus_In_Medium;                                   // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Focus_In_Small;                                    // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       NoFocus;                                           // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Focus_Loop;                                        // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Release_In;                                        // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndPieImage*                           Gauge_00;                                          // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Base;                                          // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Cursor_1;                                      // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Cursor_2;                                      // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Cursor_1Light;                                 // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Cursor_2Light1;                                // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Cursor_2Light2;                                // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_GaugeBase;                                     // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           Ims_Core;                                          // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              IngCursor1;                                        // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              IngCursor2;                                        // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              IngCursor3;                                        // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              IngCursor4;                                        // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SkillTree_Cursor_C">();
	}
	static class USkillTree_Cursor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillTree_Cursor_C>();
	}
};
static_assert(alignof(USkillTree_Cursor_C) == 0x000008, "Wrong alignment on USkillTree_Cursor_C");
static_assert(sizeof(USkillTree_Cursor_C) == 0x000460, "Wrong size on USkillTree_Cursor_C");
static_assert(offsetof(USkillTree_Cursor_C, Focus_In_Large) == 0x0003C8, "Member 'USkillTree_Cursor_C::Focus_In_Large' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Focus_In_Medium) == 0x0003D0, "Member 'USkillTree_Cursor_C::Focus_In_Medium' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Focus_In_Small) == 0x0003D8, "Member 'USkillTree_Cursor_C::Focus_In_Small' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, NoFocus) == 0x0003E0, "Member 'USkillTree_Cursor_C::NoFocus' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Focus_Loop) == 0x0003E8, "Member 'USkillTree_Cursor_C::Focus_Loop' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Release_In) == 0x0003F0, "Member 'USkillTree_Cursor_C::Release_In' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Gauge_00) == 0x0003F8, "Member 'USkillTree_Cursor_C::Gauge_00' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Img_Base) == 0x000400, "Member 'USkillTree_Cursor_C::Img_Base' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Img_Cursor_1) == 0x000408, "Member 'USkillTree_Cursor_C::Img_Cursor_1' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Img_Cursor_2) == 0x000410, "Member 'USkillTree_Cursor_C::Img_Cursor_2' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Img_Cursor_1Light) == 0x000418, "Member 'USkillTree_Cursor_C::Img_Cursor_1Light' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Img_Cursor_2Light1) == 0x000420, "Member 'USkillTree_Cursor_C::Img_Cursor_2Light1' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Img_Cursor_2Light2) == 0x000428, "Member 'USkillTree_Cursor_C::Img_Cursor_2Light2' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Img_GaugeBase) == 0x000430, "Member 'USkillTree_Cursor_C::Img_GaugeBase' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, Ims_Core) == 0x000438, "Member 'USkillTree_Cursor_C::Ims_Core' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, IngCursor1) == 0x000440, "Member 'USkillTree_Cursor_C::IngCursor1' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, IngCursor2) == 0x000448, "Member 'USkillTree_Cursor_C::IngCursor2' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, IngCursor3) == 0x000450, "Member 'USkillTree_Cursor_C::IngCursor3' has a wrong offset!");
static_assert(offsetof(USkillTree_Cursor_C, IngCursor4) == 0x000458, "Member 'USkillTree_Cursor_C::IngCursor4' has a wrong offset!");

}

