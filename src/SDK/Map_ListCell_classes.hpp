#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Map_ListCell

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Map_ListCell.Map_ListCell_C
// 0x0090 (0x0490 - 0x0400)
class UMap_ListCell_C final : public UEndAreaMapObjectiveLabel
{
public:
	class UWidgetAnimation*                       Target_CardGame;                                   // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CardGame;                                          // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Target_Quest_Current;                              // 0x0410(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Quest_Current;                                     // 0x0418(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Target_Player;                                     // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Player;                                            // 0x0428(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Target_Side;                                       // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Target_Quest;                                      // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Target_Main;                                       // 0x0440(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Quest_Child;                                       // 0x0448(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Side;                                              // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Quest;                                             // 0x0458(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Main_Child;                                        // 0x0460(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Main;                                              // 0x0468(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndCanvasPanel*                        AllBox;                                            // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           ListIcon;                                          // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              PriorityIcon;                                      // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              TargetBase;                                        // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Map_ListCell_C">();
	}
	static class UMap_ListCell_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMap_ListCell_C>();
	}
};
static_assert(alignof(UMap_ListCell_C) == 0x000008, "Wrong alignment on UMap_ListCell_C");
static_assert(sizeof(UMap_ListCell_C) == 0x000490, "Wrong size on UMap_ListCell_C");
static_assert(offsetof(UMap_ListCell_C, Target_CardGame) == 0x000400, "Member 'UMap_ListCell_C::Target_CardGame' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, CardGame) == 0x000408, "Member 'UMap_ListCell_C::CardGame' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Target_Quest_Current) == 0x000410, "Member 'UMap_ListCell_C::Target_Quest_Current' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Quest_Current) == 0x000418, "Member 'UMap_ListCell_C::Quest_Current' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Target_Player) == 0x000420, "Member 'UMap_ListCell_C::Target_Player' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Player) == 0x000428, "Member 'UMap_ListCell_C::Player' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Target_Side) == 0x000430, "Member 'UMap_ListCell_C::Target_Side' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Target_Quest) == 0x000438, "Member 'UMap_ListCell_C::Target_Quest' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Target_Main) == 0x000440, "Member 'UMap_ListCell_C::Target_Main' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Quest_Child) == 0x000448, "Member 'UMap_ListCell_C::Quest_Child' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Side) == 0x000450, "Member 'UMap_ListCell_C::Side' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Quest) == 0x000458, "Member 'UMap_ListCell_C::Quest' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Main_Child) == 0x000460, "Member 'UMap_ListCell_C::Main_Child' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Main) == 0x000468, "Member 'UMap_ListCell_C::Main' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, AllBox) == 0x000470, "Member 'UMap_ListCell_C::AllBox' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, ListIcon) == 0x000478, "Member 'UMap_ListCell_C::ListIcon' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, PriorityIcon) == 0x000480, "Member 'UMap_ListCell_C::PriorityIcon' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, TargetBase) == 0x000488, "Member 'UMap_ListCell_C::TargetBase' has a wrong offset!");

}

