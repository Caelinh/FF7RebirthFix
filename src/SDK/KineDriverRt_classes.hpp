#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KineDriverRt

#include "Basic.hpp"

#include "KineDriverRt_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class KineDriverRt.SQEX_KineDriver_AssetUserData
// 0x0010 (0x0038 - 0x0028)
class USQEX_KineDriver_AssetUserData final : public UAssetUserData
{
public:
	TArray<struct FSQEX_KineDriver_AssetUserDataElement> KineDriver_AssetUserDataElement;                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_AssetUserData">();
	}
	static class USQEX_KineDriver_AssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_AssetUserData>();
	}
};
static_assert(alignof(USQEX_KineDriver_AssetUserData) == 0x000008, "Wrong alignment on USQEX_KineDriver_AssetUserData");
static_assert(sizeof(USQEX_KineDriver_AssetUserData) == 0x000038, "Wrong size on USQEX_KineDriver_AssetUserData");
static_assert(offsetof(USQEX_KineDriver_AssetUserData, KineDriver_AssetUserDataElement) == 0x000028, "Member 'USQEX_KineDriver_AssetUserData::KineDriver_AssetUserDataElement' has a wrong offset!");

// Class KineDriverRt.SQEX_KineDriver_Component
// 0x00D0 (0x02D0 - 0x0200)
class USQEX_KineDriver_Component final : public USceneComponent
{
public:
	int32                                         KineDriverIndex;                                   // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQEX_KineDriverData*>           KineDriverData;                                    // 0x0200(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          EnableScaleOpChildSSC;                             // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TargetNodeDisableScaleOpChildSSC;                  // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ETickingGroup                                 TickGroup;                                         // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentTag;                                      // 0x022C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0234(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLOD;                                         // 0x0235(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236[0x2];                                      // 0x0236(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinScreenSize;                                     // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFrustumCulling;                              // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCheckDrawn;                                  // 0x023D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E[0x42];                                     // 0x023E(0x0042)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class USQEX_KineDriverData*, class USQEX_KineDriverData*> ReplaceKDIs;                                       // 0x0280(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	void CopyFromSkeletalMeshAssetUserData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_Component">();
	}
	static class USQEX_KineDriver_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_Component>();
	}
};
static_assert(alignof(USQEX_KineDriver_Component) == 0x000010, "Wrong alignment on USQEX_KineDriver_Component");
static_assert(sizeof(USQEX_KineDriver_Component) == 0x0002D0, "Wrong size on USQEX_KineDriver_Component");
static_assert(offsetof(USQEX_KineDriver_Component, KineDriverIndex) == 0x0001F8, "Member 'USQEX_KineDriver_Component::KineDriverIndex' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, KineDriverData) == 0x000200, "Member 'USQEX_KineDriver_Component::KineDriverData' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, EnableScaleOpChildSSC) == 0x000210, "Member 'USQEX_KineDriver_Component::EnableScaleOpChildSSC' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, TargetNodeDisableScaleOpChildSSC) == 0x000218, "Member 'USQEX_KineDriver_Component::TargetNodeDisableScaleOpChildSSC' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, TickGroup) == 0x000228, "Member 'USQEX_KineDriver_Component::TickGroup' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, ComponentTag) == 0x00022C, "Member 'USQEX_KineDriver_Component::ComponentTag' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, Enabled) == 0x000234, "Member 'USQEX_KineDriver_Component::Enabled' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, EnableLOD) == 0x000235, "Member 'USQEX_KineDriver_Component::EnableLOD' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, MinScreenSize) == 0x000238, "Member 'USQEX_KineDriver_Component::MinScreenSize' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, EnableFrustumCulling) == 0x00023C, "Member 'USQEX_KineDriver_Component::EnableFrustumCulling' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, EnableCheckDrawn) == 0x00023D, "Member 'USQEX_KineDriver_Component::EnableCheckDrawn' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, ReplaceKDIs) == 0x000280, "Member 'USQEX_KineDriver_Component::ReplaceKDIs' has a wrong offset!");

// Class KineDriverRt.SQEX_KineDriver_GlobalConfig
// 0x0020 (0x0058 - 0x0038)
class USQEX_KineDriver_GlobalConfig final : public UDeveloperSettings
{
public:
	bool                                          bMultiThreadUpdate;                                // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpdateOverlaps;                             // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           aTargetNodeDisableScaleOpChildSSC;                 // 0x0040(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bShowNoBoneWarning;                                // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowMissingAnimLabelWarning;                      // 0x0051(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_GlobalConfig">();
	}
	static class USQEX_KineDriver_GlobalConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_GlobalConfig>();
	}
};
static_assert(alignof(USQEX_KineDriver_GlobalConfig) == 0x000008, "Wrong alignment on USQEX_KineDriver_GlobalConfig");
static_assert(sizeof(USQEX_KineDriver_GlobalConfig) == 0x000058, "Wrong size on USQEX_KineDriver_GlobalConfig");
static_assert(offsetof(USQEX_KineDriver_GlobalConfig, bMultiThreadUpdate) == 0x000038, "Member 'USQEX_KineDriver_GlobalConfig::bMultiThreadUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_GlobalConfig, bEnableUpdateOverlaps) == 0x000039, "Member 'USQEX_KineDriver_GlobalConfig::bEnableUpdateOverlaps' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_GlobalConfig, aTargetNodeDisableScaleOpChildSSC) == 0x000040, "Member 'USQEX_KineDriver_GlobalConfig::aTargetNodeDisableScaleOpChildSSC' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_GlobalConfig, bShowNoBoneWarning) == 0x000050, "Member 'USQEX_KineDriver_GlobalConfig::bShowNoBoneWarning' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_GlobalConfig, bShowMissingAnimLabelWarning) == 0x000051, "Member 'USQEX_KineDriver_GlobalConfig::bShowMissingAnimLabelWarning' has a wrong offset!");

// Class KineDriverRt.SQEX_KineDriverData
// 0x01B0 (0x01D8 - 0x0028)
class USQEX_KineDriverData final : public UObject
{
public:
	int32                                         WorkNum;                                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PreComputeObjects;                                 // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PreComputeObjectBoneNameArray;                     // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ComputedObjectBoneNameArray;                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverOperatorHead>   Operators;                                         // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverComputeSpaceBases> ComputeSpaceBasesBody;                             // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverSource>         SourceBody;                                        // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverSourceTranslate> SourceTranslateBody;                               // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverSourceRotate>   SourceRotateBody;                                  // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverSourceOther>    SourceOtherBody;                                   // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverTargetTranslate> TargetTranslateBody;                               // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverTargetScale>    TargetScaleBody;                                   // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverTargetRotate>   TargetRotateBody;                                  // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverTargetBendRoll> TargetBendRollBody;                                // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverTargetBendSTRoll> TargetBendSTRollBody;                              // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverTargetExpmap>   TargetExpmapBody;                                  // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverTargetPoscns>   TargetPoscnsBody;                                  // 0x0120(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverTargetOricns>   TargetOricnsBody;                                  // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverTargetDircns>   TargetDircnsBody;                                  // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverTargetOther>    TargetOtherBody;                                   // 0x0150(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverEffectorInverse> EffectorInverseBody;                               // 0x0160(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverEffectorLinkWith> EffectorLinkWithBody;                              // 0x0170(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverEffectorEZParamLink> EffectorEZParamLinkBody;                           // 0x0180(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverEffectorEZParamLinkLinear> EffectorEZParamLinkLinearBody;                     // 0x0190(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverEffectorRBFInterp> EffectorRBFInterpBody;                             // 0x01A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverEffectorExpr>   EffectorExprBody;                                  // 0x01B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSQEX_KineDriverConnection>     ConnectionBody;                                    // 0x01C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D0[0x8];                                      // 0x01D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriverData">();
	}
	static class USQEX_KineDriverData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriverData>();
	}
};
static_assert(alignof(USQEX_KineDriverData) == 0x000008, "Wrong alignment on USQEX_KineDriverData");
static_assert(sizeof(USQEX_KineDriverData) == 0x0001D8, "Wrong size on USQEX_KineDriverData");
static_assert(offsetof(USQEX_KineDriverData, WorkNum) == 0x000028, "Member 'USQEX_KineDriverData::WorkNum' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, PreComputeObjects) == 0x000030, "Member 'USQEX_KineDriverData::PreComputeObjects' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, PreComputeObjectBoneNameArray) == 0x000040, "Member 'USQEX_KineDriverData::PreComputeObjectBoneNameArray' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, ComputedObjectBoneNameArray) == 0x000050, "Member 'USQEX_KineDriverData::ComputedObjectBoneNameArray' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, Operators) == 0x000060, "Member 'USQEX_KineDriverData::Operators' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, ComputeSpaceBasesBody) == 0x000070, "Member 'USQEX_KineDriverData::ComputeSpaceBasesBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, SourceBody) == 0x000080, "Member 'USQEX_KineDriverData::SourceBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, SourceTranslateBody) == 0x000090, "Member 'USQEX_KineDriverData::SourceTranslateBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, SourceRotateBody) == 0x0000A0, "Member 'USQEX_KineDriverData::SourceRotateBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, SourceOtherBody) == 0x0000B0, "Member 'USQEX_KineDriverData::SourceOtherBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetTranslateBody) == 0x0000C0, "Member 'USQEX_KineDriverData::TargetTranslateBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetScaleBody) == 0x0000D0, "Member 'USQEX_KineDriverData::TargetScaleBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetRotateBody) == 0x0000E0, "Member 'USQEX_KineDriverData::TargetRotateBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetBendRollBody) == 0x0000F0, "Member 'USQEX_KineDriverData::TargetBendRollBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetBendSTRollBody) == 0x000100, "Member 'USQEX_KineDriverData::TargetBendSTRollBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetExpmapBody) == 0x000110, "Member 'USQEX_KineDriverData::TargetExpmapBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetPoscnsBody) == 0x000120, "Member 'USQEX_KineDriverData::TargetPoscnsBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetOricnsBody) == 0x000130, "Member 'USQEX_KineDriverData::TargetOricnsBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetDircnsBody) == 0x000140, "Member 'USQEX_KineDriverData::TargetDircnsBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetOtherBody) == 0x000150, "Member 'USQEX_KineDriverData::TargetOtherBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, EffectorInverseBody) == 0x000160, "Member 'USQEX_KineDriverData::EffectorInverseBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, EffectorLinkWithBody) == 0x000170, "Member 'USQEX_KineDriverData::EffectorLinkWithBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, EffectorEZParamLinkBody) == 0x000180, "Member 'USQEX_KineDriverData::EffectorEZParamLinkBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, EffectorEZParamLinkLinearBody) == 0x000190, "Member 'USQEX_KineDriverData::EffectorEZParamLinkLinearBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, EffectorRBFInterpBody) == 0x0001A0, "Member 'USQEX_KineDriverData::EffectorRBFInterpBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, EffectorExprBody) == 0x0001B0, "Member 'USQEX_KineDriverData::EffectorExprBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, ConnectionBody) == 0x0001C0, "Member 'USQEX_KineDriverData::ConnectionBody' has a wrong offset!");

}

