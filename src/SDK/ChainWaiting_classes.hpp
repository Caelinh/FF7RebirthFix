#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChainWaiting

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ChainWaiting.ChainWaiting_C
// 0x0048 (0x0410 - 0x03C8)
class UChainWaiting_C final : public UEndUserWidget
{
public:
	class UWidgetAnimation*                       TimeOut;                                           // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Loop;                                              // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out;                                               // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              Base_00;                                           // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Base_01;                                           // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Base_01;                                       // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndBillboard*                          Img_Chara;                                         // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPreInput_Icon_C*                       PreInput_Icon;                                     // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChainWaiting_C">();
	}
	static class UChainWaiting_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChainWaiting_C>();
	}
};
static_assert(alignof(UChainWaiting_C) == 0x000008, "Wrong alignment on UChainWaiting_C");
static_assert(sizeof(UChainWaiting_C) == 0x000410, "Wrong size on UChainWaiting_C");
static_assert(offsetof(UChainWaiting_C, TimeOut) == 0x0003C8, "Member 'UChainWaiting_C::TimeOut' has a wrong offset!");
static_assert(offsetof(UChainWaiting_C, Loop) == 0x0003D0, "Member 'UChainWaiting_C::Loop' has a wrong offset!");
static_assert(offsetof(UChainWaiting_C, Out) == 0x0003D8, "Member 'UChainWaiting_C::Out' has a wrong offset!");
static_assert(offsetof(UChainWaiting_C, In) == 0x0003E0, "Member 'UChainWaiting_C::In' has a wrong offset!");
static_assert(offsetof(UChainWaiting_C, Base_00) == 0x0003E8, "Member 'UChainWaiting_C::Base_00' has a wrong offset!");
static_assert(offsetof(UChainWaiting_C, Base_01) == 0x0003F0, "Member 'UChainWaiting_C::Base_01' has a wrong offset!");
static_assert(offsetof(UChainWaiting_C, Img_Base_01) == 0x0003F8, "Member 'UChainWaiting_C::Img_Base_01' has a wrong offset!");
static_assert(offsetof(UChainWaiting_C, Img_Chara) == 0x000400, "Member 'UChainWaiting_C::Img_Chara' has a wrong offset!");
static_assert(offsetof(UChainWaiting_C, PreInput_Icon) == 0x000408, "Member 'UChainWaiting_C::PreInput_Icon' has a wrong offset!");

}

