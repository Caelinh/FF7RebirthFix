#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleLeaderMark

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BattleLeaderMark.BattleLeaderMark_C
// 0x0028 (0x03F8 - 0x03D0)
class UBattleLeaderMark_C final : public UEndBattleLeaderMark
{
public:
	class UWidgetAnimation*                       BattleLeaderMark;                                  // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              Icon_BattleLeader;                                 // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              MarkBase;                                          // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              MarkFrame;                                         // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattleLeaderMark_C">();
	}
	static class UBattleLeaderMark_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleLeaderMark_C>();
	}
};
static_assert(alignof(UBattleLeaderMark_C) == 0x000008, "Wrong alignment on UBattleLeaderMark_C");
static_assert(sizeof(UBattleLeaderMark_C) == 0x0003F8, "Wrong size on UBattleLeaderMark_C");
static_assert(offsetof(UBattleLeaderMark_C, BattleLeaderMark) == 0x0003D0, "Member 'UBattleLeaderMark_C::BattleLeaderMark' has a wrong offset!");
static_assert(offsetof(UBattleLeaderMark_C, In) == 0x0003D8, "Member 'UBattleLeaderMark_C::In' has a wrong offset!");
static_assert(offsetof(UBattleLeaderMark_C, Icon_BattleLeader) == 0x0003E0, "Member 'UBattleLeaderMark_C::Icon_BattleLeader' has a wrong offset!");
static_assert(offsetof(UBattleLeaderMark_C, MarkBase) == 0x0003E8, "Member 'UBattleLeaderMark_C::MarkBase' has a wrong offset!");
static_assert(offsetof(UBattleLeaderMark_C, MarkFrame) == 0x0003F0, "Member 'UBattleLeaderMark_C::MarkFrame' has a wrong offset!");

}

