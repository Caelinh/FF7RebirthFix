#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EndDataObject

#include "Basic.hpp"


namespace SDK
{

// Enum EndDataObject.EDataObjectType
// NumValues: 0x0004
enum class EDataObjectType : uint8
{
	EDataObjectType_RESIDNET                 = 0,
	EDataObjectType_DEBUG                    = 1,
	EDataObjectType_FILED_LIST               = 2,
	EDataObjectType_MAX                      = 3,
};

// ScriptStruct EndDataObject.EndDataObjectAccessorBase
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndDataObjectAccessorBase
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataObjectAccessorBase) == 0x000008, "Wrong alignment on FEndDataObjectAccessorBase");
static_assert(sizeof(FEndDataObjectAccessorBase) == 0x000020, "Wrong size on FEndDataObjectAccessorBase");

// ScriptStruct EndDataObject.EndDataObjectEffectCharaPropertyAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEffectCharaPropertyAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEffectCharaPropertyAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEffectCharaPropertyAccessor");
static_assert(sizeof(FEndDataObjectEffectCharaPropertyAccessor) == 0x000020, "Wrong size on FEndDataObjectEffectCharaPropertyAccessor");

// ScriptStruct EndDataObject.EndDataObjectWildAnimalConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWildAnimalConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWildAnimalConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWildAnimalConditionAccessor");
static_assert(sizeof(FEndDataObjectWildAnimalConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectWildAnimalConditionAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleGuardReactionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleGuardReactionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleGuardReactionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleGuardReactionAccessor");
static_assert(sizeof(FEndDataObjectBattleGuardReactionAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleGuardReactionAccessor");

// ScriptStruct EndDataObject.EndDataTableRowBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FEndDataTableRowBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableRowBase) == 0x000008, "Wrong alignment on FEndDataTableRowBase");
static_assert(sizeof(FEndDataTableRowBase) == 0x000008, "Wrong size on FEndDataTableRowBase");

// ScriptStruct EndDataObject.EndDataTableItemAnimalMotion
// 0x0078 (0x0080 - 0x0008)
struct FEndDataTableItemAnimalMotion final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 Weight_Array;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BeginMotionName_Array;                             // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LoopMotionName_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EndMotionName_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 BaseLoopTime_Array;                                // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AdditionalLoopTime_Array;                          // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   CautionBeginMotionName;                            // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CautionLoopMotionName;                             // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CautionEndMotionName;                              // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableItemAnimalMotion) == 0x000008, "Wrong alignment on FEndDataTableItemAnimalMotion");
static_assert(sizeof(FEndDataTableItemAnimalMotion) == 0x000080, "Wrong size on FEndDataTableItemAnimalMotion");
static_assert(offsetof(FEndDataTableItemAnimalMotion, Weight_Array) == 0x000008, "Member 'FEndDataTableItemAnimalMotion::Weight_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalMotion, BeginMotionName_Array) == 0x000018, "Member 'FEndDataTableItemAnimalMotion::BeginMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalMotion, LoopMotionName_Array) == 0x000028, "Member 'FEndDataTableItemAnimalMotion::LoopMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalMotion, EndMotionName_Array) == 0x000038, "Member 'FEndDataTableItemAnimalMotion::EndMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalMotion, BaseLoopTime_Array) == 0x000048, "Member 'FEndDataTableItemAnimalMotion::BaseLoopTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalMotion, AdditionalLoopTime_Array) == 0x000058, "Member 'FEndDataTableItemAnimalMotion::AdditionalLoopTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalMotion, CautionBeginMotionName) == 0x000068, "Member 'FEndDataTableItemAnimalMotion::CautionBeginMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalMotion, CautionLoopMotionName) == 0x000070, "Member 'FEndDataTableItemAnimalMotion::CautionLoopMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalMotion, CautionEndMotionName) == 0x000078, "Member 'FEndDataTableItemAnimalMotion::CautionEndMotionName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectActionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectActionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectActionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectActionAccessor");
static_assert(sizeof(FEndDataObjectActionAccessor) == 0x000020, "Wrong size on FEndDataObjectActionAccessor");

// ScriptStruct EndDataObject.EndDataObjectCharaActionTableAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCharaActionTableAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCharaActionTableAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCharaActionTableAccessor");
static_assert(sizeof(FEndDataObjectCharaActionTableAccessor) == 0x000020, "Wrong size on FEndDataObjectCharaActionTableAccessor");

// ScriptStruct EndDataObject.EndDataObjectActionGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectActionGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectActionGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectActionGroupAccessor");
static_assert(sizeof(FEndDataObjectActionGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectActionGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventMemberExclusionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventMemberExclusionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventMemberExclusionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventMemberExclusionAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventMemberExclusionAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventMemberExclusionAccessor");

// ScriptStruct EndDataObject.EndDataTableEnvironmentPhysicsSpec
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableEnvironmentPhysicsSpec final : public FEndDataTableRowBase
{
public:
	class FString                                 ContentsEffect;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ContentsSE;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ItemDropId;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ExistsDummyCollision;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StaticMeshSetPath;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnvironmentPhysicsSpec) == 0x000008, "Wrong alignment on FEndDataTableEnvironmentPhysicsSpec");
static_assert(sizeof(FEndDataTableEnvironmentPhysicsSpec) == 0x000048, "Wrong size on FEndDataTableEnvironmentPhysicsSpec");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, ContentsEffect) == 0x000008, "Member 'FEndDataTableEnvironmentPhysicsSpec::ContentsEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, ContentsSE) == 0x000018, "Member 'FEndDataTableEnvironmentPhysicsSpec::ContentsSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, ItemDropId) == 0x000028, "Member 'FEndDataTableEnvironmentPhysicsSpec::ItemDropId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, ExistsDummyCollision) == 0x000030, "Member 'FEndDataTableEnvironmentPhysicsSpec::ExistsDummyCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, StaticMeshSetPath) == 0x000038, "Member 'FEndDataTableEnvironmentPhysicsSpec::StaticMeshSetPath' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectActionLimitAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectActionLimitAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectActionLimitAccessor) == 0x000008, "Wrong alignment on FEndDataObjectActionLimitAccessor");
static_assert(sizeof(FEndDataObjectActionLimitAccessor) == 0x000020, "Wrong size on FEndDataObjectActionLimitAccessor");

// ScriptStruct EndDataObject.EndDataObjectActionTestAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectActionTestAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectActionTestAccessor) == 0x000008, "Wrong alignment on FEndDataObjectActionTestAccessor");
static_assert(sizeof(FEndDataObjectActionTestAccessor) == 0x000020, "Wrong size on FEndDataObjectActionTestAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyBookAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyBookAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyBookAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyBookAccessor");
static_assert(sizeof(FEndDataObjectEnemyBookAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyBookAccessor");

// ScriptStruct EndDataObject.EndDataObjectUniqueActionActorAttackAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectUniqueActionActorAttackAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectUniqueActionActorAttackAccessor) == 0x000008, "Wrong alignment on FEndDataObjectUniqueActionActorAttackAccessor");
static_assert(sizeof(FEndDataObjectUniqueActionActorAttackAccessor) == 0x000020, "Wrong size on FEndDataObjectUniqueActionActorAttackAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattlePointLinkDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattlePointLinkDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattlePointLinkDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattlePointLinkDataAccessor");
static_assert(sizeof(FEndDataObjectBattlePointLinkDataAccessor) == 0x000020, "Wrong size on FEndDataObjectBattlePointLinkDataAccessor");

// ScriptStruct EndDataObject.EndDataTableEnemyGil
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableEnemyGil final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 Value_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyGil) == 0x000008, "Wrong alignment on FEndDataTableEnemyGil");
static_assert(sizeof(FEndDataTableEnemyGil) == 0x000018, "Wrong size on FEndDataTableEnemyGil");
static_assert(offsetof(FEndDataTableEnemyGil, Value_Array) == 0x000008, "Member 'FEndDataTableEnemyGil::Value_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectActorGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectActorGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectActorGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectActorGroupAccessor");
static_assert(sizeof(FEndDataObjectActorGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectActorGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleSpecialStateEffectAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleSpecialStateEffectAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleSpecialStateEffectAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleSpecialStateEffectAccessor");
static_assert(sizeof(FEndDataObjectBattleSpecialStateEffectAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleSpecialStateEffectAccessor");

// ScriptStruct EndDataObject.EndDataObjectCardGameOpponentDeckAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameOpponentDeckAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameOpponentDeckAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameOpponentDeckAccessor");
static_assert(sizeof(FEndDataObjectCardGameOpponentDeckAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameOpponentDeckAccessor");

// ScriptStruct EndDataObject.EndDataObjectAIParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAIParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAIParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAIParameterAccessor");
static_assert(sizeof(FEndDataObjectAIParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectAIParameterAccessor");

// ScriptStruct EndDataObject.EndDataTableItemAnimalEscapeRoute
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableItemAnimalEscapeRoute final : public FEndDataTableRowBase
{
public:
	class FName                                   SplineName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PointName_Array;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableItemAnimalEscapeRoute) == 0x000008, "Wrong alignment on FEndDataTableItemAnimalEscapeRoute");
static_assert(sizeof(FEndDataTableItemAnimalEscapeRoute) == 0x000020, "Wrong size on FEndDataTableItemAnimalEscapeRoute");
static_assert(offsetof(FEndDataTableItemAnimalEscapeRoute, SplineName) == 0x000008, "Member 'FEndDataTableItemAnimalEscapeRoute::SplineName' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalEscapeRoute, PointName_Array) == 0x000010, "Member 'FEndDataTableItemAnimalEscapeRoute::PointName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectAIStateGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAIStateGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAIStateGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAIStateGroupAccessor");
static_assert(sizeof(FEndDataObjectAIStateGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectAIStateGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventCharaAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventCharaAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventCharaAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventCharaAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventCharaAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventCharaAccessor");

// ScriptStruct EndDataObject.EndDataObjectAppContentAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAppContentAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAppContentAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAppContentAccessor");
static_assert(sizeof(FEndDataObjectAppContentAccessor) == 0x000020, "Wrong size on FEndDataObjectAppContentAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyBookBattleDamageSourceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyBookBattleDamageSourceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyBookBattleDamageSourceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyBookBattleDamageSourceAccessor");
static_assert(sizeof(FEndDataObjectEnemyBookBattleDamageSourceAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyBookBattleDamageSourceAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleSceneLevelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleSceneLevelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleSceneLevelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleSceneLevelAccessor");
static_assert(sizeof(FEndDataObjectBattleSceneLevelAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleSceneLevelAccessor");

// ScriptStruct EndDataObject.EndDataTableLearningSkill
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableLearningSkill final : public FEndDataTableRowBase
{
public:
	float                                         Probability;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnemyAbilityMateriaFlag;                           // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableLearningSkill) == 0x000008, "Wrong alignment on FEndDataTableLearningSkill");
static_assert(sizeof(FEndDataTableLearningSkill) == 0x000010, "Wrong size on FEndDataTableLearningSkill");
static_assert(offsetof(FEndDataTableLearningSkill, Probability) == 0x000008, "Member 'FEndDataTableLearningSkill::Probability' has a wrong offset!");
static_assert(offsetof(FEndDataTableLearningSkill, EnemyAbilityMateriaFlag) == 0x00000C, "Member 'FEndDataTableLearningSkill::EnemyAbilityMateriaFlag' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectAreaReportAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAreaReportAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAreaReportAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAreaReportAccessor");
static_assert(sizeof(FEndDataObjectAreaReportAccessor) == 0x000020, "Wrong size on FEndDataObjectAreaReportAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCaptureBalloonAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCaptureBalloonAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCaptureBalloonAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCaptureBalloonAccessor");
static_assert(sizeof(FEndDataObjectChocoboCaptureBalloonAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCaptureBalloonAccessor");

// ScriptStruct EndDataObject.EndDataObjectAssignStateChangeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAssignStateChangeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAssignStateChangeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAssignStateChangeAccessor");
static_assert(sizeof(FEndDataObjectAssignStateChangeAccessor) == 0x000020, "Wrong size on FEndDataObjectAssignStateChangeAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlayerEstimateParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlayerEstimateParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlayerEstimateParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlayerEstimateParameterAccessor");
static_assert(sizeof(FEndDataObjectPlayerEstimateParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectPlayerEstimateParameterAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceRivalSpeedAdjustData
// 0x00B8 (0x00C0 - 0x0008)
struct FEndDataTableChocoboRaceRivalSpeedAdjustData final : public FEndDataTableRowBase
{
public:
	float                                         GoalTimeDiff_High;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GoalTimeDiff_Middle;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GoalTimeDiff_Low;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ForwardPlayerTimeDiff_High;                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ForwardPlayerTimeDiff_Middle;                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ForwardPlayerTimeDiff_Low;                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BackPlayerTimeDiff_High;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BackPlayerTimeDiff_Middle;                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BackPlayerTimeDiff_Low;                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RankSpeedAdjust;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GoalTimeSpeedAdjust;                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ForwardPlayerTimeSpeedAdjust;                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BackPlayerTimeSpeedAdjust;                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PaceAdjustModeDuration;                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PaceAdjustFinishTimeDiff;                          // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpeedAdjustDuration;                               // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpeedAdjustInterval;                               // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeSpeedAdjust0;                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeSpeedAdjust1;                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeSpeedAdjustDuration;                     // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeSpeedAdjustInterval;                     // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeCheckRange;                              // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeCheckTime;                               // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeDuration;                                // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StaminaIntarval;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeTargetRangeMax;                          // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeTargetRangeMin;                          // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeCancelRangeMax;                          // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackModeCancelRangeMin;                          // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ApproachModeDuration;                              // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ApproachModeSpeedAdjustInterval;                   // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AttackModeCapacity;                                // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustTime;                                   // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustSpeedMax_High;                          // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustSpeedMin_High;                          // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustAccelerationMax_High;                   // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustAccelerationMin_High;                   // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustSpeedMax_Middle;                        // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustSpeedMin_Middle;                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustAccelerationMax_Middle;                 // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustAccelerationMin_Middle;                 // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustSpeedMax_Low;                           // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustSpeedMin_Low;                           // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustAccelerationMax_Low;                    // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyAdjustAccelerationMin_Low;                    // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboRaceRivalSpeedAdjustData) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceRivalSpeedAdjustData");
static_assert(sizeof(FEndDataTableChocoboRaceRivalSpeedAdjustData) == 0x0000C0, "Wrong size on FEndDataTableChocoboRaceRivalSpeedAdjustData");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, GoalTimeDiff_High) == 0x000008, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::GoalTimeDiff_High' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, GoalTimeDiff_Middle) == 0x00000C, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::GoalTimeDiff_Middle' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, GoalTimeDiff_Low) == 0x000010, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::GoalTimeDiff_Low' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, ForwardPlayerTimeDiff_High) == 0x000014, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::ForwardPlayerTimeDiff_High' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, ForwardPlayerTimeDiff_Middle) == 0x000018, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::ForwardPlayerTimeDiff_Middle' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, ForwardPlayerTimeDiff_Low) == 0x00001C, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::ForwardPlayerTimeDiff_Low' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, BackPlayerTimeDiff_High) == 0x000020, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::BackPlayerTimeDiff_High' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, BackPlayerTimeDiff_Middle) == 0x000024, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::BackPlayerTimeDiff_Middle' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, BackPlayerTimeDiff_Low) == 0x000028, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::BackPlayerTimeDiff_Low' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, RankSpeedAdjust) == 0x00002C, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::RankSpeedAdjust' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, GoalTimeSpeedAdjust) == 0x000030, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::GoalTimeSpeedAdjust' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, ForwardPlayerTimeSpeedAdjust) == 0x000034, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::ForwardPlayerTimeSpeedAdjust' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, BackPlayerTimeSpeedAdjust) == 0x000038, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::BackPlayerTimeSpeedAdjust' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, PaceAdjustModeDuration) == 0x00003C, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::PaceAdjustModeDuration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, PaceAdjustFinishTimeDiff) == 0x000040, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::PaceAdjustFinishTimeDiff' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, SpeedAdjustDuration) == 0x000044, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::SpeedAdjustDuration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, SpeedAdjustInterval) == 0x000048, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::SpeedAdjustInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeSpeedAdjust0) == 0x00004C, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeSpeedAdjust0' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeSpeedAdjust1) == 0x000050, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeSpeedAdjust1' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeSpeedAdjustDuration) == 0x000054, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeSpeedAdjustDuration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeSpeedAdjustInterval) == 0x000058, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeSpeedAdjustInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeCheckRange) == 0x00005C, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeCheckRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeCheckTime) == 0x000060, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeCheckTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeDuration) == 0x000064, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeDuration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, StaminaIntarval) == 0x000068, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::StaminaIntarval' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeTargetRangeMax) == 0x00006C, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeTargetRangeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeTargetRangeMin) == 0x000070, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeTargetRangeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeCancelRangeMax) == 0x000074, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeCancelRangeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeCancelRangeMin) == 0x000078, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeCancelRangeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, ApproachModeDuration) == 0x00007C, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::ApproachModeDuration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, ApproachModeSpeedAdjustInterval) == 0x000080, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::ApproachModeSpeedAdjustInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, AttackModeCapacity) == 0x000084, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::AttackModeCapacity' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustTime) == 0x000088, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustSpeedMax_High) == 0x00008C, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustSpeedMax_High' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustSpeedMin_High) == 0x000090, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustSpeedMin_High' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustAccelerationMax_High) == 0x000094, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustAccelerationMax_High' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustAccelerationMin_High) == 0x000098, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustAccelerationMin_High' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustSpeedMax_Middle) == 0x00009C, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustSpeedMax_Middle' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustSpeedMin_Middle) == 0x0000A0, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustSpeedMin_Middle' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustAccelerationMax_Middle) == 0x0000A4, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustAccelerationMax_Middle' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustAccelerationMin_Middle) == 0x0000A8, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustAccelerationMin_Middle' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustSpeedMax_Low) == 0x0000AC, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustSpeedMax_Low' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustSpeedMin_Low) == 0x0000B0, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustSpeedMin_Low' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustAccelerationMax_Low) == 0x0000B4, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustAccelerationMax_Low' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalSpeedAdjustData, EarlyAdjustAccelerationMin_Low) == 0x0000B8, "Member 'FEndDataTableChocoboRaceRivalSpeedAdjustData::EarlyAdjustAccelerationMin_Low' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectAutoAbilityParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoAbilityParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoAbilityParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoAbilityParameterAccessor");
static_assert(sizeof(FEndDataObjectAutoAbilityParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoAbilityParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventRelativeCameraAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventRelativeCameraAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventRelativeCameraAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventRelativeCameraAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventRelativeCameraAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventRelativeCameraAccessor");

// ScriptStruct EndDataObject.EndDataObjectAutoCameraGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoCameraGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoCameraGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoCameraGroupAccessor");
static_assert(sizeof(FEndDataObjectAutoCameraGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoCameraGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyTerritoryAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyTerritoryAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyTerritoryAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyTerritoryAccessor");
static_assert(sizeof(FEndDataObjectEnemyTerritoryAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyTerritoryAccessor");

// ScriptStruct EndDataObject.EndDataObjectWeaponUpgradeTreeLevelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWeaponUpgradeTreeLevelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWeaponUpgradeTreeLevelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWeaponUpgradeTreeLevelAccessor");
static_assert(sizeof(FEndDataObjectWeaponUpgradeTreeLevelAccessor) == 0x000020, "Wrong size on FEndDataObjectWeaponUpgradeTreeLevelAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleSpecialStatusChangeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleSpecialStatusChangeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleSpecialStatusChangeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleSpecialStatusChangeAccessor");
static_assert(sizeof(FEndDataObjectBattleSpecialStatusChangeAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleSpecialStatusChangeAccessor");

// ScriptStruct EndDataObject.EndDataTableEnvironmentSetWrapper
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableEnvironmentSetWrapper final : public FEndDataTableRowBase
{
public:
	class FName                                   EnvironmentSetId;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Hidden_Array;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActorName_Array;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnvironmentSetWrapper) == 0x000008, "Wrong alignment on FEndDataTableEnvironmentSetWrapper");
static_assert(sizeof(FEndDataTableEnvironmentSetWrapper) == 0x000030, "Wrong size on FEndDataTableEnvironmentSetWrapper");
static_assert(offsetof(FEndDataTableEnvironmentSetWrapper, EnvironmentSetId) == 0x000008, "Member 'FEndDataTableEnvironmentSetWrapper::EnvironmentSetId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSetWrapper, Hidden_Array) == 0x000010, "Member 'FEndDataTableEnvironmentSetWrapper::Hidden_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSetWrapper, ActorName_Array) == 0x000020, "Member 'FEndDataTableEnvironmentSetWrapper::ActorName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectAutoCameraImaginaryLineLogicAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoCameraImaginaryLineLogicAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoCameraImaginaryLineLogicAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoCameraImaginaryLineLogicAccessor");
static_assert(sizeof(FEndDataObjectAutoCameraImaginaryLineLogicAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoCameraImaginaryLineLogicAccessor");

// ScriptStruct EndDataObject.EndDataObjectChapterAssignStateChangeListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChapterAssignStateChangeListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChapterAssignStateChangeListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChapterAssignStateChangeListAccessor");
static_assert(sizeof(FEndDataObjectChapterAssignStateChangeListAccessor) == 0x000020, "Wrong size on FEndDataObjectChapterAssignStateChangeListAccessor");

// ScriptStruct EndDataObject.EndDataObjectAutoCameraLightGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoCameraLightGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoCameraLightGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoCameraLightGroupAccessor");
static_assert(sizeof(FEndDataObjectAutoCameraLightGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoCameraLightGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventAccessor");

// ScriptStruct EndDataObject.EndDataTableJunonParadeTownSoldierFormation
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableJunonParadeTownSoldierFormation final : public FEndDataTableRowBase
{
public:
	class FString                                 FormationName;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CharaSpecName;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PlatoonsNumber;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FormationSavedDataBitPosition;                     // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           JoinFormationCondition_Array;                      // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           OverwriteCharaSpecName_Array;                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableJunonParadeTownSoldierFormation) == 0x000008, "Wrong alignment on FEndDataTableJunonParadeTownSoldierFormation");
static_assert(sizeof(FEndDataTableJunonParadeTownSoldierFormation) == 0x000048, "Wrong size on FEndDataTableJunonParadeTownSoldierFormation");
static_assert(offsetof(FEndDataTableJunonParadeTownSoldierFormation, FormationName) == 0x000008, "Member 'FEndDataTableJunonParadeTownSoldierFormation::FormationName' has a wrong offset!");
static_assert(offsetof(FEndDataTableJunonParadeTownSoldierFormation, CharaSpecName) == 0x000018, "Member 'FEndDataTableJunonParadeTownSoldierFormation::CharaSpecName' has a wrong offset!");
static_assert(offsetof(FEndDataTableJunonParadeTownSoldierFormation, PlatoonsNumber) == 0x000020, "Member 'FEndDataTableJunonParadeTownSoldierFormation::PlatoonsNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableJunonParadeTownSoldierFormation, FormationSavedDataBitPosition) == 0x000021, "Member 'FEndDataTableJunonParadeTownSoldierFormation::FormationSavedDataBitPosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableJunonParadeTownSoldierFormation, JoinFormationCondition_Array) == 0x000028, "Member 'FEndDataTableJunonParadeTownSoldierFormation::JoinFormationCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableJunonParadeTownSoldierFormation, OverwriteCharaSpecName_Array) == 0x000038, "Member 'FEndDataTableJunonParadeTownSoldierFormation::OverwriteCharaSpecName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectAutoCameraLightInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoCameraLightInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoCameraLightInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoCameraLightInfoAccessor");
static_assert(sizeof(FEndDataObjectAutoCameraLightInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoCameraLightInfoAccessor");

// ScriptStruct EndDataObject.EndDataObjectAutoCameraPositionInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoCameraPositionInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoCameraPositionInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoCameraPositionInfoAccessor");
static_assert(sizeof(FEndDataObjectAutoCameraPositionInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoCameraPositionInfoAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceEquipColorAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceEquipColorAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceEquipColorAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceEquipColorAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceEquipColorAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceEquipColorAccessor");

// ScriptStruct EndDataObject.EndDataTableEnemyTerritoryLevel
// 0x0178 (0x0180 - 0x0008)
struct FEndDataTableEnemyTerritoryLevel final : public FEndDataTableRowBase
{
public:
	uint8                                         ForceBattleInAllEnemies;                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PerformExtendedInitializationSummonSystem;         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UnableBattleEscape;                                // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UseExtendedTerritoryCheck;                         // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InvalidateEnemiesEncountDefault;                   // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceHideEnemiesUntilAllSpawned;                   // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UnableBattleInTeleport;                            // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UnableBattleFinishTeleport;                        // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           UnableBattleInTeleportCharacter_Array;             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   FirstEncountMonitorLocationWork;                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StayNearLeaderReserveMemberName;                   // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UsePopTargetPoint;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DeleteSnapSaveOnHide;                              // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NeedNaviCheckForExternalEnemiesTerritory;          // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreRaycastForPreemptiveAttack;                  // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ForcePartyPositionWhenSavedOverTerritoryTargetPoint; // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RewardStateConditionID00;                          // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RewardStateConditionID01;                          // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RewardID;                                          // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ToCautionStateTrigger_Array;                       // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattleInStateTrigger_Array;                        // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EscapedBattleTrigger_Array;                        // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           WaveStateTrigger_Array;                            // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EnemyDefeatedStateTrigger_Array;                   // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           KillStateTrigger_Array;                            // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           KillAllTerritoryEnemiesTrigger_Array;              // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           OnDeadStateTrigger_Array;                          // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattleWinStateTrigger_Array;                       // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           UnableBattleEscapeWallContact_Array;               // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   CautionBGMName;                                    // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BattleBGMName;                                     // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DeadDirectionOverride;                             // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TalkGroupID_Array;                                 // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattleConditionTriggerGroupId_Array;               // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         SituationType;                                     // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NoWaitBattleTalk;                                  // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ToConnectEvent;                                    // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FinishBattleType_Array;                            // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         PopTargetPointSelectionMethod;                     // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PopTargetPoint_Array;                              // 0x0158(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         EnableSpawnGroup;                                  // 0x0168(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SafeReturnTargetPoint_Array;                       // 0x0170(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyTerritoryLevel) == 0x000008, "Wrong alignment on FEndDataTableEnemyTerritoryLevel");
static_assert(sizeof(FEndDataTableEnemyTerritoryLevel) == 0x000180, "Wrong size on FEndDataTableEnemyTerritoryLevel");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, ForceBattleInAllEnemies) == 0x000008, "Member 'FEndDataTableEnemyTerritoryLevel::ForceBattleInAllEnemies' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, PerformExtendedInitializationSummonSystem) == 0x000009, "Member 'FEndDataTableEnemyTerritoryLevel::PerformExtendedInitializationSummonSystem' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, UnableBattleEscape) == 0x00000A, "Member 'FEndDataTableEnemyTerritoryLevel::UnableBattleEscape' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, UseExtendedTerritoryCheck) == 0x00000B, "Member 'FEndDataTableEnemyTerritoryLevel::UseExtendedTerritoryCheck' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, InvalidateEnemiesEncountDefault) == 0x00000C, "Member 'FEndDataTableEnemyTerritoryLevel::InvalidateEnemiesEncountDefault' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, ForceHideEnemiesUntilAllSpawned) == 0x00000D, "Member 'FEndDataTableEnemyTerritoryLevel::ForceHideEnemiesUntilAllSpawned' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, UnableBattleInTeleport) == 0x00000E, "Member 'FEndDataTableEnemyTerritoryLevel::UnableBattleInTeleport' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, UnableBattleFinishTeleport) == 0x00000F, "Member 'FEndDataTableEnemyTerritoryLevel::UnableBattleFinishTeleport' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, UnableBattleInTeleportCharacter_Array) == 0x000010, "Member 'FEndDataTableEnemyTerritoryLevel::UnableBattleInTeleportCharacter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, FirstEncountMonitorLocationWork) == 0x000020, "Member 'FEndDataTableEnemyTerritoryLevel::FirstEncountMonitorLocationWork' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, StayNearLeaderReserveMemberName) == 0x000028, "Member 'FEndDataTableEnemyTerritoryLevel::StayNearLeaderReserveMemberName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, UsePopTargetPoint) == 0x000030, "Member 'FEndDataTableEnemyTerritoryLevel::UsePopTargetPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, DeleteSnapSaveOnHide) == 0x000031, "Member 'FEndDataTableEnemyTerritoryLevel::DeleteSnapSaveOnHide' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, NeedNaviCheckForExternalEnemiesTerritory) == 0x000032, "Member 'FEndDataTableEnemyTerritoryLevel::NeedNaviCheckForExternalEnemiesTerritory' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, IgnoreRaycastForPreemptiveAttack) == 0x000033, "Member 'FEndDataTableEnemyTerritoryLevel::IgnoreRaycastForPreemptiveAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, ForcePartyPositionWhenSavedOverTerritoryTargetPoint) == 0x000034, "Member 'FEndDataTableEnemyTerritoryLevel::ForcePartyPositionWhenSavedOverTerritoryTargetPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, RewardStateConditionID00) == 0x00003C, "Member 'FEndDataTableEnemyTerritoryLevel::RewardStateConditionID00' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, RewardStateConditionID01) == 0x000044, "Member 'FEndDataTableEnemyTerritoryLevel::RewardStateConditionID01' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, RewardID) == 0x00004C, "Member 'FEndDataTableEnemyTerritoryLevel::RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, ToCautionStateTrigger_Array) == 0x000058, "Member 'FEndDataTableEnemyTerritoryLevel::ToCautionStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, BattleInStateTrigger_Array) == 0x000068, "Member 'FEndDataTableEnemyTerritoryLevel::BattleInStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, EscapedBattleTrigger_Array) == 0x000078, "Member 'FEndDataTableEnemyTerritoryLevel::EscapedBattleTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, WaveStateTrigger_Array) == 0x000088, "Member 'FEndDataTableEnemyTerritoryLevel::WaveStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, EnemyDefeatedStateTrigger_Array) == 0x000098, "Member 'FEndDataTableEnemyTerritoryLevel::EnemyDefeatedStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, KillStateTrigger_Array) == 0x0000A8, "Member 'FEndDataTableEnemyTerritoryLevel::KillStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, KillAllTerritoryEnemiesTrigger_Array) == 0x0000B8, "Member 'FEndDataTableEnemyTerritoryLevel::KillAllTerritoryEnemiesTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, OnDeadStateTrigger_Array) == 0x0000C8, "Member 'FEndDataTableEnemyTerritoryLevel::OnDeadStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, BattleWinStateTrigger_Array) == 0x0000D8, "Member 'FEndDataTableEnemyTerritoryLevel::BattleWinStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, UnableBattleEscapeWallContact_Array) == 0x0000E8, "Member 'FEndDataTableEnemyTerritoryLevel::UnableBattleEscapeWallContact_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, CautionBGMName) == 0x0000F8, "Member 'FEndDataTableEnemyTerritoryLevel::CautionBGMName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, BattleBGMName) == 0x000100, "Member 'FEndDataTableEnemyTerritoryLevel::BattleBGMName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, DeadDirectionOverride) == 0x000108, "Member 'FEndDataTableEnemyTerritoryLevel::DeadDirectionOverride' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, TalkGroupID_Array) == 0x000110, "Member 'FEndDataTableEnemyTerritoryLevel::TalkGroupID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, BattleConditionTriggerGroupId_Array) == 0x000120, "Member 'FEndDataTableEnemyTerritoryLevel::BattleConditionTriggerGroupId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, SituationType) == 0x000130, "Member 'FEndDataTableEnemyTerritoryLevel::SituationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, NoWaitBattleTalk) == 0x000134, "Member 'FEndDataTableEnemyTerritoryLevel::NoWaitBattleTalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, ToConnectEvent) == 0x000138, "Member 'FEndDataTableEnemyTerritoryLevel::ToConnectEvent' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, FinishBattleType_Array) == 0x000140, "Member 'FEndDataTableEnemyTerritoryLevel::FinishBattleType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, PopTargetPointSelectionMethod) == 0x000150, "Member 'FEndDataTableEnemyTerritoryLevel::PopTargetPointSelectionMethod' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, PopTargetPoint_Array) == 0x000158, "Member 'FEndDataTableEnemyTerritoryLevel::PopTargetPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, EnableSpawnGroup) == 0x000168, "Member 'FEndDataTableEnemyTerritoryLevel::EnableSpawnGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryLevel, SafeReturnTargetPoint_Array) == 0x000170, "Member 'FEndDataTableEnemyTerritoryLevel::SafeReturnTargetPoint_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectAutoCameraPositionLogicAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoCameraPositionLogicAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoCameraPositionLogicAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoCameraPositionLogicAccessor");
static_assert(sizeof(FEndDataObjectAutoCameraPositionLogicAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoCameraPositionLogicAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCraftLocationGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCraftLocationGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCraftLocationGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCraftLocationGroupAccessor");
static_assert(sizeof(FEndDataObjectChocoboCraftLocationGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCraftLocationGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectAutoCameraShotInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoCameraShotInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoCameraShotInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoCameraShotInfoAccessor");
static_assert(sizeof(FEndDataObjectAutoCameraShotInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoCameraShotInfoAccessor");

// ScriptStruct EndDataObject.EndDataTableCardGame
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableCardGame final : public FEndDataTableRowBase
{
public:
	class FName                                   WonStoryFlagID;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGame) == 0x000008, "Wrong alignment on FEndDataTableCardGame");
static_assert(sizeof(FEndDataTableCardGame) == 0x000010, "Wrong size on FEndDataTableCardGame");
static_assert(offsetof(FEndDataTableCardGame, WonStoryFlagID) == 0x000008, "Member 'FEndDataTableCardGame::WonStoryFlagID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectAutoCameraShotLogicAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoCameraShotLogicAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoCameraShotLogicAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoCameraShotLogicAccessor");
static_assert(sizeof(FEndDataObjectAutoCameraShotLogicAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoCameraShotLogicAccessor");

// ScriptStruct EndDataObject.EndDataObjectAutoMagicGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoMagicGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoMagicGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoMagicGroupAccessor");
static_assert(sizeof(FEndDataObjectAutoMagicGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoMagicGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceProcessDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceProcessDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceProcessDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceProcessDataAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceProcessDataAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceProcessDataAccessor");

// ScriptStruct EndDataObject.EndDataTableCameraModule
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTableCameraModule final : public FEndDataTableRowBase
{
public:
	class FName                                   DefaultID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlendInTime;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BlendInType;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendOutTime;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BlendOutType;                                      // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param0;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param1;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param2;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param3;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param4;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param5;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param6;                                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param7;                                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param8;                                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param9;                                            // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param10;                                           // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param11;                                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param12;                                           // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param13;                                           // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param14;                                           // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param15;                                           // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param16;                                           // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param17;                                           // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param18;                                           // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param19;                                           // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param20;                                           // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param21;                                           // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param22;                                           // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param23;                                           // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Param24;                                           // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ParamFlag0;                                        // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCameraModule) == 0x000008, "Wrong alignment on FEndDataTableCameraModule");
static_assert(sizeof(FEndDataTableCameraModule) == 0x000088, "Wrong size on FEndDataTableCameraModule");
static_assert(offsetof(FEndDataTableCameraModule, DefaultID) == 0x000008, "Member 'FEndDataTableCameraModule::DefaultID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, BlendInTime) == 0x000010, "Member 'FEndDataTableCameraModule::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, BlendInType) == 0x000014, "Member 'FEndDataTableCameraModule::BlendInType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, BlendOutTime) == 0x000018, "Member 'FEndDataTableCameraModule::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, BlendOutType) == 0x00001C, "Member 'FEndDataTableCameraModule::BlendOutType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param0) == 0x000020, "Member 'FEndDataTableCameraModule::Param0' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param1) == 0x000024, "Member 'FEndDataTableCameraModule::Param1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param2) == 0x000028, "Member 'FEndDataTableCameraModule::Param2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param3) == 0x00002C, "Member 'FEndDataTableCameraModule::Param3' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param4) == 0x000030, "Member 'FEndDataTableCameraModule::Param4' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param5) == 0x000034, "Member 'FEndDataTableCameraModule::Param5' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param6) == 0x000038, "Member 'FEndDataTableCameraModule::Param6' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param7) == 0x00003C, "Member 'FEndDataTableCameraModule::Param7' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param8) == 0x000040, "Member 'FEndDataTableCameraModule::Param8' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param9) == 0x000044, "Member 'FEndDataTableCameraModule::Param9' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param10) == 0x000048, "Member 'FEndDataTableCameraModule::Param10' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param11) == 0x00004C, "Member 'FEndDataTableCameraModule::Param11' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param12) == 0x000050, "Member 'FEndDataTableCameraModule::Param12' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param13) == 0x000054, "Member 'FEndDataTableCameraModule::Param13' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param14) == 0x000058, "Member 'FEndDataTableCameraModule::Param14' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param15) == 0x00005C, "Member 'FEndDataTableCameraModule::Param15' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param16) == 0x000060, "Member 'FEndDataTableCameraModule::Param16' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param17) == 0x000064, "Member 'FEndDataTableCameraModule::Param17' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param18) == 0x000068, "Member 'FEndDataTableCameraModule::Param18' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param19) == 0x00006C, "Member 'FEndDataTableCameraModule::Param19' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param20) == 0x000070, "Member 'FEndDataTableCameraModule::Param20' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param21) == 0x000074, "Member 'FEndDataTableCameraModule::Param21' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param22) == 0x000078, "Member 'FEndDataTableCameraModule::Param22' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param23) == 0x00007C, "Member 'FEndDataTableCameraModule::Param23' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, Param24) == 0x000080, "Member 'FEndDataTableCameraModule::Param24' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraModule, ParamFlag0) == 0x000084, "Member 'FEndDataTableCameraModule::ParamFlag0' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectAutoWeaponAbilityAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectAutoWeaponAbilityAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectAutoWeaponAbilityAccessor) == 0x000008, "Wrong alignment on FEndDataObjectAutoWeaponAbilityAccessor");
static_assert(sizeof(FEndDataObjectAutoWeaponAbilityAccessor) == 0x000020, "Wrong size on FEndDataObjectAutoWeaponAbilityAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeCharaSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeCharaSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeCharaSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeCharaSpecAccessor");
static_assert(sizeof(FEndDataObjectBikeCharaSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeCharaSpecAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleAbilityAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleAbilityAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleAbilityAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleAbilityAccessor");
static_assert(sizeof(FEndDataObjectBattleAbilityAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleAbilityAccessor");

// ScriptStruct EndDataObject.EndDataTableEnemyTerritory
// 0x01A0 (0x01A8 - 0x0008)
struct FEndDataTableEnemyTerritory final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TerritoryType;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RespawnTimer;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RespawnReadyStateTrigger;                          // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SaveTerritoryState;                                // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceRepopWhenSavedOverTerritory;                  // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TerritoryDefeatedStateLocationWork;                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HideNavimap;                                       // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BattleSceneBluePrint;                              // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RestartConsecutiveBattles;                         // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreSafeEscapeVolumes;                           // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceEnemyDynamicBattleAreaSizeMax;                // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SetDisableReserveMemberCommand;                    // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MobTemplateList_Array;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 MobLevelList_Array;                                // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FieldAINameList_Array;                             // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 MinPopList_Array;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 MaxPopList_Array;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 AerialEnemyFlag_Array;                             // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SaveStateLocationWorkList_Array;                   // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ExternalEnemiesList_Array;                         // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DisableKillOnTerritoryFinishList_Array;            // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DisableDeadDestroyList_Array;                      // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DisableSystemLogOnKillList_Array;                  // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ForceFinishBattleOnKill_Array;                     // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ExternalEnemyLevelList_Array;                      // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ExternalEnemyAerialEnemyFlag_Array;                // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SaveStateLocationWorkExternalEnemy_Array;          // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         DontForceKillHiddenWaveEnemiesOnKillTerritoryEnemies; // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           WaveMobTemplateList_Array;                         // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 WaveMobLevelList_Array;                            // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 WavePopSettingList_Array;                          // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 WaveBattleSceneAerialEnemyFlag_Array;              // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           WaveMobSpecialStatusChangeID_Array;                // 0x0170(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   SummonConditionID;                                 // 0x0180(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WinFieldTransitionMotionName;                      // 0x0188(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         WinFieldTransitionMotionAllowFreeCamera;           // 0x0190(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BattleConditionTriggerGroupId_Array;               // 0x0198(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyTerritory) == 0x000008, "Wrong alignment on FEndDataTableEnemyTerritory");
static_assert(sizeof(FEndDataTableEnemyTerritory) == 0x0001A8, "Wrong size on FEndDataTableEnemyTerritory");
static_assert(offsetof(FEndDataTableEnemyTerritory, UniqueIndex) == 0x000008, "Member 'FEndDataTableEnemyTerritory::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, TerritoryType) == 0x00000C, "Member 'FEndDataTableEnemyTerritory::TerritoryType' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, RespawnTimer) == 0x000010, "Member 'FEndDataTableEnemyTerritory::RespawnTimer' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, RespawnReadyStateTrigger) == 0x000014, "Member 'FEndDataTableEnemyTerritory::RespawnReadyStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, SaveTerritoryState) == 0x00001C, "Member 'FEndDataTableEnemyTerritory::SaveTerritoryState' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, ForceRepopWhenSavedOverTerritory) == 0x00001D, "Member 'FEndDataTableEnemyTerritory::ForceRepopWhenSavedOverTerritory' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, TerritoryDefeatedStateLocationWork) == 0x000020, "Member 'FEndDataTableEnemyTerritory::TerritoryDefeatedStateLocationWork' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, HideNavimap) == 0x000028, "Member 'FEndDataTableEnemyTerritory::HideNavimap' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, BattleSceneBluePrint) == 0x00002C, "Member 'FEndDataTableEnemyTerritory::BattleSceneBluePrint' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, RestartConsecutiveBattles) == 0x000034, "Member 'FEndDataTableEnemyTerritory::RestartConsecutiveBattles' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, IgnoreSafeEscapeVolumes) == 0x000035, "Member 'FEndDataTableEnemyTerritory::IgnoreSafeEscapeVolumes' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, ForceEnemyDynamicBattleAreaSizeMax) == 0x000036, "Member 'FEndDataTableEnemyTerritory::ForceEnemyDynamicBattleAreaSizeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, SetDisableReserveMemberCommand) == 0x000037, "Member 'FEndDataTableEnemyTerritory::SetDisableReserveMemberCommand' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, MobTemplateList_Array) == 0x000038, "Member 'FEndDataTableEnemyTerritory::MobTemplateList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, MobLevelList_Array) == 0x000048, "Member 'FEndDataTableEnemyTerritory::MobLevelList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, FieldAINameList_Array) == 0x000058, "Member 'FEndDataTableEnemyTerritory::FieldAINameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, MinPopList_Array) == 0x000068, "Member 'FEndDataTableEnemyTerritory::MinPopList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, MaxPopList_Array) == 0x000078, "Member 'FEndDataTableEnemyTerritory::MaxPopList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, AerialEnemyFlag_Array) == 0x000088, "Member 'FEndDataTableEnemyTerritory::AerialEnemyFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, SaveStateLocationWorkList_Array) == 0x000098, "Member 'FEndDataTableEnemyTerritory::SaveStateLocationWorkList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, ExternalEnemiesList_Array) == 0x0000A8, "Member 'FEndDataTableEnemyTerritory::ExternalEnemiesList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, DisableKillOnTerritoryFinishList_Array) == 0x0000B8, "Member 'FEndDataTableEnemyTerritory::DisableKillOnTerritoryFinishList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, DisableDeadDestroyList_Array) == 0x0000C8, "Member 'FEndDataTableEnemyTerritory::DisableDeadDestroyList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, DisableSystemLogOnKillList_Array) == 0x0000D8, "Member 'FEndDataTableEnemyTerritory::DisableSystemLogOnKillList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, ForceFinishBattleOnKill_Array) == 0x0000E8, "Member 'FEndDataTableEnemyTerritory::ForceFinishBattleOnKill_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, ExternalEnemyLevelList_Array) == 0x0000F8, "Member 'FEndDataTableEnemyTerritory::ExternalEnemyLevelList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, ExternalEnemyAerialEnemyFlag_Array) == 0x000108, "Member 'FEndDataTableEnemyTerritory::ExternalEnemyAerialEnemyFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, SaveStateLocationWorkExternalEnemy_Array) == 0x000118, "Member 'FEndDataTableEnemyTerritory::SaveStateLocationWorkExternalEnemy_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, DontForceKillHiddenWaveEnemiesOnKillTerritoryEnemies) == 0x000128, "Member 'FEndDataTableEnemyTerritory::DontForceKillHiddenWaveEnemiesOnKillTerritoryEnemies' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, WaveMobTemplateList_Array) == 0x000130, "Member 'FEndDataTableEnemyTerritory::WaveMobTemplateList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, WaveMobLevelList_Array) == 0x000140, "Member 'FEndDataTableEnemyTerritory::WaveMobLevelList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, WavePopSettingList_Array) == 0x000150, "Member 'FEndDataTableEnemyTerritory::WavePopSettingList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, WaveBattleSceneAerialEnemyFlag_Array) == 0x000160, "Member 'FEndDataTableEnemyTerritory::WaveBattleSceneAerialEnemyFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, WaveMobSpecialStatusChangeID_Array) == 0x000170, "Member 'FEndDataTableEnemyTerritory::WaveMobSpecialStatusChangeID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, SummonConditionID) == 0x000180, "Member 'FEndDataTableEnemyTerritory::SummonConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, WinFieldTransitionMotionName) == 0x000188, "Member 'FEndDataTableEnemyTerritory::WinFieldTransitionMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, WinFieldTransitionMotionAllowFreeCamera) == 0x000190, "Member 'FEndDataTableEnemyTerritory::WinFieldTransitionMotionAllowFreeCamera' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritory, BattleConditionTriggerGroupId_Array) == 0x000198, "Member 'FEndDataTableEnemyTerritory::BattleConditionTriggerGroupId_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleAbilityReactionInfluenceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleAbilityReactionInfluenceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleAbilityReactionInfluenceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleAbilityReactionInfluenceAccessor");
static_assert(sizeof(FEndDataObjectBattleAbilityReactionInfluenceAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleAbilityReactionInfluenceAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleAbilityResourceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleAbilityResourceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleAbilityResourceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleAbilityResourceAccessor");
static_assert(sizeof(FEndDataObjectBattleAbilityResourceAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleAbilityResourceAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceRivalSpeedAdjustDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceRivalSpeedAdjustDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceRivalSpeedAdjustDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceRivalSpeedAdjustDataAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceRivalSpeedAdjustDataAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceRivalSpeedAdjustDataAccessor");

// ScriptStruct EndDataObject.EndDataTableEventPriorityChange
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEventPriorityChange final : public FEndDataTableRowBase
{
public:
	int32                                         CinemaStatusFromCinema;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ActFromCinema;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LogFromCinema;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VoiceFromCinema;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VolumeFromCinema;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableEventPriorityChange) == 0x000008, "Wrong alignment on FEndDataTableEventPriorityChange");
static_assert(sizeof(FEndDataTableEventPriorityChange) == 0x000020, "Wrong size on FEndDataTableEventPriorityChange");
static_assert(offsetof(FEndDataTableEventPriorityChange, CinemaStatusFromCinema) == 0x000008, "Member 'FEndDataTableEventPriorityChange::CinemaStatusFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityChange, ActFromCinema) == 0x00000C, "Member 'FEndDataTableEventPriorityChange::ActFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityChange, LogFromCinema) == 0x000010, "Member 'FEndDataTableEventPriorityChange::LogFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityChange, VoiceFromCinema) == 0x000014, "Member 'FEndDataTableEventPriorityChange::VoiceFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityChange, VolumeFromCinema) == 0x000018, "Member 'FEndDataTableEventPriorityChange::VolumeFromCinema' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleBreakableAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleBreakableAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleBreakableAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleBreakableAccessor");
static_assert(sizeof(FEndDataObjectBattleBreakableAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleBreakableAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleBreakAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleBreakAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleBreakAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleBreakAccessor");
static_assert(sizeof(FEndDataObjectBattleBreakAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleBreakAccessor");

// ScriptStruct EndDataObject.EndDataTableCardGameMessageSet
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableCardGameMessageSet final : public FEndDataTableRowBase
{
public:
	class FName                                   FirstPut;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FirstDeal;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Put;                                               // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Deal;                                              // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DealWin;                                           // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DealLose;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FinalDealWin;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FinalDealLose;                                     // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGameMessageSet) == 0x000008, "Wrong alignment on FEndDataTableCardGameMessageSet");
static_assert(sizeof(FEndDataTableCardGameMessageSet) == 0x000048, "Wrong size on FEndDataTableCardGameMessageSet");
static_assert(offsetof(FEndDataTableCardGameMessageSet, FirstPut) == 0x000008, "Member 'FEndDataTableCardGameMessageSet::FirstPut' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageSet, FirstDeal) == 0x000010, "Member 'FEndDataTableCardGameMessageSet::FirstDeal' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageSet, Put) == 0x000018, "Member 'FEndDataTableCardGameMessageSet::Put' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageSet, Deal) == 0x000020, "Member 'FEndDataTableCardGameMessageSet::Deal' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageSet, DealWin) == 0x000028, "Member 'FEndDataTableCardGameMessageSet::DealWin' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageSet, DealLose) == 0x000030, "Member 'FEndDataTableCardGameMessageSet::DealLose' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageSet, FinalDealWin) == 0x000038, "Member 'FEndDataTableCardGameMessageSet::FinalDealWin' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageSet, FinalDealLose) == 0x000040, "Member 'FEndDataTableCardGameMessageSet::FinalDealLose' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleCaitSithSlotReelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleCaitSithSlotReelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleCaitSithSlotReelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleCaitSithSlotReelAccessor");
static_assert(sizeof(FEndDataObjectBattleCaitSithSlotReelAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleCaitSithSlotReelAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleCameraSequenceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleCameraSequenceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleCameraSequenceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleCameraSequenceAccessor");
static_assert(sizeof(FEndDataObjectBattleCameraSequenceAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleCameraSequenceAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceSkillListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceSkillListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceSkillListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceSkillListAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceSkillListAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceSkillListAccessor");

// ScriptStruct EndDataObject.EndDataTableCardGameAnomalyBoard
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableCardGameAnomalyBoard final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           Card_Array;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Tettitory_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Affy_Array;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGameAnomalyBoard) == 0x000008, "Wrong alignment on FEndDataTableCardGameAnomalyBoard");
static_assert(sizeof(FEndDataTableCardGameAnomalyBoard) == 0x000038, "Wrong size on FEndDataTableCardGameAnomalyBoard");
static_assert(offsetof(FEndDataTableCardGameAnomalyBoard, Card_Array) == 0x000008, "Member 'FEndDataTableCardGameAnomalyBoard::Card_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAnomalyBoard, Tettitory_Array) == 0x000018, "Member 'FEndDataTableCardGameAnomalyBoard::Tettitory_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAnomalyBoard, Affy_Array) == 0x000028, "Member 'FEndDataTableCardGameAnomalyBoard::Affy_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleCharaAttachAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleCharaAttachAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleCharaAttachAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleCharaAttachAccessor");
static_assert(sizeof(FEndDataObjectBattleCharaAttachAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleCharaAttachAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCaptureDistanceParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCaptureDistanceParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCaptureDistanceParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCaptureDistanceParameterAccessor");
static_assert(sizeof(FEndDataObjectChocoboCaptureDistanceParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCaptureDistanceParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleCharaCameraModuleIDAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleCharaCameraModuleIDAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleCharaCameraModuleIDAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleCharaCameraModuleIDAccessor");
static_assert(sizeof(FEndDataObjectBattleCharaCameraModuleIDAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleCharaCameraModuleIDAccessor");

// ScriptStruct EndDataObject.EndDataTableEquipment
// 0x0220 (0x0228 - 0x0008)
struct FEndDataTableEquipment final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           CanEquip_Array;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         AttackAdd;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AttackScale;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicAttackAdd;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicAttackScale;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DefenseAdd;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DefenseScale;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicDefenseAdd;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicDefenseScale;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StrengthAdd;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StrengthScale;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicAdd;                                          // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicScale;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VitalityAdd;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VitalityScale;                                     // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SpiritAdd;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SpiritScale;                                       // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LuckAdd;                                           // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LuckScale;                                         // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DexterityAdd;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DexterityScale;                                    // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HPMaxAdd;                                          // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HPMaxScale;                                        // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MPMaxAdd;                                          // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MPMaxScale;                                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CriticalHitRateAdd;                                // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CriticalHitRateScale;                              // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PropertyResist0;                                   // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PropertyResist1;                                   // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 AttributeResist_Array;                             // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 StatusChangeResist_Array;                          // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SpecialResist_Array;                               // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SkillConditionType_Array;                          // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 SkillConditionValue_Array;                         // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 SkillEffectType_Array;                             // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 SkillEffectValue_Array;                            // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SkillEffectName_Array;                             // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         SkillTextLabel_Array;                              // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SkillEffectTextInfoID_Array;                       // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         BreakDead;                                         // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MateriaGrowScale;                                  // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MateriaSlotDouble;                                 // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MateriaSlotSingle;                                 // 0x0131(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 MateriaSlotModify_Array;                           // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ModelMateriaIndex_Array;                           // 0x0148(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CharaSpecID_Array;                                 // 0x0158(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   UpgradeID;                                         // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LongAttackRange;                                   // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NormalAttackReach;                                 // 0x0174(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideGuardBeginSequeceName;                     // 0x0178(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OverrideGuardLoopSequeceName;                      // 0x0180(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OverrideGuardEndSequeceName;                       // 0x0188(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BurstAbilityID;                                    // 0x0190(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 OverrideBurstAbilityText;                          // 0x0198(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 OverrideBurstAbilityHelpText;                      // 0x01A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 LearningConditionType_Array;                       // 0x01B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 LearningConditionValue_Array;                      // 0x01C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         LearningCondAddPoint;                              // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LearningCounterID;                                 // 0x01DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LearningCondUseCount;                              // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LearningFlag;                                      // 0x01E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 LearningConditionText;                             // 0x01F0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FieldAttackStateTriggerId;                         // 0x0200(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MovieName;                                         // 0x0208(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SkillCoreSlotNum;                                  // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SkillCoreSlotMax_Array;                            // 0x0218(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEquipment) == 0x000008, "Wrong alignment on FEndDataTableEquipment");
static_assert(sizeof(FEndDataTableEquipment) == 0x000228, "Wrong size on FEndDataTableEquipment");
static_assert(offsetof(FEndDataTableEquipment, CanEquip_Array) == 0x000008, "Member 'FEndDataTableEquipment::CanEquip_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, AttackAdd) == 0x000018, "Member 'FEndDataTableEquipment::AttackAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, AttackScale) == 0x00001C, "Member 'FEndDataTableEquipment::AttackScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicAttackAdd) == 0x000020, "Member 'FEndDataTableEquipment::MagicAttackAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicAttackScale) == 0x000024, "Member 'FEndDataTableEquipment::MagicAttackScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, DefenseAdd) == 0x000028, "Member 'FEndDataTableEquipment::DefenseAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, DefenseScale) == 0x00002C, "Member 'FEndDataTableEquipment::DefenseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicDefenseAdd) == 0x000030, "Member 'FEndDataTableEquipment::MagicDefenseAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicDefenseScale) == 0x000034, "Member 'FEndDataTableEquipment::MagicDefenseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, StrengthAdd) == 0x000038, "Member 'FEndDataTableEquipment::StrengthAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, StrengthScale) == 0x00003C, "Member 'FEndDataTableEquipment::StrengthScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicAdd) == 0x000040, "Member 'FEndDataTableEquipment::MagicAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicScale) == 0x000044, "Member 'FEndDataTableEquipment::MagicScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, VitalityAdd) == 0x000048, "Member 'FEndDataTableEquipment::VitalityAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, VitalityScale) == 0x00004C, "Member 'FEndDataTableEquipment::VitalityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SpiritAdd) == 0x000050, "Member 'FEndDataTableEquipment::SpiritAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SpiritScale) == 0x000054, "Member 'FEndDataTableEquipment::SpiritScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LuckAdd) == 0x000058, "Member 'FEndDataTableEquipment::LuckAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LuckScale) == 0x00005C, "Member 'FEndDataTableEquipment::LuckScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, DexterityAdd) == 0x000060, "Member 'FEndDataTableEquipment::DexterityAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, DexterityScale) == 0x000064, "Member 'FEndDataTableEquipment::DexterityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, HPMaxAdd) == 0x000068, "Member 'FEndDataTableEquipment::HPMaxAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, HPMaxScale) == 0x00006C, "Member 'FEndDataTableEquipment::HPMaxScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MPMaxAdd) == 0x000070, "Member 'FEndDataTableEquipment::MPMaxAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MPMaxScale) == 0x000074, "Member 'FEndDataTableEquipment::MPMaxScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CriticalHitRateAdd) == 0x000078, "Member 'FEndDataTableEquipment::CriticalHitRateAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CriticalHitRateScale) == 0x00007C, "Member 'FEndDataTableEquipment::CriticalHitRateScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, PropertyResist0) == 0x000080, "Member 'FEndDataTableEquipment::PropertyResist0' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, PropertyResist1) == 0x000081, "Member 'FEndDataTableEquipment::PropertyResist1' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, AttributeResist_Array) == 0x000088, "Member 'FEndDataTableEquipment::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, StatusChangeResist_Array) == 0x000098, "Member 'FEndDataTableEquipment::StatusChangeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SpecialResist_Array) == 0x0000A8, "Member 'FEndDataTableEquipment::SpecialResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SkillConditionType_Array) == 0x0000B8, "Member 'FEndDataTableEquipment::SkillConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SkillConditionValue_Array) == 0x0000C8, "Member 'FEndDataTableEquipment::SkillConditionValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SkillEffectType_Array) == 0x0000D8, "Member 'FEndDataTableEquipment::SkillEffectType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SkillEffectValue_Array) == 0x0000E8, "Member 'FEndDataTableEquipment::SkillEffectValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SkillEffectName_Array) == 0x0000F8, "Member 'FEndDataTableEquipment::SkillEffectName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SkillTextLabel_Array) == 0x000108, "Member 'FEndDataTableEquipment::SkillTextLabel_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SkillEffectTextInfoID_Array) == 0x000118, "Member 'FEndDataTableEquipment::SkillEffectTextInfoID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, BreakDead) == 0x000128, "Member 'FEndDataTableEquipment::BreakDead' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MateriaGrowScale) == 0x00012C, "Member 'FEndDataTableEquipment::MateriaGrowScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MateriaSlotDouble) == 0x000130, "Member 'FEndDataTableEquipment::MateriaSlotDouble' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MateriaSlotSingle) == 0x000131, "Member 'FEndDataTableEquipment::MateriaSlotSingle' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MateriaSlotModify_Array) == 0x000138, "Member 'FEndDataTableEquipment::MateriaSlotModify_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, ModelMateriaIndex_Array) == 0x000148, "Member 'FEndDataTableEquipment::ModelMateriaIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CharaSpecID_Array) == 0x000158, "Member 'FEndDataTableEquipment::CharaSpecID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, UpgradeID) == 0x000168, "Member 'FEndDataTableEquipment::UpgradeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LongAttackRange) == 0x000170, "Member 'FEndDataTableEquipment::LongAttackRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, NormalAttackReach) == 0x000174, "Member 'FEndDataTableEquipment::NormalAttackReach' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, OverrideGuardBeginSequeceName) == 0x000178, "Member 'FEndDataTableEquipment::OverrideGuardBeginSequeceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, OverrideGuardLoopSequeceName) == 0x000180, "Member 'FEndDataTableEquipment::OverrideGuardLoopSequeceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, OverrideGuardEndSequeceName) == 0x000188, "Member 'FEndDataTableEquipment::OverrideGuardEndSequeceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, BurstAbilityID) == 0x000190, "Member 'FEndDataTableEquipment::BurstAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, OverrideBurstAbilityText) == 0x000198, "Member 'FEndDataTableEquipment::OverrideBurstAbilityText' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, OverrideBurstAbilityHelpText) == 0x0001A8, "Member 'FEndDataTableEquipment::OverrideBurstAbilityHelpText' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningConditionType_Array) == 0x0001B8, "Member 'FEndDataTableEquipment::LearningConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningConditionValue_Array) == 0x0001C8, "Member 'FEndDataTableEquipment::LearningConditionValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningCondAddPoint) == 0x0001D8, "Member 'FEndDataTableEquipment::LearningCondAddPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningCounterID) == 0x0001DC, "Member 'FEndDataTableEquipment::LearningCounterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningCondUseCount) == 0x0001E4, "Member 'FEndDataTableEquipment::LearningCondUseCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningFlag) == 0x0001E8, "Member 'FEndDataTableEquipment::LearningFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningConditionText) == 0x0001F0, "Member 'FEndDataTableEquipment::LearningConditionText' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, FieldAttackStateTriggerId) == 0x000200, "Member 'FEndDataTableEquipment::FieldAttackStateTriggerId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MovieName) == 0x000208, "Member 'FEndDataTableEquipment::MovieName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SkillCoreSlotNum) == 0x000210, "Member 'FEndDataTableEquipment::SkillCoreSlotNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SkillCoreSlotMax_Array) == 0x000218, "Member 'FEndDataTableEquipment::SkillCoreSlotMax_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleCharaCategoryAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleCharaCategoryAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleCharaCategoryAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleCharaCategoryAccessor");
static_assert(sizeof(FEndDataObjectBattleCharaCategoryAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleCharaCategoryAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleHitSlowAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleHitSlowAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleHitSlowAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleHitSlowAccessor");
static_assert(sizeof(FEndDataObjectBattleHitSlowAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleHitSlowAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleCharaLevelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleCharaLevelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleCharaLevelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleCharaLevelAccessor");
static_assert(sizeof(FEndDataObjectBattleCharaLevelAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleCharaLevelAccessor");

// ScriptStruct EndDataObject.EndDataObjectCardGameAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameAccessor");
static_assert(sizeof(FEndDataObjectCardGameAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboTimeAttackCommonParameter
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableChocoboTimeAttackCommonParameter final : public FEndDataTableRowBase
{
public:
	float                                         Timelimit;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Record1;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Record2;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Record3;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ClearRingPoint;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RewardScore1;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RewardScore2;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RewardScore3;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboTimeAttackCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableChocoboTimeAttackCommonParameter");
static_assert(sizeof(FEndDataTableChocoboTimeAttackCommonParameter) == 0x000028, "Wrong size on FEndDataTableChocoboTimeAttackCommonParameter");
static_assert(offsetof(FEndDataTableChocoboTimeAttackCommonParameter, Timelimit) == 0x000008, "Member 'FEndDataTableChocoboTimeAttackCommonParameter::Timelimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboTimeAttackCommonParameter, Record1) == 0x00000C, "Member 'FEndDataTableChocoboTimeAttackCommonParameter::Record1' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboTimeAttackCommonParameter, Record2) == 0x000010, "Member 'FEndDataTableChocoboTimeAttackCommonParameter::Record2' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboTimeAttackCommonParameter, Record3) == 0x000014, "Member 'FEndDataTableChocoboTimeAttackCommonParameter::Record3' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboTimeAttackCommonParameter, ClearRingPoint) == 0x000018, "Member 'FEndDataTableChocoboTimeAttackCommonParameter::ClearRingPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboTimeAttackCommonParameter, RewardScore1) == 0x00001C, "Member 'FEndDataTableChocoboTimeAttackCommonParameter::RewardScore1' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboTimeAttackCommonParameter, RewardScore2) == 0x000020, "Member 'FEndDataTableChocoboTimeAttackCommonParameter::RewardScore2' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboTimeAttackCommonParameter, RewardScore3) == 0x000024, "Member 'FEndDataTableChocoboTimeAttackCommonParameter::RewardScore3' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleCharaPartsSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleCharaPartsSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleCharaPartsSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleCharaPartsSpecAccessor");
static_assert(sizeof(FEndDataObjectBattleCharaPartsSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleCharaPartsSpecAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceRivalListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceRivalListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceRivalListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceRivalListAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceRivalListAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceRivalListAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleCharaSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleCharaSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleCharaSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleCharaSpecAccessor");
static_assert(sizeof(FEndDataObjectBattleCharaSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleCharaSpecAccessor");

// ScriptStruct EndDataObject.EndDataTableChadleyTalk
// 0x0098 (0x00A0 - 0x0008)
struct FEndDataTableChadleyTalk final : public FEndDataTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TalkType;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ProcessOnceInArea;                                 // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PointName;                                         // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LocationID_Array;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         PlayerType;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClothingStoryFlagOrStateConditionID;               // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ExcludeClothing;                                   // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TreatedAsCompleted;                                // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ForceRaiseStoryFlagID;                             // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionID;                                          // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MarkAsProcessedWhenPlayedOnly;                     // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionProcessedFlagID;                             // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ConditionTarget_Array;                             // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ConditionType_Array;                               // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ConditionValue_Array;                              // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 OperatorType_Array;                                // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChadleyTalk) == 0x000008, "Wrong alignment on FEndDataTableChadleyTalk");
static_assert(sizeof(FEndDataTableChadleyTalk) == 0x0000A0, "Wrong size on FEndDataTableChadleyTalk");
static_assert(offsetof(FEndDataTableChadleyTalk, Priority) == 0x000008, "Member 'FEndDataTableChadleyTalk::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, TalkType) == 0x00000C, "Member 'FEndDataTableChadleyTalk::TalkType' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, ProcessOnceInArea) == 0x000010, "Member 'FEndDataTableChadleyTalk::ProcessOnceInArea' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, PointName) == 0x000014, "Member 'FEndDataTableChadleyTalk::PointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, LocationID_Array) == 0x000020, "Member 'FEndDataTableChadleyTalk::LocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, PlayerType) == 0x000030, "Member 'FEndDataTableChadleyTalk::PlayerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, ClothingStoryFlagOrStateConditionID) == 0x000034, "Member 'FEndDataTableChadleyTalk::ClothingStoryFlagOrStateConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, ExcludeClothing) == 0x00003C, "Member 'FEndDataTableChadleyTalk::ExcludeClothing' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, TreatedAsCompleted) == 0x00003D, "Member 'FEndDataTableChadleyTalk::TreatedAsCompleted' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, ForceRaiseStoryFlagID) == 0x000040, "Member 'FEndDataTableChadleyTalk::ForceRaiseStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, ActionID) == 0x000048, "Member 'FEndDataTableChadleyTalk::ActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, MarkAsProcessedWhenPlayedOnly) == 0x000050, "Member 'FEndDataTableChadleyTalk::MarkAsProcessedWhenPlayedOnly' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, ActionProcessedFlagID) == 0x000054, "Member 'FEndDataTableChadleyTalk::ActionProcessedFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, ConditionTarget_Array) == 0x000060, "Member 'FEndDataTableChadleyTalk::ConditionTarget_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, ConditionType_Array) == 0x000070, "Member 'FEndDataTableChadleyTalk::ConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, ConditionValue_Array) == 0x000080, "Member 'FEndDataTableChadleyTalk::ConditionValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyTalk, OperatorType_Array) == 0x000090, "Member 'FEndDataTableChadleyTalk::OperatorType_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleCombinationAbilityAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleCombinationAbilityAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleCombinationAbilityAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleCombinationAbilityAccessor");
static_assert(sizeof(FEndDataObjectBattleCombinationAbilityAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleCombinationAbilityAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleReportAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleReportAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleReportAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleReportAccessor");
static_assert(sizeof(FEndDataObjectBattleReportAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleReportAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleCombinationTableAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleCombinationTableAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleCombinationTableAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleCombinationTableAccessor");
static_assert(sizeof(FEndDataObjectBattleCombinationTableAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleCombinationTableAccessor");

// ScriptStruct EndDataObject.EndDataObjectCardGameCardInflAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameCardInflAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameCardInflAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameCardInflAccessor");
static_assert(sizeof(FEndDataObjectCardGameCardInflAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameCardInflAccessor");

// ScriptStruct EndDataObject.EndDataTableCardGameOpponentDeck
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableCardGameOpponentDeck final : public FEndDataTableRowBase
{
public:
	class FName                                   Thumbnail;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           cardID_Array;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGameOpponentDeck) == 0x000008, "Wrong alignment on FEndDataTableCardGameOpponentDeck");
static_assert(sizeof(FEndDataTableCardGameOpponentDeck) == 0x000020, "Wrong size on FEndDataTableCardGameOpponentDeck");
static_assert(offsetof(FEndDataTableCardGameOpponentDeck, Thumbnail) == 0x000008, "Member 'FEndDataTableCardGameOpponentDeck::Thumbnail' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponentDeck, cardID_Array) == 0x000010, "Member 'FEndDataTableCardGameOpponentDeck::cardID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleConditionTriggerAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleConditionTriggerAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleConditionTriggerAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleConditionTriggerAccessor");
static_assert(sizeof(FEndDataObjectBattleConditionTriggerAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleConditionTriggerAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboParkingPointAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboParkingPointAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboParkingPointAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboParkingPointAccessor");
static_assert(sizeof(FEndDataObjectChocoboParkingPointAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboParkingPointAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleConditionTriggerEasyConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleConditionTriggerEasyConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleConditionTriggerEasyConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleConditionTriggerEasyConditionAccessor");
static_assert(sizeof(FEndDataObjectBattleConditionTriggerEasyConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleConditionTriggerEasyConditionAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceSkillList
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableChocoboRaceSkillList final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           Condition_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         Operation;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NeedActiveCheck;                                   // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Effect_Array;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         ActivateType;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboRaceSkillList) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceSkillList");
static_assert(sizeof(FEndDataTableChocoboRaceSkillList) == 0x000038, "Wrong size on FEndDataTableChocoboRaceSkillList");
static_assert(offsetof(FEndDataTableChocoboRaceSkillList, Condition_Array) == 0x000008, "Member 'FEndDataTableChocoboRaceSkillList::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceSkillList, Operation) == 0x000018, "Member 'FEndDataTableChocoboRaceSkillList::Operation' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceSkillList, NeedActiveCheck) == 0x00001C, "Member 'FEndDataTableChocoboRaceSkillList::NeedActiveCheck' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceSkillList, Effect_Array) == 0x000020, "Member 'FEndDataTableChocoboRaceSkillList::Effect_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceSkillList, ActivateType) == 0x000030, "Member 'FEndDataTableChocoboRaceSkillList::ActivateType' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleConditionTriggerGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleConditionTriggerGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleConditionTriggerGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleConditionTriggerGroupAccessor");
static_assert(sizeof(FEndDataObjectBattleConditionTriggerGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleConditionTriggerGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleScenePopGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleScenePopGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleScenePopGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleScenePopGroupAccessor");
static_assert(sizeof(FEndDataObjectBattleScenePopGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleScenePopGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleDamageReactionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleDamageReactionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleDamageReactionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleDamageReactionAccessor");
static_assert(sizeof(FEndDataObjectBattleDamageReactionAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleDamageReactionAccessor");

// ScriptStruct EndDataObject.EndDataObjectCardGameMessageSetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameMessageSetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameMessageSetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameMessageSetAccessor");
static_assert(sizeof(FEndDataObjectCardGameMessageSetAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameMessageSetAccessor");

// ScriptStruct EndDataObject.EndDataTableCondorCommanderActionAI
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableCondorCommanderActionAI final : public FEndDataTableRowBase
{
public:
	int8                                          Cmp;                                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Target;                                            // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Ability;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Act;                                               // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeOut;                                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Range;                                             // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Cout;                                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Wait;                                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCondorCommanderActionAI) == 0x000008, "Wrong alignment on FEndDataTableCondorCommanderActionAI");
static_assert(sizeof(FEndDataTableCondorCommanderActionAI) == 0x000030, "Wrong size on FEndDataTableCondorCommanderActionAI");
static_assert(offsetof(FEndDataTableCondorCommanderActionAI, Cmp) == 0x000008, "Member 'FEndDataTableCondorCommanderActionAI::Cmp' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderActionAI, Target) == 0x000009, "Member 'FEndDataTableCondorCommanderActionAI::Target' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderActionAI, Value) == 0x00000C, "Member 'FEndDataTableCondorCommanderActionAI::Value' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderActionAI, Ability) == 0x000010, "Member 'FEndDataTableCondorCommanderActionAI::Ability' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderActionAI, Act) == 0x000018, "Member 'FEndDataTableCondorCommanderActionAI::Act' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderActionAI, TimeOut) == 0x000020, "Member 'FEndDataTableCondorCommanderActionAI::TimeOut' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderActionAI, Range) == 0x000024, "Member 'FEndDataTableCondorCommanderActionAI::Range' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderActionAI, Cout) == 0x000028, "Member 'FEndDataTableCondorCommanderActionAI::Cout' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderActionAI, Wait) == 0x00002C, "Member 'FEndDataTableCondorCommanderActionAI::Wait' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleDamageSourceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleDamageSourceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleDamageSourceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleDamageSourceAccessor");
static_assert(sizeof(FEndDataObjectBattleDamageSourceAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleDamageSourceAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboTimeAttackCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboTimeAttackCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboTimeAttackCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboTimeAttackCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectChocoboTimeAttackCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboTimeAttackCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleDamageSourceHitReactionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleDamageSourceHitReactionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleDamageSourceHitReactionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleDamageSourceHitReactionAccessor");
static_assert(sizeof(FEndDataObjectBattleDamageSourceHitReactionAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleDamageSourceHitReactionAccessor");

// ScriptStruct EndDataObject.EndDataObjectWildAnimalAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWildAnimalAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWildAnimalAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWildAnimalAccessor");
static_assert(sizeof(FEndDataObjectWildAnimalAccessor) == 0x000020, "Wrong size on FEndDataObjectWildAnimalAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleReportConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleReportConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleReportConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleReportConditionAccessor");
static_assert(sizeof(FEndDataObjectBattleReportConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleReportConditionAccessor");

// ScriptStruct EndDataObject.EndDataTableCutSceneCatenaList
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableCutSceneCatenaList final : public FEndDataTableRowBase
{
public:
	uint8                                         SpecialCatenaDatering;                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Reserve1;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Reserve2;                                          // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NextCutSceneName1_Array;                           // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextCutSceneName2_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextCutSceneName3_Array;                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextCutSceneName4_Array;                           // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCutSceneCatenaList) == 0x000008, "Wrong alignment on FEndDataTableCutSceneCatenaList");
static_assert(sizeof(FEndDataTableCutSceneCatenaList) == 0x000050, "Wrong size on FEndDataTableCutSceneCatenaList");
static_assert(offsetof(FEndDataTableCutSceneCatenaList, SpecialCatenaDatering) == 0x000008, "Member 'FEndDataTableCutSceneCatenaList::SpecialCatenaDatering' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneCatenaList, Reserve1) == 0x000009, "Member 'FEndDataTableCutSceneCatenaList::Reserve1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneCatenaList, Reserve2) == 0x00000A, "Member 'FEndDataTableCutSceneCatenaList::Reserve2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneCatenaList, NextCutSceneName1_Array) == 0x000010, "Member 'FEndDataTableCutSceneCatenaList::NextCutSceneName1_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneCatenaList, NextCutSceneName2_Array) == 0x000020, "Member 'FEndDataTableCutSceneCatenaList::NextCutSceneName2_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneCatenaList, NextCutSceneName3_Array) == 0x000030, "Member 'FEndDataTableCutSceneCatenaList::NextCutSceneName3_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneCatenaList, NextCutSceneName4_Array) == 0x000040, "Member 'FEndDataTableCutSceneCatenaList::NextCutSceneName4_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleDamageSourceLevelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleDamageSourceLevelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleDamageSourceLevelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleDamageSourceLevelAccessor");
static_assert(sizeof(FEndDataObjectBattleDamageSourceLevelAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleDamageSourceLevelAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleStatusChangeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleStatusChangeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleStatusChangeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleStatusChangeAccessor");
static_assert(sizeof(FEndDataObjectBattleStatusChangeAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleStatusChangeAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleDefenseAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleDefenseAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleDefenseAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleDefenseAccessor");
static_assert(sizeof(FEndDataObjectBattleDefenseAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleDefenseAccessor");

// ScriptStruct EndDataObject.EndDataObjectCardGameSpecialParamAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameSpecialParamAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameSpecialParamAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameSpecialParamAccessor");
static_assert(sizeof(FEndDataObjectCardGameSpecialParamAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameSpecialParamAccessor");

// ScriptStruct EndDataObject.EndDataTableChapterAssignStateChangeList
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChapterAssignStateChangeList final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           AssignStateChange_Array;                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChapterAssignStateChangeList) == 0x000008, "Wrong alignment on FEndDataTableChapterAssignStateChangeList");
static_assert(sizeof(FEndDataTableChapterAssignStateChangeList) == 0x000018, "Wrong size on FEndDataTableChapterAssignStateChangeList");
static_assert(offsetof(FEndDataTableChapterAssignStateChangeList, AssignStateChange_Array) == 0x000008, "Member 'FEndDataTableChapterAssignStateChangeList::AssignStateChange_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleEnemyCombinationAbilityAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleEnemyCombinationAbilityAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleEnemyCombinationAbilityAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleEnemyCombinationAbilityAccessor");
static_assert(sizeof(FEndDataObjectBattleEnemyCombinationAbilityAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleEnemyCombinationAbilityAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRacePartsDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRacePartsDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRacePartsDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRacePartsDataAccessor");
static_assert(sizeof(FEndDataObjectChocoboRacePartsDataAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRacePartsDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleEnemyIconUIAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleEnemyIconUIAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleEnemyIconUIAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleEnemyIconUIAccessor");
static_assert(sizeof(FEndDataObjectBattleEnemyIconUIAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleEnemyIconUIAccessor");

// ScriptStruct EndDataObject.EndDataTableColosseumSceneData
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableColosseumSceneData final : public FEndDataTableRowBase
{
public:
	int32                                         CutFuncType;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NameArgument_Array;                                // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         AppearType;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BeginAnimID;                                       // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LoopAnimID;                                        // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EndAnimID;                                         // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CameraID;                                          // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableColosseumSceneData) == 0x000008, "Wrong alignment on FEndDataTableColosseumSceneData");
static_assert(sizeof(FEndDataTableColosseumSceneData) == 0x000048, "Wrong size on FEndDataTableColosseumSceneData");
static_assert(offsetof(FEndDataTableColosseumSceneData, CutFuncType) == 0x000008, "Member 'FEndDataTableColosseumSceneData::CutFuncType' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumSceneData, NameArgument_Array) == 0x000010, "Member 'FEndDataTableColosseumSceneData::NameArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumSceneData, AppearType) == 0x000020, "Member 'FEndDataTableColosseumSceneData::AppearType' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumSceneData, BeginAnimID) == 0x000024, "Member 'FEndDataTableColosseumSceneData::BeginAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumSceneData, LoopAnimID) == 0x00002C, "Member 'FEndDataTableColosseumSceneData::LoopAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumSceneData, EndAnimID) == 0x000034, "Member 'FEndDataTableColosseumSceneData::EndAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumSceneData, CameraID) == 0x00003C, "Member 'FEndDataTableColosseumSceneData::CameraID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleFriendParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleFriendParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleFriendParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleFriendParameterAccessor");
static_assert(sizeof(FEndDataObjectBattleFriendParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleFriendParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectWanderingParamListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWanderingParamListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWanderingParamListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWanderingParamListAccessor");
static_assert(sizeof(FEndDataObjectWanderingParamListAccessor) == 0x000020, "Wrong size on FEndDataObjectWanderingParamListAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleItemPossessionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleItemPossessionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleItemPossessionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleItemPossessionAccessor");
static_assert(sizeof(FEndDataObjectBattleItemPossessionAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleItemPossessionAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattlePlayerParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattlePlayerParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattlePlayerParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattlePlayerParameterAccessor");
static_assert(sizeof(FEndDataObjectBattlePlayerParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectBattlePlayerParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleRewardOptionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleRewardOptionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleRewardOptionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleRewardOptionAccessor");
static_assert(sizeof(FEndDataObjectBattleRewardOptionAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleRewardOptionAccessor");

// ScriptStruct EndDataObject.EndDataObjectWorldActorInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWorldActorInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWorldActorInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWorldActorInfoAccessor");
static_assert(sizeof(FEndDataObjectWorldActorInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectWorldActorInfoAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleScenePopTableAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleScenePopTableAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleScenePopTableAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleScenePopTableAccessor");
static_assert(sizeof(FEndDataObjectBattleScenePopTableAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleScenePopTableAccessor");

// ScriptStruct EndDataObject.EndDataObjectWorldItemSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWorldItemSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWorldItemSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWorldItemSpecAccessor");
static_assert(sizeof(FEndDataObjectWorldItemSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectWorldItemSpecAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleSummonAbilityChoiceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleSummonAbilityChoiceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleSummonAbilityChoiceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleSummonAbilityChoiceAccessor");
static_assert(sizeof(FEndDataObjectBattleSummonAbilityChoiceAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleSummonAbilityChoiceAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleSummonConditionsAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleSummonConditionsAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleSummonConditionsAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleSummonConditionsAccessor");
static_assert(sizeof(FEndDataObjectBattleSummonConditionsAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleSummonConditionsAccessor");

// ScriptStruct EndDataObject.EndDataTableAppContent
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableAppContent final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ContentID;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SpecialKind;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentNameLabel;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ContentDetailLabel;                                // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ContentVisualLabel;                                // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReadFlag;                                          // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Category;                                          // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ItemID_Array;                                      // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ItemCount_Array;                                   // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAppContent) == 0x000008, "Wrong alignment on FEndDataTableAppContent");
static_assert(sizeof(FEndDataTableAppContent) == 0x000078, "Wrong size on FEndDataTableAppContent");
static_assert(offsetof(FEndDataTableAppContent, UniqueId) == 0x000008, "Member 'FEndDataTableAppContent::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ContentID) == 0x00000C, "Member 'FEndDataTableAppContent::ContentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, SpecialKind) == 0x000010, "Member 'FEndDataTableAppContent::SpecialKind' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ContentNameLabel) == 0x000018, "Member 'FEndDataTableAppContent::ContentNameLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ContentDetailLabel) == 0x000028, "Member 'FEndDataTableAppContent::ContentDetailLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ContentVisualLabel) == 0x000038, "Member 'FEndDataTableAppContent::ContentVisualLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ReadFlag) == 0x000048, "Member 'FEndDataTableAppContent::ReadFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, Category) == 0x000050, "Member 'FEndDataTableAppContent::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ItemID_Array) == 0x000058, "Member 'FEndDataTableAppContent::ItemID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ItemCount_Array) == 0x000068, "Member 'FEndDataTableAppContent::ItemCount_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleSummonSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleSummonSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleSummonSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleSummonSpecAccessor");
static_assert(sizeof(FEndDataObjectBattleSummonSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleSummonSpecAccessor");

// ScriptStruct EndDataObject.EndDataObjectBattleSyncActionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleSyncActionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleSyncActionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleSyncActionAccessor");
static_assert(sizeof(FEndDataObjectBattleSyncActionAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleSyncActionAccessor");

// ScriptStruct EndDataObject.EndDataTableActionGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableActionGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ActionGroupLIst_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableActionGroup) == 0x000008, "Wrong alignment on FEndDataTableActionGroup");
static_assert(sizeof(FEndDataTableActionGroup) == 0x000018, "Wrong size on FEndDataTableActionGroup");
static_assert(offsetof(FEndDataTableActionGroup, ActionGroupLIst_Array) == 0x000008, "Member 'FEndDataTableActionGroup::ActionGroupLIst_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBattleUniqueAbilityAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBattleUniqueAbilityAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBattleUniqueAbilityAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBattleUniqueAbilityAccessor");
static_assert(sizeof(FEndDataObjectBattleUniqueAbilityAccessor) == 0x000020, "Wrong size on FEndDataObjectBattleUniqueAbilityAccessor");

// ScriptStruct EndDataObject.EndDataObjectBGMFieldAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBGMFieldAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBGMFieldAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBGMFieldAccessor");
static_assert(sizeof(FEndDataObjectBGMFieldAccessor) == 0x000020, "Wrong size on FEndDataObjectBGMFieldAccessor");

// ScriptStruct EndDataObject.EndDataObjectWorldItemGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWorldItemGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWorldItemGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWorldItemGroupAccessor");
static_assert(sizeof(FEndDataObjectWorldItemGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectWorldItemGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectBGMLayerFadeSettingAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBGMLayerFadeSettingAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBGMLayerFadeSettingAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBGMLayerFadeSettingAccessor");
static_assert(sizeof(FEndDataObjectBGMLayerFadeSettingAccessor) == 0x000020, "Wrong size on FEndDataObjectBGMLayerFadeSettingAccessor");

// ScriptStruct EndDataObject.EndDataObjectBGMListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBGMListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBGMListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBGMListAccessor");
static_assert(sizeof(FEndDataObjectBGMListAccessor) == 0x000020, "Wrong size on FEndDataObjectBGMListAccessor");

// ScriptStruct EndDataObject.EndDataTableAIParameter
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableAIParameter final : public FEndDataTableRowBase
{
public:
	uint8                                         Movable;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitWall;                                           // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitObject;                                         // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitSelfReaction;                                   // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitOthersReaction;                                 // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FitFloor;                                          // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MaxWeight;                                         // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableTickPause;                                  // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableSafeTransform;                               // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceTurn;                                         // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InterpolationMove;                                 // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WalkRange;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         GoalRadius;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FollowUpDashDistance;                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceWalk;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlightMaxSpeed;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FlightAcceleration;                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NoOverTaking;                                      // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoOverTakingDistance;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StopDistance;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LeadTurn;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RangeRadius;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StayTimeMIn;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StayTimeRand;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TurnBackDistance;                                  // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveStartDistance;                                 // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAIParameter) == 0x000008, "Wrong alignment on FEndDataTableAIParameter");
static_assert(sizeof(FEndDataTableAIParameter) == 0x000050, "Wrong size on FEndDataTableAIParameter");
static_assert(offsetof(FEndDataTableAIParameter, Movable) == 0x000008, "Member 'FEndDataTableAIParameter::Movable' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, HitWall) == 0x000009, "Member 'FEndDataTableAIParameter::HitWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, HitObject) == 0x00000A, "Member 'FEndDataTableAIParameter::HitObject' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, HitSelfReaction) == 0x00000B, "Member 'FEndDataTableAIParameter::HitSelfReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, HitOthersReaction) == 0x00000C, "Member 'FEndDataTableAIParameter::HitOthersReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, FitFloor) == 0x00000D, "Member 'FEndDataTableAIParameter::FitFloor' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, MaxWeight) == 0x00000E, "Member 'FEndDataTableAIParameter::MaxWeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, DisableTickPause) == 0x00000F, "Member 'FEndDataTableAIParameter::DisableTickPause' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, EnableSafeTransform) == 0x000010, "Member 'FEndDataTableAIParameter::EnableSafeTransform' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, ForceTurn) == 0x000011, "Member 'FEndDataTableAIParameter::ForceTurn' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, InterpolationMove) == 0x000012, "Member 'FEndDataTableAIParameter::InterpolationMove' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, WalkRange) == 0x000014, "Member 'FEndDataTableAIParameter::WalkRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, GoalRadius) == 0x000018, "Member 'FEndDataTableAIParameter::GoalRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, FollowUpDashDistance) == 0x00001C, "Member 'FEndDataTableAIParameter::FollowUpDashDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, ForceWalk) == 0x000020, "Member 'FEndDataTableAIParameter::ForceWalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, FlightMaxSpeed) == 0x000024, "Member 'FEndDataTableAIParameter::FlightMaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, FlightAcceleration) == 0x000028, "Member 'FEndDataTableAIParameter::FlightAcceleration' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, NoOverTaking) == 0x00002C, "Member 'FEndDataTableAIParameter::NoOverTaking' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, NoOverTakingDistance) == 0x000030, "Member 'FEndDataTableAIParameter::NoOverTakingDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, StopDistance) == 0x000034, "Member 'FEndDataTableAIParameter::StopDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, LeadTurn) == 0x000038, "Member 'FEndDataTableAIParameter::LeadTurn' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, RangeRadius) == 0x00003C, "Member 'FEndDataTableAIParameter::RangeRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, StayTimeMIn) == 0x000040, "Member 'FEndDataTableAIParameter::StayTimeMIn' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, StayTimeRand) == 0x000044, "Member 'FEndDataTableAIParameter::StayTimeRand' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, TurnBackDistance) == 0x000048, "Member 'FEndDataTableAIParameter::TurnBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, MoveStartDistance) == 0x00004C, "Member 'FEndDataTableAIParameter::MoveStartDistance' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeAbilityAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeAbilityAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeAbilityAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeAbilityAccessor");
static_assert(sizeof(FEndDataObjectBikeAbilityAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeAbilityAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeAIAbilitySetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeAIAbilitySetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeAIAbilitySetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeAIAbilitySetAccessor");
static_assert(sizeof(FEndDataObjectBikeAIAbilitySetAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeAIAbilitySetAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeAngleRangeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeAngleRangeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeAngleRangeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeAngleRangeAccessor");
static_assert(sizeof(FEndDataObjectBikeAngleRangeAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeAngleRangeAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeBattleAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeBattleAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeBattleAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeBattleAccessor");
static_assert(sizeof(FEndDataObjectBikeBattleAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeBattleAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeBattleCutSceneCharacterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeBattleCutSceneCharacterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeBattleCutSceneCharacterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeBattleCutSceneCharacterAccessor");
static_assert(sizeof(FEndDataObjectBikeBattleCutSceneCharacterAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeBattleCutSceneCharacterAccessor");

// ScriptStruct EndDataObject.EndDataTableActionTest
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableActionTest final : public FEndDataTableRowBase
{
public:
	uint8                                         NaviBGMOff;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NaviBGMOff2;                                       // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableActionTest) == 0x000008, "Wrong alignment on FEndDataTableActionTest");
static_assert(sizeof(FEndDataTableActionTest) == 0x000010, "Wrong size on FEndDataTableActionTest");
static_assert(offsetof(FEndDataTableActionTest, NaviBGMOff) == 0x000008, "Member 'FEndDataTableActionTest::NaviBGMOff' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionTest, NaviBGMOff2) == 0x000009, "Member 'FEndDataTableActionTest::NaviBGMOff2' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeComboAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeComboAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeComboAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeComboAccessor");
static_assert(sizeof(FEndDataObjectBikeComboAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeComboAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectBikeCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeDamageReactionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeDamageReactionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeDamageReactionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeDamageReactionAccessor");
static_assert(sizeof(FEndDataObjectBikeDamageReactionAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeDamageReactionAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeDamageSourceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeDamageSourceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeDamageSourceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeDamageSourceAccessor");
static_assert(sizeof(FEndDataObjectBikeDamageSourceAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeDamageSourceAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleAbilityResource
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBattleAbilityResource final : public FEndDataTableRowBase
{
public:
	class FName                                   ContentsSoundSE;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ContentsEffect;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleAbilityResource) == 0x000008, "Wrong alignment on FEndDataTableBattleAbilityResource");
static_assert(sizeof(FEndDataTableBattleAbilityResource) == 0x000018, "Wrong size on FEndDataTableBattleAbilityResource");
static_assert(offsetof(FEndDataTableBattleAbilityResource, ContentsSoundSE) == 0x000008, "Member 'FEndDataTableBattleAbilityResource::ContentsSoundSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbilityResource, ContentsEffect) == 0x000010, "Member 'FEndDataTableBattleAbilityResource::ContentsEffect' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeEnergyGaugeSettingAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeEnergyGaugeSettingAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeEnergyGaugeSettingAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeEnergyGaugeSettingAccessor");
static_assert(sizeof(FEndDataObjectBikeEnergyGaugeSettingAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeEnergyGaugeSettingAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeInterruptActionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeInterruptActionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeInterruptActionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeInterruptActionAccessor");
static_assert(sizeof(FEndDataObjectBikeInterruptActionAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeInterruptActionAccessor");

// ScriptStruct EndDataObject.EndDataTableAutoCameraShotInfo
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableAutoCameraShotInfo final : public FEndDataTableRowBase
{
public:
	int32                                         ShotType;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LocationLock;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         OverwriteListner;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SocketName;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimRelativeRate;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FocusPointX;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FocusPointY;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FocusPointZ;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotatePitch;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotateYaw;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotateRoll;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraDist;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlockCorrectTolerance;                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HandShake;                                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FOV;                                               // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UseSocketAllRotate;                                // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotBaseDist;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngleDistCorrection;                               // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngleRotateCorrection;                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DistCorrection;                                    // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         YawCorrection;                                     // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         XOffsetCorrection;                                 // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         YOffsetCorrection;                                 // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ZOffsetCorrection;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LightGroup;                                        // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BlendTime;                                         // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NextShot;                                          // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableAutoCameraShotInfo) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraShotInfo");
static_assert(sizeof(FEndDataTableAutoCameraShotInfo) == 0x000090, "Wrong size on FEndDataTableAutoCameraShotInfo");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, ShotType) == 0x000008, "Member 'FEndDataTableAutoCameraShotInfo::ShotType' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, LocationLock) == 0x00000C, "Member 'FEndDataTableAutoCameraShotInfo::LocationLock' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, OverwriteListner) == 0x000010, "Member 'FEndDataTableAutoCameraShotInfo::OverwriteListner' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, SocketName) == 0x000018, "Member 'FEndDataTableAutoCameraShotInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, AimRelativeRate) == 0x000028, "Member 'FEndDataTableAutoCameraShotInfo::AimRelativeRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, FocusPointX) == 0x00002C, "Member 'FEndDataTableAutoCameraShotInfo::FocusPointX' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, FocusPointY) == 0x000030, "Member 'FEndDataTableAutoCameraShotInfo::FocusPointY' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, FocusPointZ) == 0x000034, "Member 'FEndDataTableAutoCameraShotInfo::FocusPointZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, RotatePitch) == 0x000038, "Member 'FEndDataTableAutoCameraShotInfo::RotatePitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, RotateYaw) == 0x00003C, "Member 'FEndDataTableAutoCameraShotInfo::RotateYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, RotateRoll) == 0x000040, "Member 'FEndDataTableAutoCameraShotInfo::RotateRoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, CameraDist) == 0x000044, "Member 'FEndDataTableAutoCameraShotInfo::CameraDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, BlockCorrectTolerance) == 0x000048, "Member 'FEndDataTableAutoCameraShotInfo::BlockCorrectTolerance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, HandShake) == 0x00004C, "Member 'FEndDataTableAutoCameraShotInfo::HandShake' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, FOV) == 0x000050, "Member 'FEndDataTableAutoCameraShotInfo::FOV' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, UseSocketAllRotate) == 0x000054, "Member 'FEndDataTableAutoCameraShotInfo::UseSocketAllRotate' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, ShotBaseDist) == 0x000058, "Member 'FEndDataTableAutoCameraShotInfo::ShotBaseDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, AngleDistCorrection) == 0x00005C, "Member 'FEndDataTableAutoCameraShotInfo::AngleDistCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, AngleRotateCorrection) == 0x000060, "Member 'FEndDataTableAutoCameraShotInfo::AngleRotateCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, DistCorrection) == 0x000064, "Member 'FEndDataTableAutoCameraShotInfo::DistCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, YawCorrection) == 0x000068, "Member 'FEndDataTableAutoCameraShotInfo::YawCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, XOffsetCorrection) == 0x00006C, "Member 'FEndDataTableAutoCameraShotInfo::XOffsetCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, YOffsetCorrection) == 0x000070, "Member 'FEndDataTableAutoCameraShotInfo::YOffsetCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, ZOffsetCorrection) == 0x000074, "Member 'FEndDataTableAutoCameraShotInfo::ZOffsetCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, LightGroup) == 0x000078, "Member 'FEndDataTableAutoCameraShotInfo::LightGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, BlendTime) == 0x000080, "Member 'FEndDataTableAutoCameraShotInfo::BlendTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, NextShot) == 0x000084, "Member 'FEndDataTableAutoCameraShotInfo::NextShot' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeItemListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeItemListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeItemListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeItemListAccessor");
static_assert(sizeof(FEndDataObjectBikeItemListAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeItemListAccessor");

// ScriptStruct EndDataObject.EndDataTableWeaponUpgradeTreeLevel
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableWeaponUpgradeTreeLevel final : public FEndDataTableRowBase
{
public:
	class FName                                   EquipmentID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TreeLevel;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Percent;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SlotMax;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableWeaponUpgradeTreeLevel) == 0x000008, "Wrong alignment on FEndDataTableWeaponUpgradeTreeLevel");
static_assert(sizeof(FEndDataTableWeaponUpgradeTreeLevel) == 0x000020, "Wrong size on FEndDataTableWeaponUpgradeTreeLevel");
static_assert(offsetof(FEndDataTableWeaponUpgradeTreeLevel, EquipmentID) == 0x000008, "Member 'FEndDataTableWeaponUpgradeTreeLevel::EquipmentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgradeTreeLevel, TreeLevel) == 0x000010, "Member 'FEndDataTableWeaponUpgradeTreeLevel::TreeLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgradeTreeLevel, Percent) == 0x000014, "Member 'FEndDataTableWeaponUpgradeTreeLevel::Percent' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgradeTreeLevel, SlotMax) == 0x000018, "Member 'FEndDataTableWeaponUpgradeTreeLevel::SlotMax' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeItemTemplateAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeItemTemplateAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeItemTemplateAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeItemTemplateAccessor");
static_assert(sizeof(FEndDataObjectBikeItemTemplateAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeItemTemplateAccessor");

// ScriptStruct EndDataObject.EndDataTableObjectGroupMob
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableObjectGroupMob final : public FEndDataTableRowBase
{
public:
	class FName                                   DisableStateCondition;                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PopMobCountMin;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PopMobCountRand;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 PopValue_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PopObjectMobId_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableObjectGroupMob) == 0x000008, "Wrong alignment on FEndDataTableObjectGroupMob");
static_assert(sizeof(FEndDataTableObjectGroupMob) == 0x000038, "Wrong size on FEndDataTableObjectGroupMob");
static_assert(offsetof(FEndDataTableObjectGroupMob, DisableStateCondition) == 0x000008, "Member 'FEndDataTableObjectGroupMob::DisableStateCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectGroupMob, PopMobCountMin) == 0x000010, "Member 'FEndDataTableObjectGroupMob::PopMobCountMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectGroupMob, PopMobCountRand) == 0x000014, "Member 'FEndDataTableObjectGroupMob::PopMobCountRand' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectGroupMob, PopValue_Array) == 0x000018, "Member 'FEndDataTableObjectGroupMob::PopValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectGroupMob, PopObjectMobId_Array) == 0x000028, "Member 'FEndDataTableObjectGroupMob::PopObjectMobId_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAutoCameraGroup
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableAutoCameraGroup final : public FEndDataTableRowBase
{
public:
	int32                                         GroupType;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           GroupMemberList_Array;                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAutoCameraGroup) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraGroup");
static_assert(sizeof(FEndDataTableAutoCameraGroup) == 0x000020, "Wrong size on FEndDataTableAutoCameraGroup");
static_assert(offsetof(FEndDataTableAutoCameraGroup, GroupType) == 0x000008, "Member 'FEndDataTableAutoCameraGroup::GroupType' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraGroup, GroupMemberList_Array) == 0x000010, "Member 'FEndDataTableAutoCameraGroup::GroupMemberList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeItemWidgetDisplayDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeItemWidgetDisplayDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeItemWidgetDisplayDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeItemWidgetDisplayDataAccessor");
static_assert(sizeof(FEndDataObjectBikeItemWidgetDisplayDataAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeItemWidgetDisplayDataAccessor");

// ScriptStruct EndDataObject.EndDataTableNaviMapClear
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableNaviMapClear final : public FEndDataTableRowBase
{
public:
	class FName                                   StoryFlag;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         TargetLevel_Array;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActorName_Array;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableNaviMapClear) == 0x000008, "Wrong alignment on FEndDataTableNaviMapClear");
static_assert(sizeof(FEndDataTableNaviMapClear) == 0x000030, "Wrong size on FEndDataTableNaviMapClear");
static_assert(offsetof(FEndDataTableNaviMapClear, StoryFlag) == 0x000008, "Member 'FEndDataTableNaviMapClear::StoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapClear, TargetLevel_Array) == 0x000010, "Member 'FEndDataTableNaviMapClear::TargetLevel_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapClear, ActorName_Array) == 0x000020, "Member 'FEndDataTableNaviMapClear::ActorName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeLocationAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeLocationAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeLocationAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeLocationAccessor");
static_assert(sizeof(FEndDataObjectBikeLocationAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeLocationAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleAbility
// 0x01D8 (0x01E0 - 0x0008)
struct FEndDataTableBattleAbility final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StrengthenNumber;                                  // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Explanation;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ShowName;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowNameSecond;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InputBufferTime;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CommandType;                                       // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CommandTargetType;                                 // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UsePlace;                                          // 0x003E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CastMagicEffectType;                               // 0x003F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ATB;                                               // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MP;                                                // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Range;                                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReactionInfluenceID;                               // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CancelNumber_Array;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   AnimResourceReferenceBattleCharaSpecID;            // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 AnimationSelectType_Array;                         // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AnimationString_Array;                             // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AnimationParameter_Array;                          // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         AnimationBoneFilterIndexBits0;                     // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimationUpperBodyName;                            // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 AddAnimationIndex_Array;                           // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AddAnimationName_Array;                            // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 AddAnimationPlayCount_Array;                       // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AddAnimationPlayInterval_Array;                    // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 AddAnimationEndBase_Array;                         // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         SkeletonControlType;                               // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetCount;                                       // 0x0101(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetAimPosition;                                 // 0x0102(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetCloseMove;                                   // 0x0103(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetCorrectionDirectionImmediatelyType;          // 0x0104(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReplaceDamageSourceID;                             // 0x0108(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DamageCreateMoveCollisionObjectOff;                // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SameCharacterDamageHitDamageCoefficient;           // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SameCharacterDamageHitDamageCoefficientMin;        // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraSequenceNotify;                              // 0x0124(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraSequenceID;                                  // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         KeepValue;                                         // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DistFeelType;                                      // 0x0131(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UseSoundResourceCategory;                          // 0x0132(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_133[0x1];                                      // 0x0133(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UseSoundResourceName;                              // 0x0134(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReactionCondition_Array;                           // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ReactionConditionParameterValue_Array;             // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ReactionConditionNotifyIndex_Array;                // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ReactionType_Array;                                // 0x0170(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ReactionParameterValue_Array;                      // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ReactionParameterString_Array;                     // 0x0190(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResourceID_Array;                                  // 0x01A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         AfterWalkType;                                     // 0x01B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TeleportType;                                      // 0x01B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AfterTeleportRotationType;                         // 0x01B2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B3[0x1];                                      // 0x01B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TeleportParam;                                     // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TeleportMinDistance;                               // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ActionCategory;                                    // 0x01BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceDamageDisplayToOne;                           // 0x01BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1BE[0x2];                                      // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortId;                                            // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ResourceName_Array;                                // 0x01C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int64                                         Flag0;                                             // 0x01D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleAbility) == 0x000008, "Wrong alignment on FEndDataTableBattleAbility");
static_assert(sizeof(FEndDataTableBattleAbility) == 0x0001E0, "Wrong size on FEndDataTableBattleAbility");
static_assert(offsetof(FEndDataTableBattleAbility, UniqueId) == 0x000008, "Member 'FEndDataTableBattleAbility::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, StrengthenNumber) == 0x00000C, "Member 'FEndDataTableBattleAbility::StrengthenNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, Name) == 0x000010, "Member 'FEndDataTableBattleAbility::Name' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, Explanation) == 0x000020, "Member 'FEndDataTableBattleAbility::Explanation' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ShowName) == 0x000030, "Member 'FEndDataTableBattleAbility::ShowName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ShowNameSecond) == 0x000034, "Member 'FEndDataTableBattleAbility::ShowNameSecond' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, InputBufferTime) == 0x000038, "Member 'FEndDataTableBattleAbility::InputBufferTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CommandType) == 0x00003C, "Member 'FEndDataTableBattleAbility::CommandType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CommandTargetType) == 0x00003D, "Member 'FEndDataTableBattleAbility::CommandTargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, UsePlace) == 0x00003E, "Member 'FEndDataTableBattleAbility::UsePlace' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CastMagicEffectType) == 0x00003F, "Member 'FEndDataTableBattleAbility::CastMagicEffectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ATB) == 0x000040, "Member 'FEndDataTableBattleAbility::ATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, MP) == 0x000044, "Member 'FEndDataTableBattleAbility::MP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, Range) == 0x000048, "Member 'FEndDataTableBattleAbility::Range' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionInfluenceID) == 0x00004C, "Member 'FEndDataTableBattleAbility::ReactionInfluenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CancelNumber_Array) == 0x000058, "Member 'FEndDataTableBattleAbility::CancelNumber_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimResourceReferenceBattleCharaSpecID) == 0x000068, "Member 'FEndDataTableBattleAbility::AnimResourceReferenceBattleCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimationSelectType_Array) == 0x000070, "Member 'FEndDataTableBattleAbility::AnimationSelectType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimationString_Array) == 0x000080, "Member 'FEndDataTableBattleAbility::AnimationString_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimationParameter_Array) == 0x000090, "Member 'FEndDataTableBattleAbility::AnimationParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimationBoneFilterIndexBits0) == 0x0000A0, "Member 'FEndDataTableBattleAbility::AnimationBoneFilterIndexBits0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimationUpperBodyName) == 0x0000A4, "Member 'FEndDataTableBattleAbility::AnimationUpperBodyName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AddAnimationIndex_Array) == 0x0000B0, "Member 'FEndDataTableBattleAbility::AddAnimationIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AddAnimationName_Array) == 0x0000C0, "Member 'FEndDataTableBattleAbility::AddAnimationName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AddAnimationPlayCount_Array) == 0x0000D0, "Member 'FEndDataTableBattleAbility::AddAnimationPlayCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AddAnimationPlayInterval_Array) == 0x0000E0, "Member 'FEndDataTableBattleAbility::AddAnimationPlayInterval_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AddAnimationEndBase_Array) == 0x0000F0, "Member 'FEndDataTableBattleAbility::AddAnimationEndBase_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, SkeletonControlType) == 0x000100, "Member 'FEndDataTableBattleAbility::SkeletonControlType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCount) == 0x000101, "Member 'FEndDataTableBattleAbility::TargetCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetAimPosition) == 0x000102, "Member 'FEndDataTableBattleAbility::TargetAimPosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCloseMove) == 0x000103, "Member 'FEndDataTableBattleAbility::TargetCloseMove' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCorrectionDirectionImmediatelyType) == 0x000104, "Member 'FEndDataTableBattleAbility::TargetCorrectionDirectionImmediatelyType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReplaceDamageSourceID) == 0x000108, "Member 'FEndDataTableBattleAbility::ReplaceDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, DamageCreateMoveCollisionObjectOff) == 0x000118, "Member 'FEndDataTableBattleAbility::DamageCreateMoveCollisionObjectOff' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, SameCharacterDamageHitDamageCoefficient) == 0x00011C, "Member 'FEndDataTableBattleAbility::SameCharacterDamageHitDamageCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, SameCharacterDamageHitDamageCoefficientMin) == 0x000120, "Member 'FEndDataTableBattleAbility::SameCharacterDamageHitDamageCoefficientMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CameraSequenceNotify) == 0x000124, "Member 'FEndDataTableBattleAbility::CameraSequenceNotify' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CameraSequenceID) == 0x000128, "Member 'FEndDataTableBattleAbility::CameraSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, KeepValue) == 0x000130, "Member 'FEndDataTableBattleAbility::KeepValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, DistFeelType) == 0x000131, "Member 'FEndDataTableBattleAbility::DistFeelType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, UseSoundResourceCategory) == 0x000132, "Member 'FEndDataTableBattleAbility::UseSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, UseSoundResourceName) == 0x000134, "Member 'FEndDataTableBattleAbility::UseSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionCondition_Array) == 0x000140, "Member 'FEndDataTableBattleAbility::ReactionCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionConditionParameterValue_Array) == 0x000150, "Member 'FEndDataTableBattleAbility::ReactionConditionParameterValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionConditionNotifyIndex_Array) == 0x000160, "Member 'FEndDataTableBattleAbility::ReactionConditionNotifyIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionType_Array) == 0x000170, "Member 'FEndDataTableBattleAbility::ReactionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionParameterValue_Array) == 0x000180, "Member 'FEndDataTableBattleAbility::ReactionParameterValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionParameterString_Array) == 0x000190, "Member 'FEndDataTableBattleAbility::ReactionParameterString_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ResourceID_Array) == 0x0001A0, "Member 'FEndDataTableBattleAbility::ResourceID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AfterWalkType) == 0x0001B0, "Member 'FEndDataTableBattleAbility::AfterWalkType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TeleportType) == 0x0001B1, "Member 'FEndDataTableBattleAbility::TeleportType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AfterTeleportRotationType) == 0x0001B2, "Member 'FEndDataTableBattleAbility::AfterTeleportRotationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TeleportParam) == 0x0001B4, "Member 'FEndDataTableBattleAbility::TeleportParam' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TeleportMinDistance) == 0x0001B8, "Member 'FEndDataTableBattleAbility::TeleportMinDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ActionCategory) == 0x0001BC, "Member 'FEndDataTableBattleAbility::ActionCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ForceDamageDisplayToOne) == 0x0001BD, "Member 'FEndDataTableBattleAbility::ForceDamageDisplayToOne' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, SortId) == 0x0001C0, "Member 'FEndDataTableBattleAbility::SortId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ResourceName_Array) == 0x0001C8, "Member 'FEndDataTableBattleAbility::ResourceName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, Flag0) == 0x0001D8, "Member 'FEndDataTableBattleAbility::Flag0' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMiniGameTrophyInfo
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableMiniGameTrophyInfo final : public FEndDataTableRowBase
{
public:
	uint8                                         Num;                                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Hint;                                              // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Detail;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HintStateCondition;                                // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DetailStateCondition;                              // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TrophyActorName;                                   // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetPitch;                                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetYaw;                                         // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LeftMarginRatio;                                   // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RightMarginRatio;                                  // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BottomMarginRatio;                                 // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TopMarginRatio;                                    // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PrepareTrophyActorName;                            // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrepareOffsetPitch;                                // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrepareOffsetYaw;                                  // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrepareLeftMarginRatio;                            // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrepareRightMarginRatio;                           // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrepareBottomMarginRatio;                          // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrepareTopMarginRatio;                             // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableMiniGameTrophyInfo) == 0x000008, "Wrong alignment on FEndDataTableMiniGameTrophyInfo");
static_assert(sizeof(FEndDataTableMiniGameTrophyInfo) == 0x000090, "Wrong size on FEndDataTableMiniGameTrophyInfo");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, Num) == 0x000008, "Member 'FEndDataTableMiniGameTrophyInfo::Num' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, Name) == 0x000010, "Member 'FEndDataTableMiniGameTrophyInfo::Name' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, Hint) == 0x000020, "Member 'FEndDataTableMiniGameTrophyInfo::Hint' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, Detail) == 0x000030, "Member 'FEndDataTableMiniGameTrophyInfo::Detail' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, HintStateCondition) == 0x000040, "Member 'FEndDataTableMiniGameTrophyInfo::HintStateCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, DetailStateCondition) == 0x000048, "Member 'FEndDataTableMiniGameTrophyInfo::DetailStateCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, TrophyActorName) == 0x000050, "Member 'FEndDataTableMiniGameTrophyInfo::TrophyActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, OffsetPitch) == 0x000058, "Member 'FEndDataTableMiniGameTrophyInfo::OffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, OffsetYaw) == 0x00005C, "Member 'FEndDataTableMiniGameTrophyInfo::OffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, LeftMarginRatio) == 0x000060, "Member 'FEndDataTableMiniGameTrophyInfo::LeftMarginRatio' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, RightMarginRatio) == 0x000064, "Member 'FEndDataTableMiniGameTrophyInfo::RightMarginRatio' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, BottomMarginRatio) == 0x000068, "Member 'FEndDataTableMiniGameTrophyInfo::BottomMarginRatio' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, TopMarginRatio) == 0x00006C, "Member 'FEndDataTableMiniGameTrophyInfo::TopMarginRatio' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, PrepareTrophyActorName) == 0x000070, "Member 'FEndDataTableMiniGameTrophyInfo::PrepareTrophyActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, PrepareOffsetPitch) == 0x000078, "Member 'FEndDataTableMiniGameTrophyInfo::PrepareOffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, PrepareOffsetYaw) == 0x00007C, "Member 'FEndDataTableMiniGameTrophyInfo::PrepareOffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, PrepareLeftMarginRatio) == 0x000080, "Member 'FEndDataTableMiniGameTrophyInfo::PrepareLeftMarginRatio' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, PrepareRightMarginRatio) == 0x000084, "Member 'FEndDataTableMiniGameTrophyInfo::PrepareRightMarginRatio' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, PrepareBottomMarginRatio) == 0x000088, "Member 'FEndDataTableMiniGameTrophyInfo::PrepareBottomMarginRatio' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameTrophyInfo, PrepareTopMarginRatio) == 0x00008C, "Member 'FEndDataTableMiniGameTrophyInfo::PrepareTopMarginRatio' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeMovementFormationAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeMovementFormationAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeMovementFormationAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeMovementFormationAccessor");
static_assert(sizeof(FEndDataObjectBikeMovementFormationAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeMovementFormationAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikePhaseEnemyAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikePhaseEnemyAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikePhaseEnemyAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikePhaseEnemyAccessor");
static_assert(sizeof(FEndDataObjectBikePhaseEnemyAccessor) == 0x000020, "Wrong size on FEndDataObjectBikePhaseEnemyAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleCharaLevel
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBattleCharaLevel final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           StoryFlag_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Level_Array;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleCharaLevel) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaLevel");
static_assert(sizeof(FEndDataTableBattleCharaLevel) == 0x000028, "Wrong size on FEndDataTableBattleCharaLevel");
static_assert(offsetof(FEndDataTableBattleCharaLevel, StoryFlag_Array) == 0x000008, "Member 'FEndDataTableBattleCharaLevel::StoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaLevel, Level_Array) == 0x000018, "Member 'FEndDataTableBattleCharaLevel::Level_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikePhaseEnemyParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikePhaseEnemyParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikePhaseEnemyParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikePhaseEnemyParameterAccessor");
static_assert(sizeof(FEndDataObjectBikePhaseEnemyParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectBikePhaseEnemyParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikePhaseParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikePhaseParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikePhaseParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikePhaseParameterAccessor");
static_assert(sizeof(FEndDataObjectBikePhaseParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectBikePhaseParameterAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleBreakable
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableBattleBreakable final : public FEndDataTableRowBase
{
public:
	class FName                                   GroupId;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LevelID;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattleSceneID_Array;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         ObjectHP;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DamageRate_Array;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateTrigger_Array;                                // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ReplaceObject_Array;                               // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   BlockingVolumeLevelID;                             // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BlockingVolumeID_Array;                            // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleBreakable) == 0x000008, "Wrong alignment on FEndDataTableBattleBreakable");
static_assert(sizeof(FEndDataTableBattleBreakable) == 0x000078, "Wrong size on FEndDataTableBattleBreakable");
static_assert(offsetof(FEndDataTableBattleBreakable, GroupId) == 0x000008, "Member 'FEndDataTableBattleBreakable::GroupId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, LevelID) == 0x000010, "Member 'FEndDataTableBattleBreakable::LevelID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, BattleSceneID_Array) == 0x000018, "Member 'FEndDataTableBattleBreakable::BattleSceneID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, ObjectHP) == 0x000028, "Member 'FEndDataTableBattleBreakable::ObjectHP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, DamageRate_Array) == 0x000030, "Member 'FEndDataTableBattleBreakable::DamageRate_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, StateTrigger_Array) == 0x000040, "Member 'FEndDataTableBattleBreakable::StateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, ReplaceObject_Array) == 0x000050, "Member 'FEndDataTableBattleBreakable::ReplaceObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, BlockingVolumeLevelID) == 0x000060, "Member 'FEndDataTableBattleBreakable::BlockingVolumeLevelID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, BlockingVolumeID_Array) == 0x000068, "Member 'FEndDataTableBattleBreakable::BlockingVolumeID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikePlayerCharaSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikePlayerCharaSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikePlayerCharaSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikePlayerCharaSpecAccessor");
static_assert(sizeof(FEndDataObjectBikePlayerCharaSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectBikePlayerCharaSpecAccessor");

// ScriptStruct EndDataObject.EndDataTableWorldItemGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableWorldItemGroup final : public FEndDataTableRowBase
{
public:
	float                                         SupplyPercent;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RepopMinPercent;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RepopMaxPercent;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HistoryMax;                                        // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableWorldItemGroup) == 0x000008, "Wrong alignment on FEndDataTableWorldItemGroup");
static_assert(sizeof(FEndDataTableWorldItemGroup) == 0x000018, "Wrong size on FEndDataTableWorldItemGroup");
static_assert(offsetof(FEndDataTableWorldItemGroup, SupplyPercent) == 0x000008, "Member 'FEndDataTableWorldItemGroup::SupplyPercent' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemGroup, RepopMinPercent) == 0x00000C, "Member 'FEndDataTableWorldItemGroup::RepopMinPercent' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemGroup, RepopMaxPercent) == 0x000010, "Member 'FEndDataTableWorldItemGroup::RepopMaxPercent' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemGroup, HistoryMax) == 0x000014, "Member 'FEndDataTableWorldItemGroup::HistoryMax' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikePlayerFeedbackAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikePlayerFeedbackAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikePlayerFeedbackAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikePlayerFeedbackAccessor");
static_assert(sizeof(FEndDataObjectBikePlayerFeedbackAccessor) == 0x000020, "Wrong size on FEndDataObjectBikePlayerFeedbackAccessor");

// ScriptStruct EndDataObject.EndDataTablePartyLevel
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTablePartyLevel final : public FEndDataTableRowBase
{
public:
	int32                                         PartyLevel;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Experience;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePartyLevel) == 0x000008, "Wrong alignment on FEndDataTablePartyLevel");
static_assert(sizeof(FEndDataTablePartyLevel) == 0x000010, "Wrong size on FEndDataTablePartyLevel");
static_assert(offsetof(FEndDataTablePartyLevel, PartyLevel) == 0x000008, "Member 'FEndDataTablePartyLevel::PartyLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyLevel, Experience) == 0x00000C, "Member 'FEndDataTablePartyLevel::Experience' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAutoMagicGroup
// 0x0078 (0x0080 - 0x0008)
struct FEndDataTableAutoMagicGroup final : public FEndDataTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MpThreshold_Array;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         HPThreshold;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StatusChangeResistThreshold;                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OperateTimeThreshold;                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AbilityId_Array;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 AbilityConditionRank_Array;                        // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 AbilityConditionHP_Array;                          // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 AbilityConditionDecrementHP_Array;                 // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AbilityConditionRadius_Array;                      // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAutoMagicGroup) == 0x000008, "Wrong alignment on FEndDataTableAutoMagicGroup");
static_assert(sizeof(FEndDataTableAutoMagicGroup) == 0x000080, "Wrong size on FEndDataTableAutoMagicGroup");
static_assert(offsetof(FEndDataTableAutoMagicGroup, Priority) == 0x000008, "Member 'FEndDataTableAutoMagicGroup::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoMagicGroup, MpThreshold_Array) == 0x000010, "Member 'FEndDataTableAutoMagicGroup::MpThreshold_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoMagicGroup, HPThreshold) == 0x000020, "Member 'FEndDataTableAutoMagicGroup::HPThreshold' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoMagicGroup, StatusChangeResistThreshold) == 0x000024, "Member 'FEndDataTableAutoMagicGroup::StatusChangeResistThreshold' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoMagicGroup, OperateTimeThreshold) == 0x000028, "Member 'FEndDataTableAutoMagicGroup::OperateTimeThreshold' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoMagicGroup, AbilityId_Array) == 0x000030, "Member 'FEndDataTableAutoMagicGroup::AbilityId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoMagicGroup, AbilityConditionRank_Array) == 0x000040, "Member 'FEndDataTableAutoMagicGroup::AbilityConditionRank_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoMagicGroup, AbilityConditionHP_Array) == 0x000050, "Member 'FEndDataTableAutoMagicGroup::AbilityConditionHP_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoMagicGroup, AbilityConditionDecrementHP_Array) == 0x000060, "Member 'FEndDataTableAutoMagicGroup::AbilityConditionDecrementHP_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoMagicGroup, AbilityConditionRadius_Array) == 0x000070, "Member 'FEndDataTableAutoMagicGroup::AbilityConditionRadius_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeResultTimeScoreAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeResultTimeScoreAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeResultTimeScoreAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeResultTimeScoreAccessor");
static_assert(sizeof(FEndDataObjectBikeResultTimeScoreAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeResultTimeScoreAccessor");

// ScriptStruct EndDataObject.EndDataTableObjectEnemyTerritory
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableObjectEnemyTerritory final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Territory;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         AttributeList_Array;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableObjectEnemyTerritory) == 0x000008, "Wrong alignment on FEndDataTableObjectEnemyTerritory");
static_assert(sizeof(FEndDataTableObjectEnemyTerritory) == 0x000028, "Wrong size on FEndDataTableObjectEnemyTerritory");
static_assert(offsetof(FEndDataTableObjectEnemyTerritory, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectEnemyTerritory::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemyTerritory, Priority) == 0x00000C, "Member 'FEndDataTableObjectEnemyTerritory::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemyTerritory, Territory) == 0x000010, "Member 'FEndDataTableObjectEnemyTerritory::Territory' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemyTerritory, AttributeList_Array) == 0x000018, "Member 'FEndDataTableObjectEnemyTerritory::AttributeList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeSequenceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeSequenceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeSequenceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeSequenceAccessor");
static_assert(sizeof(FEndDataObjectBikeSequenceAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeSequenceAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleCharaCameraModuleID
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBattleCharaCameraModuleID final : public FEndDataTableRowBase
{
public:
	class FName                                   CameraModuleID;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleCharaCameraModuleID) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaCameraModuleID");
static_assert(sizeof(FEndDataTableBattleCharaCameraModuleID) == 0x000010, "Wrong size on FEndDataTableBattleCharaCameraModuleID");
static_assert(offsetof(FEndDataTableBattleCharaCameraModuleID, CameraModuleID) == 0x000008, "Member 'FEndDataTableBattleCharaCameraModuleID::CameraModuleID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableNaviMapClearLimited
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableNaviMapClearLimited final : public FEndDataTableRowBase
{
public:
	class FName                                   ChapterName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StoryFlag;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         TargetLevel_Array;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActorName_Array;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableNaviMapClearLimited) == 0x000008, "Wrong alignment on FEndDataTableNaviMapClearLimited");
static_assert(sizeof(FEndDataTableNaviMapClearLimited) == 0x000038, "Wrong size on FEndDataTableNaviMapClearLimited");
static_assert(offsetof(FEndDataTableNaviMapClearLimited, ChapterName) == 0x000008, "Member 'FEndDataTableNaviMapClearLimited::ChapterName' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapClearLimited, StoryFlag) == 0x000010, "Member 'FEndDataTableNaviMapClearLimited::StoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapClearLimited, TargetLevel_Array) == 0x000018, "Member 'FEndDataTableNaviMapClearLimited::TargetLevel_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapClearLimited, ActorName_Array) == 0x000028, "Member 'FEndDataTableNaviMapClearLimited::ActorName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeSequenceActionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeSequenceActionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeSequenceActionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeSequenceActionAccessor");
static_assert(sizeof(FEndDataObjectBikeSequenceActionAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeSequenceActionAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeSequenceJumpAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeSequenceJumpAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeSequenceJumpAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeSequenceJumpAccessor");
static_assert(sizeof(FEndDataObjectBikeSequenceJumpAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeSequenceJumpAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleDamageReaction
// 0x00C0 (0x00C8 - 0x0008)
struct FEndDataTableBattleDamageReaction final : public FEndDataTableRowBase
{
public:
	float                                         KnockBackDistance;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         KnockBackDistanceMin;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         KnockBackDistanceMax;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         KnockBackTime;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         KnockBackRagidTime;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         KnockBackRagidTimeMin;                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         KnockBackRagidTimeMax;                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaunchHeight;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaunchHeightMin;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaunchHeightMax;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RiseGravityScale;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FallGravityScale;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StrikeSpeed;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StrikeSpeedMin;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StrikeSpeedMax;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirRecoveryWaitTime0;                              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                 PullMoveSpeed_Array;                               // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PullMoveSpeedMin_Array;                            // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PullMoveSpeedMax_Array;                            // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PullMoveDistanceMax_Array;                         // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         AirKnockBackDistance;                              // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirKnockBackDistanceMin;                           // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirKnockBackDistanceMax;                           // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirLaunchHeight;                                   // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirLaunchHeightMin;                                // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirLaunchHeightMax;                                // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirRiseGravityScale;                               // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirFallGravityScale;                               // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirStrikeSpeed;                                    // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirStrikeSpeedMin;                                 // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirStrikeSpeedMax;                                 // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AirRecoveryWaitTime1;                              // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CutKeepAddReactionKnockBackDistance;               // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FieldKnockBackDistance;                            // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SubTensionGauge;                                   // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleDamageReaction) == 0x000008, "Wrong alignment on FEndDataTableBattleDamageReaction");
static_assert(sizeof(FEndDataTableBattleDamageReaction) == 0x0000C8, "Wrong size on FEndDataTableBattleDamageReaction");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackDistance) == 0x000008, "Member 'FEndDataTableBattleDamageReaction::KnockBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackDistanceMin) == 0x00000C, "Member 'FEndDataTableBattleDamageReaction::KnockBackDistanceMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackDistanceMax) == 0x000010, "Member 'FEndDataTableBattleDamageReaction::KnockBackDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackTime) == 0x000014, "Member 'FEndDataTableBattleDamageReaction::KnockBackTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackRagidTime) == 0x000018, "Member 'FEndDataTableBattleDamageReaction::KnockBackRagidTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackRagidTimeMin) == 0x00001C, "Member 'FEndDataTableBattleDamageReaction::KnockBackRagidTimeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackRagidTimeMax) == 0x000020, "Member 'FEndDataTableBattleDamageReaction::KnockBackRagidTimeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, LaunchHeight) == 0x000024, "Member 'FEndDataTableBattleDamageReaction::LaunchHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, LaunchHeightMin) == 0x000028, "Member 'FEndDataTableBattleDamageReaction::LaunchHeightMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, LaunchHeightMax) == 0x00002C, "Member 'FEndDataTableBattleDamageReaction::LaunchHeightMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, RiseGravityScale) == 0x000030, "Member 'FEndDataTableBattleDamageReaction::RiseGravityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, FallGravityScale) == 0x000034, "Member 'FEndDataTableBattleDamageReaction::FallGravityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, StrikeSpeed) == 0x000038, "Member 'FEndDataTableBattleDamageReaction::StrikeSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, StrikeSpeedMin) == 0x00003C, "Member 'FEndDataTableBattleDamageReaction::StrikeSpeedMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, StrikeSpeedMax) == 0x000040, "Member 'FEndDataTableBattleDamageReaction::StrikeSpeedMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirRecoveryWaitTime0) == 0x000044, "Member 'FEndDataTableBattleDamageReaction::AirRecoveryWaitTime0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, PullMoveSpeed_Array) == 0x000048, "Member 'FEndDataTableBattleDamageReaction::PullMoveSpeed_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, PullMoveSpeedMin_Array) == 0x000058, "Member 'FEndDataTableBattleDamageReaction::PullMoveSpeedMin_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, PullMoveSpeedMax_Array) == 0x000068, "Member 'FEndDataTableBattleDamageReaction::PullMoveSpeedMax_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, PullMoveDistanceMax_Array) == 0x000078, "Member 'FEndDataTableBattleDamageReaction::PullMoveDistanceMax_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirKnockBackDistance) == 0x000088, "Member 'FEndDataTableBattleDamageReaction::AirKnockBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirKnockBackDistanceMin) == 0x00008C, "Member 'FEndDataTableBattleDamageReaction::AirKnockBackDistanceMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirKnockBackDistanceMax) == 0x000090, "Member 'FEndDataTableBattleDamageReaction::AirKnockBackDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirLaunchHeight) == 0x000094, "Member 'FEndDataTableBattleDamageReaction::AirLaunchHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirLaunchHeightMin) == 0x000098, "Member 'FEndDataTableBattleDamageReaction::AirLaunchHeightMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirLaunchHeightMax) == 0x00009C, "Member 'FEndDataTableBattleDamageReaction::AirLaunchHeightMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirRiseGravityScale) == 0x0000A0, "Member 'FEndDataTableBattleDamageReaction::AirRiseGravityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirFallGravityScale) == 0x0000A4, "Member 'FEndDataTableBattleDamageReaction::AirFallGravityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirStrikeSpeed) == 0x0000A8, "Member 'FEndDataTableBattleDamageReaction::AirStrikeSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirStrikeSpeedMin) == 0x0000AC, "Member 'FEndDataTableBattleDamageReaction::AirStrikeSpeedMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirStrikeSpeedMax) == 0x0000B0, "Member 'FEndDataTableBattleDamageReaction::AirStrikeSpeedMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirRecoveryWaitTime1) == 0x0000B4, "Member 'FEndDataTableBattleDamageReaction::AirRecoveryWaitTime1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, CutKeepAddReactionKnockBackDistance) == 0x0000B8, "Member 'FEndDataTableBattleDamageReaction::CutKeepAddReactionKnockBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, FieldKnockBackDistance) == 0x0000BC, "Member 'FEndDataTableBattleDamageReaction::FieldKnockBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, SubTensionGauge) == 0x0000C0, "Member 'FEndDataTableBattleDamageReaction::SubTensionGauge' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeSequenceParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeSequenceParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeSequenceParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeSequenceParameterAccessor");
static_assert(sizeof(FEndDataObjectBikeSequenceParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeSequenceParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeSplineMetaDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeSplineMetaDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeSplineMetaDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeSplineMetaDataAccessor");
static_assert(sizeof(FEndDataObjectBikeSplineMetaDataAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeSplineMetaDataAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleCharaSpec
// 0x01C8 (0x01D0 - 0x0008)
struct FEndDataTableBattleCharaSpec final : public FEndDataTableRowBase
{
public:
	class FName                                   CharaSpecID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TextLabel;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MenuListSortKey;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DeadDirection;                                     // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeadTextLabel;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnemyCategory;                                     // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParameterTableName;                                // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HPDirect;                                          // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HP;                                                // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BP;                                                // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BurstTime;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BurstCameraSequenceID;                             // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PhysicsAttack;                                     // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicAttack;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PhysicsDefense;                                    // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicDefense;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PropertyResist0;                                   // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PropertyResist1;                                   // 0x006D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 AttributeResist_Array;                             // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 CactusMissionAttributeResist_Array;                // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   BreakTableID;                                      // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BreakValueEndurance;                               // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RateDamageResist;                                  // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FixDamageResist;                                   // 0x009D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 BPDamageCorrectionProperty_Array;                  // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 BPDamageCorrectionAttribute_Array;                 // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         BreakDamageCorrectionType;                         // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 StatusChangeResist_Array;                          // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SpecialResist_Array;                               // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         PetrifyDamageLimit;                                // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         KeepValue;                                         // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetPriority;                                    // 0x00EA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EB[0x1];                                       // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PossessionItemID;                                  // 0x00EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaDaylightID;                            // 0x00F4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaDarkID;                                // 0x00FC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaNoiseID;                               // 0x0104(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CautionType;                                       // 0x010C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Hate;                                              // 0x010D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbilityTargetCorrectionDirectionAngle;             // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AbilityId_Array;                                   // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   BeginBattleAbilityID;                              // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AddBeginBattleAbilityID;                           // 0x0130(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PartsID_Array;                                     // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   Shield;                                            // 0x0148(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BCAName;                                           // 0x0150(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ReactionTableIndex;                                // 0x0158(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitReactionAbilityID;                              // 0x015C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitReactionAbilityCountMin;                        // 0x0164(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitReactionAbilityCountMax;                        // 0x0165(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_166[0x2];                                      // 0x0166(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitReactionAbilityCountTypeBits;                   // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 EffectiveValue_Array;                              // 0x0170(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         CharacterKindID;                                   // 0x0180(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EnemyBookID;                                       // 0x0184(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReplaceTargetIconName;                             // 0x018C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReplaceCameraLockSocketName;                       // 0x0194(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReplaceDisplayNameSocketName;                      // 0x019C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReactionSensingRangeAngle;                         // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReactionSensingRangeRadiusShort;                   // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReactionSensingRangeRadiusMiddle;                  // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReactionSensingRangeRadiusLong;                    // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReactionSensingDamageNotifyReactionTime;           // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReactionSensingMovePredictionReactionTime;         // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AIControllerIndex;                                 // 0x01BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideRadius;                                    // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LogCharacterType;                                  // 0x01C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OverrideDynamicBattleAreaSize;                     // 0x01C5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C6[0x2];                                      // 0x01C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideEncountForceBattleInCloseEnemiesSqrDist;   // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FlagBit0;                                          // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleCharaSpec) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaSpec");
static_assert(sizeof(FEndDataTableBattleCharaSpec) == 0x0001D0, "Wrong size on FEndDataTableBattleCharaSpec");
static_assert(offsetof(FEndDataTableBattleCharaSpec, CharaSpecID) == 0x000008, "Member 'FEndDataTableBattleCharaSpec::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, TextLabel) == 0x000010, "Member 'FEndDataTableBattleCharaSpec::TextLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, MenuListSortKey) == 0x000020, "Member 'FEndDataTableBattleCharaSpec::MenuListSortKey' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, DeadDirection) == 0x000024, "Member 'FEndDataTableBattleCharaSpec::DeadDirection' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, DeadTextLabel) == 0x000028, "Member 'FEndDataTableBattleCharaSpec::DeadTextLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, EnemyCategory) == 0x000038, "Member 'FEndDataTableBattleCharaSpec::EnemyCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ParameterTableName) == 0x00003C, "Member 'FEndDataTableBattleCharaSpec::ParameterTableName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, HPDirect) == 0x000044, "Member 'FEndDataTableBattleCharaSpec::HPDirect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, HP) == 0x000048, "Member 'FEndDataTableBattleCharaSpec::HP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BP) == 0x00004C, "Member 'FEndDataTableBattleCharaSpec::BP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BurstTime) == 0x000050, "Member 'FEndDataTableBattleCharaSpec::BurstTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BurstCameraSequenceID) == 0x000054, "Member 'FEndDataTableBattleCharaSpec::BurstCameraSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PhysicsAttack) == 0x00005C, "Member 'FEndDataTableBattleCharaSpec::PhysicsAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, MagicAttack) == 0x000060, "Member 'FEndDataTableBattleCharaSpec::MagicAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PhysicsDefense) == 0x000064, "Member 'FEndDataTableBattleCharaSpec::PhysicsDefense' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, MagicDefense) == 0x000068, "Member 'FEndDataTableBattleCharaSpec::MagicDefense' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PropertyResist0) == 0x00006C, "Member 'FEndDataTableBattleCharaSpec::PropertyResist0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PropertyResist1) == 0x00006D, "Member 'FEndDataTableBattleCharaSpec::PropertyResist1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, AttributeResist_Array) == 0x000070, "Member 'FEndDataTableBattleCharaSpec::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, CactusMissionAttributeResist_Array) == 0x000080, "Member 'FEndDataTableBattleCharaSpec::CactusMissionAttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BreakTableID) == 0x000090, "Member 'FEndDataTableBattleCharaSpec::BreakTableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BreakValueEndurance) == 0x000098, "Member 'FEndDataTableBattleCharaSpec::BreakValueEndurance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, RateDamageResist) == 0x00009C, "Member 'FEndDataTableBattleCharaSpec::RateDamageResist' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, FixDamageResist) == 0x00009D, "Member 'FEndDataTableBattleCharaSpec::FixDamageResist' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BPDamageCorrectionProperty_Array) == 0x0000A0, "Member 'FEndDataTableBattleCharaSpec::BPDamageCorrectionProperty_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BPDamageCorrectionAttribute_Array) == 0x0000B0, "Member 'FEndDataTableBattleCharaSpec::BPDamageCorrectionAttribute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BreakDamageCorrectionType) == 0x0000C0, "Member 'FEndDataTableBattleCharaSpec::BreakDamageCorrectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, StatusChangeResist_Array) == 0x0000C8, "Member 'FEndDataTableBattleCharaSpec::StatusChangeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, SpecialResist_Array) == 0x0000D8, "Member 'FEndDataTableBattleCharaSpec::SpecialResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PetrifyDamageLimit) == 0x0000E8, "Member 'FEndDataTableBattleCharaSpec::PetrifyDamageLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, KeepValue) == 0x0000E9, "Member 'FEndDataTableBattleCharaSpec::KeepValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, TargetPriority) == 0x0000EA, "Member 'FEndDataTableBattleCharaSpec::TargetPriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PossessionItemID) == 0x0000EC, "Member 'FEndDataTableBattleCharaSpec::PossessionItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ResponseAreaDaylightID) == 0x0000F4, "Member 'FEndDataTableBattleCharaSpec::ResponseAreaDaylightID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ResponseAreaDarkID) == 0x0000FC, "Member 'FEndDataTableBattleCharaSpec::ResponseAreaDarkID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ResponseAreaNoiseID) == 0x000104, "Member 'FEndDataTableBattleCharaSpec::ResponseAreaNoiseID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, CautionType) == 0x00010C, "Member 'FEndDataTableBattleCharaSpec::CautionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, Hate) == 0x00010D, "Member 'FEndDataTableBattleCharaSpec::Hate' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, AbilityTargetCorrectionDirectionAngle) == 0x000110, "Member 'FEndDataTableBattleCharaSpec::AbilityTargetCorrectionDirectionAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, AbilityId_Array) == 0x000118, "Member 'FEndDataTableBattleCharaSpec::AbilityId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BeginBattleAbilityID) == 0x000128, "Member 'FEndDataTableBattleCharaSpec::BeginBattleAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, AddBeginBattleAbilityID) == 0x000130, "Member 'FEndDataTableBattleCharaSpec::AddBeginBattleAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PartsID_Array) == 0x000138, "Member 'FEndDataTableBattleCharaSpec::PartsID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, Shield) == 0x000148, "Member 'FEndDataTableBattleCharaSpec::Shield' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BCAName) == 0x000150, "Member 'FEndDataTableBattleCharaSpec::BCAName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionTableIndex) == 0x000158, "Member 'FEndDataTableBattleCharaSpec::ReactionTableIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, HitReactionAbilityID) == 0x00015C, "Member 'FEndDataTableBattleCharaSpec::HitReactionAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, HitReactionAbilityCountMin) == 0x000164, "Member 'FEndDataTableBattleCharaSpec::HitReactionAbilityCountMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, HitReactionAbilityCountMax) == 0x000165, "Member 'FEndDataTableBattleCharaSpec::HitReactionAbilityCountMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, HitReactionAbilityCountTypeBits) == 0x000168, "Member 'FEndDataTableBattleCharaSpec::HitReactionAbilityCountTypeBits' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, EffectiveValue_Array) == 0x000170, "Member 'FEndDataTableBattleCharaSpec::EffectiveValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, CharacterKindID) == 0x000180, "Member 'FEndDataTableBattleCharaSpec::CharacterKindID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, EnemyBookID) == 0x000184, "Member 'FEndDataTableBattleCharaSpec::EnemyBookID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReplaceTargetIconName) == 0x00018C, "Member 'FEndDataTableBattleCharaSpec::ReplaceTargetIconName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReplaceCameraLockSocketName) == 0x000194, "Member 'FEndDataTableBattleCharaSpec::ReplaceCameraLockSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReplaceDisplayNameSocketName) == 0x00019C, "Member 'FEndDataTableBattleCharaSpec::ReplaceDisplayNameSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionSensingRangeAngle) == 0x0001A4, "Member 'FEndDataTableBattleCharaSpec::ReactionSensingRangeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionSensingRangeRadiusShort) == 0x0001A8, "Member 'FEndDataTableBattleCharaSpec::ReactionSensingRangeRadiusShort' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionSensingRangeRadiusMiddle) == 0x0001AC, "Member 'FEndDataTableBattleCharaSpec::ReactionSensingRangeRadiusMiddle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionSensingRangeRadiusLong) == 0x0001B0, "Member 'FEndDataTableBattleCharaSpec::ReactionSensingRangeRadiusLong' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionSensingDamageNotifyReactionTime) == 0x0001B4, "Member 'FEndDataTableBattleCharaSpec::ReactionSensingDamageNotifyReactionTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionSensingMovePredictionReactionTime) == 0x0001B8, "Member 'FEndDataTableBattleCharaSpec::ReactionSensingMovePredictionReactionTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, AIControllerIndex) == 0x0001BC, "Member 'FEndDataTableBattleCharaSpec::AIControllerIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, OverrideRadius) == 0x0001C0, "Member 'FEndDataTableBattleCharaSpec::OverrideRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, LogCharacterType) == 0x0001C4, "Member 'FEndDataTableBattleCharaSpec::LogCharacterType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, OverrideDynamicBattleAreaSize) == 0x0001C5, "Member 'FEndDataTableBattleCharaSpec::OverrideDynamicBattleAreaSize' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, OverrideEncountForceBattleInCloseEnemiesSqrDist) == 0x0001C8, "Member 'FEndDataTableBattleCharaSpec::OverrideEncountForceBattleInCloseEnemiesSqrDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, FlagBit0) == 0x0001CC, "Member 'FEndDataTableBattleCharaSpec::FlagBit0' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeSplineRouteDefineAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeSplineRouteDefineAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeSplineRouteDefineAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeSplineRouteDefineAccessor");
static_assert(sizeof(FEndDataObjectBikeSplineRouteDefineAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeSplineRouteDefineAccessor");

// ScriptStruct EndDataObject.EndDataObjectBikeTalkConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeTalkConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeTalkConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeTalkConditionAccessor");
static_assert(sizeof(FEndDataObjectBikeTalkConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeTalkConditionAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleCameraSequence
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableBattleCameraSequence final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ResourceName_Array;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 PlayRate_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         PriorityType;                                      // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleCameraSequence) == 0x000008, "Wrong alignment on FEndDataTableBattleCameraSequence");
static_assert(sizeof(FEndDataTableBattleCameraSequence) == 0x000030, "Wrong size on FEndDataTableBattleCameraSequence");
static_assert(offsetof(FEndDataTableBattleCameraSequence, ResourceName_Array) == 0x000008, "Member 'FEndDataTableBattleCameraSequence::ResourceName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCameraSequence, PlayRate_Array) == 0x000018, "Member 'FEndDataTableBattleCameraSequence::PlayRate_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCameraSequence, PriorityType) == 0x000028, "Member 'FEndDataTableBattleCameraSequence::PriorityType' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeTalkTriggerSetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeTalkTriggerSetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeTalkTriggerSetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeTalkTriggerSetAccessor");
static_assert(sizeof(FEndDataObjectBikeTalkTriggerSetAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeTalkTriggerSetAccessor");

// ScriptStruct EndDataObject.EndDataTableOverrideActionText
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableOverrideActionText final : public FEndDataTableRowBase
{
public:
	class FName                                   TextId;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableOverrideActionText) == 0x000008, "Wrong alignment on FEndDataTableOverrideActionText");
static_assert(sizeof(FEndDataTableOverrideActionText) == 0x000010, "Wrong size on FEndDataTableOverrideActionText");
static_assert(offsetof(FEndDataTableOverrideActionText, TextId) == 0x000008, "Member 'FEndDataTableOverrideActionText::TextId' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBikeTriggerEffectSettingAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBikeTriggerEffectSettingAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBikeTriggerEffectSettingAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBikeTriggerEffectSettingAccessor");
static_assert(sizeof(FEndDataObjectBikeTriggerEffectSettingAccessor) == 0x000020, "Wrong size on FEndDataObjectBikeTriggerEffectSettingAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleConditionTriggerEasyCondition
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBattleConditionTriggerEasyCondition final : public FEndDataTableRowBase
{
public:
	class FName                                   EasyConditionName;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VariableType;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsGlobal;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IgnoreChara;                                       // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IgnoreOperator;                                    // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IgnoreValue;                                       // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IgnoreTarget;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IgnoreSubtype;                                     // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          ResetCount;                                        // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleConditionTriggerEasyCondition) == 0x000008, "Wrong alignment on FEndDataTableBattleConditionTriggerEasyCondition");
static_assert(sizeof(FEndDataTableBattleConditionTriggerEasyCondition) == 0x000020, "Wrong size on FEndDataTableBattleConditionTriggerEasyCondition");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, EasyConditionName) == 0x000008, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::EasyConditionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, VariableType) == 0x000010, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::VariableType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IsGlobal) == 0x000014, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IsGlobal' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IgnoreChara) == 0x000015, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IgnoreChara' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IgnoreOperator) == 0x000016, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IgnoreOperator' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IgnoreValue) == 0x000017, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IgnoreValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IgnoreTarget) == 0x000018, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IgnoreTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IgnoreSubtype) == 0x000019, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IgnoreSubtype' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, ResetCount) == 0x00001A, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::ResetCount' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableObjectEntryAttributeList
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableObjectEntryAttributeList final : public FEndDataTableRowBase
{
public:
	uint8                                         Num;                                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 AttributeIndex_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         NumSave;                                           // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 AttributeIndexSave_Array;                          // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableObjectEntryAttributeList) == 0x000008, "Wrong alignment on FEndDataTableObjectEntryAttributeList");
static_assert(sizeof(FEndDataTableObjectEntryAttributeList) == 0x000038, "Wrong size on FEndDataTableObjectEntryAttributeList");
static_assert(offsetof(FEndDataTableObjectEntryAttributeList, Num) == 0x000008, "Member 'FEndDataTableObjectEntryAttributeList::Num' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEntryAttributeList, AttributeIndex_Array) == 0x000010, "Member 'FEndDataTableObjectEntryAttributeList::AttributeIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEntryAttributeList, NumSave) == 0x000020, "Member 'FEndDataTableObjectEntryAttributeList::NumSave' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEntryAttributeList, AttributeIndexSave_Array) == 0x000028, "Member 'FEndDataTableObjectEntryAttributeList::AttributeIndexSave_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectBoxing3DBattlerEnemyAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBoxing3DBattlerEnemyAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBoxing3DBattlerEnemyAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBoxing3DBattlerEnemyAccessor");
static_assert(sizeof(FEndDataObjectBoxing3DBattlerEnemyAccessor) == 0x000020, "Wrong size on FEndDataObjectBoxing3DBattlerEnemyAccessor");

// ScriptStruct EndDataObject.EndDataObjectBoxing3DBattlerEnemyComboAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBoxing3DBattlerEnemyComboAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBoxing3DBattlerEnemyComboAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBoxing3DBattlerEnemyComboAccessor");
static_assert(sizeof(FEndDataObjectBoxing3DBattlerEnemyComboAccessor) == 0x000020, "Wrong size on FEndDataObjectBoxing3DBattlerEnemyComboAccessor");

// ScriptStruct EndDataObject.EndDataObjectVehicleTargetIconInterruptGetOffAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectVehicleTargetIconInterruptGetOffAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectVehicleTargetIconInterruptGetOffAccessor) == 0x000008, "Wrong alignment on FEndDataObjectVehicleTargetIconInterruptGetOffAccessor");
static_assert(sizeof(FEndDataObjectVehicleTargetIconInterruptGetOffAccessor) == 0x000020, "Wrong size on FEndDataObjectVehicleTargetIconInterruptGetOffAccessor");

// ScriptStruct EndDataObject.EndDataObjectBoxing3DBattlerMainCameraAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBoxing3DBattlerMainCameraAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBoxing3DBattlerMainCameraAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBoxing3DBattlerMainCameraAccessor");
static_assert(sizeof(FEndDataObjectBoxing3DBattlerMainCameraAccessor) == 0x000020, "Wrong size on FEndDataObjectBoxing3DBattlerMainCameraAccessor");

// ScriptStruct EndDataObject.EndDataObjectBoxing3DBattlerResultCameraAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBoxing3DBattlerResultCameraAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBoxing3DBattlerResultCameraAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBoxing3DBattlerResultCameraAccessor");
static_assert(sizeof(FEndDataObjectBoxing3DBattlerResultCameraAccessor) == 0x000020, "Wrong size on FEndDataObjectBoxing3DBattlerResultCameraAccessor");

// ScriptStruct EndDataObject.EndDataObjectTutorialAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTutorialAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTutorialAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTutorialAccessor");
static_assert(sizeof(FEndDataObjectTutorialAccessor) == 0x000020, "Wrong size on FEndDataObjectTutorialAccessor");

// ScriptStruct EndDataObject.EndDataObjectBulletinBoardAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectBulletinBoardAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectBulletinBoardAccessor) == 0x000008, "Wrong alignment on FEndDataObjectBulletinBoardAccessor");
static_assert(sizeof(FEndDataObjectBulletinBoardAccessor) == 0x000020, "Wrong size on FEndDataObjectBulletinBoardAccessor");

// ScriptStruct EndDataObject.EndDataObjectCameraModuleAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCameraModuleAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCameraModuleAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCameraModuleAccessor");
static_assert(sizeof(FEndDataObjectCameraModuleAccessor) == 0x000020, "Wrong size on FEndDataObjectCameraModuleAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleCombinationTable
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBattleCombinationTable final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           CombinationAbilityID_Array;                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleCombinationTable) == 0x000008, "Wrong alignment on FEndDataTableBattleCombinationTable");
static_assert(sizeof(FEndDataTableBattleCombinationTable) == 0x000018, "Wrong size on FEndDataTableBattleCombinationTable");
static_assert(offsetof(FEndDataTableBattleCombinationTable, CombinationAbilityID_Array) == 0x000008, "Member 'FEndDataTableBattleCombinationTable::CombinationAbilityID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCameraSequenceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCameraSequenceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCameraSequenceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCameraSequenceAccessor");
static_assert(sizeof(FEndDataObjectCameraSequenceAccessor) == 0x000020, "Wrong size on FEndDataObjectCameraSequenceAccessor");

// ScriptStruct EndDataObject.EndDataTablePianoChordsAssign
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTablePianoChordsAssign final : public FEndDataTableRowBase
{
public:
	uint8                                         PageIndex;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         KeyAssign;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Semitone;                                          // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Minor;                                             // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChordID;                                           // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SocketName;                                        // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePianoChordsAssign) == 0x000008, "Wrong alignment on FEndDataTablePianoChordsAssign");
static_assert(sizeof(FEndDataTablePianoChordsAssign) == 0x000020, "Wrong size on FEndDataTablePianoChordsAssign");
static_assert(offsetof(FEndDataTablePianoChordsAssign, PageIndex) == 0x000008, "Member 'FEndDataTablePianoChordsAssign::PageIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoChordsAssign, KeyAssign) == 0x000009, "Member 'FEndDataTablePianoChordsAssign::KeyAssign' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoChordsAssign, Semitone) == 0x00000A, "Member 'FEndDataTablePianoChordsAssign::Semitone' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoChordsAssign, Minor) == 0x00000B, "Member 'FEndDataTablePianoChordsAssign::Minor' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoChordsAssign, ChordID) == 0x00000C, "Member 'FEndDataTablePianoChordsAssign::ChordID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoChordsAssign, SocketName) == 0x000014, "Member 'FEndDataTablePianoChordsAssign::SocketName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCameraSettingAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCameraSettingAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCameraSettingAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCameraSettingAccessor");
static_assert(sizeof(FEndDataObjectCameraSettingAccessor) == 0x000020, "Wrong size on FEndDataObjectCameraSettingAccessor");

// ScriptStruct EndDataObject.EndDataObjectUniqueActionRCSMoveAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectUniqueActionRCSMoveAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectUniqueActionRCSMoveAccessor) == 0x000008, "Wrong alignment on FEndDataObjectUniqueActionRCSMoveAccessor");
static_assert(sizeof(FEndDataObjectUniqueActionRCSMoveAccessor) == 0x000020, "Wrong size on FEndDataObjectUniqueActionRCSMoveAccessor");

// ScriptStruct EndDataObject.EndDataTableOverrideWalkType
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableOverrideWalkType final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         OverrideWalkType_Array;                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableOverrideWalkType) == 0x000008, "Wrong alignment on FEndDataTableOverrideWalkType");
static_assert(sizeof(FEndDataTableOverrideWalkType) == 0x000018, "Wrong size on FEndDataTableOverrideWalkType");
static_assert(offsetof(FEndDataTableOverrideWalkType, OverrideWalkType_Array) == 0x000008, "Member 'FEndDataTableOverrideWalkType::OverrideWalkType_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCameraShakeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCameraShakeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCameraShakeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCameraShakeAccessor");
static_assert(sizeof(FEndDataObjectCameraShakeAccessor) == 0x000020, "Wrong size on FEndDataObjectCameraShakeAccessor");

// ScriptStruct EndDataObject.EndDataObjectCanEquipmentAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCanEquipmentAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCanEquipmentAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCanEquipmentAccessor");
static_assert(sizeof(FEndDataObjectCanEquipmentAccessor) == 0x000020, "Wrong size on FEndDataObjectCanEquipmentAccessor");

// ScriptStruct EndDataObject.EndDataTableSteeringParameter
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableSteeringParameter final : public FEndDataTableRowBase
{
public:
	uint8                                         Group;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Presence;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreNavEdge;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AllowResultSpeedZero;                              // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConsiderationRadiusMargin;                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RadiusMargin;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AvoidanceRadiusMargin;                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GroupTableId;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableSteeringParameter) == 0x000008, "Wrong alignment on FEndDataTableSteeringParameter");
static_assert(sizeof(FEndDataTableSteeringParameter) == 0x000028, "Wrong size on FEndDataTableSteeringParameter");
static_assert(offsetof(FEndDataTableSteeringParameter, Group) == 0x000008, "Member 'FEndDataTableSteeringParameter::Group' has a wrong offset!");
static_assert(offsetof(FEndDataTableSteeringParameter, Presence) == 0x000009, "Member 'FEndDataTableSteeringParameter::Presence' has a wrong offset!");
static_assert(offsetof(FEndDataTableSteeringParameter, Weight) == 0x00000C, "Member 'FEndDataTableSteeringParameter::Weight' has a wrong offset!");
static_assert(offsetof(FEndDataTableSteeringParameter, IgnoreNavEdge) == 0x000010, "Member 'FEndDataTableSteeringParameter::IgnoreNavEdge' has a wrong offset!");
static_assert(offsetof(FEndDataTableSteeringParameter, AllowResultSpeedZero) == 0x000011, "Member 'FEndDataTableSteeringParameter::AllowResultSpeedZero' has a wrong offset!");
static_assert(offsetof(FEndDataTableSteeringParameter, ConsiderationRadiusMargin) == 0x000014, "Member 'FEndDataTableSteeringParameter::ConsiderationRadiusMargin' has a wrong offset!");
static_assert(offsetof(FEndDataTableSteeringParameter, RadiusMargin) == 0x000018, "Member 'FEndDataTableSteeringParameter::RadiusMargin' has a wrong offset!");
static_assert(offsetof(FEndDataTableSteeringParameter, AvoidanceRadiusMargin) == 0x00001C, "Member 'FEndDataTableSteeringParameter::AvoidanceRadiusMargin' has a wrong offset!");
static_assert(offsetof(FEndDataTableSteeringParameter, GroupTableId) == 0x000020, "Member 'FEndDataTableSteeringParameter::GroupTableId' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleSceneLevel
// 0x0188 (0x0190 - 0x0008)
struct FEndDataTableBattleSceneLevel final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ToAggressiveStateTrigger_Array;                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EntryStateTrigger_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EscapingStateTrigger_Array;                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           WaveStateTrigger_Array;                            // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ImmediateKillStateTrigger_Array;                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           KillStateTrigger_Array;                            // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateTriggerList_Array;                            // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   DisableTargetIconObjectLayout;                     // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ForceAggressive;                                   // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreBattleBGMName;                                  // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BattleBGMSlotID;                                   // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         BattleBGMNameList_Array;                           // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           WaveTargetPointList_Array;                         // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           TalkGroupID_Array;                                 // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattleConditionTriggerGroupId_Array;               // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         SituationType;                                     // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NoWaitBattleTalk;                                  // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ToConnectEvent;                                    // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FinishBattleType_Array;                            // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   AIParameter;                                       // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WanderingParamList;                                // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UnableBattleInTeleport;                            // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UnableBattleFinishTeleport;                        // 0x0119(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreDelayBattleIn;                               // 0x011A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11B[0x1];                                      // 0x011B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RewardStateConditionID00;                          // 0x011C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RewardStateConditionID01;                          // 0x0124(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RewardID;                                          // 0x012C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LinkBattleScene;                                   // 0x0134(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FirstEncountMonitorLocationWork;                   // 0x013C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SubQuestId;                                        // 0x0144(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NoDepopInFieldAction;                              // 0x014C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PositionX_Array;                                   // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PositionY_Array;                                   // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PositionZ_Array;                                   // 0x0170(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 RotationY_Array;                                   // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleSceneLevel) == 0x000008, "Wrong alignment on FEndDataTableBattleSceneLevel");
static_assert(sizeof(FEndDataTableBattleSceneLevel) == 0x000190, "Wrong size on FEndDataTableBattleSceneLevel");
static_assert(offsetof(FEndDataTableBattleSceneLevel, ToAggressiveStateTrigger_Array) == 0x000008, "Member 'FEndDataTableBattleSceneLevel::ToAggressiveStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, EntryStateTrigger_Array) == 0x000018, "Member 'FEndDataTableBattleSceneLevel::EntryStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, EscapingStateTrigger_Array) == 0x000028, "Member 'FEndDataTableBattleSceneLevel::EscapingStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, WaveStateTrigger_Array) == 0x000038, "Member 'FEndDataTableBattleSceneLevel::WaveStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, ImmediateKillStateTrigger_Array) == 0x000048, "Member 'FEndDataTableBattleSceneLevel::ImmediateKillStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, KillStateTrigger_Array) == 0x000058, "Member 'FEndDataTableBattleSceneLevel::KillStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, StateTriggerList_Array) == 0x000068, "Member 'FEndDataTableBattleSceneLevel::StateTriggerList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, DisableTargetIconObjectLayout) == 0x000078, "Member 'FEndDataTableBattleSceneLevel::DisableTargetIconObjectLayout' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, ForceAggressive) == 0x000080, "Member 'FEndDataTableBattleSceneLevel::ForceAggressive' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, PreBattleBGMName) == 0x000088, "Member 'FEndDataTableBattleSceneLevel::PreBattleBGMName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, BattleBGMSlotID) == 0x000098, "Member 'FEndDataTableBattleSceneLevel::BattleBGMSlotID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, BattleBGMNameList_Array) == 0x0000A8, "Member 'FEndDataTableBattleSceneLevel::BattleBGMNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, WaveTargetPointList_Array) == 0x0000B8, "Member 'FEndDataTableBattleSceneLevel::WaveTargetPointList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, TalkGroupID_Array) == 0x0000C8, "Member 'FEndDataTableBattleSceneLevel::TalkGroupID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, BattleConditionTriggerGroupId_Array) == 0x0000D8, "Member 'FEndDataTableBattleSceneLevel::BattleConditionTriggerGroupId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, SituationType) == 0x0000E8, "Member 'FEndDataTableBattleSceneLevel::SituationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, NoWaitBattleTalk) == 0x0000EC, "Member 'FEndDataTableBattleSceneLevel::NoWaitBattleTalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, ToConnectEvent) == 0x0000F0, "Member 'FEndDataTableBattleSceneLevel::ToConnectEvent' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, FinishBattleType_Array) == 0x0000F8, "Member 'FEndDataTableBattleSceneLevel::FinishBattleType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, AIParameter) == 0x000108, "Member 'FEndDataTableBattleSceneLevel::AIParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, WanderingParamList) == 0x000110, "Member 'FEndDataTableBattleSceneLevel::WanderingParamList' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, UnableBattleInTeleport) == 0x000118, "Member 'FEndDataTableBattleSceneLevel::UnableBattleInTeleport' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, UnableBattleFinishTeleport) == 0x000119, "Member 'FEndDataTableBattleSceneLevel::UnableBattleFinishTeleport' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, IgnoreDelayBattleIn) == 0x00011A, "Member 'FEndDataTableBattleSceneLevel::IgnoreDelayBattleIn' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, RewardStateConditionID00) == 0x00011C, "Member 'FEndDataTableBattleSceneLevel::RewardStateConditionID00' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, RewardStateConditionID01) == 0x000124, "Member 'FEndDataTableBattleSceneLevel::RewardStateConditionID01' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, RewardID) == 0x00012C, "Member 'FEndDataTableBattleSceneLevel::RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, LinkBattleScene) == 0x000134, "Member 'FEndDataTableBattleSceneLevel::LinkBattleScene' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, FirstEncountMonitorLocationWork) == 0x00013C, "Member 'FEndDataTableBattleSceneLevel::FirstEncountMonitorLocationWork' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, SubQuestId) == 0x000144, "Member 'FEndDataTableBattleSceneLevel::SubQuestId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, NoDepopInFieldAction) == 0x00014C, "Member 'FEndDataTableBattleSceneLevel::NoDepopInFieldAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, PositionX_Array) == 0x000150, "Member 'FEndDataTableBattleSceneLevel::PositionX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, PositionY_Array) == 0x000160, "Member 'FEndDataTableBattleSceneLevel::PositionY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, PositionZ_Array) == 0x000170, "Member 'FEndDataTableBattleSceneLevel::PositionZ_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, RotationY_Array) == 0x000180, "Member 'FEndDataTableBattleSceneLevel::RotationY_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCardChallengeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardChallengeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardChallengeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardChallengeAccessor");
static_assert(sizeof(FEndDataObjectCardChallengeAccessor) == 0x000020, "Wrong size on FEndDataObjectCardChallengeAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleItemPossession
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableBattleItemPossession final : public FEndDataTableRowBase
{
public:
	int32                                         StealFaildCountArrayIndex;                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NormalItemName_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 NormalItemPercent_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RareItemName_Array;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 RareItemPercent_Array;                             // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StealItemName_Array;                               // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 StealItemQuantity_Array;                           // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   MorphItemID0;                                      // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyExpID;                                        // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyAPID;                                         // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyGilID;                                        // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleItemPossession) == 0x000008, "Wrong alignment on FEndDataTableBattleItemPossession");
static_assert(sizeof(FEndDataTableBattleItemPossession) == 0x000090, "Wrong size on FEndDataTableBattleItemPossession");
static_assert(offsetof(FEndDataTableBattleItemPossession, StealFaildCountArrayIndex) == 0x000008, "Member 'FEndDataTableBattleItemPossession::StealFaildCountArrayIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, NormalItemName_Array) == 0x000010, "Member 'FEndDataTableBattleItemPossession::NormalItemName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, NormalItemPercent_Array) == 0x000020, "Member 'FEndDataTableBattleItemPossession::NormalItemPercent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, RareItemName_Array) == 0x000030, "Member 'FEndDataTableBattleItemPossession::RareItemName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, RareItemPercent_Array) == 0x000040, "Member 'FEndDataTableBattleItemPossession::RareItemPercent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, StealItemName_Array) == 0x000050, "Member 'FEndDataTableBattleItemPossession::StealItemName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, StealItemQuantity_Array) == 0x000060, "Member 'FEndDataTableBattleItemPossession::StealItemQuantity_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, MorphItemID0) == 0x000070, "Member 'FEndDataTableBattleItemPossession::MorphItemID0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, EnemyExpID) == 0x000078, "Member 'FEndDataTableBattleItemPossession::EnemyExpID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, EnemyAPID) == 0x000080, "Member 'FEndDataTableBattleItemPossession::EnemyAPID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, EnemyGilID) == 0x000088, "Member 'FEndDataTableBattleItemPossession::EnemyGilID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCardGameAIParamAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameAIParamAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameAIParamAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameAIParamAccessor");
static_assert(sizeof(FEndDataObjectCardGameAIParamAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameAIParamAccessor");

// ScriptStruct EndDataObject.EndDataObjectCardGameAnomalyBoardAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameAnomalyBoardAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameAnomalyBoardAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameAnomalyBoardAccessor");
static_assert(sizeof(FEndDataObjectCardGameAnomalyBoardAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameAnomalyBoardAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleDefense
// 0x0098 (0x00A0 - 0x0008)
struct FEndDataTableBattleDefense final : public FEndDataTableRowBase
{
public:
	uint8                                         DecisionType;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CommandTypeGuardType_Array;                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         CommandTypeGuardType0CutValueOver50;               // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CutValueGuard;                                     // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CutValueGuardCrash;                                // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 EnableState_Array;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         AngleBasic;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngleRight;                                        // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngleLeft;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         KeepValue;                                         // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BlockPhysicsFarReflect;                            // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BlockPhysicsFarReflectAddMotionName;               // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BlockPhysicsFarReflectCreateDamageSourceID;        // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlockPhysicsCoefficient;                           // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlockMagicCoefficient;                             // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlockBPCoefficient;                                // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AbilityCount;                                      // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AbilityCountOwnerType;                             // 0x0065(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AbilityCountPropertyFlagBits;                      // 0x0066(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AbilityCountCommandFlagBits;                       // 0x0067(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AbilityId;                                         // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DamageSourceID;                                    // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrashPhysicsCoefficient;                           // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrashMagicCoefficient;                             // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrashBPCoefficient;                                // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CrashAbilityID;                                    // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CrashDamageSourceID;                               // 0x008C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NearFinishDamageSourceID;                          // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleDefense) == 0x000008, "Wrong alignment on FEndDataTableBattleDefense");
static_assert(sizeof(FEndDataTableBattleDefense) == 0x0000A0, "Wrong size on FEndDataTableBattleDefense");
static_assert(offsetof(FEndDataTableBattleDefense, DecisionType) == 0x000008, "Member 'FEndDataTableBattleDefense::DecisionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, CommandTypeGuardType_Array) == 0x000010, "Member 'FEndDataTableBattleDefense::CommandTypeGuardType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, CommandTypeGuardType0CutValueOver50) == 0x000020, "Member 'FEndDataTableBattleDefense::CommandTypeGuardType0CutValueOver50' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, CutValueGuard) == 0x000021, "Member 'FEndDataTableBattleDefense::CutValueGuard' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, CutValueGuardCrash) == 0x000022, "Member 'FEndDataTableBattleDefense::CutValueGuardCrash' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, EnableState_Array) == 0x000028, "Member 'FEndDataTableBattleDefense::EnableState_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, AngleBasic) == 0x000038, "Member 'FEndDataTableBattleDefense::AngleBasic' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, AngleRight) == 0x00003C, "Member 'FEndDataTableBattleDefense::AngleRight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, AngleLeft) == 0x000040, "Member 'FEndDataTableBattleDefense::AngleLeft' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, KeepValue) == 0x000044, "Member 'FEndDataTableBattleDefense::KeepValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, BlockPhysicsFarReflect) == 0x000045, "Member 'FEndDataTableBattleDefense::BlockPhysicsFarReflect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, BlockPhysicsFarReflectAddMotionName) == 0x000048, "Member 'FEndDataTableBattleDefense::BlockPhysicsFarReflectAddMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, BlockPhysicsFarReflectCreateDamageSourceID) == 0x000050, "Member 'FEndDataTableBattleDefense::BlockPhysicsFarReflectCreateDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, BlockPhysicsCoefficient) == 0x000058, "Member 'FEndDataTableBattleDefense::BlockPhysicsCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, BlockMagicCoefficient) == 0x00005C, "Member 'FEndDataTableBattleDefense::BlockMagicCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, BlockBPCoefficient) == 0x000060, "Member 'FEndDataTableBattleDefense::BlockBPCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, AbilityCount) == 0x000064, "Member 'FEndDataTableBattleDefense::AbilityCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, AbilityCountOwnerType) == 0x000065, "Member 'FEndDataTableBattleDefense::AbilityCountOwnerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, AbilityCountPropertyFlagBits) == 0x000066, "Member 'FEndDataTableBattleDefense::AbilityCountPropertyFlagBits' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, AbilityCountCommandFlagBits) == 0x000067, "Member 'FEndDataTableBattleDefense::AbilityCountCommandFlagBits' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, AbilityId) == 0x000068, "Member 'FEndDataTableBattleDefense::AbilityId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, DamageSourceID) == 0x000070, "Member 'FEndDataTableBattleDefense::DamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, CrashPhysicsCoefficient) == 0x000078, "Member 'FEndDataTableBattleDefense::CrashPhysicsCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, CrashMagicCoefficient) == 0x00007C, "Member 'FEndDataTableBattleDefense::CrashMagicCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, CrashBPCoefficient) == 0x000080, "Member 'FEndDataTableBattleDefense::CrashBPCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, CrashAbilityID) == 0x000084, "Member 'FEndDataTableBattleDefense::CrashAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, CrashDamageSourceID) == 0x00008C, "Member 'FEndDataTableBattleDefense::CrashDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDefense, NearFinishDamageSourceID) == 0x000094, "Member 'FEndDataTableBattleDefense::NearFinishDamageSourceID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCardGameAnomalyRuleAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameAnomalyRuleAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameAnomalyRuleAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameAnomalyRuleAccessor");
static_assert(sizeof(FEndDataObjectCardGameAnomalyRuleAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameAnomalyRuleAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleReportCondition
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBattleReportCondition final : public FEndDataTableRowBase
{
public:
	uint8                                         CheckType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ConditionType;                                     // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ConditionTableID;                                  // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ConditionValue;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OperatorSymbol;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AddCheckConditionID;                               // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ViewString;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleReportCondition) == 0x000008, "Wrong alignment on FEndDataTableBattleReportCondition");
static_assert(sizeof(FEndDataTableBattleReportCondition) == 0x000038, "Wrong size on FEndDataTableBattleReportCondition");
static_assert(offsetof(FEndDataTableBattleReportCondition, CheckType) == 0x000008, "Member 'FEndDataTableBattleReportCondition::CheckType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, ConditionType) == 0x000009, "Member 'FEndDataTableBattleReportCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, ConditionTableID) == 0x00000C, "Member 'FEndDataTableBattleReportCondition::ConditionTableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, ConditionValue) == 0x000014, "Member 'FEndDataTableBattleReportCondition::ConditionValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, OperatorSymbol) == 0x000018, "Member 'FEndDataTableBattleReportCondition::OperatorSymbol' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, AddCheckConditionID) == 0x00001C, "Member 'FEndDataTableBattleReportCondition::AddCheckConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, ViewString) == 0x000028, "Member 'FEndDataTableBattleReportCondition::ViewString' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCardGameCardInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameCardInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameCardInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameCardInfoAccessor");
static_assert(sizeof(FEndDataObjectCardGameCardInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameCardInfoAccessor");

// ScriptStruct EndDataObject.EndDataObjectCardGameCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectCardGameCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectCardGameMessageAmorReggieAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameMessageAmorReggieAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameMessageAmorReggieAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameMessageAmorReggieAccessor");
static_assert(sizeof(FEndDataObjectCardGameMessageAmorReggieAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameMessageAmorReggieAccessor");

// ScriptStruct EndDataObject.EndDataObjectCardGameOpponentAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameOpponentAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameOpponentAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameOpponentAccessor");
static_assert(sizeof(FEndDataObjectCardGameOpponentAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameOpponentAccessor");

// ScriptStruct EndDataObject.EndDataTableBattlePointLinkData
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableBattlePointLinkData final : public FEndDataTableRowBase
{
public:
	int32                                         Number;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LinkDest_Array;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         PeakHeight;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PeakBias;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Duration;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BeginAnimation;                                    // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LoopAnimation;                                     // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EndAnimation0;                                     // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EndAnimation1;                                     // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattlePointLinkData) == 0x000008, "Wrong alignment on FEndDataTableBattlePointLinkData");
static_assert(sizeof(FEndDataTableBattlePointLinkData) == 0x000050, "Wrong size on FEndDataTableBattlePointLinkData");
static_assert(offsetof(FEndDataTableBattlePointLinkData, Number) == 0x000008, "Member 'FEndDataTableBattlePointLinkData::Number' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, LinkDest_Array) == 0x000010, "Member 'FEndDataTableBattlePointLinkData::LinkDest_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, PeakHeight) == 0x000020, "Member 'FEndDataTableBattlePointLinkData::PeakHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, PeakBias) == 0x000024, "Member 'FEndDataTableBattlePointLinkData::PeakBias' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, Duration) == 0x000028, "Member 'FEndDataTableBattlePointLinkData::Duration' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, BeginAnimation) == 0x00002C, "Member 'FEndDataTableBattlePointLinkData::BeginAnimation' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, LoopAnimation) == 0x000034, "Member 'FEndDataTableBattlePointLinkData::LoopAnimation' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, EndAnimation0) == 0x00003C, "Member 'FEndDataTableBattlePointLinkData::EndAnimation0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, EndAnimation1) == 0x000044, "Member 'FEndDataTableBattlePointLinkData::EndAnimation1' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCardGamePresetDeckAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGamePresetDeckAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGamePresetDeckAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGamePresetDeckAccessor");
static_assert(sizeof(FEndDataObjectCardGamePresetDeckAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGamePresetDeckAccessor");

// ScriptStruct EndDataObject.EndDataObjectCardGameTutorialAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCardGameTutorialAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCardGameTutorialAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCardGameTutorialAccessor");
static_assert(sizeof(FEndDataObjectCardGameTutorialAccessor) == 0x000020, "Wrong size on FEndDataObjectCardGameTutorialAccessor");

// ScriptStruct EndDataObject.EndDataObjectChadleyShopListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChadleyShopListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChadleyShopListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChadleyShopListAccessor");
static_assert(sizeof(FEndDataObjectChadleyShopListAccessor) == 0x000020, "Wrong size on FEndDataObjectChadleyShopListAccessor");

// ScriptStruct EndDataObject.EndDataObjectChadleySpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChadleySpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChadleySpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChadleySpecAccessor");
static_assert(sizeof(FEndDataObjectChadleySpecAccessor) == 0x000020, "Wrong size on FEndDataObjectChadleySpecAccessor");

// ScriptStruct EndDataObject.EndDataObjectChadleyTalkAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChadleyTalkAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChadleyTalkAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChadleyTalkAccessor");
static_assert(sizeof(FEndDataObjectChadleyTalkAccessor) == 0x000020, "Wrong size on FEndDataObjectChadleyTalkAccessor");

// ScriptStruct EndDataObject.EndDataTableShopLayoutObject
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableShopLayoutObject final : public FEndDataTableRowBase
{
public:
	uint8                                         ShopType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ShopName;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ShopLayoutDataID_Array;                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableShopLayoutObject) == 0x000008, "Wrong alignment on FEndDataTableShopLayoutObject");
static_assert(sizeof(FEndDataTableShopLayoutObject) == 0x000030, "Wrong size on FEndDataTableShopLayoutObject");
static_assert(offsetof(FEndDataTableShopLayoutObject, ShopType) == 0x000008, "Member 'FEndDataTableShopLayoutObject::ShopType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopLayoutObject, ShopName) == 0x000010, "Member 'FEndDataTableShopLayoutObject::ShopName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopLayoutObject, ShopLayoutDataID_Array) == 0x000020, "Member 'FEndDataTableShopLayoutObject::ShopLayoutDataID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectChapterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChapterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChapterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChapterAccessor");
static_assert(sizeof(FEndDataObjectChapterAccessor) == 0x000020, "Wrong size on FEndDataObjectChapterAccessor");

// ScriptStruct EndDataObject.EndDataObjectChapterResetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChapterResetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChapterResetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChapterResetAccessor");
static_assert(sizeof(FEndDataObjectChapterResetAccessor) == 0x000020, "Wrong size on FEndDataObjectChapterResetAccessor");

// ScriptStruct EndDataObject.EndDataObjectChapterResetLocationWorkAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChapterResetLocationWorkAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChapterResetLocationWorkAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChapterResetLocationWorkAccessor");
static_assert(sizeof(FEndDataObjectChapterResetLocationWorkAccessor) == 0x000020, "Wrong size on FEndDataObjectChapterResetLocationWorkAccessor");

// ScriptStruct EndDataObject.EndDataObjectChapterSelectSpecialObjectAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChapterSelectSpecialObjectAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChapterSelectSpecialObjectAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChapterSelectSpecialObjectAccessor");
static_assert(sizeof(FEndDataObjectChapterSelectSpecialObjectAccessor) == 0x000020, "Wrong size on FEndDataObjectChapterSelectSpecialObjectAccessor");

// ScriptStruct EndDataObject.EndDataObjectCharaExchangeTableAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCharaExchangeTableAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCharaExchangeTableAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCharaExchangeTableAccessor");
static_assert(sizeof(FEndDataObjectCharaExchangeTableAccessor) == 0x000020, "Wrong size on FEndDataObjectCharaExchangeTableAccessor");

// ScriptStruct EndDataObject.EndDataObjectCharaPopAssetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCharaPopAssetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCharaPopAssetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCharaPopAssetAccessor");
static_assert(sizeof(FEndDataObjectCharaPopAssetAccessor) == 0x000020, "Wrong size on FEndDataObjectCharaPopAssetAccessor");

// ScriptStruct EndDataObject.EndDataTableStateTrigger
// 0x0090 (0x0098 - 0x0008)
struct FEndDataTableStateTrigger final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Target;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SpecialTypeList_Array;                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ClearHistory_Array;                                // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ObjectIDList_Array;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AttributeNameList_Array;                           // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateChangeIDList_Array;                           // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         EnableBattleSnap;                                  // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BattleSnapTargetPoint_Array;                       // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   BattleSnapTargetPointTinyBronco;                   // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BackupSaveEndActionID;                             // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SendObject_Array;                                  // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableStateTrigger) == 0x000008, "Wrong alignment on FEndDataTableStateTrigger");
static_assert(sizeof(FEndDataTableStateTrigger) == 0x000098, "Wrong size on FEndDataTableStateTrigger");
static_assert(offsetof(FEndDataTableStateTrigger, UniqueIndex) == 0x000008, "Member 'FEndDataTableStateTrigger::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, Target) == 0x00000C, "Member 'FEndDataTableStateTrigger::Target' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, SpecialTypeList_Array) == 0x000010, "Member 'FEndDataTableStateTrigger::SpecialTypeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, ClearHistory_Array) == 0x000020, "Member 'FEndDataTableStateTrigger::ClearHistory_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, ObjectIDList_Array) == 0x000030, "Member 'FEndDataTableStateTrigger::ObjectIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, AttributeNameList_Array) == 0x000040, "Member 'FEndDataTableStateTrigger::AttributeNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, StateChangeIDList_Array) == 0x000050, "Member 'FEndDataTableStateTrigger::StateChangeIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, EnableBattleSnap) == 0x000060, "Member 'FEndDataTableStateTrigger::EnableBattleSnap' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, BattleSnapTargetPoint_Array) == 0x000068, "Member 'FEndDataTableStateTrigger::BattleSnapTargetPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, BattleSnapTargetPointTinyBronco) == 0x000078, "Member 'FEndDataTableStateTrigger::BattleSnapTargetPointTinyBronco' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, BackupSaveEndActionID) == 0x000080, "Member 'FEndDataTableStateTrigger::BackupSaveEndActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, SendObject_Array) == 0x000088, "Member 'FEndDataTableStateTrigger::SendObject_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCharaPopPackAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCharaPopPackAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCharaPopPackAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCharaPopPackAccessor");
static_assert(sizeof(FEndDataObjectCharaPopPackAccessor) == 0x000020, "Wrong size on FEndDataObjectCharaPopPackAccessor");

// ScriptStruct EndDataObject.EndDataObjectCharaPopSwitchVolumeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCharaPopSwitchVolumeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCharaPopSwitchVolumeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCharaPopSwitchVolumeAccessor");
static_assert(sizeof(FEndDataObjectCharaPopSwitchVolumeAccessor) == 0x000020, "Wrong size on FEndDataObjectCharaPopSwitchVolumeAccessor");

// ScriptStruct EndDataObject.EndDataObjectCharaSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCharaSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCharaSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCharaSpecAccessor");
static_assert(sizeof(FEndDataObjectCharaSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectCharaSpecAccessor");

// ScriptStruct EndDataObject.EndDataObjectCharaSpecSoundCategoryAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCharaSpecSoundCategoryAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCharaSpecSoundCategoryAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCharaSpecSoundCategoryAccessor");
static_assert(sizeof(FEndDataObjectCharaSpecSoundCategoryAccessor) == 0x000020, "Wrong size on FEndDataObjectCharaSpecSoundCategoryAccessor");

// ScriptStruct EndDataObject.EndDataObjectCharaSpecUseListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCharaSpecUseListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCharaSpecUseListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCharaSpecUseListAccessor");
static_assert(sizeof(FEndDataObjectCharaSpecUseListAccessor) == 0x000020, "Wrong size on FEndDataObjectCharaSpecUseListAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCaptureBalloonGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCaptureBalloonGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCaptureBalloonGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCaptureBalloonGroupAccessor");
static_assert(sizeof(FEndDataObjectChocoboCaptureBalloonGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCaptureBalloonGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCaptureCheckPointParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCaptureCheckPointParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCaptureCheckPointParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCaptureCheckPointParameterAccessor");
static_assert(sizeof(FEndDataObjectChocoboCaptureCheckPointParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCaptureCheckPointParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCaptureCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCaptureCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCaptureCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCaptureCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectChocoboCaptureCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCaptureCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCaptureLocationParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCaptureLocationParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCaptureLocationParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCaptureLocationParameterAccessor");
static_assert(sizeof(FEndDataObjectChocoboCaptureLocationParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCaptureLocationParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCaptureTurnPatternAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCaptureTurnPatternAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCaptureTurnPatternAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCaptureTurnPatternAccessor");
static_assert(sizeof(FEndDataObjectChocoboCaptureTurnPatternAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCaptureTurnPatternAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCraftCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCraftCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCraftCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCraftCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectChocoboCraftCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCraftCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCraftLocationParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCraftLocationParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCraftLocationParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCraftLocationParameterAccessor");
static_assert(sizeof(FEndDataObjectChocoboCraftLocationParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCraftLocationParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboCraftLocationSaveParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboCraftLocationSaveParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboCraftLocationSaveParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboCraftLocationSaveParameterAccessor");
static_assert(sizeof(FEndDataObjectChocoboCraftLocationSaveParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboCraftLocationSaveParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboFastTravelPointAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboFastTravelPointAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboFastTravelPointAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboFastTravelPointAccessor");
static_assert(sizeof(FEndDataObjectChocoboFastTravelPointAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboFastTravelPointAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboPartsAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboPartsAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboPartsAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboPartsAccessor");
static_assert(sizeof(FEndDataObjectChocoboPartsAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboPartsAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboPartsColorPresetDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboPartsColorPresetDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboPartsColorPresetDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboPartsColorPresetDataAccessor");
static_assert(sizeof(FEndDataObjectChocoboPartsColorPresetDataAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboPartsColorPresetDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceAbilityDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceAbilityDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceAbilityDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceAbilityDataAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceAbilityDataAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceAbilityDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceCourseDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceCourseDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceCourseDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceCourseDataAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceCourseDataAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceCourseDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceParameterLevelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceParameterLevelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceParameterLevelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceParameterLevelAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceParameterLevelAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceParameterLevelAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRacePerformanceRangeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRacePerformanceRangeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRacePerformanceRangeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRacePerformanceRangeAccessor");
static_assert(sizeof(FEndDataObjectChocoboRacePerformanceRangeAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRacePerformanceRangeAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceRivalGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceRivalGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceRivalGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceRivalGroupAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceRivalGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceRivalGroupAccessor");

// ScriptStruct EndDataObject.EndDataTableSituationAction
// 0x0100 (0x0108 - 0x0008)
struct FEndDataTableSituationAction final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraRailName;                                    // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FinishType;                                        // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SmoothObjectName00;                                // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SmoothObjectName01;                                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StartAfterSmoothing;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AIParameterID;                                     // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActorName_Array;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Idle_Array;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextIdle_Array;                                    // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Front_Array;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextFront_Array;                                   // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Back_Array;                                        // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextBack_Array;                                    // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Left_Array;                                        // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextLeft_Array;                                    // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Right_Array;                                       // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextRight_Array;                                   // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StartStateTrigger_Array;                           // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EndStateTrigger_Array;                             // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableSituationAction) == 0x000008, "Wrong alignment on FEndDataTableSituationAction");
static_assert(sizeof(FEndDataTableSituationAction) == 0x000108, "Wrong size on FEndDataTableSituationAction");
static_assert(offsetof(FEndDataTableSituationAction, Type) == 0x000008, "Member 'FEndDataTableSituationAction::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, CameraRailName) == 0x00000C, "Member 'FEndDataTableSituationAction::CameraRailName' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, FinishType) == 0x000014, "Member 'FEndDataTableSituationAction::FinishType' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, SmoothObjectName00) == 0x000018, "Member 'FEndDataTableSituationAction::SmoothObjectName00' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, SmoothObjectName01) == 0x000020, "Member 'FEndDataTableSituationAction::SmoothObjectName01' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, StartAfterSmoothing) == 0x000028, "Member 'FEndDataTableSituationAction::StartAfterSmoothing' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, AIParameterID) == 0x00002C, "Member 'FEndDataTableSituationAction::AIParameterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, ActorName_Array) == 0x000038, "Member 'FEndDataTableSituationAction::ActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, Idle_Array) == 0x000048, "Member 'FEndDataTableSituationAction::Idle_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, NextIdle_Array) == 0x000058, "Member 'FEndDataTableSituationAction::NextIdle_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, Front_Array) == 0x000068, "Member 'FEndDataTableSituationAction::Front_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, NextFront_Array) == 0x000078, "Member 'FEndDataTableSituationAction::NextFront_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, Back_Array) == 0x000088, "Member 'FEndDataTableSituationAction::Back_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, NextBack_Array) == 0x000098, "Member 'FEndDataTableSituationAction::NextBack_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, Left_Array) == 0x0000A8, "Member 'FEndDataTableSituationAction::Left_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, NextLeft_Array) == 0x0000B8, "Member 'FEndDataTableSituationAction::NextLeft_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, Right_Array) == 0x0000C8, "Member 'FEndDataTableSituationAction::Right_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, NextRight_Array) == 0x0000D8, "Member 'FEndDataTableSituationAction::NextRight_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, StartStateTrigger_Array) == 0x0000E8, "Member 'FEndDataTableSituationAction::StartStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, EndStateTrigger_Array) == 0x0000F8, "Member 'FEndDataTableSituationAction::EndStateTrigger_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleGuardReaction
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableBattleGuardReaction final : public FEndDataTableRowBase
{
public:
	uint8                                         Damage0Block;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AddATB_Array;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DamageCoefficient_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AddRevengeTime_Array;                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AddExciteTime_Array;                               // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleGuardReaction) == 0x000008, "Wrong alignment on FEndDataTableBattleGuardReaction");
static_assert(sizeof(FEndDataTableBattleGuardReaction) == 0x000050, "Wrong size on FEndDataTableBattleGuardReaction");
static_assert(offsetof(FEndDataTableBattleGuardReaction, Damage0Block) == 0x000008, "Member 'FEndDataTableBattleGuardReaction::Damage0Block' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleGuardReaction, AddATB_Array) == 0x000010, "Member 'FEndDataTableBattleGuardReaction::AddATB_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleGuardReaction, DamageCoefficient_Array) == 0x000020, "Member 'FEndDataTableBattleGuardReaction::DamageCoefficient_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleGuardReaction, AddRevengeTime_Array) == 0x000030, "Member 'FEndDataTableBattleGuardReaction::AddRevengeTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleGuardReaction, AddExciteTime_Array) == 0x000040, "Member 'FEndDataTableBattleGuardReaction::AddExciteTime_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceRivalRunSettingAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceRivalRunSettingAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceRivalRunSettingAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceRivalRunSettingAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceRivalRunSettingAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceRivalRunSettingAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleDamageSourceHitReaction
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableBattleDamageSourceHitReaction final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 HitReactionType_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 HitReactionParam_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           HitReactionParamID_Array;                          // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AerialHitReactionParam_Array;                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleDamageSourceHitReaction) == 0x000008, "Wrong alignment on FEndDataTableBattleDamageSourceHitReaction");
static_assert(sizeof(FEndDataTableBattleDamageSourceHitReaction) == 0x000048, "Wrong size on FEndDataTableBattleDamageSourceHitReaction");
static_assert(offsetof(FEndDataTableBattleDamageSourceHitReaction, HitReactionType_Array) == 0x000008, "Member 'FEndDataTableBattleDamageSourceHitReaction::HitReactionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSourceHitReaction, HitReactionParam_Array) == 0x000018, "Member 'FEndDataTableBattleDamageSourceHitReaction::HitReactionParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSourceHitReaction, HitReactionParamID_Array) == 0x000028, "Member 'FEndDataTableBattleDamageSourceHitReaction::HitReactionParamID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSourceHitReaction, AerialHitReactionParam_Array) == 0x000038, "Member 'FEndDataTableBattleDamageSourceHitReaction::AerialHitReactionParam_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceRunningParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceRunningParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceRunningParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceRunningParameterAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceRunningParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceRunningParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceSkillConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceSkillConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceSkillConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceSkillConditionAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceSkillConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceSkillConditionAccessor");

// ScriptStruct EndDataObject.EndDataObjectChocoboRaceSkillEffectAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboRaceSkillEffectAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboRaceSkillEffectAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboRaceSkillEffectAccessor");
static_assert(sizeof(FEndDataObjectChocoboRaceSkillEffectAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboRaceSkillEffectAccessor");

// ScriptStruct EndDataObject.EndDataTableBattleEnemyIconUI
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBattleEnemyIconUI final : public FEndDataTableRowBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleEnemyIconUI) == 0x000008, "Wrong alignment on FEndDataTableBattleEnemyIconUI");
static_assert(sizeof(FEndDataTableBattleEnemyIconUI) == 0x000010, "Wrong size on FEndDataTableBattleEnemyIconUI");
static_assert(offsetof(FEndDataTableBattleEnemyIconUI, Value) == 0x000008, "Member 'FEndDataTableBattleEnemyIconUI::Value' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectChocoboStatusAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectChocoboStatusAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectChocoboStatusAccessor) == 0x000008, "Wrong alignment on FEndDataObjectChocoboStatusAccessor");
static_assert(sizeof(FEndDataObjectChocoboStatusAccessor) == 0x000020, "Wrong size on FEndDataObjectChocoboStatusAccessor");

// ScriptStruct EndDataObject.EndDataObjectColosseumAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectColosseumAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectColosseumAccessor) == 0x000008, "Wrong alignment on FEndDataObjectColosseumAccessor");
static_assert(sizeof(FEndDataObjectColosseumAccessor) == 0x000020, "Wrong size on FEndDataObjectColosseumAccessor");

// ScriptStruct EndDataObject.EndDataObjectQuestResetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectQuestResetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectQuestResetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectQuestResetAccessor");
static_assert(sizeof(FEndDataObjectQuestResetAccessor) == 0x000020, "Wrong size on FEndDataObjectQuestResetAccessor");

// ScriptStruct EndDataObject.EndDataObjectColosseumConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectColosseumConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectColosseumConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectColosseumConditionAccessor");
static_assert(sizeof(FEndDataObjectColosseumConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectColosseumConditionAccessor");

// ScriptStruct EndDataObject.EndDataTableReward
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableReward final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StateCondision_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ItemID_Array;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ItemCount_Array;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ItemAddType_Array;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerArgument_Array;                             // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableReward) == 0x000008, "Wrong alignment on FEndDataTableReward");
static_assert(sizeof(FEndDataTableReward) == 0x000060, "Wrong size on FEndDataTableReward");
static_assert(offsetof(FEndDataTableReward, UniqueIndex) == 0x000008, "Member 'FEndDataTableReward::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableReward, StateCondision_Array) == 0x000010, "Member 'FEndDataTableReward::StateCondision_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableReward, ItemID_Array) == 0x000020, "Member 'FEndDataTableReward::ItemID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableReward, ItemCount_Array) == 0x000030, "Member 'FEndDataTableReward::ItemCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableReward, ItemAddType_Array) == 0x000040, "Member 'FEndDataTableReward::ItemAddType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableReward, IntegerArgument_Array) == 0x000050, "Member 'FEndDataTableReward::IntegerArgument_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectColosseumFadeParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectColosseumFadeParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectColosseumFadeParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectColosseumFadeParameterAccessor");
static_assert(sizeof(FEndDataObjectColosseumFadeParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectColosseumFadeParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectObjectAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectAccessor");
static_assert(sizeof(FEndDataObjectObjectAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectAccessor");

// ScriptStruct EndDataObject.EndDataObjectColosseumFixedAbilitiesAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectColosseumFixedAbilitiesAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectColosseumFixedAbilitiesAccessor) == 0x000008, "Wrong alignment on FEndDataObjectColosseumFixedAbilitiesAccessor");
static_assert(sizeof(FEndDataObjectColosseumFixedAbilitiesAccessor) == 0x000020, "Wrong size on FEndDataObjectColosseumFixedAbilitiesAccessor");

// ScriptStruct EndDataObject.EndDataObjectColosseumPositionDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectColosseumPositionDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectColosseumPositionDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectColosseumPositionDataAccessor");
static_assert(sizeof(FEndDataObjectColosseumPositionDataAccessor) == 0x000020, "Wrong size on FEndDataObjectColosseumPositionDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectReportMissionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectReportMissionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectReportMissionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectReportMissionAccessor");
static_assert(sizeof(FEndDataObjectReportMissionAccessor) == 0x000020, "Wrong size on FEndDataObjectReportMissionAccessor");

// ScriptStruct EndDataObject.EndDataObjectColosseumSceneDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectColosseumSceneDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectColosseumSceneDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectColosseumSceneDataAccessor");
static_assert(sizeof(FEndDataObjectColosseumSceneDataAccessor) == 0x000020, "Wrong size on FEndDataObjectColosseumSceneDataAccessor");

// ScriptStruct EndDataObject.EndDataTableStoryDetailInfo
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableStoryDetailInfo final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         ProgressText_Array;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ProgressCount_Array;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ProgressWorkID_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableStoryDetailInfo) == 0x000008, "Wrong alignment on FEndDataTableStoryDetailInfo");
static_assert(sizeof(FEndDataTableStoryDetailInfo) == 0x000038, "Wrong size on FEndDataTableStoryDetailInfo");
static_assert(offsetof(FEndDataTableStoryDetailInfo, ProgressText_Array) == 0x000008, "Member 'FEndDataTableStoryDetailInfo::ProgressText_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryDetailInfo, ProgressCount_Array) == 0x000018, "Member 'FEndDataTableStoryDetailInfo::ProgressCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryDetailInfo, ProgressWorkID_Array) == 0x000028, "Member 'FEndDataTableStoryDetailInfo::ProgressWorkID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCommonSaveDataConfigAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCommonSaveDataConfigAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCommonSaveDataConfigAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCommonSaveDataConfigAccessor");
static_assert(sizeof(FEndDataObjectCommonSaveDataConfigAccessor) == 0x000020, "Wrong size on FEndDataObjectCommonSaveDataConfigAccessor");

// ScriptStruct EndDataObject.EndDataObjectQuestClearAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectQuestClearAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectQuestClearAccessor) == 0x000008, "Wrong alignment on FEndDataObjectQuestClearAccessor");
static_assert(sizeof(FEndDataObjectQuestClearAccessor) == 0x000020, "Wrong size on FEndDataObjectQuestClearAccessor");

// ScriptStruct EndDataObject.EndDataObjectCondorCommanderActionAIAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCondorCommanderActionAIAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCondorCommanderActionAIAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCondorCommanderActionAIAccessor");
static_assert(sizeof(FEndDataObjectCondorCommanderActionAIAccessor) == 0x000020, "Wrong size on FEndDataObjectCondorCommanderActionAIAccessor");

// ScriptStruct EndDataObject.EndDataObjectCondorCommanderAIAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCondorCommanderAIAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCondorCommanderAIAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCondorCommanderAIAccessor");
static_assert(sizeof(FEndDataObjectCondorCommanderAIAccessor) == 0x000020, "Wrong size on FEndDataObjectCondorCommanderAIAccessor");

// ScriptStruct EndDataObject.EndDataObjectNaviMapWorldOffsetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectNaviMapWorldOffsetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectNaviMapWorldOffsetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectNaviMapWorldOffsetAccessor");
static_assert(sizeof(FEndDataObjectNaviMapWorldOffsetAccessor) == 0x000020, "Wrong size on FEndDataObjectNaviMapWorldOffsetAccessor");

// ScriptStruct EndDataObject.EndDataObjectCondorFortCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCondorFortCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCondorFortCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCondorFortCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectCondorFortCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectCondorFortCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataTableShootingCoasterHardEnemyData
// 0x0228 (0x0230 - 0x0008)
struct FEndDataTableShootingCoasterHardEnemyData final : public FEndDataTableRowBase
{
public:
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Hitpoints;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TimeToSpawn;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UnfollowPlayerSpline;                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinDistance;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotInterval;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotSpeed;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotDamage;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotRadius;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotMaxDistance;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CollisionLifetime;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxRandomErrorDegrees;                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HomingPower;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnemyScore;                                        // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CloseRangeDistanceToSpeedChange;                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CloseRangeSpeed;                                   // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CloseRangeTimeToSpeedChange;                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FarRangeDistanceToSpeedChange;                     // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FarRangeSpeed;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FarRangeTimeToSpeedChange;                         // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChargeShotMaxTime;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TotalChargeShots;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveToLocationSpeed;                               // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TotalShotsPerLocation;                             // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TotalLocationChanges;                              // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveTowardsPlayerSpeed;                            // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBeforeMovingBegins;                            // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBeforeShootingBegins;                          // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBeforeRushAttack;                              // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChanceToSideSwap;                                  // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ExchangeRadius;                                    // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ExchangeTimePerAttempt;                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnchorHorizontalOffset;                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnchorForwardOffset;                               // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HorizontalMovementLimit;                           // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VerticalMovementLimit;                             // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InterpolationMovementSpeed;                        // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChangePathPercentage;                              // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DistanceToBeginMatchingPlayerSpeed;                // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetComponentName1;                              // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetComponentHealth1;                            // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetComponentName2;                              // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetComponentHealth2;                            // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetComponentName3;                              // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetComponentHealth3;                            // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SineAmplitude;                                     // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SineFrequency;                                     // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserRadius;                                       // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserDamage;                                       // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserTotalTime;                                    // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserMaxDistance;                                  // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBetweenLaserAttacksMinimum;                    // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBetweenLaserAttacksMaximum;                    // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserHomingPower;                                  // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserChargeTime;                                   // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DrillShotDamage;                                   // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DrillShotActiveTime;                               // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DrillShotCoolDownTime;                             // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalAttackMovementSpeed;                          // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EscapeMovementSpeed;                               // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EscapeDistance;                                    // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EscapeTime;                                        // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CannonSocketName;                                  // 0x010C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InitialDelay;                                      // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Interval;                                          // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DrillShotHoming;                                   // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DrillShotSpeed;                                    // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AimToPlayer;                                       // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BossCannonAssetName;                               // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BossCannonType;                                    // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BossCannonPhase;                                   // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RequiredForPhaseChange;                            // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CannonYaw;                                         // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CannonPitch;                                       // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BossCannonSocketName;                              // 0x0144(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BossCannonGroupName;                               // 0x014C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BossCannonAttackType;                              // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonHitpoints;                               // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BossCannonScore;                                   // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonStartTime;                               // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonShotInterval;                            // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonHomingPower;                             // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonShotSpeed;                               // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonShotDamage;                              // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonShotMaxDistance;                         // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonShotRadius;                              // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxShotsBeforeRetargetting;                        // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDistanceForTargetting;                          // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChargeTotalTime;                                   // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserActiveTime;                                   // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OwnerRocketID;                                     // 0x018C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LaserSocketID;                                     // 0x0194(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserOffsetX;                                      // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserOffsetY;                                      // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserOffsetYaw;                                    // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserOffsetPitch;                                  // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossLaserRadius;                              // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossLaserDamage;                              // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossLaserMaxDistance;                         // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserDistanceFromPlayer;                           // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserPositionalVerticalOffset;                     // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossLaserTotalTime;                           // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossTimeBetweenLaserAttacks;                  // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossLaserChargeTime;                          // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BlendOption;                                       // 0x01CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxUpDistance;                                     // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDownDistance;                                   // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxLeftDistance;                                   // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxRightDistance;                                  // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxFrontDistance;                                  // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxBackDistance;                                   // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinimumDistanceAcceptable;                         // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBetweenMovement;                               // 0x01EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeForMovement;                                   // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossMiniLaserDelay;                           // 0x01F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossMiniLaserTotalTime;                       // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossTimeBetweenMiniLaserAttacks;              // 0x01FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossMiniLaserChargeTime;                      // 0x0200(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AllyCannonDamageLimit;                             // 0x0204(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AllyRocketDamageLimit;                             // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RocketAssetName;                                   // 0x020C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RocketSocketName;                                  // 0x0214(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RocketHitpoints;                                   // 0x021C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RocketScore;                                       // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalFeedbackTime;                                 // 0x0224(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DistanceToEndOfSpline;                             // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableShootingCoasterHardEnemyData) == 0x000008, "Wrong alignment on FEndDataTableShootingCoasterHardEnemyData");
static_assert(sizeof(FEndDataTableShootingCoasterHardEnemyData) == 0x000230, "Wrong size on FEndDataTableShootingCoasterHardEnemyData");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, Speed) == 0x000008, "Member 'FEndDataTableShootingCoasterHardEnemyData::Speed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, Hitpoints) == 0x00000C, "Member 'FEndDataTableShootingCoasterHardEnemyData::Hitpoints' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TimeToSpawn) == 0x000010, "Member 'FEndDataTableShootingCoasterHardEnemyData::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, UnfollowPlayerSpline) == 0x000014, "Member 'FEndDataTableShootingCoasterHardEnemyData::UnfollowPlayerSpline' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MinDistance) == 0x000018, "Member 'FEndDataTableShootingCoasterHardEnemyData::MinDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ShotInterval) == 0x00001C, "Member 'FEndDataTableShootingCoasterHardEnemyData::ShotInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ShotSpeed) == 0x000020, "Member 'FEndDataTableShootingCoasterHardEnemyData::ShotSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ShotDamage) == 0x000024, "Member 'FEndDataTableShootingCoasterHardEnemyData::ShotDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ShotRadius) == 0x000028, "Member 'FEndDataTableShootingCoasterHardEnemyData::ShotRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ShotMaxDistance) == 0x00002C, "Member 'FEndDataTableShootingCoasterHardEnemyData::ShotMaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, CollisionLifetime) == 0x000030, "Member 'FEndDataTableShootingCoasterHardEnemyData::CollisionLifetime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MaxRandomErrorDegrees) == 0x000034, "Member 'FEndDataTableShootingCoasterHardEnemyData::MaxRandomErrorDegrees' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, HomingPower) == 0x000038, "Member 'FEndDataTableShootingCoasterHardEnemyData::HomingPower' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, EnemyScore) == 0x00003C, "Member 'FEndDataTableShootingCoasterHardEnemyData::EnemyScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, CloseRangeDistanceToSpeedChange) == 0x000040, "Member 'FEndDataTableShootingCoasterHardEnemyData::CloseRangeDistanceToSpeedChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, CloseRangeSpeed) == 0x000044, "Member 'FEndDataTableShootingCoasterHardEnemyData::CloseRangeSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, CloseRangeTimeToSpeedChange) == 0x000048, "Member 'FEndDataTableShootingCoasterHardEnemyData::CloseRangeTimeToSpeedChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FarRangeDistanceToSpeedChange) == 0x00004C, "Member 'FEndDataTableShootingCoasterHardEnemyData::FarRangeDistanceToSpeedChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FarRangeSpeed) == 0x000050, "Member 'FEndDataTableShootingCoasterHardEnemyData::FarRangeSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FarRangeTimeToSpeedChange) == 0x000054, "Member 'FEndDataTableShootingCoasterHardEnemyData::FarRangeTimeToSpeedChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ChargeShotMaxTime) == 0x000058, "Member 'FEndDataTableShootingCoasterHardEnemyData::ChargeShotMaxTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TotalChargeShots) == 0x00005C, "Member 'FEndDataTableShootingCoasterHardEnemyData::TotalChargeShots' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MoveToLocationSpeed) == 0x000060, "Member 'FEndDataTableShootingCoasterHardEnemyData::MoveToLocationSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TotalShotsPerLocation) == 0x000064, "Member 'FEndDataTableShootingCoasterHardEnemyData::TotalShotsPerLocation' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TotalLocationChanges) == 0x000068, "Member 'FEndDataTableShootingCoasterHardEnemyData::TotalLocationChanges' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MoveTowardsPlayerSpeed) == 0x00006C, "Member 'FEndDataTableShootingCoasterHardEnemyData::MoveTowardsPlayerSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TimeBeforeMovingBegins) == 0x000070, "Member 'FEndDataTableShootingCoasterHardEnemyData::TimeBeforeMovingBegins' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TimeBeforeShootingBegins) == 0x000074, "Member 'FEndDataTableShootingCoasterHardEnemyData::TimeBeforeShootingBegins' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TimeBeforeRushAttack) == 0x000078, "Member 'FEndDataTableShootingCoasterHardEnemyData::TimeBeforeRushAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ChanceToSideSwap) == 0x00007C, "Member 'FEndDataTableShootingCoasterHardEnemyData::ChanceToSideSwap' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ExchangeRadius) == 0x000080, "Member 'FEndDataTableShootingCoasterHardEnemyData::ExchangeRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ExchangeTimePerAttempt) == 0x000084, "Member 'FEndDataTableShootingCoasterHardEnemyData::ExchangeTimePerAttempt' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, AnchorHorizontalOffset) == 0x000088, "Member 'FEndDataTableShootingCoasterHardEnemyData::AnchorHorizontalOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, AnchorForwardOffset) == 0x00008C, "Member 'FEndDataTableShootingCoasterHardEnemyData::AnchorForwardOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, HorizontalMovementLimit) == 0x000090, "Member 'FEndDataTableShootingCoasterHardEnemyData::HorizontalMovementLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, VerticalMovementLimit) == 0x000094, "Member 'FEndDataTableShootingCoasterHardEnemyData::VerticalMovementLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, InterpolationMovementSpeed) == 0x000098, "Member 'FEndDataTableShootingCoasterHardEnemyData::InterpolationMovementSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ChangePathPercentage) == 0x00009C, "Member 'FEndDataTableShootingCoasterHardEnemyData::ChangePathPercentage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, DistanceToBeginMatchingPlayerSpeed) == 0x0000A0, "Member 'FEndDataTableShootingCoasterHardEnemyData::DistanceToBeginMatchingPlayerSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TargetComponentName1) == 0x0000A4, "Member 'FEndDataTableShootingCoasterHardEnemyData::TargetComponentName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TargetComponentHealth1) == 0x0000AC, "Member 'FEndDataTableShootingCoasterHardEnemyData::TargetComponentHealth1' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TargetComponentName2) == 0x0000B0, "Member 'FEndDataTableShootingCoasterHardEnemyData::TargetComponentName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TargetComponentHealth2) == 0x0000B8, "Member 'FEndDataTableShootingCoasterHardEnemyData::TargetComponentHealth2' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TargetComponentName3) == 0x0000BC, "Member 'FEndDataTableShootingCoasterHardEnemyData::TargetComponentName3' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TargetComponentHealth3) == 0x0000C4, "Member 'FEndDataTableShootingCoasterHardEnemyData::TargetComponentHealth3' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, SineAmplitude) == 0x0000C8, "Member 'FEndDataTableShootingCoasterHardEnemyData::SineAmplitude' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, SineFrequency) == 0x0000CC, "Member 'FEndDataTableShootingCoasterHardEnemyData::SineFrequency' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserRadius) == 0x0000D0, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserDamage) == 0x0000D4, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserTotalTime) == 0x0000D8, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserTotalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserMaxDistance) == 0x0000DC, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserMaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TimeBetweenLaserAttacksMinimum) == 0x0000E0, "Member 'FEndDataTableShootingCoasterHardEnemyData::TimeBetweenLaserAttacksMinimum' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TimeBetweenLaserAttacksMaximum) == 0x0000E4, "Member 'FEndDataTableShootingCoasterHardEnemyData::TimeBetweenLaserAttacksMaximum' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserHomingPower) == 0x0000E8, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserHomingPower' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserChargeTime) == 0x0000EC, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserChargeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, DrillShotDamage) == 0x0000F0, "Member 'FEndDataTableShootingCoasterHardEnemyData::DrillShotDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, DrillShotActiveTime) == 0x0000F4, "Member 'FEndDataTableShootingCoasterHardEnemyData::DrillShotActiveTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, DrillShotCoolDownTime) == 0x0000F8, "Member 'FEndDataTableShootingCoasterHardEnemyData::DrillShotCoolDownTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalAttackMovementSpeed) == 0x0000FC, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalAttackMovementSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, EscapeMovementSpeed) == 0x000100, "Member 'FEndDataTableShootingCoasterHardEnemyData::EscapeMovementSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, EscapeDistance) == 0x000104, "Member 'FEndDataTableShootingCoasterHardEnemyData::EscapeDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, EscapeTime) == 0x000108, "Member 'FEndDataTableShootingCoasterHardEnemyData::EscapeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, CannonSocketName) == 0x00010C, "Member 'FEndDataTableShootingCoasterHardEnemyData::CannonSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, InitialDelay) == 0x000114, "Member 'FEndDataTableShootingCoasterHardEnemyData::InitialDelay' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, Interval) == 0x000118, "Member 'FEndDataTableShootingCoasterHardEnemyData::Interval' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, DrillShotHoming) == 0x00011C, "Member 'FEndDataTableShootingCoasterHardEnemyData::DrillShotHoming' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, DrillShotSpeed) == 0x000120, "Member 'FEndDataTableShootingCoasterHardEnemyData::DrillShotSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, AimToPlayer) == 0x000124, "Member 'FEndDataTableShootingCoasterHardEnemyData::AimToPlayer' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonAssetName) == 0x000128, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonAssetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonType) == 0x000130, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonPhase) == 0x000134, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonPhase' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, RequiredForPhaseChange) == 0x000138, "Member 'FEndDataTableShootingCoasterHardEnemyData::RequiredForPhaseChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, CannonYaw) == 0x00013C, "Member 'FEndDataTableShootingCoasterHardEnemyData::CannonYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, CannonPitch) == 0x000140, "Member 'FEndDataTableShootingCoasterHardEnemyData::CannonPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonSocketName) == 0x000144, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonGroupName) == 0x00014C, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonGroupName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonAttackType) == 0x000154, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonAttackType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonHitpoints) == 0x000158, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonHitpoints' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonScore) == 0x00015C, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonStartTime) == 0x000160, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonStartTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonShotInterval) == 0x000164, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonShotInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonHomingPower) == 0x000168, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonHomingPower' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonShotSpeed) == 0x00016C, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonShotSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonShotDamage) == 0x000170, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonShotDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonShotMaxDistance) == 0x000174, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonShotMaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BossCannonShotRadius) == 0x000178, "Member 'FEndDataTableShootingCoasterHardEnemyData::BossCannonShotRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MaxShotsBeforeRetargetting) == 0x00017C, "Member 'FEndDataTableShootingCoasterHardEnemyData::MaxShotsBeforeRetargetting' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MaxDistanceForTargetting) == 0x000180, "Member 'FEndDataTableShootingCoasterHardEnemyData::MaxDistanceForTargetting' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, ChargeTotalTime) == 0x000184, "Member 'FEndDataTableShootingCoasterHardEnemyData::ChargeTotalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserActiveTime) == 0x000188, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserActiveTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, OwnerRocketID) == 0x00018C, "Member 'FEndDataTableShootingCoasterHardEnemyData::OwnerRocketID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserSocketID) == 0x000194, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserSocketID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserOffsetX) == 0x00019C, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserOffsetY) == 0x0001A0, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserOffsetYaw) == 0x0001A4, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserOffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserOffsetPitch) == 0x0001A8, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserOffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalBossLaserRadius) == 0x0001AC, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalBossLaserRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalBossLaserDamage) == 0x0001B0, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalBossLaserDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalBossLaserMaxDistance) == 0x0001B4, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalBossLaserMaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserDistanceFromPlayer) == 0x0001B8, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserDistanceFromPlayer' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, LaserPositionalVerticalOffset) == 0x0001BC, "Member 'FEndDataTableShootingCoasterHardEnemyData::LaserPositionalVerticalOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalBossLaserTotalTime) == 0x0001C0, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalBossLaserTotalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalBossTimeBetweenLaserAttacks) == 0x0001C4, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalBossTimeBetweenLaserAttacks' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalBossLaserChargeTime) == 0x0001C8, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalBossLaserChargeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, BlendOption) == 0x0001CC, "Member 'FEndDataTableShootingCoasterHardEnemyData::BlendOption' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MaxUpDistance) == 0x0001D0, "Member 'FEndDataTableShootingCoasterHardEnemyData::MaxUpDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MaxDownDistance) == 0x0001D4, "Member 'FEndDataTableShootingCoasterHardEnemyData::MaxDownDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MaxLeftDistance) == 0x0001D8, "Member 'FEndDataTableShootingCoasterHardEnemyData::MaxLeftDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MaxRightDistance) == 0x0001DC, "Member 'FEndDataTableShootingCoasterHardEnemyData::MaxRightDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MaxFrontDistance) == 0x0001E0, "Member 'FEndDataTableShootingCoasterHardEnemyData::MaxFrontDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MaxBackDistance) == 0x0001E4, "Member 'FEndDataTableShootingCoasterHardEnemyData::MaxBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, MinimumDistanceAcceptable) == 0x0001E8, "Member 'FEndDataTableShootingCoasterHardEnemyData::MinimumDistanceAcceptable' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TimeBetweenMovement) == 0x0001EC, "Member 'FEndDataTableShootingCoasterHardEnemyData::TimeBetweenMovement' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, TimeForMovement) == 0x0001F0, "Member 'FEndDataTableShootingCoasterHardEnemyData::TimeForMovement' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalBossMiniLaserDelay) == 0x0001F4, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalBossMiniLaserDelay' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalBossMiniLaserTotalTime) == 0x0001F8, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalBossMiniLaserTotalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalBossTimeBetweenMiniLaserAttacks) == 0x0001FC, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalBossTimeBetweenMiniLaserAttacks' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalBossMiniLaserChargeTime) == 0x000200, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalBossMiniLaserChargeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, AllyCannonDamageLimit) == 0x000204, "Member 'FEndDataTableShootingCoasterHardEnemyData::AllyCannonDamageLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, AllyRocketDamageLimit) == 0x000208, "Member 'FEndDataTableShootingCoasterHardEnemyData::AllyRocketDamageLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, RocketAssetName) == 0x00020C, "Member 'FEndDataTableShootingCoasterHardEnemyData::RocketAssetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, RocketSocketName) == 0x000214, "Member 'FEndDataTableShootingCoasterHardEnemyData::RocketSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, RocketHitpoints) == 0x00021C, "Member 'FEndDataTableShootingCoasterHardEnemyData::RocketHitpoints' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, RocketScore) == 0x000220, "Member 'FEndDataTableShootingCoasterHardEnemyData::RocketScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, FinalFeedbackTime) == 0x000224, "Member 'FEndDataTableShootingCoasterHardEnemyData::FinalFeedbackTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterHardEnemyData, DistanceToEndOfSpline) == 0x000228, "Member 'FEndDataTableShootingCoasterHardEnemyData::DistanceToEndOfSpline' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCondorFortDeckAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCondorFortDeckAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCondorFortDeckAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCondorFortDeckAccessor");
static_assert(sizeof(FEndDataObjectCondorFortDeckAccessor) == 0x000020, "Wrong size on FEndDataObjectCondorFortDeckAccessor");

// ScriptStruct EndDataObject.EndDataObjectObjectLayoutAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectLayoutAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectLayoutAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectLayoutAccessor");
static_assert(sizeof(FEndDataObjectObjectLayoutAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectLayoutAccessor");

// ScriptStruct EndDataObject.EndDataObjectCondorFortMateriaAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCondorFortMateriaAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCondorFortMateriaAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCondorFortMateriaAccessor");
static_assert(sizeof(FEndDataObjectCondorFortMateriaAccessor) == 0x000020, "Wrong size on FEndDataObjectCondorFortMateriaAccessor");

// ScriptStruct EndDataObject.EndDataObjectCondorFortOpponentAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCondorFortOpponentAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCondorFortOpponentAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCondorFortOpponentAccessor");
static_assert(sizeof(FEndDataObjectCondorFortOpponentAccessor) == 0x000020, "Wrong size on FEndDataObjectCondorFortOpponentAccessor");

// ScriptStruct EndDataObject.EndDataObjectObjectBattleSceneAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectBattleSceneAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectBattleSceneAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectBattleSceneAccessor");
static_assert(sizeof(FEndDataObjectObjectBattleSceneAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectBattleSceneAccessor");

// ScriptStruct EndDataObject.EndDataObjectCondorFortTimelineAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCondorFortTimelineAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCondorFortTimelineAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCondorFortTimelineAccessor");
static_assert(sizeof(FEndDataObjectCondorFortTimelineAccessor) == 0x000020, "Wrong size on FEndDataObjectCondorFortTimelineAccessor");

// ScriptStruct EndDataObject.EndDataTableSummonParameter
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableSummonParameter final : public FEndDataTableRowBase
{
public:
	int32                                         Strength;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Magic;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableSummonParameter) == 0x000008, "Wrong alignment on FEndDataTableSummonParameter");
static_assert(sizeof(FEndDataTableSummonParameter) == 0x000010, "Wrong size on FEndDataTableSummonParameter");
static_assert(offsetof(FEndDataTableSummonParameter, Strength) == 0x000008, "Member 'FEndDataTableSummonParameter::Strength' has a wrong offset!");
static_assert(offsetof(FEndDataTableSummonParameter, Magic) == 0x00000C, "Member 'FEndDataTableSummonParameter::Magic' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCondorFortUnitAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCondorFortUnitAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCondorFortUnitAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCondorFortUnitAccessor");
static_assert(sizeof(FEndDataObjectCondorFortUnitAccessor) == 0x000020, "Wrong size on FEndDataObjectCondorFortUnitAccessor");

// ScriptStruct EndDataObject.EndDataObjectNaviMapClearAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectNaviMapClearAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectNaviMapClearAccessor) == 0x000008, "Wrong alignment on FEndDataObjectNaviMapClearAccessor");
static_assert(sizeof(FEndDataObjectNaviMapClearAccessor) == 0x000020, "Wrong size on FEndDataObjectNaviMapClearAccessor");

// ScriptStruct EndDataObject.EndDataObjectCondorFortUnitParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCondorFortUnitParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCondorFortUnitParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCondorFortUnitParameterAccessor");
static_assert(sizeof(FEndDataObjectCondorFortUnitParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectCondorFortUnitParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectCondorFortUnitPresetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCondorFortUnitPresetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCondorFortUnitPresetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCondorFortUnitPresetAccessor");
static_assert(sizeof(FEndDataObjectCondorFortUnitPresetAccessor) == 0x000020, "Wrong size on FEndDataObjectCondorFortUnitPresetAccessor");

// ScriptStruct EndDataObject.EndDataObjectObjectEnvironmentSetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectEnvironmentSetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectEnvironmentSetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectEnvironmentSetAccessor");
static_assert(sizeof(FEndDataObjectObjectEnvironmentSetAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectEnvironmentSetAccessor");

// ScriptStruct EndDataObject.EndDataObjectCountersAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCountersAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCountersAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCountersAccessor");
static_assert(sizeof(FEndDataObjectCountersAccessor) == 0x000020, "Wrong size on FEndDataObjectCountersAccessor");

// ScriptStruct EndDataObject.EndDataObjectCraftLevelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCraftLevelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCraftLevelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCraftLevelAccessor");
static_assert(sizeof(FEndDataObjectCraftLevelAccessor) == 0x000020, "Wrong size on FEndDataObjectCraftLevelAccessor");

// ScriptStruct EndDataObject.EndDataObjectPCReinforcedAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPCReinforcedAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPCReinforcedAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPCReinforcedAccessor");
static_assert(sizeof(FEndDataObjectPCReinforcedAccessor) == 0x000020, "Wrong size on FEndDataObjectPCReinforcedAccessor");

// ScriptStruct EndDataObject.EndDataObjectCrashBoxForceAbilityAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCrashBoxForceAbilityAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCrashBoxForceAbilityAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCrashBoxForceAbilityAccessor");
static_assert(sizeof(FEndDataObjectCrashBoxForceAbilityAccessor) == 0x000020, "Wrong size on FEndDataObjectCrashBoxForceAbilityAccessor");

// ScriptStruct EndDataObject.EndDataObjectCrystalAnalysisCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCrystalAnalysisCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCrystalAnalysisCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCrystalAnalysisCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectCrystalAnalysisCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectCrystalAnalysisCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectObjectPartyAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectPartyAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectPartyAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectPartyAccessor");
static_assert(sizeof(FEndDataObjectObjectPartyAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectPartyAccessor");

// ScriptStruct EndDataObject.EndDataObjectCrystalAnalysisLocationParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCrystalAnalysisLocationParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCrystalAnalysisLocationParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCrystalAnalysisLocationParameterAccessor");
static_assert(sizeof(FEndDataObjectCrystalAnalysisLocationParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectCrystalAnalysisLocationParameterAccessor");

// ScriptStruct EndDataObject.EndDataTableTargetPointList
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableTargetPointList final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           TargetPointList_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTargetPointList) == 0x000008, "Wrong alignment on FEndDataTableTargetPointList");
static_assert(sizeof(FEndDataTableTargetPointList) == 0x000018, "Wrong size on FEndDataTableTargetPointList");
static_assert(offsetof(FEndDataTableTargetPointList, TargetPointList_Array) == 0x000008, "Member 'FEndDataTableTargetPointList::TargetPointList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectCurrencyDetailAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCurrencyDetailAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCurrencyDetailAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCurrencyDetailAccessor");
static_assert(sizeof(FEndDataObjectCurrencyDetailAccessor) == 0x000020, "Wrong size on FEndDataObjectCurrencyDetailAccessor");

// ScriptStruct EndDataObject.EndDataObjectObjectEnemyTerritoryAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectEnemyTerritoryAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectEnemyTerritoryAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectEnemyTerritoryAccessor");
static_assert(sizeof(FEndDataObjectObjectEnemyTerritoryAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectEnemyTerritoryAccessor");

// ScriptStruct EndDataObject.EndDataObjectCutsceneAssetDataSizeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCutsceneAssetDataSizeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCutsceneAssetDataSizeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCutsceneAssetDataSizeAccessor");
static_assert(sizeof(FEndDataObjectCutsceneAssetDataSizeAccessor) == 0x000020, "Wrong size on FEndDataObjectCutsceneAssetDataSizeAccessor");

// ScriptStruct EndDataObject.EndDataObjectCutSceneBindActorListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCutSceneBindActorListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCutSceneBindActorListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCutSceneBindActorListAccessor");
static_assert(sizeof(FEndDataObjectCutSceneBindActorListAccessor) == 0x000020, "Wrong size on FEndDataObjectCutSceneBindActorListAccessor");

// ScriptStruct EndDataObject.EndDataObjectPartyEntryAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPartyEntryAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPartyEntryAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPartyEntryAccessor");
static_assert(sizeof(FEndDataObjectPartyEntryAccessor) == 0x000020, "Wrong size on FEndDataObjectPartyEntryAccessor");

// ScriptStruct EndDataObject.EndDataObjectCutSceneCatenaListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCutSceneCatenaListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCutSceneCatenaListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCutSceneCatenaListAccessor");
static_assert(sizeof(FEndDataObjectCutSceneCatenaListAccessor) == 0x000020, "Wrong size on FEndDataObjectCutSceneCatenaListAccessor");

// ScriptStruct EndDataObject.EndDataObjectCutSceneChangeEquipListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCutSceneChangeEquipListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCutSceneChangeEquipListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCutSceneChangeEquipListAccessor");
static_assert(sizeof(FEndDataObjectCutSceneChangeEquipListAccessor) == 0x000020, "Wrong size on FEndDataObjectCutSceneChangeEquipListAccessor");

// ScriptStruct EndDataObject.EndDataObjectPianoSafePointListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPianoSafePointListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPianoSafePointListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPianoSafePointListAccessor");
static_assert(sizeof(FEndDataObjectPianoSafePointListAccessor) == 0x000020, "Wrong size on FEndDataObjectPianoSafePointListAccessor");

// ScriptStruct EndDataObject.EndDataObjectCutSceneListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCutSceneListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCutSceneListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCutSceneListAccessor");
static_assert(sizeof(FEndDataObjectCutSceneListAccessor) == 0x000020, "Wrong size on FEndDataObjectCutSceneListAccessor");

// ScriptStruct EndDataObject.EndDataObjectCutSceneListLevelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectCutSceneListLevelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectCutSceneListLevelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectCutSceneListLevelAccessor");
static_assert(sizeof(FEndDataObjectCutSceneListLevelAccessor) == 0x000020, "Wrong size on FEndDataObjectCutSceneListLevelAccessor");

// ScriptStruct EndDataObject.EndDataObjectPhotoTargetParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPhotoTargetParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPhotoTargetParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPhotoTargetParameterAccessor");
static_assert(sizeof(FEndDataObjectPhotoTargetParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectPhotoTargetParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectDebugPartyListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectDebugPartyListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectDebugPartyListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectDebugPartyListAccessor");
static_assert(sizeof(FEndDataObjectDebugPartyListAccessor) == 0x000020, "Wrong size on FEndDataObjectDebugPartyListAccessor");

// ScriptStruct EndDataObject.EndDataTableResidentBattleConditionTriggerGroup
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableResidentBattleConditionTriggerGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           BattleConditionTriggerGroupId_Array;               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           TalkGroupID_Array;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableResidentBattleConditionTriggerGroup) == 0x000008, "Wrong alignment on FEndDataTableResidentBattleConditionTriggerGroup");
static_assert(sizeof(FEndDataTableResidentBattleConditionTriggerGroup) == 0x000028, "Wrong size on FEndDataTableResidentBattleConditionTriggerGroup");
static_assert(offsetof(FEndDataTableResidentBattleConditionTriggerGroup, BattleConditionTriggerGroupId_Array) == 0x000008, "Member 'FEndDataTableResidentBattleConditionTriggerGroup::BattleConditionTriggerGroupId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentBattleConditionTriggerGroup, TalkGroupID_Array) == 0x000018, "Member 'FEndDataTableResidentBattleConditionTriggerGroup::TalkGroupID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectDolphinJumpItemParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectDolphinJumpItemParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectDolphinJumpItemParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectDolphinJumpItemParameterAccessor");
static_assert(sizeof(FEndDataObjectDolphinJumpItemParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectDolphinJumpItemParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectOverrideActionTextAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectOverrideActionTextAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectOverrideActionTextAccessor) == 0x000008, "Wrong alignment on FEndDataObjectOverrideActionTextAccessor");
static_assert(sizeof(FEndDataObjectOverrideActionTextAccessor) == 0x000020, "Wrong size on FEndDataObjectOverrideActionTextAccessor");

// ScriptStruct EndDataObject.EndDataObjectDolphinJumpParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectDolphinJumpParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectDolphinJumpParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectDolphinJumpParameterAccessor");
static_assert(sizeof(FEndDataObjectDolphinJumpParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectDolphinJumpParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectEffect2SoundTableAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEffect2SoundTableAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEffect2SoundTableAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEffect2SoundTableAccessor");
static_assert(sizeof(FEndDataObjectEffect2SoundTableAccessor) == 0x000020, "Wrong size on FEndDataObjectEffect2SoundTableAccessor");

// ScriptStruct EndDataObject.EndDataTableStoryResident
// 0x00F0 (0x00F8 - 0x0008)
struct FEndDataTableStoryResident final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StoryIndex;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         GroupIndex;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StoryType;                                         // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParentID;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParentChapterID;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BranchStoryID;                                     // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CompleteStatus;                                    // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StoryProgressFlagID;                               // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SkipNotifyFlagID_Array;                            // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         NotifyViewType;                                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StoryOpenFlagID;                                   // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TitleUnkownFlag;                                   // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ViewIndex;                                         // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ItemName;                                          // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Description;                                       // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ImageName;                                         // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AdditionalGroupViewOption;                         // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalGroupViewString;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RecommendLevelID;                                  // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LayerType;                                         // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MapIconInfoID_Array;                               // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MapIconManage_Array;                               // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RemoveIconTarget_Array;                            // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   ChapterID;                                         // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableStoryResident) == 0x000008, "Wrong alignment on FEndDataTableStoryResident");
static_assert(sizeof(FEndDataTableStoryResident) == 0x0000F8, "Wrong size on FEndDataTableStoryResident");
static_assert(offsetof(FEndDataTableStoryResident, UniqueId) == 0x000008, "Member 'FEndDataTableStoryResident::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, StoryIndex) == 0x00000C, "Member 'FEndDataTableStoryResident::StoryIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, GroupIndex) == 0x000010, "Member 'FEndDataTableStoryResident::GroupIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, StoryType) == 0x000014, "Member 'FEndDataTableStoryResident::StoryType' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ParentID) == 0x000018, "Member 'FEndDataTableStoryResident::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ParentChapterID) == 0x000020, "Member 'FEndDataTableStoryResident::ParentChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, Priority) == 0x000028, "Member 'FEndDataTableStoryResident::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, BranchStoryID) == 0x00002C, "Member 'FEndDataTableStoryResident::BranchStoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, CompleteStatus) == 0x000034, "Member 'FEndDataTableStoryResident::CompleteStatus' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, StoryProgressFlagID) == 0x000038, "Member 'FEndDataTableStoryResident::StoryProgressFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, SkipNotifyFlagID_Array) == 0x000040, "Member 'FEndDataTableStoryResident::SkipNotifyFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, NotifyViewType) == 0x000050, "Member 'FEndDataTableStoryResident::NotifyViewType' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, StoryOpenFlagID) == 0x000054, "Member 'FEndDataTableStoryResident::StoryOpenFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, TitleUnkownFlag) == 0x00005C, "Member 'FEndDataTableStoryResident::TitleUnkownFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ViewIndex) == 0x000064, "Member 'FEndDataTableStoryResident::ViewIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ItemName) == 0x000068, "Member 'FEndDataTableStoryResident::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, Description) == 0x000078, "Member 'FEndDataTableStoryResident::Description' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ImageName) == 0x000088, "Member 'FEndDataTableStoryResident::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, AdditionalGroupViewOption) == 0x000098, "Member 'FEndDataTableStoryResident::AdditionalGroupViewOption' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, AdditionalGroupViewString) == 0x0000A0, "Member 'FEndDataTableStoryResident::AdditionalGroupViewString' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, RecommendLevelID) == 0x0000B0, "Member 'FEndDataTableStoryResident::RecommendLevelID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, LayerType) == 0x0000B8, "Member 'FEndDataTableStoryResident::LayerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, MapIconInfoID_Array) == 0x0000C0, "Member 'FEndDataTableStoryResident::MapIconInfoID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, MapIconManage_Array) == 0x0000D0, "Member 'FEndDataTableStoryResident::MapIconManage_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, RemoveIconTarget_Array) == 0x0000E0, "Member 'FEndDataTableStoryResident::RemoveIconTarget_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ChapterID) == 0x0000F0, "Member 'FEndDataTableStoryResident::ChapterID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectEmotionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEmotionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEmotionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEmotionAccessor");
static_assert(sizeof(FEndDataObjectEmotionAccessor) == 0x000020, "Wrong size on FEndDataObjectEmotionAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventLSDListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventLSDListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventLSDListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventLSDListAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventLSDListAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventLSDListAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyAPAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyAPAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyAPAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyAPAccessor");
static_assert(sizeof(FEndDataObjectEnemyAPAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyAPAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyBookAbilitesAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyBookAbilitesAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyBookAbilitesAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyBookAbilitesAccessor");
static_assert(sizeof(FEndDataObjectEnemyBookAbilitesAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyBookAbilitesAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyBookAreaDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyBookAreaDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyBookAreaDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyBookAreaDataAccessor");
static_assert(sizeof(FEndDataObjectEnemyBookAreaDataAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyBookAreaDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyBookBattleAbilityAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyBookBattleAbilityAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyBookBattleAbilityAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyBookBattleAbilityAccessor");
static_assert(sizeof(FEndDataObjectEnemyBookBattleAbilityAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyBookBattleAbilityAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyBookBattleCharaSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyBookBattleCharaSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyBookBattleCharaSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyBookBattleCharaSpecAccessor");
static_assert(sizeof(FEndDataObjectEnemyBookBattleCharaSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyBookBattleCharaSpecAccessor");

// ScriptStruct EndDataObject.EndDataTableTalkInsertSetting
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableTalkInsertSetting final : public FEndDataTableRowBase
{
public:
	int32                                         VoiceType;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         InsertType;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           TargetLabel_Array;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTalkInsertSetting) == 0x000008, "Wrong alignment on FEndDataTableTalkInsertSetting");
static_assert(sizeof(FEndDataTableTalkInsertSetting) == 0x000020, "Wrong size on FEndDataTableTalkInsertSetting");
static_assert(offsetof(FEndDataTableTalkInsertSetting, VoiceType) == 0x000008, "Member 'FEndDataTableTalkInsertSetting::VoiceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkInsertSetting, InsertType) == 0x00000C, "Member 'FEndDataTableTalkInsertSetting::InsertType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkInsertSetting, TargetLabel_Array) == 0x000010, "Member 'FEndDataTableTalkInsertSetting::TargetLabel_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectEnemyEXPAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyEXPAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyEXPAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyEXPAccessor");
static_assert(sizeof(FEndDataObjectEnemyEXPAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyEXPAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlannerLevelSetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerLevelSetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerLevelSetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerLevelSetAccessor");
static_assert(sizeof(FEndDataObjectPlannerLevelSetAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerLevelSetAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyGilAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyGilAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyGilAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyGilAccessor");
static_assert(sizeof(FEndDataObjectEnemyGilAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyGilAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyParameterAccessor");
static_assert(sizeof(FEndDataObjectEnemyParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyTerritoryGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyTerritoryGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyTerritoryGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyTerritoryGroupAccessor");
static_assert(sizeof(FEndDataObjectEnemyTerritoryGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyTerritoryGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlacementAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlacementAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlacementAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlacementAccessor");
static_assert(sizeof(FEndDataObjectPlacementAccessor) == 0x000020, "Wrong size on FEndDataObjectPlacementAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyTerritoryLevelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyTerritoryLevelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyTerritoryLevelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyTerritoryLevelAccessor");
static_assert(sizeof(FEndDataObjectEnemyTerritoryLevelAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyTerritoryLevelAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnemyTerritoryMobAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnemyTerritoryMobAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnemyTerritoryMobAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnemyTerritoryMobAccessor");
static_assert(sizeof(FEndDataObjectEnemyTerritoryMobAccessor) == 0x000020, "Wrong size on FEndDataObjectEnemyTerritoryMobAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventTalkLocationAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventTalkLocationAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventTalkLocationAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventTalkLocationAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventTalkLocationAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventTalkLocationAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnvironmentPhysicsSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnvironmentPhysicsSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnvironmentPhysicsSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnvironmentPhysicsSpecAccessor");
static_assert(sizeof(FEndDataObjectEnvironmentPhysicsSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectEnvironmentPhysicsSpecAccessor");

// ScriptStruct EndDataObject.EndDataTableRecommendedLevel
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableRecommendedLevel final : public FEndDataTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HardLevel;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableRecommendedLevel) == 0x000008, "Wrong alignment on FEndDataTableRecommendedLevel");
static_assert(sizeof(FEndDataTableRecommendedLevel) == 0x000010, "Wrong size on FEndDataTableRecommendedLevel");
static_assert(offsetof(FEndDataTableRecommendedLevel, Level) == 0x000008, "Member 'FEndDataTableRecommendedLevel::Level' has a wrong offset!");
static_assert(offsetof(FEndDataTableRecommendedLevel, HardLevel) == 0x00000C, "Member 'FEndDataTableRecommendedLevel::HardLevel' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectEnvironmentSetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnvironmentSetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnvironmentSetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnvironmentSetAccessor");
static_assert(sizeof(FEndDataObjectEnvironmentSetAccessor) == 0x000020, "Wrong size on FEndDataObjectEnvironmentSetAccessor");

// ScriptStruct EndDataObject.EndDataObjectPointWarpDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPointWarpDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPointWarpDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPointWarpDataAccessor");
static_assert(sizeof(FEndDataObjectPointWarpDataAccessor) == 0x000020, "Wrong size on FEndDataObjectPointWarpDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnvironmentSetWrapperAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnvironmentSetWrapperAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnvironmentSetWrapperAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnvironmentSetWrapperAccessor");
static_assert(sizeof(FEndDataObjectEnvironmentSetWrapperAccessor) == 0x000020, "Wrong size on FEndDataObjectEnvironmentSetWrapperAccessor");

// ScriptStruct EndDataObject.EndDataObjectEnvironmentSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEnvironmentSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEnvironmentSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEnvironmentSpecAccessor");
static_assert(sizeof(FEndDataObjectEnvironmentSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectEnvironmentSpecAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlayerFavRankAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlayerFavRankAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlayerFavRankAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlayerFavRankAccessor");
static_assert(sizeof(FEndDataObjectPlayerFavRankAccessor) == 0x000020, "Wrong size on FEndDataObjectPlayerFavRankAccessor");

// ScriptStruct EndDataObject.EndDataObjectEquipmentAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEquipmentAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEquipmentAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEquipmentAccessor");
static_assert(sizeof(FEndDataObjectEquipmentAccessor) == 0x000020, "Wrong size on FEndDataObjectEquipmentAccessor");

// ScriptStruct EndDataObject.EndDataObjectEventPriorityAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEventPriorityAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEventPriorityAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEventPriorityAccessor");
static_assert(sizeof(FEndDataObjectEventPriorityAccessor) == 0x000020, "Wrong size on FEndDataObjectEventPriorityAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventSEListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventSEListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventSEListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventSEListAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventSEListAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventSEListAccessor");

// ScriptStruct EndDataObject.EndDataObjectEventPriorityChangeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEventPriorityChangeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEventPriorityChangeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEventPriorityChangeAccessor");
static_assert(sizeof(FEndDataObjectEventPriorityChangeAccessor) == 0x000020, "Wrong size on FEndDataObjectEventPriorityChangeAccessor");

// ScriptStruct EndDataObject.EndDataObjectEventPriorityDistanceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEventPriorityDistanceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEventPriorityDistanceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEventPriorityDistanceAccessor");
static_assert(sizeof(FEndDataObjectEventPriorityDistanceAccessor) == 0x000020, "Wrong size on FEndDataObjectEventPriorityDistanceAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlayLogAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlayLogAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlayLogAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlayLogAccessor");
static_assert(sizeof(FEndDataObjectPlayLogAccessor) == 0x000020, "Wrong size on FEndDataObjectPlayLogAccessor");

// ScriptStruct EndDataObject.EndDataObjectEventPriorityOverrideAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectEventPriorityOverrideAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectEventPriorityOverrideAccessor) == 0x000008, "Wrong alignment on FEndDataObjectEventPriorityOverrideAccessor");
static_assert(sizeof(FEndDataObjectEventPriorityOverrideAccessor) == 0x000020, "Wrong size on FEndDataObjectEventPriorityOverrideAccessor");

// ScriptStruct EndDataObject.EndDataTableResidentObjectLayout
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableResidentObjectLayout final : public FEndDataTableRowBase
{
public:
	uint32                                        UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Name;                                              // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LocationId;                                        // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableResidentObjectLayout) == 0x000008, "Wrong alignment on FEndDataTableResidentObjectLayout");
static_assert(sizeof(FEndDataTableResidentObjectLayout) == 0x000020, "Wrong size on FEndDataTableResidentObjectLayout");
static_assert(offsetof(FEndDataTableResidentObjectLayout, UniqueIndex) == 0x000008, "Member 'FEndDataTableResidentObjectLayout::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObjectLayout, Name) == 0x00000C, "Member 'FEndDataTableResidentObjectLayout::Name' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObjectLayout, LocationId) == 0x000014, "Member 'FEndDataTableResidentObjectLayout::LocationId' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectExclusionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectExclusionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectExclusionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectExclusionAccessor");
static_assert(sizeof(FEndDataObjectExclusionAccessor) == 0x000020, "Wrong size on FEndDataObjectExclusionAccessor");

// ScriptStruct EndDataObject.EndDataObjectRecommendedLevelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectRecommendedLevelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectRecommendedLevelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectRecommendedLevelAccessor");
static_assert(sizeof(FEndDataObjectRecommendedLevelAccessor) == 0x000020, "Wrong size on FEndDataObjectRecommendedLevelAccessor");

// ScriptStruct EndDataObject.EndDataObjectFavoritePointFlagAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectFavoritePointFlagAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectFavoritePointFlagAccessor) == 0x000008, "Wrong alignment on FEndDataObjectFavoritePointFlagAccessor");
static_assert(sizeof(FEndDataObjectFavoritePointFlagAccessor) == 0x000020, "Wrong size on FEndDataObjectFavoritePointFlagAccessor");

// ScriptStruct EndDataObject.EndDataObjectFieldTipsAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectFieldTipsAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectFieldTipsAccessor) == 0x000008, "Wrong alignment on FEndDataObjectFieldTipsAccessor");
static_assert(sizeof(FEndDataObjectFieldTipsAccessor) == 0x000020, "Wrong size on FEndDataObjectFieldTipsAccessor");

// ScriptStruct EndDataObject.EndDataObjectPushButtonActionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPushButtonActionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPushButtonActionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPushButtonActionAccessor");
static_assert(sizeof(FEndDataObjectPushButtonActionAccessor) == 0x000020, "Wrong size on FEndDataObjectPushButtonActionAccessor");

// ScriptStruct EndDataObject.EndDataObjectFootAttributeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectFootAttributeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectFootAttributeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectFootAttributeAccessor");
static_assert(sizeof(FEndDataObjectFootAttributeAccessor) == 0x000020, "Wrong size on FEndDataObjectFootAttributeAccessor");

// ScriptStruct EndDataObject.EndDataTableSkillEffectTextInfo
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableSkillEffectTextInfo final : public FEndDataTableRowBase
{
public:
	class FString                                 TitleText;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 HelpText;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SortValue;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableSkillEffectTextInfo) == 0x000008, "Wrong alignment on FEndDataTableSkillEffectTextInfo");
static_assert(sizeof(FEndDataTableSkillEffectTextInfo) == 0x000030, "Wrong size on FEndDataTableSkillEffectTextInfo");
static_assert(offsetof(FEndDataTableSkillEffectTextInfo, TitleText) == 0x000008, "Member 'FEndDataTableSkillEffectTextInfo::TitleText' has a wrong offset!");
static_assert(offsetof(FEndDataTableSkillEffectTextInfo, HelpText) == 0x000018, "Member 'FEndDataTableSkillEffectTextInfo::HelpText' has a wrong offset!");
static_assert(offsetof(FEndDataTableSkillEffectTextInfo, SortValue) == 0x000028, "Member 'FEndDataTableSkillEffectTextInfo::SortValue' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectFootBGMSetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectFootBGMSetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectFootBGMSetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectFootBGMSetAccessor");
static_assert(sizeof(FEndDataObjectFootBGMSetAccessor) == 0x000020, "Wrong size on FEndDataObjectFootBGMSetAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlayerTableAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlayerTableAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlayerTableAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlayerTableAccessor");
static_assert(sizeof(FEndDataObjectPlayerTableAccessor) == 0x000020, "Wrong size on FEndDataObjectPlayerTableAccessor");

// ScriptStruct EndDataObject.EndDataObjectForceFeedbackAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectForceFeedbackAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectForceFeedbackAccessor) == 0x000008, "Wrong alignment on FEndDataObjectForceFeedbackAccessor");
static_assert(sizeof(FEndDataObjectForceFeedbackAccessor) == 0x000020, "Wrong size on FEndDataObjectForceFeedbackAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboCaptureBalloon
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableChocoboCaptureBalloon final : public FEndDataTableRowBase
{
public:
	float                                         SmallTime;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LargeTaime;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Caution;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SmallAddTime;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GroupId;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboCaptureBalloon) == 0x000008, "Wrong alignment on FEndDataTableChocoboCaptureBalloon");
static_assert(sizeof(FEndDataTableChocoboCaptureBalloon) == 0x000020, "Wrong size on FEndDataTableChocoboCaptureBalloon");
static_assert(offsetof(FEndDataTableChocoboCaptureBalloon, SmallTime) == 0x000008, "Member 'FEndDataTableChocoboCaptureBalloon::SmallTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureBalloon, LargeTaime) == 0x00000C, "Member 'FEndDataTableChocoboCaptureBalloon::LargeTaime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureBalloon, Caution) == 0x000010, "Member 'FEndDataTableChocoboCaptureBalloon::Caution' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureBalloon, SmallAddTime) == 0x000014, "Member 'FEndDataTableChocoboCaptureBalloon::SmallAddTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureBalloon, GroupId) == 0x000018, "Member 'FEndDataTableChocoboCaptureBalloon::GroupId' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectGambitFortCharacterParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectGambitFortCharacterParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectGambitFortCharacterParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectGambitFortCharacterParameterAccessor");
static_assert(sizeof(FEndDataObjectGambitFortCharacterParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectGambitFortCharacterParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectTextGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTextGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTextGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTextGroupAccessor");
static_assert(sizeof(FEndDataObjectTextGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectTextGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectGambitFortCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectGambitFortCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectGambitFortCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectGambitFortCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectGambitFortCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectGambitFortCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataTableWheelieResetlLocation
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableWheelieResetlLocation final : public FEndDataTableRowBase
{
public:
	class FName                                   ResetPoint;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableWheelieResetlLocation) == 0x000008, "Wrong alignment on FEndDataTableWheelieResetlLocation");
static_assert(sizeof(FEndDataTableWheelieResetlLocation) == 0x000010, "Wrong size on FEndDataTableWheelieResetlLocation");
static_assert(offsetof(FEndDataTableWheelieResetlLocation, ResetPoint) == 0x000008, "Member 'FEndDataTableWheelieResetlLocation::ResetPoint' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectGambitFortGambitActionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectGambitFortGambitActionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectGambitFortGambitActionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectGambitFortGambitActionAccessor");
static_assert(sizeof(FEndDataObjectGambitFortGambitActionAccessor) == 0x000020, "Wrong size on FEndDataObjectGambitFortGambitActionAccessor");

// ScriptStruct EndDataObject.EndDataObjectResidentObjectLayoutAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResidentObjectLayoutAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResidentObjectLayoutAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResidentObjectLayoutAccessor");
static_assert(sizeof(FEndDataObjectResidentObjectLayoutAccessor) == 0x000020, "Wrong size on FEndDataObjectResidentObjectLayoutAccessor");

// ScriptStruct EndDataObject.EndDataObjectGambitFortGambitActionNeedsAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectGambitFortGambitActionNeedsAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectGambitFortGambitActionNeedsAccessor) == 0x000008, "Wrong alignment on FEndDataObjectGambitFortGambitActionNeedsAccessor");
static_assert(sizeof(FEndDataObjectGambitFortGambitActionNeedsAccessor) == 0x000020, "Wrong size on FEndDataObjectGambitFortGambitActionNeedsAccessor");

// ScriptStruct EndDataObject.EndDataObjectGambitFortGambitAIPresetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectGambitFortGambitAIPresetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectGambitFortGambitAIPresetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectGambitFortGambitAIPresetAccessor");
static_assert(sizeof(FEndDataObjectGambitFortGambitAIPresetAccessor) == 0x000020, "Wrong size on FEndDataObjectGambitFortGambitAIPresetAccessor");

// ScriptStruct EndDataObject.EndDataObjectTreasureSpecAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTreasureSpecAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTreasureSpecAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTreasureSpecAccessor");
static_assert(sizeof(FEndDataObjectTreasureSpecAccessor) == 0x000020, "Wrong size on FEndDataObjectTreasureSpecAccessor");

// ScriptStruct EndDataObject.EndDataObjectGambitFortGambitConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectGambitFortGambitConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectGambitFortGambitConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectGambitFortGambitConditionAccessor");
static_assert(sizeof(FEndDataObjectGambitFortGambitConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectGambitFortGambitConditionAccessor");

// ScriptStruct EndDataObject.EndDataObjectGambitFortIconPriorityAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectGambitFortIconPriorityAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectGambitFortIconPriorityAccessor) == 0x000008, "Wrong alignment on FEndDataObjectGambitFortIconPriorityAccessor");
static_assert(sizeof(FEndDataObjectGambitFortIconPriorityAccessor) == 0x000020, "Wrong size on FEndDataObjectGambitFortIconPriorityAccessor");

// ScriptStruct EndDataObject.EndDataObjectTargetPointListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTargetPointListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTargetPointListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTargetPointListAccessor");
static_assert(sizeof(FEndDataObjectTargetPointListAccessor) == 0x000020, "Wrong size on FEndDataObjectTargetPointListAccessor");

// ScriptStruct EndDataObject.EndDataTableCharaSpecUseList
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableCharaSpecUseList final : public FEndDataTableRowBase
{
public:
	class FName                                   UseCharaSpec;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCharaSpecUseList) == 0x000008, "Wrong alignment on FEndDataTableCharaSpecUseList");
static_assert(sizeof(FEndDataTableCharaSpecUseList) == 0x000010, "Wrong size on FEndDataTableCharaSpecUseList");
static_assert(offsetof(FEndDataTableCharaSpecUseList, UseCharaSpec) == 0x000008, "Member 'FEndDataTableCharaSpecUseList::UseCharaSpec' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectGambitFortLifeLineAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectGambitFortLifeLineAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectGambitFortLifeLineAccessor) == 0x000008, "Wrong alignment on FEndDataObjectGambitFortLifeLineAccessor");
static_assert(sizeof(FEndDataObjectGambitFortLifeLineAccessor) == 0x000020, "Wrong size on FEndDataObjectGambitFortLifeLineAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboCraftLocationGroup
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableChocoboCraftLocationGroup final : public FEndDataTableRowBase
{
public:
	class FName                                   TargetHub;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   QuestSpline;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   QuestSplineLevel;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Residue_Array;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ResidueDiscoverDistance_Array;                     // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResidueDiscoverTrigger_Array;                      // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResidueDiscoverStoryFlag_Array;                    // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboCraftLocationGroup) == 0x000008, "Wrong alignment on FEndDataTableChocoboCraftLocationGroup");
static_assert(sizeof(FEndDataTableChocoboCraftLocationGroup) == 0x000060, "Wrong size on FEndDataTableChocoboCraftLocationGroup");
static_assert(offsetof(FEndDataTableChocoboCraftLocationGroup, TargetHub) == 0x000008, "Member 'FEndDataTableChocoboCraftLocationGroup::TargetHub' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationGroup, QuestSpline) == 0x000010, "Member 'FEndDataTableChocoboCraftLocationGroup::QuestSpline' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationGroup, QuestSplineLevel) == 0x000018, "Member 'FEndDataTableChocoboCraftLocationGroup::QuestSplineLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationGroup, Residue_Array) == 0x000020, "Member 'FEndDataTableChocoboCraftLocationGroup::Residue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationGroup, ResidueDiscoverDistance_Array) == 0x000030, "Member 'FEndDataTableChocoboCraftLocationGroup::ResidueDiscoverDistance_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationGroup, ResidueDiscoverTrigger_Array) == 0x000040, "Member 'FEndDataTableChocoboCraftLocationGroup::ResidueDiscoverTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationGroup, ResidueDiscoverStoryFlag_Array) == 0x000050, "Member 'FEndDataTableChocoboCraftLocationGroup::ResidueDiscoverStoryFlag_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectGambitFortLocationParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectGambitFortLocationParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectGambitFortLocationParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectGambitFortLocationParameterAccessor");
static_assert(sizeof(FEndDataObjectGambitFortLocationParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectGambitFortLocationParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectResidentObjectActorAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResidentObjectActorAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResidentObjectActorAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResidentObjectActorAccessor");
static_assert(sizeof(FEndDataObjectResidentObjectActorAccessor) == 0x000020, "Wrong size on FEndDataObjectResidentObjectActorAccessor");

// ScriptStruct EndDataObject.EndDataObjectGambitFortNestParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectGambitFortNestParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectGambitFortNestParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectGambitFortNestParameterAccessor");
static_assert(sizeof(FEndDataObjectGambitFortNestParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectGambitFortNestParameterAccessor");

// ScriptStruct EndDataObject.EndDataTableWorldItemLotteryTable
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableWorldItemLotteryTable final : public FEndDataTableRowBase
{
public:
	uint8                                         BranchCondition;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BranchOperator;                                    // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BranchValue;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BranchToLotteryTableID;                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RewardID_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Rarity_Array;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 WinningRate_Array;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableWorldItemLotteryTable) == 0x000008, "Wrong alignment on FEndDataTableWorldItemLotteryTable");
static_assert(sizeof(FEndDataTableWorldItemLotteryTable) == 0x000048, "Wrong size on FEndDataTableWorldItemLotteryTable");
static_assert(offsetof(FEndDataTableWorldItemLotteryTable, BranchCondition) == 0x000008, "Member 'FEndDataTableWorldItemLotteryTable::BranchCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemLotteryTable, BranchOperator) == 0x000009, "Member 'FEndDataTableWorldItemLotteryTable::BranchOperator' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemLotteryTable, BranchValue) == 0x00000C, "Member 'FEndDataTableWorldItemLotteryTable::BranchValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemLotteryTable, BranchToLotteryTableID) == 0x000010, "Member 'FEndDataTableWorldItemLotteryTable::BranchToLotteryTableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemLotteryTable, RewardID_Array) == 0x000018, "Member 'FEndDataTableWorldItemLotteryTable::RewardID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemLotteryTable, Rarity_Array) == 0x000028, "Member 'FEndDataTableWorldItemLotteryTable::Rarity_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemLotteryTable, WinningRate_Array) == 0x000038, "Member 'FEndDataTableWorldItemLotteryTable::WinningRate_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectHandlePuzzleParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectHandlePuzzleParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectHandlePuzzleParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectHandlePuzzleParameterAccessor");
static_assert(sizeof(FEndDataObjectHandlePuzzleParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectHandlePuzzleParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectRewardAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectRewardAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectRewardAccessor) == 0x000008, "Wrong alignment on FEndDataObjectRewardAccessor");
static_assert(sizeof(FEndDataObjectRewardAccessor) == 0x000020, "Wrong size on FEndDataObjectRewardAccessor");

// ScriptStruct EndDataObject.EndDataObjectHintAnimalAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectHintAnimalAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectHintAnimalAccessor) == 0x000008, "Wrong alignment on FEndDataObjectHintAnimalAccessor");
static_assert(sizeof(FEndDataObjectHintAnimalAccessor) == 0x000020, "Wrong size on FEndDataObjectHintAnimalAccessor");

// ScriptStruct EndDataObject.EndDataObjectHintAnimalGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectHintAnimalGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectHintAnimalGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectHintAnimalGroupAccessor");
static_assert(sizeof(FEndDataObjectHintAnimalGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectHintAnimalGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectResidentStateChangeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResidentStateChangeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResidentStateChangeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResidentStateChangeAccessor");
static_assert(sizeof(FEndDataObjectResidentStateChangeAccessor) == 0x000020, "Wrong size on FEndDataObjectResidentStateChangeAccessor");

// ScriptStruct EndDataObject.EndDataObjectHintAnimalLayoutAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectHintAnimalLayoutAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectHintAnimalLayoutAccessor) == 0x000008, "Wrong alignment on FEndDataObjectHintAnimalLayoutAccessor");
static_assert(sizeof(FEndDataObjectHintAnimalLayoutAccessor) == 0x000020, "Wrong size on FEndDataObjectHintAnimalLayoutAccessor");

// ScriptStruct EndDataObject.EndDataObjectHintAnimalMoveAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectHintAnimalMoveAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectHintAnimalMoveAccessor) == 0x000008, "Wrong alignment on FEndDataObjectHintAnimalMoveAccessor");
static_assert(sizeof(FEndDataObjectHintAnimalMoveAccessor) == 0x000020, "Wrong size on FEndDataObjectHintAnimalMoveAccessor");

// ScriptStruct EndDataObject.EndDataObjectResidentBattleConditionTriggerGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResidentBattleConditionTriggerGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResidentBattleConditionTriggerGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResidentBattleConditionTriggerGroupAccessor");
static_assert(sizeof(FEndDataObjectResidentBattleConditionTriggerGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectResidentBattleConditionTriggerGroupAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboCraftCommonParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChocoboCraftCommonParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ParamString;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ParamFloat;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ParamInt;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboCraftCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableChocoboCraftCommonParameter");
static_assert(sizeof(FEndDataTableChocoboCraftCommonParameter) == 0x000018, "Wrong size on FEndDataTableChocoboCraftCommonParameter");
static_assert(offsetof(FEndDataTableChocoboCraftCommonParameter, ParamString) == 0x000008, "Member 'FEndDataTableChocoboCraftCommonParameter::ParamString' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftCommonParameter, ParamFloat) == 0x000010, "Member 'FEndDataTableChocoboCraftCommonParameter::ParamFloat' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftCommonParameter, ParamInt) == 0x000014, "Member 'FEndDataTableChocoboCraftCommonParameter::ParamInt' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectHubAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectHubAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectHubAccessor) == 0x000008, "Wrong alignment on FEndDataObjectHubAccessor");
static_assert(sizeof(FEndDataObjectHubAccessor) == 0x000020, "Wrong size on FEndDataObjectHubAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceCommonParameter
// 0x0100 (0x0108 - 0x0008)
struct FEndDataTableChocoboRaceCommonParameter final : public FEndDataTableRowBase
{
public:
	float                                         SteeringRate;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BumpSpeedChocobo;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FrontBumpDurationChocobo;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SideBumpDurationChocobo;                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BackBumpDurationChocobo;                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FrontBumpReduceRateChocobo;                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SideBumpReduceRateChocobo;                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BackBumpReduceRateChocobo;                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BumpSpeedWall;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FrontBumpDurationWall;                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SideBumpDurationWall;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BackBumpDurationWall;                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FrontBumpReduceRateWall;                           // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SideBumpReduceRateWall;                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BackBumpReduceRateWall;                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurnSpeedMax;                                 // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurnSpeedMin;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurnSpeedNeutral;                             // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurnSpeedAcceleration;                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftStartTime;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReturnCourseTime;                                  // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurboLv1Duration;                             // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurboLv1SuccessValue;                         // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurboLv1DashRate;                             // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurboLv2Duration;                             // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurboLv2SuccessValue;                         // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurboLv2DashRate;                             // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurboAddNeutral;                              // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurboAddInner;                                // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DriftTurboAddOuter;                                // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RocketStartInputTime;                              // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RocketStartInputRange;                             // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RocketStartDuration;                               // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RocketStartDashRate;                               // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RocketStartAccelRate;                              // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NormalDashDuration;                                // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NormalDashRate;                                    // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NormalDashAccelRate;                               // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GimmcikDashDuration;                               // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GimmickDashRate;                                   // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GimmickDashAccelRate;                              // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GimmickDashAngleLimit;                             // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TrampolineJumpTurnSpeed;                           // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CourseNameDispTime;                                // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ItemSpeedUpValue0;                                 // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ItemSpeedUpValue1;                                 // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          SpeedUpItemStockMax;                               // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          SubSpeedUpItem0;                                   // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          SubSpeedUpItem1;                                   // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          SubSpeedUpItem2;                                   // 0x00C3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DashStockMaxNum;                                   // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ItemAbilityUpValue;                                // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NpcCollisionAdjustRate;                            // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartGateHideTime;                                 // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AutoAbilityGaugeValue;                             // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NpcAutoAbilityGaugeValue;                          // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GravityAdjustRateMin;                              // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GravityAdjustRateMax;                              // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NpcAbilituUseRange;                                // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DisableNpcAbilityUseArea;                          // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NpcSparkUseRangeMin;                               // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NpcSparkUseRangeMax;                               // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SkillMinDuration;                                  // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SlopeDegree;                                       // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NpcAccelSuppressionTime;                           // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeKeeperSpeedMaxRate;                            // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboRaceCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceCommonParameter");
static_assert(sizeof(FEndDataTableChocoboRaceCommonParameter) == 0x000108, "Wrong size on FEndDataTableChocoboRaceCommonParameter");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SteeringRate) == 0x000008, "Member 'FEndDataTableChocoboRaceCommonParameter::SteeringRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, BumpSpeedChocobo) == 0x00000C, "Member 'FEndDataTableChocoboRaceCommonParameter::BumpSpeedChocobo' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, FrontBumpDurationChocobo) == 0x000010, "Member 'FEndDataTableChocoboRaceCommonParameter::FrontBumpDurationChocobo' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SideBumpDurationChocobo) == 0x000014, "Member 'FEndDataTableChocoboRaceCommonParameter::SideBumpDurationChocobo' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, BackBumpDurationChocobo) == 0x000018, "Member 'FEndDataTableChocoboRaceCommonParameter::BackBumpDurationChocobo' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, FrontBumpReduceRateChocobo) == 0x00001C, "Member 'FEndDataTableChocoboRaceCommonParameter::FrontBumpReduceRateChocobo' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SideBumpReduceRateChocobo) == 0x000020, "Member 'FEndDataTableChocoboRaceCommonParameter::SideBumpReduceRateChocobo' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, BackBumpReduceRateChocobo) == 0x000024, "Member 'FEndDataTableChocoboRaceCommonParameter::BackBumpReduceRateChocobo' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, BumpSpeedWall) == 0x000028, "Member 'FEndDataTableChocoboRaceCommonParameter::BumpSpeedWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, FrontBumpDurationWall) == 0x00002C, "Member 'FEndDataTableChocoboRaceCommonParameter::FrontBumpDurationWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SideBumpDurationWall) == 0x000030, "Member 'FEndDataTableChocoboRaceCommonParameter::SideBumpDurationWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, BackBumpDurationWall) == 0x000034, "Member 'FEndDataTableChocoboRaceCommonParameter::BackBumpDurationWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, FrontBumpReduceRateWall) == 0x000038, "Member 'FEndDataTableChocoboRaceCommonParameter::FrontBumpReduceRateWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SideBumpReduceRateWall) == 0x00003C, "Member 'FEndDataTableChocoboRaceCommonParameter::SideBumpReduceRateWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, BackBumpReduceRateWall) == 0x000040, "Member 'FEndDataTableChocoboRaceCommonParameter::BackBumpReduceRateWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurnSpeedMax) == 0x000044, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurnSpeedMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurnSpeedMin) == 0x000048, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurnSpeedMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurnSpeedNeutral) == 0x00004C, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurnSpeedNeutral' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurnSpeedAcceleration) == 0x000050, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurnSpeedAcceleration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftStartTime) == 0x000054, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftStartTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, ReturnCourseTime) == 0x000058, "Member 'FEndDataTableChocoboRaceCommonParameter::ReturnCourseTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurboLv1Duration) == 0x00005C, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurboLv1Duration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurboLv1SuccessValue) == 0x000060, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurboLv1SuccessValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurboLv1DashRate) == 0x000064, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurboLv1DashRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurboLv2Duration) == 0x000068, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurboLv2Duration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurboLv2SuccessValue) == 0x00006C, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurboLv2SuccessValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurboLv2DashRate) == 0x000070, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurboLv2DashRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurboAddNeutral) == 0x000074, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurboAddNeutral' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurboAddInner) == 0x000078, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurboAddInner' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DriftTurboAddOuter) == 0x00007C, "Member 'FEndDataTableChocoboRaceCommonParameter::DriftTurboAddOuter' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, RocketStartInputTime) == 0x000080, "Member 'FEndDataTableChocoboRaceCommonParameter::RocketStartInputTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, RocketStartInputRange) == 0x000084, "Member 'FEndDataTableChocoboRaceCommonParameter::RocketStartInputRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, RocketStartDuration) == 0x000088, "Member 'FEndDataTableChocoboRaceCommonParameter::RocketStartDuration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, RocketStartDashRate) == 0x00008C, "Member 'FEndDataTableChocoboRaceCommonParameter::RocketStartDashRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, RocketStartAccelRate) == 0x000090, "Member 'FEndDataTableChocoboRaceCommonParameter::RocketStartAccelRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, NormalDashDuration) == 0x000094, "Member 'FEndDataTableChocoboRaceCommonParameter::NormalDashDuration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, NormalDashRate) == 0x000098, "Member 'FEndDataTableChocoboRaceCommonParameter::NormalDashRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, NormalDashAccelRate) == 0x00009C, "Member 'FEndDataTableChocoboRaceCommonParameter::NormalDashAccelRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, GimmcikDashDuration) == 0x0000A0, "Member 'FEndDataTableChocoboRaceCommonParameter::GimmcikDashDuration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, GimmickDashRate) == 0x0000A4, "Member 'FEndDataTableChocoboRaceCommonParameter::GimmickDashRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, GimmickDashAccelRate) == 0x0000A8, "Member 'FEndDataTableChocoboRaceCommonParameter::GimmickDashAccelRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, GimmickDashAngleLimit) == 0x0000AC, "Member 'FEndDataTableChocoboRaceCommonParameter::GimmickDashAngleLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, TrampolineJumpTurnSpeed) == 0x0000B0, "Member 'FEndDataTableChocoboRaceCommonParameter::TrampolineJumpTurnSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, CourseNameDispTime) == 0x0000B4, "Member 'FEndDataTableChocoboRaceCommonParameter::CourseNameDispTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, ItemSpeedUpValue0) == 0x0000B8, "Member 'FEndDataTableChocoboRaceCommonParameter::ItemSpeedUpValue0' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, ItemSpeedUpValue1) == 0x0000BC, "Member 'FEndDataTableChocoboRaceCommonParameter::ItemSpeedUpValue1' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SpeedUpItemStockMax) == 0x0000C0, "Member 'FEndDataTableChocoboRaceCommonParameter::SpeedUpItemStockMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SubSpeedUpItem0) == 0x0000C1, "Member 'FEndDataTableChocoboRaceCommonParameter::SubSpeedUpItem0' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SubSpeedUpItem1) == 0x0000C2, "Member 'FEndDataTableChocoboRaceCommonParameter::SubSpeedUpItem1' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SubSpeedUpItem2) == 0x0000C3, "Member 'FEndDataTableChocoboRaceCommonParameter::SubSpeedUpItem2' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DashStockMaxNum) == 0x0000C4, "Member 'FEndDataTableChocoboRaceCommonParameter::DashStockMaxNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, ItemAbilityUpValue) == 0x0000C8, "Member 'FEndDataTableChocoboRaceCommonParameter::ItemAbilityUpValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, NpcCollisionAdjustRate) == 0x0000CC, "Member 'FEndDataTableChocoboRaceCommonParameter::NpcCollisionAdjustRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, StartGateHideTime) == 0x0000D0, "Member 'FEndDataTableChocoboRaceCommonParameter::StartGateHideTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, AutoAbilityGaugeValue) == 0x0000D4, "Member 'FEndDataTableChocoboRaceCommonParameter::AutoAbilityGaugeValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, NpcAutoAbilityGaugeValue) == 0x0000D8, "Member 'FEndDataTableChocoboRaceCommonParameter::NpcAutoAbilityGaugeValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, GravityAdjustRateMin) == 0x0000DC, "Member 'FEndDataTableChocoboRaceCommonParameter::GravityAdjustRateMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, GravityAdjustRateMax) == 0x0000E0, "Member 'FEndDataTableChocoboRaceCommonParameter::GravityAdjustRateMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, NpcAbilituUseRange) == 0x0000E4, "Member 'FEndDataTableChocoboRaceCommonParameter::NpcAbilituUseRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, DisableNpcAbilityUseArea) == 0x0000E8, "Member 'FEndDataTableChocoboRaceCommonParameter::DisableNpcAbilityUseArea' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, NpcSparkUseRangeMin) == 0x0000EC, "Member 'FEndDataTableChocoboRaceCommonParameter::NpcSparkUseRangeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, NpcSparkUseRangeMax) == 0x0000F0, "Member 'FEndDataTableChocoboRaceCommonParameter::NpcSparkUseRangeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SkillMinDuration) == 0x0000F4, "Member 'FEndDataTableChocoboRaceCommonParameter::SkillMinDuration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, SlopeDegree) == 0x0000F8, "Member 'FEndDataTableChocoboRaceCommonParameter::SlopeDegree' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, NpcAccelSuppressionTime) == 0x0000FC, "Member 'FEndDataTableChocoboRaceCommonParameter::NpcAccelSuppressionTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCommonParameter, TimeKeeperSpeedMaxRate) == 0x000100, "Member 'FEndDataTableChocoboRaceCommonParameter::TimeKeeperSpeedMaxRate' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectHubConfigAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectHubConfigAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectHubConfigAccessor) == 0x000008, "Wrong alignment on FEndDataObjectHubConfigAccessor");
static_assert(sizeof(FEndDataObjectHubConfigAccessor) == 0x000020, "Wrong size on FEndDataObjectHubConfigAccessor");

// ScriptStruct EndDataObject.EndDataObjectResponseAreaAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResponseAreaAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResponseAreaAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResponseAreaAccessor");
static_assert(sizeof(FEndDataObjectResponseAreaAccessor) == 0x000020, "Wrong size on FEndDataObjectResponseAreaAccessor");

// ScriptStruct EndDataObject.EndDataObjectHubGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectHubGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectHubGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectHubGroupAccessor");
static_assert(sizeof(FEndDataObjectHubGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectHubGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectHubStoryListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectHubStoryListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectHubStoryListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectHubStoryListAccessor");
static_assert(sizeof(FEndDataObjectHubStoryListAccessor) == 0x000020, "Wrong size on FEndDataObjectHubStoryListAccessor");

// ScriptStruct EndDataObject.EndDataObjectShootingCoasterHardEnemyDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShootingCoasterHardEnemyDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShootingCoasterHardEnemyDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShootingCoasterHardEnemyDataAccessor");
static_assert(sizeof(FEndDataObjectShootingCoasterHardEnemyDataAccessor) == 0x000020, "Wrong size on FEndDataObjectShootingCoasterHardEnemyDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectIconPriorityDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectIconPriorityDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectIconPriorityDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectIconPriorityDataAccessor");
static_assert(sizeof(FEndDataObjectIconPriorityDataAccessor) == 0x000020, "Wrong size on FEndDataObjectIconPriorityDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectIgnoreSaveDataStackActionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectIgnoreSaveDataStackActionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectIgnoreSaveDataStackActionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectIgnoreSaveDataStackActionAccessor");
static_assert(sizeof(FEndDataObjectIgnoreSaveDataStackActionAccessor) == 0x000020, "Wrong size on FEndDataObjectIgnoreSaveDataStackActionAccessor");

// ScriptStruct EndDataObject.EndDataObjectSafetyStateChangeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSafetyStateChangeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSafetyStateChangeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSafetyStateChangeAccessor");
static_assert(sizeof(FEndDataObjectSafetyStateChangeAccessor) == 0x000020, "Wrong size on FEndDataObjectSafetyStateChangeAccessor");

// ScriptStruct EndDataObject.EndDataObjectInDoorVolumeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectInDoorVolumeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectInDoorVolumeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectInDoorVolumeAccessor");
static_assert(sizeof(FEndDataObjectInDoorVolumeAccessor) == 0x000020, "Wrong size on FEndDataObjectInDoorVolumeAccessor");

// ScriptStruct EndDataObject.EndDataObjectInitialParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectInitialParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectInitialParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectInitialParameterAccessor");
static_assert(sizeof(FEndDataObjectInitialParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectInitialParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectResidentTreasureAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResidentTreasureAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResidentTreasureAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResidentTreasureAccessor");
static_assert(sizeof(FEndDataObjectResidentTreasureAccessor) == 0x000020, "Wrong size on FEndDataObjectResidentTreasureAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceAbilityData
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableChocoboRaceAbilityData final : public FEndDataTableRowBase
{
public:
	float                                         FloatParamter00;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParamter01;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParamter02;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParamter03;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParamter04;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParamter05;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParamter06;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParamter07;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParamter08;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParamter09;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerParameter00;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerParameter01;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerParameter02;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerParameter03;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboRaceAbilityData) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceAbilityData");
static_assert(sizeof(FEndDataTableChocoboRaceAbilityData) == 0x000040, "Wrong size on FEndDataTableChocoboRaceAbilityData");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, FloatParamter00) == 0x000008, "Member 'FEndDataTableChocoboRaceAbilityData::FloatParamter00' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, FloatParamter01) == 0x00000C, "Member 'FEndDataTableChocoboRaceAbilityData::FloatParamter01' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, FloatParamter02) == 0x000010, "Member 'FEndDataTableChocoboRaceAbilityData::FloatParamter02' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, FloatParamter03) == 0x000014, "Member 'FEndDataTableChocoboRaceAbilityData::FloatParamter03' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, FloatParamter04) == 0x000018, "Member 'FEndDataTableChocoboRaceAbilityData::FloatParamter04' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, FloatParamter05) == 0x00001C, "Member 'FEndDataTableChocoboRaceAbilityData::FloatParamter05' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, FloatParamter06) == 0x000020, "Member 'FEndDataTableChocoboRaceAbilityData::FloatParamter06' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, FloatParamter07) == 0x000024, "Member 'FEndDataTableChocoboRaceAbilityData::FloatParamter07' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, FloatParamter08) == 0x000028, "Member 'FEndDataTableChocoboRaceAbilityData::FloatParamter08' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, FloatParamter09) == 0x00002C, "Member 'FEndDataTableChocoboRaceAbilityData::FloatParamter09' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, IntegerParameter00) == 0x000030, "Member 'FEndDataTableChocoboRaceAbilityData::IntegerParameter00' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, IntegerParameter01) == 0x000034, "Member 'FEndDataTableChocoboRaceAbilityData::IntegerParameter01' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, IntegerParameter02) == 0x000038, "Member 'FEndDataTableChocoboRaceAbilityData::IntegerParameter02' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceAbilityData, IntegerParameter03) == 0x00003C, "Member 'FEndDataTableChocoboRaceAbilityData::IntegerParameter03' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectInitPartySetDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectInitPartySetDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectInitPartySetDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectInitPartySetDataAccessor");
static_assert(sizeof(FEndDataObjectInitPartySetDataAccessor) == 0x000020, "Wrong size on FEndDataObjectInitPartySetDataAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceRivalList
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableChocoboRaceRivalList final : public FEndDataTableRowBase
{
public:
	class FName                                   NameID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          DispName;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Rank;                                              // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeOffset;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          ChocoboType;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          RunType;                                           // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          EnableKeepPace;                                    // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   JockeyCharaSpec;                                   // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          HeadPartsIndex;                                    // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          HeadColorIndex;                                    // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          BodyPartsIndex;                                    // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          BodyColorIndex;                                    // 0x0027(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          LegPartsIndex;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          LegColorIndex;                                     // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboRaceRivalList) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceRivalList");
static_assert(sizeof(FEndDataTableChocoboRaceRivalList) == 0x000030, "Wrong size on FEndDataTableChocoboRaceRivalList");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, NameID) == 0x000008, "Member 'FEndDataTableChocoboRaceRivalList::NameID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, DispName) == 0x000010, "Member 'FEndDataTableChocoboRaceRivalList::DispName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, Rank) == 0x000011, "Member 'FEndDataTableChocoboRaceRivalList::Rank' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, TimeOffset) == 0x000014, "Member 'FEndDataTableChocoboRaceRivalList::TimeOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, ChocoboType) == 0x000018, "Member 'FEndDataTableChocoboRaceRivalList::ChocoboType' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, RunType) == 0x000019, "Member 'FEndDataTableChocoboRaceRivalList::RunType' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, EnableKeepPace) == 0x00001A, "Member 'FEndDataTableChocoboRaceRivalList::EnableKeepPace' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, JockeyCharaSpec) == 0x00001C, "Member 'FEndDataTableChocoboRaceRivalList::JockeyCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, HeadPartsIndex) == 0x000024, "Member 'FEndDataTableChocoboRaceRivalList::HeadPartsIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, HeadColorIndex) == 0x000025, "Member 'FEndDataTableChocoboRaceRivalList::HeadColorIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, BodyPartsIndex) == 0x000026, "Member 'FEndDataTableChocoboRaceRivalList::BodyPartsIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, BodyColorIndex) == 0x000027, "Member 'FEndDataTableChocoboRaceRivalList::BodyColorIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, LegPartsIndex) == 0x000028, "Member 'FEndDataTableChocoboRaceRivalList::LegPartsIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRivalList, LegColorIndex) == 0x000029, "Member 'FEndDataTableChocoboRaceRivalList::LegColorIndex' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectInitPlayerParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectInitPlayerParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectInitPlayerParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectInitPlayerParameterAccessor");
static_assert(sizeof(FEndDataObjectInitPlayerParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectInitPlayerParameterAccessor");

// ScriptStruct EndDataObject.EndDataTableCharaSpec
// 0x0140 (0x0148 - 0x0008)
struct FEndDataTableCharaSpec final : public FEndDataTableRowBase
{
public:
	class FString                                 CharaID;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReserveCharaSpec;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NoBattleCharaSpec;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ContentsModel;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           End2AIList_Array;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         EnableCollision;                                   // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         WeightType;                                        // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PhysiqueSize;                                      // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MoveType;                                          // 0x0043(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ScaleMin;                                          // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ScaleMax;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RootMotionTranslationScale;                        // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnimationPlayRate;                                 // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreRagdollPhysics;                              // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimationSetParentFolder;                          // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         GroundAnimationBattlePackIndex;                    // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         GroundAnimationFieldPackIndex;                     // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FlyAnimationBattlePackIndex;                       // 0x0062(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FlyAnimationFieldPackIndex;                        // 0x0063(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OverrideAnimationSetString_Array;                  // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   FootAttributeID;                                   // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SoundCategoryId;                                   // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ContentsSoundSE_Array;                             // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ContentsSoundAutoSE_Array;                         // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 ContentsSoundFootAttributeSE;                      // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ContentSoundVoice_Array;                           // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SoundVoisePack_Array;                              // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SoundVoisePackEnableStoryFlag_Array;               // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ContentsEffect_Array;                              // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           OverrideWeaponSocketNames_Array;                   // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EquipmentCharaSpecList_Array;                      // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 EquipmentDefaultHiddenList_Array;                  // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SharedCharaSpecList_Array;                         // 0x0128(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AnimationSetList_Array;                            // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCharaSpec) == 0x000008, "Wrong alignment on FEndDataTableCharaSpec");
static_assert(sizeof(FEndDataTableCharaSpec) == 0x000148, "Wrong size on FEndDataTableCharaSpec");
static_assert(offsetof(FEndDataTableCharaSpec, CharaID) == 0x000008, "Member 'FEndDataTableCharaSpec::CharaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ReserveCharaSpec) == 0x000018, "Member 'FEndDataTableCharaSpec::ReserveCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, NoBattleCharaSpec) == 0x000020, "Member 'FEndDataTableCharaSpec::NoBattleCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentsModel) == 0x000028, "Member 'FEndDataTableCharaSpec::ContentsModel' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, End2AIList_Array) == 0x000030, "Member 'FEndDataTableCharaSpec::End2AIList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, EnableCollision) == 0x000040, "Member 'FEndDataTableCharaSpec::EnableCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, WeightType) == 0x000041, "Member 'FEndDataTableCharaSpec::WeightType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, PhysiqueSize) == 0x000042, "Member 'FEndDataTableCharaSpec::PhysiqueSize' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, MoveType) == 0x000043, "Member 'FEndDataTableCharaSpec::MoveType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ScaleMin) == 0x000044, "Member 'FEndDataTableCharaSpec::ScaleMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ScaleMax) == 0x000048, "Member 'FEndDataTableCharaSpec::ScaleMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, RootMotionTranslationScale) == 0x00004C, "Member 'FEndDataTableCharaSpec::RootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, AnimationPlayRate) == 0x000050, "Member 'FEndDataTableCharaSpec::AnimationPlayRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, IgnoreRagdollPhysics) == 0x000054, "Member 'FEndDataTableCharaSpec::IgnoreRagdollPhysics' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, AnimationSetParentFolder) == 0x000058, "Member 'FEndDataTableCharaSpec::AnimationSetParentFolder' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, GroundAnimationBattlePackIndex) == 0x000060, "Member 'FEndDataTableCharaSpec::GroundAnimationBattlePackIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, GroundAnimationFieldPackIndex) == 0x000061, "Member 'FEndDataTableCharaSpec::GroundAnimationFieldPackIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, FlyAnimationBattlePackIndex) == 0x000062, "Member 'FEndDataTableCharaSpec::FlyAnimationBattlePackIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, FlyAnimationFieldPackIndex) == 0x000063, "Member 'FEndDataTableCharaSpec::FlyAnimationFieldPackIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, OverrideAnimationSetString_Array) == 0x000068, "Member 'FEndDataTableCharaSpec::OverrideAnimationSetString_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, FootAttributeID) == 0x000078, "Member 'FEndDataTableCharaSpec::FootAttributeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, SoundCategoryId) == 0x000080, "Member 'FEndDataTableCharaSpec::SoundCategoryId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentsSoundSE_Array) == 0x000088, "Member 'FEndDataTableCharaSpec::ContentsSoundSE_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentsSoundAutoSE_Array) == 0x000098, "Member 'FEndDataTableCharaSpec::ContentsSoundAutoSE_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentsSoundFootAttributeSE) == 0x0000A8, "Member 'FEndDataTableCharaSpec::ContentsSoundFootAttributeSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentSoundVoice_Array) == 0x0000B8, "Member 'FEndDataTableCharaSpec::ContentSoundVoice_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, SoundVoisePack_Array) == 0x0000C8, "Member 'FEndDataTableCharaSpec::SoundVoisePack_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, SoundVoisePackEnableStoryFlag_Array) == 0x0000D8, "Member 'FEndDataTableCharaSpec::SoundVoisePackEnableStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentsEffect_Array) == 0x0000E8, "Member 'FEndDataTableCharaSpec::ContentsEffect_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, OverrideWeaponSocketNames_Array) == 0x0000F8, "Member 'FEndDataTableCharaSpec::OverrideWeaponSocketNames_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, EquipmentCharaSpecList_Array) == 0x000108, "Member 'FEndDataTableCharaSpec::EquipmentCharaSpecList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, EquipmentDefaultHiddenList_Array) == 0x000118, "Member 'FEndDataTableCharaSpec::EquipmentDefaultHiddenList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, SharedCharaSpecList_Array) == 0x000128, "Member 'FEndDataTableCharaSpec::SharedCharaSpecList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, AnimationSetList_Array) == 0x000138, "Member 'FEndDataTableCharaSpec::AnimationSetList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectShootingCoasterAllyDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShootingCoasterAllyDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShootingCoasterAllyDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShootingCoasterAllyDataAccessor");
static_assert(sizeof(FEndDataObjectShootingCoasterAllyDataAccessor) == 0x000020, "Wrong size on FEndDataObjectShootingCoasterAllyDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectInterestPointTableAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectInterestPointTableAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectInterestPointTableAccessor) == 0x000008, "Wrong alignment on FEndDataObjectInterestPointTableAccessor");
static_assert(sizeof(FEndDataObjectInterestPointTableAccessor) == 0x000020, "Wrong size on FEndDataObjectInterestPointTableAccessor");

// ScriptStruct EndDataObject.EndDataObjectInventoryListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectInventoryListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectInventoryListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectInventoryListAccessor");
static_assert(sizeof(FEndDataObjectInventoryListAccessor) == 0x000020, "Wrong size on FEndDataObjectInventoryListAccessor");

// ScriptStruct EndDataObject.EndDataObjectShopLayoutObjectAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShopLayoutObjectAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShopLayoutObjectAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShopLayoutObjectAccessor");
static_assert(sizeof(FEndDataObjectShopLayoutObjectAccessor) == 0x000020, "Wrong size on FEndDataObjectShopLayoutObjectAccessor");

// ScriptStruct EndDataObject.EndDataObjectItemAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectItemAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectItemAccessor) == 0x000008, "Wrong alignment on FEndDataObjectItemAccessor");
static_assert(sizeof(FEndDataObjectItemAccessor) == 0x000020, "Wrong size on FEndDataObjectItemAccessor");

// ScriptStruct EndDataObject.EndDataObjectItemAnimalAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectItemAnimalAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectItemAnimalAccessor) == 0x000008, "Wrong alignment on FEndDataObjectItemAnimalAccessor");
static_assert(sizeof(FEndDataObjectItemAnimalAccessor) == 0x000020, "Wrong size on FEndDataObjectItemAnimalAccessor");

// ScriptStruct EndDataObject.EndDataObjectShootingCoasterMiniGameTriggerEventsAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShootingCoasterMiniGameTriggerEventsAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShootingCoasterMiniGameTriggerEventsAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShootingCoasterMiniGameTriggerEventsAccessor");
static_assert(sizeof(FEndDataObjectShootingCoasterMiniGameTriggerEventsAccessor) == 0x000020, "Wrong size on FEndDataObjectShootingCoasterMiniGameTriggerEventsAccessor");

// ScriptStruct EndDataObject.EndDataObjectItemAnimalEscapeRouteAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectItemAnimalEscapeRouteAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectItemAnimalEscapeRouteAccessor) == 0x000008, "Wrong alignment on FEndDataObjectItemAnimalEscapeRouteAccessor");
static_assert(sizeof(FEndDataObjectItemAnimalEscapeRouteAccessor) == 0x000020, "Wrong size on FEndDataObjectItemAnimalEscapeRouteAccessor");

// ScriptStruct EndDataObject.EndDataTableTrophy
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableTrophy final : public FEndDataTableRowBase
{
public:
	int32                                         PlatformID;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Type;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TriggerType;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringParam;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Point;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTrophy) == 0x000008, "Wrong alignment on FEndDataTableTrophy");
static_assert(sizeof(FEndDataTableTrophy) == 0x000030, "Wrong size on FEndDataTableTrophy");
static_assert(offsetof(FEndDataTableTrophy, PlatformID) == 0x000008, "Member 'FEndDataTableTrophy::PlatformID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTrophy, Type) == 0x00000C, "Member 'FEndDataTableTrophy::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableTrophy, TriggerType) == 0x000010, "Member 'FEndDataTableTrophy::TriggerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTrophy, StringParam) == 0x000018, "Member 'FEndDataTableTrophy::StringParam' has a wrong offset!");
static_assert(offsetof(FEndDataTableTrophy, IntParam) == 0x000028, "Member 'FEndDataTableTrophy::IntParam' has a wrong offset!");
static_assert(offsetof(FEndDataTableTrophy, Point) == 0x00002C, "Member 'FEndDataTableTrophy::Point' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectItemAnimalGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectItemAnimalGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectItemAnimalGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectItemAnimalGroupAccessor");
static_assert(sizeof(FEndDataObjectItemAnimalGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectItemAnimalGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectSensorGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSensorGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSensorGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSensorGroupAccessor");
static_assert(sizeof(FEndDataObjectSensorGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectSensorGroupAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceRivalGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChocoboRaceRivalGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           RacerID_Array;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboRaceRivalGroup) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceRivalGroup");
static_assert(sizeof(FEndDataTableChocoboRaceRivalGroup) == 0x000018, "Wrong size on FEndDataTableChocoboRaceRivalGroup");
static_assert(offsetof(FEndDataTableChocoboRaceRivalGroup, RacerID_Array) == 0x000008, "Member 'FEndDataTableChocoboRaceRivalGroup::RacerID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectItemAnimalMotionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectItemAnimalMotionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectItemAnimalMotionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectItemAnimalMotionAccessor");
static_assert(sizeof(FEndDataObjectItemAnimalMotionAccessor) == 0x000020, "Wrong size on FEndDataObjectItemAnimalMotionAccessor");

// ScriptStruct EndDataObject.EndDataObjectItemCraftRecipeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectItemCraftRecipeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectItemCraftRecipeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectItemCraftRecipeAccessor");
static_assert(sizeof(FEndDataObjectItemCraftRecipeAccessor) == 0x000020, "Wrong size on FEndDataObjectItemCraftRecipeAccessor");

// ScriptStruct EndDataObject.EndDataObjectPianoKeyboardBoneAssignAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPianoKeyboardBoneAssignAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPianoKeyboardBoneAssignAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPianoKeyboardBoneAssignAccessor");
static_assert(sizeof(FEndDataObjectPianoKeyboardBoneAssignAccessor) == 0x000020, "Wrong size on FEndDataObjectPianoKeyboardBoneAssignAccessor");

// ScriptStruct EndDataObject.EndDataObjectItemCraftRecipeConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectItemCraftRecipeConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectItemCraftRecipeConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectItemCraftRecipeConditionAccessor");
static_assert(sizeof(FEndDataObjectItemCraftRecipeConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectItemCraftRecipeConditionAccessor");

// ScriptStruct EndDataObject.EndDataObjectItemDropAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectItemDropAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectItemDropAccessor) == 0x000008, "Wrong alignment on FEndDataObjectItemDropAccessor");
static_assert(sizeof(FEndDataObjectItemDropAccessor) == 0x000020, "Wrong size on FEndDataObjectItemDropAccessor");

// ScriptStruct EndDataObject.EndDataObjectStateTriggerAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectStateTriggerAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectStateTriggerAccessor) == 0x000008, "Wrong alignment on FEndDataObjectStateTriggerAccessor");
static_assert(sizeof(FEndDataObjectStateTriggerAccessor) == 0x000020, "Wrong size on FEndDataObjectStateTriggerAccessor");

// ScriptStruct EndDataObject.EndDataObjectItemDropBoxAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectItemDropBoxAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectItemDropBoxAccessor) == 0x000008, "Wrong alignment on FEndDataObjectItemDropBoxAccessor");
static_assert(sizeof(FEndDataObjectItemDropBoxAccessor) == 0x000020, "Wrong size on FEndDataObjectItemDropBoxAccessor");

// ScriptStruct EndDataObject.EndDataObjectJukeBoxAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectJukeBoxAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectJukeBoxAccessor) == 0x000008, "Wrong alignment on FEndDataObjectJukeBoxAccessor");
static_assert(sizeof(FEndDataObjectJukeBoxAccessor) == 0x000020, "Wrong size on FEndDataObjectJukeBoxAccessor");

// ScriptStruct EndDataObject.EndDataObjectPianoScoreInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPianoScoreInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPianoScoreInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPianoScoreInfoAccessor");
static_assert(sizeof(FEndDataObjectPianoScoreInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectPianoScoreInfoAccessor");

// ScriptStruct EndDataObject.EndDataObjectJunonParadeTownSoldierFormationAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectJunonParadeTownSoldierFormationAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectJunonParadeTownSoldierFormationAccessor) == 0x000008, "Wrong alignment on FEndDataObjectJunonParadeTownSoldierFormationAccessor");
static_assert(sizeof(FEndDataObjectJunonParadeTownSoldierFormationAccessor) == 0x000020, "Wrong size on FEndDataObjectJunonParadeTownSoldierFormationAccessor");

// ScriptStruct EndDataObject.EndDataTableResidentTreasure
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableResidentTreasure final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableResidentTreasure) == 0x000008, "Wrong alignment on FEndDataTableResidentTreasure");
static_assert(sizeof(FEndDataTableResidentTreasure) == 0x000010, "Wrong size on FEndDataTableResidentTreasure");
static_assert(offsetof(FEndDataTableResidentTreasure, UniqueIndex) == 0x000008, "Member 'FEndDataTableResidentTreasure::UniqueIndex' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectJunonParadeTownSoldierFormationMatchingAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectJunonParadeTownSoldierFormationMatchingAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectJunonParadeTownSoldierFormationMatchingAccessor) == 0x000008, "Wrong alignment on FEndDataObjectJunonParadeTownSoldierFormationMatchingAccessor");
static_assert(sizeof(FEndDataObjectJunonParadeTownSoldierFormationMatchingAccessor) == 0x000020, "Wrong size on FEndDataObjectJunonParadeTownSoldierFormationMatchingAccessor");

// ScriptStruct EndDataObject.EndDataObjectPianoChordsAssignAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPianoChordsAssignAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPianoChordsAssignAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPianoChordsAssignAccessor");
static_assert(sizeof(FEndDataObjectPianoChordsAssignAccessor) == 0x000020, "Wrong size on FEndDataObjectPianoChordsAssignAccessor");

// ScriptStruct EndDataObject.EndDataObjectLearningSkillAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectLearningSkillAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectLearningSkillAccessor) == 0x000008, "Wrong alignment on FEndDataObjectLearningSkillAccessor");
static_assert(sizeof(FEndDataObjectLearningSkillAccessor) == 0x000020, "Wrong size on FEndDataObjectLearningSkillAccessor");

// ScriptStruct EndDataObject.EndDataObjectLifeSpotInputMiniGameCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectLifeSpotInputMiniGameCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectLifeSpotInputMiniGameCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectLifeSpotInputMiniGameCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectLifeSpotInputMiniGameCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectLifeSpotInputMiniGameCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectStateChangeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectStateChangeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectStateChangeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectStateChangeAccessor");
static_assert(sizeof(FEndDataObjectStateChangeAccessor) == 0x000020, "Wrong size on FEndDataObjectStateChangeAccessor");

// ScriptStruct EndDataObject.EndDataObjectLifeSpotInputMiniGameLocationParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectLifeSpotInputMiniGameLocationParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectLifeSpotInputMiniGameLocationParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectLifeSpotInputMiniGameLocationParameterAccessor");
static_assert(sizeof(FEndDataObjectLifeSpotInputMiniGameLocationParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectLifeSpotInputMiniGameLocationParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectLoadingTipsAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectLoadingTipsAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectLoadingTipsAccessor) == 0x000008, "Wrong alignment on FEndDataObjectLoadingTipsAccessor");
static_assert(sizeof(FEndDataObjectLoadingTipsAccessor) == 0x000020, "Wrong size on FEndDataObjectLoadingTipsAccessor");

// ScriptStruct EndDataObject.EndDataObjectStoryResidentAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectStoryResidentAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectStoryResidentAccessor) == 0x000008, "Wrong alignment on FEndDataObjectStoryResidentAccessor");
static_assert(sizeof(FEndDataObjectStoryResidentAccessor) == 0x000020, "Wrong size on FEndDataObjectStoryResidentAccessor");

// ScriptStruct EndDataObject.EndDataObjectLocationAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectLocationAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectLocationAccessor) == 0x000008, "Wrong alignment on FEndDataObjectLocationAccessor");
static_assert(sizeof(FEndDataObjectLocationAccessor) == 0x000020, "Wrong size on FEndDataObjectLocationAccessor");

// ScriptStruct EndDataObject.EndDataObjectLocationProgrammerAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectLocationProgrammerAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectLocationProgrammerAccessor) == 0x000008, "Wrong alignment on FEndDataObjectLocationProgrammerAccessor");
static_assert(sizeof(FEndDataObjectLocationProgrammerAccessor) == 0x000020, "Wrong size on FEndDataObjectLocationProgrammerAccessor");

// ScriptStruct EndDataObject.EndDataObjectSteeringParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSteeringParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSteeringParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSteeringParameterAccessor");
static_assert(sizeof(FEndDataObjectSteeringParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectSteeringParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectLocationResidentAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectLocationResidentAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectLocationResidentAccessor) == 0x000008, "Wrong alignment on FEndDataObjectLocationResidentAccessor");
static_assert(sizeof(FEndDataObjectLocationResidentAccessor) == 0x000020, "Wrong size on FEndDataObjectLocationResidentAccessor");

// ScriptStruct EndDataObject.EndDataTableSensorGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableSensorGroup final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 IsSensorTypeAvailable_Array;                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableSensorGroup) == 0x000008, "Wrong alignment on FEndDataTableSensorGroup");
static_assert(sizeof(FEndDataTableSensorGroup) == 0x000018, "Wrong size on FEndDataTableSensorGroup");
static_assert(offsetof(FEndDataTableSensorGroup, IsSensorTypeAvailable_Array) == 0x000008, "Member 'FEndDataTableSensorGroup::IsSensorTypeAvailable_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectLocationResidentEnvironmentAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectLocationResidentEnvironmentAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectLocationResidentEnvironmentAccessor) == 0x000008, "Wrong alignment on FEndDataObjectLocationResidentEnvironmentAccessor");
static_assert(sizeof(FEndDataObjectLocationResidentEnvironmentAccessor) == 0x000020, "Wrong size on FEndDataObjectLocationResidentEnvironmentAccessor");

// ScriptStruct EndDataObject.EndDataObjectSkillEffectTextInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSkillEffectTextInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSkillEffectTextInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSkillEffectTextInfoAccessor");
static_assert(sizeof(FEndDataObjectSkillEffectTextInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectSkillEffectTextInfoAccessor");

// ScriptStruct EndDataObject.EndDataObjectLocationWorkAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectLocationWorkAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectLocationWorkAccessor) == 0x000008, "Wrong alignment on FEndDataObjectLocationWorkAccessor");
static_assert(sizeof(FEndDataObjectLocationWorkAccessor) == 0x000020, "Wrong size on FEndDataObjectLocationWorkAccessor");

// ScriptStruct EndDataObject.EndDataObjectMainMenuConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMainMenuConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMainMenuConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMainMenuConditionAccessor");
static_assert(sizeof(FEndDataObjectMainMenuConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectMainMenuConditionAccessor");

// ScriptStruct EndDataObject.EndDataObjectStoryJumpAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectStoryJumpAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectStoryJumpAccessor) == 0x000008, "Wrong alignment on FEndDataObjectStoryJumpAccessor");
static_assert(sizeof(FEndDataObjectStoryJumpAccessor) == 0x000020, "Wrong size on FEndDataObjectStoryJumpAccessor");

// ScriptStruct EndDataObject.EndDataObjectManualAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectManualAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectManualAccessor) == 0x000008, "Wrong alignment on FEndDataObjectManualAccessor");
static_assert(sizeof(FEndDataObjectManualAccessor) == 0x000020, "Wrong size on FEndDataObjectManualAccessor");

// ScriptStruct EndDataObject.EndDataTableTreasure
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableTreasure final : public FEndDataTableRowBase
{
public:
	int32                                         GlobalUniqueIndex;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UniqueIndex;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceUseTreasureSpec;                              // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TreasureSpecId;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RewardID_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   OnOffStateConditionID;                             // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenStateTriggerID;                                // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           GetRewardStateTriggerID_Array;                     // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         ExtendDisableTouchPadFrame;                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CanOpenStateConditionID;                           // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenFailedStateTriggerID;                          // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WorldActorInfoID;                                  // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableTreasure) == 0x000008, "Wrong alignment on FEndDataTableTreasure");
static_assert(sizeof(FEndDataTableTreasure) == 0x000068, "Wrong size on FEndDataTableTreasure");
static_assert(offsetof(FEndDataTableTreasure, GlobalUniqueIndex) == 0x000008, "Member 'FEndDataTableTreasure::GlobalUniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, UniqueIndex) == 0x00000C, "Member 'FEndDataTableTreasure::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, ForceUseTreasureSpec) == 0x00000D, "Member 'FEndDataTableTreasure::ForceUseTreasureSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, TreasureSpecId) == 0x000010, "Member 'FEndDataTableTreasure::TreasureSpecId' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, RewardID_Array) == 0x000018, "Member 'FEndDataTableTreasure::RewardID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, OnOffStateConditionID) == 0x000028, "Member 'FEndDataTableTreasure::OnOffStateConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, OpenStateTriggerID) == 0x000030, "Member 'FEndDataTableTreasure::OpenStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, GetRewardStateTriggerID_Array) == 0x000038, "Member 'FEndDataTableTreasure::GetRewardStateTriggerID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, ExtendDisableTouchPadFrame) == 0x000048, "Member 'FEndDataTableTreasure::ExtendDisableTouchPadFrame' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, CanOpenStateConditionID) == 0x00004C, "Member 'FEndDataTableTreasure::CanOpenStateConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, OpenFailedStateTriggerID) == 0x000054, "Member 'FEndDataTableTreasure::OpenFailedStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasure, WorldActorInfoID) == 0x00005C, "Member 'FEndDataTableTreasure::WorldActorInfoID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectMapIconInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMapIconInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMapIconInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMapIconInfoAccessor");
static_assert(sizeof(FEndDataObjectMapIconInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectMapIconInfoAccessor");

// ScriptStruct EndDataObject.EndDataObjectTalkInsertSettingAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTalkInsertSettingAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTalkInsertSettingAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTalkInsertSettingAccessor");
static_assert(sizeof(FEndDataObjectTalkInsertSettingAccessor) == 0x000020, "Wrong size on FEndDataObjectTalkInsertSettingAccessor");

// ScriptStruct EndDataObject.EndDataObjectMateriaAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMateriaAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMateriaAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMateriaAccessor");
static_assert(sizeof(FEndDataObjectMateriaAccessor) == 0x000020, "Wrong size on FEndDataObjectMateriaAccessor");

// ScriptStruct EndDataObject.EndDataObjectMemoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMemoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMemoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMemoAccessor");
static_assert(sizeof(FEndDataObjectMemoAccessor) == 0x000020, "Wrong size on FEndDataObjectMemoAccessor");

// ScriptStruct EndDataObject.EndDataObjectSubStoryConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSubStoryConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSubStoryConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSubStoryConditionAccessor");
static_assert(sizeof(FEndDataObjectSubStoryConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectSubStoryConditionAccessor");

// ScriptStruct EndDataObject.EndDataObjectMidgarMapLocationPointAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMidgarMapLocationPointAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMidgarMapLocationPointAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMidgarMapLocationPointAccessor");
static_assert(sizeof(FEndDataObjectMidgarMapLocationPointAccessor) == 0x000020, "Wrong size on FEndDataObjectMidgarMapLocationPointAccessor");

// ScriptStruct EndDataObject.EndDataTableShootingGame
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableShootingGame final : public FEndDataTableRowBase
{
public:
	float                                         Timelimit;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FireInterval;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CursolSpeed;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CursolOffsetSpeed;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraOffsetYawLimit;                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraOffsetPitchLimit;                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraOffsetFOV;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CursolShakeOffsetMaxX;                             // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CursolShakeOffsetMinX;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CursolShakeOffsetMaxY;                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CursolShakeOffsetMinY;                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CursolShakeOffsetSpeed;                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnduranceCountDrawTime;                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FailureTime;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FailureShotCount;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SpecialResultScore;                                // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GoldPrize;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         GoldGoalScore;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SilverPrize;                                       // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SilverGoalScore;                                   // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CopperPrize;                                       // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CopperGoalScore;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParticipationPrize;                                // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableShootingGame) == 0x000008, "Wrong alignment on FEndDataTableShootingGame");
static_assert(sizeof(FEndDataTableShootingGame) == 0x000078, "Wrong size on FEndDataTableShootingGame");
static_assert(offsetof(FEndDataTableShootingGame, Timelimit) == 0x000008, "Member 'FEndDataTableShootingGame::Timelimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, FireInterval) == 0x00000C, "Member 'FEndDataTableShootingGame::FireInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CursolSpeed) == 0x000010, "Member 'FEndDataTableShootingGame::CursolSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CursolOffsetSpeed) == 0x000014, "Member 'FEndDataTableShootingGame::CursolOffsetSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CameraOffsetYawLimit) == 0x000018, "Member 'FEndDataTableShootingGame::CameraOffsetYawLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CameraOffsetPitchLimit) == 0x00001C, "Member 'FEndDataTableShootingGame::CameraOffsetPitchLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CameraOffsetFOV) == 0x000020, "Member 'FEndDataTableShootingGame::CameraOffsetFOV' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CursolShakeOffsetMaxX) == 0x000024, "Member 'FEndDataTableShootingGame::CursolShakeOffsetMaxX' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CursolShakeOffsetMinX) == 0x000028, "Member 'FEndDataTableShootingGame::CursolShakeOffsetMinX' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CursolShakeOffsetMaxY) == 0x00002C, "Member 'FEndDataTableShootingGame::CursolShakeOffsetMaxY' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CursolShakeOffsetMinY) == 0x000030, "Member 'FEndDataTableShootingGame::CursolShakeOffsetMinY' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CursolShakeOffsetSpeed) == 0x000034, "Member 'FEndDataTableShootingGame::CursolShakeOffsetSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, EnduranceCountDrawTime) == 0x000038, "Member 'FEndDataTableShootingGame::EnduranceCountDrawTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, FailureTime) == 0x00003C, "Member 'FEndDataTableShootingGame::FailureTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, FailureShotCount) == 0x000040, "Member 'FEndDataTableShootingGame::FailureShotCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, SpecialResultScore) == 0x000044, "Member 'FEndDataTableShootingGame::SpecialResultScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, GoldPrize) == 0x000048, "Member 'FEndDataTableShootingGame::GoldPrize' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, GoldGoalScore) == 0x000050, "Member 'FEndDataTableShootingGame::GoldGoalScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, SilverPrize) == 0x000054, "Member 'FEndDataTableShootingGame::SilverPrize' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, SilverGoalScore) == 0x00005C, "Member 'FEndDataTableShootingGame::SilverGoalScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CopperPrize) == 0x000060, "Member 'FEndDataTableShootingGame::CopperPrize' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, CopperGoalScore) == 0x000068, "Member 'FEndDataTableShootingGame::CopperGoalScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGame, ParticipationPrize) == 0x00006C, "Member 'FEndDataTableShootingGame::ParticipationPrize' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectMiniGameAssetPackerAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMiniGameAssetPackerAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMiniGameAssetPackerAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMiniGameAssetPackerAccessor");
static_assert(sizeof(FEndDataObjectMiniGameAssetPackerAccessor) == 0x000020, "Wrong size on FEndDataObjectMiniGameAssetPackerAccessor");

// ScriptStruct EndDataObject.EndDataObjectStoryDetailInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectStoryDetailInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectStoryDetailInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectStoryDetailInfoAccessor");
static_assert(sizeof(FEndDataObjectStoryDetailInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectStoryDetailInfoAccessor");

// ScriptStruct EndDataObject.EndDataObjectMiniGameRewardWindowAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMiniGameRewardWindowAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMiniGameRewardWindowAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMiniGameRewardWindowAccessor");
static_assert(sizeof(FEndDataObjectMiniGameRewardWindowAccessor) == 0x000020, "Wrong size on FEndDataObjectMiniGameRewardWindowAccessor");

// ScriptStruct EndDataObject.EndDataObjectMiniGameSettingAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMiniGameSettingAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMiniGameSettingAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMiniGameSettingAccessor");
static_assert(sizeof(FEndDataObjectMiniGameSettingAccessor) == 0x000020, "Wrong size on FEndDataObjectMiniGameSettingAccessor");

// ScriptStruct EndDataObject.EndDataObjectTalkCanPlayCharacterStatusAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTalkCanPlayCharacterStatusAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTalkCanPlayCharacterStatusAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTalkCanPlayCharacterStatusAccessor");
static_assert(sizeof(FEndDataObjectTalkCanPlayCharacterStatusAccessor) == 0x000020, "Wrong size on FEndDataObjectTalkCanPlayCharacterStatusAccessor");

// ScriptStruct EndDataObject.EndDataObjectMiniGameTrophyInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMiniGameTrophyInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMiniGameTrophyInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMiniGameTrophyInfoAccessor");
static_assert(sizeof(FEndDataObjectMiniGameTrophyInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectMiniGameTrophyInfoAccessor");

// ScriptStruct EndDataObject.EndDataTableUniqueActionProperty
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTableUniqueActionProperty final : public FEndDataTableRowBase
{
public:
	class FString                                 DamageSequenceID;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 HardModeDamageSequenceID;                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 VfxName;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 VfxPropertyName00;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 VfxPropertyName01;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 VfxPropertyName02;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 VfxPropertyName03;                                 // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 VfxPropertyName04;                                 // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableUniqueActionProperty) == 0x000008, "Wrong alignment on FEndDataTableUniqueActionProperty");
static_assert(sizeof(FEndDataTableUniqueActionProperty) == 0x000088, "Wrong size on FEndDataTableUniqueActionProperty");
static_assert(offsetof(FEndDataTableUniqueActionProperty, DamageSequenceID) == 0x000008, "Member 'FEndDataTableUniqueActionProperty::DamageSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, HardModeDamageSequenceID) == 0x000018, "Member 'FEndDataTableUniqueActionProperty::HardModeDamageSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxName) == 0x000028, "Member 'FEndDataTableUniqueActionProperty::VfxName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxPropertyName00) == 0x000038, "Member 'FEndDataTableUniqueActionProperty::VfxPropertyName00' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxPropertyName01) == 0x000048, "Member 'FEndDataTableUniqueActionProperty::VfxPropertyName01' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxPropertyName02) == 0x000058, "Member 'FEndDataTableUniqueActionProperty::VfxPropertyName02' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxPropertyName03) == 0x000068, "Member 'FEndDataTableUniqueActionProperty::VfxPropertyName03' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxPropertyName04) == 0x000078, "Member 'FEndDataTableUniqueActionProperty::VfxPropertyName04' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectMobAbstractNameAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMobAbstractNameAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMobAbstractNameAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMobAbstractNameAccessor");
static_assert(sizeof(FEndDataObjectMobAbstractNameAccessor) == 0x000020, "Wrong size on FEndDataObjectMobAbstractNameAccessor");

// ScriptStruct EndDataObject.EndDataObjectTreasureAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTreasureAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTreasureAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTreasureAccessor");
static_assert(sizeof(FEndDataObjectTreasureAccessor) == 0x000020, "Wrong size on FEndDataObjectTreasureAccessor");

// ScriptStruct EndDataObject.EndDataObjectMobMotionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMobMotionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMobMotionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMobMotionAccessor");
static_assert(sizeof(FEndDataObjectMobMotionAccessor) == 0x000020, "Wrong size on FEndDataObjectMobMotionAccessor");

// ScriptStruct EndDataObject.EndDataObjectMoogleCaptureLocationParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMoogleCaptureLocationParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMoogleCaptureLocationParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMoogleCaptureLocationParameterAccessor");
static_assert(sizeof(FEndDataObjectMoogleCaptureLocationParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectMoogleCaptureLocationParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectTalkSequenceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTalkSequenceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTalkSequenceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTalkSequenceAccessor");
static_assert(sizeof(FEndDataObjectTalkSequenceAccessor) == 0x000020, "Wrong size on FEndDataObjectTalkSequenceAccessor");

// ScriptStruct EndDataObject.EndDataObjectMoogleCaptureMoogleParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMoogleCaptureMoogleParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMoogleCaptureMoogleParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMoogleCaptureMoogleParameterAccessor");
static_assert(sizeof(FEndDataObjectMoogleCaptureMoogleParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectMoogleCaptureMoogleParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectMultiByteStringAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectMultiByteStringAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectMultiByteStringAccessor) == 0x000008, "Wrong alignment on FEndDataObjectMultiByteStringAccessor");
static_assert(sizeof(FEndDataObjectMultiByteStringAccessor) == 0x000020, "Wrong size on FEndDataObjectMultiByteStringAccessor");

// ScriptStruct EndDataObject.EndDataObjectSummonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSummonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSummonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSummonParameterAccessor");
static_assert(sizeof(FEndDataObjectSummonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectSummonParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectNaviBGMInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectNaviBGMInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectNaviBGMInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectNaviBGMInfoAccessor");
static_assert(sizeof(FEndDataObjectNaviBGMInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectNaviBGMInfoAccessor");

// ScriptStruct EndDataObject.EndDataObjectNaviMapClearLimitedAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectNaviMapClearLimitedAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectNaviMapClearLimitedAccessor) == 0x000008, "Wrong alignment on FEndDataObjectNaviMapClearLimitedAccessor");
static_assert(sizeof(FEndDataObjectNaviMapClearLimitedAccessor) == 0x000020, "Wrong size on FEndDataObjectNaviMapClearLimitedAccessor");

// ScriptStruct EndDataObject.EndDataTableLocation
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableLocation final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           EntryObjectList_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LocationList_Array;                                // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SlotChapterID_Array;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 PositionIndexLocationResident_Array;               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SlotSpecificEntryObject_Array;                     // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           IgnoreObject_Array;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   NextLocation;                                      // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableLocation) == 0x000008, "Wrong alignment on FEndDataTableLocation");
static_assert(sizeof(FEndDataTableLocation) == 0x000070, "Wrong size on FEndDataTableLocation");
static_assert(offsetof(FEndDataTableLocation, EntryObjectList_Array) == 0x000008, "Member 'FEndDataTableLocation::EntryObjectList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, LocationList_Array) == 0x000018, "Member 'FEndDataTableLocation::LocationList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, SlotChapterID_Array) == 0x000028, "Member 'FEndDataTableLocation::SlotChapterID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, PositionIndexLocationResident_Array) == 0x000038, "Member 'FEndDataTableLocation::PositionIndexLocationResident_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, SlotSpecificEntryObject_Array) == 0x000048, "Member 'FEndDataTableLocation::SlotSpecificEntryObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, IgnoreObject_Array) == 0x000058, "Member 'FEndDataTableLocation::IgnoreObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, NextLocation) == 0x000068, "Member 'FEndDataTableLocation::NextLocation' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectNaviMapWrapperAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectNaviMapWrapperAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectNaviMapWrapperAccessor) == 0x000008, "Wrong alignment on FEndDataObjectNaviMapWrapperAccessor");
static_assert(sizeof(FEndDataObjectNaviMapWrapperAccessor) == 0x000020, "Wrong size on FEndDataObjectNaviMapWrapperAccessor");

// ScriptStruct EndDataObject.EndDataObjectObjectActorAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectActorAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectActorAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectActorAccessor");
static_assert(sizeof(FEndDataObjectObjectActorAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectActorAccessor");

// ScriptStruct EndDataObject.EndDataTableInitPartySetData
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableInitPartySetData final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           PlayerTableID_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PartySetPlayerStatus_Array;                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableInitPartySetData) == 0x000008, "Wrong alignment on FEndDataTableInitPartySetData");
static_assert(sizeof(FEndDataTableInitPartySetData) == 0x000028, "Wrong size on FEndDataTableInitPartySetData");
static_assert(offsetof(FEndDataTableInitPartySetData, PlayerTableID_Array) == 0x000008, "Member 'FEndDataTableInitPartySetData::PlayerTableID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPartySetData, PartySetPlayerStatus_Array) == 0x000018, "Member 'FEndDataTableInitPartySetData::PartySetPlayerStatus_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectObjectEnemyAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectEnemyAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectEnemyAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectEnemyAccessor");
static_assert(sizeof(FEndDataObjectObjectEnemyAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectEnemyAccessor");

// ScriptStruct EndDataObject.EndDataObjectObjectEntryAttributeListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectEntryAttributeListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectEntryAttributeListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectEntryAttributeListAccessor");
static_assert(sizeof(FEndDataObjectObjectEntryAttributeListAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectEntryAttributeListAccessor");

// ScriptStruct EndDataObject.EndDataTableMateria
// 0x0140 (0x0148 - 0x0008)
struct FEndDataTableMateria final : public FEndDataTableRowBase
{
public:
	uint8                                         MateriaType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SaleValueLv_Array;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   CharaSpecID;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LinkSrcFlag;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AddAttributeFlag;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AddStatusChangeFlag;                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AddSpecialEffectFlag;                              // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LinkDestFlag;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AttackAdd;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AttackScale;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicAttackAdd;                                    // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicAttackScale;                                  // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DefenseAdd;                                        // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DefenseScale;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicDefenseAdd;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicDefenseScale;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StrengthAdd;                                       // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StrengthScale;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicAdd;                                          // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicScale;                                        // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VitalityAdd;                                       // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VitalityScale;                                     // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SpiritAdd;                                         // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SpiritScale;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LuckAdd;                                           // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LuckScale;                                         // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DexterityAdd;                                      // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DexterityScale;                                    // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HPMaxAdd;                                          // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HPMaxScale;                                        // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MPMaxAdd;                                          // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MPMaxScale;                                        // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CriticalHitRateAdd;                                // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CriticalHitRateScale;                              // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LvMax;                                             // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EffectEnableTypeDisplay;                           // 0x00A5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EffectEnableType;                                  // 0x00A6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A7[0x1];                                       // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MateriaDetailLabel;                                // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 EffectType_Array;                                  // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 EffectValue_Array;                                 // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EffectString_Array;                                // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         EffectDescription_Array;                           // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         LevelUpType;                                       // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ExpNextLv_Array;                                   // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LevelUpItemID_Array;                               // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SummonMateriaLevelUpFlagID_Array;                  // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         StatusChangeProbability;                           // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MovieName;                                         // 0x0134(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BattleCharaSpecID;                                 // 0x013C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableMateria) == 0x000008, "Wrong alignment on FEndDataTableMateria");
static_assert(sizeof(FEndDataTableMateria) == 0x000148, "Wrong size on FEndDataTableMateria");
static_assert(offsetof(FEndDataTableMateria, MateriaType) == 0x000008, "Member 'FEndDataTableMateria::MateriaType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, SaleValueLv_Array) == 0x000010, "Member 'FEndDataTableMateria::SaleValueLv_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, CharaSpecID) == 0x000020, "Member 'FEndDataTableMateria::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LinkSrcFlag) == 0x000028, "Member 'FEndDataTableMateria::LinkSrcFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, AddAttributeFlag) == 0x00002C, "Member 'FEndDataTableMateria::AddAttributeFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, AddStatusChangeFlag) == 0x000030, "Member 'FEndDataTableMateria::AddStatusChangeFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, AddSpecialEffectFlag) == 0x000034, "Member 'FEndDataTableMateria::AddSpecialEffectFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LinkDestFlag) == 0x000038, "Member 'FEndDataTableMateria::LinkDestFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, AttackAdd) == 0x00003C, "Member 'FEndDataTableMateria::AttackAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, AttackScale) == 0x000040, "Member 'FEndDataTableMateria::AttackScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicAttackAdd) == 0x000044, "Member 'FEndDataTableMateria::MagicAttackAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicAttackScale) == 0x000048, "Member 'FEndDataTableMateria::MagicAttackScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, DefenseAdd) == 0x00004C, "Member 'FEndDataTableMateria::DefenseAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, DefenseScale) == 0x000050, "Member 'FEndDataTableMateria::DefenseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicDefenseAdd) == 0x000054, "Member 'FEndDataTableMateria::MagicDefenseAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicDefenseScale) == 0x000058, "Member 'FEndDataTableMateria::MagicDefenseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, StrengthAdd) == 0x00005C, "Member 'FEndDataTableMateria::StrengthAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, StrengthScale) == 0x000060, "Member 'FEndDataTableMateria::StrengthScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicAdd) == 0x000064, "Member 'FEndDataTableMateria::MagicAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicScale) == 0x000068, "Member 'FEndDataTableMateria::MagicScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, VitalityAdd) == 0x00006C, "Member 'FEndDataTableMateria::VitalityAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, VitalityScale) == 0x000070, "Member 'FEndDataTableMateria::VitalityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, SpiritAdd) == 0x000074, "Member 'FEndDataTableMateria::SpiritAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, SpiritScale) == 0x000078, "Member 'FEndDataTableMateria::SpiritScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LuckAdd) == 0x00007C, "Member 'FEndDataTableMateria::LuckAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LuckScale) == 0x000080, "Member 'FEndDataTableMateria::LuckScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, DexterityAdd) == 0x000084, "Member 'FEndDataTableMateria::DexterityAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, DexterityScale) == 0x000088, "Member 'FEndDataTableMateria::DexterityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, HPMaxAdd) == 0x00008C, "Member 'FEndDataTableMateria::HPMaxAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, HPMaxScale) == 0x000090, "Member 'FEndDataTableMateria::HPMaxScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MPMaxAdd) == 0x000094, "Member 'FEndDataTableMateria::MPMaxAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MPMaxScale) == 0x000098, "Member 'FEndDataTableMateria::MPMaxScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, CriticalHitRateAdd) == 0x00009C, "Member 'FEndDataTableMateria::CriticalHitRateAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, CriticalHitRateScale) == 0x0000A0, "Member 'FEndDataTableMateria::CriticalHitRateScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LvMax) == 0x0000A4, "Member 'FEndDataTableMateria::LvMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectEnableTypeDisplay) == 0x0000A5, "Member 'FEndDataTableMateria::EffectEnableTypeDisplay' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectEnableType) == 0x0000A6, "Member 'FEndDataTableMateria::EffectEnableType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MateriaDetailLabel) == 0x0000A8, "Member 'FEndDataTableMateria::MateriaDetailLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectType_Array) == 0x0000B8, "Member 'FEndDataTableMateria::EffectType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectValue_Array) == 0x0000C8, "Member 'FEndDataTableMateria::EffectValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectString_Array) == 0x0000D8, "Member 'FEndDataTableMateria::EffectString_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectDescription_Array) == 0x0000E8, "Member 'FEndDataTableMateria::EffectDescription_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LevelUpType) == 0x0000F8, "Member 'FEndDataTableMateria::LevelUpType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, ExpNextLv_Array) == 0x000100, "Member 'FEndDataTableMateria::ExpNextLv_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LevelUpItemID_Array) == 0x000110, "Member 'FEndDataTableMateria::LevelUpItemID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, SummonMateriaLevelUpFlagID_Array) == 0x000120, "Member 'FEndDataTableMateria::SummonMateriaLevelUpFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, StatusChangeProbability) == 0x000130, "Member 'FEndDataTableMateria::StatusChangeProbability' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MovieName) == 0x000134, "Member 'FEndDataTableMateria::MovieName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, BattleCharaSpecID) == 0x00013C, "Member 'FEndDataTableMateria::BattleCharaSpecID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectObjectGroupMobAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectGroupMobAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectGroupMobAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectGroupMobAccessor");
static_assert(sizeof(FEndDataObjectObjectGroupMobAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectGroupMobAccessor");

// ScriptStruct EndDataObject.EndDataObjectObjectMobAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectMobAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectMobAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectMobAccessor");
static_assert(sizeof(FEndDataObjectObjectMobAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectMobAccessor");

// ScriptStruct EndDataObject.EndDataTablePianoSound
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTablePianoSound final : public FEndDataTableRowBase
{
public:
	uint8                                         SoundType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePianoSound) == 0x000008, "Wrong alignment on FEndDataTablePianoSound");
static_assert(sizeof(FEndDataTablePianoSound) == 0x000010, "Wrong size on FEndDataTablePianoSound");
static_assert(offsetof(FEndDataTablePianoSound, SoundType) == 0x000008, "Member 'FEndDataTablePianoSound::SoundType' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectObjectPlannerLevelSetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectObjectPlannerLevelSetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectObjectPlannerLevelSetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectObjectPlannerLevelSetAccessor");
static_assert(sizeof(FEndDataObjectObjectPlannerLevelSetAccessor) == 0x000020, "Wrong size on FEndDataObjectObjectPlannerLevelSetAccessor");

// ScriptStruct EndDataObject.EndDataObjectOverrideWalkTypeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectOverrideWalkTypeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectOverrideWalkTypeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectOverrideWalkTypeAccessor");
static_assert(sizeof(FEndDataObjectOverrideWalkTypeAccessor) == 0x000020, "Wrong size on FEndDataObjectOverrideWalkTypeAccessor");

// ScriptStruct EndDataObject.EndDataTableFavoritePointFlag
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableFavoritePointFlag final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           TargetPlayerTable_Array;                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StoryFlag_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableFavoritePointFlag) == 0x000008, "Wrong alignment on FEndDataTableFavoritePointFlag");
static_assert(sizeof(FEndDataTableFavoritePointFlag) == 0x000028, "Wrong size on FEndDataTableFavoritePointFlag");
static_assert(offsetof(FEndDataTableFavoritePointFlag, TargetPlayerTable_Array) == 0x000008, "Member 'FEndDataTableFavoritePointFlag::TargetPlayerTable_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableFavoritePointFlag, StoryFlag_Array) == 0x000018, "Member 'FEndDataTableFavoritePointFlag::StoryFlag_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectPartyLevelAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPartyLevelAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPartyLevelAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPartyLevelAccessor");
static_assert(sizeof(FEndDataObjectPartyLevelAccessor) == 0x000020, "Wrong size on FEndDataObjectPartyLevelAccessor");

// ScriptStruct EndDataObject.EndDataObjectPhotoCommonParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPhotoCommonParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPhotoCommonParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPhotoCommonParameterAccessor");
static_assert(sizeof(FEndDataObjectPhotoCommonParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectPhotoCommonParameterAccessor");

// ScriptStruct EndDataObject.EndDataTablePlannerEventRequirePacks
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTablePlannerEventRequirePacks final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           PackName_Array;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SoundPackName_Array;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SequencerPackName_Array;                           // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlannerEventRequirePacks) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventRequirePacks");
static_assert(sizeof(FEndDataTablePlannerEventRequirePacks) == 0x000038, "Wrong size on FEndDataTablePlannerEventRequirePacks");
static_assert(offsetof(FEndDataTablePlannerEventRequirePacks, PackName_Array) == 0x000008, "Member 'FEndDataTablePlannerEventRequirePacks::PackName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRequirePacks, SoundPackName_Array) == 0x000018, "Member 'FEndDataTablePlannerEventRequirePacks::SoundPackName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRequirePacks, SequencerPackName_Array) == 0x000028, "Member 'FEndDataTablePlannerEventRequirePacks::SequencerPackName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectPianoCameraListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPianoCameraListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPianoCameraListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPianoCameraListAccessor");
static_assert(sizeof(FEndDataObjectPianoCameraListAccessor) == 0x000020, "Wrong size on FEndDataObjectPianoCameraListAccessor");

// ScriptStruct EndDataObject.EndDataObjectPianoChordsConfigAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPianoChordsConfigAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPianoChordsConfigAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPianoChordsConfigAccessor");
static_assert(sizeof(FEndDataObjectPianoChordsConfigAccessor) == 0x000020, "Wrong size on FEndDataObjectPianoChordsConfigAccessor");

// ScriptStruct EndDataObject.EndDataTableGambitFortGambitActionNeeds
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableGambitFortGambitActionNeeds final : public FEndDataTableRowBase
{
public:
	class FString                                 ConaditionName;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        UniqueId;                                          // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableStageIndex;                                  // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ShowEditor;                                        // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         iconIndex;                                         // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CheckType;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IntArgumentList_Array;                             // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 FloatArgumentList_Array;                           // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableGambitFortGambitActionNeeds) == 0x000008, "Wrong alignment on FEndDataTableGambitFortGambitActionNeeds");
static_assert(sizeof(FEndDataTableGambitFortGambitActionNeeds) == 0x000048, "Wrong size on FEndDataTableGambitFortGambitActionNeeds");
static_assert(offsetof(FEndDataTableGambitFortGambitActionNeeds, ConaditionName) == 0x000008, "Member 'FEndDataTableGambitFortGambitActionNeeds::ConaditionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitActionNeeds, UniqueId) == 0x000018, "Member 'FEndDataTableGambitFortGambitActionNeeds::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitActionNeeds, EnableStageIndex) == 0x00001A, "Member 'FEndDataTableGambitFortGambitActionNeeds::EnableStageIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitActionNeeds, ShowEditor) == 0x00001B, "Member 'FEndDataTableGambitFortGambitActionNeeds::ShowEditor' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitActionNeeds, iconIndex) == 0x00001C, "Member 'FEndDataTableGambitFortGambitActionNeeds::iconIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitActionNeeds, CheckType) == 0x000020, "Member 'FEndDataTableGambitFortGambitActionNeeds::CheckType' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitActionNeeds, IntArgumentList_Array) == 0x000028, "Member 'FEndDataTableGambitFortGambitActionNeeds::IntArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitActionNeeds, FloatArgumentList_Array) == 0x000038, "Member 'FEndDataTableGambitFortGambitActionNeeds::FloatArgumentList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectPianoMonotoneAssignAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPianoMonotoneAssignAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPianoMonotoneAssignAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPianoMonotoneAssignAccessor");
static_assert(sizeof(FEndDataObjectPianoMonotoneAssignAccessor) == 0x000020, "Wrong size on FEndDataObjectPianoMonotoneAssignAccessor");

// ScriptStruct EndDataObject.EndDataObjectPianoScoreAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPianoScoreAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPianoScoreAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPianoScoreAccessor");
static_assert(sizeof(FEndDataObjectPianoScoreAccessor) == 0x000020, "Wrong size on FEndDataObjectPianoScoreAccessor");

// ScriptStruct EndDataObject.EndDataTablePlayerParameter
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTablePlayerParameter final : public FEndDataTableRowBase
{
public:
	int32                                         HPMax;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MPMax;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Strength;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Magic;                                             // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Vitality;                                          // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Spilit;                                            // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Luck;                                              // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Dexterity;                                         // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SPMax;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Experience;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TreeLevel;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePlayerParameter) == 0x000008, "Wrong alignment on FEndDataTablePlayerParameter");
static_assert(sizeof(FEndDataTablePlayerParameter) == 0x000028, "Wrong size on FEndDataTablePlayerParameter");
static_assert(offsetof(FEndDataTablePlayerParameter, HPMax) == 0x000008, "Member 'FEndDataTablePlayerParameter::HPMax' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, MPMax) == 0x00000C, "Member 'FEndDataTablePlayerParameter::MPMax' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Strength) == 0x000010, "Member 'FEndDataTablePlayerParameter::Strength' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Magic) == 0x000011, "Member 'FEndDataTablePlayerParameter::Magic' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Vitality) == 0x000012, "Member 'FEndDataTablePlayerParameter::Vitality' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Spilit) == 0x000013, "Member 'FEndDataTablePlayerParameter::Spilit' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Luck) == 0x000014, "Member 'FEndDataTablePlayerParameter::Luck' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Dexterity) == 0x000015, "Member 'FEndDataTablePlayerParameter::Dexterity' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, SPMax) == 0x000018, "Member 'FEndDataTablePlayerParameter::SPMax' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Experience) == 0x00001C, "Member 'FEndDataTablePlayerParameter::Experience' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, TreeLevel) == 0x000020, "Member 'FEndDataTablePlayerParameter::TreeLevel' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectPianoSoundAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPianoSoundAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPianoSoundAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPianoSoundAccessor");
static_assert(sizeof(FEndDataObjectPianoSoundAccessor) == 0x000020, "Wrong size on FEndDataObjectPianoSoundAccessor");

// ScriptStruct EndDataObject.EndDataTableCondorFortMateria
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCondorFortMateria final : public FEndDataTableRowBase
{
public:
	class FName                                   AbilityId;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DamageSourceID;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCondorFortMateria) == 0x000008, "Wrong alignment on FEndDataTableCondorFortMateria");
static_assert(sizeof(FEndDataTableCondorFortMateria) == 0x000018, "Wrong size on FEndDataTableCondorFortMateria");
static_assert(offsetof(FEndDataTableCondorFortMateria, AbilityId) == 0x000008, "Member 'FEndDataTableCondorFortMateria::AbilityId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, DamageSourceID) == 0x000010, "Member 'FEndDataTableCondorFortMateria::DamageSourceID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventLocationListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventLocationListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventLocationListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventLocationListAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventLocationListAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventLocationListAccessor");

// ScriptStruct EndDataObject.EndDataTableMiniGameRewardWindow
// 0x0100 (0x0108 - 0x0008)
struct FEndDataTableMiniGameRewardWindow final : public FEndDataTableRowBase
{
public:
	class FName                                   ScoreTitleTextID;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RewardTitleTextID;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BestScoreTitleTextID;                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ModeTitleTextID;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RankName_Array;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ScoreName_Array;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RewardID_Array;                                    // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StoryFlag_Array;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RepeatRewardID_Array;                              // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   OverrideRewardTextID0;                             // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OverrideRewardTextID1;                             // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OverrideRewardTextID2;                             // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OverrideRewardTextID3;                             // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UndiscoverdTextID;                                 // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RewardVisibleStoryFlag_Array;                      // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AchievementStoryFlag_Array;                        // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           UndiscoverdStoryFlag_Array;                        // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   ResidentWorkID;                                    // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LocationWorkID;                                    // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UseTime;                                           // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BestScoreUnit;                                     // 0x00E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          BestScoreCutDigit;                                 // 0x00EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          DispBestScoreEmpty;                                // 0x00ED(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          DispGP;                                            // 0x00EE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EF[0x1];                                       // 0x00EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AppendID;                                          // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          SelectorIndex;                                     // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CompleteVisibleStoryFlag;                          // 0x00FC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableMiniGameRewardWindow) == 0x000008, "Wrong alignment on FEndDataTableMiniGameRewardWindow");
static_assert(sizeof(FEndDataTableMiniGameRewardWindow) == 0x000108, "Wrong size on FEndDataTableMiniGameRewardWindow");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, ScoreTitleTextID) == 0x000008, "Member 'FEndDataTableMiniGameRewardWindow::ScoreTitleTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, RewardTitleTextID) == 0x000010, "Member 'FEndDataTableMiniGameRewardWindow::RewardTitleTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, BestScoreTitleTextID) == 0x000018, "Member 'FEndDataTableMiniGameRewardWindow::BestScoreTitleTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, ModeTitleTextID) == 0x000020, "Member 'FEndDataTableMiniGameRewardWindow::ModeTitleTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, RankName_Array) == 0x000028, "Member 'FEndDataTableMiniGameRewardWindow::RankName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, ScoreName_Array) == 0x000038, "Member 'FEndDataTableMiniGameRewardWindow::ScoreName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, RewardID_Array) == 0x000048, "Member 'FEndDataTableMiniGameRewardWindow::RewardID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, StoryFlag_Array) == 0x000058, "Member 'FEndDataTableMiniGameRewardWindow::StoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, RepeatRewardID_Array) == 0x000068, "Member 'FEndDataTableMiniGameRewardWindow::RepeatRewardID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, OverrideRewardTextID0) == 0x000078, "Member 'FEndDataTableMiniGameRewardWindow::OverrideRewardTextID0' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, OverrideRewardTextID1) == 0x000080, "Member 'FEndDataTableMiniGameRewardWindow::OverrideRewardTextID1' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, OverrideRewardTextID2) == 0x000088, "Member 'FEndDataTableMiniGameRewardWindow::OverrideRewardTextID2' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, OverrideRewardTextID3) == 0x000090, "Member 'FEndDataTableMiniGameRewardWindow::OverrideRewardTextID3' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, UndiscoverdTextID) == 0x000098, "Member 'FEndDataTableMiniGameRewardWindow::UndiscoverdTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, RewardVisibleStoryFlag_Array) == 0x0000A0, "Member 'FEndDataTableMiniGameRewardWindow::RewardVisibleStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, AchievementStoryFlag_Array) == 0x0000B0, "Member 'FEndDataTableMiniGameRewardWindow::AchievementStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, UndiscoverdStoryFlag_Array) == 0x0000C0, "Member 'FEndDataTableMiniGameRewardWindow::UndiscoverdStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, ResidentWorkID) == 0x0000D0, "Member 'FEndDataTableMiniGameRewardWindow::ResidentWorkID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, LocationWorkID) == 0x0000D8, "Member 'FEndDataTableMiniGameRewardWindow::LocationWorkID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, UseTime) == 0x0000E0, "Member 'FEndDataTableMiniGameRewardWindow::UseTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, BestScoreUnit) == 0x0000E4, "Member 'FEndDataTableMiniGameRewardWindow::BestScoreUnit' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, BestScoreCutDigit) == 0x0000EC, "Member 'FEndDataTableMiniGameRewardWindow::BestScoreCutDigit' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, DispBestScoreEmpty) == 0x0000ED, "Member 'FEndDataTableMiniGameRewardWindow::DispBestScoreEmpty' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, DispGP) == 0x0000EE, "Member 'FEndDataTableMiniGameRewardWindow::DispGP' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, AppendID) == 0x0000F0, "Member 'FEndDataTableMiniGameRewardWindow::AppendID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, SelectorIndex) == 0x0000F8, "Member 'FEndDataTableMiniGameRewardWindow::SelectorIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameRewardWindow, CompleteVisibleStoryFlag) == 0x0000FC, "Member 'FEndDataTableMiniGameRewardWindow::CompleteVisibleStoryFlag' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventRequirePacksAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventRequirePacksAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventRequirePacksAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventRequirePacksAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventRequirePacksAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventRequirePacksAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventTalkInfoAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventTalkInfoAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventTalkInfoAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventTalkInfoAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventTalkInfoAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventTalkInfoAccessor");

// ScriptStruct EndDataObject.EndDataTableCrashBoxForceAbility
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableCrashBoxForceAbility final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ExcludeMateria_Array;                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ExcludeAbilityID_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCrashBoxForceAbility) == 0x000008, "Wrong alignment on FEndDataTableCrashBoxForceAbility");
static_assert(sizeof(FEndDataTableCrashBoxForceAbility) == 0x000028, "Wrong size on FEndDataTableCrashBoxForceAbility");
static_assert(offsetof(FEndDataTableCrashBoxForceAbility, ExcludeMateria_Array) == 0x000008, "Member 'FEndDataTableCrashBoxForceAbility::ExcludeMateria_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCrashBoxForceAbility, ExcludeAbilityID_Array) == 0x000018, "Member 'FEndDataTableCrashBoxForceAbility::ExcludeAbilityID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectPlannerEventVoiceListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlannerEventVoiceListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlannerEventVoiceListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlannerEventVoiceListAccessor");
static_assert(sizeof(FEndDataObjectPlannerEventVoiceListAccessor) == 0x000020, "Wrong size on FEndDataObjectPlannerEventVoiceListAccessor");

// ScriptStruct EndDataObject.EndDataTableForceFeedback
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableForceFeedback final : public FEndDataTableRowBase
{
public:
	class FName                                   SEID;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Loop;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Duration;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TrackNumber;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EffectNumber;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnumNumber;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Environment;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VolumeAdjust;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VibrationCategory;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         OverrideFieldCategory;                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableForceFeedback) == 0x000008, "Wrong alignment on FEndDataTableForceFeedback");
static_assert(sizeof(FEndDataTableForceFeedback) == 0x000038, "Wrong size on FEndDataTableForceFeedback");
static_assert(offsetof(FEndDataTableForceFeedback, SEID) == 0x000008, "Member 'FEndDataTableForceFeedback::SEID' has a wrong offset!");
static_assert(offsetof(FEndDataTableForceFeedback, Loop) == 0x000010, "Member 'FEndDataTableForceFeedback::Loop' has a wrong offset!");
static_assert(offsetof(FEndDataTableForceFeedback, Duration) == 0x000014, "Member 'FEndDataTableForceFeedback::Duration' has a wrong offset!");
static_assert(offsetof(FEndDataTableForceFeedback, TrackNumber) == 0x000018, "Member 'FEndDataTableForceFeedback::TrackNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableForceFeedback, EffectNumber) == 0x00001C, "Member 'FEndDataTableForceFeedback::EffectNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableForceFeedback, EnumNumber) == 0x000020, "Member 'FEndDataTableForceFeedback::EnumNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableForceFeedback, Environment) == 0x000024, "Member 'FEndDataTableForceFeedback::Environment' has a wrong offset!");
static_assert(offsetof(FEndDataTableForceFeedback, VolumeAdjust) == 0x000028, "Member 'FEndDataTableForceFeedback::VolumeAdjust' has a wrong offset!");
static_assert(offsetof(FEndDataTableForceFeedback, VibrationCategory) == 0x00002C, "Member 'FEndDataTableForceFeedback::VibrationCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableForceFeedback, OverrideFieldCategory) == 0x000030, "Member 'FEndDataTableForceFeedback::OverrideFieldCategory' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectPlayerParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlayerParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlayerParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlayerParameterAccessor");
static_assert(sizeof(FEndDataObjectPlayerParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectPlayerParameterAccessor");

// ScriptStruct EndDataObject.EndDataObjectPlayerTableFavPointAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPlayerTableFavPointAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPlayerTableFavPointAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPlayerTableFavPointAccessor");
static_assert(sizeof(FEndDataObjectPlayerTableFavPointAccessor) == 0x000020, "Wrong size on FEndDataObjectPlayerTableFavPointAccessor");

// ScriptStruct EndDataObject.EndDataTableItem
// 0x0198 (0x01A0 - 0x0008)
struct FEndDataTableItem final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemNameLabel;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ItemDetailLabel;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShopShortName;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CanStack;                                          // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortValue;                                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BuyValue;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SaleValue;                                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CanSale;                                           // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AbilityId;                                         // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChangeFlag;                                        // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InvisibleFlag;                                     // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconName;                                          // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TextureName;                                       // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxCount;                                          // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IncreaseLabel;                                     // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DecreaseLabel;                                     // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 RewardTextID;                                      // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 RewardNotGetTextID;                                // 0x00D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ItemCategory;                                      // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Category;                                          // 0x00E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CategoryDetail;                                    // 0x00E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OverrideIconValue;                                 // 0x00E3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EffectiveValue;                                    // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ItemRarity;                                        // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           GettableChapterID_Array;                           // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ChapterID_Array;                                   // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         SceneLayerType;                                    // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CategoryStringArgument00;                          // 0x0118(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CategoryStringArgument01;                          // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CategoryStringArgument02;                          // 0x0138(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CategoryStringArgument03;                          // 0x0148(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TreasureSpecId;                                    // 0x0158(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   JukeBoxID;                                         // 0x0160(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 LargeAcquireInArea_Array;                          // 0x0168(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   CharaSpecID;                                       // 0x0178(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MenuItemModelCameraDistance;                       // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MenuItemModelScale;                                // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MenuItemModelInitOffsetX;                          // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MenuItemModelInitOffsetY;                          // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MenuItemModelInitOffsetZ;                          // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MenuItemModelInitPitch;                            // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MenuItemModelInitYaw;                              // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MenuItemModelInitRoll;                             // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableItem) == 0x000008, "Wrong alignment on FEndDataTableItem");
static_assert(sizeof(FEndDataTableItem) == 0x0001A0, "Wrong size on FEndDataTableItem");
static_assert(offsetof(FEndDataTableItem, UniqueId) == 0x000008, "Member 'FEndDataTableItem::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ItemNameLabel) == 0x000010, "Member 'FEndDataTableItem::ItemNameLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ItemDetailLabel) == 0x000020, "Member 'FEndDataTableItem::ItemDetailLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ShopShortName) == 0x000030, "Member 'FEndDataTableItem::ShopShortName' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CanStack) == 0x000040, "Member 'FEndDataTableItem::CanStack' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, SortValue) == 0x000044, "Member 'FEndDataTableItem::SortValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, BuyValue) == 0x000048, "Member 'FEndDataTableItem::BuyValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, SaleValue) == 0x00004C, "Member 'FEndDataTableItem::SaleValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CanSale) == 0x000050, "Member 'FEndDataTableItem::CanSale' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, AbilityId) == 0x000058, "Member 'FEndDataTableItem::AbilityId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ChangeFlag) == 0x000068, "Member 'FEndDataTableItem::ChangeFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, InvisibleFlag) == 0x000070, "Member 'FEndDataTableItem::InvisibleFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, IconName) == 0x000078, "Member 'FEndDataTableItem::IconName' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, TextureName) == 0x000088, "Member 'FEndDataTableItem::TextureName' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, MaxCount) == 0x000098, "Member 'FEndDataTableItem::MaxCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, IncreaseLabel) == 0x0000A0, "Member 'FEndDataTableItem::IncreaseLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, DecreaseLabel) == 0x0000B0, "Member 'FEndDataTableItem::DecreaseLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, RewardTextID) == 0x0000C0, "Member 'FEndDataTableItem::RewardTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, RewardNotGetTextID) == 0x0000D0, "Member 'FEndDataTableItem::RewardNotGetTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ItemCategory) == 0x0000E0, "Member 'FEndDataTableItem::ItemCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, Category) == 0x0000E1, "Member 'FEndDataTableItem::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CategoryDetail) == 0x0000E2, "Member 'FEndDataTableItem::CategoryDetail' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, OverrideIconValue) == 0x0000E3, "Member 'FEndDataTableItem::OverrideIconValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, EffectiveValue) == 0x0000E4, "Member 'FEndDataTableItem::EffectiveValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ItemRarity) == 0x0000E8, "Member 'FEndDataTableItem::ItemRarity' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, GettableChapterID_Array) == 0x0000F0, "Member 'FEndDataTableItem::GettableChapterID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ChapterID_Array) == 0x000100, "Member 'FEndDataTableItem::ChapterID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, SceneLayerType) == 0x000110, "Member 'FEndDataTableItem::SceneLayerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CategoryStringArgument00) == 0x000118, "Member 'FEndDataTableItem::CategoryStringArgument00' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CategoryStringArgument01) == 0x000128, "Member 'FEndDataTableItem::CategoryStringArgument01' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CategoryStringArgument02) == 0x000138, "Member 'FEndDataTableItem::CategoryStringArgument02' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CategoryStringArgument03) == 0x000148, "Member 'FEndDataTableItem::CategoryStringArgument03' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, TreasureSpecId) == 0x000158, "Member 'FEndDataTableItem::TreasureSpecId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, JukeBoxID) == 0x000160, "Member 'FEndDataTableItem::JukeBoxID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, LargeAcquireInArea_Array) == 0x000168, "Member 'FEndDataTableItem::LargeAcquireInArea_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CharaSpecID) == 0x000178, "Member 'FEndDataTableItem::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, MenuItemModelCameraDistance) == 0x000180, "Member 'FEndDataTableItem::MenuItemModelCameraDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, MenuItemModelScale) == 0x000184, "Member 'FEndDataTableItem::MenuItemModelScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, MenuItemModelInitOffsetX) == 0x000188, "Member 'FEndDataTableItem::MenuItemModelInitOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, MenuItemModelInitOffsetY) == 0x00018C, "Member 'FEndDataTableItem::MenuItemModelInitOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, MenuItemModelInitOffsetZ) == 0x000190, "Member 'FEndDataTableItem::MenuItemModelInitOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, MenuItemModelInitPitch) == 0x000194, "Member 'FEndDataTableItem::MenuItemModelInitPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, MenuItemModelInitYaw) == 0x000198, "Member 'FEndDataTableItem::MenuItemModelInitYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, MenuItemModelInitRoll) == 0x00019C, "Member 'FEndDataTableItem::MenuItemModelInitRoll' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectPointSoundAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPointSoundAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPointSoundAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPointSoundAccessor");
static_assert(sizeof(FEndDataObjectPointSoundAccessor) == 0x000020, "Wrong size on FEndDataObjectPointSoundAccessor");

// ScriptStruct EndDataObject.EndDataObjectPointWarpObjectAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectPointWarpObjectAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectPointWarpObjectAccessor) == 0x000008, "Wrong alignment on FEndDataObjectPointWarpObjectAccessor");
static_assert(sizeof(FEndDataObjectPointWarpObjectAccessor) == 0x000020, "Wrong size on FEndDataObjectPointWarpObjectAccessor");

// ScriptStruct EndDataObject.EndDataTableGambitFortLifeLine
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableGambitFortLifeLine final : public FEndDataTableRowBase
{
public:
	class FName                                   LineSourceName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LineTargetName;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableGambitFortLifeLine) == 0x000008, "Wrong alignment on FEndDataTableGambitFortLifeLine");
static_assert(sizeof(FEndDataTableGambitFortLifeLine) == 0x000018, "Wrong size on FEndDataTableGambitFortLifeLine");
static_assert(offsetof(FEndDataTableGambitFortLifeLine, LineSourceName) == 0x000008, "Member 'FEndDataTableGambitFortLifeLine::LineSourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLifeLine, LineTargetName) == 0x000010, "Member 'FEndDataTableGambitFortLifeLine::LineTargetName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectQuestAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectQuestAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectQuestAccessor) == 0x000008, "Wrong alignment on FEndDataObjectQuestAccessor");
static_assert(sizeof(FEndDataObjectQuestAccessor) == 0x000020, "Wrong size on FEndDataObjectQuestAccessor");

// ScriptStruct EndDataObject.EndDataObjectQuestObjectAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectQuestObjectAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectQuestObjectAccessor) == 0x000008, "Wrong alignment on FEndDataObjectQuestObjectAccessor");
static_assert(sizeof(FEndDataObjectQuestObjectAccessor) == 0x000020, "Wrong size on FEndDataObjectQuestObjectAccessor");

// ScriptStruct EndDataObject.EndDataTableItemDropBox
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableItemDropBox final : public FEndDataTableRowBase
{
public:
	int32                                         DropPercent;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DropStoryFlagName;                                 // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DropedStoryFlag;                                   // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StateConditionList_Array;                          // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ItemDropList_Array;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableItemDropBox) == 0x000008, "Wrong alignment on FEndDataTableItemDropBox");
static_assert(sizeof(FEndDataTableItemDropBox) == 0x000040, "Wrong size on FEndDataTableItemDropBox");
static_assert(offsetof(FEndDataTableItemDropBox, DropPercent) == 0x000008, "Member 'FEndDataTableItemDropBox::DropPercent' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDropBox, DropStoryFlagName) == 0x00000C, "Member 'FEndDataTableItemDropBox::DropStoryFlagName' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDropBox, DropedStoryFlag) == 0x000014, "Member 'FEndDataTableItemDropBox::DropedStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDropBox, StateConditionList_Array) == 0x000020, "Member 'FEndDataTableItemDropBox::StateConditionList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDropBox, ItemDropList_Array) == 0x000030, "Member 'FEndDataTableItemDropBox::ItemDropList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectQuestTaskAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectQuestTaskAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectQuestTaskAccessor) == 0x000008, "Wrong alignment on FEndDataObjectQuestTaskAccessor");
static_assert(sizeof(FEndDataObjectQuestTaskAccessor) == 0x000020, "Wrong size on FEndDataObjectQuestTaskAccessor");

// ScriptStruct EndDataObject.EndDataObjectReportConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectReportConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectReportConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectReportConditionAccessor");
static_assert(sizeof(FEndDataObjectReportConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectReportConditionAccessor");

// ScriptStruct EndDataObject.EndDataTableHub
// 0x0300 (0x0308 - 0x0008)
struct FEndDataTableHub final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ConfigID;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HubNameText;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LocationId;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ProhibitStoryFlagID;                               // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendStoryFlagID;                                // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResetStoryFlagID;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           GroupID_Array;                                     // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Type;                                              // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PathGuideDestinationPointName_Array;               // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PathGuideUseNavLink_Array;                         // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FastTravelPointName_Array;                         // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   FastTravelBuggyPlacePointName;                     // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BeginFastTravelStateTrigger_Array;                 // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BeginFastTravelStateTriggerTinyBronco_Array;       // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PreFinishFastTravelStateTrigger_Array;             // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PreFinishFastTravelStateTriggerTinyBronco_Array;   // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FinishFastTravelStateTrigger_Array;                // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FinishFastTravelStateTriggerTinyBronco_Array;      // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ControlObject_Array;                               // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   WorldReportID;                                     // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DetectorType_Array;                                // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         DetectorStringArg_Array;                           // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 DetectorIntArg_Array;                              // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DetectorFloatArg_Array;                            // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DetectorEnableStoryFlag_Array;                     // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   StateTriggerOnFirstVisit;                          // 0x0160(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnFirstVisit;                                // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StateTriggerOnEntryPreIcon;                        // 0x0170(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnEntryPreIcon;                              // 0x0178(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendingStateTriggerOnEntryPreIcon;              // 0x0180(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendingActionOnEntryPreIcon;                    // 0x0188(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StateTriggerOnEntry;                               // 0x0190(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnEntry;                                     // 0x0198(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StateTriggerOnLeave;                               // 0x01A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnLeave;                                     // 0x01A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StateTriggerOnEntryInProgressing;                  // 0x01B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnEntryInProgressing;                        // 0x01B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StateTriggerOnLeaveInProgressing;                  // 0x01C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnLeaveInProgressing;                        // 0x01C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendingStateTriggerOnEntryInProgressing;        // 0x01D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendingActionOnEntryInProgressing;              // 0x01D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendingStateTriggerOnLeaveInProgressing;        // 0x01E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendingActionOnLeaveInProgressing;              // 0x01E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StateTriggerOnEntryInCompleted;                    // 0x01F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnEntryInCompleted;                          // 0x01F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StateTriggerOnLeaveInCompleted;                    // 0x0200(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnLeaveInCompleted;                          // 0x0208(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActivateStateTriggerID;                            // 0x0210(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActivateActionOrActionGroupID;                     // 0x0218(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CompleteStateTriggerID;                            // 0x0220(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CompleteActionOrActionGroupID;                     // 0x0228(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NotifyOnActivated;                                 // 0x0230(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PreNotifyActivatedActionID;                        // 0x0234(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PostNotifyActivatedActionID;                       // 0x023C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PostNotifyActionStartTimeID;                       // 0x0244(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ProhibitDistanceForVoice;                          // 0x024C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UseProgressActionForVoiceStoryFlag;                // 0x0250(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnFirstVisitForVoice;                        // 0x0258(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnEntryInProgressingForVoice;                // 0x0260(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnEntryPreIconForVoice;                      // 0x0268(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendingActionOnFirstVisitForVoice;              // 0x0270(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendingActionOnEntryInProgressingForVoice;      // 0x0278(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendingActionOnEntryPreIconForVoice;            // 0x0280(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HintAnimalLayoutID;                                // 0x0288(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   VisitStoryFlagID;                                  // 0x0290(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActivateStoryFlagID;                               // 0x0298(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActivatedStringArguments_Array;                    // 0x02A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ActivatedIntegerArguments_Array;                   // 0x02B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ActivatedFloatArguments_Array;                     // 0x02C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   CompleteStoryFlagID;                               // 0x02D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CompleteStringArguments_Array;                     // 0x02D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 CompleteIntegerArguments_Array;                    // 0x02E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 CompleteFloatArguments_Array;                      // 0x02F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableHub) == 0x000008, "Wrong alignment on FEndDataTableHub");
static_assert(sizeof(FEndDataTableHub) == 0x000308, "Wrong size on FEndDataTableHub");
static_assert(offsetof(FEndDataTableHub, UniqueIndex) == 0x000008, "Member 'FEndDataTableHub::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ConfigID) == 0x00000C, "Member 'FEndDataTableHub::ConfigID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, HubNameText) == 0x000018, "Member 'FEndDataTableHub::HubNameText' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, LocationId) == 0x000028, "Member 'FEndDataTableHub::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ProhibitStoryFlagID) == 0x000030, "Member 'FEndDataTableHub::ProhibitStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, SuspendStoryFlagID) == 0x000038, "Member 'FEndDataTableHub::SuspendStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ResetStoryFlagID) == 0x000040, "Member 'FEndDataTableHub::ResetStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, GroupID_Array) == 0x000048, "Member 'FEndDataTableHub::GroupID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, Type) == 0x000058, "Member 'FEndDataTableHub::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, PathGuideDestinationPointName_Array) == 0x000060, "Member 'FEndDataTableHub::PathGuideDestinationPointName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, PathGuideUseNavLink_Array) == 0x000070, "Member 'FEndDataTableHub::PathGuideUseNavLink_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, FastTravelPointName_Array) == 0x000080, "Member 'FEndDataTableHub::FastTravelPointName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, FastTravelBuggyPlacePointName) == 0x000090, "Member 'FEndDataTableHub::FastTravelBuggyPlacePointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, BeginFastTravelStateTrigger_Array) == 0x000098, "Member 'FEndDataTableHub::BeginFastTravelStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, BeginFastTravelStateTriggerTinyBronco_Array) == 0x0000A8, "Member 'FEndDataTableHub::BeginFastTravelStateTriggerTinyBronco_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, PreFinishFastTravelStateTrigger_Array) == 0x0000B8, "Member 'FEndDataTableHub::PreFinishFastTravelStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, PreFinishFastTravelStateTriggerTinyBronco_Array) == 0x0000C8, "Member 'FEndDataTableHub::PreFinishFastTravelStateTriggerTinyBronco_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, FinishFastTravelStateTrigger_Array) == 0x0000D8, "Member 'FEndDataTableHub::FinishFastTravelStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, FinishFastTravelStateTriggerTinyBronco_Array) == 0x0000E8, "Member 'FEndDataTableHub::FinishFastTravelStateTriggerTinyBronco_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ControlObject_Array) == 0x0000F8, "Member 'FEndDataTableHub::ControlObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, WorldReportID) == 0x000108, "Member 'FEndDataTableHub::WorldReportID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, DetectorType_Array) == 0x000110, "Member 'FEndDataTableHub::DetectorType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, DetectorStringArg_Array) == 0x000120, "Member 'FEndDataTableHub::DetectorStringArg_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, DetectorIntArg_Array) == 0x000130, "Member 'FEndDataTableHub::DetectorIntArg_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, DetectorFloatArg_Array) == 0x000140, "Member 'FEndDataTableHub::DetectorFloatArg_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, DetectorEnableStoryFlag_Array) == 0x000150, "Member 'FEndDataTableHub::DetectorEnableStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, StateTriggerOnFirstVisit) == 0x000160, "Member 'FEndDataTableHub::StateTriggerOnFirstVisit' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnFirstVisit) == 0x000168, "Member 'FEndDataTableHub::ActionOnFirstVisit' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, StateTriggerOnEntryPreIcon) == 0x000170, "Member 'FEndDataTableHub::StateTriggerOnEntryPreIcon' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnEntryPreIcon) == 0x000178, "Member 'FEndDataTableHub::ActionOnEntryPreIcon' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, SuspendingStateTriggerOnEntryPreIcon) == 0x000180, "Member 'FEndDataTableHub::SuspendingStateTriggerOnEntryPreIcon' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, SuspendingActionOnEntryPreIcon) == 0x000188, "Member 'FEndDataTableHub::SuspendingActionOnEntryPreIcon' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, StateTriggerOnEntry) == 0x000190, "Member 'FEndDataTableHub::StateTriggerOnEntry' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnEntry) == 0x000198, "Member 'FEndDataTableHub::ActionOnEntry' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, StateTriggerOnLeave) == 0x0001A0, "Member 'FEndDataTableHub::StateTriggerOnLeave' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnLeave) == 0x0001A8, "Member 'FEndDataTableHub::ActionOnLeave' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, StateTriggerOnEntryInProgressing) == 0x0001B0, "Member 'FEndDataTableHub::StateTriggerOnEntryInProgressing' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnEntryInProgressing) == 0x0001B8, "Member 'FEndDataTableHub::ActionOnEntryInProgressing' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, StateTriggerOnLeaveInProgressing) == 0x0001C0, "Member 'FEndDataTableHub::StateTriggerOnLeaveInProgressing' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnLeaveInProgressing) == 0x0001C8, "Member 'FEndDataTableHub::ActionOnLeaveInProgressing' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, SuspendingStateTriggerOnEntryInProgressing) == 0x0001D0, "Member 'FEndDataTableHub::SuspendingStateTriggerOnEntryInProgressing' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, SuspendingActionOnEntryInProgressing) == 0x0001D8, "Member 'FEndDataTableHub::SuspendingActionOnEntryInProgressing' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, SuspendingStateTriggerOnLeaveInProgressing) == 0x0001E0, "Member 'FEndDataTableHub::SuspendingStateTriggerOnLeaveInProgressing' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, SuspendingActionOnLeaveInProgressing) == 0x0001E8, "Member 'FEndDataTableHub::SuspendingActionOnLeaveInProgressing' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, StateTriggerOnEntryInCompleted) == 0x0001F0, "Member 'FEndDataTableHub::StateTriggerOnEntryInCompleted' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnEntryInCompleted) == 0x0001F8, "Member 'FEndDataTableHub::ActionOnEntryInCompleted' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, StateTriggerOnLeaveInCompleted) == 0x000200, "Member 'FEndDataTableHub::StateTriggerOnLeaveInCompleted' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnLeaveInCompleted) == 0x000208, "Member 'FEndDataTableHub::ActionOnLeaveInCompleted' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActivateStateTriggerID) == 0x000210, "Member 'FEndDataTableHub::ActivateStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActivateActionOrActionGroupID) == 0x000218, "Member 'FEndDataTableHub::ActivateActionOrActionGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, CompleteStateTriggerID) == 0x000220, "Member 'FEndDataTableHub::CompleteStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, CompleteActionOrActionGroupID) == 0x000228, "Member 'FEndDataTableHub::CompleteActionOrActionGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, NotifyOnActivated) == 0x000230, "Member 'FEndDataTableHub::NotifyOnActivated' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, PreNotifyActivatedActionID) == 0x000234, "Member 'FEndDataTableHub::PreNotifyActivatedActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, PostNotifyActivatedActionID) == 0x00023C, "Member 'FEndDataTableHub::PostNotifyActivatedActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, PostNotifyActionStartTimeID) == 0x000244, "Member 'FEndDataTableHub::PostNotifyActionStartTimeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ProhibitDistanceForVoice) == 0x00024C, "Member 'FEndDataTableHub::ProhibitDistanceForVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, UseProgressActionForVoiceStoryFlag) == 0x000250, "Member 'FEndDataTableHub::UseProgressActionForVoiceStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnFirstVisitForVoice) == 0x000258, "Member 'FEndDataTableHub::ActionOnFirstVisitForVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnEntryInProgressingForVoice) == 0x000260, "Member 'FEndDataTableHub::ActionOnEntryInProgressingForVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActionOnEntryPreIconForVoice) == 0x000268, "Member 'FEndDataTableHub::ActionOnEntryPreIconForVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, SuspendingActionOnFirstVisitForVoice) == 0x000270, "Member 'FEndDataTableHub::SuspendingActionOnFirstVisitForVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, SuspendingActionOnEntryInProgressingForVoice) == 0x000278, "Member 'FEndDataTableHub::SuspendingActionOnEntryInProgressingForVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, SuspendingActionOnEntryPreIconForVoice) == 0x000280, "Member 'FEndDataTableHub::SuspendingActionOnEntryPreIconForVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, HintAnimalLayoutID) == 0x000288, "Member 'FEndDataTableHub::HintAnimalLayoutID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, VisitStoryFlagID) == 0x000290, "Member 'FEndDataTableHub::VisitStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActivateStoryFlagID) == 0x000298, "Member 'FEndDataTableHub::ActivateStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActivatedStringArguments_Array) == 0x0002A0, "Member 'FEndDataTableHub::ActivatedStringArguments_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActivatedIntegerArguments_Array) == 0x0002B0, "Member 'FEndDataTableHub::ActivatedIntegerArguments_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, ActivatedFloatArguments_Array) == 0x0002C0, "Member 'FEndDataTableHub::ActivatedFloatArguments_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, CompleteStoryFlagID) == 0x0002D0, "Member 'FEndDataTableHub::CompleteStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, CompleteStringArguments_Array) == 0x0002D8, "Member 'FEndDataTableHub::CompleteStringArguments_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, CompleteIntegerArguments_Array) == 0x0002E8, "Member 'FEndDataTableHub::CompleteIntegerArguments_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHub, CompleteFloatArguments_Array) == 0x0002F8, "Member 'FEndDataTableHub::CompleteFloatArguments_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectResearchTargetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResearchTargetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResearchTargetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResearchTargetAccessor");
static_assert(sizeof(FEndDataObjectResearchTargetAccessor) == 0x000020, "Wrong size on FEndDataObjectResearchTargetAccessor");

// ScriptStruct EndDataObject.EndDataObjectResidentObjectAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResidentObjectAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResidentObjectAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResidentObjectAccessor");
static_assert(sizeof(FEndDataObjectResidentObjectAccessor) == 0x000020, "Wrong size on FEndDataObjectResidentObjectAccessor");

// ScriptStruct EndDataObject.EndDataTablePlannerEventVoiceList
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTablePlannerEventVoiceList final : public FEndDataTableRowBase
{
public:
	class FName                                   Value;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlannerEventVoiceList) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventVoiceList");
static_assert(sizeof(FEndDataTablePlannerEventVoiceList) == 0x000010, "Wrong size on FEndDataTablePlannerEventVoiceList");
static_assert(offsetof(FEndDataTablePlannerEventVoiceList, Value) == 0x000008, "Member 'FEndDataTablePlannerEventVoiceList::Value' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectResidentObjectEnemyAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResidentObjectEnemyAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResidentObjectEnemyAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResidentObjectEnemyAccessor");
static_assert(sizeof(FEndDataObjectResidentObjectEnemyAccessor) == 0x000020, "Wrong size on FEndDataObjectResidentObjectEnemyAccessor");

// ScriptStruct EndDataObject.EndDataObjectResidentParameterAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResidentParameterAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResidentParameterAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResidentParameterAccessor");
static_assert(sizeof(FEndDataObjectResidentParameterAccessor) == 0x000020, "Wrong size on FEndDataObjectResidentParameterAccessor");

// ScriptStruct EndDataObject.EndDataTablePianoCameraList
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTablePianoCameraList final : public FEndDataTableRowBase
{
public:
	class FName                                   LevelName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FixedPointCameraActorName_Array;                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 FixedPointCameraSeconds_Array;                     // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   IntroCameraActorName;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Camera_Array;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePianoCameraList) == 0x000008, "Wrong alignment on FEndDataTablePianoCameraList");
static_assert(sizeof(FEndDataTablePianoCameraList) == 0x000048, "Wrong size on FEndDataTablePianoCameraList");
static_assert(offsetof(FEndDataTablePianoCameraList, LevelName) == 0x000008, "Member 'FEndDataTablePianoCameraList::LevelName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoCameraList, FixedPointCameraActorName_Array) == 0x000010, "Member 'FEndDataTablePianoCameraList::FixedPointCameraActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoCameraList, FixedPointCameraSeconds_Array) == 0x000020, "Member 'FEndDataTablePianoCameraList::FixedPointCameraSeconds_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoCameraList, IntroCameraActorName) == 0x000030, "Member 'FEndDataTablePianoCameraList::IntroCameraActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoCameraList, Camera_Array) == 0x000038, "Member 'FEndDataTablePianoCameraList::Camera_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectResidentStateTriggerAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResidentStateTriggerAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResidentStateTriggerAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResidentStateTriggerAccessor");
static_assert(sizeof(FEndDataObjectResidentStateTriggerAccessor) == 0x000020, "Wrong size on FEndDataObjectResidentStateTriggerAccessor");

// ScriptStruct EndDataObject.EndDataObjectResidentWorkAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResidentWorkAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResidentWorkAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResidentWorkAccessor");
static_assert(sizeof(FEndDataObjectResidentWorkAccessor) == 0x000020, "Wrong size on FEndDataObjectResidentWorkAccessor");

// ScriptStruct EndDataObject.EndDataTablePointSound
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTablePointSound final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   objectID;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SoundFile;                                         // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StoryFlagId;                                       // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FadeOut;                                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Play2D;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePointSound) == 0x000008, "Wrong alignment on FEndDataTablePointSound");
static_assert(sizeof(FEndDataTablePointSound) == 0x000030, "Wrong size on FEndDataTablePointSound");
static_assert(offsetof(FEndDataTablePointSound, UniqueIndex) == 0x000008, "Member 'FEndDataTablePointSound::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointSound, objectID) == 0x00000C, "Member 'FEndDataTablePointSound::objectID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointSound, SoundFile) == 0x000014, "Member 'FEndDataTablePointSound::SoundFile' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointSound, StoryFlagId) == 0x00001C, "Member 'FEndDataTablePointSound::StoryFlagId' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointSound, FadeOut) == 0x000024, "Member 'FEndDataTablePointSound::FadeOut' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointSound, Play2D) == 0x000028, "Member 'FEndDataTablePointSound::Play2D' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectResponseAreaInOutAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectResponseAreaInOutAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectResponseAreaInOutAccessor) == 0x000008, "Wrong alignment on FEndDataObjectResponseAreaInOutAccessor");
static_assert(sizeof(FEndDataObjectResponseAreaInOutAccessor) == 0x000020, "Wrong size on FEndDataObjectResponseAreaInOutAccessor");

// ScriptStruct EndDataObject.EndDataObjectRewardRandomAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectRewardRandomAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectRewardRandomAccessor) == 0x000008, "Wrong alignment on FEndDataObjectRewardRandomAccessor");
static_assert(sizeof(FEndDataObjectRewardRandomAccessor) == 0x000020, "Wrong size on FEndDataObjectRewardRandomAccessor");

// ScriptStruct EndDataObject.EndDataObjectSceneChangerAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSceneChangerAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSceneChangerAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSceneChangerAccessor");
static_assert(sizeof(FEndDataObjectSceneChangerAccessor) == 0x000020, "Wrong size on FEndDataObjectSceneChangerAccessor");

// ScriptStruct EndDataObject.EndDataObjectShakeCharaPropertyAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShakeCharaPropertyAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShakeCharaPropertyAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShakeCharaPropertyAccessor");
static_assert(sizeof(FEndDataObjectShakeCharaPropertyAccessor) == 0x000020, "Wrong size on FEndDataObjectShakeCharaPropertyAccessor");

// ScriptStruct EndDataObject.EndDataTableMobMotion
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableMobMotion final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           MotionBindName_Array;                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MotionName_Array;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableMobMotion) == 0x000008, "Wrong alignment on FEndDataTableMobMotion");
static_assert(sizeof(FEndDataTableMobMotion) == 0x000028, "Wrong size on FEndDataTableMobMotion");
static_assert(offsetof(FEndDataTableMobMotion, MotionBindName_Array) == 0x000008, "Member 'FEndDataTableMobMotion::MotionBindName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMobMotion, MotionName_Array) == 0x000018, "Member 'FEndDataTableMobMotion::MotionName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectShootingCoasterEnemyGroupScoreDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShootingCoasterEnemyGroupScoreDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShootingCoasterEnemyGroupScoreDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShootingCoasterEnemyGroupScoreDataAccessor");
static_assert(sizeof(FEndDataObjectShootingCoasterEnemyGroupScoreDataAccessor) == 0x000020, "Wrong size on FEndDataObjectShootingCoasterEnemyGroupScoreDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectShootingCoasterMiniGameAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShootingCoasterMiniGameAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShootingCoasterMiniGameAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShootingCoasterMiniGameAccessor");
static_assert(sizeof(FEndDataObjectShootingCoasterMiniGameAccessor) == 0x000020, "Wrong size on FEndDataObjectShootingCoasterMiniGameAccessor");

// ScriptStruct EndDataObject.EndDataObjectShootingCoasterNormalEnemyDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShootingCoasterNormalEnemyDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShootingCoasterNormalEnemyDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShootingCoasterNormalEnemyDataAccessor");
static_assert(sizeof(FEndDataObjectShootingCoasterNormalEnemyDataAccessor) == 0x000020, "Wrong size on FEndDataObjectShootingCoasterNormalEnemyDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectShootingGameAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShootingGameAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShootingGameAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShootingGameAccessor");
static_assert(sizeof(FEndDataObjectShootingGameAccessor) == 0x000020, "Wrong size on FEndDataObjectShootingGameAccessor");

// ScriptStruct EndDataObject.EndDataObjectShootingGameTargetParamAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShootingGameTargetParamAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShootingGameTargetParamAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShootingGameTargetParamAccessor");
static_assert(sizeof(FEndDataObjectShootingGameTargetParamAccessor) == 0x000020, "Wrong size on FEndDataObjectShootingGameTargetParamAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboCaptureLocationParameter
// 0x0238 (0x0240 - 0x0008)
struct FEndDataTableChocoboCaptureLocationParameter final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          StrayFlag;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClearTrigger;                                      // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GameStartPoint;                                    // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GameOverPoint;                                     // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RestartPoint;                                      // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EscapePoint;                                       // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Name;                                              // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GameRange;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Reward;                                            // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WalkSpeed;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TurnInterval;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TurnIntervalRange;                                 // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SeeRange;                                          // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SeeAngle;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SeeRangeCaution;                                   // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SeeAngleCaution;                                   // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SeeRangeHeat;                                      // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SeeAngleHeat;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NavRange;                                          // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NavTime;                                           // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NavNextState;                                      // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlutDecay;                                         // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NormalUp;                                          // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NormalTimeToCaution;                               // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CautionUp;                                         // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CautionCancelTime;                                 // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CautionCancelState;                                // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CautionTimeToHeat;                                 // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HeatUp;                                            // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HeatCancelTime;                                    // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HeatCancelState;                                   // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DodgeFailed;                                       // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TriggerBox_Array;                                  // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   BushVolume;                                        // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EffectSpline;                                      // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NormalDecayAll;                                    // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CautionDecayAll;                                   // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HeatDecayAll;                                      // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CautionRaiseRadius;                                // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CautionRaiseMaxAdd;                                // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TurnFollowAngle;                                   // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NotHideTime;                                       // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WanderingSpline;                                   // 0x00E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TurnPattern_Array;                                 // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StonePoint_Array;                                  // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           VegiPoint_Array;                                   // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StayPoint_Array;                                   // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DistanceParam_Array;                               // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Stray_Array;                                       // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         StraySleepVolumeID0;                               // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Watcher;                                           // 0x0154(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableLookAt;                                      // 0x0155(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_156[0x2];                                      // 0x0156(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CheckPointWork;                                    // 0x0158(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CheckPointInfoIDArray_Array;                       // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   FailedCountWork;                                   // 0x0170(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   chara_spec;                                        // 0x0178(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   IdleOverrideAnim;                                  // 0x0180(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MotionPath;                                        // 0x0188(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CartSwitch_Array;                                  // 0x0190(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CartID_Array;                                      // 0x01A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BalloonID_Array;                                   // 0x01B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         StoneTime;                                         // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FailedAction;                                      // 0x01C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RetryAction;                                       // 0x01CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PauseRetireAction;                                 // 0x01D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FailedCharaAct;                                    // 0x01DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CautionStartCharaAct;                              // 0x01E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CautionFinishCharaAct;                             // 0x01EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   IdleCharaAct;                                      // 0x01F4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Switch_Array;                                      // 0x0200(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SwitchAct_Array;                                   // 0x0210(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   EntryAction;                                       // 0x0220(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EscapeVolume_Array;                                // 0x0228(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         InitializeWaitSec;                                 // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboCaptureLocationParameter) == 0x000008, "Wrong alignment on FEndDataTableChocoboCaptureLocationParameter");
static_assert(sizeof(FEndDataTableChocoboCaptureLocationParameter) == 0x000240, "Wrong size on FEndDataTableChocoboCaptureLocationParameter");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, Type) == 0x000008, "Member 'FEndDataTableChocoboCaptureLocationParameter::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, StrayFlag) == 0x000009, "Member 'FEndDataTableChocoboCaptureLocationParameter::StrayFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, ClearTrigger) == 0x00000C, "Member 'FEndDataTableChocoboCaptureLocationParameter::ClearTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, GameStartPoint) == 0x000014, "Member 'FEndDataTableChocoboCaptureLocationParameter::GameStartPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, GameOverPoint) == 0x00001C, "Member 'FEndDataTableChocoboCaptureLocationParameter::GameOverPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, RestartPoint) == 0x000024, "Member 'FEndDataTableChocoboCaptureLocationParameter::RestartPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, EscapePoint) == 0x00002C, "Member 'FEndDataTableChocoboCaptureLocationParameter::EscapePoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, Name) == 0x000034, "Member 'FEndDataTableChocoboCaptureLocationParameter::Name' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, GameRange) == 0x00003C, "Member 'FEndDataTableChocoboCaptureLocationParameter::GameRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, Reward) == 0x000040, "Member 'FEndDataTableChocoboCaptureLocationParameter::Reward' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, WalkSpeed) == 0x000048, "Member 'FEndDataTableChocoboCaptureLocationParameter::WalkSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, TurnInterval) == 0x00004C, "Member 'FEndDataTableChocoboCaptureLocationParameter::TurnInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, TurnIntervalRange) == 0x000050, "Member 'FEndDataTableChocoboCaptureLocationParameter::TurnIntervalRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, SeeRange) == 0x000054, "Member 'FEndDataTableChocoboCaptureLocationParameter::SeeRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, SeeAngle) == 0x000058, "Member 'FEndDataTableChocoboCaptureLocationParameter::SeeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, SeeRangeCaution) == 0x00005C, "Member 'FEndDataTableChocoboCaptureLocationParameter::SeeRangeCaution' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, SeeAngleCaution) == 0x000060, "Member 'FEndDataTableChocoboCaptureLocationParameter::SeeAngleCaution' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, SeeRangeHeat) == 0x000064, "Member 'FEndDataTableChocoboCaptureLocationParameter::SeeRangeHeat' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, SeeAngleHeat) == 0x000068, "Member 'FEndDataTableChocoboCaptureLocationParameter::SeeAngleHeat' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, NavRange) == 0x00006C, "Member 'FEndDataTableChocoboCaptureLocationParameter::NavRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, NavTime) == 0x000070, "Member 'FEndDataTableChocoboCaptureLocationParameter::NavTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, NavNextState) == 0x000074, "Member 'FEndDataTableChocoboCaptureLocationParameter::NavNextState' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, GlutDecay) == 0x000078, "Member 'FEndDataTableChocoboCaptureLocationParameter::GlutDecay' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, NormalUp) == 0x00007C, "Member 'FEndDataTableChocoboCaptureLocationParameter::NormalUp' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, NormalTimeToCaution) == 0x000080, "Member 'FEndDataTableChocoboCaptureLocationParameter::NormalTimeToCaution' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CautionUp) == 0x000084, "Member 'FEndDataTableChocoboCaptureLocationParameter::CautionUp' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CautionCancelTime) == 0x000088, "Member 'FEndDataTableChocoboCaptureLocationParameter::CautionCancelTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CautionCancelState) == 0x00008C, "Member 'FEndDataTableChocoboCaptureLocationParameter::CautionCancelState' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CautionTimeToHeat) == 0x000090, "Member 'FEndDataTableChocoboCaptureLocationParameter::CautionTimeToHeat' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, HeatUp) == 0x000094, "Member 'FEndDataTableChocoboCaptureLocationParameter::HeatUp' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, HeatCancelTime) == 0x000098, "Member 'FEndDataTableChocoboCaptureLocationParameter::HeatCancelTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, HeatCancelState) == 0x00009C, "Member 'FEndDataTableChocoboCaptureLocationParameter::HeatCancelState' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, DodgeFailed) == 0x0000A0, "Member 'FEndDataTableChocoboCaptureLocationParameter::DodgeFailed' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, TriggerBox_Array) == 0x0000A8, "Member 'FEndDataTableChocoboCaptureLocationParameter::TriggerBox_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, BushVolume) == 0x0000B8, "Member 'FEndDataTableChocoboCaptureLocationParameter::BushVolume' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, EffectSpline) == 0x0000C0, "Member 'FEndDataTableChocoboCaptureLocationParameter::EffectSpline' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, NormalDecayAll) == 0x0000C8, "Member 'FEndDataTableChocoboCaptureLocationParameter::NormalDecayAll' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CautionDecayAll) == 0x0000CC, "Member 'FEndDataTableChocoboCaptureLocationParameter::CautionDecayAll' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, HeatDecayAll) == 0x0000D0, "Member 'FEndDataTableChocoboCaptureLocationParameter::HeatDecayAll' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CautionRaiseRadius) == 0x0000D4, "Member 'FEndDataTableChocoboCaptureLocationParameter::CautionRaiseRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CautionRaiseMaxAdd) == 0x0000D8, "Member 'FEndDataTableChocoboCaptureLocationParameter::CautionRaiseMaxAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, TurnFollowAngle) == 0x0000DC, "Member 'FEndDataTableChocoboCaptureLocationParameter::TurnFollowAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, NotHideTime) == 0x0000E0, "Member 'FEndDataTableChocoboCaptureLocationParameter::NotHideTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, WanderingSpline) == 0x0000E4, "Member 'FEndDataTableChocoboCaptureLocationParameter::WanderingSpline' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, TurnPattern_Array) == 0x0000F0, "Member 'FEndDataTableChocoboCaptureLocationParameter::TurnPattern_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, StonePoint_Array) == 0x000100, "Member 'FEndDataTableChocoboCaptureLocationParameter::StonePoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, VegiPoint_Array) == 0x000110, "Member 'FEndDataTableChocoboCaptureLocationParameter::VegiPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, StayPoint_Array) == 0x000120, "Member 'FEndDataTableChocoboCaptureLocationParameter::StayPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, DistanceParam_Array) == 0x000130, "Member 'FEndDataTableChocoboCaptureLocationParameter::DistanceParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, Stray_Array) == 0x000140, "Member 'FEndDataTableChocoboCaptureLocationParameter::Stray_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, StraySleepVolumeID0) == 0x000150, "Member 'FEndDataTableChocoboCaptureLocationParameter::StraySleepVolumeID0' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, Watcher) == 0x000154, "Member 'FEndDataTableChocoboCaptureLocationParameter::Watcher' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, EnableLookAt) == 0x000155, "Member 'FEndDataTableChocoboCaptureLocationParameter::EnableLookAt' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CheckPointWork) == 0x000158, "Member 'FEndDataTableChocoboCaptureLocationParameter::CheckPointWork' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CheckPointInfoIDArray_Array) == 0x000160, "Member 'FEndDataTableChocoboCaptureLocationParameter::CheckPointInfoIDArray_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, FailedCountWork) == 0x000170, "Member 'FEndDataTableChocoboCaptureLocationParameter::FailedCountWork' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, chara_spec) == 0x000178, "Member 'FEndDataTableChocoboCaptureLocationParameter::chara_spec' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, IdleOverrideAnim) == 0x000180, "Member 'FEndDataTableChocoboCaptureLocationParameter::IdleOverrideAnim' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, MotionPath) == 0x000188, "Member 'FEndDataTableChocoboCaptureLocationParameter::MotionPath' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CartSwitch_Array) == 0x000190, "Member 'FEndDataTableChocoboCaptureLocationParameter::CartSwitch_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CartID_Array) == 0x0001A0, "Member 'FEndDataTableChocoboCaptureLocationParameter::CartID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, BalloonID_Array) == 0x0001B0, "Member 'FEndDataTableChocoboCaptureLocationParameter::BalloonID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, StoneTime) == 0x0001C0, "Member 'FEndDataTableChocoboCaptureLocationParameter::StoneTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, FailedAction) == 0x0001C4, "Member 'FEndDataTableChocoboCaptureLocationParameter::FailedAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, RetryAction) == 0x0001CC, "Member 'FEndDataTableChocoboCaptureLocationParameter::RetryAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, PauseRetireAction) == 0x0001D4, "Member 'FEndDataTableChocoboCaptureLocationParameter::PauseRetireAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, FailedCharaAct) == 0x0001DC, "Member 'FEndDataTableChocoboCaptureLocationParameter::FailedCharaAct' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CautionStartCharaAct) == 0x0001E4, "Member 'FEndDataTableChocoboCaptureLocationParameter::CautionStartCharaAct' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, CautionFinishCharaAct) == 0x0001EC, "Member 'FEndDataTableChocoboCaptureLocationParameter::CautionFinishCharaAct' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, IdleCharaAct) == 0x0001F4, "Member 'FEndDataTableChocoboCaptureLocationParameter::IdleCharaAct' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, Switch_Array) == 0x000200, "Member 'FEndDataTableChocoboCaptureLocationParameter::Switch_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, SwitchAct_Array) == 0x000210, "Member 'FEndDataTableChocoboCaptureLocationParameter::SwitchAct_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, EntryAction) == 0x000220, "Member 'FEndDataTableChocoboCaptureLocationParameter::EntryAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, EscapeVolume_Array) == 0x000228, "Member 'FEndDataTableChocoboCaptureLocationParameter::EscapeVolume_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureLocationParameter, InitializeWaitSec) == 0x000238, "Member 'FEndDataTableChocoboCaptureLocationParameter::InitializeWaitSec' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectShopItemAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShopItemAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShopItemAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShopItemAccessor");
static_assert(sizeof(FEndDataObjectShopItemAccessor) == 0x000020, "Wrong size on FEndDataObjectShopItemAccessor");

// ScriptStruct EndDataObject.EndDataTableNaviMapWrapper
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableNaviMapWrapper final : public FEndDataTableRowBase
{
public:
	class FName                                   DefaultNaviMapId;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StoryFlag_Array;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NaviMapId_Array;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableNaviMapWrapper) == 0x000008, "Wrong alignment on FEndDataTableNaviMapWrapper");
static_assert(sizeof(FEndDataTableNaviMapWrapper) == 0x000030, "Wrong size on FEndDataTableNaviMapWrapper");
static_assert(offsetof(FEndDataTableNaviMapWrapper, DefaultNaviMapId) == 0x000008, "Member 'FEndDataTableNaviMapWrapper::DefaultNaviMapId' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapWrapper, StoryFlag_Array) == 0x000010, "Member 'FEndDataTableNaviMapWrapper::StoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapWrapper, NaviMapId_Array) == 0x000020, "Member 'FEndDataTableNaviMapWrapper::NaviMapId_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectShopLayoutDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShopLayoutDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShopLayoutDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShopLayoutDataAccessor");
static_assert(sizeof(FEndDataObjectShopLayoutDataAccessor) == 0x000020, "Wrong size on FEndDataObjectShopLayoutDataAccessor");

// ScriptStruct EndDataObject.EndDataObjectShopListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectShopListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectShopListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectShopListAccessor");
static_assert(sizeof(FEndDataObjectShopListAccessor) == 0x000020, "Wrong size on FEndDataObjectShopListAccessor");

// ScriptStruct EndDataObject.EndDataObjectSituationActionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSituationActionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSituationActionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSituationActionAccessor");
static_assert(sizeof(FEndDataObjectSituationActionAccessor) == 0x000020, "Wrong size on FEndDataObjectSituationActionAccessor");

// ScriptStruct EndDataObject.EndDataObjectSituationTriggerAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSituationTriggerAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSituationTriggerAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSituationTriggerAccessor");
static_assert(sizeof(FEndDataObjectSituationTriggerAccessor) == 0x000020, "Wrong size on FEndDataObjectSituationTriggerAccessor");

// ScriptStruct EndDataObject.EndDataObjectStateAttributeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectStateAttributeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectStateAttributeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectStateAttributeAccessor");
static_assert(sizeof(FEndDataObjectStateAttributeAccessor) == 0x000020, "Wrong size on FEndDataObjectStateAttributeAccessor");

// ScriptStruct EndDataObject.EndDataTableHintAnimal
// 0x0160 (0x0168 - 0x0008)
struct FEndDataTableHintAnimal final : public FEndDataTableRowBase
{
public:
	class FName                                   CharaSpecID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FlyingType;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RouteOffsetHeight;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetHeight_Rest;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationRateScaleMin_Rest;                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationRateScaleMax_Rest;                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SpawnEffectName;                                   // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DespawnEffectName;                                 // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FreeIdleMotionName_Array;                          // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         FreeIdleMotionIntervalTimeMin;                     // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FreeIdleMotionIntervalTimeMax;                     // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BeginMoveMotionName_Array;                         // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   BeginMoveSEName;                                   // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           WaitIdleMotionName_Array;                          // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         WaitIdleMotionIntervalTimeMin;                     // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WaitIdleMotionIntervalTimeMax;                     // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EndMoveMotionName_Array;                           // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ArrivedIdleBeginMotionName_Array;                  // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ArrivedIdleLoopMotionName_Array;                   // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ArrivedIdleEndMotionName_Array;                    // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ArrivedIdleLoopTimeMin_Array;                      // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ArrivedIdleLoopTimeMax_Array;                      // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         ArrivedIdleMotionIntervalTimeMin;                  // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ArrivedIdleMotionIntervalTimeMax;                  // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HubCompleteMotionNameBegin;                        // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HubCompleteMotionNameLoop;                         // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HubCompleteMotionNameEnd;                          // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HubCompleteMotionNameCancel;                       // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BenchBreakMotionNameBegin;                         // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BenchBreakMotionNameLoop;                          // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BenchBreakMotionNameEnd;                           // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BenchBreakMotionNameAdd;                           // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InteractMotionName;                                // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InteractResponseAreaID;                            // 0x0130(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InteractResponseAreaPlayerID;                      // 0x0138(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InteractTextID;                                    // 0x0140(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InteractCameraID;                                  // 0x0148(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InteractSpacingDistance;                           // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpeedInvite;                                       // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpeedMin;                                          // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpeedMax;                                          // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RelativeSpeedNormal;                               // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RelativeSpeedAnimalAhead;                          // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableHintAnimal) == 0x000008, "Wrong alignment on FEndDataTableHintAnimal");
static_assert(sizeof(FEndDataTableHintAnimal) == 0x000168, "Wrong size on FEndDataTableHintAnimal");
static_assert(offsetof(FEndDataTableHintAnimal, CharaSpecID) == 0x000008, "Member 'FEndDataTableHintAnimal::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, FlyingType) == 0x000010, "Member 'FEndDataTableHintAnimal::FlyingType' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, RouteOffsetHeight) == 0x000014, "Member 'FEndDataTableHintAnimal::RouteOffsetHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, OffsetHeight_Rest) == 0x000018, "Member 'FEndDataTableHintAnimal::OffsetHeight_Rest' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, RotationRateScaleMin_Rest) == 0x00001C, "Member 'FEndDataTableHintAnimal::RotationRateScaleMin_Rest' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, RotationRateScaleMax_Rest) == 0x000020, "Member 'FEndDataTableHintAnimal::RotationRateScaleMax_Rest' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, SpawnEffectName) == 0x000024, "Member 'FEndDataTableHintAnimal::SpawnEffectName' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, DespawnEffectName) == 0x00002C, "Member 'FEndDataTableHintAnimal::DespawnEffectName' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, FreeIdleMotionName_Array) == 0x000038, "Member 'FEndDataTableHintAnimal::FreeIdleMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, FreeIdleMotionIntervalTimeMin) == 0x000048, "Member 'FEndDataTableHintAnimal::FreeIdleMotionIntervalTimeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, FreeIdleMotionIntervalTimeMax) == 0x00004C, "Member 'FEndDataTableHintAnimal::FreeIdleMotionIntervalTimeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, BeginMoveMotionName_Array) == 0x000050, "Member 'FEndDataTableHintAnimal::BeginMoveMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, BeginMoveSEName) == 0x000060, "Member 'FEndDataTableHintAnimal::BeginMoveSEName' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, WaitIdleMotionName_Array) == 0x000068, "Member 'FEndDataTableHintAnimal::WaitIdleMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, WaitIdleMotionIntervalTimeMin) == 0x000078, "Member 'FEndDataTableHintAnimal::WaitIdleMotionIntervalTimeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, WaitIdleMotionIntervalTimeMax) == 0x00007C, "Member 'FEndDataTableHintAnimal::WaitIdleMotionIntervalTimeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, EndMoveMotionName_Array) == 0x000080, "Member 'FEndDataTableHintAnimal::EndMoveMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, ArrivedIdleBeginMotionName_Array) == 0x000090, "Member 'FEndDataTableHintAnimal::ArrivedIdleBeginMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, ArrivedIdleLoopMotionName_Array) == 0x0000A0, "Member 'FEndDataTableHintAnimal::ArrivedIdleLoopMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, ArrivedIdleEndMotionName_Array) == 0x0000B0, "Member 'FEndDataTableHintAnimal::ArrivedIdleEndMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, ArrivedIdleLoopTimeMin_Array) == 0x0000C0, "Member 'FEndDataTableHintAnimal::ArrivedIdleLoopTimeMin_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, ArrivedIdleLoopTimeMax_Array) == 0x0000D0, "Member 'FEndDataTableHintAnimal::ArrivedIdleLoopTimeMax_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, ArrivedIdleMotionIntervalTimeMin) == 0x0000E0, "Member 'FEndDataTableHintAnimal::ArrivedIdleMotionIntervalTimeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, ArrivedIdleMotionIntervalTimeMax) == 0x0000E4, "Member 'FEndDataTableHintAnimal::ArrivedIdleMotionIntervalTimeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, HubCompleteMotionNameBegin) == 0x0000E8, "Member 'FEndDataTableHintAnimal::HubCompleteMotionNameBegin' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, HubCompleteMotionNameLoop) == 0x0000F0, "Member 'FEndDataTableHintAnimal::HubCompleteMotionNameLoop' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, HubCompleteMotionNameEnd) == 0x0000F8, "Member 'FEndDataTableHintAnimal::HubCompleteMotionNameEnd' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, HubCompleteMotionNameCancel) == 0x000100, "Member 'FEndDataTableHintAnimal::HubCompleteMotionNameCancel' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, BenchBreakMotionNameBegin) == 0x000108, "Member 'FEndDataTableHintAnimal::BenchBreakMotionNameBegin' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, BenchBreakMotionNameLoop) == 0x000110, "Member 'FEndDataTableHintAnimal::BenchBreakMotionNameLoop' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, BenchBreakMotionNameEnd) == 0x000118, "Member 'FEndDataTableHintAnimal::BenchBreakMotionNameEnd' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, BenchBreakMotionNameAdd) == 0x000120, "Member 'FEndDataTableHintAnimal::BenchBreakMotionNameAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, InteractMotionName) == 0x000128, "Member 'FEndDataTableHintAnimal::InteractMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, InteractResponseAreaID) == 0x000130, "Member 'FEndDataTableHintAnimal::InteractResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, InteractResponseAreaPlayerID) == 0x000138, "Member 'FEndDataTableHintAnimal::InteractResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, InteractTextID) == 0x000140, "Member 'FEndDataTableHintAnimal::InteractTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, InteractCameraID) == 0x000148, "Member 'FEndDataTableHintAnimal::InteractCameraID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, InteractSpacingDistance) == 0x000150, "Member 'FEndDataTableHintAnimal::InteractSpacingDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, SpeedInvite) == 0x000154, "Member 'FEndDataTableHintAnimal::SpeedInvite' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, SpeedMin) == 0x000158, "Member 'FEndDataTableHintAnimal::SpeedMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, SpeedMax) == 0x00015C, "Member 'FEndDataTableHintAnimal::SpeedMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, RelativeSpeedNormal) == 0x000160, "Member 'FEndDataTableHintAnimal::RelativeSpeedNormal' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimal, RelativeSpeedAnimalAhead) == 0x000164, "Member 'FEndDataTableHintAnimal::RelativeSpeedAnimalAhead' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectStateConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectStateConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectStateConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectStateConditionAccessor");
static_assert(sizeof(FEndDataObjectStateConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectStateConditionAccessor");

// ScriptStruct EndDataObject.EndDataObjectSteeringGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSteeringGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSteeringGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSteeringGroupAccessor");
static_assert(sizeof(FEndDataObjectSteeringGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectSteeringGroupAccessor");

// ScriptStruct EndDataObject.EndDataTableQuest
// 0x01E0 (0x01E8 - 0x0008)
struct FEndDataTableQuest final : public FEndDataTableRowBase
{
public:
	uint16                                        UniqueIndex;                                       // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsBranch;                                          // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        OrderIndexForUI;                                   // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StoryJumpID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BranchStoryFlagID;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BranchQuestID;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ItemName;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BoardDescription;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Description;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ClearedDescription;                                // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ClientNameTextID;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ClientLocationNameTextID;                          // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ImageName;                                         // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ClearedImageName;                                  // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 FavoriteCharacterImageName;                        // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ViewCharacterImageStoryFlag;                       // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LocationId;                                        // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   QuestResetID;                                      // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   QuestClearID;                                      // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ExclusiveObjectID;                                 // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ObjectListID;                                      // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuspendStoryFlag;                                  // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MenuOpenStoryFlag;                                 // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CanAcceptStoryFlag;                                // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AcceptedStoryFlag;                                 // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CompleteStoryFlag;                                 // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CompleteAssignStateChange;                         // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BronzeRankStoryFlag;                               // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BronzRankSnapStoryFlag;                            // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BronzeRankHistoryStoryFlag;                        // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SilverRankSotryFlag;                               // 0x0130(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SilverRankSnapStoryFlag;                           // 0x0138(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SilverRankHistorySotryFlag;                        // 0x0140(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GoldRankStoryFlag;                                 // 0x0148(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GoldRankSnapStoryFlag;                             // 0x0150(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GoldRankHistoryStoryFlag;                          // 0x0158(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ClearHistoryStoryFlag;                             // 0x0160(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ClearStateSaveStoryFlag;                           // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CompleteStateTriggerIDAfterMessage;                // 0x0170(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         GroupImageName_Array;                              // 0x0178(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         GroupItemName_Array;                               // 0x0188(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         GroupDescription_Array;                            // 0x0198(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         OverrideNumerator_Array;                           // 0x01A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         OverrideDenominator_Array;                         // 0x01B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Condition_Array;                                   // 0x01C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           QuestTask_Array;                                   // 0x01D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableQuest) == 0x000008, "Wrong alignment on FEndDataTableQuest");
static_assert(sizeof(FEndDataTableQuest) == 0x0001E8, "Wrong size on FEndDataTableQuest");
static_assert(offsetof(FEndDataTableQuest, UniqueIndex) == 0x000008, "Member 'FEndDataTableQuest::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, IsBranch) == 0x00000A, "Member 'FEndDataTableQuest::IsBranch' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, OrderIndexForUI) == 0x00000C, "Member 'FEndDataTableQuest::OrderIndexForUI' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, StoryJumpID) == 0x000010, "Member 'FEndDataTableQuest::StoryJumpID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, BranchStoryFlagID) == 0x000018, "Member 'FEndDataTableQuest::BranchStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, BranchQuestID) == 0x000020, "Member 'FEndDataTableQuest::BranchQuestID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ItemName) == 0x000028, "Member 'FEndDataTableQuest::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, BoardDescription) == 0x000038, "Member 'FEndDataTableQuest::BoardDescription' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, Description) == 0x000048, "Member 'FEndDataTableQuest::Description' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ClearedDescription) == 0x000058, "Member 'FEndDataTableQuest::ClearedDescription' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ClientNameTextID) == 0x000068, "Member 'FEndDataTableQuest::ClientNameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ClientLocationNameTextID) == 0x000078, "Member 'FEndDataTableQuest::ClientLocationNameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ImageName) == 0x000088, "Member 'FEndDataTableQuest::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ClearedImageName) == 0x000098, "Member 'FEndDataTableQuest::ClearedImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, FavoriteCharacterImageName) == 0x0000A8, "Member 'FEndDataTableQuest::FavoriteCharacterImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ViewCharacterImageStoryFlag) == 0x0000B8, "Member 'FEndDataTableQuest::ViewCharacterImageStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, LocationId) == 0x0000C0, "Member 'FEndDataTableQuest::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, QuestResetID) == 0x0000C8, "Member 'FEndDataTableQuest::QuestResetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, QuestClearID) == 0x0000D0, "Member 'FEndDataTableQuest::QuestClearID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ExclusiveObjectID) == 0x0000D8, "Member 'FEndDataTableQuest::ExclusiveObjectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ObjectListID) == 0x0000E0, "Member 'FEndDataTableQuest::ObjectListID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, SuspendStoryFlag) == 0x0000E8, "Member 'FEndDataTableQuest::SuspendStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, MenuOpenStoryFlag) == 0x0000F0, "Member 'FEndDataTableQuest::MenuOpenStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, CanAcceptStoryFlag) == 0x0000F8, "Member 'FEndDataTableQuest::CanAcceptStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, AcceptedStoryFlag) == 0x000100, "Member 'FEndDataTableQuest::AcceptedStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, CompleteStoryFlag) == 0x000108, "Member 'FEndDataTableQuest::CompleteStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, CompleteAssignStateChange) == 0x000110, "Member 'FEndDataTableQuest::CompleteAssignStateChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, BronzeRankStoryFlag) == 0x000118, "Member 'FEndDataTableQuest::BronzeRankStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, BronzRankSnapStoryFlag) == 0x000120, "Member 'FEndDataTableQuest::BronzRankSnapStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, BronzeRankHistoryStoryFlag) == 0x000128, "Member 'FEndDataTableQuest::BronzeRankHistoryStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, SilverRankSotryFlag) == 0x000130, "Member 'FEndDataTableQuest::SilverRankSotryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, SilverRankSnapStoryFlag) == 0x000138, "Member 'FEndDataTableQuest::SilverRankSnapStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, SilverRankHistorySotryFlag) == 0x000140, "Member 'FEndDataTableQuest::SilverRankHistorySotryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, GoldRankStoryFlag) == 0x000148, "Member 'FEndDataTableQuest::GoldRankStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, GoldRankSnapStoryFlag) == 0x000150, "Member 'FEndDataTableQuest::GoldRankSnapStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, GoldRankHistoryStoryFlag) == 0x000158, "Member 'FEndDataTableQuest::GoldRankHistoryStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ClearHistoryStoryFlag) == 0x000160, "Member 'FEndDataTableQuest::ClearHistoryStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, ClearStateSaveStoryFlag) == 0x000168, "Member 'FEndDataTableQuest::ClearStateSaveStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, CompleteStateTriggerIDAfterMessage) == 0x000170, "Member 'FEndDataTableQuest::CompleteStateTriggerIDAfterMessage' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, GroupImageName_Array) == 0x000178, "Member 'FEndDataTableQuest::GroupImageName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, GroupItemName_Array) == 0x000188, "Member 'FEndDataTableQuest::GroupItemName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, GroupDescription_Array) == 0x000198, "Member 'FEndDataTableQuest::GroupDescription_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, OverrideNumerator_Array) == 0x0001A8, "Member 'FEndDataTableQuest::OverrideNumerator_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, OverrideDenominator_Array) == 0x0001B8, "Member 'FEndDataTableQuest::OverrideDenominator_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, Condition_Array) == 0x0001C8, "Member 'FEndDataTableQuest::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuest, QuestTask_Array) == 0x0001D8, "Member 'FEndDataTableQuest::QuestTask_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectStoryAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectStoryAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectStoryAccessor) == 0x000008, "Wrong alignment on FEndDataObjectStoryAccessor");
static_assert(sizeof(FEndDataObjectStoryAccessor) == 0x000020, "Wrong size on FEndDataObjectStoryAccessor");

// ScriptStruct EndDataObject.EndDataObjectStoryFlagAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectStoryFlagAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectStoryFlagAccessor) == 0x000008, "Wrong alignment on FEndDataObjectStoryFlagAccessor");
static_assert(sizeof(FEndDataObjectStoryFlagAccessor) == 0x000020, "Wrong size on FEndDataObjectStoryFlagAccessor");

// ScriptStruct EndDataObject.EndDataTableIconPriorityData
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableIconPriorityData final : public FEndDataTableRowBase
{
public:
	uint8                                         IconGroupType;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         iconIndex;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SortValue;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableIconPriorityData) == 0x000008, "Wrong alignment on FEndDataTableIconPriorityData");
static_assert(sizeof(FEndDataTableIconPriorityData) == 0x000018, "Wrong size on FEndDataTableIconPriorityData");
static_assert(offsetof(FEndDataTableIconPriorityData, IconGroupType) == 0x000008, "Member 'FEndDataTableIconPriorityData::IconGroupType' has a wrong offset!");
static_assert(offsetof(FEndDataTableIconPriorityData, iconIndex) == 0x00000C, "Member 'FEndDataTableIconPriorityData::iconIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableIconPriorityData, SortValue) == 0x000010, "Member 'FEndDataTableIconPriorityData::SortValue' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectStoryProgressAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectStoryProgressAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectStoryProgressAccessor) == 0x000008, "Wrong alignment on FEndDataObjectStoryProgressAccessor");
static_assert(sizeof(FEndDataObjectStoryProgressAccessor) == 0x000020, "Wrong size on FEndDataObjectStoryProgressAccessor");

// ScriptStruct EndDataObject.EndDataObjectSubStoryAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSubStoryAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSubStoryAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSubStoryAccessor");
static_assert(sizeof(FEndDataObjectSubStoryAccessor) == 0x000020, "Wrong size on FEndDataObjectSubStoryAccessor");

// ScriptStruct EndDataObject.EndDataTableNaviBGMInfo
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableNaviBGMInfo final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         FootBGMSetIDList_Array;                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 SlotNumberList_Array;                              // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableNaviBGMInfo) == 0x000008, "Wrong alignment on FEndDataTableNaviBGMInfo");
static_assert(sizeof(FEndDataTableNaviBGMInfo) == 0x000028, "Wrong size on FEndDataTableNaviBGMInfo");
static_assert(offsetof(FEndDataTableNaviBGMInfo, FootBGMSetIDList_Array) == 0x000008, "Member 'FEndDataTableNaviBGMInfo::FootBGMSetIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviBGMInfo, SlotNumberList_Array) == 0x000018, "Member 'FEndDataTableNaviBGMInfo::SlotNumberList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectSubtitleChangeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSubtitleChangeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSubtitleChangeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSubtitleChangeAccessor");
static_assert(sizeof(FEndDataObjectSubtitleChangeAccessor) == 0x000020, "Wrong size on FEndDataObjectSubtitleChangeAccessor");

// ScriptStruct EndDataObject.EndDataObjectSyncEndOneWeaponAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectSyncEndOneWeaponAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectSyncEndOneWeaponAccessor) == 0x000008, "Wrong alignment on FEndDataObjectSyncEndOneWeaponAccessor");
static_assert(sizeof(FEndDataObjectSyncEndOneWeaponAccessor) == 0x000020, "Wrong size on FEndDataObjectSyncEndOneWeaponAccessor");

// ScriptStruct EndDataObject.EndDataTablePianoMonotoneAssign
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTablePianoMonotoneAssign final : public FEndDataTableRowBase
{
public:
	uint8                                         HandType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         KeyAssign;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Semitone;                                          // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OctaveInt;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Color;                                             // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SoundName;                                         // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SocketName;                                        // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextId;                                            // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePianoMonotoneAssign) == 0x000008, "Wrong alignment on FEndDataTablePianoMonotoneAssign");
static_assert(sizeof(FEndDataTablePianoMonotoneAssign) == 0x000038, "Wrong size on FEndDataTablePianoMonotoneAssign");
static_assert(offsetof(FEndDataTablePianoMonotoneAssign, HandType) == 0x000008, "Member 'FEndDataTablePianoMonotoneAssign::HandType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoMonotoneAssign, KeyAssign) == 0x000009, "Member 'FEndDataTablePianoMonotoneAssign::KeyAssign' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoMonotoneAssign, Semitone) == 0x00000A, "Member 'FEndDataTablePianoMonotoneAssign::Semitone' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoMonotoneAssign, OctaveInt) == 0x00000C, "Member 'FEndDataTablePianoMonotoneAssign::OctaveInt' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoMonotoneAssign, Color) == 0x000010, "Member 'FEndDataTablePianoMonotoneAssign::Color' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoMonotoneAssign, SoundName) == 0x000014, "Member 'FEndDataTablePianoMonotoneAssign::SoundName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoMonotoneAssign, SocketName) == 0x00001C, "Member 'FEndDataTablePianoMonotoneAssign::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoMonotoneAssign, TextId) == 0x000028, "Member 'FEndDataTablePianoMonotoneAssign::TextId' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectTalkGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTalkGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTalkGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTalkGroupAccessor");
static_assert(sizeof(FEndDataObjectTalkGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectTalkGroupAccessor");

// ScriptStruct EndDataObject.EndDataObjectTalkOnEndBattleVoiceSetAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTalkOnEndBattleVoiceSetAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTalkOnEndBattleVoiceSetAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTalkOnEndBattleVoiceSetAccessor");
static_assert(sizeof(FEndDataObjectTalkOnEndBattleVoiceSetAccessor) == 0x000020, "Wrong size on FEndDataObjectTalkOnEndBattleVoiceSetAccessor");

// ScriptStruct EndDataObject.EndDataTableObjectEnemy
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTableObjectEnemy final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ActorName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   battleSceneID;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaDaylightID;                            // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaDarkID;                                // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaNoiseID;                               // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BattleCharaSpecID;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OverridePossessionItemID;                          // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaID;                                    // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaPlayerID;                              // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TweetResponseAreaID;                               // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TweetResponseAreaPlayerID;                         // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         AttributeList_Array;                               // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ForceCreateActor;                                  // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NearFarFadeState;                                  // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Important;                                         // 0x0082(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableObjectEnemy) == 0x000008, "Wrong alignment on FEndDataTableObjectEnemy");
static_assert(sizeof(FEndDataTableObjectEnemy) == 0x000088, "Wrong size on FEndDataTableObjectEnemy");
static_assert(offsetof(FEndDataTableObjectEnemy, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectEnemy::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, Priority) == 0x00000C, "Member 'FEndDataTableObjectEnemy::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ActorName) == 0x000010, "Member 'FEndDataTableObjectEnemy::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, battleSceneID) == 0x000020, "Member 'FEndDataTableObjectEnemy::battleSceneID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ResponseAreaDaylightID) == 0x000028, "Member 'FEndDataTableObjectEnemy::ResponseAreaDaylightID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ResponseAreaDarkID) == 0x000030, "Member 'FEndDataTableObjectEnemy::ResponseAreaDarkID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ResponseAreaNoiseID) == 0x000038, "Member 'FEndDataTableObjectEnemy::ResponseAreaNoiseID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, BattleCharaSpecID) == 0x000040, "Member 'FEndDataTableObjectEnemy::BattleCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, OverridePossessionItemID) == 0x000048, "Member 'FEndDataTableObjectEnemy::OverridePossessionItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ResponseAreaID) == 0x000050, "Member 'FEndDataTableObjectEnemy::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ResponseAreaPlayerID) == 0x000058, "Member 'FEndDataTableObjectEnemy::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, TweetResponseAreaID) == 0x000060, "Member 'FEndDataTableObjectEnemy::TweetResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, TweetResponseAreaPlayerID) == 0x000068, "Member 'FEndDataTableObjectEnemy::TweetResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, AttributeList_Array) == 0x000070, "Member 'FEndDataTableObjectEnemy::AttributeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ForceCreateActor) == 0x000080, "Member 'FEndDataTableObjectEnemy::ForceCreateActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, NearFarFadeState) == 0x000081, "Member 'FEndDataTableObjectEnemy::NearFarFadeState' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, Important) == 0x000082, "Member 'FEndDataTableObjectEnemy::Important' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectTalkStateAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTalkStateAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTalkStateAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTalkStateAccessor");
static_assert(sizeof(FEndDataObjectTalkStateAccessor) == 0x000020, "Wrong size on FEndDataObjectTalkStateAccessor");

// ScriptStruct EndDataObject.EndDataObjectTestPlayModeSettingDataAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTestPlayModeSettingDataAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTestPlayModeSettingDataAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTestPlayModeSettingDataAccessor");
static_assert(sizeof(FEndDataObjectTestPlayModeSettingDataAccessor) == 0x000020, "Wrong size on FEndDataObjectTestPlayModeSettingDataAccessor");

// ScriptStruct EndDataObject.EndDataTablePlannerEventLocationList
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTablePlannerEventLocationList final : public FEndDataTableRowBase
{
public:
	class FName                                   Value;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SequencerValue;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlannerEventLocationList) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventLocationList");
static_assert(sizeof(FEndDataTablePlannerEventLocationList) == 0x000018, "Wrong size on FEndDataTablePlannerEventLocationList");
static_assert(offsetof(FEndDataTablePlannerEventLocationList, Value) == 0x000008, "Member 'FEndDataTablePlannerEventLocationList::Value' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventLocationList, SequencerValue) == 0x000010, "Member 'FEndDataTablePlannerEventLocationList::SequencerValue' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectToroccoMiniGameAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectToroccoMiniGameAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectToroccoMiniGameAccessor) == 0x000008, "Wrong alignment on FEndDataObjectToroccoMiniGameAccessor");
static_assert(sizeof(FEndDataObjectToroccoMiniGameAccessor) == 0x000020, "Wrong size on FEndDataObjectToroccoMiniGameAccessor");

// ScriptStruct EndDataObject.EndDataObjectTreasureResourceAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTreasureResourceAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTreasureResourceAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTreasureResourceAccessor");
static_assert(sizeof(FEndDataObjectTreasureResourceAccessor) == 0x000020, "Wrong size on FEndDataObjectTreasureResourceAccessor");

// ScriptStruct EndDataObject.EndDataTableObjectPlannerLevelSet
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableObjectPlannerLevelSet final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         AttributeList_Array;                               // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableObjectPlannerLevelSet) == 0x000008, "Wrong alignment on FEndDataTableObjectPlannerLevelSet");
static_assert(sizeof(FEndDataTableObjectPlannerLevelSet) == 0x000020, "Wrong size on FEndDataTableObjectPlannerLevelSet");
static_assert(offsetof(FEndDataTableObjectPlannerLevelSet, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectPlannerLevelSet::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectPlannerLevelSet, Priority) == 0x00000C, "Member 'FEndDataTableObjectPlannerLevelSet::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectPlannerLevelSet, AttributeList_Array) == 0x000010, "Member 'FEndDataTableObjectPlannerLevelSet::AttributeList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectTriggerEffectAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTriggerEffectAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTriggerEffectAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTriggerEffectAccessor");
static_assert(sizeof(FEndDataObjectTriggerEffectAccessor) == 0x000020, "Wrong size on FEndDataObjectTriggerEffectAccessor");

// ScriptStruct EndDataObject.EndDataObjectTrophyAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectTrophyAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectTrophyAccessor) == 0x000008, "Wrong alignment on FEndDataObjectTrophyAccessor");
static_assert(sizeof(FEndDataObjectTrophyAccessor) == 0x000020, "Wrong size on FEndDataObjectTrophyAccessor");

// ScriptStruct EndDataObject.EndDataTableCardGamePresetDeck
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableCardGamePresetDeck final : public FEndDataTableRowBase
{
public:
	class FName                                   DeckID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DeckTextId;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 HelpTextId;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CardSet_Array;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   StoryFlagId;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGamePresetDeck) == 0x000008, "Wrong alignment on FEndDataTableCardGamePresetDeck");
static_assert(sizeof(FEndDataTableCardGamePresetDeck) == 0x000048, "Wrong size on FEndDataTableCardGamePresetDeck");
static_assert(offsetof(FEndDataTableCardGamePresetDeck, DeckID) == 0x000008, "Member 'FEndDataTableCardGamePresetDeck::DeckID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGamePresetDeck, DeckTextId) == 0x000010, "Member 'FEndDataTableCardGamePresetDeck::DeckTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGamePresetDeck, HelpTextId) == 0x000020, "Member 'FEndDataTableCardGamePresetDeck::HelpTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGamePresetDeck, CardSet_Array) == 0x000030, "Member 'FEndDataTableCardGamePresetDeck::CardSet_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGamePresetDeck, StoryFlagId) == 0x000040, "Member 'FEndDataTableCardGamePresetDeck::StoryFlagId' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectUniqueActionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectUniqueActionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectUniqueActionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectUniqueActionAccessor");
static_assert(sizeof(FEndDataObjectUniqueActionAccessor) == 0x000020, "Wrong size on FEndDataObjectUniqueActionAccessor");

// ScriptStruct EndDataObject.EndDataObjectUniqueActionPropertyAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectUniqueActionPropertyAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectUniqueActionPropertyAccessor) == 0x000008, "Wrong alignment on FEndDataObjectUniqueActionPropertyAccessor");
static_assert(sizeof(FEndDataObjectUniqueActionPropertyAccessor) == 0x000020, "Wrong size on FEndDataObjectUniqueActionPropertyAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboCraftLocationParameter
// 0x00D8 (0x00E0 - 0x0008)
struct FEndDataTableChocoboCraftLocationParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   LocationId;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetHub;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Wild;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetQuest;                                       // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PrevSpline;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Recipe;                                            // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxItemNumber;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DigMotionName;                                     // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DigStartTrigger;                                   // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DigTorigger;                                       // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SmellDistanceCloseRange;                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SmellLogCloseRange;                                // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SmellDistanceMediumRange;                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SmellLogMediumRange;                               // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SmellDistanceFarRange;                             // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SmellLogFarRange;                                  // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SmellRange;                                        // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DigRange;                                          // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DiscoveryEffectType;                               // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          VFXVisibleFlag;                                    // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StoryFlag;                                         // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EffectDisplayBattleFlag;                           // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GroupId;                                           // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SmellDiscoveryRange;                               // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetItemSpecID;                                  // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Residue_Array;                                     // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int8                                          SameGroup;                                         // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          MIssRead;                                          // 0x00B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverTrue;                                          // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OverFalse;                                         // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          CraftMode;                                         // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StayPoint_Array;                                   // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboCraftLocationParameter) == 0x000008, "Wrong alignment on FEndDataTableChocoboCraftLocationParameter");
static_assert(sizeof(FEndDataTableChocoboCraftLocationParameter) == 0x0000E0, "Wrong size on FEndDataTableChocoboCraftLocationParameter");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, LocationId) == 0x000008, "Member 'FEndDataTableChocoboCraftLocationParameter::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, TargetHub) == 0x000010, "Member 'FEndDataTableChocoboCraftLocationParameter::TargetHub' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, Wild) == 0x000018, "Member 'FEndDataTableChocoboCraftLocationParameter::Wild' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, TargetQuest) == 0x00001C, "Member 'FEndDataTableChocoboCraftLocationParameter::TargetQuest' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, PrevSpline) == 0x000024, "Member 'FEndDataTableChocoboCraftLocationParameter::PrevSpline' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, Recipe) == 0x000028, "Member 'FEndDataTableChocoboCraftLocationParameter::Recipe' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, MaxItemNumber) == 0x000030, "Member 'FEndDataTableChocoboCraftLocationParameter::MaxItemNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, DigMotionName) == 0x000034, "Member 'FEndDataTableChocoboCraftLocationParameter::DigMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, DigStartTrigger) == 0x00003C, "Member 'FEndDataTableChocoboCraftLocationParameter::DigStartTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, DigTorigger) == 0x000044, "Member 'FEndDataTableChocoboCraftLocationParameter::DigTorigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, SmellDistanceCloseRange) == 0x00004C, "Member 'FEndDataTableChocoboCraftLocationParameter::SmellDistanceCloseRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, SmellLogCloseRange) == 0x000050, "Member 'FEndDataTableChocoboCraftLocationParameter::SmellLogCloseRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, SmellDistanceMediumRange) == 0x000058, "Member 'FEndDataTableChocoboCraftLocationParameter::SmellDistanceMediumRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, SmellLogMediumRange) == 0x00005C, "Member 'FEndDataTableChocoboCraftLocationParameter::SmellLogMediumRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, SmellDistanceFarRange) == 0x000064, "Member 'FEndDataTableChocoboCraftLocationParameter::SmellDistanceFarRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, SmellLogFarRange) == 0x000068, "Member 'FEndDataTableChocoboCraftLocationParameter::SmellLogFarRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, SmellRange) == 0x000070, "Member 'FEndDataTableChocoboCraftLocationParameter::SmellRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, DigRange) == 0x000074, "Member 'FEndDataTableChocoboCraftLocationParameter::DigRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, DiscoveryEffectType) == 0x000078, "Member 'FEndDataTableChocoboCraftLocationParameter::DiscoveryEffectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, VFXVisibleFlag) == 0x00007C, "Member 'FEndDataTableChocoboCraftLocationParameter::VFXVisibleFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, StoryFlag) == 0x000080, "Member 'FEndDataTableChocoboCraftLocationParameter::StoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, EffectDisplayBattleFlag) == 0x000088, "Member 'FEndDataTableChocoboCraftLocationParameter::EffectDisplayBattleFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, GroupId) == 0x000090, "Member 'FEndDataTableChocoboCraftLocationParameter::GroupId' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, SmellDiscoveryRange) == 0x000098, "Member 'FEndDataTableChocoboCraftLocationParameter::SmellDiscoveryRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, TargetItemSpecID) == 0x00009C, "Member 'FEndDataTableChocoboCraftLocationParameter::TargetItemSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, Residue_Array) == 0x0000A8, "Member 'FEndDataTableChocoboCraftLocationParameter::Residue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, SameGroup) == 0x0000B8, "Member 'FEndDataTableChocoboCraftLocationParameter::SameGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, MIssRead) == 0x0000B9, "Member 'FEndDataTableChocoboCraftLocationParameter::MIssRead' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, OverTrue) == 0x0000BC, "Member 'FEndDataTableChocoboCraftLocationParameter::OverTrue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, OverFalse) == 0x0000C4, "Member 'FEndDataTableChocoboCraftLocationParameter::OverFalse' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, CraftMode) == 0x0000CC, "Member 'FEndDataTableChocoboCraftLocationParameter::CraftMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCraftLocationParameter, StayPoint_Array) == 0x0000D0, "Member 'FEndDataTableChocoboCraftLocationParameter::StayPoint_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectUniqueActionSearchLightAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectUniqueActionSearchLightAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectUniqueActionSearchLightAccessor) == 0x000008, "Wrong alignment on FEndDataObjectUniqueActionSearchLightAccessor");
static_assert(sizeof(FEndDataObjectUniqueActionSearchLightAccessor) == 0x000020, "Wrong size on FEndDataObjectUniqueActionSearchLightAccessor");

// ScriptStruct EndDataObject.EndDataObjectVRSafeListAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectVRSafeListAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectVRSafeListAccessor) == 0x000008, "Wrong alignment on FEndDataObjectVRSafeListAccessor");
static_assert(sizeof(FEndDataObjectVRSafeListAccessor) == 0x000020, "Wrong size on FEndDataObjectVRSafeListAccessor");

// ScriptStruct EndDataObject.EndDataTableChapterReset
// 0x00D8 (0x00E0 - 0x0008)
struct FEndDataTableChapterReset final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ObjectID_Array;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AttributeName_Array;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateChangeID_Array;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StoryFlag_Array;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           OnStoryFlag_Array;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Item_Array;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResetItemID_Array;                                 // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ResetItemCount_Array;                              // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint32>                                ResidentWorkUniqueIndex_Array;                     // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LocationWorkLocationId_Array;                      // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint32>                                LocationWorkUniqueIndex_Array;                     // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResetObjectTreasureId_Array;                       // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResetObjectTreasureLocationId_Array;               // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   NextID;                                            // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChapterReset) == 0x000008, "Wrong alignment on FEndDataTableChapterReset");
static_assert(sizeof(FEndDataTableChapterReset) == 0x0000E0, "Wrong size on FEndDataTableChapterReset");
static_assert(offsetof(FEndDataTableChapterReset, ObjectID_Array) == 0x000008, "Member 'FEndDataTableChapterReset::ObjectID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, AttributeName_Array) == 0x000018, "Member 'FEndDataTableChapterReset::AttributeName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, StateChangeID_Array) == 0x000028, "Member 'FEndDataTableChapterReset::StateChangeID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, StoryFlag_Array) == 0x000038, "Member 'FEndDataTableChapterReset::StoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, OnStoryFlag_Array) == 0x000048, "Member 'FEndDataTableChapterReset::OnStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, Item_Array) == 0x000058, "Member 'FEndDataTableChapterReset::Item_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, ResetItemID_Array) == 0x000068, "Member 'FEndDataTableChapterReset::ResetItemID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, ResetItemCount_Array) == 0x000078, "Member 'FEndDataTableChapterReset::ResetItemCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, ResidentWorkUniqueIndex_Array) == 0x000088, "Member 'FEndDataTableChapterReset::ResidentWorkUniqueIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, LocationWorkLocationId_Array) == 0x000098, "Member 'FEndDataTableChapterReset::LocationWorkLocationId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, LocationWorkUniqueIndex_Array) == 0x0000A8, "Member 'FEndDataTableChapterReset::LocationWorkUniqueIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, ResetObjectTreasureId_Array) == 0x0000B8, "Member 'FEndDataTableChapterReset::ResetObjectTreasureId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, ResetObjectTreasureLocationId_Array) == 0x0000C8, "Member 'FEndDataTableChapterReset::ResetObjectTreasureLocationId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterReset, NextID) == 0x0000D8, "Member 'FEndDataTableChapterReset::NextID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectWeaponUpgradeAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWeaponUpgradeAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWeaponUpgradeAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWeaponUpgradeAccessor");
static_assert(sizeof(FEndDataObjectWeaponUpgradeAccessor) == 0x000020, "Wrong size on FEndDataObjectWeaponUpgradeAccessor");

// ScriptStruct EndDataObject.EndDataObjectWheelieResetlLocationAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWheelieResetlLocationAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWheelieResetlLocationAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWheelieResetlLocationAccessor");
static_assert(sizeof(FEndDataObjectWheelieResetlLocationAccessor) == 0x000020, "Wrong size on FEndDataObjectWheelieResetlLocationAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceCourseData
// 0x00B0 (0x00B8 - 0x0008)
struct FEndDataTableChocoboRaceCourseData final : public FEndDataTableRowBase
{
public:
	uint8                                         RaceMode;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CourseRank;                                        // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CourseNameTextID;                                  // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DescriptionTextID;                                 // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CourseImage;                                       // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EntryFee;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TargetTime;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EasyModeTargetTime;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HardModeTargetTime;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FirstRewardID;                                     // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SecondRewardID;                                    // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Rank1RewardID;                                     // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Rank2RewardID;                                     // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Rank3RewardID;                                     // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CourseOpenFlagID;                                  // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CourseClearFlagID;                                 // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CourseReadFlagID;                                  // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CourseUnlockedFlagID;                              // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LocationId;                                        // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RivalGroupID;                                      // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SpeedAdjustDataID;                                 // 0x008C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CourseStreamingVolumeID;                           // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GimmickStreamingVolumeID;                          // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BestTimeLocationWorkID;                            // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartPVStateTrigger;                               // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StoryCourse;                                       // 0x00B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboRaceCourseData) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceCourseData");
static_assert(sizeof(FEndDataTableChocoboRaceCourseData) == 0x0000B8, "Wrong size on FEndDataTableChocoboRaceCourseData");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, RaceMode) == 0x000008, "Member 'FEndDataTableChocoboRaceCourseData::RaceMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, CourseRank) == 0x000009, "Member 'FEndDataTableChocoboRaceCourseData::CourseRank' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, CourseNameTextID) == 0x00000C, "Member 'FEndDataTableChocoboRaceCourseData::CourseNameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, DescriptionTextID) == 0x000014, "Member 'FEndDataTableChocoboRaceCourseData::DescriptionTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, CourseImage) == 0x00001C, "Member 'FEndDataTableChocoboRaceCourseData::CourseImage' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, EntryFee) == 0x000024, "Member 'FEndDataTableChocoboRaceCourseData::EntryFee' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, TargetTime) == 0x000028, "Member 'FEndDataTableChocoboRaceCourseData::TargetTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, EasyModeTargetTime) == 0x00002C, "Member 'FEndDataTableChocoboRaceCourseData::EasyModeTargetTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, HardModeTargetTime) == 0x000030, "Member 'FEndDataTableChocoboRaceCourseData::HardModeTargetTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, FirstRewardID) == 0x000034, "Member 'FEndDataTableChocoboRaceCourseData::FirstRewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, SecondRewardID) == 0x00003C, "Member 'FEndDataTableChocoboRaceCourseData::SecondRewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, Rank1RewardID) == 0x000044, "Member 'FEndDataTableChocoboRaceCourseData::Rank1RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, Rank2RewardID) == 0x00004C, "Member 'FEndDataTableChocoboRaceCourseData::Rank2RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, Rank3RewardID) == 0x000054, "Member 'FEndDataTableChocoboRaceCourseData::Rank3RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, CourseOpenFlagID) == 0x00005C, "Member 'FEndDataTableChocoboRaceCourseData::CourseOpenFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, CourseClearFlagID) == 0x000064, "Member 'FEndDataTableChocoboRaceCourseData::CourseClearFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, CourseReadFlagID) == 0x00006C, "Member 'FEndDataTableChocoboRaceCourseData::CourseReadFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, CourseUnlockedFlagID) == 0x000074, "Member 'FEndDataTableChocoboRaceCourseData::CourseUnlockedFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, LocationId) == 0x00007C, "Member 'FEndDataTableChocoboRaceCourseData::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, RivalGroupID) == 0x000084, "Member 'FEndDataTableChocoboRaceCourseData::RivalGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, SpeedAdjustDataID) == 0x00008C, "Member 'FEndDataTableChocoboRaceCourseData::SpeedAdjustDataID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, CourseStreamingVolumeID) == 0x000094, "Member 'FEndDataTableChocoboRaceCourseData::CourseStreamingVolumeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, GimmickStreamingVolumeID) == 0x00009C, "Member 'FEndDataTableChocoboRaceCourseData::GimmickStreamingVolumeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, BestTimeLocationWorkID) == 0x0000A4, "Member 'FEndDataTableChocoboRaceCourseData::BestTimeLocationWorkID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, StartPVStateTrigger) == 0x0000AC, "Member 'FEndDataTableChocoboRaceCourseData::StartPVStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceCourseData, StoryCourse) == 0x0000B4, "Member 'FEndDataTableChocoboRaceCourseData::StoryCourse' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectWildAnimalBehaviorAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWildAnimalBehaviorAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWildAnimalBehaviorAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWildAnimalBehaviorAccessor");
static_assert(sizeof(FEndDataObjectWildAnimalBehaviorAccessor) == 0x000020, "Wrong size on FEndDataObjectWildAnimalBehaviorAccessor");

// ScriptStruct EndDataObject.EndDataObjectWildAnimalGroupAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWildAnimalGroupAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWildAnimalGroupAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWildAnimalGroupAccessor");
static_assert(sizeof(FEndDataObjectWildAnimalGroupAccessor) == 0x000020, "Wrong size on FEndDataObjectWildAnimalGroupAccessor");

// ScriptStruct EndDataObject.EndDataTableCutSceneListLevel
// 0x00C0 (0x00C8 - 0x0008)
struct FEndDataTableCutSceneListLevel final : public FEndDataTableRowBase
{
public:
	int32                                         BattleStart;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EncountBattleTerritoryID;                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SpawnActorWait;                                    // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OverwriteBindActor;                                // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LoadControlType;                                   // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NextCutSceneNameList_Array;                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ReadyCutsceneNameList_Array;                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextCutSceneConditionList_Array;                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           IgnoreLevelActor_Array;                            // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PreloadActorNameList_Array;                        // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         BlendStartType;                                    // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StopAIActorName_Array;                             // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AnimationSequenceActorName_Array;                  // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AnimationSequenceState_Array;                      // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LoadSaveRestorePositionActorName_Array;            // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LoadSaveRestorePositionTargetPoint_Array;          // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         PreviousCutsceneCount;                             // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ExtraFlags;                                        // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCutSceneListLevel) == 0x000008, "Wrong alignment on FEndDataTableCutSceneListLevel");
static_assert(sizeof(FEndDataTableCutSceneListLevel) == 0x0000C8, "Wrong size on FEndDataTableCutSceneListLevel");
static_assert(offsetof(FEndDataTableCutSceneListLevel, BattleStart) == 0x000008, "Member 'FEndDataTableCutSceneListLevel::BattleStart' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, EncountBattleTerritoryID) == 0x00000C, "Member 'FEndDataTableCutSceneListLevel::EncountBattleTerritoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, SpawnActorWait) == 0x000014, "Member 'FEndDataTableCutSceneListLevel::SpawnActorWait' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, OverwriteBindActor) == 0x000015, "Member 'FEndDataTableCutSceneListLevel::OverwriteBindActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, LoadControlType) == 0x000016, "Member 'FEndDataTableCutSceneListLevel::LoadControlType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, NextCutSceneNameList_Array) == 0x000018, "Member 'FEndDataTableCutSceneListLevel::NextCutSceneNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, ReadyCutsceneNameList_Array) == 0x000028, "Member 'FEndDataTableCutSceneListLevel::ReadyCutsceneNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, NextCutSceneConditionList_Array) == 0x000038, "Member 'FEndDataTableCutSceneListLevel::NextCutSceneConditionList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, IgnoreLevelActor_Array) == 0x000048, "Member 'FEndDataTableCutSceneListLevel::IgnoreLevelActor_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, PreloadActorNameList_Array) == 0x000058, "Member 'FEndDataTableCutSceneListLevel::PreloadActorNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, BlendStartType) == 0x000068, "Member 'FEndDataTableCutSceneListLevel::BlendStartType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, StopAIActorName_Array) == 0x000070, "Member 'FEndDataTableCutSceneListLevel::StopAIActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, AnimationSequenceActorName_Array) == 0x000080, "Member 'FEndDataTableCutSceneListLevel::AnimationSequenceActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, AnimationSequenceState_Array) == 0x000090, "Member 'FEndDataTableCutSceneListLevel::AnimationSequenceState_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, LoadSaveRestorePositionActorName_Array) == 0x0000A0, "Member 'FEndDataTableCutSceneListLevel::LoadSaveRestorePositionActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, LoadSaveRestorePositionTargetPoint_Array) == 0x0000B0, "Member 'FEndDataTableCutSceneListLevel::LoadSaveRestorePositionTargetPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, PreviousCutsceneCount) == 0x0000C0, "Member 'FEndDataTableCutSceneListLevel::PreviousCutsceneCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, ExtraFlags) == 0x0000C4, "Member 'FEndDataTableCutSceneListLevel::ExtraFlags' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectWorldConditionAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWorldConditionAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWorldConditionAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWorldConditionAccessor");
static_assert(sizeof(FEndDataObjectWorldConditionAccessor) == 0x000020, "Wrong size on FEndDataObjectWorldConditionAccessor");

// ScriptStruct EndDataObject.EndDataObjectWorldItemLotteryTableAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWorldItemLotteryTableAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWorldItemLotteryTableAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWorldItemLotteryTableAccessor");
static_assert(sizeof(FEndDataObjectWorldItemLotteryTableAccessor) == 0x000020, "Wrong size on FEndDataObjectWorldItemLotteryTableAccessor");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceRivalRunSetting
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChocoboRaceRivalRunSetting final : public FEndDataTableRowBase
{
public:
	TArray<float>                                 SectionTimeRate_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboRaceRivalRunSetting) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceRivalRunSetting");
static_assert(sizeof(FEndDataTableChocoboRaceRivalRunSetting) == 0x000018, "Wrong size on FEndDataTableChocoboRaceRivalRunSetting");
static_assert(offsetof(FEndDataTableChocoboRaceRivalRunSetting, SectionTimeRate_Array) == 0x000008, "Member 'FEndDataTableChocoboRaceRivalRunSetting::SectionTimeRate_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataObjectWorldReportAccessor
// 0x0000 (0x0020 - 0x0020)
struct FEndDataObjectWorldReportAccessor final : public FEndDataObjectAccessorBase
{
};
static_assert(alignof(FEndDataObjectWorldReportAccessor) == 0x000008, "Wrong alignment on FEndDataObjectWorldReportAccessor");
static_assert(sizeof(FEndDataObjectWorldReportAccessor) == 0x000020, "Wrong size on FEndDataObjectWorldReportAccessor");

// ScriptStruct EndDataObject.EndDataTableAction
// 0x0130 (0x0138 - 0x0008)
struct FEndDataTableAction final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Type;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ExclusionID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PriorityOverwrite;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PriorityNumOverwrite;                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BattlePriority;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EventPriorityDeclineID;                            // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         StartStateConditionNot_Array;                      // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StartStateCondition_Array;                         // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EndStateTriggerList_Array;                         // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StartStoryFlag_Array;                              // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EndStoryFlag_Array;                                // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LocationWorkID_Array;                              // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 LocationWorkType_Array;                            // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 LocationWorkValue_Array;                           // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         StringArgumentList_Array;                          // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerArgumentList_Array;                         // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 FloatArgumentList_Array;                           // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 BGMName;                                           // 0x00F8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BGMNameActionEnd;                                  // 0x0108(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartSceneChangerID;                               // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EndSceneChangerID;                                 // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SaveNaviBGMInfoID;                                 // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NaviBGMOff;                                        // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableAction) == 0x000008, "Wrong alignment on FEndDataTableAction");
static_assert(sizeof(FEndDataTableAction) == 0x000138, "Wrong size on FEndDataTableAction");
static_assert(offsetof(FEndDataTableAction, UniqueIndex) == 0x000008, "Member 'FEndDataTableAction::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, Type) == 0x00000C, "Member 'FEndDataTableAction::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, ExclusionID) == 0x000010, "Member 'FEndDataTableAction::ExclusionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, PriorityOverwrite) == 0x000018, "Member 'FEndDataTableAction::PriorityOverwrite' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, PriorityNumOverwrite) == 0x000028, "Member 'FEndDataTableAction::PriorityNumOverwrite' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, BattlePriority) == 0x000030, "Member 'FEndDataTableAction::BattlePriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, EventPriorityDeclineID) == 0x000040, "Member 'FEndDataTableAction::EventPriorityDeclineID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, StartStateConditionNot_Array) == 0x000048, "Member 'FEndDataTableAction::StartStateConditionNot_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, StartStateCondition_Array) == 0x000058, "Member 'FEndDataTableAction::StartStateCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, EndStateTriggerList_Array) == 0x000068, "Member 'FEndDataTableAction::EndStateTriggerList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, StartStoryFlag_Array) == 0x000078, "Member 'FEndDataTableAction::StartStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, EndStoryFlag_Array) == 0x000088, "Member 'FEndDataTableAction::EndStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, LocationWorkID_Array) == 0x000098, "Member 'FEndDataTableAction::LocationWorkID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, LocationWorkType_Array) == 0x0000A8, "Member 'FEndDataTableAction::LocationWorkType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, LocationWorkValue_Array) == 0x0000B8, "Member 'FEndDataTableAction::LocationWorkValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, StringArgumentList_Array) == 0x0000C8, "Member 'FEndDataTableAction::StringArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, IntegerArgumentList_Array) == 0x0000D8, "Member 'FEndDataTableAction::IntegerArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, FloatArgumentList_Array) == 0x0000E8, "Member 'FEndDataTableAction::FloatArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, BGMName) == 0x0000F8, "Member 'FEndDataTableAction::BGMName' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, BGMNameActionEnd) == 0x000108, "Member 'FEndDataTableAction::BGMNameActionEnd' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, StartSceneChangerID) == 0x000118, "Member 'FEndDataTableAction::StartSceneChangerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, EndSceneChangerID) == 0x000120, "Member 'FEndDataTableAction::EndSceneChangerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, SaveNaviBGMInfoID) == 0x000128, "Member 'FEndDataTableAction::SaveNaviBGMInfoID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, NaviBGMOff) == 0x000130, "Member 'FEndDataTableAction::NaviBGMOff' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyBook
// 0x0110 (0x0118 - 0x0008)
struct FEndDataTableEnemyBook final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ConditionType;                                     // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EncountOrder;                                      // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParentID;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ViewState;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RefKillCount;                                      // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RefEncount;                                        // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TipsTextID;                                        // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FlavorTextID;                                      // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyBookBattleCharaSpecID;                        // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EnemyBookBattleAbilityID_Array;                    // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 BPDamageCorrectionProperty_Array;                  // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 BPDamageCorrectionAttribute_Array;                 // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EncountLocationID_Array;                           // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EnemyBookAreaDataID_Array;                         // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   LocationTextOverwriteResetFlag;                    // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LocationTextOverwrite;                             // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EnemyPopLocation_Array;                            // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         EnemyPopLocationTextOrverride_Array;               // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Subspecies;                                        // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BattleCharaCategory;                               // 0x00C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnemyBookCameraZOffset;                            // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnemyBookCameraXDefault;                           // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnemyBookCameraXFree;                              // 0x00D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnemyBookCameraXMin;                               // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnemyBookCameraXMax;                               // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnemyBookCameraYMin;                               // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnemyBookCameraYMax;                               // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnemyBookCameraDefaultDistance;                    // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnemyBookCameraEyePointZOffset;                    // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyBookPedestalSize;                             // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnemyBookXOffset;                                  // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnemyBookYOffset;                                  // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnemyBookZOffset;                                  // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SerialNumber;                                      // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartMotionName;                                   // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LoopMotionName;                                    // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyBook) == 0x000008, "Wrong alignment on FEndDataTableEnemyBook");
static_assert(sizeof(FEndDataTableEnemyBook) == 0x000118, "Wrong size on FEndDataTableEnemyBook");
static_assert(offsetof(FEndDataTableEnemyBook, UniqueId) == 0x000008, "Member 'FEndDataTableEnemyBook::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, ConditionType) == 0x00000C, "Member 'FEndDataTableEnemyBook::ConditionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EncountOrder) == 0x00000D, "Member 'FEndDataTableEnemyBook::EncountOrder' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, ParentID) == 0x000010, "Member 'FEndDataTableEnemyBook::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, ViewState) == 0x000018, "Member 'FEndDataTableEnemyBook::ViewState' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, RefKillCount) == 0x00001C, "Member 'FEndDataTableEnemyBook::RefKillCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, RefEncount) == 0x000024, "Member 'FEndDataTableEnemyBook::RefEncount' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, TipsTextID) == 0x00002C, "Member 'FEndDataTableEnemyBook::TipsTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, FlavorTextID) == 0x000034, "Member 'FEndDataTableEnemyBook::FlavorTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookBattleCharaSpecID) == 0x00003C, "Member 'FEndDataTableEnemyBook::EnemyBookBattleCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookBattleAbilityID_Array) == 0x000048, "Member 'FEndDataTableEnemyBook::EnemyBookBattleAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, BPDamageCorrectionProperty_Array) == 0x000058, "Member 'FEndDataTableEnemyBook::BPDamageCorrectionProperty_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, BPDamageCorrectionAttribute_Array) == 0x000068, "Member 'FEndDataTableEnemyBook::BPDamageCorrectionAttribute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EncountLocationID_Array) == 0x000078, "Member 'FEndDataTableEnemyBook::EncountLocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookAreaDataID_Array) == 0x000088, "Member 'FEndDataTableEnemyBook::EnemyBookAreaDataID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, LocationTextOverwriteResetFlag) == 0x000098, "Member 'FEndDataTableEnemyBook::LocationTextOverwriteResetFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, LocationTextOverwrite) == 0x0000A0, "Member 'FEndDataTableEnemyBook::LocationTextOverwrite' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyPopLocation_Array) == 0x0000A8, "Member 'FEndDataTableEnemyBook::EnemyPopLocation_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyPopLocationTextOrverride_Array) == 0x0000B8, "Member 'FEndDataTableEnemyBook::EnemyPopLocationTextOrverride_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, Subspecies) == 0x0000C8, "Member 'FEndDataTableEnemyBook::Subspecies' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, BattleCharaCategory) == 0x0000C9, "Member 'FEndDataTableEnemyBook::BattleCharaCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraZOffset) == 0x0000CC, "Member 'FEndDataTableEnemyBook::EnemyBookCameraZOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraXDefault) == 0x0000D0, "Member 'FEndDataTableEnemyBook::EnemyBookCameraXDefault' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraXFree) == 0x0000D4, "Member 'FEndDataTableEnemyBook::EnemyBookCameraXFree' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraXMin) == 0x0000D8, "Member 'FEndDataTableEnemyBook::EnemyBookCameraXMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraXMax) == 0x0000DC, "Member 'FEndDataTableEnemyBook::EnemyBookCameraXMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraYMin) == 0x0000E0, "Member 'FEndDataTableEnemyBook::EnemyBookCameraYMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraYMax) == 0x0000E4, "Member 'FEndDataTableEnemyBook::EnemyBookCameraYMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraDefaultDistance) == 0x0000E8, "Member 'FEndDataTableEnemyBook::EnemyBookCameraDefaultDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraEyePointZOffset) == 0x0000EC, "Member 'FEndDataTableEnemyBook::EnemyBookCameraEyePointZOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookPedestalSize) == 0x0000F0, "Member 'FEndDataTableEnemyBook::EnemyBookPedestalSize' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookXOffset) == 0x0000F8, "Member 'FEndDataTableEnemyBook::EnemyBookXOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookYOffset) == 0x0000FC, "Member 'FEndDataTableEnemyBook::EnemyBookYOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookZOffset) == 0x000100, "Member 'FEndDataTableEnemyBook::EnemyBookZOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, SerialNumber) == 0x000104, "Member 'FEndDataTableEnemyBook::SerialNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, StartMotionName) == 0x000108, "Member 'FEndDataTableEnemyBook::StartMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, LoopMotionName) == 0x000110, "Member 'FEndDataTableEnemyBook::LoopMotionName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableActionLimit
// 0x0098 (0x00A0 - 0x0008)
struct FEndDataTableActionLimit final : public FEndDataTableRowBase
{
public:
	uint8                                         CameraLookAt_Use;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraLookAt_CameraModuleId;                       // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraLookAt_IsTurnRequested;                      // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraLookAt_CanSkip;                              // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraLookAt_IsPreserveLastDir;                    // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraLookAt_StopControl;                          // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraLookAt_DisablePitchLimit;                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraOperator;                                    // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InterestPointBind_Use;                             // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InterestPointBind_BindInterestPointTemplateId;     // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InterestPointBind_BindInterestPointOverrideId;     // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InterestPointBind_InterestRadius;                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InterestPointBind_Type;                            // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PlayerMoveType_Use;                                // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PlayerMoveType_type;                               // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PlayerMoveType_useDashMode;                        // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StrictMoveType;                                    // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         autoWalkType_Use;                                  // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 autoWalkType_actionBorderValue_Array;              // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         autoWalkType_specialType;                          // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         autoWalkType_beginTurnBackDistance;                // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         autoWalkType_turnBackDistance;                     // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         autoWalkType_EnableTrunBack;                       // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         autoWalkType_turnBackTiming;                       // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         autoWalkType_bPathFindOnce_old;                    // 0x0056(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   autoWalkType_OverrideFlavorID;                     // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         autoWalkType_turnBackWarningType;                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 autoWalkType_turnBackMessageTextID;                // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   autoWalkType_turnBackAlertOverrideID;              // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         autoWalkType_SpecificLifeTimeSeconds;              // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         autoWalkType_DeactivatePitchIndex;                 // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         autoWalkType_useStoryIndex;                        // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         autoWalkType_TurnBack_ForceWalk;                   // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         autoWalkType_TurnBack_MaxWeight;                   // 0x008D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   autoWalkType_overrideWalkTypeId;                   // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StrictMoveType_2;                                  // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableActionLimit) == 0x000008, "Wrong alignment on FEndDataTableActionLimit");
static_assert(sizeof(FEndDataTableActionLimit) == 0x0000A0, "Wrong size on FEndDataTableActionLimit");
static_assert(offsetof(FEndDataTableActionLimit, CameraLookAt_Use) == 0x000008, "Member 'FEndDataTableActionLimit::CameraLookAt_Use' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, CameraLookAt_CameraModuleId) == 0x00000C, "Member 'FEndDataTableActionLimit::CameraLookAt_CameraModuleId' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, CameraLookAt_IsTurnRequested) == 0x000014, "Member 'FEndDataTableActionLimit::CameraLookAt_IsTurnRequested' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, CameraLookAt_CanSkip) == 0x000015, "Member 'FEndDataTableActionLimit::CameraLookAt_CanSkip' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, CameraLookAt_IsPreserveLastDir) == 0x000016, "Member 'FEndDataTableActionLimit::CameraLookAt_IsPreserveLastDir' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, CameraLookAt_StopControl) == 0x000017, "Member 'FEndDataTableActionLimit::CameraLookAt_StopControl' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, CameraLookAt_DisablePitchLimit) == 0x000018, "Member 'FEndDataTableActionLimit::CameraLookAt_DisablePitchLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, CameraOperator) == 0x000019, "Member 'FEndDataTableActionLimit::CameraOperator' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, InterestPointBind_Use) == 0x00001A, "Member 'FEndDataTableActionLimit::InterestPointBind_Use' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, InterestPointBind_BindInterestPointTemplateId) == 0x00001C, "Member 'FEndDataTableActionLimit::InterestPointBind_BindInterestPointTemplateId' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, InterestPointBind_BindInterestPointOverrideId) == 0x000024, "Member 'FEndDataTableActionLimit::InterestPointBind_BindInterestPointOverrideId' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, InterestPointBind_InterestRadius) == 0x00002C, "Member 'FEndDataTableActionLimit::InterestPointBind_InterestRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, InterestPointBind_Type) == 0x000030, "Member 'FEndDataTableActionLimit::InterestPointBind_Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, PlayerMoveType_Use) == 0x000031, "Member 'FEndDataTableActionLimit::PlayerMoveType_Use' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, PlayerMoveType_type) == 0x000032, "Member 'FEndDataTableActionLimit::PlayerMoveType_type' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, PlayerMoveType_useDashMode) == 0x000033, "Member 'FEndDataTableActionLimit::PlayerMoveType_useDashMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, StrictMoveType) == 0x000034, "Member 'FEndDataTableActionLimit::StrictMoveType' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_Use) == 0x000035, "Member 'FEndDataTableActionLimit::autoWalkType_Use' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_actionBorderValue_Array) == 0x000038, "Member 'FEndDataTableActionLimit::autoWalkType_actionBorderValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_specialType) == 0x000048, "Member 'FEndDataTableActionLimit::autoWalkType_specialType' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_beginTurnBackDistance) == 0x00004C, "Member 'FEndDataTableActionLimit::autoWalkType_beginTurnBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_turnBackDistance) == 0x000050, "Member 'FEndDataTableActionLimit::autoWalkType_turnBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_EnableTrunBack) == 0x000054, "Member 'FEndDataTableActionLimit::autoWalkType_EnableTrunBack' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_turnBackTiming) == 0x000055, "Member 'FEndDataTableActionLimit::autoWalkType_turnBackTiming' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_bPathFindOnce_old) == 0x000056, "Member 'FEndDataTableActionLimit::autoWalkType_bPathFindOnce_old' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_OverrideFlavorID) == 0x000058, "Member 'FEndDataTableActionLimit::autoWalkType_OverrideFlavorID' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_turnBackWarningType) == 0x000060, "Member 'FEndDataTableActionLimit::autoWalkType_turnBackWarningType' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_turnBackMessageTextID) == 0x000068, "Member 'FEndDataTableActionLimit::autoWalkType_turnBackMessageTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_turnBackAlertOverrideID) == 0x000078, "Member 'FEndDataTableActionLimit::autoWalkType_turnBackAlertOverrideID' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_SpecificLifeTimeSeconds) == 0x000080, "Member 'FEndDataTableActionLimit::autoWalkType_SpecificLifeTimeSeconds' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_DeactivatePitchIndex) == 0x000084, "Member 'FEndDataTableActionLimit::autoWalkType_DeactivatePitchIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_useStoryIndex) == 0x000088, "Member 'FEndDataTableActionLimit::autoWalkType_useStoryIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_TurnBack_ForceWalk) == 0x00008C, "Member 'FEndDataTableActionLimit::autoWalkType_TurnBack_ForceWalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_TurnBack_MaxWeight) == 0x00008D, "Member 'FEndDataTableActionLimit::autoWalkType_TurnBack_MaxWeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, autoWalkType_overrideWalkTypeId) == 0x000090, "Member 'FEndDataTableActionLimit::autoWalkType_overrideWalkTypeId' has a wrong offset!");
static_assert(offsetof(FEndDataTableActionLimit, StrictMoveType_2) == 0x000098, "Member 'FEndDataTableActionLimit::StrictMoveType_2' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableActorGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableActorGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ActorList_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableActorGroup) == 0x000008, "Wrong alignment on FEndDataTableActorGroup");
static_assert(sizeof(FEndDataTableActorGroup) == 0x000018, "Wrong size on FEndDataTableActorGroup");
static_assert(offsetof(FEndDataTableActorGroup, ActorList_Array) == 0x000008, "Member 'FEndDataTableActorGroup::ActorList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCardChallenge
// 0x00A8 (0x00B0 - 0x0008)
struct FEndDataTableCardChallenge final : public FEndDataTableRowBase
{
public:
	class FName                                   GroupName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenStoryFlag;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           OpenStateCondition_Array;                          // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ShowKeyIconStateCondition_Array;                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint32                                        SordValue;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TextID_Array;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         RuleType;                                          // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Action;                                            // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HiScoreLocationWorkID;                             // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        Cost;                                              // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RewardType;                                        // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FirstTimeReward_Array;                             // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FirstTimeStoryFlag_Array;                          // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Reward_Array;                                      // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint32>                                ThresholdScore_Array;                              // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardChallenge) == 0x000008, "Wrong alignment on FEndDataTableCardChallenge");
static_assert(sizeof(FEndDataTableCardChallenge) == 0x0000B0, "Wrong size on FEndDataTableCardChallenge");
static_assert(offsetof(FEndDataTableCardChallenge, GroupName) == 0x000008, "Member 'FEndDataTableCardChallenge::GroupName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, OpenStoryFlag) == 0x000010, "Member 'FEndDataTableCardChallenge::OpenStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, OpenStateCondition_Array) == 0x000018, "Member 'FEndDataTableCardChallenge::OpenStateCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, ShowKeyIconStateCondition_Array) == 0x000028, "Member 'FEndDataTableCardChallenge::ShowKeyIconStateCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, SordValue) == 0x000038, "Member 'FEndDataTableCardChallenge::SordValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, TextID_Array) == 0x000040, "Member 'FEndDataTableCardChallenge::TextID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, RuleType) == 0x000050, "Member 'FEndDataTableCardChallenge::RuleType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, Action) == 0x000054, "Member 'FEndDataTableCardChallenge::Action' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, HiScoreLocationWorkID) == 0x00005C, "Member 'FEndDataTableCardChallenge::HiScoreLocationWorkID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, Cost) == 0x000064, "Member 'FEndDataTableCardChallenge::Cost' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, RewardType) == 0x000068, "Member 'FEndDataTableCardChallenge::RewardType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, FirstTimeReward_Array) == 0x000070, "Member 'FEndDataTableCardChallenge::FirstTimeReward_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, FirstTimeStoryFlag_Array) == 0x000080, "Member 'FEndDataTableCardChallenge::FirstTimeStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, Reward_Array) == 0x000090, "Member 'FEndDataTableCardChallenge::Reward_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardChallenge, ThresholdScore_Array) == 0x0000A0, "Member 'FEndDataTableCardChallenge::ThresholdScore_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAIStateGroup
// 0x0168 (0x0170 - 0x0008)
struct FEndDataTableAIStateGroup final : public FEndDataTableRowBase
{
public:
	class FName                                   Group;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AIState;                                           // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Priority;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 BaseParamBoolList_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 BaseParamIntList_Array;                            // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 BaseParamFloatList_Array;                          // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int8>                                  BaseParamFloatRepIndexList_Array;                  // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   BaseParamNextStateID;                              // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ConditionTarget_Array;                             // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int8>                                  ConditionTargetRepIndex_Array;                     // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ConditionDistanceLT_Array;                         // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int8>                                  ConditionDistanceLTRepIndex_Array;                 // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ConditionDistanceGT_Array;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int8>                                  ConditionDistanceGTRepIndex_Array;                 // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ConditionAngleLT_Array;                            // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ConditionAngleGT_Array;                            // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ConditionTime_Array;                               // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ConditionNotFlag_Array;                            // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ConditionStateCondition_Array;                     // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StringArgumentList_Array;                          // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int8>                                  StringArgumentRepIndex_Array;                      // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerArgumentList_Array;                         // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int8>                                  IntegerArgumentRepIndex_Array;                     // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int8>                                  AnimationIndex_Array;                              // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint32                                        FlagOverrideBaseParamBool;                         // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        FlagOverrideBaseParamInteger;                      // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        FlagOverrideBaseParamFloat;                        // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        FlagOverrideConditionTarget;                       // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAIStateGroup) == 0x000008, "Wrong alignment on FEndDataTableAIStateGroup");
static_assert(sizeof(FEndDataTableAIStateGroup) == 0x000170, "Wrong size on FEndDataTableAIStateGroup");
static_assert(offsetof(FEndDataTableAIStateGroup, Group) == 0x000008, "Member 'FEndDataTableAIStateGroup::Group' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, AIState) == 0x000010, "Member 'FEndDataTableAIStateGroup::AIState' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, Priority) == 0x000014, "Member 'FEndDataTableAIStateGroup::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, BaseParamBoolList_Array) == 0x000018, "Member 'FEndDataTableAIStateGroup::BaseParamBoolList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, BaseParamIntList_Array) == 0x000028, "Member 'FEndDataTableAIStateGroup::BaseParamIntList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, BaseParamFloatList_Array) == 0x000038, "Member 'FEndDataTableAIStateGroup::BaseParamFloatList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, BaseParamFloatRepIndexList_Array) == 0x000048, "Member 'FEndDataTableAIStateGroup::BaseParamFloatRepIndexList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, BaseParamNextStateID) == 0x000058, "Member 'FEndDataTableAIStateGroup::BaseParamNextStateID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionTarget_Array) == 0x000060, "Member 'FEndDataTableAIStateGroup::ConditionTarget_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionTargetRepIndex_Array) == 0x000070, "Member 'FEndDataTableAIStateGroup::ConditionTargetRepIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionDistanceLT_Array) == 0x000080, "Member 'FEndDataTableAIStateGroup::ConditionDistanceLT_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionDistanceLTRepIndex_Array) == 0x000090, "Member 'FEndDataTableAIStateGroup::ConditionDistanceLTRepIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionDistanceGT_Array) == 0x0000A0, "Member 'FEndDataTableAIStateGroup::ConditionDistanceGT_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionDistanceGTRepIndex_Array) == 0x0000B0, "Member 'FEndDataTableAIStateGroup::ConditionDistanceGTRepIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionAngleLT_Array) == 0x0000C0, "Member 'FEndDataTableAIStateGroup::ConditionAngleLT_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionAngleGT_Array) == 0x0000D0, "Member 'FEndDataTableAIStateGroup::ConditionAngleGT_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionTime_Array) == 0x0000E0, "Member 'FEndDataTableAIStateGroup::ConditionTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionNotFlag_Array) == 0x0000F0, "Member 'FEndDataTableAIStateGroup::ConditionNotFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, ConditionStateCondition_Array) == 0x000100, "Member 'FEndDataTableAIStateGroup::ConditionStateCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, StringArgumentList_Array) == 0x000110, "Member 'FEndDataTableAIStateGroup::StringArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, StringArgumentRepIndex_Array) == 0x000120, "Member 'FEndDataTableAIStateGroup::StringArgumentRepIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, IntegerArgumentList_Array) == 0x000130, "Member 'FEndDataTableAIStateGroup::IntegerArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, IntegerArgumentRepIndex_Array) == 0x000140, "Member 'FEndDataTableAIStateGroup::IntegerArgumentRepIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, AnimationIndex_Array) == 0x000150, "Member 'FEndDataTableAIStateGroup::AnimationIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, FlagOverrideBaseParamBool) == 0x000160, "Member 'FEndDataTableAIStateGroup::FlagOverrideBaseParamBool' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, FlagOverrideBaseParamInteger) == 0x000164, "Member 'FEndDataTableAIStateGroup::FlagOverrideBaseParamInteger' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, FlagOverrideBaseParamFloat) == 0x000168, "Member 'FEndDataTableAIStateGroup::FlagOverrideBaseParamFloat' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIStateGroup, FlagOverrideConditionTarget) == 0x00016C, "Member 'FEndDataTableAIStateGroup::FlagOverrideConditionTarget' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAreaReport
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableAreaReport final : public FEndDataTableRowBase
{
public:
	class FString                                 TitleTextID;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DetailTextID;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ImageName;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenStoryFlagID;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UnreadStoryFlagID;                                 // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreNotifyActionOrActionGroupID;                    // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PostNotifyActionOrActionGroupID;                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAreaReport) == 0x000008, "Wrong alignment on FEndDataTableAreaReport");
static_assert(sizeof(FEndDataTableAreaReport) == 0x000050, "Wrong size on FEndDataTableAreaReport");
static_assert(offsetof(FEndDataTableAreaReport, TitleTextID) == 0x000008, "Member 'FEndDataTableAreaReport::TitleTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAreaReport, DetailTextID) == 0x000018, "Member 'FEndDataTableAreaReport::DetailTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAreaReport, ImageName) == 0x000028, "Member 'FEndDataTableAreaReport::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableAreaReport, OpenStoryFlagID) == 0x000030, "Member 'FEndDataTableAreaReport::OpenStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAreaReport, UnreadStoryFlagID) == 0x000038, "Member 'FEndDataTableAreaReport::UnreadStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAreaReport, PreNotifyActionOrActionGroupID) == 0x000040, "Member 'FEndDataTableAreaReport::PreNotifyActionOrActionGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAreaReport, PostNotifyActionOrActionGroupID) == 0x000048, "Member 'FEndDataTableAreaReport::PostNotifyActionOrActionGroupID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAssignStateChange
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableAssignStateChange final : public FEndDataTableRowBase
{
public:
	uint32                                        UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ObjectIDList_Array;                                // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AttributeNameList_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateChangeIDList_Array;                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAssignStateChange) == 0x000008, "Wrong alignment on FEndDataTableAssignStateChange");
static_assert(sizeof(FEndDataTableAssignStateChange) == 0x000040, "Wrong size on FEndDataTableAssignStateChange");
static_assert(offsetof(FEndDataTableAssignStateChange, UniqueIndex) == 0x000008, "Member 'FEndDataTableAssignStateChange::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableAssignStateChange, ObjectIDList_Array) == 0x000010, "Member 'FEndDataTableAssignStateChange::ObjectIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAssignStateChange, AttributeNameList_Array) == 0x000020, "Member 'FEndDataTableAssignStateChange::AttributeNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAssignStateChange, StateChangeIDList_Array) == 0x000030, "Member 'FEndDataTableAssignStateChange::StateChangeIDList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboParts
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableChocoboParts final : public FEndDataTableRowBase
{
public:
	uint8                                         SaveSlotIndex;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PartsType;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartsIndex;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RefAssetName_Array;                                // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboParts) == 0x000008, "Wrong alignment on FEndDataTableChocoboParts");
static_assert(sizeof(FEndDataTableChocoboParts) == 0x000020, "Wrong size on FEndDataTableChocoboParts");
static_assert(offsetof(FEndDataTableChocoboParts, SaveSlotIndex) == 0x000008, "Member 'FEndDataTableChocoboParts::SaveSlotIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboParts, PartsType) == 0x000009, "Member 'FEndDataTableChocoboParts::PartsType' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboParts, PartsIndex) == 0x00000C, "Member 'FEndDataTableChocoboParts::PartsIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboParts, RefAssetName_Array) == 0x000010, "Member 'FEndDataTableChocoboParts::RefAssetName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAutoAbilityParameter
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableAutoAbilityParameter final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 ParameterType_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ParameterInt_Array;                                // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint16>                                ParameterFlag_Array;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAutoAbilityParameter) == 0x000008, "Wrong alignment on FEndDataTableAutoAbilityParameter");
static_assert(sizeof(FEndDataTableAutoAbilityParameter) == 0x000038, "Wrong size on FEndDataTableAutoAbilityParameter");
static_assert(offsetof(FEndDataTableAutoAbilityParameter, ParameterType_Array) == 0x000008, "Member 'FEndDataTableAutoAbilityParameter::ParameterType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoAbilityParameter, ParameterInt_Array) == 0x000018, "Member 'FEndDataTableAutoAbilityParameter::ParameterInt_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoAbilityParameter, ParameterFlag_Array) == 0x000028, "Member 'FEndDataTableAutoAbilityParameter::ParameterFlag_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAutoCameraImaginaryLineLogic
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableAutoCameraImaginaryLineLogic final : public FEndDataTableRowBase
{
public:
	class FString                                 NextID;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Condition_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         Param_Array;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         SuccessID_Array;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAutoCameraImaginaryLineLogic) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraImaginaryLineLogic");
static_assert(sizeof(FEndDataTableAutoCameraImaginaryLineLogic) == 0x000048, "Wrong size on FEndDataTableAutoCameraImaginaryLineLogic");
static_assert(offsetof(FEndDataTableAutoCameraImaginaryLineLogic, NextID) == 0x000008, "Member 'FEndDataTableAutoCameraImaginaryLineLogic::NextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraImaginaryLineLogic, Condition_Array) == 0x000018, "Member 'FEndDataTableAutoCameraImaginaryLineLogic::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraImaginaryLineLogic, Param_Array) == 0x000028, "Member 'FEndDataTableAutoCameraImaginaryLineLogic::Param_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraImaginaryLineLogic, SuccessID_Array) == 0x000038, "Member 'FEndDataTableAutoCameraImaginaryLineLogic::SuccessID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAutoCameraLightGroup
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableAutoCameraLightGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           Light_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         EnvBakedLightIntensity;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraFValue;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ExposureBias;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableAutoCameraLightGroup) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraLightGroup");
static_assert(sizeof(FEndDataTableAutoCameraLightGroup) == 0x000028, "Wrong size on FEndDataTableAutoCameraLightGroup");
static_assert(offsetof(FEndDataTableAutoCameraLightGroup, Light_Array) == 0x000008, "Member 'FEndDataTableAutoCameraLightGroup::Light_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightGroup, EnvBakedLightIntensity) == 0x000018, "Member 'FEndDataTableAutoCameraLightGroup::EnvBakedLightIntensity' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightGroup, CameraFValue) == 0x00001C, "Member 'FEndDataTableAutoCameraLightGroup::CameraFValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightGroup, ExposureBias) == 0x000020, "Member 'FEndDataTableAutoCameraLightGroup::ExposureBias' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAutoCameraLightInfo
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableAutoCameraLightInfo final : public FEndDataTableRowBase
{
public:
	float                                         OffsetX;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetY;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetZ;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Pitch;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Yaw;                                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Roll;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Distance;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Intensity;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LightR;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LightG;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LightB;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LightA;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InnerConeAngle;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OuterConeAngle;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttenuationRadius;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SourceRadius;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SoftSourceRadius;                                  // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SourceLength;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Temperature;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ColorTemperatureWhite;                             // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UseTemperature;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AffectsWorld;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CastShadow;                                        // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         IndirectLightingIntensity;                         // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VolumetricScatteringIntensity;                     // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShadowResolutionScale;                             // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ContactShadowLength;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShadowBias;                                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAutoCameraLightInfo) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraLightInfo");
static_assert(sizeof(FEndDataTableAutoCameraLightInfo) == 0x000078, "Wrong size on FEndDataTableAutoCameraLightInfo");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, OffsetX) == 0x000008, "Member 'FEndDataTableAutoCameraLightInfo::OffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, OffsetY) == 0x00000C, "Member 'FEndDataTableAutoCameraLightInfo::OffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, OffsetZ) == 0x000010, "Member 'FEndDataTableAutoCameraLightInfo::OffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Pitch) == 0x000014, "Member 'FEndDataTableAutoCameraLightInfo::Pitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Yaw) == 0x000018, "Member 'FEndDataTableAutoCameraLightInfo::Yaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Roll) == 0x00001C, "Member 'FEndDataTableAutoCameraLightInfo::Roll' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Distance) == 0x000020, "Member 'FEndDataTableAutoCameraLightInfo::Distance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Intensity) == 0x000024, "Member 'FEndDataTableAutoCameraLightInfo::Intensity' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, LightR) == 0x000028, "Member 'FEndDataTableAutoCameraLightInfo::LightR' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, LightG) == 0x00002C, "Member 'FEndDataTableAutoCameraLightInfo::LightG' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, LightB) == 0x000030, "Member 'FEndDataTableAutoCameraLightInfo::LightB' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, LightA) == 0x000034, "Member 'FEndDataTableAutoCameraLightInfo::LightA' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, InnerConeAngle) == 0x000038, "Member 'FEndDataTableAutoCameraLightInfo::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, OuterConeAngle) == 0x00003C, "Member 'FEndDataTableAutoCameraLightInfo::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, AttenuationRadius) == 0x000040, "Member 'FEndDataTableAutoCameraLightInfo::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, SourceRadius) == 0x000044, "Member 'FEndDataTableAutoCameraLightInfo::SourceRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, SoftSourceRadius) == 0x000048, "Member 'FEndDataTableAutoCameraLightInfo::SoftSourceRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, SourceLength) == 0x00004C, "Member 'FEndDataTableAutoCameraLightInfo::SourceLength' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Temperature) == 0x000050, "Member 'FEndDataTableAutoCameraLightInfo::Temperature' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, ColorTemperatureWhite) == 0x000054, "Member 'FEndDataTableAutoCameraLightInfo::ColorTemperatureWhite' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, UseTemperature) == 0x000058, "Member 'FEndDataTableAutoCameraLightInfo::UseTemperature' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, AffectsWorld) == 0x00005C, "Member 'FEndDataTableAutoCameraLightInfo::AffectsWorld' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, CastShadow) == 0x000060, "Member 'FEndDataTableAutoCameraLightInfo::CastShadow' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, IndirectLightingIntensity) == 0x000064, "Member 'FEndDataTableAutoCameraLightInfo::IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, VolumetricScatteringIntensity) == 0x000068, "Member 'FEndDataTableAutoCameraLightInfo::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, ShadowResolutionScale) == 0x00006C, "Member 'FEndDataTableAutoCameraLightInfo::ShadowResolutionScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, ContactShadowLength) == 0x000070, "Member 'FEndDataTableAutoCameraLightInfo::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, ShadowBias) == 0x000074, "Member 'FEndDataTableAutoCameraLightInfo::ShadowBias' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAutoCameraPositionInfo
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableAutoCameraPositionInfo final : public FEndDataTableRowBase
{
public:
	float                                         Xoffset;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Yoffset;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Xrange;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Yrange;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Zrange;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableAutoCameraPositionInfo) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraPositionInfo");
static_assert(sizeof(FEndDataTableAutoCameraPositionInfo) == 0x000020, "Wrong size on FEndDataTableAutoCameraPositionInfo");
static_assert(offsetof(FEndDataTableAutoCameraPositionInfo, Xoffset) == 0x000008, "Member 'FEndDataTableAutoCameraPositionInfo::Xoffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionInfo, Yoffset) == 0x00000C, "Member 'FEndDataTableAutoCameraPositionInfo::Yoffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionInfo, Xrange) == 0x000010, "Member 'FEndDataTableAutoCameraPositionInfo::Xrange' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionInfo, Yrange) == 0x000014, "Member 'FEndDataTableAutoCameraPositionInfo::Yrange' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionInfo, Zrange) == 0x000018, "Member 'FEndDataTableAutoCameraPositionInfo::Zrange' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAutoCameraPositionLogic
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableAutoCameraPositionLogic final : public FEndDataTableRowBase
{
public:
	class FString                                 NextID;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Condition_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         Param_Array;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         Target_Array;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         PositionInfo_Array;                                // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         FailedNextID_Array;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAutoCameraPositionLogic) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraPositionLogic");
static_assert(sizeof(FEndDataTableAutoCameraPositionLogic) == 0x000068, "Wrong size on FEndDataTableAutoCameraPositionLogic");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, NextID) == 0x000008, "Member 'FEndDataTableAutoCameraPositionLogic::NextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, Condition_Array) == 0x000018, "Member 'FEndDataTableAutoCameraPositionLogic::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, Param_Array) == 0x000028, "Member 'FEndDataTableAutoCameraPositionLogic::Param_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, Target_Array) == 0x000038, "Member 'FEndDataTableAutoCameraPositionLogic::Target_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, PositionInfo_Array) == 0x000048, "Member 'FEndDataTableAutoCameraPositionLogic::PositionInfo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, FailedNextID_Array) == 0x000058, "Member 'FEndDataTableAutoCameraPositionLogic::FailedNextID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboRacePerformanceRange
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChocoboRacePerformanceRange final : public FEndDataTableRowBase
{
public:
	float                                         MinValue;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxValue;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AdditionValue;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboRacePerformanceRange) == 0x000008, "Wrong alignment on FEndDataTableChocoboRacePerformanceRange");
static_assert(sizeof(FEndDataTableChocoboRacePerformanceRange) == 0x000018, "Wrong size on FEndDataTableChocoboRacePerformanceRange");
static_assert(offsetof(FEndDataTableChocoboRacePerformanceRange, MinValue) == 0x000008, "Member 'FEndDataTableChocoboRacePerformanceRange::MinValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePerformanceRange, MaxValue) == 0x00000C, "Member 'FEndDataTableChocoboRacePerformanceRange::MaxValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePerformanceRange, AdditionValue) == 0x000010, "Member 'FEndDataTableChocoboRacePerformanceRange::AdditionValue' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAutoCameraShotLogic
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableAutoCameraShotLogic final : public FEndDataTableRowBase
{
public:
	class FString                                 Next;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Condition_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         Param_Array;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ShotID_Array;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         FailNextID_Array;                                  // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         SuccessNextID_Array;                               // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAutoCameraShotLogic) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraShotLogic");
static_assert(sizeof(FEndDataTableAutoCameraShotLogic) == 0x000068, "Wrong size on FEndDataTableAutoCameraShotLogic");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, Next) == 0x000008, "Member 'FEndDataTableAutoCameraShotLogic::Next' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, Condition_Array) == 0x000018, "Member 'FEndDataTableAutoCameraShotLogic::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, Param_Array) == 0x000028, "Member 'FEndDataTableAutoCameraShotLogic::Param_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, ShotID_Array) == 0x000038, "Member 'FEndDataTableAutoCameraShotLogic::ShotID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, FailNextID_Array) == 0x000048, "Member 'FEndDataTableAutoCameraShotLogic::FailNextID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, SuccessNextID_Array) == 0x000058, "Member 'FEndDataTableAutoCameraShotLogic::SuccessNextID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableAutoWeaponAbility
// 0x00A0 (0x00A8 - 0x0008)
struct FEndDataTableAutoWeaponAbility final : public FEndDataTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BattleAbilityId;                                   // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OverrideBattleAbilityId;                           // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ATBGauge;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HeightRange;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CheckHighestRank;                                  // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 TargetCondition_Array;                             // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 UniqueConditionType_Array;                         // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ConditionParamFloat_Array;                         // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ConditionParamID_Array;                            // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ConditionParamFlag_Array;                          // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         TargetType;                                        // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flag0;                                             // 0x0079(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ComboAbilityType;                                  // 0x007A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ComboIdParam_Array;                                // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ComboCondition;                                    // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ComboProcessType;                                  // 0x0091(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ComboProcessParamFloat_Array;                      // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableAutoWeaponAbility) == 0x000008, "Wrong alignment on FEndDataTableAutoWeaponAbility");
static_assert(sizeof(FEndDataTableAutoWeaponAbility) == 0x0000A8, "Wrong size on FEndDataTableAutoWeaponAbility");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, Priority) == 0x000008, "Member 'FEndDataTableAutoWeaponAbility::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, BattleAbilityId) == 0x00000C, "Member 'FEndDataTableAutoWeaponAbility::BattleAbilityId' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, OverrideBattleAbilityId) == 0x000014, "Member 'FEndDataTableAutoWeaponAbility::OverrideBattleAbilityId' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, ATBGauge) == 0x00001C, "Member 'FEndDataTableAutoWeaponAbility::ATBGauge' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, HeightRange) == 0x000020, "Member 'FEndDataTableAutoWeaponAbility::HeightRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, CheckHighestRank) == 0x000024, "Member 'FEndDataTableAutoWeaponAbility::CheckHighestRank' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, TargetCondition_Array) == 0x000028, "Member 'FEndDataTableAutoWeaponAbility::TargetCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, UniqueConditionType_Array) == 0x000038, "Member 'FEndDataTableAutoWeaponAbility::UniqueConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, ConditionParamFloat_Array) == 0x000048, "Member 'FEndDataTableAutoWeaponAbility::ConditionParamFloat_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, ConditionParamID_Array) == 0x000058, "Member 'FEndDataTableAutoWeaponAbility::ConditionParamID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, ConditionParamFlag_Array) == 0x000068, "Member 'FEndDataTableAutoWeaponAbility::ConditionParamFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, TargetType) == 0x000078, "Member 'FEndDataTableAutoWeaponAbility::TargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, Flag0) == 0x000079, "Member 'FEndDataTableAutoWeaponAbility::Flag0' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, ComboAbilityType) == 0x00007A, "Member 'FEndDataTableAutoWeaponAbility::ComboAbilityType' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, ComboIdParam_Array) == 0x000080, "Member 'FEndDataTableAutoWeaponAbility::ComboIdParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, ComboCondition) == 0x000090, "Member 'FEndDataTableAutoWeaponAbility::ComboCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, ComboProcessType) == 0x000091, "Member 'FEndDataTableAutoWeaponAbility::ComboProcessType' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoWeaponAbility, ComboProcessParamFloat_Array) == 0x000098, "Member 'FEndDataTableAutoWeaponAbility::ComboProcessParamFloat_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleAbilityReactionInfluence
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBattleAbilityReactionInfluence final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 ReactionInfluenceType_Array;                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 AttackDirection_Array;                             // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PropertyCondition_Array;                           // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleAbilityReactionInfluence) == 0x000008, "Wrong alignment on FEndDataTableBattleAbilityReactionInfluence");
static_assert(sizeof(FEndDataTableBattleAbilityReactionInfluence) == 0x000038, "Wrong size on FEndDataTableBattleAbilityReactionInfluence");
static_assert(offsetof(FEndDataTableBattleAbilityReactionInfluence, ReactionInfluenceType_Array) == 0x000008, "Member 'FEndDataTableBattleAbilityReactionInfluence::ReactionInfluenceType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbilityReactionInfluence, AttackDirection_Array) == 0x000018, "Member 'FEndDataTableBattleAbilityReactionInfluence::AttackDirection_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbilityReactionInfluence, PropertyCondition_Array) == 0x000028, "Member 'FEndDataTableBattleAbilityReactionInfluence::PropertyCondition_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleBreak
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBattleBreak final : public FEndDataTableRowBase
{
public:
	uint8                                         Priority;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BeginAction;                                       // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableEndAction;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EndActionDefaultInIdle;                            // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EndAction;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableSlowDirection;                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TimeDependBeginAction;                             // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         KeepValue;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitReactionTableIndex;                             // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AddDamageMotionName;                               // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleBreak) == 0x000008, "Wrong alignment on FEndDataTableBattleBreak");
static_assert(sizeof(FEndDataTableBattleBreak) == 0x000038, "Wrong size on FEndDataTableBattleBreak");
static_assert(offsetof(FEndDataTableBattleBreak, Priority) == 0x000008, "Member 'FEndDataTableBattleBreak::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreak, BeginAction) == 0x00000C, "Member 'FEndDataTableBattleBreak::BeginAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreak, DisableEndAction) == 0x000014, "Member 'FEndDataTableBattleBreak::DisableEndAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreak, EndActionDefaultInIdle) == 0x000015, "Member 'FEndDataTableBattleBreak::EndActionDefaultInIdle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreak, EndAction) == 0x000018, "Member 'FEndDataTableBattleBreak::EndAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreak, DisableSlowDirection) == 0x000020, "Member 'FEndDataTableBattleBreak::DisableSlowDirection' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreak, TimeDependBeginAction) == 0x000021, "Member 'FEndDataTableBattleBreak::TimeDependBeginAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreak, Time) == 0x000024, "Member 'FEndDataTableBattleBreak::Time' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreak, KeepValue) == 0x000028, "Member 'FEndDataTableBattleBreak::KeepValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreak, HitReactionTableIndex) == 0x000029, "Member 'FEndDataTableBattleBreak::HitReactionTableIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreak, AddDamageMotionName) == 0x00002C, "Member 'FEndDataTableBattleBreak::AddDamageMotionName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCameraSequence
// 0x00A8 (0x00B0 - 0x0008)
struct FEndDataTableCameraSequence final : public FEndDataTableRowBase
{
public:
	int32                                         BlendType;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TotalTime;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ParameterType_Array;                               // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 CameraLocationX_Array;                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 CameraLocationY_Array;                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 CameraLocationZ_Array;                             // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 LookAtLocationX_Array;                             // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 LookAtLocationY_Array;                             // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 LookAtLocationZ_Array;                             // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 FieldOfView_Array;                                 // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 Roll_Array;                                        // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 Weight_Array;                                      // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCameraSequence) == 0x000008, "Wrong alignment on FEndDataTableCameraSequence");
static_assert(sizeof(FEndDataTableCameraSequence) == 0x0000B0, "Wrong size on FEndDataTableCameraSequence");
static_assert(offsetof(FEndDataTableCameraSequence, BlendType) == 0x000008, "Member 'FEndDataTableCameraSequence::BlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, TotalTime) == 0x00000C, "Member 'FEndDataTableCameraSequence::TotalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, ParameterType_Array) == 0x000010, "Member 'FEndDataTableCameraSequence::ParameterType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, CameraLocationX_Array) == 0x000020, "Member 'FEndDataTableCameraSequence::CameraLocationX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, CameraLocationY_Array) == 0x000030, "Member 'FEndDataTableCameraSequence::CameraLocationY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, CameraLocationZ_Array) == 0x000040, "Member 'FEndDataTableCameraSequence::CameraLocationZ_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, LookAtLocationX_Array) == 0x000050, "Member 'FEndDataTableCameraSequence::LookAtLocationX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, LookAtLocationY_Array) == 0x000060, "Member 'FEndDataTableCameraSequence::LookAtLocationY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, LookAtLocationZ_Array) == 0x000070, "Member 'FEndDataTableCameraSequence::LookAtLocationZ_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, FieldOfView_Array) == 0x000080, "Member 'FEndDataTableCameraSequence::FieldOfView_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, Roll_Array) == 0x000090, "Member 'FEndDataTableCameraSequence::Roll_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, Weight_Array) == 0x0000A0, "Member 'FEndDataTableCameraSequence::Weight_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleCaitSithSlotReel
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBattleCaitSithSlotReel final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 Pattern_Array;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleCaitSithSlotReel) == 0x000008, "Wrong alignment on FEndDataTableBattleCaitSithSlotReel");
static_assert(sizeof(FEndDataTableBattleCaitSithSlotReel) == 0x000018, "Wrong size on FEndDataTableBattleCaitSithSlotReel");
static_assert(offsetof(FEndDataTableBattleCaitSithSlotReel, Pattern_Array) == 0x000008, "Member 'FEndDataTableBattleCaitSithSlotReel::Pattern_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleCharaAttach
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableBattleCharaAttach final : public FEndDataTableRowBase
{
public:
	class FName                                   ParentCharacterName;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AttachParentSocketName0;                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         KindMesh;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MasterMeshName;                                    // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AttachMethod;                                      // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerSync;                                         // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableTarget;                                      // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerHPShare;                                      // 0x0027(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AttachedResetRelativeTransform;                    // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableAttachChildHitCharaResponse;                 // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AffectedParentStop;                                // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Children_Array;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         NumberOfAttachments;                               // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleCharaAttach) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaAttach");
static_assert(sizeof(FEndDataTableBattleCharaAttach) == 0x000048, "Wrong size on FEndDataTableBattleCharaAttach");
static_assert(offsetof(FEndDataTableBattleCharaAttach, ParentCharacterName) == 0x000008, "Member 'FEndDataTableBattleCharaAttach::ParentCharacterName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, AttachParentSocketName0) == 0x000010, "Member 'FEndDataTableBattleCharaAttach::AttachParentSocketName0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, KindMesh) == 0x000018, "Member 'FEndDataTableBattleCharaAttach::KindMesh' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, MasterMeshName) == 0x00001C, "Member 'FEndDataTableBattleCharaAttach::MasterMeshName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, AttachMethod) == 0x000024, "Member 'FEndDataTableBattleCharaAttach::AttachMethod' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, OwnerSync) == 0x000025, "Member 'FEndDataTableBattleCharaAttach::OwnerSync' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, EnableTarget) == 0x000026, "Member 'FEndDataTableBattleCharaAttach::EnableTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, OwnerHPShare) == 0x000027, "Member 'FEndDataTableBattleCharaAttach::OwnerHPShare' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, AttachedResetRelativeTransform) == 0x000028, "Member 'FEndDataTableBattleCharaAttach::AttachedResetRelativeTransform' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, EnableAttachChildHitCharaResponse) == 0x000029, "Member 'FEndDataTableBattleCharaAttach::EnableAttachChildHitCharaResponse' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, AffectedParentStop) == 0x00002A, "Member 'FEndDataTableBattleCharaAttach::AffectedParentStop' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, Children_Array) == 0x000030, "Member 'FEndDataTableBattleCharaAttach::Children_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, NumberOfAttachments) == 0x000040, "Member 'FEndDataTableBattleCharaAttach::NumberOfAttachments' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleCharaCategory
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBattleCharaCategory final : public FEndDataTableRowBase
{
public:
	uint8                                         Category;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleCharaCategory) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaCategory");
static_assert(sizeof(FEndDataTableBattleCharaCategory) == 0x000010, "Wrong size on FEndDataTableBattleCharaCategory");
static_assert(offsetof(FEndDataTableBattleCharaCategory, Category) == 0x000008, "Member 'FEndDataTableBattleCharaCategory::Category' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleCharaPartsSpec
// 0x0178 (0x0180 - 0x0008)
struct FEndDataTableBattleCharaPartsSpec final : public FEndDataTableRowBase
{
public:
	class FString                                 TextLabel;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CategoryID;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BoneName_Array;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   HitRangeBaseSocketName;                            // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HitRangeBaseAngle;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HitRangeAngleRange;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HitRangeHeightRange;                               // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitRangeBaseHit;                                   // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetIconSocketName;                              // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CameraLockSocketName;                              // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetPriority;                                    // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UnLinkOwnerUnitParameter;                          // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NoDamageBody;                                      // 0x005A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BreakMeshID_Array;                                 // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   DamageSourceID;                                    // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableBurstMotion;                                // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableDamageCollision;                            // 0x0079(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisablePushCollision;                              // 0x007A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableDisplayBattleLog;                           // 0x007B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BreakTextLabel;                                    // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableDamagePopup;                                // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableAerialNormalAttack;                         // 0x0091(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DummyFlag;                                         // 0x0092(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisplayWeak;                                       // 0x0093(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DisplayWeakBaseAngle;                              // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DisplayWeakRangeAngle;                             // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AlwaysEffectResourceCategory;                      // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AlwaysEffectResourceName;                          // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AlwaysEffectCreatePartName;                        // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HPType;                                            // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HP;                                                // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HPTypeHard;                                        // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HPHard;                                            // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PhysicsDefenseType;                                // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PhysicsDefense;                                    // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MagicDefenseType;                                  // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MagicDefense;                                      // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PropertyResistType0;                               // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PropertyResist0;                                   // 0x00D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PropertyResistType1;                               // 0x00D2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PropertyResist1;                                   // 0x00D3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 AttributeResistType_Array;                         // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 AttributeResist_Array;                             // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 BPDamageCorrectionPropertyType_Array;              // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 BPDamageCorrectionProperty_Array;                  // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 BPDamageCorrectionAttributeType_Array;             // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 BPDamageCorrectionAttribute_Array;                 // 0x0128(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ReplaceDamageSourceID_Array;                       // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DisablePlayEffectSocketName_Array;                 // 0x0148(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   AIPCCommandApproachSocketName;                     // 0x0158(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AIPCCommandApproachAngle;                          // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Radius;                                            // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DestructionPartsSpecID;                            // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DestructionPartsSocketID;                          // 0x0170(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HPRegeneAmount;                                    // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HPRegeneTime;                                      // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleCharaPartsSpec) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaPartsSpec");
static_assert(sizeof(FEndDataTableBattleCharaPartsSpec) == 0x000180, "Wrong size on FEndDataTableBattleCharaPartsSpec");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, TextLabel) == 0x000008, "Member 'FEndDataTableBattleCharaPartsSpec::TextLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, CategoryID) == 0x000018, "Member 'FEndDataTableBattleCharaPartsSpec::CategoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BoneName_Array) == 0x000020, "Member 'FEndDataTableBattleCharaPartsSpec::BoneName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HitRangeBaseSocketName) == 0x000030, "Member 'FEndDataTableBattleCharaPartsSpec::HitRangeBaseSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HitRangeBaseAngle) == 0x000038, "Member 'FEndDataTableBattleCharaPartsSpec::HitRangeBaseAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HitRangeAngleRange) == 0x00003C, "Member 'FEndDataTableBattleCharaPartsSpec::HitRangeAngleRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HitRangeHeightRange) == 0x000040, "Member 'FEndDataTableBattleCharaPartsSpec::HitRangeHeightRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HitRangeBaseHit) == 0x000044, "Member 'FEndDataTableBattleCharaPartsSpec::HitRangeBaseHit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, TargetIconSocketName) == 0x000048, "Member 'FEndDataTableBattleCharaPartsSpec::TargetIconSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, CameraLockSocketName) == 0x000050, "Member 'FEndDataTableBattleCharaPartsSpec::CameraLockSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, TargetPriority) == 0x000058, "Member 'FEndDataTableBattleCharaPartsSpec::TargetPriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, UnLinkOwnerUnitParameter) == 0x000059, "Member 'FEndDataTableBattleCharaPartsSpec::UnLinkOwnerUnitParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, NoDamageBody) == 0x00005A, "Member 'FEndDataTableBattleCharaPartsSpec::NoDamageBody' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BreakMeshID_Array) == 0x000060, "Member 'FEndDataTableBattleCharaPartsSpec::BreakMeshID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DamageSourceID) == 0x000070, "Member 'FEndDataTableBattleCharaPartsSpec::DamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisableBurstMotion) == 0x000078, "Member 'FEndDataTableBattleCharaPartsSpec::DisableBurstMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisableDamageCollision) == 0x000079, "Member 'FEndDataTableBattleCharaPartsSpec::DisableDamageCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisablePushCollision) == 0x00007A, "Member 'FEndDataTableBattleCharaPartsSpec::DisablePushCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisableDisplayBattleLog) == 0x00007B, "Member 'FEndDataTableBattleCharaPartsSpec::DisableDisplayBattleLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BreakTextLabel) == 0x000080, "Member 'FEndDataTableBattleCharaPartsSpec::BreakTextLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisableDamagePopup) == 0x000090, "Member 'FEndDataTableBattleCharaPartsSpec::DisableDamagePopup' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisableAerialNormalAttack) == 0x000091, "Member 'FEndDataTableBattleCharaPartsSpec::DisableAerialNormalAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DummyFlag) == 0x000092, "Member 'FEndDataTableBattleCharaPartsSpec::DummyFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisplayWeak) == 0x000093, "Member 'FEndDataTableBattleCharaPartsSpec::DisplayWeak' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisplayWeakBaseAngle) == 0x000094, "Member 'FEndDataTableBattleCharaPartsSpec::DisplayWeakBaseAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisplayWeakRangeAngle) == 0x000098, "Member 'FEndDataTableBattleCharaPartsSpec::DisplayWeakRangeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AlwaysEffectResourceCategory) == 0x00009C, "Member 'FEndDataTableBattleCharaPartsSpec::AlwaysEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AlwaysEffectResourceName) == 0x0000A0, "Member 'FEndDataTableBattleCharaPartsSpec::AlwaysEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AlwaysEffectCreatePartName) == 0x0000A8, "Member 'FEndDataTableBattleCharaPartsSpec::AlwaysEffectCreatePartName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HPType) == 0x0000B0, "Member 'FEndDataTableBattleCharaPartsSpec::HPType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HP) == 0x0000B4, "Member 'FEndDataTableBattleCharaPartsSpec::HP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HPTypeHard) == 0x0000B8, "Member 'FEndDataTableBattleCharaPartsSpec::HPTypeHard' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HPHard) == 0x0000BC, "Member 'FEndDataTableBattleCharaPartsSpec::HPHard' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PhysicsDefenseType) == 0x0000C0, "Member 'FEndDataTableBattleCharaPartsSpec::PhysicsDefenseType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PhysicsDefense) == 0x0000C4, "Member 'FEndDataTableBattleCharaPartsSpec::PhysicsDefense' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, MagicDefenseType) == 0x0000C8, "Member 'FEndDataTableBattleCharaPartsSpec::MagicDefenseType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, MagicDefense) == 0x0000CC, "Member 'FEndDataTableBattleCharaPartsSpec::MagicDefense' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PropertyResistType0) == 0x0000D0, "Member 'FEndDataTableBattleCharaPartsSpec::PropertyResistType0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PropertyResist0) == 0x0000D1, "Member 'FEndDataTableBattleCharaPartsSpec::PropertyResist0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PropertyResistType1) == 0x0000D2, "Member 'FEndDataTableBattleCharaPartsSpec::PropertyResistType1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PropertyResist1) == 0x0000D3, "Member 'FEndDataTableBattleCharaPartsSpec::PropertyResist1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AttributeResistType_Array) == 0x0000D8, "Member 'FEndDataTableBattleCharaPartsSpec::AttributeResistType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AttributeResist_Array) == 0x0000E8, "Member 'FEndDataTableBattleCharaPartsSpec::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BPDamageCorrectionPropertyType_Array) == 0x0000F8, "Member 'FEndDataTableBattleCharaPartsSpec::BPDamageCorrectionPropertyType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BPDamageCorrectionProperty_Array) == 0x000108, "Member 'FEndDataTableBattleCharaPartsSpec::BPDamageCorrectionProperty_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BPDamageCorrectionAttributeType_Array) == 0x000118, "Member 'FEndDataTableBattleCharaPartsSpec::BPDamageCorrectionAttributeType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BPDamageCorrectionAttribute_Array) == 0x000128, "Member 'FEndDataTableBattleCharaPartsSpec::BPDamageCorrectionAttribute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, ReplaceDamageSourceID_Array) == 0x000138, "Member 'FEndDataTableBattleCharaPartsSpec::ReplaceDamageSourceID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisablePlayEffectSocketName_Array) == 0x000148, "Member 'FEndDataTableBattleCharaPartsSpec::DisablePlayEffectSocketName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AIPCCommandApproachSocketName) == 0x000158, "Member 'FEndDataTableBattleCharaPartsSpec::AIPCCommandApproachSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AIPCCommandApproachAngle) == 0x000160, "Member 'FEndDataTableBattleCharaPartsSpec::AIPCCommandApproachAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, Radius) == 0x000164, "Member 'FEndDataTableBattleCharaPartsSpec::Radius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DestructionPartsSpecID) == 0x000168, "Member 'FEndDataTableBattleCharaPartsSpec::DestructionPartsSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DestructionPartsSocketID) == 0x000170, "Member 'FEndDataTableBattleCharaPartsSpec::DestructionPartsSocketID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HPRegeneAmount) == 0x000178, "Member 'FEndDataTableBattleCharaPartsSpec::HPRegeneAmount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HPRegeneTime) == 0x00017C, "Member 'FEndDataTableBattleCharaPartsSpec::HPRegeneTime' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCardGameAnomalyRule
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableCardGameAnomalyRule final : public FEndDataTableRowBase
{
public:
	uint8                                         Rule;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RuleParam;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RoundDeal;                                         // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 RoundCount_Array;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PlayerRoundDeal_Array;                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PlayerRoundDealCount_Array;                        // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EnemyRoundDeal_Array;                              // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 EnemyRoundDealCount_Array;                         // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RoundBoard_Array;                                  // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGameAnomalyRule) == 0x000008, "Wrong alignment on FEndDataTableCardGameAnomalyRule");
static_assert(sizeof(FEndDataTableCardGameAnomalyRule) == 0x000070, "Wrong size on FEndDataTableCardGameAnomalyRule");
static_assert(offsetof(FEndDataTableCardGameAnomalyRule, Rule) == 0x000008, "Member 'FEndDataTableCardGameAnomalyRule::Rule' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAnomalyRule, RuleParam) == 0x000009, "Member 'FEndDataTableCardGameAnomalyRule::RuleParam' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAnomalyRule, RoundDeal) == 0x00000A, "Member 'FEndDataTableCardGameAnomalyRule::RoundDeal' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAnomalyRule, RoundCount_Array) == 0x000010, "Member 'FEndDataTableCardGameAnomalyRule::RoundCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAnomalyRule, PlayerRoundDeal_Array) == 0x000020, "Member 'FEndDataTableCardGameAnomalyRule::PlayerRoundDeal_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAnomalyRule, PlayerRoundDealCount_Array) == 0x000030, "Member 'FEndDataTableCardGameAnomalyRule::PlayerRoundDealCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAnomalyRule, EnemyRoundDeal_Array) == 0x000040, "Member 'FEndDataTableCardGameAnomalyRule::EnemyRoundDeal_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAnomalyRule, EnemyRoundDealCount_Array) == 0x000050, "Member 'FEndDataTableCardGameAnomalyRule::EnemyRoundDealCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAnomalyRule, RoundBoard_Array) == 0x000060, "Member 'FEndDataTableCardGameAnomalyRule::RoundBoard_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleCombinationAbility
// 0x00B0 (0x00B8 - 0x0008)
struct FEndDataTableBattleCombinationAbility final : public FEndDataTableRowBase
{
public:
	uint8                                         CombinationType;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CombinationGroupType;                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         iconIndex;                                         // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RefPlayerIdIconIndex;                              // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         iconIndex_1;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CombinationCategory;                               // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RequireHoldButton;                                 // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableReserveMemberCommand;                       // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Special;                                           // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CombinationSupportTime;                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CombinationSupportCooldownTime;                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 PlayerType_Array;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ExecuteConditionType0;                             // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           WaitAbilityID_Array;                               // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   SyncActionID;                                      // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ExecuteAbilityID_Array;                            // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   SyncActionIDFatMoogle;                             // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ExecuteAbilityIDFatMoogle;                         // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AttachActorType0;                                  // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachActorParameterName0;                         // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AttachParentCharacter0;                            // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocketName0;                                 // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MovieName;                                         // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HideList;                                          // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FirstUseDecideStoryFlag;                           // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FirstUseSendStateTrigger;                          // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleCombinationAbility) == 0x000008, "Wrong alignment on FEndDataTableBattleCombinationAbility");
static_assert(sizeof(FEndDataTableBattleCombinationAbility) == 0x0000B8, "Wrong size on FEndDataTableBattleCombinationAbility");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, CombinationType) == 0x000008, "Member 'FEndDataTableBattleCombinationAbility::CombinationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, CombinationGroupType) == 0x000009, "Member 'FEndDataTableBattleCombinationAbility::CombinationGroupType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, iconIndex) == 0x00000A, "Member 'FEndDataTableBattleCombinationAbility::iconIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, RefPlayerIdIconIndex) == 0x00000C, "Member 'FEndDataTableBattleCombinationAbility::RefPlayerIdIconIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, iconIndex_1) == 0x000014, "Member 'FEndDataTableBattleCombinationAbility::iconIndex_1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, CombinationCategory) == 0x000015, "Member 'FEndDataTableBattleCombinationAbility::CombinationCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, RequireHoldButton) == 0x000016, "Member 'FEndDataTableBattleCombinationAbility::RequireHoldButton' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, DisableReserveMemberCommand) == 0x000017, "Member 'FEndDataTableBattleCombinationAbility::DisableReserveMemberCommand' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, Special) == 0x000018, "Member 'FEndDataTableBattleCombinationAbility::Special' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, CombinationSupportTime) == 0x00001C, "Member 'FEndDataTableBattleCombinationAbility::CombinationSupportTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, CombinationSupportCooldownTime) == 0x000020, "Member 'FEndDataTableBattleCombinationAbility::CombinationSupportCooldownTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, PlayerType_Array) == 0x000028, "Member 'FEndDataTableBattleCombinationAbility::PlayerType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, ExecuteConditionType0) == 0x000038, "Member 'FEndDataTableBattleCombinationAbility::ExecuteConditionType0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, WaitAbilityID_Array) == 0x000040, "Member 'FEndDataTableBattleCombinationAbility::WaitAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, SyncActionID) == 0x000050, "Member 'FEndDataTableBattleCombinationAbility::SyncActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, ExecuteAbilityID_Array) == 0x000058, "Member 'FEndDataTableBattleCombinationAbility::ExecuteAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, SyncActionIDFatMoogle) == 0x000068, "Member 'FEndDataTableBattleCombinationAbility::SyncActionIDFatMoogle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, ExecuteAbilityIDFatMoogle) == 0x000070, "Member 'FEndDataTableBattleCombinationAbility::ExecuteAbilityIDFatMoogle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, AttachActorType0) == 0x000078, "Member 'FEndDataTableBattleCombinationAbility::AttachActorType0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, AttachActorParameterName0) == 0x00007C, "Member 'FEndDataTableBattleCombinationAbility::AttachActorParameterName0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, AttachParentCharacter0) == 0x000084, "Member 'FEndDataTableBattleCombinationAbility::AttachParentCharacter0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, AttachSocketName0) == 0x000088, "Member 'FEndDataTableBattleCombinationAbility::AttachSocketName0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, MovieName) == 0x000090, "Member 'FEndDataTableBattleCombinationAbility::MovieName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, HideList) == 0x0000A0, "Member 'FEndDataTableBattleCombinationAbility::HideList' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, FirstUseDecideStoryFlag) == 0x0000A4, "Member 'FEndDataTableBattleCombinationAbility::FirstUseDecideStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCombinationAbility, FirstUseSendStateTrigger) == 0x0000AC, "Member 'FEndDataTableBattleCombinationAbility::FirstUseSendStateTrigger' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleConditionTrigger
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableBattleConditionTrigger final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           EasyConditionType_Array;                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         EasyConditionArg_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         TriggerMaxNum;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StateTriggerId_Array;                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ConditionIgnoreStoryFlag_Array;                    // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   BGMName;                                           // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleConditionTrigger) == 0x000008, "Wrong alignment on FEndDataTableBattleConditionTrigger");
static_assert(sizeof(FEndDataTableBattleConditionTrigger) == 0x000058, "Wrong size on FEndDataTableBattleConditionTrigger");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, EasyConditionType_Array) == 0x000008, "Member 'FEndDataTableBattleConditionTrigger::EasyConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, EasyConditionArg_Array) == 0x000018, "Member 'FEndDataTableBattleConditionTrigger::EasyConditionArg_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, TriggerMaxNum) == 0x000028, "Member 'FEndDataTableBattleConditionTrigger::TriggerMaxNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, StateTriggerId_Array) == 0x000030, "Member 'FEndDataTableBattleConditionTrigger::StateTriggerId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, ConditionIgnoreStoryFlag_Array) == 0x000040, "Member 'FEndDataTableBattleConditionTrigger::ConditionIgnoreStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, BGMName) == 0x000050, "Member 'FEndDataTableBattleConditionTrigger::BGMName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboCaptureBalloonGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChocoboCaptureBalloonGroup final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 PhaseAction_Array;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboCaptureBalloonGroup) == 0x000008, "Wrong alignment on FEndDataTableChocoboCaptureBalloonGroup");
static_assert(sizeof(FEndDataTableChocoboCaptureBalloonGroup) == 0x000018, "Wrong size on FEndDataTableChocoboCaptureBalloonGroup");
static_assert(offsetof(FEndDataTableChocoboCaptureBalloonGroup, PhaseAction_Array) == 0x000008, "Member 'FEndDataTableChocoboCaptureBalloonGroup::PhaseAction_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleConditionTriggerGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBattleConditionTriggerGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           BattleConditionTriggerId_Array;                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleConditionTriggerGroup) == 0x000008, "Wrong alignment on FEndDataTableBattleConditionTriggerGroup");
static_assert(sizeof(FEndDataTableBattleConditionTriggerGroup) == 0x000018, "Wrong size on FEndDataTableBattleConditionTriggerGroup");
static_assert(offsetof(FEndDataTableBattleConditionTriggerGroup, BattleConditionTriggerId_Array) == 0x000008, "Member 'FEndDataTableBattleConditionTriggerGroup::BattleConditionTriggerId_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableSituationTrigger
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableSituationTrigger final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         StringArgument_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerArgument_Array;                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   PlaySituationAction;                               // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EffectPointName_Array;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableSituationTrigger) == 0x000008, "Wrong alignment on FEndDataTableSituationTrigger");
static_assert(sizeof(FEndDataTableSituationTrigger) == 0x000048, "Wrong size on FEndDataTableSituationTrigger");
static_assert(offsetof(FEndDataTableSituationTrigger, Type) == 0x000008, "Member 'FEndDataTableSituationTrigger::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationTrigger, StringArgument_Array) == 0x000010, "Member 'FEndDataTableSituationTrigger::StringArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationTrigger, IntegerArgument_Array) == 0x000020, "Member 'FEndDataTableSituationTrigger::IntegerArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationTrigger, PlaySituationAction) == 0x000030, "Member 'FEndDataTableSituationTrigger::PlaySituationAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationTrigger, EffectPointName_Array) == 0x000038, "Member 'FEndDataTableSituationTrigger::EffectPointName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleDamageSource
// 0x0410 (0x0418 - 0x0008)
struct FEndDataTableBattleDamageSource final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 CreateDamageSourceConditionType_Array;             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CreateDamageSourceParameter_Array;                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 CreateDamageSourceFloat_Array;                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         DamageType;                                        // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TypeParameter;                                     // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Power;                                             // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PowerBurst;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PowerBreak;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PowerCactusMission;                                // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PowerType;                                         // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomBreadth;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CriticalHitRate;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BPAttack;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BPAttackDamageCoefficient;                         // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LinkageAddCoefficient;                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BurstDamageCoefficientAddOnBurst;                  // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BurstTimeExtension;                                // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StunValue;                                         // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StunTimeType;                                      // 0x006D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StunAttenuationStartTimeType;                      // 0x006E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StunAttenuationValueType;                          // 0x006F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitBonusType;                                      // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitBonusParameter;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BurstHitBonusParameter;                            // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BreakHitBonusParameter;                            // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HitBonusLimit;                                     // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Property;                                          // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ShieldType;                                        // 0x0085(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ReflectType;                                       // 0x0086(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DamageBlockType;                                   // 0x0087(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Attribute_Array;                                   // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         BreakValue;                                        // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitTarget0;                                        // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitTarget1;                                        // 0x009D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitTarget5;                                        // 0x009E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitTarget4;                                        // 0x009F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitTarget6;                                        // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitTarget2;                                        // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitTarget3;                                        // 0x00A2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A3[0x1];                                       // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitCharaSpecID;                                    // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnemyHitCategoryTypeBit;                           // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitDamageSourceTypeBit;                            // 0x00AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           HitDamageSourceID_Array;                           // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         HitDamageSourceEffectType;                         // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableHitBackground;                              // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MoveOnTerrain;                                     // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DestroyBreakableDamage;                            // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SyncActionHitCountType;                            // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitDestroyType;                                    // 0x00C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitDestroyTargetType;                              // 0x00CA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitCountTotal;                                     // 0x00CB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitCount;                                          // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitInterval;                                       // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HitGroupName;                                      // 0x00D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CollisionType;                                     // 0x00DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CollisionParameter_Array;                          // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         CollisionFaceGuardScale;                           // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CreateBasePos;                                     // 0x00F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreatePartName;                                    // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CreatePartOffsetDirectionType;                     // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CreatePartOffsetX;                                 // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetY;                                 // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetZ;                                 // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetPitch;                             // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetYaw;                               // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetRoll;                              // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreateDelayTime;                                   // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetBase;                                        // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetName;                                        // 0x0124(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetOffsetDirectionType;                         // 0x012C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetOffsetX;                                     // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetOffsetY;                                     // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetOffsetZ;                                     // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DirectionType;                                     // 0x013C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisableHitTime;                                    // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RecalcMoveDir;                                     // 0x0144(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisableHitOnlyTime;                                // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LifeTimeNotify;                                    // 0x014C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DestroyDelayTime;                                  // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerStopType;                                     // 0x0158(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CreateExecutionType;                               // 0x0159(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15A[0x2];                                      // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreateCameraShakeDataID;                           // 0x015C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ProgressDirectionType;                             // 0x0164(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ControlType;                                       // 0x0165(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_166[0x2];                                      // 0x0166(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ControlParameter_Array;                            // 0x0168(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         ControlFlag;                                       // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ControlName_Array;                                 // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ExtControlType_Array;                              // 0x0190(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ExtControlParameter_Array;                         // 0x01A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ExtControlName_Array;                              // 0x01B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ExtControlFlag_Array;                              // 0x01C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         RotationType;                                      // 0x01D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ConditionCreateDamageSourceType_Array;             // 0x01D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ConditionCreateDamageSourceID_Array;               // 0x01E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int64                                         Flag0;                                             // 0x01F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         GuardBasePos;                                      // 0x0200(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CutValue;                                          // 0x0201(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitReactionID;                                     // 0x0204(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 HitReactionType_Array;                             // 0x0210(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 HitReactionParam_Array;                            // 0x0220(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           HitReactionParamID_Array;                          // 0x0230(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AerialHitReactionParam_Array;                      // 0x0240(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         KnockbackDirType;                                  // 0x0250(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KnockbackDirStringParam0;                          // 0x0254(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitExecutionType;                                  // 0x025C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitSlowID;                                         // 0x0260(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HitCameraShakeDataID;                              // 0x0268(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HitForceFeedbackFileName;                          // 0x0270(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CharaSpecType;                                     // 0x0278(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharaSpecID;                                       // 0x027C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CharaSpecMotionName;                               // 0x0284(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PhysicsType;                                       // 0x028C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicsVelocityScaleCharacter;                     // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PhysicsVelocityScaleBackground;                    // 0x0294(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PhysicsVelocityScaleDamageSource;                  // 0x0298(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CreatePhysicsObjectCharaSpecID;                    // 0x029C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CreatePhysicsObjectBasePos;                        // 0x02A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreatePhysicsObjectPartName;                       // 0x02A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePhysicsObjectDelay;                          // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePhysicsObjectForce;                          // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePhysicsObjectForceRandom;                    // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CreateEffectResourceCategory;                      // 0x02BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreateEffectResourceName;                          // 0x02C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CreateSoundResourceCategory;                       // 0x02C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreateSoundResourceName;                           // 0x02CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PushCollisionEnable;                               // 0x02D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PushCollisionRadiusReachTime;                      // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 HitEffectResourceCategory_Array;                   // 0x02E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           HitEffectResourceName_Array;                       // 0x02F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 HitEffectAttachCharacter_Array;                    // 0x0300(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 HitEffectAttachHitLocation_Array;                  // 0x0310(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 HitEffectIntervalTime_Array;                       // 0x0320(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         HitSoundResourceCategory;                          // 0x0330(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitSoundResourceName;                              // 0x0334(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         GuardEffectResourceCategory;                       // 0x033C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GuardEffectResourceName;                           // 0x0340(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         GuardSoundResourceCategory;                        // 0x0348(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GuardSoundResourceName;                            // 0x034C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BindEffectResourceCategory;                        // 0x0354(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_355[0x3];                                      // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BindEffectResourceName;                            // 0x0358(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BindEffectAttachSocket;                            // 0x0360(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BindEffectDelayTime;                               // 0x0364(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BindEffectOffsetX;                                 // 0x0368(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BindEffectOffsetY;                                 // 0x036C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BindEffectOffsetZ;                                 // 0x0370(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BindEffectOffsetPitch;                             // 0x0374(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BindEffectOffsetYaw;                               // 0x0378(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BindEffectOffsetRoll;                              // 0x037C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BindSoundResourceCategory;                         // 0x0380(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_381[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BindSoundResourceName;                             // 0x0384(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 StatusChangeProbability_Array;                     // 0x0390(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StatusChangeID_Array;                              // 0x03A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 StatusChangeTime_Array;                            // 0x03B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 StatusChangeLock_Array;                            // 0x03C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   SpecialStatusChangeID;                             // 0x03D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TakeDamageDirectionType;                           // 0x03D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         GuardOwnerReactionType;                            // 0x03D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3DA[0x6];                                      // 0x03DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 GuardOwnerReactionParam_Array;                     // 0x03E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           GuardOwnerReactionStringParam_Array;               // 0x03F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         GuardOwnerReactionUCPCGuardOnly;                   // 0x0400(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableLookAtCheck;                                // 0x0401(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableMoveHitPosition;                            // 0x0402(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_403[0x1];                                      // 0x0403(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DangerRange;                                       // 0x0404(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DangerLengthCoefficient;                           // 0x0408(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DangerDamageDestroyDelayTime;                      // 0x040C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DangerDamageDodgeDirectionType;                    // 0x0410(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DangerDamageReflectType;                           // 0x0411(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceDamageDisplayToOne;                           // 0x0412(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_413[0x5];                                      // 0x0413(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleDamageSource) == 0x000008, "Wrong alignment on FEndDataTableBattleDamageSource");
static_assert(sizeof(FEndDataTableBattleDamageSource) == 0x000418, "Wrong size on FEndDataTableBattleDamageSource");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateDamageSourceConditionType_Array) == 0x000008, "Member 'FEndDataTableBattleDamageSource::CreateDamageSourceConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateDamageSourceParameter_Array) == 0x000018, "Member 'FEndDataTableBattleDamageSource::CreateDamageSourceParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateDamageSourceFloat_Array) == 0x000028, "Member 'FEndDataTableBattleDamageSource::CreateDamageSourceFloat_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DamageType) == 0x000038, "Member 'FEndDataTableBattleDamageSource::DamageType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TypeParameter) == 0x000039, "Member 'FEndDataTableBattleDamageSource::TypeParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, Power) == 0x00003C, "Member 'FEndDataTableBattleDamageSource::Power' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PowerBurst) == 0x000040, "Member 'FEndDataTableBattleDamageSource::PowerBurst' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PowerBreak) == 0x000044, "Member 'FEndDataTableBattleDamageSource::PowerBreak' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PowerCactusMission) == 0x000048, "Member 'FEndDataTableBattleDamageSource::PowerCactusMission' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PowerType) == 0x00004C, "Member 'FEndDataTableBattleDamageSource::PowerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, RandomBreadth) == 0x000050, "Member 'FEndDataTableBattleDamageSource::RandomBreadth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CriticalHitRate) == 0x000054, "Member 'FEndDataTableBattleDamageSource::CriticalHitRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BPAttack) == 0x000058, "Member 'FEndDataTableBattleDamageSource::BPAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BPAttackDamageCoefficient) == 0x00005C, "Member 'FEndDataTableBattleDamageSource::BPAttackDamageCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, LinkageAddCoefficient) == 0x000060, "Member 'FEndDataTableBattleDamageSource::LinkageAddCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BurstDamageCoefficientAddOnBurst) == 0x000064, "Member 'FEndDataTableBattleDamageSource::BurstDamageCoefficientAddOnBurst' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BurstTimeExtension) == 0x000068, "Member 'FEndDataTableBattleDamageSource::BurstTimeExtension' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, StunValue) == 0x00006C, "Member 'FEndDataTableBattleDamageSource::StunValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, StunTimeType) == 0x00006D, "Member 'FEndDataTableBattleDamageSource::StunTimeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, StunAttenuationStartTimeType) == 0x00006E, "Member 'FEndDataTableBattleDamageSource::StunAttenuationStartTimeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, StunAttenuationValueType) == 0x00006F, "Member 'FEndDataTableBattleDamageSource::StunAttenuationValueType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitBonusType) == 0x000070, "Member 'FEndDataTableBattleDamageSource::HitBonusType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitBonusParameter) == 0x000074, "Member 'FEndDataTableBattleDamageSource::HitBonusParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BurstHitBonusParameter) == 0x000078, "Member 'FEndDataTableBattleDamageSource::BurstHitBonusParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BreakHitBonusParameter) == 0x00007C, "Member 'FEndDataTableBattleDamageSource::BreakHitBonusParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitBonusLimit) == 0x000080, "Member 'FEndDataTableBattleDamageSource::HitBonusLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, Property) == 0x000084, "Member 'FEndDataTableBattleDamageSource::Property' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ShieldType) == 0x000085, "Member 'FEndDataTableBattleDamageSource::ShieldType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ReflectType) == 0x000086, "Member 'FEndDataTableBattleDamageSource::ReflectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DamageBlockType) == 0x000087, "Member 'FEndDataTableBattleDamageSource::DamageBlockType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, Attribute_Array) == 0x000088, "Member 'FEndDataTableBattleDamageSource::Attribute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BreakValue) == 0x000098, "Member 'FEndDataTableBattleDamageSource::BreakValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget0) == 0x00009C, "Member 'FEndDataTableBattleDamageSource::HitTarget0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget1) == 0x00009D, "Member 'FEndDataTableBattleDamageSource::HitTarget1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget5) == 0x00009E, "Member 'FEndDataTableBattleDamageSource::HitTarget5' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget4) == 0x00009F, "Member 'FEndDataTableBattleDamageSource::HitTarget4' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget6) == 0x0000A0, "Member 'FEndDataTableBattleDamageSource::HitTarget6' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget2) == 0x0000A1, "Member 'FEndDataTableBattleDamageSource::HitTarget2' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget3) == 0x0000A2, "Member 'FEndDataTableBattleDamageSource::HitTarget3' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitCharaSpecID) == 0x0000A4, "Member 'FEndDataTableBattleDamageSource::HitCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, EnemyHitCategoryTypeBit) == 0x0000AC, "Member 'FEndDataTableBattleDamageSource::EnemyHitCategoryTypeBit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitDamageSourceTypeBit) == 0x0000AD, "Member 'FEndDataTableBattleDamageSource::HitDamageSourceTypeBit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitDamageSourceID_Array) == 0x0000B0, "Member 'FEndDataTableBattleDamageSource::HitDamageSourceID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitDamageSourceEffectType) == 0x0000C0, "Member 'FEndDataTableBattleDamageSource::HitDamageSourceEffectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableHitBackground) == 0x0000C1, "Member 'FEndDataTableBattleDamageSource::DisableHitBackground' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, MoveOnTerrain) == 0x0000C2, "Member 'FEndDataTableBattleDamageSource::MoveOnTerrain' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DestroyBreakableDamage) == 0x0000C4, "Member 'FEndDataTableBattleDamageSource::DestroyBreakableDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, SyncActionHitCountType) == 0x0000C8, "Member 'FEndDataTableBattleDamageSource::SyncActionHitCountType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitDestroyType) == 0x0000C9, "Member 'FEndDataTableBattleDamageSource::HitDestroyType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitDestroyTargetType) == 0x0000CA, "Member 'FEndDataTableBattleDamageSource::HitDestroyTargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitCountTotal) == 0x0000CB, "Member 'FEndDataTableBattleDamageSource::HitCountTotal' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitCount) == 0x0000CC, "Member 'FEndDataTableBattleDamageSource::HitCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitInterval) == 0x0000D0, "Member 'FEndDataTableBattleDamageSource::HitInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitGroupName) == 0x0000D4, "Member 'FEndDataTableBattleDamageSource::HitGroupName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CollisionType) == 0x0000DC, "Member 'FEndDataTableBattleDamageSource::CollisionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CollisionParameter_Array) == 0x0000E0, "Member 'FEndDataTableBattleDamageSource::CollisionParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CollisionFaceGuardScale) == 0x0000F0, "Member 'FEndDataTableBattleDamageSource::CollisionFaceGuardScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateBasePos) == 0x0000F4, "Member 'FEndDataTableBattleDamageSource::CreateBasePos' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartName) == 0x0000F8, "Member 'FEndDataTableBattleDamageSource::CreatePartName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetDirectionType) == 0x000100, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetDirectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetX) == 0x000104, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetY) == 0x000108, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetZ) == 0x00010C, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetPitch) == 0x000110, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetYaw) == 0x000114, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetRoll) == 0x000118, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetRoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateDelayTime) == 0x00011C, "Member 'FEndDataTableBattleDamageSource::CreateDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TargetBase) == 0x000120, "Member 'FEndDataTableBattleDamageSource::TargetBase' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TargetName) == 0x000124, "Member 'FEndDataTableBattleDamageSource::TargetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TargetOffsetDirectionType) == 0x00012C, "Member 'FEndDataTableBattleDamageSource::TargetOffsetDirectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TargetOffsetX) == 0x000130, "Member 'FEndDataTableBattleDamageSource::TargetOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TargetOffsetY) == 0x000134, "Member 'FEndDataTableBattleDamageSource::TargetOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TargetOffsetZ) == 0x000138, "Member 'FEndDataTableBattleDamageSource::TargetOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DirectionType) == 0x00013C, "Member 'FEndDataTableBattleDamageSource::DirectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableHitTime) == 0x000140, "Member 'FEndDataTableBattleDamageSource::DisableHitTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, RecalcMoveDir) == 0x000144, "Member 'FEndDataTableBattleDamageSource::RecalcMoveDir' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableHitOnlyTime) == 0x000148, "Member 'FEndDataTableBattleDamageSource::DisableHitOnlyTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, LifeTimeNotify) == 0x00014C, "Member 'FEndDataTableBattleDamageSource::LifeTimeNotify' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, LifeTime) == 0x000150, "Member 'FEndDataTableBattleDamageSource::LifeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DestroyDelayTime) == 0x000154, "Member 'FEndDataTableBattleDamageSource::DestroyDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, OwnerStopType) == 0x000158, "Member 'FEndDataTableBattleDamageSource::OwnerStopType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateExecutionType) == 0x000159, "Member 'FEndDataTableBattleDamageSource::CreateExecutionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateCameraShakeDataID) == 0x00015C, "Member 'FEndDataTableBattleDamageSource::CreateCameraShakeDataID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ProgressDirectionType) == 0x000164, "Member 'FEndDataTableBattleDamageSource::ProgressDirectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ControlType) == 0x000165, "Member 'FEndDataTableBattleDamageSource::ControlType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ControlParameter_Array) == 0x000168, "Member 'FEndDataTableBattleDamageSource::ControlParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ControlFlag) == 0x000178, "Member 'FEndDataTableBattleDamageSource::ControlFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ControlName_Array) == 0x000180, "Member 'FEndDataTableBattleDamageSource::ControlName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ExtControlType_Array) == 0x000190, "Member 'FEndDataTableBattleDamageSource::ExtControlType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ExtControlParameter_Array) == 0x0001A0, "Member 'FEndDataTableBattleDamageSource::ExtControlParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ExtControlName_Array) == 0x0001B0, "Member 'FEndDataTableBattleDamageSource::ExtControlName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ExtControlFlag_Array) == 0x0001C0, "Member 'FEndDataTableBattleDamageSource::ExtControlFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, RotationType) == 0x0001D0, "Member 'FEndDataTableBattleDamageSource::RotationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ConditionCreateDamageSourceType_Array) == 0x0001D8, "Member 'FEndDataTableBattleDamageSource::ConditionCreateDamageSourceType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ConditionCreateDamageSourceID_Array) == 0x0001E8, "Member 'FEndDataTableBattleDamageSource::ConditionCreateDamageSourceID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, Flag0) == 0x0001F8, "Member 'FEndDataTableBattleDamageSource::Flag0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardBasePos) == 0x000200, "Member 'FEndDataTableBattleDamageSource::GuardBasePos' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CutValue) == 0x000201, "Member 'FEndDataTableBattleDamageSource::CutValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitReactionID) == 0x000204, "Member 'FEndDataTableBattleDamageSource::HitReactionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitReactionType_Array) == 0x000210, "Member 'FEndDataTableBattleDamageSource::HitReactionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitReactionParam_Array) == 0x000220, "Member 'FEndDataTableBattleDamageSource::HitReactionParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitReactionParamID_Array) == 0x000230, "Member 'FEndDataTableBattleDamageSource::HitReactionParamID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, AerialHitReactionParam_Array) == 0x000240, "Member 'FEndDataTableBattleDamageSource::AerialHitReactionParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, KnockbackDirType) == 0x000250, "Member 'FEndDataTableBattleDamageSource::KnockbackDirType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, KnockbackDirStringParam0) == 0x000254, "Member 'FEndDataTableBattleDamageSource::KnockbackDirStringParam0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitExecutionType) == 0x00025C, "Member 'FEndDataTableBattleDamageSource::HitExecutionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitSlowID) == 0x000260, "Member 'FEndDataTableBattleDamageSource::HitSlowID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitCameraShakeDataID) == 0x000268, "Member 'FEndDataTableBattleDamageSource::HitCameraShakeDataID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitForceFeedbackFileName) == 0x000270, "Member 'FEndDataTableBattleDamageSource::HitForceFeedbackFileName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CharaSpecType) == 0x000278, "Member 'FEndDataTableBattleDamageSource::CharaSpecType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CharaSpecID) == 0x00027C, "Member 'FEndDataTableBattleDamageSource::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CharaSpecMotionName) == 0x000284, "Member 'FEndDataTableBattleDamageSource::CharaSpecMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PhysicsType) == 0x00028C, "Member 'FEndDataTableBattleDamageSource::PhysicsType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PhysicsVelocityScaleCharacter) == 0x000290, "Member 'FEndDataTableBattleDamageSource::PhysicsVelocityScaleCharacter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PhysicsVelocityScaleBackground) == 0x000294, "Member 'FEndDataTableBattleDamageSource::PhysicsVelocityScaleBackground' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PhysicsVelocityScaleDamageSource) == 0x000298, "Member 'FEndDataTableBattleDamageSource::PhysicsVelocityScaleDamageSource' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectCharaSpecID) == 0x00029C, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectBasePos) == 0x0002A4, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectBasePos' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectPartName) == 0x0002A8, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectPartName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectDelay) == 0x0002B0, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectDelay' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectForce) == 0x0002B4, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectForce' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectForceRandom) == 0x0002B8, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectForceRandom' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateEffectResourceCategory) == 0x0002BC, "Member 'FEndDataTableBattleDamageSource::CreateEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateEffectResourceName) == 0x0002C0, "Member 'FEndDataTableBattleDamageSource::CreateEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateSoundResourceCategory) == 0x0002C8, "Member 'FEndDataTableBattleDamageSource::CreateSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateSoundResourceName) == 0x0002CC, "Member 'FEndDataTableBattleDamageSource::CreateSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PushCollisionEnable) == 0x0002D4, "Member 'FEndDataTableBattleDamageSource::PushCollisionEnable' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PushCollisionRadiusReachTime) == 0x0002D8, "Member 'FEndDataTableBattleDamageSource::PushCollisionRadiusReachTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitEffectResourceCategory_Array) == 0x0002E0, "Member 'FEndDataTableBattleDamageSource::HitEffectResourceCategory_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitEffectResourceName_Array) == 0x0002F0, "Member 'FEndDataTableBattleDamageSource::HitEffectResourceName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitEffectAttachCharacter_Array) == 0x000300, "Member 'FEndDataTableBattleDamageSource::HitEffectAttachCharacter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitEffectAttachHitLocation_Array) == 0x000310, "Member 'FEndDataTableBattleDamageSource::HitEffectAttachHitLocation_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitEffectIntervalTime_Array) == 0x000320, "Member 'FEndDataTableBattleDamageSource::HitEffectIntervalTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitSoundResourceCategory) == 0x000330, "Member 'FEndDataTableBattleDamageSource::HitSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitSoundResourceName) == 0x000334, "Member 'FEndDataTableBattleDamageSource::HitSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardEffectResourceCategory) == 0x00033C, "Member 'FEndDataTableBattleDamageSource::GuardEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardEffectResourceName) == 0x000340, "Member 'FEndDataTableBattleDamageSource::GuardEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardSoundResourceCategory) == 0x000348, "Member 'FEndDataTableBattleDamageSource::GuardSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardSoundResourceName) == 0x00034C, "Member 'FEndDataTableBattleDamageSource::GuardSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectResourceCategory) == 0x000354, "Member 'FEndDataTableBattleDamageSource::BindEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectResourceName) == 0x000358, "Member 'FEndDataTableBattleDamageSource::BindEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectAttachSocket) == 0x000360, "Member 'FEndDataTableBattleDamageSource::BindEffectAttachSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectDelayTime) == 0x000364, "Member 'FEndDataTableBattleDamageSource::BindEffectDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectOffsetX) == 0x000368, "Member 'FEndDataTableBattleDamageSource::BindEffectOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectOffsetY) == 0x00036C, "Member 'FEndDataTableBattleDamageSource::BindEffectOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectOffsetZ) == 0x000370, "Member 'FEndDataTableBattleDamageSource::BindEffectOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectOffsetPitch) == 0x000374, "Member 'FEndDataTableBattleDamageSource::BindEffectOffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectOffsetYaw) == 0x000378, "Member 'FEndDataTableBattleDamageSource::BindEffectOffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectOffsetRoll) == 0x00037C, "Member 'FEndDataTableBattleDamageSource::BindEffectOffsetRoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindSoundResourceCategory) == 0x000380, "Member 'FEndDataTableBattleDamageSource::BindSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindSoundResourceName) == 0x000384, "Member 'FEndDataTableBattleDamageSource::BindSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, StatusChangeProbability_Array) == 0x000390, "Member 'FEndDataTableBattleDamageSource::StatusChangeProbability_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, StatusChangeID_Array) == 0x0003A0, "Member 'FEndDataTableBattleDamageSource::StatusChangeID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, StatusChangeTime_Array) == 0x0003B0, "Member 'FEndDataTableBattleDamageSource::StatusChangeTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, StatusChangeLock_Array) == 0x0003C0, "Member 'FEndDataTableBattleDamageSource::StatusChangeLock_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, SpecialStatusChangeID) == 0x0003D0, "Member 'FEndDataTableBattleDamageSource::SpecialStatusChangeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TakeDamageDirectionType) == 0x0003D8, "Member 'FEndDataTableBattleDamageSource::TakeDamageDirectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardOwnerReactionType) == 0x0003D9, "Member 'FEndDataTableBattleDamageSource::GuardOwnerReactionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardOwnerReactionParam_Array) == 0x0003E0, "Member 'FEndDataTableBattleDamageSource::GuardOwnerReactionParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardOwnerReactionStringParam_Array) == 0x0003F0, "Member 'FEndDataTableBattleDamageSource::GuardOwnerReactionStringParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardOwnerReactionUCPCGuardOnly) == 0x000400, "Member 'FEndDataTableBattleDamageSource::GuardOwnerReactionUCPCGuardOnly' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableLookAtCheck) == 0x000401, "Member 'FEndDataTableBattleDamageSource::DisableLookAtCheck' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableMoveHitPosition) == 0x000402, "Member 'FEndDataTableBattleDamageSource::DisableMoveHitPosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DangerRange) == 0x000404, "Member 'FEndDataTableBattleDamageSource::DangerRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DangerLengthCoefficient) == 0x000408, "Member 'FEndDataTableBattleDamageSource::DangerLengthCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DangerDamageDestroyDelayTime) == 0x00040C, "Member 'FEndDataTableBattleDamageSource::DangerDamageDestroyDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DangerDamageDodgeDirectionType) == 0x000410, "Member 'FEndDataTableBattleDamageSource::DangerDamageDodgeDirectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DangerDamageReflectType) == 0x000411, "Member 'FEndDataTableBattleDamageSource::DangerDamageReflectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ForceDamageDisplayToOne) == 0x000412, "Member 'FEndDataTableBattleDamageSource::ForceDamageDisplayToOne' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCondorFortOpponent
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableCondorFortOpponent final : public FEndDataTableRowBase
{
public:
	class FName                                   NameTextID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HelpTextId;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpeningCameraID;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WaveID;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DeckID;                                            // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsMissionMode;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HideShinra;                                        // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCondorFortOpponent) == 0x000008, "Wrong alignment on FEndDataTableCondorFortOpponent");
static_assert(sizeof(FEndDataTableCondorFortOpponent) == 0x000038, "Wrong size on FEndDataTableCondorFortOpponent");
static_assert(offsetof(FEndDataTableCondorFortOpponent, NameTextID) == 0x000008, "Member 'FEndDataTableCondorFortOpponent::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, HelpTextId) == 0x000010, "Member 'FEndDataTableCondorFortOpponent::HelpTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, OpeningCameraID) == 0x000018, "Member 'FEndDataTableCondorFortOpponent::OpeningCameraID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, WaveID) == 0x000020, "Member 'FEndDataTableCondorFortOpponent::WaveID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, DeckID) == 0x000028, "Member 'FEndDataTableCondorFortOpponent::DeckID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, IsMissionMode) == 0x000030, "Member 'FEndDataTableCondorFortOpponent::IsMissionMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, HideShinra) == 0x000031, "Member 'FEndDataTableCondorFortOpponent::HideShinra' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleDamageSourceLevel
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBattleDamageSourceLevel final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         TakeDamageActorName_Array;                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         TakeDamageStateTrigger_Array;                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleDamageSourceLevel) == 0x000008, "Wrong alignment on FEndDataTableBattleDamageSourceLevel");
static_assert(sizeof(FEndDataTableBattleDamageSourceLevel) == 0x000028, "Wrong size on FEndDataTableBattleDamageSourceLevel");
static_assert(offsetof(FEndDataTableBattleDamageSourceLevel, TakeDamageActorName_Array) == 0x000008, "Member 'FEndDataTableBattleDamageSourceLevel::TakeDamageActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSourceLevel, TakeDamageStateTrigger_Array) == 0x000018, "Member 'FEndDataTableBattleDamageSourceLevel::TakeDamageStateTrigger_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleEnemyCombinationAbility
// 0x00B0 (0x00B8 - 0x0008)
struct FEndDataTableBattleEnemyCombinationAbility final : public FEndDataTableRowBase
{
public:
	uint8                                         CombinationType;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExecutionConditionType;                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DashCancelDistance;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LoopAbilities;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MainCancelConditionAbilityMiss;                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SubCancelConditionAbilityMiss;                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CancelPercentHP;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CancelConditionBurst;                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ContinueOnSinglePartyMember;                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CharacterID_Array;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         ForceTargetLeader;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           JumpAbility_Array;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           WaitAbilityID_Array;                               // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         EnableTargetDirectionCorrection;                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DashSyncActionID;                                  // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DashAbilityID_Array;                               // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SyncActionID_Array;                                // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ExecuteAbilityIDMain_Array;                        // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ExecuteAbilityIDSub_Array;                         // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleEnemyCombinationAbility) == 0x000008, "Wrong alignment on FEndDataTableBattleEnemyCombinationAbility");
static_assert(sizeof(FEndDataTableBattleEnemyCombinationAbility) == 0x0000B8, "Wrong size on FEndDataTableBattleEnemyCombinationAbility");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, CombinationType) == 0x000008, "Member 'FEndDataTableBattleEnemyCombinationAbility::CombinationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, ExecutionConditionType) == 0x00000C, "Member 'FEndDataTableBattleEnemyCombinationAbility::ExecutionConditionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, DashCancelDistance) == 0x000010, "Member 'FEndDataTableBattleEnemyCombinationAbility::DashCancelDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, LoopAbilities) == 0x000014, "Member 'FEndDataTableBattleEnemyCombinationAbility::LoopAbilities' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, MainCancelConditionAbilityMiss) == 0x000018, "Member 'FEndDataTableBattleEnemyCombinationAbility::MainCancelConditionAbilityMiss' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, SubCancelConditionAbilityMiss) == 0x00001C, "Member 'FEndDataTableBattleEnemyCombinationAbility::SubCancelConditionAbilityMiss' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, CancelPercentHP) == 0x000020, "Member 'FEndDataTableBattleEnemyCombinationAbility::CancelPercentHP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, CancelConditionBurst) == 0x000024, "Member 'FEndDataTableBattleEnemyCombinationAbility::CancelConditionBurst' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, ContinueOnSinglePartyMember) == 0x000028, "Member 'FEndDataTableBattleEnemyCombinationAbility::ContinueOnSinglePartyMember' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, CharacterID_Array) == 0x000030, "Member 'FEndDataTableBattleEnemyCombinationAbility::CharacterID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, ForceTargetLeader) == 0x000040, "Member 'FEndDataTableBattleEnemyCombinationAbility::ForceTargetLeader' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, JumpAbility_Array) == 0x000048, "Member 'FEndDataTableBattleEnemyCombinationAbility::JumpAbility_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, WaitAbilityID_Array) == 0x000058, "Member 'FEndDataTableBattleEnemyCombinationAbility::WaitAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, EnableTargetDirectionCorrection) == 0x000068, "Member 'FEndDataTableBattleEnemyCombinationAbility::EnableTargetDirectionCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, DashSyncActionID) == 0x00006C, "Member 'FEndDataTableBattleEnemyCombinationAbility::DashSyncActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, DashAbilityID_Array) == 0x000078, "Member 'FEndDataTableBattleEnemyCombinationAbility::DashAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, SyncActionID_Array) == 0x000088, "Member 'FEndDataTableBattleEnemyCombinationAbility::SyncActionID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, ExecuteAbilityIDMain_Array) == 0x000098, "Member 'FEndDataTableBattleEnemyCombinationAbility::ExecuteAbilityIDMain_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleEnemyCombinationAbility, ExecuteAbilityIDSub_Array) == 0x0000A8, "Member 'FEndDataTableBattleEnemyCombinationAbility::ExecuteAbilityIDSub_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyBookBattleCharaSpec
// 0x0078 (0x0080 - 0x0008)
struct FEndDataTableEnemyBookBattleCharaSpec final : public FEndDataTableRowBase
{
public:
	class FName                                   CharaSpecID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TextLabel;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnemyCategory;                                     // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PossessionItemID;                                  // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 AttributeResist_Array;                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 StatusChangeResist_Array;                          // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SpecialResist_Array;                               // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 EffectiveValue_Array;                              // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   EnemyBookID;                                       // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PropertyResist0;                                   // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PropertyResist1;                                   // 0x0079(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RateDamageResist;                                  // 0x007A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FixDamageResist;                                   // 0x007B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableEnemyBookBattleCharaSpec) == 0x000008, "Wrong alignment on FEndDataTableEnemyBookBattleCharaSpec");
static_assert(sizeof(FEndDataTableEnemyBookBattleCharaSpec) == 0x000080, "Wrong size on FEndDataTableEnemyBookBattleCharaSpec");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, CharaSpecID) == 0x000008, "Member 'FEndDataTableEnemyBookBattleCharaSpec::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, TextLabel) == 0x000010, "Member 'FEndDataTableEnemyBookBattleCharaSpec::TextLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, EnemyCategory) == 0x000020, "Member 'FEndDataTableEnemyBookBattleCharaSpec::EnemyCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, PossessionItemID) == 0x000024, "Member 'FEndDataTableEnemyBookBattleCharaSpec::PossessionItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, AttributeResist_Array) == 0x000030, "Member 'FEndDataTableEnemyBookBattleCharaSpec::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, StatusChangeResist_Array) == 0x000040, "Member 'FEndDataTableEnemyBookBattleCharaSpec::StatusChangeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, SpecialResist_Array) == 0x000050, "Member 'FEndDataTableEnemyBookBattleCharaSpec::SpecialResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, EffectiveValue_Array) == 0x000060, "Member 'FEndDataTableEnemyBookBattleCharaSpec::EffectiveValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, EnemyBookID) == 0x000070, "Member 'FEndDataTableEnemyBookBattleCharaSpec::EnemyBookID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, PropertyResist0) == 0x000078, "Member 'FEndDataTableEnemyBookBattleCharaSpec::PropertyResist0' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, PropertyResist1) == 0x000079, "Member 'FEndDataTableEnemyBookBattleCharaSpec::PropertyResist1' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, RateDamageResist) == 0x00007A, "Member 'FEndDataTableEnemyBookBattleCharaSpec::RateDamageResist' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, FixDamageResist) == 0x00007B, "Member 'FEndDataTableEnemyBookBattleCharaSpec::FixDamageResist' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleFriendParameter
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableBattleFriendParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   BattleCharaSpecID;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TextLabel;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ImmortalityFriendCount;                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableTargetFromPC;                                // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsShowCharacterHPBar;                              // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsShowPartyHPBar;                                  // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GuardReactionID;                                   // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DodgeAnimationName;                                // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DamageCalcType;                                    // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageCalcValue0;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsTeleportBattleOut;                               // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleFriendParameter) == 0x000008, "Wrong alignment on FEndDataTableBattleFriendParameter");
static_assert(sizeof(FEndDataTableBattleFriendParameter) == 0x000040, "Wrong size on FEndDataTableBattleFriendParameter");
static_assert(offsetof(FEndDataTableBattleFriendParameter, BattleCharaSpecID) == 0x000008, "Member 'FEndDataTableBattleFriendParameter::BattleCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleFriendParameter, TextLabel) == 0x000010, "Member 'FEndDataTableBattleFriendParameter::TextLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleFriendParameter, ImmortalityFriendCount) == 0x000020, "Member 'FEndDataTableBattleFriendParameter::ImmortalityFriendCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleFriendParameter, EnableTargetFromPC) == 0x000021, "Member 'FEndDataTableBattleFriendParameter::EnableTargetFromPC' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleFriendParameter, IsShowCharacterHPBar) == 0x000022, "Member 'FEndDataTableBattleFriendParameter::IsShowCharacterHPBar' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleFriendParameter, IsShowPartyHPBar) == 0x000023, "Member 'FEndDataTableBattleFriendParameter::IsShowPartyHPBar' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleFriendParameter, GuardReactionID) == 0x000024, "Member 'FEndDataTableBattleFriendParameter::GuardReactionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleFriendParameter, DodgeAnimationName) == 0x00002C, "Member 'FEndDataTableBattleFriendParameter::DodgeAnimationName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleFriendParameter, DamageCalcType) == 0x000034, "Member 'FEndDataTableBattleFriendParameter::DamageCalcType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleFriendParameter, DamageCalcValue0) == 0x000038, "Member 'FEndDataTableBattleFriendParameter::DamageCalcValue0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleFriendParameter, IsTeleportBattleOut) == 0x00003C, "Member 'FEndDataTableBattleFriendParameter::IsTeleportBattleOut' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableStory
// 0x0100 (0x0108 - 0x0008)
struct FEndDataTableStory final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StoryIndex;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         GroupIndex;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StoryType;                                         // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParentID;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParentChapterID;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BranchStoryID;                                     // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CompleteStatus;                                    // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StoryProgressFlagID;                               // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SkipNotifyFlagID_Array;                            // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         NotifyViewType;                                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StoryOpenFlagID;                                   // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   QuestOrderEnable;                                  // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FractionCount;                                     // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TitleUnkownFlag;                                   // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ViewIndex;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Description;                                       // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ImageName;                                         // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AdditionalGroupViewOption;                         // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalGroupViewString;                         // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RecommendLevelID;                                  // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LayerType;                                         // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MapIconInfoID_Array;                               // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MapIconManage_Array;                               // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RemoveIconTarget_Array;                            // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   ChapterID;                                         // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableStory) == 0x000008, "Wrong alignment on FEndDataTableStory");
static_assert(sizeof(FEndDataTableStory) == 0x000108, "Wrong size on FEndDataTableStory");
static_assert(offsetof(FEndDataTableStory, UniqueId) == 0x000008, "Member 'FEndDataTableStory::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, StoryIndex) == 0x00000C, "Member 'FEndDataTableStory::StoryIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, GroupIndex) == 0x000010, "Member 'FEndDataTableStory::GroupIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, StoryType) == 0x000014, "Member 'FEndDataTableStory::StoryType' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ParentID) == 0x000018, "Member 'FEndDataTableStory::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ParentChapterID) == 0x000020, "Member 'FEndDataTableStory::ParentChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, Priority) == 0x000028, "Member 'FEndDataTableStory::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, BranchStoryID) == 0x00002C, "Member 'FEndDataTableStory::BranchStoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, CompleteStatus) == 0x000034, "Member 'FEndDataTableStory::CompleteStatus' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, StoryProgressFlagID) == 0x000038, "Member 'FEndDataTableStory::StoryProgressFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, SkipNotifyFlagID_Array) == 0x000040, "Member 'FEndDataTableStory::SkipNotifyFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, NotifyViewType) == 0x000050, "Member 'FEndDataTableStory::NotifyViewType' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, StoryOpenFlagID) == 0x000054, "Member 'FEndDataTableStory::StoryOpenFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, QuestOrderEnable) == 0x00005C, "Member 'FEndDataTableStory::QuestOrderEnable' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, FractionCount) == 0x000064, "Member 'FEndDataTableStory::FractionCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, TitleUnkownFlag) == 0x000068, "Member 'FEndDataTableStory::TitleUnkownFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ViewIndex) == 0x000070, "Member 'FEndDataTableStory::ViewIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ItemName) == 0x000078, "Member 'FEndDataTableStory::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, Description) == 0x000088, "Member 'FEndDataTableStory::Description' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ImageName) == 0x000098, "Member 'FEndDataTableStory::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, AdditionalGroupViewOption) == 0x0000A8, "Member 'FEndDataTableStory::AdditionalGroupViewOption' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, AdditionalGroupViewString) == 0x0000B0, "Member 'FEndDataTableStory::AdditionalGroupViewString' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, RecommendLevelID) == 0x0000C0, "Member 'FEndDataTableStory::RecommendLevelID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, LayerType) == 0x0000C8, "Member 'FEndDataTableStory::LayerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, MapIconInfoID_Array) == 0x0000D0, "Member 'FEndDataTableStory::MapIconInfoID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, MapIconManage_Array) == 0x0000E0, "Member 'FEndDataTableStory::MapIconManage_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, RemoveIconTarget_Array) == 0x0000F0, "Member 'FEndDataTableStory::RemoveIconTarget_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ChapterID) == 0x000100, "Member 'FEndDataTableStory::ChapterID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleHitSlow
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBattleHitSlow final : public FEndDataTableRowBase
{
public:
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Time;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableSoundHitSlow;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleHitSlow) == 0x000008, "Wrong alignment on FEndDataTableBattleHitSlow");
static_assert(sizeof(FEndDataTableBattleHitSlow) == 0x000018, "Wrong size on FEndDataTableBattleHitSlow");
static_assert(offsetof(FEndDataTableBattleHitSlow, SpeedScale) == 0x000008, "Member 'FEndDataTableBattleHitSlow::SpeedScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleHitSlow, Time) == 0x00000C, "Member 'FEndDataTableBattleHitSlow::Time' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleHitSlow, EnableSoundHitSlow) == 0x000010, "Member 'FEndDataTableBattleHitSlow::EnableSoundHitSlow' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCrystalAnalysisCommonParameter
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableCrystalAnalysisCommonParameter final : public FEndDataTableRowBase
{
public:
	bool                                          ExampleDisplay;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PermissibleRangeFront;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PermissibleRangeBack;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RetireStateTrigger;                                // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CameraActivateStateTrigger;                        // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCrystalAnalysisCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableCrystalAnalysisCommonParameter");
static_assert(sizeof(FEndDataTableCrystalAnalysisCommonParameter) == 0x000028, "Wrong size on FEndDataTableCrystalAnalysisCommonParameter");
static_assert(offsetof(FEndDataTableCrystalAnalysisCommonParameter, ExampleDisplay) == 0x000008, "Member 'FEndDataTableCrystalAnalysisCommonParameter::ExampleDisplay' has a wrong offset!");
static_assert(offsetof(FEndDataTableCrystalAnalysisCommonParameter, PermissibleRangeFront) == 0x00000C, "Member 'FEndDataTableCrystalAnalysisCommonParameter::PermissibleRangeFront' has a wrong offset!");
static_assert(offsetof(FEndDataTableCrystalAnalysisCommonParameter, PermissibleRangeBack) == 0x000010, "Member 'FEndDataTableCrystalAnalysisCommonParameter::PermissibleRangeBack' has a wrong offset!");
static_assert(offsetof(FEndDataTableCrystalAnalysisCommonParameter, RetireStateTrigger) == 0x000014, "Member 'FEndDataTableCrystalAnalysisCommonParameter::RetireStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableCrystalAnalysisCommonParameter, CameraActivateStateTrigger) == 0x00001C, "Member 'FEndDataTableCrystalAnalysisCommonParameter::CameraActivateStateTrigger' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattlePlayerParameter
// 0x0128 (0x0130 - 0x0008)
struct FEndDataTableBattlePlayerParameter final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           CommandAbilityID_Array;                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         EnableAerialShortCut;                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UniqueAbilityType0;                                // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 UniqueAbilityParameterValue_Array;                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           UniqueAbilityParameterName_Array;                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         KeyDownTime;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         KeyDownEffectCreateTime;                           // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   KeyDownEffectSocketName;                           // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           KeyAssignAbilityID_Array;                          // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         EnableKeyAssiginGuardAbility0;                     // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KeyAssignGuardAbilityID0;                          // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CombinationTableID_Array;                          // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         GuardType0;                                        // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 GuardParameterValue_Array;                         // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           GuardParameterName_Array;                          // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DodgeType_Array;                                   // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DodgeReactionInfluenceID_Array;                    // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DodgeParameterValue_Array;                         // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DodgeParameterName_Array;                          // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   DodgeNeutralAbilityID1;                            // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LimitAbilityID_Array;                              // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LimitAbilityUseableFlag_Array;                     // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FirstLimitAbilityUseableFlag_Array;                // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   MugAbilityID;                                      // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ControlCharacterChangeAbilityID;                   // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattlePlayerParameter) == 0x000008, "Wrong alignment on FEndDataTableBattlePlayerParameter");
static_assert(sizeof(FEndDataTableBattlePlayerParameter) == 0x000130, "Wrong size on FEndDataTableBattlePlayerParameter");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, CommandAbilityID_Array) == 0x000008, "Member 'FEndDataTableBattlePlayerParameter::CommandAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, EnableAerialShortCut) == 0x000018, "Member 'FEndDataTableBattlePlayerParameter::EnableAerialShortCut' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, UniqueAbilityType0) == 0x000019, "Member 'FEndDataTableBattlePlayerParameter::UniqueAbilityType0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, UniqueAbilityParameterValue_Array) == 0x000020, "Member 'FEndDataTableBattlePlayerParameter::UniqueAbilityParameterValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, UniqueAbilityParameterName_Array) == 0x000030, "Member 'FEndDataTableBattlePlayerParameter::UniqueAbilityParameterName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, KeyDownTime) == 0x000040, "Member 'FEndDataTableBattlePlayerParameter::KeyDownTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, KeyDownEffectCreateTime) == 0x000044, "Member 'FEndDataTableBattlePlayerParameter::KeyDownEffectCreateTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, KeyDownEffectSocketName) == 0x000048, "Member 'FEndDataTableBattlePlayerParameter::KeyDownEffectSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, KeyAssignAbilityID_Array) == 0x000050, "Member 'FEndDataTableBattlePlayerParameter::KeyAssignAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, EnableKeyAssiginGuardAbility0) == 0x000060, "Member 'FEndDataTableBattlePlayerParameter::EnableKeyAssiginGuardAbility0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, KeyAssignGuardAbilityID0) == 0x000064, "Member 'FEndDataTableBattlePlayerParameter::KeyAssignGuardAbilityID0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, CombinationTableID_Array) == 0x000070, "Member 'FEndDataTableBattlePlayerParameter::CombinationTableID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, GuardType0) == 0x000080, "Member 'FEndDataTableBattlePlayerParameter::GuardType0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, GuardParameterValue_Array) == 0x000088, "Member 'FEndDataTableBattlePlayerParameter::GuardParameterValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, GuardParameterName_Array) == 0x000098, "Member 'FEndDataTableBattlePlayerParameter::GuardParameterName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, DodgeType_Array) == 0x0000A8, "Member 'FEndDataTableBattlePlayerParameter::DodgeType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, DodgeReactionInfluenceID_Array) == 0x0000B8, "Member 'FEndDataTableBattlePlayerParameter::DodgeReactionInfluenceID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, DodgeParameterValue_Array) == 0x0000C8, "Member 'FEndDataTableBattlePlayerParameter::DodgeParameterValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, DodgeParameterName_Array) == 0x0000D8, "Member 'FEndDataTableBattlePlayerParameter::DodgeParameterName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, DodgeNeutralAbilityID1) == 0x0000E8, "Member 'FEndDataTableBattlePlayerParameter::DodgeNeutralAbilityID1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, LimitAbilityID_Array) == 0x0000F0, "Member 'FEndDataTableBattlePlayerParameter::LimitAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, LimitAbilityUseableFlag_Array) == 0x000100, "Member 'FEndDataTableBattlePlayerParameter::LimitAbilityUseableFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, FirstLimitAbilityUseableFlag_Array) == 0x000110, "Member 'FEndDataTableBattlePlayerParameter::FirstLimitAbilityUseableFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, MugAbilityID) == 0x000120, "Member 'FEndDataTableBattlePlayerParameter::MugAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, ControlCharacterChangeAbilityID) == 0x000128, "Member 'FEndDataTableBattlePlayerParameter::ControlCharacterChangeAbilityID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleReport
// 0x00D0 (0x00D8 - 0x0008)
struct FEndDataTableBattleReport final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SortIndex;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Detail;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ImageName;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MateriaID;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NewFlag;                                           // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ViewFlag;                                          // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CompleteFlag;                                      // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ProgressFlag;                                      // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreCompFlag;                                       // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ConditionID_Array;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   CompCheckFlag;                                     // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenMessageFlag;                                   // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ClearMessageFlag;                                  // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SendOtherFlag_Array;                               // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         AddVRBattleMenuItemState;                          // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VRBattleMenuItemName;                              // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   VRBattleMenuItemDetail;                            // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   VRBattleMenuItemImage;                             // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StateTrigger_Array;                                // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleReport) == 0x000008, "Wrong alignment on FEndDataTableBattleReport");
static_assert(sizeof(FEndDataTableBattleReport) == 0x0000D8, "Wrong size on FEndDataTableBattleReport");
static_assert(offsetof(FEndDataTableBattleReport, UniqueId) == 0x000008, "Member 'FEndDataTableBattleReport::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, SortIndex) == 0x00000C, "Member 'FEndDataTableBattleReport::SortIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, Title) == 0x000010, "Member 'FEndDataTableBattleReport::Title' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, Detail) == 0x000020, "Member 'FEndDataTableBattleReport::Detail' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, ImageName) == 0x000030, "Member 'FEndDataTableBattleReport::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, MateriaID) == 0x000040, "Member 'FEndDataTableBattleReport::MateriaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, NewFlag) == 0x000048, "Member 'FEndDataTableBattleReport::NewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, ViewFlag) == 0x000050, "Member 'FEndDataTableBattleReport::ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, CompleteFlag) == 0x000058, "Member 'FEndDataTableBattleReport::CompleteFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, ProgressFlag) == 0x000060, "Member 'FEndDataTableBattleReport::ProgressFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, PreCompFlag) == 0x000068, "Member 'FEndDataTableBattleReport::PreCompFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, ConditionID_Array) == 0x000070, "Member 'FEndDataTableBattleReport::ConditionID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, CompCheckFlag) == 0x000080, "Member 'FEndDataTableBattleReport::CompCheckFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, OpenMessageFlag) == 0x000088, "Member 'FEndDataTableBattleReport::OpenMessageFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, ClearMessageFlag) == 0x000090, "Member 'FEndDataTableBattleReport::ClearMessageFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, SendOtherFlag_Array) == 0x000098, "Member 'FEndDataTableBattleReport::SendOtherFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, AddVRBattleMenuItemState) == 0x0000A8, "Member 'FEndDataTableBattleReport::AddVRBattleMenuItemState' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, VRBattleMenuItemName) == 0x0000AC, "Member 'FEndDataTableBattleReport::VRBattleMenuItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, VRBattleMenuItemDetail) == 0x0000B4, "Member 'FEndDataTableBattleReport::VRBattleMenuItemDetail' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, VRBattleMenuItemImage) == 0x0000BC, "Member 'FEndDataTableBattleReport::VRBattleMenuItemImage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, StateTrigger_Array) == 0x0000C8, "Member 'FEndDataTableBattleReport::StateTrigger_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyTerritoryMob
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableEnemyTerritoryMob final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ActorNameTemplate;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BattleCharaSpecID;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaDaylightID;                            // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaDarkID;                                // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaNoiseID;                               // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEncountForceBattleInCloseEnemiesSqrDist;   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OverridePossessionItemID;                          // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AttributeList_Array;                               // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ForceCreateActor;                                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NearFarFadeState;                                  // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableEnemyTerritoryMob) == 0x000008, "Wrong alignment on FEndDataTableEnemyTerritoryMob");
static_assert(sizeof(FEndDataTableEnemyTerritoryMob) == 0x000068, "Wrong size on FEndDataTableEnemyTerritoryMob");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, UniqueIndex) == 0x000008, "Member 'FEndDataTableEnemyTerritoryMob::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, Priority) == 0x00000C, "Member 'FEndDataTableEnemyTerritoryMob::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, ActorNameTemplate) == 0x000010, "Member 'FEndDataTableEnemyTerritoryMob::ActorNameTemplate' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, BattleCharaSpecID) == 0x000020, "Member 'FEndDataTableEnemyTerritoryMob::BattleCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, ResponseAreaDaylightID) == 0x000028, "Member 'FEndDataTableEnemyTerritoryMob::ResponseAreaDaylightID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, ResponseAreaDarkID) == 0x000030, "Member 'FEndDataTableEnemyTerritoryMob::ResponseAreaDarkID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, ResponseAreaNoiseID) == 0x000038, "Member 'FEndDataTableEnemyTerritoryMob::ResponseAreaNoiseID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, OverrideEncountForceBattleInCloseEnemiesSqrDist) == 0x000040, "Member 'FEndDataTableEnemyTerritoryMob::OverrideEncountForceBattleInCloseEnemiesSqrDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, OverridePossessionItemID) == 0x000044, "Member 'FEndDataTableEnemyTerritoryMob::OverridePossessionItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, AttributeList_Array) == 0x000050, "Member 'FEndDataTableEnemyTerritoryMob::AttributeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, ForceCreateActor) == 0x000060, "Member 'FEndDataTableEnemyTerritoryMob::ForceCreateActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryMob, NearFarFadeState) == 0x000061, "Member 'FEndDataTableEnemyTerritoryMob::NearFarFadeState' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleRewardOption
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableBattleRewardOption final : public FEndDataTableRowBase
{
public:
	class FName                                   EnemyTerritoryID;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActorName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateCondition_Array;                              // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Type;                                              // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleRewardOption) == 0x000008, "Wrong alignment on FEndDataTableBattleRewardOption");
static_assert(sizeof(FEndDataTableBattleRewardOption) == 0x000030, "Wrong size on FEndDataTableBattleRewardOption");
static_assert(offsetof(FEndDataTableBattleRewardOption, EnemyTerritoryID) == 0x000008, "Member 'FEndDataTableBattleRewardOption::EnemyTerritoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleRewardOption, ActorName) == 0x000010, "Member 'FEndDataTableBattleRewardOption::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleRewardOption, StateCondition_Array) == 0x000018, "Member 'FEndDataTableBattleRewardOption::StateCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleRewardOption, Type) == 0x000028, "Member 'FEndDataTableBattleRewardOption::Type' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableSubtitleChange
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableSubtitleChange final : public FEndDataTableRowBase
{
public:
	int32                                         LowerBound;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UpperBound;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CinemaStatusFromCinema;                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ActFromCinema;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LogFromCinema;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VoiceFromCinema;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VolumeFromCinema;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CinemaStatusFromCaption;                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ActFromCaption;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LogFromCaption;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VoiceFromCaption;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VolumeFromCaption;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CinemaStatusFromLog;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ActFromLog;                                        // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LogFromLog;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VoiceFromLog;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VolumeFromLog;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableSubtitleChange) == 0x000008, "Wrong alignment on FEndDataTableSubtitleChange");
static_assert(sizeof(FEndDataTableSubtitleChange) == 0x000050, "Wrong size on FEndDataTableSubtitleChange");
static_assert(offsetof(FEndDataTableSubtitleChange, LowerBound) == 0x000008, "Member 'FEndDataTableSubtitleChange::LowerBound' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, UpperBound) == 0x00000C, "Member 'FEndDataTableSubtitleChange::UpperBound' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, CinemaStatusFromCinema) == 0x000010, "Member 'FEndDataTableSubtitleChange::CinemaStatusFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, ActFromCinema) == 0x000014, "Member 'FEndDataTableSubtitleChange::ActFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, LogFromCinema) == 0x000018, "Member 'FEndDataTableSubtitleChange::LogFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VoiceFromCinema) == 0x00001C, "Member 'FEndDataTableSubtitleChange::VoiceFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VolumeFromCinema) == 0x000020, "Member 'FEndDataTableSubtitleChange::VolumeFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, CinemaStatusFromCaption) == 0x000024, "Member 'FEndDataTableSubtitleChange::CinemaStatusFromCaption' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, ActFromCaption) == 0x000028, "Member 'FEndDataTableSubtitleChange::ActFromCaption' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, LogFromCaption) == 0x00002C, "Member 'FEndDataTableSubtitleChange::LogFromCaption' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VoiceFromCaption) == 0x000030, "Member 'FEndDataTableSubtitleChange::VoiceFromCaption' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VolumeFromCaption) == 0x000034, "Member 'FEndDataTableSubtitleChange::VolumeFromCaption' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, CinemaStatusFromLog) == 0x000038, "Member 'FEndDataTableSubtitleChange::CinemaStatusFromLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, ActFromLog) == 0x00003C, "Member 'FEndDataTableSubtitleChange::ActFromLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, LogFromLog) == 0x000040, "Member 'FEndDataTableSubtitleChange::LogFromLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VoiceFromLog) == 0x000044, "Member 'FEndDataTableSubtitleChange::VoiceFromLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VolumeFromLog) == 0x000048, "Member 'FEndDataTableSubtitleChange::VolumeFromLog' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleScenePopGroup
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableBattleScenePopGroup final : public FEndDataTableRowBase
{
public:
	int32                                         Min;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Max;                                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RepopMax;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntervalTime;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntervalTimeRand;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NavNameList_Array;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattleScenePopTableList_Array;                     // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Uniqueindex_Array;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreFirstRepopInterval;                          // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleScenePopGroup) == 0x000008, "Wrong alignment on FEndDataTableBattleScenePopGroup");
static_assert(sizeof(FEndDataTableBattleScenePopGroup) == 0x000058, "Wrong size on FEndDataTableBattleScenePopGroup");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, Min) == 0x000008, "Member 'FEndDataTableBattleScenePopGroup::Min' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, Max) == 0x00000C, "Member 'FEndDataTableBattleScenePopGroup::Max' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, RepopMax) == 0x000010, "Member 'FEndDataTableBattleScenePopGroup::RepopMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, IntervalTime) == 0x000014, "Member 'FEndDataTableBattleScenePopGroup::IntervalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, IntervalTimeRand) == 0x000018, "Member 'FEndDataTableBattleScenePopGroup::IntervalTimeRand' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, NavNameList_Array) == 0x000020, "Member 'FEndDataTableBattleScenePopGroup::NavNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, BattleScenePopTableList_Array) == 0x000030, "Member 'FEndDataTableBattleScenePopGroup::BattleScenePopTableList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, Uniqueindex_Array) == 0x000040, "Member 'FEndDataTableBattleScenePopGroup::Uniqueindex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, IgnoreFirstRepopInterval) == 0x000050, "Member 'FEndDataTableBattleScenePopGroup::IgnoreFirstRepopInterval' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleScenePopTable
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableBattleScenePopTable final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           BattleSceneList_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           TargetPointListIdList_Array;                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 PopValueList_Array;                                // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 PopLimitCount_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleScenePopTable) == 0x000008, "Wrong alignment on FEndDataTableBattleScenePopTable");
static_assert(sizeof(FEndDataTableBattleScenePopTable) == 0x000048, "Wrong size on FEndDataTableBattleScenePopTable");
static_assert(offsetof(FEndDataTableBattleScenePopTable, BattleSceneList_Array) == 0x000008, "Member 'FEndDataTableBattleScenePopTable::BattleSceneList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopTable, TargetPointListIdList_Array) == 0x000018, "Member 'FEndDataTableBattleScenePopTable::TargetPointListIdList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopTable, PopValueList_Array) == 0x000028, "Member 'FEndDataTableBattleScenePopTable::PopValueList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopTable, PopLimitCount_Array) == 0x000038, "Member 'FEndDataTableBattleScenePopTable::PopLimitCount_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableItemAnimal
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableItemAnimal final : public FEndDataTableRowBase
{
public:
	class FName                                   LocationId;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GroupId;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CharaSpecID;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetPoint;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChocoboCraftLocationParameterID;                   // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DugOutStoryFlagID;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ItemTraceSpecID;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ItemTraceAdditionalPitch;                          // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ItemTraceAdditionalYaw;                            // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ItemTraceAdditionalRoll;                           // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ItemAnimalMotionID;                                // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableItemAnimal) == 0x000008, "Wrong alignment on FEndDataTableItemAnimal");
static_assert(sizeof(FEndDataTableItemAnimal) == 0x000058, "Wrong size on FEndDataTableItemAnimal");
static_assert(offsetof(FEndDataTableItemAnimal, LocationId) == 0x000008, "Member 'FEndDataTableItemAnimal::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimal, GroupId) == 0x000010, "Member 'FEndDataTableItemAnimal::GroupId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimal, CharaSpecID) == 0x000018, "Member 'FEndDataTableItemAnimal::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimal, TargetPoint) == 0x000020, "Member 'FEndDataTableItemAnimal::TargetPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimal, ChocoboCraftLocationParameterID) == 0x000028, "Member 'FEndDataTableItemAnimal::ChocoboCraftLocationParameterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimal, DugOutStoryFlagID) == 0x000030, "Member 'FEndDataTableItemAnimal::DugOutStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimal, ItemTraceSpecID) == 0x000038, "Member 'FEndDataTableItemAnimal::ItemTraceSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimal, ItemTraceAdditionalPitch) == 0x000040, "Member 'FEndDataTableItemAnimal::ItemTraceAdditionalPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimal, ItemTraceAdditionalYaw) == 0x000044, "Member 'FEndDataTableItemAnimal::ItemTraceAdditionalYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimal, ItemTraceAdditionalRoll) == 0x000048, "Member 'FEndDataTableItemAnimal::ItemTraceAdditionalRoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimal, ItemAnimalMotionID) == 0x00004C, "Member 'FEndDataTableItemAnimal::ItemAnimalMotionID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleSpecialStateEffect
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableBattleSpecialStateEffect final : public FEndDataTableRowBase
{
public:
	uint8                                         RemoveOnEscape;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RemoveOnDeath;                                     // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DetachOnRemove;                                    // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SynchroParentActorVisible;                         // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CreateEffectResourceCategory;                      // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CreateEffectResourceName_Array;                    // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AttachSocketName_Array;                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BeamTargetAttachSocketName_Array;                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleSpecialStateEffect) == 0x000008, "Wrong alignment on FEndDataTableBattleSpecialStateEffect");
static_assert(sizeof(FEndDataTableBattleSpecialStateEffect) == 0x000040, "Wrong size on FEndDataTableBattleSpecialStateEffect");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, RemoveOnEscape) == 0x000008, "Member 'FEndDataTableBattleSpecialStateEffect::RemoveOnEscape' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, RemoveOnDeath) == 0x000009, "Member 'FEndDataTableBattleSpecialStateEffect::RemoveOnDeath' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, DetachOnRemove) == 0x00000A, "Member 'FEndDataTableBattleSpecialStateEffect::DetachOnRemove' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, SynchroParentActorVisible) == 0x00000B, "Member 'FEndDataTableBattleSpecialStateEffect::SynchroParentActorVisible' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, CreateEffectResourceCategory) == 0x00000C, "Member 'FEndDataTableBattleSpecialStateEffect::CreateEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, CreateEffectResourceName_Array) == 0x000010, "Member 'FEndDataTableBattleSpecialStateEffect::CreateEffectResourceName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, AttachSocketName_Array) == 0x000020, "Member 'FEndDataTableBattleSpecialStateEffect::AttachSocketName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, BeamTargetAttachSocketName_Array) == 0x000030, "Member 'FEndDataTableBattleSpecialStateEffect::BeamTargetAttachSocketName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleSpecialStatusChange
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBattleSpecialStatusChange final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Param_Array;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ParamID_Array;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         ParamFlag;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleSpecialStatusChange) == 0x000008, "Wrong alignment on FEndDataTableBattleSpecialStatusChange");
static_assert(sizeof(FEndDataTableBattleSpecialStatusChange) == 0x000038, "Wrong size on FEndDataTableBattleSpecialStatusChange");
static_assert(offsetof(FEndDataTableBattleSpecialStatusChange, Type) == 0x000008, "Member 'FEndDataTableBattleSpecialStatusChange::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStatusChange, Param_Array) == 0x000010, "Member 'FEndDataTableBattleSpecialStatusChange::Param_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStatusChange, ParamID_Array) == 0x000020, "Member 'FEndDataTableBattleSpecialStatusChange::ParamID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStatusChange, ParamFlag) == 0x000030, "Member 'FEndDataTableBattleSpecialStatusChange::ParamFlag' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleStatusChange
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableBattleStatusChange final : public FEndDataTableRowBase
{
public:
	class FString                                 _Comment_;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UpgradeID;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DowngradeID;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           OffsetID_Array;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           HighID_Array;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         iconIndex;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EffectType;                                        // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 EffectParameter_Array;                             // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EffectParameterName_Array;                         // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         ResistFlagBits;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FlagBit;                                           // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Time_Array;                                        // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         EffectFlagBit;                                     // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleStatusChange) == 0x000008, "Wrong alignment on FEndDataTableBattleStatusChange");
static_assert(sizeof(FEndDataTableBattleStatusChange) == 0x000090, "Wrong size on FEndDataTableBattleStatusChange");
static_assert(offsetof(FEndDataTableBattleStatusChange, _Comment_) == 0x000008, "Member 'FEndDataTableBattleStatusChange::_Comment_' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, UpgradeID) == 0x000018, "Member 'FEndDataTableBattleStatusChange::UpgradeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, DowngradeID) == 0x000020, "Member 'FEndDataTableBattleStatusChange::DowngradeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, OffsetID_Array) == 0x000028, "Member 'FEndDataTableBattleStatusChange::OffsetID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, HighID_Array) == 0x000038, "Member 'FEndDataTableBattleStatusChange::HighID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, iconIndex) == 0x000048, "Member 'FEndDataTableBattleStatusChange::iconIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, EffectType) == 0x00004C, "Member 'FEndDataTableBattleStatusChange::EffectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, EffectParameter_Array) == 0x000050, "Member 'FEndDataTableBattleStatusChange::EffectParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, EffectParameterName_Array) == 0x000060, "Member 'FEndDataTableBattleStatusChange::EffectParameterName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, ResistFlagBits) == 0x000070, "Member 'FEndDataTableBattleStatusChange::ResistFlagBits' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, FlagBit) == 0x000074, "Member 'FEndDataTableBattleStatusChange::FlagBit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, Time_Array) == 0x000078, "Member 'FEndDataTableBattleStatusChange::Time_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, EffectFlagBit) == 0x000088, "Member 'FEndDataTableBattleStatusChange::EffectFlagBit' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleSummonAbilityChoice
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableBattleSummonAbilityChoice final : public FEndDataTableRowBase
{
public:
	uint8                                         OwnerSummon;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AbilityId;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Priority;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDistance;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDistance;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinHeight;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxHeight;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InfluenceCenter;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InfluenceRadius;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InfluenceTargets;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfToGroundDist;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetToGroundDist;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Probability;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ChooseFromResistance;                              // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAttackRange;                                    // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxAttackRange;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DerivedAbility_Array;                              // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleSummonAbilityChoice) == 0x000008, "Wrong alignment on FEndDataTableBattleSummonAbilityChoice");
static_assert(sizeof(FEndDataTableBattleSummonAbilityChoice) == 0x000060, "Wrong size on FEndDataTableBattleSummonAbilityChoice");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, OwnerSummon) == 0x000008, "Member 'FEndDataTableBattleSummonAbilityChoice::OwnerSummon' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, AbilityId) == 0x00000C, "Member 'FEndDataTableBattleSummonAbilityChoice::AbilityId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, Priority) == 0x000014, "Member 'FEndDataTableBattleSummonAbilityChoice::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, MinDistance) == 0x000018, "Member 'FEndDataTableBattleSummonAbilityChoice::MinDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, MaxDistance) == 0x00001C, "Member 'FEndDataTableBattleSummonAbilityChoice::MaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, MinHeight) == 0x000020, "Member 'FEndDataTableBattleSummonAbilityChoice::MinHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, MaxHeight) == 0x000024, "Member 'FEndDataTableBattleSummonAbilityChoice::MaxHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, InfluenceCenter) == 0x000028, "Member 'FEndDataTableBattleSummonAbilityChoice::InfluenceCenter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, InfluenceRadius) == 0x00002C, "Member 'FEndDataTableBattleSummonAbilityChoice::InfluenceRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, InfluenceTargets) == 0x000030, "Member 'FEndDataTableBattleSummonAbilityChoice::InfluenceTargets' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, SelfToGroundDist) == 0x000034, "Member 'FEndDataTableBattleSummonAbilityChoice::SelfToGroundDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, TargetToGroundDist) == 0x000038, "Member 'FEndDataTableBattleSummonAbilityChoice::TargetToGroundDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, Probability) == 0x00003C, "Member 'FEndDataTableBattleSummonAbilityChoice::Probability' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, ChooseFromResistance) == 0x000040, "Member 'FEndDataTableBattleSummonAbilityChoice::ChooseFromResistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, MinAttackRange) == 0x000044, "Member 'FEndDataTableBattleSummonAbilityChoice::MinAttackRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, MaxAttackRange) == 0x000048, "Member 'FEndDataTableBattleSummonAbilityChoice::MaxAttackRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, DerivedAbility_Array) == 0x000050, "Member 'FEndDataTableBattleSummonAbilityChoice::DerivedAbility_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEventPriorityDistance
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEventPriorityDistance final : public FEndDataTableRowBase
{
public:
	float                                         RepeatDist;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TimeBeforeRepeat;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RepeatRandomBias;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MinPriority;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InnerDist;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OuterDist;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEventPriorityDistance) == 0x000008, "Wrong alignment on FEndDataTableEventPriorityDistance");
static_assert(sizeof(FEndDataTableEventPriorityDistance) == 0x000020, "Wrong size on FEndDataTableEventPriorityDistance");
static_assert(offsetof(FEndDataTableEventPriorityDistance, RepeatDist) == 0x000008, "Member 'FEndDataTableEventPriorityDistance::RepeatDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityDistance, TimeBeforeRepeat) == 0x00000C, "Member 'FEndDataTableEventPriorityDistance::TimeBeforeRepeat' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityDistance, RepeatRandomBias) == 0x000010, "Member 'FEndDataTableEventPriorityDistance::RepeatRandomBias' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityDistance, MinPriority) == 0x000014, "Member 'FEndDataTableEventPriorityDistance::MinPriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityDistance, InnerDist) == 0x000018, "Member 'FEndDataTableEventPriorityDistance::InnerDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityDistance, OuterDist) == 0x00001C, "Member 'FEndDataTableEventPriorityDistance::OuterDist' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleSummonConditions
// 0x00F0 (0x00F8 - 0x0008)
struct FEndDataTableBattleSummonConditions final : public FEndDataTableRowBase
{
public:
	int32                                         Number;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummonBitField;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon00;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon01;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon02;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon03;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon04;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon05;                                // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon06;                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon07;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon08;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon09;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon10;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon11;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon12;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon13;                                // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon14;                                // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon15;                                // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon16;                                // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon17;                                // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon18;                                // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableCallSummon19;                                // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SummonCoefficient;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CallMaximumNumber;                                 // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SummonCorrection;                                  // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TriggerBitField;                                   // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Trigger01;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Trigger02;                                         // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Trigger03;                                         // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Trigger04;                                         // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Trigger05;                                         // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StartCallValueSizeType;                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PhaseBitField;                                     // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Phase01;                                           // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Phase02;                                           // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Phase03;                                           // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Phase04;                                           // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Phase05;                                           // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Phase06;                                           // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Phase07;                                           // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Phase08;                                           // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EnvSetOffID_Array;                                 // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EnvSetOnID_Array;                                  // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         InvalidAreaSize;                                   // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AppearPointIDInAir;                                // 0x00D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AppearPointIDInGround;                             // 0x00DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CutSceneAreaSizeID;                                // 0x00E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CutScenePointID;                                   // 0x00EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleSummonConditions) == 0x000008, "Wrong alignment on FEndDataTableBattleSummonConditions");
static_assert(sizeof(FEndDataTableBattleSummonConditions) == 0x0000F8, "Wrong size on FEndDataTableBattleSummonConditions");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Number) == 0x000008, "Member 'FEndDataTableBattleSummonConditions::Number' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummonBitField) == 0x00000C, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummonBitField' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon00) == 0x000010, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon00' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon01) == 0x000014, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon01' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon02) == 0x000018, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon02' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon03) == 0x00001C, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon03' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon04) == 0x000020, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon04' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon05) == 0x000024, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon05' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon06) == 0x000028, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon06' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon07) == 0x00002C, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon07' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon08) == 0x000030, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon08' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon09) == 0x000034, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon09' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon10) == 0x000038, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon10' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon11) == 0x00003C, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon11' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon12) == 0x000040, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon12' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon13) == 0x000044, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon13' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon14) == 0x000048, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon14' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon15) == 0x00004C, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon15' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon16) == 0x000050, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon16' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon17) == 0x000054, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon17' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon18) == 0x000058, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon18' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon19) == 0x00005C, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon19' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, SummonCoefficient) == 0x000060, "Member 'FEndDataTableBattleSummonConditions::SummonCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, CallMaximumNumber) == 0x000064, "Member 'FEndDataTableBattleSummonConditions::CallMaximumNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, SummonCorrection) == 0x000068, "Member 'FEndDataTableBattleSummonConditions::SummonCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, TriggerBitField) == 0x00006C, "Member 'FEndDataTableBattleSummonConditions::TriggerBitField' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Trigger01) == 0x000070, "Member 'FEndDataTableBattleSummonConditions::Trigger01' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Trigger02) == 0x000074, "Member 'FEndDataTableBattleSummonConditions::Trigger02' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Trigger03) == 0x000078, "Member 'FEndDataTableBattleSummonConditions::Trigger03' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Trigger04) == 0x00007C, "Member 'FEndDataTableBattleSummonConditions::Trigger04' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Trigger05) == 0x000080, "Member 'FEndDataTableBattleSummonConditions::Trigger05' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, StartCallValueSizeType) == 0x000084, "Member 'FEndDataTableBattleSummonConditions::StartCallValueSizeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, PhaseBitField) == 0x000088, "Member 'FEndDataTableBattleSummonConditions::PhaseBitField' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase01) == 0x00008C, "Member 'FEndDataTableBattleSummonConditions::Phase01' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase02) == 0x000090, "Member 'FEndDataTableBattleSummonConditions::Phase02' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase03) == 0x000094, "Member 'FEndDataTableBattleSummonConditions::Phase03' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase04) == 0x000098, "Member 'FEndDataTableBattleSummonConditions::Phase04' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase05) == 0x00009C, "Member 'FEndDataTableBattleSummonConditions::Phase05' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase06) == 0x0000A0, "Member 'FEndDataTableBattleSummonConditions::Phase06' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase07) == 0x0000A4, "Member 'FEndDataTableBattleSummonConditions::Phase07' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase08) == 0x0000A8, "Member 'FEndDataTableBattleSummonConditions::Phase08' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnvSetOffID_Array) == 0x0000B0, "Member 'FEndDataTableBattleSummonConditions::EnvSetOffID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnvSetOnID_Array) == 0x0000C0, "Member 'FEndDataTableBattleSummonConditions::EnvSetOnID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, InvalidAreaSize) == 0x0000D0, "Member 'FEndDataTableBattleSummonConditions::InvalidAreaSize' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, AppearPointIDInAir) == 0x0000D4, "Member 'FEndDataTableBattleSummonConditions::AppearPointIDInAir' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, AppearPointIDInGround) == 0x0000DC, "Member 'FEndDataTableBattleSummonConditions::AppearPointIDInGround' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, CutSceneAreaSizeID) == 0x0000E4, "Member 'FEndDataTableBattleSummonConditions::CutSceneAreaSizeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, CutScenePointID) == 0x0000EC, "Member 'FEndDataTableBattleSummonConditions::CutScenePointID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableSubStoryCondition
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableSubStoryCondition final : public FEndDataTableRowBase
{
public:
	class FName                                   TargetCharacterName;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Type_Array;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RefTableID_Array;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Value_Array;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableSubStoryCondition) == 0x000008, "Wrong alignment on FEndDataTableSubStoryCondition");
static_assert(sizeof(FEndDataTableSubStoryCondition) == 0x000040, "Wrong size on FEndDataTableSubStoryCondition");
static_assert(offsetof(FEndDataTableSubStoryCondition, TargetCharacterName) == 0x000008, "Member 'FEndDataTableSubStoryCondition::TargetCharacterName' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStoryCondition, Type_Array) == 0x000010, "Member 'FEndDataTableSubStoryCondition::Type_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStoryCondition, RefTableID_Array) == 0x000020, "Member 'FEndDataTableSubStoryCondition::RefTableID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStoryCondition, Value_Array) == 0x000030, "Member 'FEndDataTableSubStoryCondition::Value_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleSummonSpec
// 0x00F0 (0x00F8 - 0x0008)
struct FEndDataTableBattleSummonSpec final : public FEndDataTableRowBase
{
public:
	uint8                                         BuffID;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActorName;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CountLogName;                                      // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AddCharacter;                                      // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AttachSocketName;                                  // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AddCharacters_Array;                               // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActorNames_Array;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AttachSocketNames_Array;                           // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   ReplaceID;                                         // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CutScene;                                          // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ChildCharacter;                                    // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Collision;                                         // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CutSceneAbilityID;                                 // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SpecialStatusID;                                   // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MovementNumber;                                    // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NormalAttackInterval;                              // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NormalAttackIntervalRandom;                        // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetSetInterval;                                 // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ActiveTime;                                        // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SpawnFXType;                                       // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnFXXOffset;                                    // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpawnFXZOffset;                                    // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AppearanceProduction;                              // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CutsceneAreaSize;                                  // 0x00A5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AirJumpHeight;                                     // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CutSceneAbilityName;                               // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CutSceneAbilityNameDisplayTime;                    // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 CommandAbilityUseMateriaLv_Array;                  // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CommandAbilityID_Array;                            // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 EnableMoogleAbility_Array;                         // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         BattleSummonType;                                  // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChoiceFailureAbility;                              // 0x00EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleSummonSpec) == 0x000008, "Wrong alignment on FEndDataTableBattleSummonSpec");
static_assert(sizeof(FEndDataTableBattleSummonSpec) == 0x0000F8, "Wrong size on FEndDataTableBattleSummonSpec");
static_assert(offsetof(FEndDataTableBattleSummonSpec, BuffID) == 0x000008, "Member 'FEndDataTableBattleSummonSpec::BuffID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, ActorName) == 0x00000C, "Member 'FEndDataTableBattleSummonSpec::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CountLogName) == 0x000014, "Member 'FEndDataTableBattleSummonSpec::CountLogName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, AddCharacter) == 0x00001C, "Member 'FEndDataTableBattleSummonSpec::AddCharacter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, AttachSocketName) == 0x000024, "Member 'FEndDataTableBattleSummonSpec::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, AddCharacters_Array) == 0x000030, "Member 'FEndDataTableBattleSummonSpec::AddCharacters_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, ActorNames_Array) == 0x000040, "Member 'FEndDataTableBattleSummonSpec::ActorNames_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, AttachSocketNames_Array) == 0x000050, "Member 'FEndDataTableBattleSummonSpec::AttachSocketNames_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, ReplaceID) == 0x000060, "Member 'FEndDataTableBattleSummonSpec::ReplaceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CutScene) == 0x000068, "Member 'FEndDataTableBattleSummonSpec::CutScene' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, ChildCharacter) == 0x000070, "Member 'FEndDataTableBattleSummonSpec::ChildCharacter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, Collision) == 0x000071, "Member 'FEndDataTableBattleSummonSpec::Collision' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CutSceneAbilityID) == 0x000074, "Member 'FEndDataTableBattleSummonSpec::CutSceneAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, SpecialStatusID) == 0x00007C, "Member 'FEndDataTableBattleSummonSpec::SpecialStatusID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, MovementNumber) == 0x000084, "Member 'FEndDataTableBattleSummonSpec::MovementNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, NormalAttackInterval) == 0x000088, "Member 'FEndDataTableBattleSummonSpec::NormalAttackInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, NormalAttackIntervalRandom) == 0x00008C, "Member 'FEndDataTableBattleSummonSpec::NormalAttackIntervalRandom' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, TargetSetInterval) == 0x000090, "Member 'FEndDataTableBattleSummonSpec::TargetSetInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, ActiveTime) == 0x000094, "Member 'FEndDataTableBattleSummonSpec::ActiveTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, SpawnFXType) == 0x000098, "Member 'FEndDataTableBattleSummonSpec::SpawnFXType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, SpawnFXXOffset) == 0x00009C, "Member 'FEndDataTableBattleSummonSpec::SpawnFXXOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, SpawnFXZOffset) == 0x0000A0, "Member 'FEndDataTableBattleSummonSpec::SpawnFXZOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, AppearanceProduction) == 0x0000A4, "Member 'FEndDataTableBattleSummonSpec::AppearanceProduction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CutsceneAreaSize) == 0x0000A5, "Member 'FEndDataTableBattleSummonSpec::CutsceneAreaSize' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, AirJumpHeight) == 0x0000A8, "Member 'FEndDataTableBattleSummonSpec::AirJumpHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CutSceneAbilityName) == 0x0000AC, "Member 'FEndDataTableBattleSummonSpec::CutSceneAbilityName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CutSceneAbilityNameDisplayTime) == 0x0000B4, "Member 'FEndDataTableBattleSummonSpec::CutSceneAbilityNameDisplayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CommandAbilityUseMateriaLv_Array) == 0x0000B8, "Member 'FEndDataTableBattleSummonSpec::CommandAbilityUseMateriaLv_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CommandAbilityID_Array) == 0x0000C8, "Member 'FEndDataTableBattleSummonSpec::CommandAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, EnableMoogleAbility_Array) == 0x0000D8, "Member 'FEndDataTableBattleSummonSpec::EnableMoogleAbility_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, BattleSummonType) == 0x0000E8, "Member 'FEndDataTableBattleSummonSpec::BattleSummonType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, ChoiceFailureAbility) == 0x0000EC, "Member 'FEndDataTableBattleSummonSpec::ChoiceFailureAbility' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTalkState
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableTalkState final : public FEndDataTableRowBase
{
public:
	int32                                         TalkType;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NotPlayOnBoss;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParentID;                                          // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PhaseNumber;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DelayTime;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SkipMouthlessTalker;                               // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TalkPlayType00;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SequenceID_Array;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTalkState) == 0x000008, "Wrong alignment on FEndDataTableTalkState");
static_assert(sizeof(FEndDataTableTalkState) == 0x000040, "Wrong size on FEndDataTableTalkState");
static_assert(offsetof(FEndDataTableTalkState, TalkType) == 0x000008, "Member 'FEndDataTableTalkState::TalkType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, Priority) == 0x00000C, "Member 'FEndDataTableTalkState::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, NotPlayOnBoss) == 0x000010, "Member 'FEndDataTableTalkState::NotPlayOnBoss' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, ParentID) == 0x000014, "Member 'FEndDataTableTalkState::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, PhaseNumber) == 0x00001C, "Member 'FEndDataTableTalkState::PhaseNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, DelayTime) == 0x000020, "Member 'FEndDataTableTalkState::DelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, SkipMouthlessTalker) == 0x000024, "Member 'FEndDataTableTalkState::SkipMouthlessTalker' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, TalkPlayType00) == 0x000028, "Member 'FEndDataTableTalkState::TalkPlayType00' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, SequenceID_Array) == 0x000030, "Member 'FEndDataTableTalkState::SequenceID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleSyncAction
// 0x0190 (0x0198 - 0x0008)
struct FEndDataTableBattleSyncAction final : public FEndDataTableRowBase
{
public:
	uint8                                         DisableAirTarget;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableTargetDead;                                  // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableTargetTalk;                                 // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableRemoveStatusChangeActionRestriction;        // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RelatedOwnerPartID;                                // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraSequenceNotify;                              // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraSequenceID;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StopCameraDetach;                                  // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AttachType;                                        // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocketName;                                  // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableKnockback;                                   // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttachInterpTime;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttachRotInterpTime;                               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AttachLocationType;                                // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AttachRotationType;                                // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AttachRootOffsetType;                              // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NoAttach;                                          // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NoSubCollision;                                    // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AlongSlope;                                        // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         WallCollisionType;                                 // 0x003E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OwnerDisplayNameSocketName;                        // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerEnablePhaseChange;                            // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerDisableBurst;                                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OwnerPartID;                                       // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OwnerPartDamageToTargetRate;                       // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OwnerPartAcceptDamageSourceID;                     // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetMotionType;                                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetDoesntGetTrophy;                             // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSpecialStateEffectID;                        // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetEnableStatusChangeSleep;                     // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetDisableActionRestrictionDisplay;             // 0x006D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReplaceDamageSourceID;                             // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OwnerBeginAnimID;                                  // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerBeginAnimBlend;                               // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetBeginAnimID;                                 // 0x008C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetBeginAnimBlend;                              // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetBeginDetachDamageSourceID;                   // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetBeginDetachDamageSourceIDEffect;             // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OwnerLoopAnimID;                                   // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerLoopAnimBlend;                                // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerHPType;                                       // 0x00AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnerHP;                                           // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OwnerDamageSourceID;                               // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OwnerTakeOverHPAbilityID;                          // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetLoopAnimID;                                  // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetLoopAnimBlend;                               // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetAbilityHitCount;                             // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TargetMagicHitCount;                               // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TargetLimitHitCount;                               // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetLoopDetachDamageSourceID;                    // 0x00DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetLoopDetachDamageSourceIDEffect;              // 0x00E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LoopType;                                          // 0x00E5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E6[0x2];                                       // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopTime;                                          // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableWalk;                                        // 0x00EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EnableWalkBoneFilterName;                          // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           OwnerFailureAnimID_Array;                          // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         OwnerFailureAnimBlend;                             // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TargetFailureAnimID_Array;                         // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         TargetFailureAnimBlend;                            // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetFailureAnimDamageSourceID;                   // 0x0124(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetFailureDetachDamageSourceID;                 // 0x012C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerSuccessPlayReaction;                          // 0x0134(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OwnerSuccessAnimID_Array;                          // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         OwnerSuccessAnimBlend;                             // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TargetSuccessAnimID_Array;                         // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         TargetSuccessAnimBlend;                            // 0x0160(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSuccessDetachDamageSourceID;                 // 0x0164(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableOwnerDead;                                  // 0x016C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetReleaseAnimID;                               // 0x0170(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetReleaseAnimBlend;                            // 0x0178(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableOwnerTargetDeadRelease;                     // 0x0179(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OwnerReleaseAnimID;                                // 0x017C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerReleaseAnimBlend;                             // 0x0184(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableTargetDead;                                 // 0x0185(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DetachRemoveIgnorePushActor;                       // 0x0186(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetDetachPosture;                               // 0x0187(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetDetachEnableReactionDamageSourceID;          // 0x0188(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DetachFindNavMeshRange;                            // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceEnableCollisionCheckOnDetach;                 // 0x0194(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableCollisionCheckOnDetach;                     // 0x0195(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableMoveOnlyNavMesh;                            // 0x0196(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_197[0x1];                                      // 0x0197(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleSyncAction) == 0x000008, "Wrong alignment on FEndDataTableBattleSyncAction");
static_assert(sizeof(FEndDataTableBattleSyncAction) == 0x000198, "Wrong size on FEndDataTableBattleSyncAction");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableAirTarget) == 0x000008, "Member 'FEndDataTableBattleSyncAction::DisableAirTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, EnableTargetDead) == 0x000009, "Member 'FEndDataTableBattleSyncAction::EnableTargetDead' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableTargetTalk) == 0x00000A, "Member 'FEndDataTableBattleSyncAction::DisableTargetTalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableRemoveStatusChangeActionRestriction) == 0x00000B, "Member 'FEndDataTableBattleSyncAction::DisableRemoveStatusChangeActionRestriction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, RelatedOwnerPartID) == 0x00000C, "Member 'FEndDataTableBattleSyncAction::RelatedOwnerPartID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, CameraSequenceNotify) == 0x000014, "Member 'FEndDataTableBattleSyncAction::CameraSequenceNotify' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, CameraSequenceID) == 0x000018, "Member 'FEndDataTableBattleSyncAction::CameraSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, StopCameraDetach) == 0x000020, "Member 'FEndDataTableBattleSyncAction::StopCameraDetach' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachType) == 0x000021, "Member 'FEndDataTableBattleSyncAction::AttachType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachSocketName) == 0x000024, "Member 'FEndDataTableBattleSyncAction::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, EnableKnockback) == 0x00002C, "Member 'FEndDataTableBattleSyncAction::EnableKnockback' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachInterpTime) == 0x000030, "Member 'FEndDataTableBattleSyncAction::AttachInterpTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachRotInterpTime) == 0x000034, "Member 'FEndDataTableBattleSyncAction::AttachRotInterpTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachLocationType) == 0x000038, "Member 'FEndDataTableBattleSyncAction::AttachLocationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachRotationType) == 0x000039, "Member 'FEndDataTableBattleSyncAction::AttachRotationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachRootOffsetType) == 0x00003A, "Member 'FEndDataTableBattleSyncAction::AttachRootOffsetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, NoAttach) == 0x00003B, "Member 'FEndDataTableBattleSyncAction::NoAttach' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, NoSubCollision) == 0x00003C, "Member 'FEndDataTableBattleSyncAction::NoSubCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AlongSlope) == 0x00003D, "Member 'FEndDataTableBattleSyncAction::AlongSlope' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, WallCollisionType) == 0x00003E, "Member 'FEndDataTableBattleSyncAction::WallCollisionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerDisplayNameSocketName) == 0x000040, "Member 'FEndDataTableBattleSyncAction::OwnerDisplayNameSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerEnablePhaseChange) == 0x000048, "Member 'FEndDataTableBattleSyncAction::OwnerEnablePhaseChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerDisableBurst) == 0x000049, "Member 'FEndDataTableBattleSyncAction::OwnerDisableBurst' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerPartID) == 0x00004C, "Member 'FEndDataTableBattleSyncAction::OwnerPartID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerPartDamageToTargetRate) == 0x000054, "Member 'FEndDataTableBattleSyncAction::OwnerPartDamageToTargetRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerPartAcceptDamageSourceID) == 0x000058, "Member 'FEndDataTableBattleSyncAction::OwnerPartAcceptDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetMotionType) == 0x000060, "Member 'FEndDataTableBattleSyncAction::TargetMotionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetDoesntGetTrophy) == 0x000061, "Member 'FEndDataTableBattleSyncAction::TargetDoesntGetTrophy' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetSpecialStateEffectID) == 0x000064, "Member 'FEndDataTableBattleSyncAction::TargetSpecialStateEffectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetEnableStatusChangeSleep) == 0x00006C, "Member 'FEndDataTableBattleSyncAction::TargetEnableStatusChangeSleep' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetDisableActionRestrictionDisplay) == 0x00006D, "Member 'FEndDataTableBattleSyncAction::TargetDisableActionRestrictionDisplay' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, ReplaceDamageSourceID) == 0x000070, "Member 'FEndDataTableBattleSyncAction::ReplaceDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerBeginAnimID) == 0x000080, "Member 'FEndDataTableBattleSyncAction::OwnerBeginAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerBeginAnimBlend) == 0x000088, "Member 'FEndDataTableBattleSyncAction::OwnerBeginAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetBeginAnimID) == 0x00008C, "Member 'FEndDataTableBattleSyncAction::TargetBeginAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetBeginAnimBlend) == 0x000094, "Member 'FEndDataTableBattleSyncAction::TargetBeginAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetBeginDetachDamageSourceID) == 0x000098, "Member 'FEndDataTableBattleSyncAction::TargetBeginDetachDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetBeginDetachDamageSourceIDEffect) == 0x0000A0, "Member 'FEndDataTableBattleSyncAction::TargetBeginDetachDamageSourceIDEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerLoopAnimID) == 0x0000A4, "Member 'FEndDataTableBattleSyncAction::OwnerLoopAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerLoopAnimBlend) == 0x0000AC, "Member 'FEndDataTableBattleSyncAction::OwnerLoopAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerHPType) == 0x0000AD, "Member 'FEndDataTableBattleSyncAction::OwnerHPType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerHP) == 0x0000B0, "Member 'FEndDataTableBattleSyncAction::OwnerHP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerDamageSourceID) == 0x0000B4, "Member 'FEndDataTableBattleSyncAction::OwnerDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerTakeOverHPAbilityID) == 0x0000BC, "Member 'FEndDataTableBattleSyncAction::OwnerTakeOverHPAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetLoopAnimID) == 0x0000C4, "Member 'FEndDataTableBattleSyncAction::TargetLoopAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetLoopAnimBlend) == 0x0000CC, "Member 'FEndDataTableBattleSyncAction::TargetLoopAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetAbilityHitCount) == 0x0000D0, "Member 'FEndDataTableBattleSyncAction::TargetAbilityHitCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetMagicHitCount) == 0x0000D4, "Member 'FEndDataTableBattleSyncAction::TargetMagicHitCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetLimitHitCount) == 0x0000D8, "Member 'FEndDataTableBattleSyncAction::TargetLimitHitCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetLoopDetachDamageSourceID) == 0x0000DC, "Member 'FEndDataTableBattleSyncAction::TargetLoopDetachDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetLoopDetachDamageSourceIDEffect) == 0x0000E4, "Member 'FEndDataTableBattleSyncAction::TargetLoopDetachDamageSourceIDEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, LoopType) == 0x0000E5, "Member 'FEndDataTableBattleSyncAction::LoopType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, LoopTime) == 0x0000E8, "Member 'FEndDataTableBattleSyncAction::LoopTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, EnableWalk) == 0x0000EC, "Member 'FEndDataTableBattleSyncAction::EnableWalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, EnableWalkBoneFilterName) == 0x0000F0, "Member 'FEndDataTableBattleSyncAction::EnableWalkBoneFilterName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerFailureAnimID_Array) == 0x0000F8, "Member 'FEndDataTableBattleSyncAction::OwnerFailureAnimID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerFailureAnimBlend) == 0x000108, "Member 'FEndDataTableBattleSyncAction::OwnerFailureAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetFailureAnimID_Array) == 0x000110, "Member 'FEndDataTableBattleSyncAction::TargetFailureAnimID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetFailureAnimBlend) == 0x000120, "Member 'FEndDataTableBattleSyncAction::TargetFailureAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetFailureAnimDamageSourceID) == 0x000124, "Member 'FEndDataTableBattleSyncAction::TargetFailureAnimDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetFailureDetachDamageSourceID) == 0x00012C, "Member 'FEndDataTableBattleSyncAction::TargetFailureDetachDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerSuccessPlayReaction) == 0x000134, "Member 'FEndDataTableBattleSyncAction::OwnerSuccessPlayReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerSuccessAnimID_Array) == 0x000138, "Member 'FEndDataTableBattleSyncAction::OwnerSuccessAnimID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerSuccessAnimBlend) == 0x000148, "Member 'FEndDataTableBattleSyncAction::OwnerSuccessAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetSuccessAnimID_Array) == 0x000150, "Member 'FEndDataTableBattleSyncAction::TargetSuccessAnimID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetSuccessAnimBlend) == 0x000160, "Member 'FEndDataTableBattleSyncAction::TargetSuccessAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetSuccessDetachDamageSourceID) == 0x000164, "Member 'FEndDataTableBattleSyncAction::TargetSuccessDetachDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableOwnerDead) == 0x00016C, "Member 'FEndDataTableBattleSyncAction::DisableOwnerDead' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetReleaseAnimID) == 0x000170, "Member 'FEndDataTableBattleSyncAction::TargetReleaseAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetReleaseAnimBlend) == 0x000178, "Member 'FEndDataTableBattleSyncAction::TargetReleaseAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableOwnerTargetDeadRelease) == 0x000179, "Member 'FEndDataTableBattleSyncAction::DisableOwnerTargetDeadRelease' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerReleaseAnimID) == 0x00017C, "Member 'FEndDataTableBattleSyncAction::OwnerReleaseAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerReleaseAnimBlend) == 0x000184, "Member 'FEndDataTableBattleSyncAction::OwnerReleaseAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableTargetDead) == 0x000185, "Member 'FEndDataTableBattleSyncAction::DisableTargetDead' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DetachRemoveIgnorePushActor) == 0x000186, "Member 'FEndDataTableBattleSyncAction::DetachRemoveIgnorePushActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetDetachPosture) == 0x000187, "Member 'FEndDataTableBattleSyncAction::TargetDetachPosture' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetDetachEnableReactionDamageSourceID) == 0x000188, "Member 'FEndDataTableBattleSyncAction::TargetDetachEnableReactionDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DetachFindNavMeshRange) == 0x000190, "Member 'FEndDataTableBattleSyncAction::DetachFindNavMeshRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, ForceEnableCollisionCheckOnDetach) == 0x000194, "Member 'FEndDataTableBattleSyncAction::ForceEnableCollisionCheckOnDetach' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableCollisionCheckOnDetach) == 0x000195, "Member 'FEndDataTableBattleSyncAction::DisableCollisionCheckOnDetach' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableMoveOnlyNavMesh) == 0x000196, "Member 'FEndDataTableBattleSyncAction::DisableMoveOnlyNavMesh' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBattleUniqueAbility
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableBattleUniqueAbility final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AbilityId_Array;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ParameterValue_Array;                              // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ParameterFName_Array;                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBattleUniqueAbility) == 0x000008, "Wrong alignment on FEndDataTableBattleUniqueAbility");
static_assert(sizeof(FEndDataTableBattleUniqueAbility) == 0x000040, "Wrong size on FEndDataTableBattleUniqueAbility");
static_assert(offsetof(FEndDataTableBattleUniqueAbility, Type) == 0x000008, "Member 'FEndDataTableBattleUniqueAbility::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleUniqueAbility, AbilityId_Array) == 0x000010, "Member 'FEndDataTableBattleUniqueAbility::AbilityId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleUniqueAbility, ParameterValue_Array) == 0x000020, "Member 'FEndDataTableBattleUniqueAbility::ParameterValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleUniqueAbility, ParameterFName_Array) == 0x000030, "Member 'FEndDataTableBattleUniqueAbility::ParameterFName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableJukeBox
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableJukeBox final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Category;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortValue;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemNameLabel;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ItemDetailLabel;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BGMID;                                             // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StateTriggerOnPlay;                                // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SubQuestIconStoryFlag;                             // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 IconName;                                          // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TextureName;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableJukeBox) == 0x000008, "Wrong alignment on FEndDataTableJukeBox");
static_assert(sizeof(FEndDataTableJukeBox) == 0x000078, "Wrong size on FEndDataTableJukeBox");
static_assert(offsetof(FEndDataTableJukeBox, UniqueId) == 0x000008, "Member 'FEndDataTableJukeBox::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, Category) == 0x00000C, "Member 'FEndDataTableJukeBox::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, SortValue) == 0x000010, "Member 'FEndDataTableJukeBox::SortValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, ItemNameLabel) == 0x000018, "Member 'FEndDataTableJukeBox::ItemNameLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, ItemDetailLabel) == 0x000028, "Member 'FEndDataTableJukeBox::ItemDetailLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, BGMID) == 0x000038, "Member 'FEndDataTableJukeBox::BGMID' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, StateTriggerOnPlay) == 0x000040, "Member 'FEndDataTableJukeBox::StateTriggerOnPlay' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, SubQuestIconStoryFlag) == 0x000050, "Member 'FEndDataTableJukeBox::SubQuestIconStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, IconName) == 0x000058, "Member 'FEndDataTableJukeBox::IconName' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, TextureName) == 0x000068, "Member 'FEndDataTableJukeBox::TextureName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBGMField
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableBGMField final : public FEndDataTableRowBase
{
public:
	class FName                                   BGMListId;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SequenceBGMListID_Array;                           // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SequenceStoryFlag_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   SubjugationBGMListID;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StopBGM;                                           // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Priority;                                          // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBGMField) == 0x000008, "Wrong alignment on FEndDataTableBGMField");
static_assert(sizeof(FEndDataTableBGMField) == 0x000040, "Wrong size on FEndDataTableBGMField");
static_assert(offsetof(FEndDataTableBGMField, BGMListId) == 0x000008, "Member 'FEndDataTableBGMField::BGMListId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMField, SequenceBGMListID_Array) == 0x000010, "Member 'FEndDataTableBGMField::SequenceBGMListID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMField, SequenceStoryFlag_Array) == 0x000020, "Member 'FEndDataTableBGMField::SequenceStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMField, SubjugationBGMListID) == 0x000030, "Member 'FEndDataTableBGMField::SubjugationBGMListID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMField, StopBGM) == 0x000038, "Member 'FEndDataTableBGMField::StopBGM' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMField, Priority) == 0x000039, "Member 'FEndDataTableBGMField::Priority' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBGMLayerFadeSetting
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBGMLayerFadeSetting final : public FEndDataTableRowBase
{
public:
	TArray<float>                                 FadeIn_Array;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 FadeOut_Array;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBGMLayerFadeSetting) == 0x000008, "Wrong alignment on FEndDataTableBGMLayerFadeSetting");
static_assert(sizeof(FEndDataTableBGMLayerFadeSetting) == 0x000028, "Wrong size on FEndDataTableBGMLayerFadeSetting");
static_assert(offsetof(FEndDataTableBGMLayerFadeSetting, FadeIn_Array) == 0x000008, "Member 'FEndDataTableBGMLayerFadeSetting::FadeIn_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMLayerFadeSetting, FadeOut_Array) == 0x000018, "Member 'FEndDataTableBGMLayerFadeSetting::FadeOut_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBGMList
// 0x0090 (0x0098 - 0x0008)
struct FEndDataTableBGMList final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BGMName;                                           // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SectionName00;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ModeBGM;                                           // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SkipSectionName;                                   // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RestartSectionName;                                // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PauseRestart;                                      // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SectionName02;                                     // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SectionName03;                                     // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SectionName04;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SectionName05;                                     // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SectionName06;                                     // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SectionName07;                                     // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsHighPriorityLoad;                                // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FinishSectionName;                                 // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FadeInTime;                                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FadeOutTime;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideFadeOutTime;                               // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CrossFade;                                         // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BattleBGMName;                                     // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OneShot;                                           // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OneShotPlayTime;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreVehicleRequest;                              // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnablePrevFinishSection;                           // 0x0095(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBGMList) == 0x000008, "Wrong alignment on FEndDataTableBGMList");
static_assert(sizeof(FEndDataTableBGMList) == 0x000098, "Wrong size on FEndDataTableBGMList");
static_assert(offsetof(FEndDataTableBGMList, UniqueIndex) == 0x000008, "Member 'FEndDataTableBGMList::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, BGMName) == 0x00000C, "Member 'FEndDataTableBGMList::BGMName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName00) == 0x000014, "Member 'FEndDataTableBGMList::SectionName00' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, ModeBGM) == 0x00001C, "Member 'FEndDataTableBGMList::ModeBGM' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SkipSectionName) == 0x000024, "Member 'FEndDataTableBGMList::SkipSectionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, RestartSectionName) == 0x00002C, "Member 'FEndDataTableBGMList::RestartSectionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, PauseRestart) == 0x000034, "Member 'FEndDataTableBGMList::PauseRestart' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName02) == 0x000038, "Member 'FEndDataTableBGMList::SectionName02' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName03) == 0x000040, "Member 'FEndDataTableBGMList::SectionName03' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName04) == 0x000048, "Member 'FEndDataTableBGMList::SectionName04' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName05) == 0x000050, "Member 'FEndDataTableBGMList::SectionName05' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName06) == 0x000058, "Member 'FEndDataTableBGMList::SectionName06' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName07) == 0x000060, "Member 'FEndDataTableBGMList::SectionName07' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, IsHighPriorityLoad) == 0x000068, "Member 'FEndDataTableBGMList::IsHighPriorityLoad' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, FinishSectionName) == 0x00006C, "Member 'FEndDataTableBGMList::FinishSectionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, FadeInTime) == 0x000074, "Member 'FEndDataTableBGMList::FadeInTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, FadeOutTime) == 0x000078, "Member 'FEndDataTableBGMList::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, OverrideFadeOutTime) == 0x00007C, "Member 'FEndDataTableBGMList::OverrideFadeOutTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, CrossFade) == 0x000080, "Member 'FEndDataTableBGMList::CrossFade' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, BattleBGMName) == 0x000084, "Member 'FEndDataTableBGMList::BattleBGMName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, OneShot) == 0x00008C, "Member 'FEndDataTableBGMList::OneShot' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, OneShotPlayTime) == 0x000090, "Member 'FEndDataTableBGMList::OneShotPlayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, IgnoreVehicleRequest) == 0x000094, "Member 'FEndDataTableBGMList::IgnoreVehicleRequest' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, EnablePrevFinishSection) == 0x000095, "Member 'FEndDataTableBGMList::EnablePrevFinishSection' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeAbility
// 0x00F8 (0x0100 - 0x0008)
struct FEndDataTableBikeAbility final : public FEndDataTableRowBase
{
public:
	class FName                                   DefaultDamageSourceID;                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AbilityType;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NormalRange;                                       // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DistanceType;                                      // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MotionID;                                          // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CameraSequenceID;                                  // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReferenceBattleAbilityID;                          // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NameTextID;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CoolDownTime;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ExclusiveGroup;                                    // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TargetToPlayerOdds;                                // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TargetToAllyOdds;                                  // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AttackerPositionCondition;                         // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CenterPositionOffset;                              // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetPositionCondition;                           // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSearchAngleRange;                            // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetSearchDistanceMin;                           // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetSearchDistanceMax;                           // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetSearchDiffSplineMileageMin;                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetSearchDiffSplineMileageMax;                  // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SuperArmorSincePrepare;                            // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ShowAttackLineEffect;                              // 0x0075(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PrepareAttack_Array;                               // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PrepareAttackParameter_Array;                      // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         NotCancelAtOutOfRange;                             // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableSlideMoveOnAttacking;                       // 0x0099(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrepareAttackTimeout;                              // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ForceAttackTime;                                   // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PrepareAttackBeginMotion;                          // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PrepareAttackLoopMotion;                           // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PrepareAttackCancelMotion;                         // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CoolDownLoopMotion;                                // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CoolDownEndMotion;                                 // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InterruptAbility;                                  // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BranchAbility_Array;                               // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   TalkSetAtPrepareAttack;                            // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TalkSetAtAttack;                                   // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BurstDamageBonus;                                  // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeAbility) == 0x000008, "Wrong alignment on FEndDataTableBikeAbility");
static_assert(sizeof(FEndDataTableBikeAbility) == 0x000100, "Wrong size on FEndDataTableBikeAbility");
static_assert(offsetof(FEndDataTableBikeAbility, DefaultDamageSourceID) == 0x000008, "Member 'FEndDataTableBikeAbility::DefaultDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, AbilityType) == 0x000010, "Member 'FEndDataTableBikeAbility::AbilityType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, NormalRange) == 0x000011, "Member 'FEndDataTableBikeAbility::NormalRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, DistanceType) == 0x000012, "Member 'FEndDataTableBikeAbility::DistanceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, MotionID) == 0x000014, "Member 'FEndDataTableBikeAbility::MotionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, CameraSequenceID) == 0x00001C, "Member 'FEndDataTableBikeAbility::CameraSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, ReferenceBattleAbilityID) == 0x000024, "Member 'FEndDataTableBikeAbility::ReferenceBattleAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, NameTextID) == 0x000030, "Member 'FEndDataTableBikeAbility::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, CoolDownTime) == 0x000040, "Member 'FEndDataTableBikeAbility::CoolDownTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, ExclusiveGroup) == 0x000044, "Member 'FEndDataTableBikeAbility::ExclusiveGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetToPlayerOdds) == 0x000048, "Member 'FEndDataTableBikeAbility::TargetToPlayerOdds' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetToAllyOdds) == 0x00004C, "Member 'FEndDataTableBikeAbility::TargetToAllyOdds' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, AttackerPositionCondition) == 0x000050, "Member 'FEndDataTableBikeAbility::AttackerPositionCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, CenterPositionOffset) == 0x000054, "Member 'FEndDataTableBikeAbility::CenterPositionOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetPositionCondition) == 0x000058, "Member 'FEndDataTableBikeAbility::TargetPositionCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetSearchAngleRange) == 0x00005C, "Member 'FEndDataTableBikeAbility::TargetSearchAngleRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetSearchDistanceMin) == 0x000064, "Member 'FEndDataTableBikeAbility::TargetSearchDistanceMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetSearchDistanceMax) == 0x000068, "Member 'FEndDataTableBikeAbility::TargetSearchDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetSearchDiffSplineMileageMin) == 0x00006C, "Member 'FEndDataTableBikeAbility::TargetSearchDiffSplineMileageMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetSearchDiffSplineMileageMax) == 0x000070, "Member 'FEndDataTableBikeAbility::TargetSearchDiffSplineMileageMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, SuperArmorSincePrepare) == 0x000074, "Member 'FEndDataTableBikeAbility::SuperArmorSincePrepare' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, ShowAttackLineEffect) == 0x000075, "Member 'FEndDataTableBikeAbility::ShowAttackLineEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttack_Array) == 0x000078, "Member 'FEndDataTableBikeAbility::PrepareAttack_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttackParameter_Array) == 0x000088, "Member 'FEndDataTableBikeAbility::PrepareAttackParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, NotCancelAtOutOfRange) == 0x000098, "Member 'FEndDataTableBikeAbility::NotCancelAtOutOfRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, DisableSlideMoveOnAttacking) == 0x000099, "Member 'FEndDataTableBikeAbility::DisableSlideMoveOnAttacking' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttackTimeout) == 0x00009C, "Member 'FEndDataTableBikeAbility::PrepareAttackTimeout' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, ForceAttackTime) == 0x0000A0, "Member 'FEndDataTableBikeAbility::ForceAttackTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttackBeginMotion) == 0x0000A4, "Member 'FEndDataTableBikeAbility::PrepareAttackBeginMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttackLoopMotion) == 0x0000AC, "Member 'FEndDataTableBikeAbility::PrepareAttackLoopMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttackCancelMotion) == 0x0000B4, "Member 'FEndDataTableBikeAbility::PrepareAttackCancelMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, CoolDownLoopMotion) == 0x0000BC, "Member 'FEndDataTableBikeAbility::CoolDownLoopMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, CoolDownEndMotion) == 0x0000C4, "Member 'FEndDataTableBikeAbility::CoolDownEndMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, InterruptAbility) == 0x0000CC, "Member 'FEndDataTableBikeAbility::InterruptAbility' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, BranchAbility_Array) == 0x0000D8, "Member 'FEndDataTableBikeAbility::BranchAbility_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TalkSetAtPrepareAttack) == 0x0000E8, "Member 'FEndDataTableBikeAbility::TalkSetAtPrepareAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TalkSetAtAttack) == 0x0000F0, "Member 'FEndDataTableBikeAbility::TalkSetAtAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, BurstDamageBonus) == 0x0000F8, "Member 'FEndDataTableBikeAbility::BurstDamageBonus' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableColosseum
// 0x02D8 (0x02E0 - 0x0008)
struct FEndDataTableColosseum final : public FEndDataTableRowBase
{
public:
	int32                                         TimerSaveArrayIndex;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DataKind;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TerritoryActorName;                                // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BattleWarpPoint;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DisplayItemName;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DisplayFlavorItemName;                             // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ItemName;                                          // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 FlavorTextID;                                      // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 SpecialRoundTextID;                                // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RecommendedLevelID;                                // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Difficulty;                                        // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DifficultyHardChangeToNormal;                      // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartyMax;                                          // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MemberCountTextID;                                 // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         MemberSelectionTextID_Array;                       // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EntryMember_Array;                                 // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EntryMemberFixedAbilityId_Array;                   // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         UseGil;                                            // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RewardID;                                          // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RewardStateTrigger_Array;                          // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   ParentCourseID;                                    // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ViewDifficulty_Array;                              // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         UseSystemDifficulty;                               // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsVRMission;                                       // 0x0101(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CourseExtra;                                       // 0x0102(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableRematch;                                    // 0x0103(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableUserControl;                                // 0x0104(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NotifyOnOpened;                                    // 0x0105(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PreNotifyActionOrActionGroupID;                    // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PostNotifyActionOrActionGroupID;                   // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DisplayFlagID_Array;                               // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           OpenFlagID_Array;                                  // 0x0128(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   OpenConditionClearCheckID;                         // 0x0138(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenConditionTextID;                               // 0x0140(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenConditionClearCheckID01;                       // 0x0148(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenConditionTextID01;                             // 0x0150(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenConditionClearCheckID02;                       // 0x0158(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenConditionTextID02;                             // 0x0160(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ClearFlagID;                                       // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlayLogClearFlagID;                                // 0x0170(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ExitTheMenuFromTheResultStoryFlag;                 // 0x0178(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BattleMax;                                         // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EnemyTerritoryID_Array;                            // 0x0188(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattleEntryCutID_Array;                            // 0x0198(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattleScenePosDataID_Array;                        // 0x01A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CourseStartStateTrigger_Array;                     // 0x01B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CourseClearStateTrigger_Array;                     // 0x01C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 CameraPitch_Array;                                 // 0x01D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattleBgm_Array;                                   // 0x01E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 BattleBgmBlendType_Array;                          // 0x01F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   OverrideFanfareID;                                 // 0x0208(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           OverrideBGM_Array;                                 // 0x0210(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         EnableRewardLog;                                   // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ExtendedSequenceBits;                              // 0x0224(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TabCategory;                                       // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ExtraRule_Array;                                   // 0x0230(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         ChadleyShop;                                       // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UserLevelName;                                     // 0x0244(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UserBattleInSequencerName;                         // 0x024C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UserWinnerSequencerName;                           // 0x0254(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UserBattleInSequencerNames_Array;                  // 0x0260(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   PreBattleActionID;                                 // 0x0270(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PostBattleActionID;                                // 0x0278(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreBattleActionExecutedID;                         // 0x0280(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PostBattleActionExecutedID;                        // 0x0288(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PostResultActionExecutedID;                        // 0x0290(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MissionTaskTextID;                                 // 0x0298(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MissionID_Array;                                   // 0x02A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   MissionSuccessActionID;                            // 0x02B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MissionFailureActionID;                            // 0x02C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CourseSelectStateTriggerID;                        // 0x02C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StfName_Array;                                     // 0x02D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableColosseum) == 0x000008, "Wrong alignment on FEndDataTableColosseum");
static_assert(sizeof(FEndDataTableColosseum) == 0x0002E0, "Wrong size on FEndDataTableColosseum");
static_assert(offsetof(FEndDataTableColosseum, TimerSaveArrayIndex) == 0x000008, "Member 'FEndDataTableColosseum::TimerSaveArrayIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, DataKind) == 0x00000C, "Member 'FEndDataTableColosseum::DataKind' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, TerritoryActorName) == 0x000010, "Member 'FEndDataTableColosseum::TerritoryActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleWarpPoint) == 0x000018, "Member 'FEndDataTableColosseum::BattleWarpPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, DisplayItemName) == 0x000020, "Member 'FEndDataTableColosseum::DisplayItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, DisplayFlavorItemName) == 0x000030, "Member 'FEndDataTableColosseum::DisplayFlavorItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ItemName) == 0x000040, "Member 'FEndDataTableColosseum::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, FlavorTextID) == 0x000050, "Member 'FEndDataTableColosseum::FlavorTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, SpecialRoundTextID) == 0x000060, "Member 'FEndDataTableColosseum::SpecialRoundTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, RecommendedLevelID) == 0x000070, "Member 'FEndDataTableColosseum::RecommendedLevelID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, Difficulty) == 0x000078, "Member 'FEndDataTableColosseum::Difficulty' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, DifficultyHardChangeToNormal) == 0x00007C, "Member 'FEndDataTableColosseum::DifficultyHardChangeToNormal' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, PartyMax) == 0x000080, "Member 'FEndDataTableColosseum::PartyMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, MemberCountTextID) == 0x000088, "Member 'FEndDataTableColosseum::MemberCountTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, MemberSelectionTextID_Array) == 0x000098, "Member 'FEndDataTableColosseum::MemberSelectionTextID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, EntryMember_Array) == 0x0000A8, "Member 'FEndDataTableColosseum::EntryMember_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, EntryMemberFixedAbilityId_Array) == 0x0000B8, "Member 'FEndDataTableColosseum::EntryMemberFixedAbilityId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, UseGil) == 0x0000C8, "Member 'FEndDataTableColosseum::UseGil' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, RewardID) == 0x0000CC, "Member 'FEndDataTableColosseum::RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, RewardStateTrigger_Array) == 0x0000D8, "Member 'FEndDataTableColosseum::RewardStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ParentCourseID) == 0x0000E8, "Member 'FEndDataTableColosseum::ParentCourseID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ViewDifficulty_Array) == 0x0000F0, "Member 'FEndDataTableColosseum::ViewDifficulty_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, UseSystemDifficulty) == 0x000100, "Member 'FEndDataTableColosseum::UseSystemDifficulty' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, IsVRMission) == 0x000101, "Member 'FEndDataTableColosseum::IsVRMission' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, CourseExtra) == 0x000102, "Member 'FEndDataTableColosseum::CourseExtra' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, DisableRematch) == 0x000103, "Member 'FEndDataTableColosseum::DisableRematch' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, DisableUserControl) == 0x000104, "Member 'FEndDataTableColosseum::DisableUserControl' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, NotifyOnOpened) == 0x000105, "Member 'FEndDataTableColosseum::NotifyOnOpened' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, PreNotifyActionOrActionGroupID) == 0x000108, "Member 'FEndDataTableColosseum::PreNotifyActionOrActionGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, PostNotifyActionOrActionGroupID) == 0x000110, "Member 'FEndDataTableColosseum::PostNotifyActionOrActionGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, DisplayFlagID_Array) == 0x000118, "Member 'FEndDataTableColosseum::DisplayFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, OpenFlagID_Array) == 0x000128, "Member 'FEndDataTableColosseum::OpenFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, OpenConditionClearCheckID) == 0x000138, "Member 'FEndDataTableColosseum::OpenConditionClearCheckID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, OpenConditionTextID) == 0x000140, "Member 'FEndDataTableColosseum::OpenConditionTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, OpenConditionClearCheckID01) == 0x000148, "Member 'FEndDataTableColosseum::OpenConditionClearCheckID01' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, OpenConditionTextID01) == 0x000150, "Member 'FEndDataTableColosseum::OpenConditionTextID01' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, OpenConditionClearCheckID02) == 0x000158, "Member 'FEndDataTableColosseum::OpenConditionClearCheckID02' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, OpenConditionTextID02) == 0x000160, "Member 'FEndDataTableColosseum::OpenConditionTextID02' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ClearFlagID) == 0x000168, "Member 'FEndDataTableColosseum::ClearFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, PlayLogClearFlagID) == 0x000170, "Member 'FEndDataTableColosseum::PlayLogClearFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ExitTheMenuFromTheResultStoryFlag) == 0x000178, "Member 'FEndDataTableColosseum::ExitTheMenuFromTheResultStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleMax) == 0x000180, "Member 'FEndDataTableColosseum::BattleMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, EnemyTerritoryID_Array) == 0x000188, "Member 'FEndDataTableColosseum::EnemyTerritoryID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleEntryCutID_Array) == 0x000198, "Member 'FEndDataTableColosseum::BattleEntryCutID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleScenePosDataID_Array) == 0x0001A8, "Member 'FEndDataTableColosseum::BattleScenePosDataID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, CourseStartStateTrigger_Array) == 0x0001B8, "Member 'FEndDataTableColosseum::CourseStartStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, CourseClearStateTrigger_Array) == 0x0001C8, "Member 'FEndDataTableColosseum::CourseClearStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, CameraPitch_Array) == 0x0001D8, "Member 'FEndDataTableColosseum::CameraPitch_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleBgm_Array) == 0x0001E8, "Member 'FEndDataTableColosseum::BattleBgm_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleBgmBlendType_Array) == 0x0001F8, "Member 'FEndDataTableColosseum::BattleBgmBlendType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, OverrideFanfareID) == 0x000208, "Member 'FEndDataTableColosseum::OverrideFanfareID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, OverrideBGM_Array) == 0x000210, "Member 'FEndDataTableColosseum::OverrideBGM_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, EnableRewardLog) == 0x000220, "Member 'FEndDataTableColosseum::EnableRewardLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ExtendedSequenceBits) == 0x000224, "Member 'FEndDataTableColosseum::ExtendedSequenceBits' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, TabCategory) == 0x000228, "Member 'FEndDataTableColosseum::TabCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ExtraRule_Array) == 0x000230, "Member 'FEndDataTableColosseum::ExtraRule_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ChadleyShop) == 0x000240, "Member 'FEndDataTableColosseum::ChadleyShop' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, UserLevelName) == 0x000244, "Member 'FEndDataTableColosseum::UserLevelName' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, UserBattleInSequencerName) == 0x00024C, "Member 'FEndDataTableColosseum::UserBattleInSequencerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, UserWinnerSequencerName) == 0x000254, "Member 'FEndDataTableColosseum::UserWinnerSequencerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, UserBattleInSequencerNames_Array) == 0x000260, "Member 'FEndDataTableColosseum::UserBattleInSequencerNames_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, PreBattleActionID) == 0x000270, "Member 'FEndDataTableColosseum::PreBattleActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, PostBattleActionID) == 0x000278, "Member 'FEndDataTableColosseum::PostBattleActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, PreBattleActionExecutedID) == 0x000280, "Member 'FEndDataTableColosseum::PreBattleActionExecutedID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, PostBattleActionExecutedID) == 0x000288, "Member 'FEndDataTableColosseum::PostBattleActionExecutedID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, PostResultActionExecutedID) == 0x000290, "Member 'FEndDataTableColosseum::PostResultActionExecutedID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, MissionTaskTextID) == 0x000298, "Member 'FEndDataTableColosseum::MissionTaskTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, MissionID_Array) == 0x0002A8, "Member 'FEndDataTableColosseum::MissionID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, MissionSuccessActionID) == 0x0002B8, "Member 'FEndDataTableColosseum::MissionSuccessActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, MissionFailureActionID) == 0x0002C0, "Member 'FEndDataTableColosseum::MissionFailureActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, CourseSelectStateTriggerID) == 0x0002C8, "Member 'FEndDataTableColosseum::CourseSelectStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, StfName_Array) == 0x0002D0, "Member 'FEndDataTableColosseum::StfName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeAIAbilitySet
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableBikeAIAbilitySet final : public FEndDataTableRowBase
{
public:
	class FName                                   SwitchWhenHard;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NormalAbilityID_Array;                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 NormalAbilityOdds_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 NormalAbilityPriority_Array;                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 SpecialAbilityHPRatio_Array;                       // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SpecialAbilityID_Array;                            // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeAIAbilitySet) == 0x000008, "Wrong alignment on FEndDataTableBikeAIAbilitySet");
static_assert(sizeof(FEndDataTableBikeAIAbilitySet) == 0x000060, "Wrong size on FEndDataTableBikeAIAbilitySet");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, SwitchWhenHard) == 0x000008, "Member 'FEndDataTableBikeAIAbilitySet::SwitchWhenHard' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, NormalAbilityID_Array) == 0x000010, "Member 'FEndDataTableBikeAIAbilitySet::NormalAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, NormalAbilityOdds_Array) == 0x000020, "Member 'FEndDataTableBikeAIAbilitySet::NormalAbilityOdds_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, NormalAbilityPriority_Array) == 0x000030, "Member 'FEndDataTableBikeAIAbilitySet::NormalAbilityPriority_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, SpecialAbilityHPRatio_Array) == 0x000040, "Member 'FEndDataTableBikeAIAbilitySet::SpecialAbilityHPRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, SpecialAbilityID_Array) == 0x000050, "Member 'FEndDataTableBikeAIAbilitySet::SpecialAbilityID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTalkSequence
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableTalkSequence final : public FEndDataTableRowBase
{
public:
	class FName                                   Talker;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         OverwriteType;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TalkerOverwriteID;                                 // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TalkSpaceType;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SubtitleDisplayTime;                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NextTalkSequenceID;                                // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IsVoice;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FinishedID_Array;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   TextId;                                            // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   VoiceId;                                           // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTalkSequence) == 0x000008, "Wrong alignment on FEndDataTableTalkSequence");
static_assert(sizeof(FEndDataTableTalkSequence) == 0x000050, "Wrong size on FEndDataTableTalkSequence");
static_assert(offsetof(FEndDataTableTalkSequence, Talker) == 0x000008, "Member 'FEndDataTableTalkSequence::Talker' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, OverwriteType) == 0x000010, "Member 'FEndDataTableTalkSequence::OverwriteType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, TalkerOverwriteID) == 0x000014, "Member 'FEndDataTableTalkSequence::TalkerOverwriteID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, TalkSpaceType) == 0x00001C, "Member 'FEndDataTableTalkSequence::TalkSpaceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, SubtitleDisplayTime) == 0x000020, "Member 'FEndDataTableTalkSequence::SubtitleDisplayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, NextTalkSequenceID) == 0x000024, "Member 'FEndDataTableTalkSequence::NextTalkSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, IsVoice) == 0x00002C, "Member 'FEndDataTableTalkSequence::IsVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, FinishedID_Array) == 0x000030, "Member 'FEndDataTableTalkSequence::FinishedID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, TextId) == 0x000040, "Member 'FEndDataTableTalkSequence::TextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, VoiceId) == 0x000048, "Member 'FEndDataTableTalkSequence::VoiceId' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeAngleRange
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBikeAngleRange final : public FEndDataTableRowBase
{
public:
	float                                         AngleA;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngleB;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeAngleRange) == 0x000008, "Wrong alignment on FEndDataTableBikeAngleRange");
static_assert(sizeof(FEndDataTableBikeAngleRange) == 0x000010, "Wrong size on FEndDataTableBikeAngleRange");
static_assert(offsetof(FEndDataTableBikeAngleRange, AngleA) == 0x000008, "Member 'FEndDataTableBikeAngleRange::AngleA' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAngleRange, AngleB) == 0x00000C, "Member 'FEndDataTableBikeAngleRange::AngleB' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeBattle
// 0x00E0 (0x00E8 - 0x0008)
struct FEndDataTableBikeBattle final : public FEndDataTableRowBase
{
public:
	class FName                                   NextBikeBattleID;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NextBikeBattleDelay;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StateTriggerId;                                    // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlannerEventId;                                    // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StateTriggerDelay;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FinishedStateTriggerId;                            // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FinishedPlannerEventId;                            // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BikeUniqueIdList_Array;                            // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BikeCharaSpecIDList_Array;                         // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BikePopupParameterList_Array;                      // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CutSceneCharacterIDList_Array;                     // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FormationSettingList_Array;                        // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FormationGroupNameList_Array;                      // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BikeCharaStateTriggerIDList_Array;                 // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BikeCharaPlannerEventIDList_Array;                 // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BikeTriggerBoxKeyList_Array;                       // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DisableSpawnConditionList_Array;                   // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         HelpPopupEndless;                                  // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsEscape;                                          // 0x00D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HelpPopupCount;                                    // 0x00DA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DB[0x1];                                       // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HelpPopupCondition;                                // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HelpPopupHpRate;                                   // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeBattle) == 0x000008, "Wrong alignment on FEndDataTableBikeBattle");
static_assert(sizeof(FEndDataTableBikeBattle) == 0x0000E8, "Wrong size on FEndDataTableBikeBattle");
static_assert(offsetof(FEndDataTableBikeBattle, NextBikeBattleID) == 0x000008, "Member 'FEndDataTableBikeBattle::NextBikeBattleID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, NextBikeBattleDelay) == 0x000010, "Member 'FEndDataTableBikeBattle::NextBikeBattleDelay' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, StateTriggerId) == 0x000014, "Member 'FEndDataTableBikeBattle::StateTriggerId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, PlannerEventId) == 0x00001C, "Member 'FEndDataTableBikeBattle::PlannerEventId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, StateTriggerDelay) == 0x000024, "Member 'FEndDataTableBikeBattle::StateTriggerDelay' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, FinishedStateTriggerId) == 0x000028, "Member 'FEndDataTableBikeBattle::FinishedStateTriggerId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, FinishedPlannerEventId) == 0x000030, "Member 'FEndDataTableBikeBattle::FinishedPlannerEventId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikeUniqueIdList_Array) == 0x000038, "Member 'FEndDataTableBikeBattle::BikeUniqueIdList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikeCharaSpecIDList_Array) == 0x000048, "Member 'FEndDataTableBikeBattle::BikeCharaSpecIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikePopupParameterList_Array) == 0x000058, "Member 'FEndDataTableBikeBattle::BikePopupParameterList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, CutSceneCharacterIDList_Array) == 0x000068, "Member 'FEndDataTableBikeBattle::CutSceneCharacterIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, FormationSettingList_Array) == 0x000078, "Member 'FEndDataTableBikeBattle::FormationSettingList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, FormationGroupNameList_Array) == 0x000088, "Member 'FEndDataTableBikeBattle::FormationGroupNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikeCharaStateTriggerIDList_Array) == 0x000098, "Member 'FEndDataTableBikeBattle::BikeCharaStateTriggerIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikeCharaPlannerEventIDList_Array) == 0x0000A8, "Member 'FEndDataTableBikeBattle::BikeCharaPlannerEventIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikeTriggerBoxKeyList_Array) == 0x0000B8, "Member 'FEndDataTableBikeBattle::BikeTriggerBoxKeyList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, DisableSpawnConditionList_Array) == 0x0000C8, "Member 'FEndDataTableBikeBattle::DisableSpawnConditionList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, HelpPopupEndless) == 0x0000D8, "Member 'FEndDataTableBikeBattle::HelpPopupEndless' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, IsEscape) == 0x0000D9, "Member 'FEndDataTableBikeBattle::IsEscape' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, HelpPopupCount) == 0x0000DA, "Member 'FEndDataTableBikeBattle::HelpPopupCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, HelpPopupCondition) == 0x0000DC, "Member 'FEndDataTableBikeBattle::HelpPopupCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, HelpPopupHpRate) == 0x0000E0, "Member 'FEndDataTableBikeBattle::HelpPopupHpRate' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeBattleCutSceneCharacter
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBikeBattleCutSceneCharacter final : public FEndDataTableRowBase
{
public:
	class FName                                   ViecleCharaName;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderCharaNameList_Array;                          // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeBattleCutSceneCharacter) == 0x000008, "Wrong alignment on FEndDataTableBikeBattleCutSceneCharacter");
static_assert(sizeof(FEndDataTableBikeBattleCutSceneCharacter) == 0x000020, "Wrong size on FEndDataTableBikeBattleCutSceneCharacter");
static_assert(offsetof(FEndDataTableBikeBattleCutSceneCharacter, ViecleCharaName) == 0x000008, "Member 'FEndDataTableBikeBattleCutSceneCharacter::ViecleCharaName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattleCutSceneCharacter, RiderCharaNameList_Array) == 0x000010, "Member 'FEndDataTableBikeBattleCutSceneCharacter::RiderCharaNameList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyParameter
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEnemyParameter final : public FEndDataTableRowBase
{
public:
	int32                                         HPMax;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BPMax;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Strength;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Magic;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Vitality;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Spilit;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyParameter) == 0x000008, "Wrong alignment on FEndDataTableEnemyParameter");
static_assert(sizeof(FEndDataTableEnemyParameter) == 0x000020, "Wrong size on FEndDataTableEnemyParameter");
static_assert(offsetof(FEndDataTableEnemyParameter, HPMax) == 0x000008, "Member 'FEndDataTableEnemyParameter::HPMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyParameter, BPMax) == 0x00000C, "Member 'FEndDataTableEnemyParameter::BPMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyParameter, Strength) == 0x000010, "Member 'FEndDataTableEnemyParameter::Strength' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyParameter, Magic) == 0x000014, "Member 'FEndDataTableEnemyParameter::Magic' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyParameter, Vitality) == 0x000018, "Member 'FEndDataTableEnemyParameter::Vitality' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyParameter, Spilit) == 0x00001C, "Member 'FEndDataTableEnemyParameter::Spilit' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeCharaSpec
// 0x0180 (0x0188 - 0x0008)
struct FEndDataTableBikeCharaSpec final : public FEndDataTableRowBase
{
public:
	class FName                                   CharaSpecID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           VehicleAnimSetPack_Array;                          // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           VehicleAnimSet_Array;                              // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         DisableVehicleWind;                                // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideRollAngleMultiplier;                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderCharaSpecID_Array;                            // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SocketName_Array;                                  // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderAnimSetPackA_Array;                           // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderAnimSetPackB_Array;                           // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderAnimSetPackC_Array;                           // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderAnimSetPackD_Array;                           // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderAnimSetA_Array;                               // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderAnimSetB_Array;                               // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderAnimSetC_Array;                               // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderAnimSetD_Array;                               // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DisableRiderWind_Array;                            // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         AIControllerIndex;                                 // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpeed;                                          // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxSpeed;                                          // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackIntervalTime;                                // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HitPointEasy;                                      // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HitPoint;                                          // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PushedReaction_Array;                              // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         PushedReactionOnRagDoll;                           // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DamageReactionID;                                  // 0x0114(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AIAbilitySetID;                                    // 0x011C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetToAllyAIAbilitySetID;                        // 0x0124(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AfterFireEffectID;                                 // 0x012C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MufflerSmokeEffectID;                              // 0x0134(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MufflerEffectBoneName;                             // 0x013C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InvincibleState;                                   // 0x0144(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllyPositionAtLastOneEnemy;                        // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PersonalSpaceRadius;                               // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AvoidPersonalSpace;                                // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PhysObjCapsuleFrontSocket;                         // 0x0154(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PhysObjCapsuleFrontOffsetDepth;                    // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PhysObjCapsuleFrontOffsetHeight;                   // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PhysObjCapsuleRearSocket;                          // 0x0164(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PhysObjCapsuleRadius;                              // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PhysObjImplusScale;                                // 0x0170(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysObjImplusRadius;                               // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PhysObjForceValue;                                 // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PhysObjForceAmplifierMaxSpeed;                     // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ResultScorePoint;                                  // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeCharaSpec) == 0x000008, "Wrong alignment on FEndDataTableBikeCharaSpec");
static_assert(sizeof(FEndDataTableBikeCharaSpec) == 0x000188, "Wrong size on FEndDataTableBikeCharaSpec");
static_assert(offsetof(FEndDataTableBikeCharaSpec, CharaSpecID) == 0x000008, "Member 'FEndDataTableBikeCharaSpec::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, VehicleAnimSetPack_Array) == 0x000010, "Member 'FEndDataTableBikeCharaSpec::VehicleAnimSetPack_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, VehicleAnimSet_Array) == 0x000020, "Member 'FEndDataTableBikeCharaSpec::VehicleAnimSet_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, DisableVehicleWind) == 0x000030, "Member 'FEndDataTableBikeCharaSpec::DisableVehicleWind' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, OverrideRollAngleMultiplier) == 0x000034, "Member 'FEndDataTableBikeCharaSpec::OverrideRollAngleMultiplier' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, RiderCharaSpecID_Array) == 0x000038, "Member 'FEndDataTableBikeCharaSpec::RiderCharaSpecID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, SocketName_Array) == 0x000048, "Member 'FEndDataTableBikeCharaSpec::SocketName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, RiderAnimSetPackA_Array) == 0x000058, "Member 'FEndDataTableBikeCharaSpec::RiderAnimSetPackA_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, RiderAnimSetPackB_Array) == 0x000068, "Member 'FEndDataTableBikeCharaSpec::RiderAnimSetPackB_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, RiderAnimSetPackC_Array) == 0x000078, "Member 'FEndDataTableBikeCharaSpec::RiderAnimSetPackC_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, RiderAnimSetPackD_Array) == 0x000088, "Member 'FEndDataTableBikeCharaSpec::RiderAnimSetPackD_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, RiderAnimSetA_Array) == 0x000098, "Member 'FEndDataTableBikeCharaSpec::RiderAnimSetA_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, RiderAnimSetB_Array) == 0x0000A8, "Member 'FEndDataTableBikeCharaSpec::RiderAnimSetB_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, RiderAnimSetC_Array) == 0x0000B8, "Member 'FEndDataTableBikeCharaSpec::RiderAnimSetC_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, RiderAnimSetD_Array) == 0x0000C8, "Member 'FEndDataTableBikeCharaSpec::RiderAnimSetD_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, DisableRiderWind_Array) == 0x0000D8, "Member 'FEndDataTableBikeCharaSpec::DisableRiderWind_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AIControllerIndex) == 0x0000E8, "Member 'FEndDataTableBikeCharaSpec::AIControllerIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, MinSpeed) == 0x0000EC, "Member 'FEndDataTableBikeCharaSpec::MinSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, MaxSpeed) == 0x0000F0, "Member 'FEndDataTableBikeCharaSpec::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AttackIntervalTime) == 0x0000F4, "Member 'FEndDataTableBikeCharaSpec::AttackIntervalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, HitPointEasy) == 0x0000F8, "Member 'FEndDataTableBikeCharaSpec::HitPointEasy' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, HitPoint) == 0x0000FC, "Member 'FEndDataTableBikeCharaSpec::HitPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PushedReaction_Array) == 0x000100, "Member 'FEndDataTableBikeCharaSpec::PushedReaction_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PushedReactionOnRagDoll) == 0x000110, "Member 'FEndDataTableBikeCharaSpec::PushedReactionOnRagDoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, DamageReactionID) == 0x000114, "Member 'FEndDataTableBikeCharaSpec::DamageReactionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AIAbilitySetID) == 0x00011C, "Member 'FEndDataTableBikeCharaSpec::AIAbilitySetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, TargetToAllyAIAbilitySetID) == 0x000124, "Member 'FEndDataTableBikeCharaSpec::TargetToAllyAIAbilitySetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AfterFireEffectID) == 0x00012C, "Member 'FEndDataTableBikeCharaSpec::AfterFireEffectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, MufflerSmokeEffectID) == 0x000134, "Member 'FEndDataTableBikeCharaSpec::MufflerSmokeEffectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, MufflerEffectBoneName) == 0x00013C, "Member 'FEndDataTableBikeCharaSpec::MufflerEffectBoneName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, InvincibleState) == 0x000144, "Member 'FEndDataTableBikeCharaSpec::InvincibleState' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AllyPositionAtLastOneEnemy) == 0x000148, "Member 'FEndDataTableBikeCharaSpec::AllyPositionAtLastOneEnemy' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PersonalSpaceRadius) == 0x00014C, "Member 'FEndDataTableBikeCharaSpec::PersonalSpaceRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AvoidPersonalSpace) == 0x000150, "Member 'FEndDataTableBikeCharaSpec::AvoidPersonalSpace' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PhysObjCapsuleFrontSocket) == 0x000154, "Member 'FEndDataTableBikeCharaSpec::PhysObjCapsuleFrontSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PhysObjCapsuleFrontOffsetDepth) == 0x00015C, "Member 'FEndDataTableBikeCharaSpec::PhysObjCapsuleFrontOffsetDepth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PhysObjCapsuleFrontOffsetHeight) == 0x000160, "Member 'FEndDataTableBikeCharaSpec::PhysObjCapsuleFrontOffsetHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PhysObjCapsuleRearSocket) == 0x000164, "Member 'FEndDataTableBikeCharaSpec::PhysObjCapsuleRearSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PhysObjCapsuleRadius) == 0x00016C, "Member 'FEndDataTableBikeCharaSpec::PhysObjCapsuleRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PhysObjImplusScale) == 0x000170, "Member 'FEndDataTableBikeCharaSpec::PhysObjImplusScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PhysObjImplusRadius) == 0x000174, "Member 'FEndDataTableBikeCharaSpec::PhysObjImplusRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PhysObjForceValue) == 0x000178, "Member 'FEndDataTableBikeCharaSpec::PhysObjForceValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PhysObjForceAmplifierMaxSpeed) == 0x00017C, "Member 'FEndDataTableBikeCharaSpec::PhysObjForceAmplifierMaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, ResultScorePoint) == 0x000180, "Member 'FEndDataTableBikeCharaSpec::ResultScorePoint' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeCombo
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBikeCombo final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ComboID_Array;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeCombo) == 0x000008, "Wrong alignment on FEndDataTableBikeCombo");
static_assert(sizeof(FEndDataTableBikeCombo) == 0x000018, "Wrong size on FEndDataTableBikeCombo");
static_assert(offsetof(FEndDataTableBikeCombo, ComboID_Array) == 0x000008, "Member 'FEndDataTableBikeCombo::ComboID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeCommonParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBikeCommonParameter final : public FEndDataTableRowBase
{
public:
	int32                                         ParamInt;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ParamFloat;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableBikeCommonParameter");
static_assert(sizeof(FEndDataTableBikeCommonParameter) == 0x000018, "Wrong size on FEndDataTableBikeCommonParameter");
static_assert(offsetof(FEndDataTableBikeCommonParameter, ParamInt) == 0x000008, "Member 'FEndDataTableBikeCommonParameter::ParamInt' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCommonParameter, ParamFloat) == 0x00000C, "Member 'FEndDataTableBikeCommonParameter::ParamFloat' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCommonParameter, ParamName) == 0x000010, "Member 'FEndDataTableBikeCommonParameter::ParamName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeDamageReaction
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableBikeDamageReaction final : public FEndDataTableRowBase
{
public:
	uint8                                         EnableOnSuperArmor;                                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 KnockBackSlide_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 KnockBackYawMin_Array;                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 KnockBackYawMax_Array;                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 KnockBackYawTime_Array;                            // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeDamageReaction) == 0x000008, "Wrong alignment on FEndDataTableBikeDamageReaction");
static_assert(sizeof(FEndDataTableBikeDamageReaction) == 0x000050, "Wrong size on FEndDataTableBikeDamageReaction");
static_assert(offsetof(FEndDataTableBikeDamageReaction, EnableOnSuperArmor) == 0x000008, "Member 'FEndDataTableBikeDamageReaction::EnableOnSuperArmor' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageReaction, KnockBackSlide_Array) == 0x000010, "Member 'FEndDataTableBikeDamageReaction::KnockBackSlide_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageReaction, KnockBackYawMin_Array) == 0x000020, "Member 'FEndDataTableBikeDamageReaction::KnockBackYawMin_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageReaction, KnockBackYawMax_Array) == 0x000030, "Member 'FEndDataTableBikeDamageReaction::KnockBackYawMax_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageReaction, KnockBackYawTime_Array) == 0x000040, "Member 'FEndDataTableBikeDamageReaction::KnockBackYawTime_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCardGameMessageAmorReggie
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableCardGameMessageAmorReggie final : public FEndDataTableRowBase
{
public:
	class FName                                   OpponentID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Turn;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CardId;                                            // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PutY;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PutX;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CorrectType;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGameMessageAmorReggie) == 0x000008, "Wrong alignment on FEndDataTableCardGameMessageAmorReggie");
static_assert(sizeof(FEndDataTableCardGameMessageAmorReggie) == 0x000028, "Wrong size on FEndDataTableCardGameMessageAmorReggie");
static_assert(offsetof(FEndDataTableCardGameMessageAmorReggie, OpponentID) == 0x000008, "Member 'FEndDataTableCardGameMessageAmorReggie::OpponentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageAmorReggie, Turn) == 0x000010, "Member 'FEndDataTableCardGameMessageAmorReggie::Turn' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageAmorReggie, CardId) == 0x000014, "Member 'FEndDataTableCardGameMessageAmorReggie::CardId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageAmorReggie, PutY) == 0x00001C, "Member 'FEndDataTableCardGameMessageAmorReggie::PutY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageAmorReggie, PutX) == 0x000020, "Member 'FEndDataTableCardGameMessageAmorReggie::PutX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameMessageAmorReggie, CorrectType) == 0x000024, "Member 'FEndDataTableCardGameMessageAmorReggie::CorrectType' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeDamageSource
// 0x0150 (0x0158 - 0x0008)
struct FEndDataTableBikeDamageSource final : public FEndDataTableRowBase
{
public:
	int32                                         Power;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RandomBreadth;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Impact;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ReactionDirection;                                 // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelativeSpeedAtReaction;                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UnBlockable;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableGuardEffect;                                 // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DamageMotionType;                                  // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableFriendlyFire;                                // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         WillBeAvoided;                                     // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableHitCharacter;                               // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableHitBackground;                              // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MoveOnTerrain;                                     // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitDestroyType;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitCountTotal;                                     // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitCount;                                          // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitInterval;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitMultiParts;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceBrake;                                        // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableFinish;                                     // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CollisionType;                                     // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CollisionParameter_Array;                          // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   CharaSpecID;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BikeCreatePositionType;                            // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BikeCreateMileageOffset;                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BikeCreateSlideOffset;                             // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CreateBasePos;                                     // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreatePartName;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetX;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetY;                                 // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetZ;                                 // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetPitch;                             // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetYaw;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreatePartOffsetRoll;                              // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CreateDelayTime;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BikeTargetPositionType;                            // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BikeTargetMileageOffset;                           // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BikeTargetMileageOffsetTime;                       // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BikeTargetSlideOffset;                             // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BikeTargetHeightOffset;                            // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableTargetHeightBaseIsTarget;                    // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableTargetBaseIsTargetSpline;                    // 0x0091(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableDeviationCalc;                               // 0x0092(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeviationCalcSlideSpeedRate;                       // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetBase;                                        // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetName;                                        // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LifeTimeNotify;                                    // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ProgressDirectionType;                             // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ControlType;                                       // 0x00B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ControlParameter_Array;                            // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         ControlFlag;                                       // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RotationType;                                      // 0x00D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ConditionCreateDamageSourceType_Array;             // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ConditionCreateDamageSourceID_Array;               // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         CreateEffectResourceCategory;                      // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreateEffectResourceName;                          // 0x00FC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CreateSoundResourceCategory;                       // 0x0104(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreateSoundResourceName;                           // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitEffectResourceCategory;                         // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitEffectResourceName;                             // 0x0114(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BindEffectResourceCategory;                        // 0x011C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BindEffectResourceName;                            // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AttributeEffectResource;                           // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttributeEffectLoopTime;                           // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HitSoundResourceCategory;                          // 0x0134(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitSoundResourceName;                              // 0x0138(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnvironmenPhysImpulseRadius;                       // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnvironmenPhysImpulseScale;                        // 0x0144(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableOwnerVelocity;                              // 0x0145(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PlayerFeedbackID_Array;                            // 0x0148(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeDamageSource) == 0x000008, "Wrong alignment on FEndDataTableBikeDamageSource");
static_assert(sizeof(FEndDataTableBikeDamageSource) == 0x000158, "Wrong size on FEndDataTableBikeDamageSource");
static_assert(offsetof(FEndDataTableBikeDamageSource, Power) == 0x000008, "Member 'FEndDataTableBikeDamageSource::Power' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, RandomBreadth) == 0x00000C, "Member 'FEndDataTableBikeDamageSource::RandomBreadth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, Impact) == 0x000010, "Member 'FEndDataTableBikeDamageSource::Impact' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ReactionDirection) == 0x000011, "Member 'FEndDataTableBikeDamageSource::ReactionDirection' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, RelativeSpeedAtReaction) == 0x000014, "Member 'FEndDataTableBikeDamageSource::RelativeSpeedAtReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, UnBlockable) == 0x000018, "Member 'FEndDataTableBikeDamageSource::UnBlockable' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnableGuardEffect) == 0x000019, "Member 'FEndDataTableBikeDamageSource::EnableGuardEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DamageMotionType) == 0x00001A, "Member 'FEndDataTableBikeDamageSource::DamageMotionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnableFriendlyFire) == 0x00001B, "Member 'FEndDataTableBikeDamageSource::EnableFriendlyFire' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, WillBeAvoided) == 0x00001C, "Member 'FEndDataTableBikeDamageSource::WillBeAvoided' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DisableHitCharacter) == 0x00001D, "Member 'FEndDataTableBikeDamageSource::DisableHitCharacter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DisableHitBackground) == 0x00001E, "Member 'FEndDataTableBikeDamageSource::DisableHitBackground' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, MoveOnTerrain) == 0x00001F, "Member 'FEndDataTableBikeDamageSource::MoveOnTerrain' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitDestroyType) == 0x000020, "Member 'FEndDataTableBikeDamageSource::HitDestroyType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitCountTotal) == 0x000021, "Member 'FEndDataTableBikeDamageSource::HitCountTotal' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitCount) == 0x000022, "Member 'FEndDataTableBikeDamageSource::HitCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitInterval) == 0x000024, "Member 'FEndDataTableBikeDamageSource::HitInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitMultiParts) == 0x000028, "Member 'FEndDataTableBikeDamageSource::HitMultiParts' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ForceBrake) == 0x000029, "Member 'FEndDataTableBikeDamageSource::ForceBrake' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DisableFinish) == 0x00002A, "Member 'FEndDataTableBikeDamageSource::DisableFinish' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CollisionType) == 0x00002B, "Member 'FEndDataTableBikeDamageSource::CollisionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CollisionParameter_Array) == 0x000030, "Member 'FEndDataTableBikeDamageSource::CollisionParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CharaSpecID) == 0x000040, "Member 'FEndDataTableBikeDamageSource::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeCreatePositionType) == 0x000048, "Member 'FEndDataTableBikeDamageSource::BikeCreatePositionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeCreateMileageOffset) == 0x00004C, "Member 'FEndDataTableBikeDamageSource::BikeCreateMileageOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeCreateSlideOffset) == 0x000050, "Member 'FEndDataTableBikeDamageSource::BikeCreateSlideOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreateBasePos) == 0x000054, "Member 'FEndDataTableBikeDamageSource::CreateBasePos' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartName) == 0x000058, "Member 'FEndDataTableBikeDamageSource::CreatePartName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetX) == 0x000060, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetY) == 0x000064, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetZ) == 0x000068, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetPitch) == 0x00006C, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetYaw) == 0x000070, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetRoll) == 0x000074, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetRoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreateDelayTime) == 0x000078, "Member 'FEndDataTableBikeDamageSource::CreateDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeTargetPositionType) == 0x00007C, "Member 'FEndDataTableBikeDamageSource::BikeTargetPositionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeTargetMileageOffset) == 0x000080, "Member 'FEndDataTableBikeDamageSource::BikeTargetMileageOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeTargetMileageOffsetTime) == 0x000084, "Member 'FEndDataTableBikeDamageSource::BikeTargetMileageOffsetTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeTargetSlideOffset) == 0x000088, "Member 'FEndDataTableBikeDamageSource::BikeTargetSlideOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeTargetHeightOffset) == 0x00008C, "Member 'FEndDataTableBikeDamageSource::BikeTargetHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnableTargetHeightBaseIsTarget) == 0x000090, "Member 'FEndDataTableBikeDamageSource::EnableTargetHeightBaseIsTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnableTargetBaseIsTargetSpline) == 0x000091, "Member 'FEndDataTableBikeDamageSource::EnableTargetBaseIsTargetSpline' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnableDeviationCalc) == 0x000092, "Member 'FEndDataTableBikeDamageSource::EnableDeviationCalc' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DeviationCalcSlideSpeedRate) == 0x000094, "Member 'FEndDataTableBikeDamageSource::DeviationCalcSlideSpeedRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, TargetBase) == 0x000098, "Member 'FEndDataTableBikeDamageSource::TargetBase' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, TargetName) == 0x0000A0, "Member 'FEndDataTableBikeDamageSource::TargetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, LifeTimeNotify) == 0x0000B0, "Member 'FEndDataTableBikeDamageSource::LifeTimeNotify' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, LifeTime) == 0x0000B4, "Member 'FEndDataTableBikeDamageSource::LifeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ProgressDirectionType) == 0x0000B8, "Member 'FEndDataTableBikeDamageSource::ProgressDirectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ControlType) == 0x0000B9, "Member 'FEndDataTableBikeDamageSource::ControlType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ControlParameter_Array) == 0x0000C0, "Member 'FEndDataTableBikeDamageSource::ControlParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ControlFlag) == 0x0000D0, "Member 'FEndDataTableBikeDamageSource::ControlFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, RotationType) == 0x0000D4, "Member 'FEndDataTableBikeDamageSource::RotationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ConditionCreateDamageSourceType_Array) == 0x0000D8, "Member 'FEndDataTableBikeDamageSource::ConditionCreateDamageSourceType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ConditionCreateDamageSourceID_Array) == 0x0000E8, "Member 'FEndDataTableBikeDamageSource::ConditionCreateDamageSourceID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreateEffectResourceCategory) == 0x0000F8, "Member 'FEndDataTableBikeDamageSource::CreateEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreateEffectResourceName) == 0x0000FC, "Member 'FEndDataTableBikeDamageSource::CreateEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreateSoundResourceCategory) == 0x000104, "Member 'FEndDataTableBikeDamageSource::CreateSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreateSoundResourceName) == 0x000108, "Member 'FEndDataTableBikeDamageSource::CreateSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitEffectResourceCategory) == 0x000110, "Member 'FEndDataTableBikeDamageSource::HitEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitEffectResourceName) == 0x000114, "Member 'FEndDataTableBikeDamageSource::HitEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BindEffectResourceCategory) == 0x00011C, "Member 'FEndDataTableBikeDamageSource::BindEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BindEffectResourceName) == 0x000120, "Member 'FEndDataTableBikeDamageSource::BindEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, AttributeEffectResource) == 0x000128, "Member 'FEndDataTableBikeDamageSource::AttributeEffectResource' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, AttributeEffectLoopTime) == 0x000130, "Member 'FEndDataTableBikeDamageSource::AttributeEffectLoopTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitSoundResourceCategory) == 0x000134, "Member 'FEndDataTableBikeDamageSource::HitSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitSoundResourceName) == 0x000138, "Member 'FEndDataTableBikeDamageSource::HitSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnvironmenPhysImpulseRadius) == 0x000140, "Member 'FEndDataTableBikeDamageSource::EnvironmenPhysImpulseRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnvironmenPhysImpulseScale) == 0x000144, "Member 'FEndDataTableBikeDamageSource::EnvironmenPhysImpulseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DisableOwnerVelocity) == 0x000145, "Member 'FEndDataTableBikeDamageSource::DisableOwnerVelocity' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, PlayerFeedbackID_Array) == 0x000148, "Member 'FEndDataTableBikeDamageSource::PlayerFeedbackID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeEnergyGaugeSetting
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBikeEnergyGaugeSetting final : public FEndDataTableRowBase
{
public:
	float                                         EnergyGaugeMax;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnergyGaugeDecreeseSpeed;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnergyGaugeRecoveryItem;                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeEnergyGaugeSetting) == 0x000008, "Wrong alignment on FEndDataTableBikeEnergyGaugeSetting");
static_assert(sizeof(FEndDataTableBikeEnergyGaugeSetting) == 0x000018, "Wrong size on FEndDataTableBikeEnergyGaugeSetting");
static_assert(offsetof(FEndDataTableBikeEnergyGaugeSetting, EnergyGaugeMax) == 0x000008, "Member 'FEndDataTableBikeEnergyGaugeSetting::EnergyGaugeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeEnergyGaugeSetting, EnergyGaugeDecreeseSpeed) == 0x00000C, "Member 'FEndDataTableBikeEnergyGaugeSetting::EnergyGaugeDecreeseSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeEnergyGaugeSetting, EnergyGaugeRecoveryItem) == 0x000010, "Member 'FEndDataTableBikeEnergyGaugeSetting::EnergyGaugeRecoveryItem' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeInterruptAction
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBikeInterruptAction final : public FEndDataTableRowBase
{
public:
	class FName                                   OwnerMotion;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetMotion;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OwnerKnockBack;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetKnockBack;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeInterruptAction) == 0x000008, "Wrong alignment on FEndDataTableBikeInterruptAction");
static_assert(sizeof(FEndDataTableBikeInterruptAction) == 0x000020, "Wrong size on FEndDataTableBikeInterruptAction");
static_assert(offsetof(FEndDataTableBikeInterruptAction, OwnerMotion) == 0x000008, "Member 'FEndDataTableBikeInterruptAction::OwnerMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeInterruptAction, TargetMotion) == 0x000010, "Member 'FEndDataTableBikeInterruptAction::TargetMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeInterruptAction, OwnerKnockBack) == 0x000018, "Member 'FEndDataTableBikeInterruptAction::OwnerKnockBack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeInterruptAction, TargetKnockBack) == 0x000019, "Member 'FEndDataTableBikeInterruptAction::TargetKnockBack' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeItemList
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBikeItemList final : public FEndDataTableRowBase
{
public:
	class FName                                   BikeItemGroupName;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SplineID;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ItemType_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ItemTemplate_Array;                                // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeItemList) == 0x000008, "Wrong alignment on FEndDataTableBikeItemList");
static_assert(sizeof(FEndDataTableBikeItemList) == 0x000038, "Wrong size on FEndDataTableBikeItemList");
static_assert(offsetof(FEndDataTableBikeItemList, BikeItemGroupName) == 0x000008, "Member 'FEndDataTableBikeItemList::BikeItemGroupName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeItemList, SplineID) == 0x000010, "Member 'FEndDataTableBikeItemList::SplineID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeItemList, ItemType_Array) == 0x000018, "Member 'FEndDataTableBikeItemList::ItemType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeItemList, ItemTemplate_Array) == 0x000028, "Member 'FEndDataTableBikeItemList::ItemTemplate_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnvironmentSpec
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableEnvironmentSpec final : public FEndDataTableRowBase
{
public:
	class FString                                 ContentsEffect;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ContentsSE;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ForceAnimate;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AnimSetPath_Array;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnvironmentSpec) == 0x000008, "Wrong alignment on FEndDataTableEnvironmentSpec");
static_assert(sizeof(FEndDataTableEnvironmentSpec) == 0x000040, "Wrong size on FEndDataTableEnvironmentSpec");
static_assert(offsetof(FEndDataTableEnvironmentSpec, ContentsEffect) == 0x000008, "Member 'FEndDataTableEnvironmentSpec::ContentsEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSpec, ContentsSE) == 0x000018, "Member 'FEndDataTableEnvironmentSpec::ContentsSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSpec, ForceAnimate) == 0x000028, "Member 'FEndDataTableEnvironmentSpec::ForceAnimate' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSpec, AnimSetPath_Array) == 0x000030, "Member 'FEndDataTableEnvironmentSpec::AnimSetPath_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeItemTemplate
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableBikeItemTemplate final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 ItemType_Array;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 OffsetX_Array;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 OffsetY_Array;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 OffsetZ_Array;                                     // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 OffsetYaw_Array;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 AlongSpline_Array;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeItemTemplate) == 0x000008, "Wrong alignment on FEndDataTableBikeItemTemplate");
static_assert(sizeof(FEndDataTableBikeItemTemplate) == 0x000068, "Wrong size on FEndDataTableBikeItemTemplate");
static_assert(offsetof(FEndDataTableBikeItemTemplate, ItemType_Array) == 0x000008, "Member 'FEndDataTableBikeItemTemplate::ItemType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeItemTemplate, OffsetX_Array) == 0x000018, "Member 'FEndDataTableBikeItemTemplate::OffsetX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeItemTemplate, OffsetY_Array) == 0x000028, "Member 'FEndDataTableBikeItemTemplate::OffsetY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeItemTemplate, OffsetZ_Array) == 0x000038, "Member 'FEndDataTableBikeItemTemplate::OffsetZ_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeItemTemplate, OffsetYaw_Array) == 0x000048, "Member 'FEndDataTableBikeItemTemplate::OffsetYaw_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeItemTemplate, AlongSpline_Array) == 0x000058, "Member 'FEndDataTableBikeItemTemplate::AlongSpline_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeItemWidgetDisplayData
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBikeItemWidgetDisplayData final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           SplineName_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 InputKey_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 LapNumber_Array;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeItemWidgetDisplayData) == 0x000008, "Wrong alignment on FEndDataTableBikeItemWidgetDisplayData");
static_assert(sizeof(FEndDataTableBikeItemWidgetDisplayData) == 0x000038, "Wrong size on FEndDataTableBikeItemWidgetDisplayData");
static_assert(offsetof(FEndDataTableBikeItemWidgetDisplayData, SplineName_Array) == 0x000008, "Member 'FEndDataTableBikeItemWidgetDisplayData::SplineName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeItemWidgetDisplayData, InputKey_Array) == 0x000018, "Member 'FEndDataTableBikeItemWidgetDisplayData::InputKey_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeItemWidgetDisplayData, LapNumber_Array) == 0x000028, "Member 'FEndDataTableBikeItemWidgetDisplayData::LapNumber_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeLocation
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBikeLocation final : public FEndDataTableRowBase
{
public:
	class FName                                   PlayerBikeCharaSpec;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AllyBikeCharaSpec;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartLocationX;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartLocationY;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartLocationZ;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BikePhaseIDList_Array;                             // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeLocation) == 0x000008, "Wrong alignment on FEndDataTableBikeLocation");
static_assert(sizeof(FEndDataTableBikeLocation) == 0x000038, "Wrong size on FEndDataTableBikeLocation");
static_assert(offsetof(FEndDataTableBikeLocation, PlayerBikeCharaSpec) == 0x000008, "Member 'FEndDataTableBikeLocation::PlayerBikeCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeLocation, AllyBikeCharaSpec) == 0x000010, "Member 'FEndDataTableBikeLocation::AllyBikeCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeLocation, StartLocationX) == 0x000018, "Member 'FEndDataTableBikeLocation::StartLocationX' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeLocation, StartLocationY) == 0x00001C, "Member 'FEndDataTableBikeLocation::StartLocationY' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeLocation, StartLocationZ) == 0x000020, "Member 'FEndDataTableBikeLocation::StartLocationZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeLocation, BikePhaseIDList_Array) == 0x000028, "Member 'FEndDataTableBikeLocation::BikePhaseIDList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeMovementFormation
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBikeMovementFormation final : public FEndDataTableRowBase
{
public:
	float                                         MinKeepSlideWidth;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxKeepSlideWidth;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DefaultKeepSlideWidth;                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinKeepDiffMileage;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SpecialFormationType;                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeMovementFormation) == 0x000008, "Wrong alignment on FEndDataTableBikeMovementFormation");
static_assert(sizeof(FEndDataTableBikeMovementFormation) == 0x000020, "Wrong size on FEndDataTableBikeMovementFormation");
static_assert(offsetof(FEndDataTableBikeMovementFormation, MinKeepSlideWidth) == 0x000008, "Member 'FEndDataTableBikeMovementFormation::MinKeepSlideWidth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeMovementFormation, MaxKeepSlideWidth) == 0x00000C, "Member 'FEndDataTableBikeMovementFormation::MaxKeepSlideWidth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeMovementFormation, DefaultKeepSlideWidth) == 0x000010, "Member 'FEndDataTableBikeMovementFormation::DefaultKeepSlideWidth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeMovementFormation, MinKeepDiffMileage) == 0x000014, "Member 'FEndDataTableBikeMovementFormation::MinKeepDiffMileage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeMovementFormation, SpecialFormationType) == 0x000018, "Member 'FEndDataTableBikeMovementFormation::SpecialFormationType' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChadleySpec
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableChadleySpec final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ClothingStoryFlag_Array;                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ClothingCharaSpec_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DeviceCharaSpec_Array;                             // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChadleySpec) == 0x000008, "Wrong alignment on FEndDataTableChadleySpec");
static_assert(sizeof(FEndDataTableChadleySpec) == 0x000038, "Wrong size on FEndDataTableChadleySpec");
static_assert(offsetof(FEndDataTableChadleySpec, ClothingStoryFlag_Array) == 0x000008, "Member 'FEndDataTableChadleySpec::ClothingStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleySpec, ClothingCharaSpec_Array) == 0x000018, "Member 'FEndDataTableChadleySpec::ClothingCharaSpec_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleySpec, DeviceCharaSpec_Array) == 0x000028, "Member 'FEndDataTableChadleySpec::DeviceCharaSpec_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikePhaseEnemy
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBikePhaseEnemy final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           BikeCharaSpecIDList_Array;                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BikePopupParameterList_Array;                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         StringArgument_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikePhaseEnemy) == 0x000008, "Wrong alignment on FEndDataTableBikePhaseEnemy");
static_assert(sizeof(FEndDataTableBikePhaseEnemy) == 0x000038, "Wrong size on FEndDataTableBikePhaseEnemy");
static_assert(offsetof(FEndDataTableBikePhaseEnemy, BikeCharaSpecIDList_Array) == 0x000008, "Member 'FEndDataTableBikePhaseEnemy::BikeCharaSpecIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemy, BikePopupParameterList_Array) == 0x000018, "Member 'FEndDataTableBikePhaseEnemy::BikePopupParameterList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemy, StringArgument_Array) == 0x000028, "Member 'FEndDataTableBikePhaseEnemy::StringArgument_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikePhaseEnemyParameter
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableBikePhaseEnemyParameter final : public FEndDataTableRowBase
{
public:
	float                                         PopupOffset;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EntryRelativePosition;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OvertookRelativePosition;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FollowingPosition;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RelativeSpeedAtPlayerAccel;                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RelativeSpeedAtPlayerBrake;                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RelativeSpeedAtPlayerDrift;                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableTriggerBox;                                  // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SlalomLastPosition;                                // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StartOffScreen;                                    // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Xoffset;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PopupSide;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikePhaseEnemyParameter) == 0x000008, "Wrong alignment on FEndDataTableBikePhaseEnemyParameter");
static_assert(sizeof(FEndDataTableBikePhaseEnemyParameter) == 0x000030, "Wrong size on FEndDataTableBikePhaseEnemyParameter");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, PopupOffset) == 0x000008, "Member 'FEndDataTableBikePhaseEnemyParameter::PopupOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, EntryRelativePosition) == 0x00000C, "Member 'FEndDataTableBikePhaseEnemyParameter::EntryRelativePosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, OvertookRelativePosition) == 0x000010, "Member 'FEndDataTableBikePhaseEnemyParameter::OvertookRelativePosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, FollowingPosition) == 0x000014, "Member 'FEndDataTableBikePhaseEnemyParameter::FollowingPosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, RelativeSpeedAtPlayerAccel) == 0x000018, "Member 'FEndDataTableBikePhaseEnemyParameter::RelativeSpeedAtPlayerAccel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, RelativeSpeedAtPlayerBrake) == 0x00001C, "Member 'FEndDataTableBikePhaseEnemyParameter::RelativeSpeedAtPlayerBrake' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, RelativeSpeedAtPlayerDrift) == 0x000020, "Member 'FEndDataTableBikePhaseEnemyParameter::RelativeSpeedAtPlayerDrift' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, EnableTriggerBox) == 0x000024, "Member 'FEndDataTableBikePhaseEnemyParameter::EnableTriggerBox' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, SlalomLastPosition) == 0x000025, "Member 'FEndDataTableBikePhaseEnemyParameter::SlalomLastPosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, StartOffScreen) == 0x000026, "Member 'FEndDataTableBikePhaseEnemyParameter::StartOffScreen' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, Xoffset) == 0x000028, "Member 'FEndDataTableBikePhaseEnemyParameter::Xoffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, PopupSide) == 0x00002C, "Member 'FEndDataTableBikePhaseEnemyParameter::PopupSide' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikePhaseParameter
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableBikePhaseParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   BikeSplineID;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BikeSplineIndex;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EndPhaseType;                                      // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EndPhaseInt;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndPhaseFloat;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 EndPhaseString;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikePhaseParameter) == 0x000008, "Wrong alignment on FEndDataTableBikePhaseParameter");
static_assert(sizeof(FEndDataTableBikePhaseParameter) == 0x000030, "Wrong size on FEndDataTableBikePhaseParameter");
static_assert(offsetof(FEndDataTableBikePhaseParameter, BikeSplineID) == 0x000008, "Member 'FEndDataTableBikePhaseParameter::BikeSplineID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseParameter, BikeSplineIndex) == 0x000010, "Member 'FEndDataTableBikePhaseParameter::BikeSplineIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseParameter, EndPhaseType) == 0x000014, "Member 'FEndDataTableBikePhaseParameter::EndPhaseType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseParameter, EndPhaseInt) == 0x000018, "Member 'FEndDataTableBikePhaseParameter::EndPhaseInt' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseParameter, EndPhaseFloat) == 0x00001C, "Member 'FEndDataTableBikePhaseParameter::EndPhaseFloat' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseParameter, EndPhaseString) == 0x000020, "Member 'FEndDataTableBikePhaseParameter::EndPhaseString' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikePlayerCharaSpec
// 0x00B8 (0x00C0 - 0x0008)
struct FEndDataTableBikePlayerCharaSpec final : public FEndDataTableRowBase
{
public:
	class FName                                   VehicleName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RiderName_Array;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         SpeedDefault;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraAimOffsetDepth;                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraAimOffsetHeight;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PlayerFeedbackID_Array;                            // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         DistanceRangeMax;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DistanceRangeMin;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RelativeSpeedAtPlayerAccel;                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RelativeSpeedAtPlayerBrake;                        // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LiveKeepTimeEasy;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LiveKeepTimeNormal;                                // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LiveKeepTimeHard;                                  // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NameTextID;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MachineNameTextID;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DeadTriggerSetID;                                  // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BikeRepierEffectName;                              // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableWeaponHitWall;                               // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableWeaponHitTerrain;                            // 0x0091(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponHitBackgroundEffect;                         // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PlayerTriggerEffect_Array;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AbilityId_Array;                                   // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikePlayerCharaSpec) == 0x000008, "Wrong alignment on FEndDataTableBikePlayerCharaSpec");
static_assert(sizeof(FEndDataTableBikePlayerCharaSpec) == 0x0000C0, "Wrong size on FEndDataTableBikePlayerCharaSpec");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, VehicleName) == 0x000008, "Member 'FEndDataTableBikePlayerCharaSpec::VehicleName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, RiderName_Array) == 0x000010, "Member 'FEndDataTableBikePlayerCharaSpec::RiderName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, SpeedDefault) == 0x000020, "Member 'FEndDataTableBikePlayerCharaSpec::SpeedDefault' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, CameraAimOffsetDepth) == 0x000024, "Member 'FEndDataTableBikePlayerCharaSpec::CameraAimOffsetDepth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, CameraAimOffsetHeight) == 0x000028, "Member 'FEndDataTableBikePlayerCharaSpec::CameraAimOffsetHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PlayerFeedbackID_Array) == 0x000030, "Member 'FEndDataTableBikePlayerCharaSpec::PlayerFeedbackID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, DistanceRangeMax) == 0x000040, "Member 'FEndDataTableBikePlayerCharaSpec::DistanceRangeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, DistanceRangeMin) == 0x000044, "Member 'FEndDataTableBikePlayerCharaSpec::DistanceRangeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, RelativeSpeedAtPlayerAccel) == 0x000048, "Member 'FEndDataTableBikePlayerCharaSpec::RelativeSpeedAtPlayerAccel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, RelativeSpeedAtPlayerBrake) == 0x00004C, "Member 'FEndDataTableBikePlayerCharaSpec::RelativeSpeedAtPlayerBrake' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, LiveKeepTimeEasy) == 0x000050, "Member 'FEndDataTableBikePlayerCharaSpec::LiveKeepTimeEasy' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, LiveKeepTimeNormal) == 0x000054, "Member 'FEndDataTableBikePlayerCharaSpec::LiveKeepTimeNormal' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, LiveKeepTimeHard) == 0x000058, "Member 'FEndDataTableBikePlayerCharaSpec::LiveKeepTimeHard' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, NameTextID) == 0x000060, "Member 'FEndDataTableBikePlayerCharaSpec::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, MachineNameTextID) == 0x000070, "Member 'FEndDataTableBikePlayerCharaSpec::MachineNameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, DeadTriggerSetID) == 0x000080, "Member 'FEndDataTableBikePlayerCharaSpec::DeadTriggerSetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, BikeRepierEffectName) == 0x000088, "Member 'FEndDataTableBikePlayerCharaSpec::BikeRepierEffectName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, EnableWeaponHitWall) == 0x000090, "Member 'FEndDataTableBikePlayerCharaSpec::EnableWeaponHitWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, EnableWeaponHitTerrain) == 0x000091, "Member 'FEndDataTableBikePlayerCharaSpec::EnableWeaponHitTerrain' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, WeaponHitBackgroundEffect) == 0x000094, "Member 'FEndDataTableBikePlayerCharaSpec::WeaponHitBackgroundEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PlayerTriggerEffect_Array) == 0x0000A0, "Member 'FEndDataTableBikePlayerCharaSpec::PlayerTriggerEffect_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, AbilityId_Array) == 0x0000B0, "Member 'FEndDataTableBikePlayerCharaSpec::AbilityId_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceSkillEffect
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableChocoboRaceSkillEffect final : public FEndDataTableRowBase
{
public:
	int32                                         EffectType;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 FloatParameter_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerParameter_Array;                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboRaceSkillEffect) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceSkillEffect");
static_assert(sizeof(FEndDataTableChocoboRaceSkillEffect) == 0x000030, "Wrong size on FEndDataTableChocoboRaceSkillEffect");
static_assert(offsetof(FEndDataTableChocoboRaceSkillEffect, EffectType) == 0x000008, "Member 'FEndDataTableChocoboRaceSkillEffect::EffectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceSkillEffect, FloatParameter_Array) == 0x000010, "Member 'FEndDataTableChocoboRaceSkillEffect::FloatParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceSkillEffect, IntegerParameter_Array) == 0x000020, "Member 'FEndDataTableChocoboRaceSkillEffect::IntegerParameter_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikePlayerFeedback
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBikePlayerFeedback final : public FEndDataTableRowBase
{
public:
	class FName                                   HitCameraShakeDataID;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HitForceFeedbackFileName;                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikePlayerFeedback) == 0x000008, "Wrong alignment on FEndDataTableBikePlayerFeedback");
static_assert(sizeof(FEndDataTableBikePlayerFeedback) == 0x000018, "Wrong size on FEndDataTableBikePlayerFeedback");
static_assert(offsetof(FEndDataTableBikePlayerFeedback, HitCameraShakeDataID) == 0x000008, "Member 'FEndDataTableBikePlayerFeedback::HitCameraShakeDataID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerFeedback, HitForceFeedbackFileName) == 0x000010, "Member 'FEndDataTableBikePlayerFeedback::HitForceFeedbackFileName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeResultTimeScore
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableBikeResultTimeScore final : public FEndDataTableRowBase
{
public:
	TArray<float>                                 Time_Array;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Score_Array;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 TotalScore_Array;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 RewardRankIndex_Array;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         SpecialTotalScore;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SpecialRewardTriggerName;                          // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeResultTimeScore) == 0x000008, "Wrong alignment on FEndDataTableBikeResultTimeScore");
static_assert(sizeof(FEndDataTableBikeResultTimeScore) == 0x000058, "Wrong size on FEndDataTableBikeResultTimeScore");
static_assert(offsetof(FEndDataTableBikeResultTimeScore, Time_Array) == 0x000008, "Member 'FEndDataTableBikeResultTimeScore::Time_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeResultTimeScore, Score_Array) == 0x000018, "Member 'FEndDataTableBikeResultTimeScore::Score_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeResultTimeScore, TotalScore_Array) == 0x000028, "Member 'FEndDataTableBikeResultTimeScore::TotalScore_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeResultTimeScore, RewardRankIndex_Array) == 0x000038, "Member 'FEndDataTableBikeResultTimeScore::RewardRankIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeResultTimeScore, SpecialTotalScore) == 0x000048, "Member 'FEndDataTableBikeResultTimeScore::SpecialTotalScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeResultTimeScore, SpecialRewardTriggerName) == 0x00004C, "Member 'FEndDataTableBikeResultTimeScore::SpecialRewardTriggerName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeSequence
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableBikeSequence final : public FEndDataTableRowBase
{
public:
	class FName                                   PlayerBikeCharaSpec;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AllyBikeCharaSpec;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisablePlayerSpawn;                                // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FirstSplineId;                                     // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartPosition;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GoalPosition;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BeginWithFade;                                     // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SequenceActionGroup;                               // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SequenceParameter;                                 // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MiniGameAssetPackerID;                             // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AssetPackerEnemyStatusUIIndex;                     // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AssetPackerBossStatusUIIndex;                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BikeResultTimeScoreID;                             // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TriggerOnGameStart;                                // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BikeItemGroupName;                                 // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BikeEnergyGaugeSetting;                            // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SaveSlotIndex;                                     // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeSequence) == 0x000008, "Wrong alignment on FEndDataTableBikeSequence");
static_assert(sizeof(FEndDataTableBikeSequence) == 0x000078, "Wrong size on FEndDataTableBikeSequence");
static_assert(offsetof(FEndDataTableBikeSequence, PlayerBikeCharaSpec) == 0x000008, "Member 'FEndDataTableBikeSequence::PlayerBikeCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, AllyBikeCharaSpec) == 0x000010, "Member 'FEndDataTableBikeSequence::AllyBikeCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, DisablePlayerSpawn) == 0x000018, "Member 'FEndDataTableBikeSequence::DisablePlayerSpawn' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, FirstSplineId) == 0x00001C, "Member 'FEndDataTableBikeSequence::FirstSplineId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, StartPosition) == 0x000024, "Member 'FEndDataTableBikeSequence::StartPosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, GoalPosition) == 0x000028, "Member 'FEndDataTableBikeSequence::GoalPosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, BeginWithFade) == 0x00002C, "Member 'FEndDataTableBikeSequence::BeginWithFade' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, SequenceActionGroup) == 0x000030, "Member 'FEndDataTableBikeSequence::SequenceActionGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, SequenceParameter) == 0x000038, "Member 'FEndDataTableBikeSequence::SequenceParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, MiniGameAssetPackerID) == 0x000040, "Member 'FEndDataTableBikeSequence::MiniGameAssetPackerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, AssetPackerEnemyStatusUIIndex) == 0x000048, "Member 'FEndDataTableBikeSequence::AssetPackerEnemyStatusUIIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, AssetPackerBossStatusUIIndex) == 0x00004C, "Member 'FEndDataTableBikeSequence::AssetPackerBossStatusUIIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, BikeResultTimeScoreID) == 0x000050, "Member 'FEndDataTableBikeSequence::BikeResultTimeScoreID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, TriggerOnGameStart) == 0x000058, "Member 'FEndDataTableBikeSequence::TriggerOnGameStart' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, BikeItemGroupName) == 0x000060, "Member 'FEndDataTableBikeSequence::BikeItemGroupName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, BikeEnergyGaugeSetting) == 0x000068, "Member 'FEndDataTableBikeSequence::BikeEnergyGaugeSetting' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, SaveSlotIndex) == 0x000070, "Member 'FEndDataTableBikeSequence::SaveSlotIndex' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeSequenceAction
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableBikeSequenceAction final : public FEndDataTableRowBase
{
public:
	uint8                                         RetryPoint;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableGauge;                                      // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Type;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SequenceActionGroup;                               // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   JumpParamID;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TalkConditionID;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FinishSplineIndex;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FinishLapNumber;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinishLapInputKey;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ParamNameList_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ParamIntList_Array;                                // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ParamFloatList_Array;                              // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeSequenceAction) == 0x000008, "Wrong alignment on FEndDataTableBikeSequenceAction");
static_assert(sizeof(FEndDataTableBikeSequenceAction) == 0x000068, "Wrong size on FEndDataTableBikeSequenceAction");
static_assert(offsetof(FEndDataTableBikeSequenceAction, RetryPoint) == 0x000008, "Member 'FEndDataTableBikeSequenceAction::RetryPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, DisableGauge) == 0x000009, "Member 'FEndDataTableBikeSequenceAction::DisableGauge' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, Type) == 0x00000C, "Member 'FEndDataTableBikeSequenceAction::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, SequenceActionGroup) == 0x000010, "Member 'FEndDataTableBikeSequenceAction::SequenceActionGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, JumpParamID) == 0x000018, "Member 'FEndDataTableBikeSequenceAction::JumpParamID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, TalkConditionID) == 0x000020, "Member 'FEndDataTableBikeSequenceAction::TalkConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, FinishSplineIndex) == 0x000028, "Member 'FEndDataTableBikeSequenceAction::FinishSplineIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, FinishLapNumber) == 0x00002C, "Member 'FEndDataTableBikeSequenceAction::FinishLapNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, FinishLapInputKey) == 0x000030, "Member 'FEndDataTableBikeSequenceAction::FinishLapInputKey' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, ParamNameList_Array) == 0x000038, "Member 'FEndDataTableBikeSequenceAction::ParamNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, ParamIntList_Array) == 0x000048, "Member 'FEndDataTableBikeSequenceAction::ParamIntList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, ParamFloatList_Array) == 0x000058, "Member 'FEndDataTableBikeSequenceAction::ParamFloatList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCharaExchangeTable
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCharaExchangeTable final : public FEndDataTableRowBase
{
public:
	class FString                                 MotionFolder;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCharaExchangeTable) == 0x000008, "Wrong alignment on FEndDataTableCharaExchangeTable");
static_assert(sizeof(FEndDataTableCharaExchangeTable) == 0x000018, "Wrong size on FEndDataTableCharaExchangeTable");
static_assert(offsetof(FEndDataTableCharaExchangeTable, MotionFolder) == 0x000008, "Member 'FEndDataTableCharaExchangeTable::MotionFolder' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeSequenceJump
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBikeSequenceJump final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 WaveActonParams_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         NowDamageRate;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Score;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TotalHpDamage;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Difficulty;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeSequenceJump) == 0x000008, "Wrong alignment on FEndDataTableBikeSequenceJump");
static_assert(sizeof(FEndDataTableBikeSequenceJump) == 0x000028, "Wrong size on FEndDataTableBikeSequenceJump");
static_assert(offsetof(FEndDataTableBikeSequenceJump, WaveActonParams_Array) == 0x000008, "Member 'FEndDataTableBikeSequenceJump::WaveActonParams_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceJump, NowDamageRate) == 0x000018, "Member 'FEndDataTableBikeSequenceJump::NowDamageRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceJump, Score) == 0x00001C, "Member 'FEndDataTableBikeSequenceJump::Score' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceJump, TotalHpDamage) == 0x000020, "Member 'FEndDataTableBikeSequenceJump::TotalHpDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceJump, Difficulty) == 0x000024, "Member 'FEndDataTableBikeSequenceJump::Difficulty' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeSequenceParameter
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableBikeSequenceParameter final : public FEndDataTableRowBase
{
public:
	int32                                         MaxEnemyNum;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Enemy_MoveDistanceRange_Max;                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Enemy_MoveDistanceRange_Min;                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Enemy_FollowingDistanceRange_Max;                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Enemy_FollowingDistanceRange_Min;                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Enemy_OvertakeCondition_Distance;                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Enemy_ChangeTargetToPlayer_Distance;               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Enemy_MaxAbilityRepeatNum;                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Enemy_LockOnMarkerCreateType;                      // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Enemy_SlalomRollAngle;                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Enemy_SlalomRollSpeed;                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Enemy_SlalomNum_Max;                               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Enemy_SlalomNum_Min;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DefaultRoadWidth;                                  // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RoadWidthToWall;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WallHeight;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WallSlopeHeight;                                   // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeSequenceParameter) == 0x000008, "Wrong alignment on FEndDataTableBikeSequenceParameter");
static_assert(sizeof(FEndDataTableBikeSequenceParameter) == 0x000050, "Wrong size on FEndDataTableBikeSequenceParameter");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, MaxEnemyNum) == 0x000008, "Member 'FEndDataTableBikeSequenceParameter::MaxEnemyNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_MoveDistanceRange_Max) == 0x00000C, "Member 'FEndDataTableBikeSequenceParameter::Enemy_MoveDistanceRange_Max' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_MoveDistanceRange_Min) == 0x000010, "Member 'FEndDataTableBikeSequenceParameter::Enemy_MoveDistanceRange_Min' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_FollowingDistanceRange_Max) == 0x000014, "Member 'FEndDataTableBikeSequenceParameter::Enemy_FollowingDistanceRange_Max' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_FollowingDistanceRange_Min) == 0x000018, "Member 'FEndDataTableBikeSequenceParameter::Enemy_FollowingDistanceRange_Min' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_OvertakeCondition_Distance) == 0x00001C, "Member 'FEndDataTableBikeSequenceParameter::Enemy_OvertakeCondition_Distance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_ChangeTargetToPlayer_Distance) == 0x000020, "Member 'FEndDataTableBikeSequenceParameter::Enemy_ChangeTargetToPlayer_Distance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_MaxAbilityRepeatNum) == 0x000024, "Member 'FEndDataTableBikeSequenceParameter::Enemy_MaxAbilityRepeatNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_LockOnMarkerCreateType) == 0x000028, "Member 'FEndDataTableBikeSequenceParameter::Enemy_LockOnMarkerCreateType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_SlalomRollAngle) == 0x00002C, "Member 'FEndDataTableBikeSequenceParameter::Enemy_SlalomRollAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_SlalomRollSpeed) == 0x000030, "Member 'FEndDataTableBikeSequenceParameter::Enemy_SlalomRollSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_SlalomNum_Max) == 0x000034, "Member 'FEndDataTableBikeSequenceParameter::Enemy_SlalomNum_Max' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, Enemy_SlalomNum_Min) == 0x000038, "Member 'FEndDataTableBikeSequenceParameter::Enemy_SlalomNum_Min' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, DefaultRoadWidth) == 0x00003C, "Member 'FEndDataTableBikeSequenceParameter::DefaultRoadWidth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, RoadWidthToWall) == 0x000040, "Member 'FEndDataTableBikeSequenceParameter::RoadWidthToWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, WallHeight) == 0x000044, "Member 'FEndDataTableBikeSequenceParameter::WallHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceParameter, WallSlopeHeight) == 0x000048, "Member 'FEndDataTableBikeSequenceParameter::WallSlopeHeight' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeSplineMetaData
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBikeSplineMetaData final : public FEndDataTableRowBase
{
public:
	uint8                                         ExistMedianStrip;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MedianStripWidth_Array;                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         DisableCutScene;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ExistAcccelerationLane;                            // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccelerationLaneAddSpeed;                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                 AccelerationWidth_Array;                           // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeSplineMetaData) == 0x000008, "Wrong alignment on FEndDataTableBikeSplineMetaData");
static_assert(sizeof(FEndDataTableBikeSplineMetaData) == 0x000038, "Wrong size on FEndDataTableBikeSplineMetaData");
static_assert(offsetof(FEndDataTableBikeSplineMetaData, ExistMedianStrip) == 0x000008, "Member 'FEndDataTableBikeSplineMetaData::ExistMedianStrip' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineMetaData, MedianStripWidth_Array) == 0x000010, "Member 'FEndDataTableBikeSplineMetaData::MedianStripWidth_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineMetaData, DisableCutScene) == 0x000020, "Member 'FEndDataTableBikeSplineMetaData::DisableCutScene' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineMetaData, ExistAcccelerationLane) == 0x000021, "Member 'FEndDataTableBikeSplineMetaData::ExistAcccelerationLane' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineMetaData, AccelerationLaneAddSpeed) == 0x000024, "Member 'FEndDataTableBikeSplineMetaData::AccelerationLaneAddSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineMetaData, AccelerationWidth_Array) == 0x000028, "Member 'FEndDataTableBikeSplineMetaData::AccelerationWidth_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeSplineRouteDefine
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableBikeSplineRouteDefine final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           SplineName_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 StartInputKey_Array;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 GoalLapNumber_Array;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 GoalInputKey_Array;                                // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeSplineRouteDefine) == 0x000008, "Wrong alignment on FEndDataTableBikeSplineRouteDefine");
static_assert(sizeof(FEndDataTableBikeSplineRouteDefine) == 0x000048, "Wrong size on FEndDataTableBikeSplineRouteDefine");
static_assert(offsetof(FEndDataTableBikeSplineRouteDefine, SplineName_Array) == 0x000008, "Member 'FEndDataTableBikeSplineRouteDefine::SplineName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineRouteDefine, StartInputKey_Array) == 0x000018, "Member 'FEndDataTableBikeSplineRouteDefine::StartInputKey_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineRouteDefine, GoalLapNumber_Array) == 0x000028, "Member 'FEndDataTableBikeSplineRouteDefine::GoalLapNumber_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineRouteDefine, GoalInputKey_Array) == 0x000038, "Member 'FEndDataTableBikeSplineRouteDefine::GoalInputKey_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableColosseumPositionData
// 0x00A0 (0x00A8 - 0x0008)
struct FEndDataTableColosseumPositionData final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           PlayerPosTarget_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PlayerPosOffset_X_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PlayerPosOffset_Y_Array;                           // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PlayerPosOffset_Z_Array;                           // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PlayerRot_Yaw_Array;                               // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PopTargetPoint_Array;                              // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PopOffset_X_Array;                                 // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PopOffset_Y_Array;                                 // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PopOffset_Z_Array;                                 // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PopRot_Yaw_Array;                                  // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableColosseumPositionData) == 0x000008, "Wrong alignment on FEndDataTableColosseumPositionData");
static_assert(sizeof(FEndDataTableColosseumPositionData) == 0x0000A8, "Wrong size on FEndDataTableColosseumPositionData");
static_assert(offsetof(FEndDataTableColosseumPositionData, PlayerPosTarget_Array) == 0x000008, "Member 'FEndDataTableColosseumPositionData::PlayerPosTarget_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PlayerPosOffset_X_Array) == 0x000018, "Member 'FEndDataTableColosseumPositionData::PlayerPosOffset_X_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PlayerPosOffset_Y_Array) == 0x000028, "Member 'FEndDataTableColosseumPositionData::PlayerPosOffset_Y_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PlayerPosOffset_Z_Array) == 0x000038, "Member 'FEndDataTableColosseumPositionData::PlayerPosOffset_Z_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PlayerRot_Yaw_Array) == 0x000048, "Member 'FEndDataTableColosseumPositionData::PlayerRot_Yaw_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PopTargetPoint_Array) == 0x000058, "Member 'FEndDataTableColosseumPositionData::PopTargetPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PopOffset_X_Array) == 0x000068, "Member 'FEndDataTableColosseumPositionData::PopOffset_X_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PopOffset_Y_Array) == 0x000078, "Member 'FEndDataTableColosseumPositionData::PopOffset_Y_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PopOffset_Z_Array) == 0x000088, "Member 'FEndDataTableColosseumPositionData::PopOffset_Z_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PopRot_Yaw_Array) == 0x000098, "Member 'FEndDataTableColosseumPositionData::PopRot_Yaw_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeTalkCondition
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBikeTalkCondition final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           TriggerSetID_Array;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Priority_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeTalkCondition) == 0x000008, "Wrong alignment on FEndDataTableBikeTalkCondition");
static_assert(sizeof(FEndDataTableBikeTalkCondition) == 0x000028, "Wrong size on FEndDataTableBikeTalkCondition");
static_assert(offsetof(FEndDataTableBikeTalkCondition, TriggerSetID_Array) == 0x000008, "Member 'FEndDataTableBikeTalkCondition::TriggerSetID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTalkCondition, Priority_Array) == 0x000018, "Member 'FEndDataTableBikeTalkCondition::Priority_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeTalkTriggerSet
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBikeTalkTriggerSet final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           TriggerID_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PlanEvID_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 TriggerOdds_Array;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeTalkTriggerSet) == 0x000008, "Wrong alignment on FEndDataTableBikeTalkTriggerSet");
static_assert(sizeof(FEndDataTableBikeTalkTriggerSet) == 0x000038, "Wrong size on FEndDataTableBikeTalkTriggerSet");
static_assert(offsetof(FEndDataTableBikeTalkTriggerSet, TriggerID_Array) == 0x000008, "Member 'FEndDataTableBikeTalkTriggerSet::TriggerID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTalkTriggerSet, PlanEvID_Array) == 0x000018, "Member 'FEndDataTableBikeTalkTriggerSet::PlanEvID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTalkTriggerSet, TriggerOdds_Array) == 0x000028, "Member 'FEndDataTableBikeTalkTriggerSet::TriggerOdds_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBikeTriggerEffectSetting
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableBikeTriggerEffectSetting final : public FEndDataTableRowBase
{
public:
	TArray<float>                                 SpeedRange_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           TriggerID_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 LowerDelayTime_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 UpperDelayTime_Array;                              // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBikeTriggerEffectSetting) == 0x000008, "Wrong alignment on FEndDataTableBikeTriggerEffectSetting");
static_assert(sizeof(FEndDataTableBikeTriggerEffectSetting) == 0x000048, "Wrong size on FEndDataTableBikeTriggerEffectSetting");
static_assert(offsetof(FEndDataTableBikeTriggerEffectSetting, SpeedRange_Array) == 0x000008, "Member 'FEndDataTableBikeTriggerEffectSetting::SpeedRange_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTriggerEffectSetting, TriggerID_Array) == 0x000018, "Member 'FEndDataTableBikeTriggerEffectSetting::TriggerID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTriggerEffectSetting, LowerDelayTime_Array) == 0x000028, "Member 'FEndDataTableBikeTriggerEffectSetting::LowerDelayTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTriggerEffectSetting, UpperDelayTime_Array) == 0x000038, "Member 'FEndDataTableBikeTriggerEffectSetting::UpperDelayTime_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBoxing3DBattlerEnemy
// 0x03F8 (0x0400 - 0x0008)
struct FEndDataTableBoxing3DBattlerEnemy final : public FEndDataTableRowBase
{
public:
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CharaSpecName;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StageCenterEndTargetPoint;                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StateCenterOffset;                                 // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Difficulty;                                        // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FirstRewardID;                                     // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ConsecutiveRewardID;                               // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EnglishPlayerName;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NickName;                                          // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ProfilePic;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ThumbnailIngamePicIndex;                           // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThumbnailPic;                                      // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 WalkthroughHint;                                   // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DisplayStoryFlag;                                  // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenStoryFlag;                                     // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ClearStoryFlag;                                    // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PerfectClearStoryFlag;                             // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlayerWinStateTrigger;                             // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlayerWinReturnToMenuStateTrigger;                 // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlayerLoseStateTrigger;                            // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MiniGameFinishedWinTrigger;                        // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MiniGameFinishedLoseTrigger;                       // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxLimitGauge;                                     // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxATBGauge;                                       // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyAttackStateTrigger;                           // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyDamageStateTrigger;                           // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyJustTimeStateTrigger;                         // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyLimitBreakStateTrigger;                       // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyKnockOutStateTrigger;                         // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ComboStartedStateTrigger;                          // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlayerAnimationFileOnEnemyLimitBreak;              // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PhaseChangeCondition_Array;                        // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PhaseChangeConditionCount_Array;                   // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PhaseChangeStateTrigger_Array;                     // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AttackRatio_Array;                                 // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessRatio_Array;                            // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 IdleRatio_Array;                                   // 0x0170(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessLeftTime_Array;                         // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessLeftTimeVariation_Array;                // 0x0190(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessRightTime_Array;                        // 0x01A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessRightTimeVariation_Array;               // 0x01B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessStateMinTime_Array;                     // 0x01C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessStateMinTimeVariation_Array;            // 0x01D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessStateCooldown_Array;                    // 0x01E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessStateCooldownAfterFail_Array;           // 0x01F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ForceIdleAfterDefenselessStateCooldown_Array;      // 0x0200(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ForceIdleAfterAttackCooldown_Array;                // 0x0210(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ComboCooldown_Array;                               // 0x0220(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessRatioIncrease_Array;                    // 0x0230(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DefenselessRatioIncreaseMax_Array;                 // 0x0240(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 L3RightAttackRatio_Array;                          // 0x0250(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 L3UpAttackRatio_Array;                             // 0x0260(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 L3DownAttackRatio_Array;                           // 0x0270(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 R3LeftAttackRatio_Array;                           // 0x0280(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 R3UpAttackRatio_Array;                             // 0x0290(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 R3DownAttackRatio_Array;                           // 0x02A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ForceRightLeftRotationBehaviour_Array;             // 0x02B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ForceAttackAndDefenselessRotationBehaviour_Array;  // 0x02C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PlayerLimitIncreaseOnPerfectHit_Array;             // 0x02D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PlayerLimitIncreaseOnNormalHit_Array;              // 0x02E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PlayerLimitIncreaseOnMissHit_Array;                // 0x02F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Phase00Combo_Array;                                // 0x0300(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Phase00ReleaseComboCondition_Array;                // 0x0310(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Phase00ReleaseComboConditionCount_Array;           // 0x0320(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Phase01Combo_Array;                                // 0x0330(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Phase01ReleaseComboCondition_Array;                // 0x0340(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Phase01ReleaseComboConditionCount_Array;           // 0x0350(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Phase02Combo_Array;                                // 0x0360(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Phase02ReleaseComboCondition_Array;                // 0x0370(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Phase02ReleaseComboConditionCount_Array;           // 0x0380(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Phase03Combo_Array;                                // 0x0390(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Phase03ReleaseComboCondition_Array;                // 0x03A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Phase03ReleaseComboConditionCount_Array;           // 0x03B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackL3RightATBUsage;                // 0x03C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackL3UpATBUsage;                   // 0x03C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackL3DownATBUsage;                 // 0x03C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackR3LeftATBUsage;                 // 0x03CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackR3UpATBUsage;                   // 0x03D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackR3DownATBUsage;                 // 0x03D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackL3RightLimitIncreaseCoefficient; // 0x03D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackL3UpLimitIncreaseCoefficient;   // 0x03DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackL3DownLimitIncreaseCoefficient; // 0x03E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackR3LeftLimitIncreaseCoefficient; // 0x03E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackR3UpLimitIncreaseCoefficient;   // 0x03E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnemyAttackR3DownLimitIncreaseCoefficient; // 0x03EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideLimitIncreaseOnPerfectHit;                 // 0x03F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideLimitIncreaseOnNormalGuardHit;             // 0x03F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideLimitIncreaseOnMissHit;                    // 0x03F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideATBIncreaseOnIdle;                         // 0x03FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBoxing3DBattlerEnemy) == 0x000008, "Wrong alignment on FEndDataTableBoxing3DBattlerEnemy");
static_assert(sizeof(FEndDataTableBoxing3DBattlerEnemy) == 0x000400, "Wrong size on FEndDataTableBoxing3DBattlerEnemy");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PlayerName) == 0x000008, "Member 'FEndDataTableBoxing3DBattlerEnemy::PlayerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, CharaSpecName) == 0x000018, "Member 'FEndDataTableBoxing3DBattlerEnemy::CharaSpecName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, StageCenterEndTargetPoint) == 0x000020, "Member 'FEndDataTableBoxing3DBattlerEnemy::StageCenterEndTargetPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, StateCenterOffset) == 0x000028, "Member 'FEndDataTableBoxing3DBattlerEnemy::StateCenterOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Difficulty) == 0x000029, "Member 'FEndDataTableBoxing3DBattlerEnemy::Difficulty' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, FirstRewardID) == 0x00002C, "Member 'FEndDataTableBoxing3DBattlerEnemy::FirstRewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ConsecutiveRewardID) == 0x000034, "Member 'FEndDataTableBoxing3DBattlerEnemy::ConsecutiveRewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, EnglishPlayerName) == 0x000040, "Member 'FEndDataTableBoxing3DBattlerEnemy::EnglishPlayerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, NickName) == 0x000050, "Member 'FEndDataTableBoxing3DBattlerEnemy::NickName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ProfilePic) == 0x000060, "Member 'FEndDataTableBoxing3DBattlerEnemy::ProfilePic' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ThumbnailIngamePicIndex) == 0x000070, "Member 'FEndDataTableBoxing3DBattlerEnemy::ThumbnailIngamePicIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ThumbnailPic) == 0x000078, "Member 'FEndDataTableBoxing3DBattlerEnemy::ThumbnailPic' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, WalkthroughHint) == 0x000088, "Member 'FEndDataTableBoxing3DBattlerEnemy::WalkthroughHint' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DisplayStoryFlag) == 0x000098, "Member 'FEndDataTableBoxing3DBattlerEnemy::DisplayStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OpenStoryFlag) == 0x0000A0, "Member 'FEndDataTableBoxing3DBattlerEnemy::OpenStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ClearStoryFlag) == 0x0000A8, "Member 'FEndDataTableBoxing3DBattlerEnemy::ClearStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PerfectClearStoryFlag) == 0x0000B0, "Member 'FEndDataTableBoxing3DBattlerEnemy::PerfectClearStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PlayerWinStateTrigger) == 0x0000B8, "Member 'FEndDataTableBoxing3DBattlerEnemy::PlayerWinStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PlayerWinReturnToMenuStateTrigger) == 0x0000C0, "Member 'FEndDataTableBoxing3DBattlerEnemy::PlayerWinReturnToMenuStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PlayerLoseStateTrigger) == 0x0000C8, "Member 'FEndDataTableBoxing3DBattlerEnemy::PlayerLoseStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, MiniGameFinishedWinTrigger) == 0x0000D0, "Member 'FEndDataTableBoxing3DBattlerEnemy::MiniGameFinishedWinTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, MiniGameFinishedLoseTrigger) == 0x0000D8, "Member 'FEndDataTableBoxing3DBattlerEnemy::MiniGameFinishedLoseTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, MaxLimitGauge) == 0x0000E0, "Member 'FEndDataTableBoxing3DBattlerEnemy::MaxLimitGauge' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, MaxATBGauge) == 0x0000E4, "Member 'FEndDataTableBoxing3DBattlerEnemy::MaxATBGauge' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, EnemyAttackStateTrigger) == 0x0000E8, "Member 'FEndDataTableBoxing3DBattlerEnemy::EnemyAttackStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, EnemyDamageStateTrigger) == 0x0000F0, "Member 'FEndDataTableBoxing3DBattlerEnemy::EnemyDamageStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, EnemyJustTimeStateTrigger) == 0x0000F8, "Member 'FEndDataTableBoxing3DBattlerEnemy::EnemyJustTimeStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, EnemyLimitBreakStateTrigger) == 0x000100, "Member 'FEndDataTableBoxing3DBattlerEnemy::EnemyLimitBreakStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, EnemyKnockOutStateTrigger) == 0x000108, "Member 'FEndDataTableBoxing3DBattlerEnemy::EnemyKnockOutStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ComboStartedStateTrigger) == 0x000110, "Member 'FEndDataTableBoxing3DBattlerEnemy::ComboStartedStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PlayerAnimationFileOnEnemyLimitBreak) == 0x000118, "Member 'FEndDataTableBoxing3DBattlerEnemy::PlayerAnimationFileOnEnemyLimitBreak' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PhaseChangeCondition_Array) == 0x000120, "Member 'FEndDataTableBoxing3DBattlerEnemy::PhaseChangeCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PhaseChangeConditionCount_Array) == 0x000130, "Member 'FEndDataTableBoxing3DBattlerEnemy::PhaseChangeConditionCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PhaseChangeStateTrigger_Array) == 0x000140, "Member 'FEndDataTableBoxing3DBattlerEnemy::PhaseChangeStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, AttackRatio_Array) == 0x000150, "Member 'FEndDataTableBoxing3DBattlerEnemy::AttackRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessRatio_Array) == 0x000160, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, IdleRatio_Array) == 0x000170, "Member 'FEndDataTableBoxing3DBattlerEnemy::IdleRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessLeftTime_Array) == 0x000180, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessLeftTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessLeftTimeVariation_Array) == 0x000190, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessLeftTimeVariation_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessRightTime_Array) == 0x0001A0, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessRightTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessRightTimeVariation_Array) == 0x0001B0, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessRightTimeVariation_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessStateMinTime_Array) == 0x0001C0, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessStateMinTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessStateMinTimeVariation_Array) == 0x0001D0, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessStateMinTimeVariation_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessStateCooldown_Array) == 0x0001E0, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessStateCooldown_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessStateCooldownAfterFail_Array) == 0x0001F0, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessStateCooldownAfterFail_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ForceIdleAfterDefenselessStateCooldown_Array) == 0x000200, "Member 'FEndDataTableBoxing3DBattlerEnemy::ForceIdleAfterDefenselessStateCooldown_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ForceIdleAfterAttackCooldown_Array) == 0x000210, "Member 'FEndDataTableBoxing3DBattlerEnemy::ForceIdleAfterAttackCooldown_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ComboCooldown_Array) == 0x000220, "Member 'FEndDataTableBoxing3DBattlerEnemy::ComboCooldown_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessRatioIncrease_Array) == 0x000230, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessRatioIncrease_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, DefenselessRatioIncreaseMax_Array) == 0x000240, "Member 'FEndDataTableBoxing3DBattlerEnemy::DefenselessRatioIncreaseMax_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, L3RightAttackRatio_Array) == 0x000250, "Member 'FEndDataTableBoxing3DBattlerEnemy::L3RightAttackRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, L3UpAttackRatio_Array) == 0x000260, "Member 'FEndDataTableBoxing3DBattlerEnemy::L3UpAttackRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, L3DownAttackRatio_Array) == 0x000270, "Member 'FEndDataTableBoxing3DBattlerEnemy::L3DownAttackRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, R3LeftAttackRatio_Array) == 0x000280, "Member 'FEndDataTableBoxing3DBattlerEnemy::R3LeftAttackRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, R3UpAttackRatio_Array) == 0x000290, "Member 'FEndDataTableBoxing3DBattlerEnemy::R3UpAttackRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, R3DownAttackRatio_Array) == 0x0002A0, "Member 'FEndDataTableBoxing3DBattlerEnemy::R3DownAttackRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ForceRightLeftRotationBehaviour_Array) == 0x0002B0, "Member 'FEndDataTableBoxing3DBattlerEnemy::ForceRightLeftRotationBehaviour_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, ForceAttackAndDefenselessRotationBehaviour_Array) == 0x0002C0, "Member 'FEndDataTableBoxing3DBattlerEnemy::ForceAttackAndDefenselessRotationBehaviour_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PlayerLimitIncreaseOnPerfectHit_Array) == 0x0002D0, "Member 'FEndDataTableBoxing3DBattlerEnemy::PlayerLimitIncreaseOnPerfectHit_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PlayerLimitIncreaseOnNormalHit_Array) == 0x0002E0, "Member 'FEndDataTableBoxing3DBattlerEnemy::PlayerLimitIncreaseOnNormalHit_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, PlayerLimitIncreaseOnMissHit_Array) == 0x0002F0, "Member 'FEndDataTableBoxing3DBattlerEnemy::PlayerLimitIncreaseOnMissHit_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase00Combo_Array) == 0x000300, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase00Combo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase00ReleaseComboCondition_Array) == 0x000310, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase00ReleaseComboCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase00ReleaseComboConditionCount_Array) == 0x000320, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase00ReleaseComboConditionCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase01Combo_Array) == 0x000330, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase01Combo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase01ReleaseComboCondition_Array) == 0x000340, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase01ReleaseComboCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase01ReleaseComboConditionCount_Array) == 0x000350, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase01ReleaseComboConditionCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase02Combo_Array) == 0x000360, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase02Combo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase02ReleaseComboCondition_Array) == 0x000370, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase02ReleaseComboCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase02ReleaseComboConditionCount_Array) == 0x000380, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase02ReleaseComboConditionCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase03Combo_Array) == 0x000390, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase03Combo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase03ReleaseComboCondition_Array) == 0x0003A0, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase03ReleaseComboCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, Phase03ReleaseComboConditionCount_Array) == 0x0003B0, "Member 'FEndDataTableBoxing3DBattlerEnemy::Phase03ReleaseComboConditionCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackL3RightATBUsage) == 0x0003C0, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackL3RightATBUsage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackL3UpATBUsage) == 0x0003C4, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackL3UpATBUsage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackL3DownATBUsage) == 0x0003C8, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackL3DownATBUsage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackR3LeftATBUsage) == 0x0003CC, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackR3LeftATBUsage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackR3UpATBUsage) == 0x0003D0, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackR3UpATBUsage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackR3DownATBUsage) == 0x0003D4, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackR3DownATBUsage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackL3RightLimitIncreaseCoefficient) == 0x0003D8, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackL3RightLimitIncreaseCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackL3UpLimitIncreaseCoefficient) == 0x0003DC, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackL3UpLimitIncreaseCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackL3DownLimitIncreaseCoefficient) == 0x0003E0, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackL3DownLimitIncreaseCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackR3LeftLimitIncreaseCoefficient) == 0x0003E4, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackR3LeftLimitIncreaseCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackR3UpLimitIncreaseCoefficient) == 0x0003E8, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackR3UpLimitIncreaseCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideEnemyAttackR3DownLimitIncreaseCoefficient) == 0x0003EC, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideEnemyAttackR3DownLimitIncreaseCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideLimitIncreaseOnPerfectHit) == 0x0003F0, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideLimitIncreaseOnPerfectHit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideLimitIncreaseOnNormalGuardHit) == 0x0003F4, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideLimitIncreaseOnNormalGuardHit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideLimitIncreaseOnMissHit) == 0x0003F8, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideLimitIncreaseOnMissHit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemy, OverrideATBIncreaseOnIdle) == 0x0003FC, "Member 'FEndDataTableBoxing3DBattlerEnemy::OverrideATBIncreaseOnIdle' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEffect2SoundTable
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableEffect2SoundTable final : public FEndDataTableRowBase
{
public:
	int32                                         ResourceType;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SoundAssetName;                                    // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BeginSoundName;                                    // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FinishSoundName;                                   // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EventSoundName;                                    // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AttenuationAssetName;                              // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ResourceLevelName_Array;                           // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         FadeOutTime;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableEffect2SoundTable) == 0x000008, "Wrong alignment on FEndDataTableEffect2SoundTable");
static_assert(sizeof(FEndDataTableEffect2SoundTable) == 0x000050, "Wrong size on FEndDataTableEffect2SoundTable");
static_assert(offsetof(FEndDataTableEffect2SoundTable, ResourceType) == 0x000008, "Member 'FEndDataTableEffect2SoundTable::ResourceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, SoundAssetName) == 0x00000C, "Member 'FEndDataTableEffect2SoundTable::SoundAssetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, BeginSoundName) == 0x000014, "Member 'FEndDataTableEffect2SoundTable::BeginSoundName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, FinishSoundName) == 0x00001C, "Member 'FEndDataTableEffect2SoundTable::FinishSoundName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, EventSoundName) == 0x000024, "Member 'FEndDataTableEffect2SoundTable::EventSoundName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, AttenuationAssetName) == 0x00002C, "Member 'FEndDataTableEffect2SoundTable::AttenuationAssetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, ResourceLevelName_Array) == 0x000038, "Member 'FEndDataTableEffect2SoundTable::ResourceLevelName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, FadeOutTime) == 0x000048, "Member 'FEndDataTableEffect2SoundTable::FadeOutTime' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBoxing3DBattlerEnemyCombo
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBoxing3DBattlerEnemyCombo final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 ComboPunch_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBoxing3DBattlerEnemyCombo) == 0x000008, "Wrong alignment on FEndDataTableBoxing3DBattlerEnemyCombo");
static_assert(sizeof(FEndDataTableBoxing3DBattlerEnemyCombo) == 0x000018, "Wrong size on FEndDataTableBoxing3DBattlerEnemyCombo");
static_assert(offsetof(FEndDataTableBoxing3DBattlerEnemyCombo, ComboPunch_Array) == 0x000008, "Member 'FEndDataTableBoxing3DBattlerEnemyCombo::ComboPunch_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBoxing3DBattlerMainCamera
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBoxing3DBattlerMainCamera final : public FEndDataTableRowBase
{
public:
	float                                         CameraDistanceToPlayer;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraFOV;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotatorOffset;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HorizontalOffsetDistance;                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VerticalOffsetDistance;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBoxing3DBattlerMainCamera) == 0x000008, "Wrong alignment on FEndDataTableBoxing3DBattlerMainCamera");
static_assert(sizeof(FEndDataTableBoxing3DBattlerMainCamera) == 0x000020, "Wrong size on FEndDataTableBoxing3DBattlerMainCamera");
static_assert(offsetof(FEndDataTableBoxing3DBattlerMainCamera, CameraDistanceToPlayer) == 0x000008, "Member 'FEndDataTableBoxing3DBattlerMainCamera::CameraDistanceToPlayer' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerMainCamera, CameraFOV) == 0x00000C, "Member 'FEndDataTableBoxing3DBattlerMainCamera::CameraFOV' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerMainCamera, RotatorOffset) == 0x000010, "Member 'FEndDataTableBoxing3DBattlerMainCamera::RotatorOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerMainCamera, HorizontalOffsetDistance) == 0x000014, "Member 'FEndDataTableBoxing3DBattlerMainCamera::HorizontalOffsetDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerMainCamera, VerticalOffsetDistance) == 0x000018, "Member 'FEndDataTableBoxing3DBattlerMainCamera::VerticalOffsetDistance' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBoxing3DBattlerResultCamera
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBoxing3DBattlerResultCamera final : public FEndDataTableRowBase
{
public:
	float                                         CameraDistanceToPlayer;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraFOV;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotatorOffset;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HorizontalOffsetDistance;                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VerticalOffsetDistance;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBoxing3DBattlerResultCamera) == 0x000008, "Wrong alignment on FEndDataTableBoxing3DBattlerResultCamera");
static_assert(sizeof(FEndDataTableBoxing3DBattlerResultCamera) == 0x000020, "Wrong size on FEndDataTableBoxing3DBattlerResultCamera");
static_assert(offsetof(FEndDataTableBoxing3DBattlerResultCamera, CameraDistanceToPlayer) == 0x000008, "Member 'FEndDataTableBoxing3DBattlerResultCamera::CameraDistanceToPlayer' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerResultCamera, CameraFOV) == 0x00000C, "Member 'FEndDataTableBoxing3DBattlerResultCamera::CameraFOV' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerResultCamera, RotatorOffset) == 0x000010, "Member 'FEndDataTableBoxing3DBattlerResultCamera::RotatorOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerResultCamera, HorizontalOffsetDistance) == 0x000014, "Member 'FEndDataTableBoxing3DBattlerResultCamera::HorizontalOffsetDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBoxing3DBattlerResultCamera, VerticalOffsetDistance) == 0x000018, "Member 'FEndDataTableBoxing3DBattlerResultCamera::VerticalOffsetDistance' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableBulletinBoard
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBulletinBoard final : public FEndDataTableRowBase
{
public:
	class FName                                   OpenStoryFlagID;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActionOnAccess;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Quest_Array;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableBulletinBoard) == 0x000008, "Wrong alignment on FEndDataTableBulletinBoard");
static_assert(sizeof(FEndDataTableBulletinBoard) == 0x000028, "Wrong size on FEndDataTableBulletinBoard");
static_assert(offsetof(FEndDataTableBulletinBoard, OpenStoryFlagID) == 0x000008, "Member 'FEndDataTableBulletinBoard::OpenStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBulletinBoard, ActionOnAccess) == 0x000010, "Member 'FEndDataTableBulletinBoard::ActionOnAccess' has a wrong offset!");
static_assert(offsetof(FEndDataTableBulletinBoard, Quest_Array) == 0x000018, "Member 'FEndDataTableBulletinBoard::Quest_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCameraSetting
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableCameraSetting final : public FEndDataTableRowBase
{
public:
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BlendInType;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendOutTime;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BlendOutType;                                      // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOV;                                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Distance;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Height;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimOffsetX;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimOffsetY;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimOffsetZ;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpaceOffsetRun;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpaceOffsetRunSpeed;                               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpaceOffsetDash;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpaceOffsetDashSpeed;                              // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AttachBone;                                        // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCameraSetting) == 0x000008, "Wrong alignment on FEndDataTableCameraSetting");
static_assert(sizeof(FEndDataTableCameraSetting) == 0x000048, "Wrong size on FEndDataTableCameraSetting");
static_assert(offsetof(FEndDataTableCameraSetting, BlendInTime) == 0x000008, "Member 'FEndDataTableCameraSetting::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, BlendInType) == 0x00000C, "Member 'FEndDataTableCameraSetting::BlendInType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, BlendOutTime) == 0x000010, "Member 'FEndDataTableCameraSetting::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, BlendOutType) == 0x000014, "Member 'FEndDataTableCameraSetting::BlendOutType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, FOV) == 0x000018, "Member 'FEndDataTableCameraSetting::FOV' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, Distance) == 0x00001C, "Member 'FEndDataTableCameraSetting::Distance' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, Height) == 0x000020, "Member 'FEndDataTableCameraSetting::Height' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, AimOffsetX) == 0x000024, "Member 'FEndDataTableCameraSetting::AimOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, AimOffsetY) == 0x000028, "Member 'FEndDataTableCameraSetting::AimOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, AimOffsetZ) == 0x00002C, "Member 'FEndDataTableCameraSetting::AimOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, SpaceOffsetRun) == 0x000030, "Member 'FEndDataTableCameraSetting::SpaceOffsetRun' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, SpaceOffsetRunSpeed) == 0x000034, "Member 'FEndDataTableCameraSetting::SpaceOffsetRunSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, SpaceOffsetDash) == 0x000038, "Member 'FEndDataTableCameraSetting::SpaceOffsetDash' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, SpaceOffsetDashSpeed) == 0x00003C, "Member 'FEndDataTableCameraSetting::SpaceOffsetDashSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, AttachBone) == 0x000040, "Member 'FEndDataTableCameraSetting::AttachBone' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCameraShake
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableCameraShake final : public FEndDataTableRowBase
{
public:
	float                                         LocationRangeX;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationRangeY;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationRangeZ;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationAmplitudeX;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationAmplitudeY;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationAmplitudeZ;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationRangeX;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationRangeY;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationRangeZ;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationAmplitudeX;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationAmplitudeY;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationAmplitudeZ;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Duration;                                          // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlendInTime;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlendOutTime;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InnerRadius;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OuterRadius;                                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Falloff;                                           // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCameraShake) == 0x000008, "Wrong alignment on FEndDataTableCameraShake");
static_assert(sizeof(FEndDataTableCameraShake) == 0x000058, "Wrong size on FEndDataTableCameraShake");
static_assert(offsetof(FEndDataTableCameraShake, LocationRangeX) == 0x000008, "Member 'FEndDataTableCameraShake::LocationRangeX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, LocationRangeY) == 0x00000C, "Member 'FEndDataTableCameraShake::LocationRangeY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, LocationRangeZ) == 0x000010, "Member 'FEndDataTableCameraShake::LocationRangeZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, LocationAmplitudeX) == 0x000014, "Member 'FEndDataTableCameraShake::LocationAmplitudeX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, LocationAmplitudeY) == 0x000018, "Member 'FEndDataTableCameraShake::LocationAmplitudeY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, LocationAmplitudeZ) == 0x00001C, "Member 'FEndDataTableCameraShake::LocationAmplitudeZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationRangeX) == 0x000020, "Member 'FEndDataTableCameraShake::RotationRangeX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationRangeY) == 0x000024, "Member 'FEndDataTableCameraShake::RotationRangeY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationRangeZ) == 0x000028, "Member 'FEndDataTableCameraShake::RotationRangeZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationAmplitudeX) == 0x00002C, "Member 'FEndDataTableCameraShake::RotationAmplitudeX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationAmplitudeY) == 0x000030, "Member 'FEndDataTableCameraShake::RotationAmplitudeY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationAmplitudeZ) == 0x000034, "Member 'FEndDataTableCameraShake::RotationAmplitudeZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, Scale) == 0x000038, "Member 'FEndDataTableCameraShake::Scale' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, Duration) == 0x00003C, "Member 'FEndDataTableCameraShake::Duration' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, BlendInTime) == 0x000040, "Member 'FEndDataTableCameraShake::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, BlendOutTime) == 0x000044, "Member 'FEndDataTableCameraShake::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, InnerRadius) == 0x000048, "Member 'FEndDataTableCameraShake::InnerRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, OuterRadius) == 0x00004C, "Member 'FEndDataTableCameraShake::OuterRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, Falloff) == 0x000050, "Member 'FEndDataTableCameraShake::Falloff' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCanEquipment
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableCanEquipment final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           CanEquipWeapon_Array;                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CanEquipArmor_Array;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CanEquipAccessory_Array;                           // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCanEquipment) == 0x000008, "Wrong alignment on FEndDataTableCanEquipment");
static_assert(sizeof(FEndDataTableCanEquipment) == 0x000038, "Wrong size on FEndDataTableCanEquipment");
static_assert(offsetof(FEndDataTableCanEquipment, CanEquipWeapon_Array) == 0x000008, "Member 'FEndDataTableCanEquipment::CanEquipWeapon_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCanEquipment, CanEquipArmor_Array) == 0x000018, "Member 'FEndDataTableCanEquipment::CanEquipArmor_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCanEquipment, CanEquipAccessory_Array) == 0x000028, "Member 'FEndDataTableCanEquipment::CanEquipAccessory_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCardGameAIParam
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableCardGameAIParam final : public FEndDataTableRowBase
{
public:
	float                                         EnemyPowerQT;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerPowerQT;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnemyFlagQT;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerFlagQT;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnemySpecialQT;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerSpecialQT;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnemyCardConservationOneRoundQT;                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnemyCardConservationTwoRoundQT;                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EnemyCardConservationThreeRoundQT;                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerCardConservationOneRoundQT;                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerCardConservationTwoRoundQT;                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerCardConservationThreeRoundQT;                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          SpecialPrediction;                                 // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          EnemyPredictionTurn;                               // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          PlayerPredictionTurn;                              // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          NeedCanPutCount;                                   // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CanNotPutMinusValue;                               // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BuffInflNoCardQT;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DebufInflNoCardQT;                                 // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BuffInflNoActivateQT;                              // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DebufInflNoActivateQT;                             // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGameAIParam) == 0x000008, "Wrong alignment on FEndDataTableCardGameAIParam");
static_assert(sizeof(FEndDataTableCardGameAIParam) == 0x000050, "Wrong size on FEndDataTableCardGameAIParam");
static_assert(offsetof(FEndDataTableCardGameAIParam, EnemyPowerQT) == 0x000008, "Member 'FEndDataTableCardGameAIParam::EnemyPowerQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, PlayerPowerQT) == 0x00000C, "Member 'FEndDataTableCardGameAIParam::PlayerPowerQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, EnemyFlagQT) == 0x000010, "Member 'FEndDataTableCardGameAIParam::EnemyFlagQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, PlayerFlagQT) == 0x000014, "Member 'FEndDataTableCardGameAIParam::PlayerFlagQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, EnemySpecialQT) == 0x000018, "Member 'FEndDataTableCardGameAIParam::EnemySpecialQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, PlayerSpecialQT) == 0x00001C, "Member 'FEndDataTableCardGameAIParam::PlayerSpecialQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, EnemyCardConservationOneRoundQT) == 0x000020, "Member 'FEndDataTableCardGameAIParam::EnemyCardConservationOneRoundQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, EnemyCardConservationTwoRoundQT) == 0x000024, "Member 'FEndDataTableCardGameAIParam::EnemyCardConservationTwoRoundQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, EnemyCardConservationThreeRoundQT) == 0x000028, "Member 'FEndDataTableCardGameAIParam::EnemyCardConservationThreeRoundQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, PlayerCardConservationOneRoundQT) == 0x00002C, "Member 'FEndDataTableCardGameAIParam::PlayerCardConservationOneRoundQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, PlayerCardConservationTwoRoundQT) == 0x000030, "Member 'FEndDataTableCardGameAIParam::PlayerCardConservationTwoRoundQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, PlayerCardConservationThreeRoundQT) == 0x000034, "Member 'FEndDataTableCardGameAIParam::PlayerCardConservationThreeRoundQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, SpecialPrediction) == 0x000038, "Member 'FEndDataTableCardGameAIParam::SpecialPrediction' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, EnemyPredictionTurn) == 0x000039, "Member 'FEndDataTableCardGameAIParam::EnemyPredictionTurn' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, PlayerPredictionTurn) == 0x00003A, "Member 'FEndDataTableCardGameAIParam::PlayerPredictionTurn' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, NeedCanPutCount) == 0x00003B, "Member 'FEndDataTableCardGameAIParam::NeedCanPutCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, CanNotPutMinusValue) == 0x00003C, "Member 'FEndDataTableCardGameAIParam::CanNotPutMinusValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, BuffInflNoCardQT) == 0x000040, "Member 'FEndDataTableCardGameAIParam::BuffInflNoCardQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, DebufInflNoCardQT) == 0x000044, "Member 'FEndDataTableCardGameAIParam::DebufInflNoCardQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, BuffInflNoActivateQT) == 0x000048, "Member 'FEndDataTableCardGameAIParam::BuffInflNoActivateQT' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameAIParam, DebufInflNoActivateQT) == 0x00004C, "Member 'FEndDataTableCardGameAIParam::DebufInflNoActivateQT' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCardGameCardInfl
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableCardGameCardInfl final : public FEndDataTableRowBase
{
public:
	int8                                          Column1;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Column2;                                           // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Column3;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Column4;                                           // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Column5;                                           // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCardGameCardInfl) == 0x000008, "Wrong alignment on FEndDataTableCardGameCardInfl");
static_assert(sizeof(FEndDataTableCardGameCardInfl) == 0x000010, "Wrong size on FEndDataTableCardGameCardInfl");
static_assert(offsetof(FEndDataTableCardGameCardInfl, Column1) == 0x000008, "Member 'FEndDataTableCardGameCardInfl::Column1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfl, Column2) == 0x000009, "Member 'FEndDataTableCardGameCardInfl::Column2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfl, Column3) == 0x00000A, "Member 'FEndDataTableCardGameCardInfl::Column3' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfl, Column4) == 0x00000B, "Member 'FEndDataTableCardGameCardInfl::Column4' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfl, Column5) == 0x00000C, "Member 'FEndDataTableCardGameCardInfl::Column5' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCardGameCardInfo
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableCardGameCardInfo final : public FEndDataTableRowBase
{
public:
	class FName                                   NameID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UniqueId;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NewStoryFlag;                                      // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CharaSpecID;                                       // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ThumbnailID;                                       // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ImageID;                                           // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ImageBoardID;                                      // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          MP;                                                // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Power;                                             // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Infl;                                              // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Special;                                           // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Num;                                               // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KeyItem;                                           // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GetMethod;                                         // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCardGameCardInfo) == 0x000008, "Wrong alignment on FEndDataTableCardGameCardInfo");
static_assert(sizeof(FEndDataTableCardGameCardInfo) == 0x000078, "Wrong size on FEndDataTableCardGameCardInfo");
static_assert(offsetof(FEndDataTableCardGameCardInfo, NameID) == 0x000008, "Member 'FEndDataTableCardGameCardInfo::NameID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, UniqueId) == 0x000010, "Member 'FEndDataTableCardGameCardInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, NewStoryFlag) == 0x000014, "Member 'FEndDataTableCardGameCardInfo::NewStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, CharaSpecID) == 0x00001C, "Member 'FEndDataTableCardGameCardInfo::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, ThumbnailID) == 0x000024, "Member 'FEndDataTableCardGameCardInfo::ThumbnailID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, ImageID) == 0x00002C, "Member 'FEndDataTableCardGameCardInfo::ImageID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, ImageBoardID) == 0x000034, "Member 'FEndDataTableCardGameCardInfo::ImageBoardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, MP) == 0x00003C, "Member 'FEndDataTableCardGameCardInfo::MP' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, Power) == 0x00003D, "Member 'FEndDataTableCardGameCardInfo::Power' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, Note) == 0x000040, "Member 'FEndDataTableCardGameCardInfo::Note' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, Infl) == 0x000050, "Member 'FEndDataTableCardGameCardInfo::Infl' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, Special) == 0x000058, "Member 'FEndDataTableCardGameCardInfo::Special' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, Num) == 0x000060, "Member 'FEndDataTableCardGameCardInfo::Num' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, KeyItem) == 0x000064, "Member 'FEndDataTableCardGameCardInfo::KeyItem' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCardInfo, GetMethod) == 0x00006C, "Member 'FEndDataTableCardGameCardInfo::GetMethod' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCardGameCommonParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCardGameCommonParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ParamString;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ParamFloat;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ParamInt;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGameCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableCardGameCommonParameter");
static_assert(sizeof(FEndDataTableCardGameCommonParameter) == 0x000018, "Wrong size on FEndDataTableCardGameCommonParameter");
static_assert(offsetof(FEndDataTableCardGameCommonParameter, ParamString) == 0x000008, "Member 'FEndDataTableCardGameCommonParameter::ParamString' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCommonParameter, ParamFloat) == 0x000010, "Member 'FEndDataTableCardGameCommonParameter::ParamFloat' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameCommonParameter, ParamInt) == 0x000014, "Member 'FEndDataTableCardGameCommonParameter::ParamInt' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCardGameOpponent
// 0x00D0 (0x00D8 - 0x0008)
struct FEndDataTableCardGameOpponent final : public FEndDataTableRowBase
{
public:
	class FName                                   StoryFlag;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReleaseFlag;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   opponent_name;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DeckID;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         InitLV;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BGMID;                                             // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AIID;                                              // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HideReward;                                        // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Reward1;                                           // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Reward2;                                           // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          strong;                                            // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 thre_Array;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           deck_Array;                                        // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ai_Array;                                          // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   PlayerDeck;                                        // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlayerMessage;                                     // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlayerCommentary;                                  // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpponentMessage;                                   // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpponentCommentary;                                // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 rankLV_Array;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   firstWinCutScene;                                  // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          iconType;                                          // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Anomaly;                                           // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCardGameOpponent) == 0x000008, "Wrong alignment on FEndDataTableCardGameOpponent");
static_assert(sizeof(FEndDataTableCardGameOpponent) == 0x0000D8, "Wrong size on FEndDataTableCardGameOpponent");
static_assert(offsetof(FEndDataTableCardGameOpponent, StoryFlag) == 0x000008, "Member 'FEndDataTableCardGameOpponent::StoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, ReleaseFlag) == 0x000010, "Member 'FEndDataTableCardGameOpponent::ReleaseFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, opponent_name) == 0x000018, "Member 'FEndDataTableCardGameOpponent::opponent_name' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, DeckID) == 0x000020, "Member 'FEndDataTableCardGameOpponent::DeckID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, InitLV) == 0x000028, "Member 'FEndDataTableCardGameOpponent::InitLV' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, BGMID) == 0x00002C, "Member 'FEndDataTableCardGameOpponent::BGMID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, AIID) == 0x000034, "Member 'FEndDataTableCardGameOpponent::AIID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, HideReward) == 0x00003C, "Member 'FEndDataTableCardGameOpponent::HideReward' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, Reward1) == 0x000040, "Member 'FEndDataTableCardGameOpponent::Reward1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, Reward2) == 0x000048, "Member 'FEndDataTableCardGameOpponent::Reward2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, strong) == 0x000050, "Member 'FEndDataTableCardGameOpponent::strong' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, thre_Array) == 0x000058, "Member 'FEndDataTableCardGameOpponent::thre_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, deck_Array) == 0x000068, "Member 'FEndDataTableCardGameOpponent::deck_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, ai_Array) == 0x000078, "Member 'FEndDataTableCardGameOpponent::ai_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, PlayerDeck) == 0x000088, "Member 'FEndDataTableCardGameOpponent::PlayerDeck' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, PlayerMessage) == 0x000090, "Member 'FEndDataTableCardGameOpponent::PlayerMessage' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, PlayerCommentary) == 0x000098, "Member 'FEndDataTableCardGameOpponent::PlayerCommentary' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, OpponentMessage) == 0x0000A0, "Member 'FEndDataTableCardGameOpponent::OpponentMessage' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, OpponentCommentary) == 0x0000A8, "Member 'FEndDataTableCardGameOpponent::OpponentCommentary' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, rankLV_Array) == 0x0000B0, "Member 'FEndDataTableCardGameOpponent::rankLV_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, firstWinCutScene) == 0x0000C0, "Member 'FEndDataTableCardGameOpponent::firstWinCutScene' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, iconType) == 0x0000C8, "Member 'FEndDataTableCardGameOpponent::iconType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameOpponent, Anomaly) == 0x0000CC, "Member 'FEndDataTableCardGameOpponent::Anomaly' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCardGameSpecialParam
// 0x00B0 (0x00B8 - 0x0008)
struct FEndDataTableCardGameSpecialParam final : public FEndDataTableRowBase
{
public:
	int8                                          Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Target;                                            // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IntArray_Array;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           TextAttay_Array;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   Infl;                                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConstantEvaluation;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 SpecialAbilityFilterTag_Array;                     // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 SpecialAbilityTextID;                              // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SpecialAbilityTextIHeadingType_Array;              // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SpecialAbilityTextParameterReference_Array;        // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         SpecialAbilityText_TextLabelReference_Array;       // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         SpecialAbilityReferenceCount0;                     // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 SpecialAbilityReferenceCount_Array;                // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 SpecialAbilityReferenceTextID;                     // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGameSpecialParam) == 0x000008, "Wrong alignment on FEndDataTableCardGameSpecialParam");
static_assert(sizeof(FEndDataTableCardGameSpecialParam) == 0x0000B8, "Wrong size on FEndDataTableCardGameSpecialParam");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, Type) == 0x000008, "Member 'FEndDataTableCardGameSpecialParam::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, Target) == 0x000009, "Member 'FEndDataTableCardGameSpecialParam::Target' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, IntArray_Array) == 0x000010, "Member 'FEndDataTableCardGameSpecialParam::IntArray_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, TextAttay_Array) == 0x000020, "Member 'FEndDataTableCardGameSpecialParam::TextAttay_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, Infl) == 0x000030, "Member 'FEndDataTableCardGameSpecialParam::Infl' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, ConstantEvaluation) == 0x000038, "Member 'FEndDataTableCardGameSpecialParam::ConstantEvaluation' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, SpecialAbilityFilterTag_Array) == 0x000040, "Member 'FEndDataTableCardGameSpecialParam::SpecialAbilityFilterTag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, SpecialAbilityTextID) == 0x000050, "Member 'FEndDataTableCardGameSpecialParam::SpecialAbilityTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, SpecialAbilityTextIHeadingType_Array) == 0x000060, "Member 'FEndDataTableCardGameSpecialParam::SpecialAbilityTextIHeadingType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, SpecialAbilityTextParameterReference_Array) == 0x000070, "Member 'FEndDataTableCardGameSpecialParam::SpecialAbilityTextParameterReference_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, SpecialAbilityText_TextLabelReference_Array) == 0x000080, "Member 'FEndDataTableCardGameSpecialParam::SpecialAbilityText_TextLabelReference_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, SpecialAbilityReferenceCount0) == 0x000090, "Member 'FEndDataTableCardGameSpecialParam::SpecialAbilityReferenceCount0' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, SpecialAbilityReferenceCount_Array) == 0x000098, "Member 'FEndDataTableCardGameSpecialParam::SpecialAbilityReferenceCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameSpecialParam, SpecialAbilityReferenceTextID) == 0x0000A8, "Member 'FEndDataTableCardGameSpecialParam::SpecialAbilityReferenceTextID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCardGameTutorial
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableCardGameTutorial final : public FEndDataTableRowBase
{
public:
	int32                                         IsPlayer;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Turn;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TutorialId;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CardId;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PutX;                                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PutY;                                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCardGameTutorial) == 0x000008, "Wrong alignment on FEndDataTableCardGameTutorial");
static_assert(sizeof(FEndDataTableCardGameTutorial) == 0x000038, "Wrong size on FEndDataTableCardGameTutorial");
static_assert(offsetof(FEndDataTableCardGameTutorial, IsPlayer) == 0x000008, "Member 'FEndDataTableCardGameTutorial::IsPlayer' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameTutorial, Turn) == 0x00000C, "Member 'FEndDataTableCardGameTutorial::Turn' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameTutorial, TutorialId) == 0x000010, "Member 'FEndDataTableCardGameTutorial::TutorialId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameTutorial, CardId) == 0x000020, "Member 'FEndDataTableCardGameTutorial::CardId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameTutorial, PutX) == 0x000030, "Member 'FEndDataTableCardGameTutorial::PutX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCardGameTutorial, PutY) == 0x000034, "Member 'FEndDataTableCardGameTutorial::PutY' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChadleyShopList
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableChadleyShopList final : public FEndDataTableRowBase
{
public:
	class FName                                   OpenStoryFlag;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LocationID_Array;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChadleyShopList) == 0x000008, "Wrong alignment on FEndDataTableChadleyShopList");
static_assert(sizeof(FEndDataTableChadleyShopList) == 0x000020, "Wrong size on FEndDataTableChadleyShopList");
static_assert(offsetof(FEndDataTableChadleyShopList, OpenStoryFlag) == 0x000008, "Member 'FEndDataTableChadleyShopList::OpenStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadleyShopList, LocationID_Array) == 0x000010, "Member 'FEndDataTableChadleyShopList::LocationID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChapter
// 0x01C8 (0x01D0 - 0x0008)
struct FEndDataTableChapter final : public FEndDataTableRowBase
{
public:
	class FString                                 BootMenuString;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UniqueId;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UniqueIndex;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SelecterChapterResetStoryFlag;                     // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ShowFilterLocationId;                              // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Type;                                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SortValue;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RefMainChapterID;                                  // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SaveDataTextIdList_Array;                          // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         DebugPositionX;                                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DebugPositionY;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DebugPositionZ;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   debugTargetPointName;                              // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DebugPartyListID;                                  // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DebugReserveOtherChapter_MainLocationId;           // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DebugReserveOtherChapter_ChapterId;                // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ResidentWorkIDList_Array;                          // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ResidentWorkValueList_Array;                       // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FastObjectIDList_Array;                            // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FastAttributeNameList_Array;                       // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FastStateChangeIDList_Array;                       // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ObjectIDList_Array;                                // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AttributeNameList_Array;                           // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateChangeIDList_Array;                           // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NaviMapClearStateCondition_Array;                  // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NaviMapClear_Array;                                // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DebugActionIdList_Array;                           // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DebugStoryFlag_Array;                              // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         LocationSlotIndex;                                 // 0x0140(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsAlwaysInitialize;                                // 0x0141(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DelayShowChapterClear;                             // 0x0142(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_143[0x5];                                      // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         LocationResidentID_Array;                          // 0x0148(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         StateTriggerId_Array;                              // 0x0158(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PlayerInfo_Array;                                  // 0x0168(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   HardModeClearStoryFlag;                            // 0x0178(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RaiseStoryFlag_Array;                              // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DropStoryFlag_Array;                               // 0x0190(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AddKeyItem_Array;                                  // 0x01A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DeleteKeyItem_Array;                               // 0x01B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         HiddenNaviMapLayerNumber_Array;                    // 0x01C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChapter) == 0x000008, "Wrong alignment on FEndDataTableChapter");
static_assert(sizeof(FEndDataTableChapter) == 0x0001D0, "Wrong size on FEndDataTableChapter");
static_assert(offsetof(FEndDataTableChapter, BootMenuString) == 0x000008, "Member 'FEndDataTableChapter::BootMenuString' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, UniqueId) == 0x000018, "Member 'FEndDataTableChapter::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, UniqueIndex) == 0x00001C, "Member 'FEndDataTableChapter::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, SelecterChapterResetStoryFlag) == 0x000020, "Member 'FEndDataTableChapter::SelecterChapterResetStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, ShowFilterLocationId) == 0x000024, "Member 'FEndDataTableChapter::ShowFilterLocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, Type) == 0x00002C, "Member 'FEndDataTableChapter::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, SortValue) == 0x000030, "Member 'FEndDataTableChapter::SortValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, RefMainChapterID) == 0x000034, "Member 'FEndDataTableChapter::RefMainChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, SaveDataTextIdList_Array) == 0x000040, "Member 'FEndDataTableChapter::SaveDataTextIdList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DebugPositionX) == 0x000050, "Member 'FEndDataTableChapter::DebugPositionX' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DebugPositionY) == 0x000054, "Member 'FEndDataTableChapter::DebugPositionY' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DebugPositionZ) == 0x000058, "Member 'FEndDataTableChapter::DebugPositionZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, debugTargetPointName) == 0x00005C, "Member 'FEndDataTableChapter::debugTargetPointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DebugPartyListID) == 0x000064, "Member 'FEndDataTableChapter::DebugPartyListID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DebugReserveOtherChapter_MainLocationId) == 0x00006C, "Member 'FEndDataTableChapter::DebugReserveOtherChapter_MainLocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DebugReserveOtherChapter_ChapterId) == 0x000074, "Member 'FEndDataTableChapter::DebugReserveOtherChapter_ChapterId' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, ResidentWorkIDList_Array) == 0x000080, "Member 'FEndDataTableChapter::ResidentWorkIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, ResidentWorkValueList_Array) == 0x000090, "Member 'FEndDataTableChapter::ResidentWorkValueList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, FastObjectIDList_Array) == 0x0000A0, "Member 'FEndDataTableChapter::FastObjectIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, FastAttributeNameList_Array) == 0x0000B0, "Member 'FEndDataTableChapter::FastAttributeNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, FastStateChangeIDList_Array) == 0x0000C0, "Member 'FEndDataTableChapter::FastStateChangeIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, ObjectIDList_Array) == 0x0000D0, "Member 'FEndDataTableChapter::ObjectIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, AttributeNameList_Array) == 0x0000E0, "Member 'FEndDataTableChapter::AttributeNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, StateChangeIDList_Array) == 0x0000F0, "Member 'FEndDataTableChapter::StateChangeIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, NaviMapClearStateCondition_Array) == 0x000100, "Member 'FEndDataTableChapter::NaviMapClearStateCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, NaviMapClear_Array) == 0x000110, "Member 'FEndDataTableChapter::NaviMapClear_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DebugActionIdList_Array) == 0x000120, "Member 'FEndDataTableChapter::DebugActionIdList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DebugStoryFlag_Array) == 0x000130, "Member 'FEndDataTableChapter::DebugStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, LocationSlotIndex) == 0x000140, "Member 'FEndDataTableChapter::LocationSlotIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, IsAlwaysInitialize) == 0x000141, "Member 'FEndDataTableChapter::IsAlwaysInitialize' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DelayShowChapterClear) == 0x000142, "Member 'FEndDataTableChapter::DelayShowChapterClear' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, LocationResidentID_Array) == 0x000148, "Member 'FEndDataTableChapter::LocationResidentID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, StateTriggerId_Array) == 0x000158, "Member 'FEndDataTableChapter::StateTriggerId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, PlayerInfo_Array) == 0x000168, "Member 'FEndDataTableChapter::PlayerInfo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, HardModeClearStoryFlag) == 0x000178, "Member 'FEndDataTableChapter::HardModeClearStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, RaiseStoryFlag_Array) == 0x000180, "Member 'FEndDataTableChapter::RaiseStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DropStoryFlag_Array) == 0x000190, "Member 'FEndDataTableChapter::DropStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, AddKeyItem_Array) == 0x0001A0, "Member 'FEndDataTableChapter::AddKeyItem_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DeleteKeyItem_Array) == 0x0001B0, "Member 'FEndDataTableChapter::DeleteKeyItem_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, HiddenNaviMapLayerNumber_Array) == 0x0001C0, "Member 'FEndDataTableChapter::HiddenNaviMapLayerNumber_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChapterResetLocationWork
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChapterResetLocationWork final : public FEndDataTableRowBase
{
public:
	class FName                                   LocationId;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LocationNumber;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChapterResetLocationWork) == 0x000008, "Wrong alignment on FEndDataTableChapterResetLocationWork");
static_assert(sizeof(FEndDataTableChapterResetLocationWork) == 0x000018, "Wrong size on FEndDataTableChapterResetLocationWork");
static_assert(offsetof(FEndDataTableChapterResetLocationWork, LocationId) == 0x000008, "Member 'FEndDataTableChapterResetLocationWork::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapterResetLocationWork, LocationNumber) == 0x000010, "Member 'FEndDataTableChapterResetLocationWork::LocationNumber' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChapterSelectSpecialObject
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableChapterSelectSpecialObject final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChapterSelectSpecialObject) == 0x000008, "Wrong alignment on FEndDataTableChapterSelectSpecialObject");
static_assert(sizeof(FEndDataTableChapterSelectSpecialObject) == 0x000010, "Wrong size on FEndDataTableChapterSelectSpecialObject");
static_assert(offsetof(FEndDataTableChapterSelectSpecialObject, Type) == 0x000008, "Member 'FEndDataTableChapterSelectSpecialObject::Type' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCharaActionTable
// 0x00C0 (0x00C8 - 0x0008)
struct FEndDataTableCharaActionTable final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Next00;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Type;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringArgument00;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StringArgument01;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StringArgument02;                                  // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StringArgument03;                                  // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StringArgument04;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StringArgument05;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StringArgument06;                                  // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StringArgument07;                                  // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerArgument00;                                 // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerArgument01;                                 // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerArgument02;                                 // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerArgument03;                                 // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerArgument04;                                 // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerArgument05;                                 // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerArgument06;                                 // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerArgument07;                                 // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCharaActionTable) == 0x000008, "Wrong alignment on FEndDataTableCharaActionTable");
static_assert(sizeof(FEndDataTableCharaActionTable) == 0x0000C8, "Wrong size on FEndDataTableCharaActionTable");
static_assert(offsetof(FEndDataTableCharaActionTable, UniqueIndex) == 0x000008, "Member 'FEndDataTableCharaActionTable::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, Next00) == 0x000010, "Member 'FEndDataTableCharaActionTable::Next00' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, Type) == 0x000020, "Member 'FEndDataTableCharaActionTable::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument00) == 0x000028, "Member 'FEndDataTableCharaActionTable::StringArgument00' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument01) == 0x000038, "Member 'FEndDataTableCharaActionTable::StringArgument01' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument02) == 0x000048, "Member 'FEndDataTableCharaActionTable::StringArgument02' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument03) == 0x000058, "Member 'FEndDataTableCharaActionTable::StringArgument03' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument04) == 0x000068, "Member 'FEndDataTableCharaActionTable::StringArgument04' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument05) == 0x000078, "Member 'FEndDataTableCharaActionTable::StringArgument05' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument06) == 0x000088, "Member 'FEndDataTableCharaActionTable::StringArgument06' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument07) == 0x000098, "Member 'FEndDataTableCharaActionTable::StringArgument07' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument00) == 0x0000A8, "Member 'FEndDataTableCharaActionTable::IntegerArgument00' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument01) == 0x0000AC, "Member 'FEndDataTableCharaActionTable::IntegerArgument01' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument02) == 0x0000B0, "Member 'FEndDataTableCharaActionTable::IntegerArgument02' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument03) == 0x0000B4, "Member 'FEndDataTableCharaActionTable::IntegerArgument03' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument04) == 0x0000B8, "Member 'FEndDataTableCharaActionTable::IntegerArgument04' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument05) == 0x0000BC, "Member 'FEndDataTableCharaActionTable::IntegerArgument05' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument06) == 0x0000C0, "Member 'FEndDataTableCharaActionTable::IntegerArgument06' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument07) == 0x0000C4, "Member 'FEndDataTableCharaActionTable::IntegerArgument07' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCharaPopAsset
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableCharaPopAsset final : public FEndDataTableRowBase
{
public:
	int32                                         UsedPhysMemory;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UsedGPUMemory;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCharaPopAsset) == 0x000008, "Wrong alignment on FEndDataTableCharaPopAsset");
static_assert(sizeof(FEndDataTableCharaPopAsset) == 0x000010, "Wrong size on FEndDataTableCharaPopAsset");
static_assert(offsetof(FEndDataTableCharaPopAsset, UsedPhysMemory) == 0x000008, "Member 'FEndDataTableCharaPopAsset::UsedPhysMemory' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaPopAsset, UsedGPUMemory) == 0x00000C, "Member 'FEndDataTableCharaPopAsset::UsedGPUMemory' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCharaPopPack
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCharaPopPack final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           AssetName_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCharaPopPack) == 0x000008, "Wrong alignment on FEndDataTableCharaPopPack");
static_assert(sizeof(FEndDataTableCharaPopPack) == 0x000018, "Wrong size on FEndDataTableCharaPopPack");
static_assert(offsetof(FEndDataTableCharaPopPack, AssetName_Array) == 0x000008, "Member 'FEndDataTableCharaPopPack::AssetName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCharaPopSwitchVolume
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableCharaPopSwitchVolume final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ShowActorList_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           HideActorList_Array;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCharaPopSwitchVolume) == 0x000008, "Wrong alignment on FEndDataTableCharaPopSwitchVolume");
static_assert(sizeof(FEndDataTableCharaPopSwitchVolume) == 0x000028, "Wrong size on FEndDataTableCharaPopSwitchVolume");
static_assert(offsetof(FEndDataTableCharaPopSwitchVolume, ShowActorList_Array) == 0x000008, "Member 'FEndDataTableCharaPopSwitchVolume::ShowActorList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaPopSwitchVolume, HideActorList_Array) == 0x000018, "Member 'FEndDataTableCharaPopSwitchVolume::HideActorList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCharaSpecSoundCategory
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableCharaSpecSoundCategory final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentsSoundSE;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ContentsSoundAutoSE;                               // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ContentSoundVoice_Array;                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCharaSpecSoundCategory) == 0x000008, "Wrong alignment on FEndDataTableCharaSpecSoundCategory");
static_assert(sizeof(FEndDataTableCharaSpecSoundCategory) == 0x000040, "Wrong size on FEndDataTableCharaSpecSoundCategory");
static_assert(offsetof(FEndDataTableCharaSpecSoundCategory, UniqueIndex) == 0x000008, "Member 'FEndDataTableCharaSpecSoundCategory::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpecSoundCategory, ContentsSoundSE) == 0x000010, "Member 'FEndDataTableCharaSpecSoundCategory::ContentsSoundSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpecSoundCategory, ContentsSoundAutoSE) == 0x000020, "Member 'FEndDataTableCharaSpecSoundCategory::ContentsSoundAutoSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpecSoundCategory, ContentSoundVoice_Array) == 0x000030, "Member 'FEndDataTableCharaSpecSoundCategory::ContentSoundVoice_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboCaptureCheckPointParameter
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableChocoboCaptureCheckPointParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   RestartPoint;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 SleepingVolumeIdxArray_Array;                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   ChocoboRestartPoint;                               // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TroccoRestartPoint0;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboCaptureCheckPointParameter) == 0x000008, "Wrong alignment on FEndDataTableChocoboCaptureCheckPointParameter");
static_assert(sizeof(FEndDataTableChocoboCaptureCheckPointParameter) == 0x000030, "Wrong size on FEndDataTableChocoboCaptureCheckPointParameter");
static_assert(offsetof(FEndDataTableChocoboCaptureCheckPointParameter, RestartPoint) == 0x000008, "Member 'FEndDataTableChocoboCaptureCheckPointParameter::RestartPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureCheckPointParameter, SleepingVolumeIdxArray_Array) == 0x000010, "Member 'FEndDataTableChocoboCaptureCheckPointParameter::SleepingVolumeIdxArray_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureCheckPointParameter, ChocoboRestartPoint) == 0x000020, "Member 'FEndDataTableChocoboCaptureCheckPointParameter::ChocoboRestartPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureCheckPointParameter, TroccoRestartPoint0) == 0x000028, "Member 'FEndDataTableChocoboCaptureCheckPointParameter::TroccoRestartPoint0' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboCaptureCommonParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChocoboCaptureCommonParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ParamString;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ParamFloat;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ParamInt;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboCaptureCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableChocoboCaptureCommonParameter");
static_assert(sizeof(FEndDataTableChocoboCaptureCommonParameter) == 0x000018, "Wrong size on FEndDataTableChocoboCaptureCommonParameter");
static_assert(offsetof(FEndDataTableChocoboCaptureCommonParameter, ParamString) == 0x000008, "Member 'FEndDataTableChocoboCaptureCommonParameter::ParamString' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureCommonParameter, ParamFloat) == 0x000010, "Member 'FEndDataTableChocoboCaptureCommonParameter::ParamFloat' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureCommonParameter, ParamInt) == 0x000014, "Member 'FEndDataTableChocoboCaptureCommonParameter::ParamInt' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboCaptureDistanceParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChocoboCaptureDistanceParameter final : public FEndDataTableRowBase
{
public:
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Quantity;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrowchingQUantity;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Dash;                                              // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboCaptureDistanceParameter) == 0x000008, "Wrong alignment on FEndDataTableChocoboCaptureDistanceParameter");
static_assert(sizeof(FEndDataTableChocoboCaptureDistanceParameter) == 0x000018, "Wrong size on FEndDataTableChocoboCaptureDistanceParameter");
static_assert(offsetof(FEndDataTableChocoboCaptureDistanceParameter, Distance) == 0x000008, "Member 'FEndDataTableChocoboCaptureDistanceParameter::Distance' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureDistanceParameter, Quantity) == 0x00000C, "Member 'FEndDataTableChocoboCaptureDistanceParameter::Quantity' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureDistanceParameter, CrowchingQUantity) == 0x000010, "Member 'FEndDataTableChocoboCaptureDistanceParameter::CrowchingQUantity' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureDistanceParameter, Dash) == 0x000014, "Member 'FEndDataTableChocoboCaptureDistanceParameter::Dash' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboCaptureTurnPattern
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableChocoboCaptureTurnPattern final : public FEndDataTableRowBase
{
public:
	float                                         Time;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeRand;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Angle;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngleRand;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SignMotion;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AfterTurnMotion;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboCaptureTurnPattern) == 0x000008, "Wrong alignment on FEndDataTableChocoboCaptureTurnPattern");
static_assert(sizeof(FEndDataTableChocoboCaptureTurnPattern) == 0x000028, "Wrong size on FEndDataTableChocoboCaptureTurnPattern");
static_assert(offsetof(FEndDataTableChocoboCaptureTurnPattern, Time) == 0x000008, "Member 'FEndDataTableChocoboCaptureTurnPattern::Time' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureTurnPattern, TimeRand) == 0x00000C, "Member 'FEndDataTableChocoboCaptureTurnPattern::TimeRand' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureTurnPattern, Angle) == 0x000010, "Member 'FEndDataTableChocoboCaptureTurnPattern::Angle' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureTurnPattern, AngleRand) == 0x000014, "Member 'FEndDataTableChocoboCaptureTurnPattern::AngleRand' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureTurnPattern, SignMotion) == 0x000018, "Member 'FEndDataTableChocoboCaptureTurnPattern::SignMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboCaptureTurnPattern, AfterTurnMotion) == 0x000020, "Member 'FEndDataTableChocoboCaptureTurnPattern::AfterTurnMotion' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboCraftLocationSaveParameter
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableChocoboCraftLocationSaveParameter final : public FEndDataTableRowBase
{
public:
	uint8                                         SaveDataArrayIndex;                                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboCraftLocationSaveParameter) == 0x000008, "Wrong alignment on FEndDataTableChocoboCraftLocationSaveParameter");
static_assert(sizeof(FEndDataTableChocoboCraftLocationSaveParameter) == 0x000010, "Wrong size on FEndDataTableChocoboCraftLocationSaveParameter");
static_assert(offsetof(FEndDataTableChocoboCraftLocationSaveParameter, SaveDataArrayIndex) == 0x000008, "Member 'FEndDataTableChocoboCraftLocationSaveParameter::SaveDataArrayIndex' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboFastTravelPoint
// 0x00D0 (0x00D8 - 0x0008)
struct FEndDataTableChocoboFastTravelPoint final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PointName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChocoboActorName;                                  // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChocoboRiderActorName;                             // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChocoboCartActorName;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RideTargetPointChocobo;                            // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChocoboRiderPoint;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RideTargetPoint01;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RideTargetPoint02;                                 // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RideTargetPoint03;                                 // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ArrivalTargetPoint01;                              // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ArrivalTargetPoint02;                              // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ArrivalTargetPoint03;                              // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Price;                                             // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OnSelectedTrigger;                                 // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OnPVStartTrigger;                                  // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OnArrivalTrigger;                                  // 0x008C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActivateStoryFlag;                                 // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DeactivateStoryFlag;                               // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FreeAccessStoryFlag;                               // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ShowArrivalNameStateTrigger;                       // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MenuPicturePreview;                                // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MenuLocationPointName;                             // 0x00C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboFastTravelPoint) == 0x000008, "Wrong alignment on FEndDataTableChocoboFastTravelPoint");
static_assert(sizeof(FEndDataTableChocoboFastTravelPoint) == 0x0000D8, "Wrong size on FEndDataTableChocoboFastTravelPoint");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, UniqueIndex) == 0x000008, "Member 'FEndDataTableChocoboFastTravelPoint::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, PointName) == 0x000010, "Member 'FEndDataTableChocoboFastTravelPoint::PointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ChocoboActorName) == 0x000020, "Member 'FEndDataTableChocoboFastTravelPoint::ChocoboActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ChocoboRiderActorName) == 0x000028, "Member 'FEndDataTableChocoboFastTravelPoint::ChocoboRiderActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ChocoboCartActorName) == 0x000030, "Member 'FEndDataTableChocoboFastTravelPoint::ChocoboCartActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, RideTargetPointChocobo) == 0x000038, "Member 'FEndDataTableChocoboFastTravelPoint::RideTargetPointChocobo' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ChocoboRiderPoint) == 0x000040, "Member 'FEndDataTableChocoboFastTravelPoint::ChocoboRiderPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, RideTargetPoint01) == 0x000048, "Member 'FEndDataTableChocoboFastTravelPoint::RideTargetPoint01' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, RideTargetPoint02) == 0x000050, "Member 'FEndDataTableChocoboFastTravelPoint::RideTargetPoint02' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, RideTargetPoint03) == 0x000058, "Member 'FEndDataTableChocoboFastTravelPoint::RideTargetPoint03' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ArrivalTargetPoint01) == 0x000060, "Member 'FEndDataTableChocoboFastTravelPoint::ArrivalTargetPoint01' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ArrivalTargetPoint02) == 0x000068, "Member 'FEndDataTableChocoboFastTravelPoint::ArrivalTargetPoint02' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ArrivalTargetPoint03) == 0x000070, "Member 'FEndDataTableChocoboFastTravelPoint::ArrivalTargetPoint03' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, Price) == 0x000078, "Member 'FEndDataTableChocoboFastTravelPoint::Price' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, OnSelectedTrigger) == 0x00007C, "Member 'FEndDataTableChocoboFastTravelPoint::OnSelectedTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, OnPVStartTrigger) == 0x000084, "Member 'FEndDataTableChocoboFastTravelPoint::OnPVStartTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, OnArrivalTrigger) == 0x00008C, "Member 'FEndDataTableChocoboFastTravelPoint::OnArrivalTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ActivateStoryFlag) == 0x000094, "Member 'FEndDataTableChocoboFastTravelPoint::ActivateStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, DeactivateStoryFlag) == 0x00009C, "Member 'FEndDataTableChocoboFastTravelPoint::DeactivateStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, FreeAccessStoryFlag) == 0x0000A4, "Member 'FEndDataTableChocoboFastTravelPoint::FreeAccessStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ShowArrivalNameStateTrigger) == 0x0000AC, "Member 'FEndDataTableChocoboFastTravelPoint::ShowArrivalNameStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, MenuPicturePreview) == 0x0000B8, "Member 'FEndDataTableChocoboFastTravelPoint::MenuPicturePreview' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, MenuLocationPointName) == 0x0000C8, "Member 'FEndDataTableChocoboFastTravelPoint::MenuLocationPointName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboParkingPoint
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChocoboParkingPoint final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ChocoboParkingPointName_Array;                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboParkingPoint) == 0x000008, "Wrong alignment on FEndDataTableChocoboParkingPoint");
static_assert(sizeof(FEndDataTableChocoboParkingPoint) == 0x000018, "Wrong size on FEndDataTableChocoboParkingPoint");
static_assert(offsetof(FEndDataTableChocoboParkingPoint, ChocoboParkingPointName_Array) == 0x000008, "Member 'FEndDataTableChocoboParkingPoint::ChocoboParkingPointName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboPartsColorPresetData
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChocoboPartsColorPresetData final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 ColorR_Array;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboPartsColorPresetData) == 0x000008, "Wrong alignment on FEndDataTableChocoboPartsColorPresetData");
static_assert(sizeof(FEndDataTableChocoboPartsColorPresetData) == 0x000018, "Wrong size on FEndDataTableChocoboPartsColorPresetData");
static_assert(offsetof(FEndDataTableChocoboPartsColorPresetData, ColorR_Array) == 0x000008, "Member 'FEndDataTableChocoboPartsColorPresetData::ColorR_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceEquipColor
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableChocoboRaceEquipColor final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 MainStoryColor0_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 MainStoryColor1_Array;                             // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 GoldCupColor0_Array;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 GoldCupColor1_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 NormalColor0_Array;                                // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 NormalColor1_Array;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboRaceEquipColor) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceEquipColor");
static_assert(sizeof(FEndDataTableChocoboRaceEquipColor) == 0x000068, "Wrong size on FEndDataTableChocoboRaceEquipColor");
static_assert(offsetof(FEndDataTableChocoboRaceEquipColor, MainStoryColor0_Array) == 0x000008, "Member 'FEndDataTableChocoboRaceEquipColor::MainStoryColor0_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceEquipColor, MainStoryColor1_Array) == 0x000018, "Member 'FEndDataTableChocoboRaceEquipColor::MainStoryColor1_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceEquipColor, GoldCupColor0_Array) == 0x000028, "Member 'FEndDataTableChocoboRaceEquipColor::GoldCupColor0_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceEquipColor, GoldCupColor1_Array) == 0x000038, "Member 'FEndDataTableChocoboRaceEquipColor::GoldCupColor1_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceEquipColor, NormalColor0_Array) == 0x000048, "Member 'FEndDataTableChocoboRaceEquipColor::NormalColor0_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceEquipColor, NormalColor1_Array) == 0x000058, "Member 'FEndDataTableChocoboRaceEquipColor::NormalColor1_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceParameterLevel
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableChocoboRaceParameterLevel final : public FEndDataTableRowBase
{
public:
	TArray<int8>                                  Level_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboRaceParameterLevel) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceParameterLevel");
static_assert(sizeof(FEndDataTableChocoboRaceParameterLevel) == 0x000018, "Wrong size on FEndDataTableChocoboRaceParameterLevel");
static_assert(offsetof(FEndDataTableChocoboRaceParameterLevel, Level_Array) == 0x000008, "Member 'FEndDataTableChocoboRaceParameterLevel::Level_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboRacePartsData
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableChocoboRacePartsData final : public FEndDataTableRowBase
{
public:
	float                                         MaxSpeed;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxSpeedAir;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxSpeedSlope;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Acceleration;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Cornering;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GripInCourse;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Grip;                                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Intelligence;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxVitality;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Luck;                                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Agility;                                           // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Sense;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PartsUnlockTextID;                                 // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SkillID;                                           // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SkillNameTextID;                                   // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SkillExplainTextID;                                // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboRacePartsData) == 0x000008, "Wrong alignment on FEndDataTableChocoboRacePartsData");
static_assert(sizeof(FEndDataTableChocoboRacePartsData) == 0x000060, "Wrong size on FEndDataTableChocoboRacePartsData");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, MaxSpeed) == 0x000008, "Member 'FEndDataTableChocoboRacePartsData::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, MaxSpeedAir) == 0x00000C, "Member 'FEndDataTableChocoboRacePartsData::MaxSpeedAir' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, MaxSpeedSlope) == 0x000010, "Member 'FEndDataTableChocoboRacePartsData::MaxSpeedSlope' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, Acceleration) == 0x000014, "Member 'FEndDataTableChocoboRacePartsData::Acceleration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, Weight) == 0x000018, "Member 'FEndDataTableChocoboRacePartsData::Weight' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, Cornering) == 0x00001C, "Member 'FEndDataTableChocoboRacePartsData::Cornering' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, GripInCourse) == 0x000020, "Member 'FEndDataTableChocoboRacePartsData::GripInCourse' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, Grip) == 0x000024, "Member 'FEndDataTableChocoboRacePartsData::Grip' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, Intelligence) == 0x000028, "Member 'FEndDataTableChocoboRacePartsData::Intelligence' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, MaxVitality) == 0x00002C, "Member 'FEndDataTableChocoboRacePartsData::MaxVitality' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, Luck) == 0x000030, "Member 'FEndDataTableChocoboRacePartsData::Luck' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, Agility) == 0x000034, "Member 'FEndDataTableChocoboRacePartsData::Agility' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, Sense) == 0x000038, "Member 'FEndDataTableChocoboRacePartsData::Sense' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, PartsUnlockTextID) == 0x00003C, "Member 'FEndDataTableChocoboRacePartsData::PartsUnlockTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, SkillID) == 0x000044, "Member 'FEndDataTableChocoboRacePartsData::SkillID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, SkillNameTextID) == 0x00004C, "Member 'FEndDataTableChocoboRacePartsData::SkillNameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRacePartsData, SkillExplainTextID) == 0x000054, "Member 'FEndDataTableChocoboRacePartsData::SkillExplainTextID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceProcessData
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableChocoboRaceProcessData final : public FEndDataTableRowBase
{
public:
	class FName                                   WinStateTrigger;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LoseStateTrigger;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RetireStateTrigger;                                // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CancelStateTrigger;                                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ExtraStateTrigger0;                                // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ExtraStateTrigger1;                                // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WinStoryFlag;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboRaceProcessData) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceProcessData");
static_assert(sizeof(FEndDataTableChocoboRaceProcessData) == 0x000040, "Wrong size on FEndDataTableChocoboRaceProcessData");
static_assert(offsetof(FEndDataTableChocoboRaceProcessData, WinStateTrigger) == 0x000008, "Member 'FEndDataTableChocoboRaceProcessData::WinStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceProcessData, LoseStateTrigger) == 0x000010, "Member 'FEndDataTableChocoboRaceProcessData::LoseStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceProcessData, RetireStateTrigger) == 0x000018, "Member 'FEndDataTableChocoboRaceProcessData::RetireStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceProcessData, CancelStateTrigger) == 0x000020, "Member 'FEndDataTableChocoboRaceProcessData::CancelStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceProcessData, ExtraStateTrigger0) == 0x000028, "Member 'FEndDataTableChocoboRaceProcessData::ExtraStateTrigger0' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceProcessData, ExtraStateTrigger1) == 0x000030, "Member 'FEndDataTableChocoboRaceProcessData::ExtraStateTrigger1' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceProcessData, WinStoryFlag) == 0x000038, "Member 'FEndDataTableChocoboRaceProcessData::WinStoryFlag' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceRunningParameter
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableChocoboRaceRunningParameter final : public FEndDataTableRowBase
{
public:
	float                                         MaxSpeed;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxSpeedAir;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxSpeedSlope;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Acceleration;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Cornering;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GripInCourse;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Grip;                                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Intelligence;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxVitality;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Luck;                                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Agility;                                           // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Sense;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HeadBaseValue;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BodyBaseValue;                                     // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LegBaseValue;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          MotionType;                                        // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableChocoboRaceRunningParameter) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceRunningParameter");
static_assert(sizeof(FEndDataTableChocoboRaceRunningParameter) == 0x000050, "Wrong size on FEndDataTableChocoboRaceRunningParameter");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, MaxSpeed) == 0x000008, "Member 'FEndDataTableChocoboRaceRunningParameter::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, MaxSpeedAir) == 0x00000C, "Member 'FEndDataTableChocoboRaceRunningParameter::MaxSpeedAir' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, MaxSpeedSlope) == 0x000010, "Member 'FEndDataTableChocoboRaceRunningParameter::MaxSpeedSlope' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, Acceleration) == 0x000014, "Member 'FEndDataTableChocoboRaceRunningParameter::Acceleration' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, Weight) == 0x000018, "Member 'FEndDataTableChocoboRaceRunningParameter::Weight' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, Cornering) == 0x00001C, "Member 'FEndDataTableChocoboRaceRunningParameter::Cornering' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, GripInCourse) == 0x000020, "Member 'FEndDataTableChocoboRaceRunningParameter::GripInCourse' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, Grip) == 0x000024, "Member 'FEndDataTableChocoboRaceRunningParameter::Grip' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, Intelligence) == 0x000028, "Member 'FEndDataTableChocoboRaceRunningParameter::Intelligence' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, MaxVitality) == 0x00002C, "Member 'FEndDataTableChocoboRaceRunningParameter::MaxVitality' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, Luck) == 0x000030, "Member 'FEndDataTableChocoboRaceRunningParameter::Luck' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, Agility) == 0x000034, "Member 'FEndDataTableChocoboRaceRunningParameter::Agility' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, Sense) == 0x000038, "Member 'FEndDataTableChocoboRaceRunningParameter::Sense' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, HeadBaseValue) == 0x00003C, "Member 'FEndDataTableChocoboRaceRunningParameter::HeadBaseValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, BodyBaseValue) == 0x000040, "Member 'FEndDataTableChocoboRaceRunningParameter::BodyBaseValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, LegBaseValue) == 0x000044, "Member 'FEndDataTableChocoboRaceRunningParameter::LegBaseValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceRunningParameter, MotionType) == 0x000048, "Member 'FEndDataTableChocoboRaceRunningParameter::MotionType' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboRaceSkillCondition
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableChocoboRaceSkillCondition final : public FEndDataTableRowBase
{
public:
	int32                                         ConditionType;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 FloatParameter_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerParameter_Array;                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboRaceSkillCondition) == 0x000008, "Wrong alignment on FEndDataTableChocoboRaceSkillCondition");
static_assert(sizeof(FEndDataTableChocoboRaceSkillCondition) == 0x000030, "Wrong size on FEndDataTableChocoboRaceSkillCondition");
static_assert(offsetof(FEndDataTableChocoboRaceSkillCondition, ConditionType) == 0x000008, "Member 'FEndDataTableChocoboRaceSkillCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceSkillCondition, FloatParameter_Array) == 0x000010, "Member 'FEndDataTableChocoboRaceSkillCondition::FloatParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboRaceSkillCondition, IntegerParameter_Array) == 0x000020, "Member 'FEndDataTableChocoboRaceSkillCondition::IntegerParameter_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableChocoboStatus
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableChocoboStatus final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           HookNameArgument_Array;                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableChocoboStatus) == 0x000008, "Wrong alignment on FEndDataTableChocoboStatus");
static_assert(sizeof(FEndDataTableChocoboStatus) == 0x000020, "Wrong size on FEndDataTableChocoboStatus");
static_assert(offsetof(FEndDataTableChocoboStatus, UniqueId) == 0x000008, "Member 'FEndDataTableChocoboStatus::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboStatus, HookNameArgument_Array) == 0x000010, "Member 'FEndDataTableChocoboStatus::HookNameArgument_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableColosseumCondition
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableColosseumCondition final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           EnableStoryFlagID_Array;                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ConditionType;                                     // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ConditionOperatorType;                             // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StoryFlagId;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NameArgument_Array;                                // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableColosseumCondition) == 0x000008, "Wrong alignment on FEndDataTableColosseumCondition");
static_assert(sizeof(FEndDataTableColosseumCondition) == 0x000038, "Wrong size on FEndDataTableColosseumCondition");
static_assert(offsetof(FEndDataTableColosseumCondition, EnableStoryFlagID_Array) == 0x000008, "Member 'FEndDataTableColosseumCondition::EnableStoryFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumCondition, ConditionType) == 0x000018, "Member 'FEndDataTableColosseumCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumCondition, ConditionOperatorType) == 0x000019, "Member 'FEndDataTableColosseumCondition::ConditionOperatorType' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumCondition, Value) == 0x00001C, "Member 'FEndDataTableColosseumCondition::Value' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumCondition, StoryFlagId) == 0x000020, "Member 'FEndDataTableColosseumCondition::StoryFlagId' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumCondition, NameArgument_Array) == 0x000028, "Member 'FEndDataTableColosseumCondition::NameArgument_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableColosseumFadeParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableColosseumFadeParameter final : public FEndDataTableRowBase
{
public:
	int8                                          FadeType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          ObjNameType;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          ZOrderType;                                        // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Pauseable;                                         // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          UserNumber;                                        // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableColosseumFadeParameter) == 0x000008, "Wrong alignment on FEndDataTableColosseumFadeParameter");
static_assert(sizeof(FEndDataTableColosseumFadeParameter) == 0x000018, "Wrong size on FEndDataTableColosseumFadeParameter");
static_assert(offsetof(FEndDataTableColosseumFadeParameter, FadeType) == 0x000008, "Member 'FEndDataTableColosseumFadeParameter::FadeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFadeParameter, FadeTime) == 0x00000C, "Member 'FEndDataTableColosseumFadeParameter::FadeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFadeParameter, ObjNameType) == 0x000010, "Member 'FEndDataTableColosseumFadeParameter::ObjNameType' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFadeParameter, ZOrderType) == 0x000011, "Member 'FEndDataTableColosseumFadeParameter::ZOrderType' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFadeParameter, Pauseable) == 0x000012, "Member 'FEndDataTableColosseumFadeParameter::Pauseable' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFadeParameter, UserNumber) == 0x000013, "Member 'FEndDataTableColosseumFadeParameter::UserNumber' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableColosseumFixedAbilities
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableColosseumFixedAbilities final : public FEndDataTableRowBase
{
public:
	class FName                                   PlayerTableId;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NormalCombinationAbility_BtnSquare;                // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NormalCombinationAbility_BtnTriangle;              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NormalCombinationAbility_BtnCircle;                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NormalCombinationAbility_BtnCross;                 // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ChainAbility_Array;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MagicAbilityID_Array;                              // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableColosseumFixedAbilities) == 0x000008, "Wrong alignment on FEndDataTableColosseumFixedAbilities");
static_assert(sizeof(FEndDataTableColosseumFixedAbilities) == 0x000050, "Wrong size on FEndDataTableColosseumFixedAbilities");
static_assert(offsetof(FEndDataTableColosseumFixedAbilities, PlayerTableId) == 0x000008, "Member 'FEndDataTableColosseumFixedAbilities::PlayerTableId' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFixedAbilities, NormalCombinationAbility_BtnSquare) == 0x000010, "Member 'FEndDataTableColosseumFixedAbilities::NormalCombinationAbility_BtnSquare' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFixedAbilities, NormalCombinationAbility_BtnTriangle) == 0x000018, "Member 'FEndDataTableColosseumFixedAbilities::NormalCombinationAbility_BtnTriangle' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFixedAbilities, NormalCombinationAbility_BtnCircle) == 0x000020, "Member 'FEndDataTableColosseumFixedAbilities::NormalCombinationAbility_BtnCircle' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFixedAbilities, NormalCombinationAbility_BtnCross) == 0x000028, "Member 'FEndDataTableColosseumFixedAbilities::NormalCombinationAbility_BtnCross' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFixedAbilities, ChainAbility_Array) == 0x000030, "Member 'FEndDataTableColosseumFixedAbilities::ChainAbility_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumFixedAbilities, MagicAbilityID_Array) == 0x000040, "Member 'FEndDataTableColosseumFixedAbilities::MagicAbilityID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCommonSaveDataConfig
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableCommonSaveDataConfig final : public FEndDataTableRowBase
{
public:
	uint8                                         DifficultyType;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         WaitMode;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LearnMenuCursor;                                   // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LearnBattleCursor;                                 // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NaviMapAutoRotate;                                 // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ViewTutorial;                                      // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ViewSubtitle;                                      // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AutoTalk;                                          // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FontSize;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetLockChangeMethodType;                        // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraSideRotType;                                 // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraVerticalRotType;                             // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ControllerVibration;                               // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SpeakerOutputType;                                 // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BgmVolume;                                         // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SeVolume;                                          // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         VoiceVolume;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BrightnessSetting;                                 // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TextLanguage;                                      // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         VoiceLanguage;                                     // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraLeapTime;                                    // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraLengthField;                                 // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraLengthBattle;                                // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ChangeKeyAssignForTargetLock;                      // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AutoUnlockForTargetLock;                           // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LockOnType;                                        // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SequenceNormalAttackTargetChange;                  // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraMoveFollow;                                  // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraSlopeFollow;                                 // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetLockChangeOperationType;                     // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraSpaceOffset;                                 // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ScreenVibration;                                   // 0x0027(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CameraAttackFollow;                                // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FriendCommandCameraType;                           // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AutoPlayMode;                                      // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ShowBattleGuide;                                   // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCommonSaveDataConfig) == 0x000008, "Wrong alignment on FEndDataTableCommonSaveDataConfig");
static_assert(sizeof(FEndDataTableCommonSaveDataConfig) == 0x000030, "Wrong size on FEndDataTableCommonSaveDataConfig");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, DifficultyType) == 0x000008, "Member 'FEndDataTableCommonSaveDataConfig::DifficultyType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, WaitMode) == 0x000009, "Member 'FEndDataTableCommonSaveDataConfig::WaitMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, LearnMenuCursor) == 0x00000A, "Member 'FEndDataTableCommonSaveDataConfig::LearnMenuCursor' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, LearnBattleCursor) == 0x00000B, "Member 'FEndDataTableCommonSaveDataConfig::LearnBattleCursor' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, NaviMapAutoRotate) == 0x00000C, "Member 'FEndDataTableCommonSaveDataConfig::NaviMapAutoRotate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ViewTutorial) == 0x00000D, "Member 'FEndDataTableCommonSaveDataConfig::ViewTutorial' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ViewSubtitle) == 0x00000E, "Member 'FEndDataTableCommonSaveDataConfig::ViewSubtitle' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, AutoTalk) == 0x00000F, "Member 'FEndDataTableCommonSaveDataConfig::AutoTalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, FontSize) == 0x000010, "Member 'FEndDataTableCommonSaveDataConfig::FontSize' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, TargetLockChangeMethodType) == 0x000011, "Member 'FEndDataTableCommonSaveDataConfig::TargetLockChangeMethodType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraSideRotType) == 0x000012, "Member 'FEndDataTableCommonSaveDataConfig::CameraSideRotType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraVerticalRotType) == 0x000013, "Member 'FEndDataTableCommonSaveDataConfig::CameraVerticalRotType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ControllerVibration) == 0x000014, "Member 'FEndDataTableCommonSaveDataConfig::ControllerVibration' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, SpeakerOutputType) == 0x000015, "Member 'FEndDataTableCommonSaveDataConfig::SpeakerOutputType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, BgmVolume) == 0x000016, "Member 'FEndDataTableCommonSaveDataConfig::BgmVolume' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, SeVolume) == 0x000017, "Member 'FEndDataTableCommonSaveDataConfig::SeVolume' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, VoiceVolume) == 0x000018, "Member 'FEndDataTableCommonSaveDataConfig::VoiceVolume' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, BrightnessSetting) == 0x000019, "Member 'FEndDataTableCommonSaveDataConfig::BrightnessSetting' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, TextLanguage) == 0x00001A, "Member 'FEndDataTableCommonSaveDataConfig::TextLanguage' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, VoiceLanguage) == 0x00001B, "Member 'FEndDataTableCommonSaveDataConfig::VoiceLanguage' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraLeapTime) == 0x00001C, "Member 'FEndDataTableCommonSaveDataConfig::CameraLeapTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraLengthField) == 0x00001D, "Member 'FEndDataTableCommonSaveDataConfig::CameraLengthField' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraLengthBattle) == 0x00001E, "Member 'FEndDataTableCommonSaveDataConfig::CameraLengthBattle' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ChangeKeyAssignForTargetLock) == 0x00001F, "Member 'FEndDataTableCommonSaveDataConfig::ChangeKeyAssignForTargetLock' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, AutoUnlockForTargetLock) == 0x000020, "Member 'FEndDataTableCommonSaveDataConfig::AutoUnlockForTargetLock' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, LockOnType) == 0x000021, "Member 'FEndDataTableCommonSaveDataConfig::LockOnType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, SequenceNormalAttackTargetChange) == 0x000022, "Member 'FEndDataTableCommonSaveDataConfig::SequenceNormalAttackTargetChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraMoveFollow) == 0x000023, "Member 'FEndDataTableCommonSaveDataConfig::CameraMoveFollow' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraSlopeFollow) == 0x000024, "Member 'FEndDataTableCommonSaveDataConfig::CameraSlopeFollow' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, TargetLockChangeOperationType) == 0x000025, "Member 'FEndDataTableCommonSaveDataConfig::TargetLockChangeOperationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraSpaceOffset) == 0x000026, "Member 'FEndDataTableCommonSaveDataConfig::CameraSpaceOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ScreenVibration) == 0x000027, "Member 'FEndDataTableCommonSaveDataConfig::ScreenVibration' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraAttackFollow) == 0x000028, "Member 'FEndDataTableCommonSaveDataConfig::CameraAttackFollow' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, FriendCommandCameraType) == 0x000029, "Member 'FEndDataTableCommonSaveDataConfig::FriendCommandCameraType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, AutoPlayMode) == 0x00002A, "Member 'FEndDataTableCommonSaveDataConfig::AutoPlayMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ShowBattleGuide) == 0x00002B, "Member 'FEndDataTableCommonSaveDataConfig::ShowBattleGuide' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCondorCommanderAI
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableCondorCommanderAI final : public FEndDataTableRowBase
{
public:
	class FName                                   action1;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   action2;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   action3;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   action4;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   action5;                                           // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   action6;                                           // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   action7;                                           // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   action8;                                           // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCondorCommanderAI) == 0x000008, "Wrong alignment on FEndDataTableCondorCommanderAI");
static_assert(sizeof(FEndDataTableCondorCommanderAI) == 0x000048, "Wrong size on FEndDataTableCondorCommanderAI");
static_assert(offsetof(FEndDataTableCondorCommanderAI, action1) == 0x000008, "Member 'FEndDataTableCondorCommanderAI::action1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderAI, action2) == 0x000010, "Member 'FEndDataTableCondorCommanderAI::action2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderAI, action3) == 0x000018, "Member 'FEndDataTableCondorCommanderAI::action3' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderAI, action4) == 0x000020, "Member 'FEndDataTableCondorCommanderAI::action4' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderAI, action5) == 0x000028, "Member 'FEndDataTableCondorCommanderAI::action5' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderAI, action6) == 0x000030, "Member 'FEndDataTableCondorCommanderAI::action6' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderAI, action7) == 0x000038, "Member 'FEndDataTableCondorCommanderAI::action7' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorCommanderAI, action8) == 0x000040, "Member 'FEndDataTableCondorCommanderAI::action8' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCondorFortCommonParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCondorFortCommonParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ParamString;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ParamFloat;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCondorFortCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableCondorFortCommonParameter");
static_assert(sizeof(FEndDataTableCondorFortCommonParameter) == 0x000018, "Wrong size on FEndDataTableCondorFortCommonParameter");
static_assert(offsetof(FEndDataTableCondorFortCommonParameter, ParamString) == 0x000008, "Member 'FEndDataTableCondorFortCommonParameter::ParamString' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCommonParameter, ParamFloat) == 0x000010, "Member 'FEndDataTableCondorFortCommonParameter::ParamFloat' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCondorFortDeck
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableCondorFortDeck final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           UniqueUnitID_Array;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           UnitPresetID_Array;                                // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCondorFortDeck) == 0x000008, "Wrong alignment on FEndDataTableCondorFortDeck");
static_assert(sizeof(FEndDataTableCondorFortDeck) == 0x000028, "Wrong size on FEndDataTableCondorFortDeck");
static_assert(offsetof(FEndDataTableCondorFortDeck, UniqueUnitID_Array) == 0x000008, "Member 'FEndDataTableCondorFortDeck::UniqueUnitID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortDeck, UnitPresetID_Array) == 0x000018, "Member 'FEndDataTableCondorFortDeck::UnitPresetID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCondorFortTimeline
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableCondorFortTimeline final : public FEndDataTableRowBase
{
public:
	class FName                                   WaveID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ElementID;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Time;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetPoint;                                       // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetX;                                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetY;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetZ;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PositionForUI;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCondorFortTimeline) == 0x000008, "Wrong alignment on FEndDataTableCondorFortTimeline");
static_assert(sizeof(FEndDataTableCondorFortTimeline) == 0x000038, "Wrong size on FEndDataTableCondorFortTimeline");
static_assert(offsetof(FEndDataTableCondorFortTimeline, WaveID) == 0x000008, "Member 'FEndDataTableCondorFortTimeline::WaveID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortTimeline, ElementID) == 0x000010, "Member 'FEndDataTableCondorFortTimeline::ElementID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortTimeline, Time) == 0x000018, "Member 'FEndDataTableCondorFortTimeline::Time' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortTimeline, TargetPoint) == 0x00001C, "Member 'FEndDataTableCondorFortTimeline::TargetPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortTimeline, OffsetX) == 0x000024, "Member 'FEndDataTableCondorFortTimeline::OffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortTimeline, OffsetY) == 0x000028, "Member 'FEndDataTableCondorFortTimeline::OffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortTimeline, OffsetZ) == 0x00002C, "Member 'FEndDataTableCondorFortTimeline::OffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortTimeline, PositionForUI) == 0x000030, "Member 'FEndDataTableCondorFortTimeline::PositionForUI' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCondorFortUnit
// 0x00F8 (0x0100 - 0x0008)
struct FEndDataTableCondorFortUnit final : public FEndDataTableRowBase
{
public:
	class FName                                   NameTextID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HelpTextId;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Icon;                                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Image;                                             // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Rank;                                              // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Role;                                              // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsHealer;                                          // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost;                                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SortOrder;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HideInPrepareWindow;                               // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharaSpecID;                                       // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveSpeed;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MoveType;                                          // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnTime;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SpawnAbility;                                      // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AttackAbility;                                     // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveInterval;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveDistance;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SearchRange;                                       // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackRange;                                       // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttackInterval;                                    // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetTower;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetGround;                                      // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetAir;                                         // 0x0072(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UnitParameterID;                                   // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnemyCategory;                                     // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 PropertyResist_Array;                              // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 AttributeResist_Array;                             // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 StatusChangeResist_Array;                          // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SpecialResist_Array;                               // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         KeepValue;                                         // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableLaunch;                                     // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableKnockback;                                  // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SubUnitID_Array;                                   // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         OffsetZ;                                           // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableTargetLine;                                 // 0x00DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetLineAttachSocket;                            // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AimTargetSocket;                                   // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StatusChangeEffectAttachSocket;                    // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OverlapEffectNameOnFocused;                        // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCondorFortUnit) == 0x000008, "Wrong alignment on FEndDataTableCondorFortUnit");
static_assert(sizeof(FEndDataTableCondorFortUnit) == 0x000100, "Wrong size on FEndDataTableCondorFortUnit");
static_assert(offsetof(FEndDataTableCondorFortUnit, NameTextID) == 0x000008, "Member 'FEndDataTableCondorFortUnit::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, HelpTextId) == 0x000010, "Member 'FEndDataTableCondorFortUnit::HelpTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, Icon) == 0x000018, "Member 'FEndDataTableCondorFortUnit::Icon' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, Image) == 0x000020, "Member 'FEndDataTableCondorFortUnit::Image' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, Rank) == 0x000028, "Member 'FEndDataTableCondorFortUnit::Rank' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, Role) == 0x000029, "Member 'FEndDataTableCondorFortUnit::Role' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, IsHealer) == 0x00002A, "Member 'FEndDataTableCondorFortUnit::IsHealer' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, Cost) == 0x00002C, "Member 'FEndDataTableCondorFortUnit::Cost' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, SortOrder) == 0x000030, "Member 'FEndDataTableCondorFortUnit::SortOrder' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, HideInPrepareWindow) == 0x000034, "Member 'FEndDataTableCondorFortUnit::HideInPrepareWindow' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, CharaSpecID) == 0x000038, "Member 'FEndDataTableCondorFortUnit::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, MoveSpeed) == 0x000040, "Member 'FEndDataTableCondorFortUnit::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, MoveType) == 0x000044, "Member 'FEndDataTableCondorFortUnit::MoveType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, SpawnTime) == 0x000048, "Member 'FEndDataTableCondorFortUnit::SpawnTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, SpawnAbility) == 0x00004C, "Member 'FEndDataTableCondorFortUnit::SpawnAbility' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, AttackAbility) == 0x000054, "Member 'FEndDataTableCondorFortUnit::AttackAbility' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, MoveInterval) == 0x00005C, "Member 'FEndDataTableCondorFortUnit::MoveInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, MoveDistance) == 0x000060, "Member 'FEndDataTableCondorFortUnit::MoveDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, SearchRange) == 0x000064, "Member 'FEndDataTableCondorFortUnit::SearchRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, AttackRange) == 0x000068, "Member 'FEndDataTableCondorFortUnit::AttackRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, AttackInterval) == 0x00006C, "Member 'FEndDataTableCondorFortUnit::AttackInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, TargetTower) == 0x000070, "Member 'FEndDataTableCondorFortUnit::TargetTower' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, TargetGround) == 0x000071, "Member 'FEndDataTableCondorFortUnit::TargetGround' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, TargetAir) == 0x000072, "Member 'FEndDataTableCondorFortUnit::TargetAir' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, UnitParameterID) == 0x000074, "Member 'FEndDataTableCondorFortUnit::UnitParameterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, EnemyCategory) == 0x00007C, "Member 'FEndDataTableCondorFortUnit::EnemyCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, PropertyResist_Array) == 0x000080, "Member 'FEndDataTableCondorFortUnit::PropertyResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, AttributeResist_Array) == 0x000090, "Member 'FEndDataTableCondorFortUnit::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, StatusChangeResist_Array) == 0x0000A0, "Member 'FEndDataTableCondorFortUnit::StatusChangeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, SpecialResist_Array) == 0x0000B0, "Member 'FEndDataTableCondorFortUnit::SpecialResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, KeepValue) == 0x0000C0, "Member 'FEndDataTableCondorFortUnit::KeepValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, DisableLaunch) == 0x0000C1, "Member 'FEndDataTableCondorFortUnit::DisableLaunch' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, DisableKnockback) == 0x0000C2, "Member 'FEndDataTableCondorFortUnit::DisableKnockback' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, SubUnitID_Array) == 0x0000C8, "Member 'FEndDataTableCondorFortUnit::SubUnitID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, OffsetZ) == 0x0000D8, "Member 'FEndDataTableCondorFortUnit::OffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, DisableTargetLine) == 0x0000DC, "Member 'FEndDataTableCondorFortUnit::DisableTargetLine' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, TargetLineAttachSocket) == 0x0000E0, "Member 'FEndDataTableCondorFortUnit::TargetLineAttachSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, AimTargetSocket) == 0x0000E8, "Member 'FEndDataTableCondorFortUnit::AimTargetSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, StatusChangeEffectAttachSocket) == 0x0000F0, "Member 'FEndDataTableCondorFortUnit::StatusChangeEffectAttachSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, OverlapEffectNameOnFocused) == 0x0000F8, "Member 'FEndDataTableCondorFortUnit::OverlapEffectNameOnFocused' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCondorFortUnitParameter
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableCondorFortUnitParameter final : public FEndDataTableRowBase
{
public:
	int32                                         Health;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Attack;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCondorFortUnitParameter) == 0x000008, "Wrong alignment on FEndDataTableCondorFortUnitParameter");
static_assert(sizeof(FEndDataTableCondorFortUnitParameter) == 0x000010, "Wrong size on FEndDataTableCondorFortUnitParameter");
static_assert(offsetof(FEndDataTableCondorFortUnitParameter, Health) == 0x000008, "Member 'FEndDataTableCondorFortUnitParameter::Health' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnitParameter, Attack) == 0x00000C, "Member 'FEndDataTableCondorFortUnitParameter::Attack' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCondorFortUnitPreset
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableCondorFortUnitPreset final : public FEndDataTableRowBase
{
public:
	class FName                                   HelpTextId;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MainTowerID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SubTowerID;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           UnitID_Array;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int16>                                 UnitSpawnableCount_Array;                          // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCondorFortUnitPreset) == 0x000008, "Wrong alignment on FEndDataTableCondorFortUnitPreset");
static_assert(sizeof(FEndDataTableCondorFortUnitPreset) == 0x000040, "Wrong size on FEndDataTableCondorFortUnitPreset");
static_assert(offsetof(FEndDataTableCondorFortUnitPreset, HelpTextId) == 0x000008, "Member 'FEndDataTableCondorFortUnitPreset::HelpTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnitPreset, MainTowerID) == 0x000010, "Member 'FEndDataTableCondorFortUnitPreset::MainTowerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnitPreset, SubTowerID) == 0x000018, "Member 'FEndDataTableCondorFortUnitPreset::SubTowerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnitPreset, UnitID_Array) == 0x000020, "Member 'FEndDataTableCondorFortUnitPreset::UnitID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnitPreset, UnitSpawnableCount_Array) == 0x000030, "Member 'FEndDataTableCondorFortUnitPreset::UnitSpawnableCount_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCounters
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCounters final : public FEndDataTableRowBase
{
public:
	int32                                         ArrayIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MinValue;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxValue;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CallbackFuncType;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCounters) == 0x000008, "Wrong alignment on FEndDataTableCounters");
static_assert(sizeof(FEndDataTableCounters) == 0x000018, "Wrong size on FEndDataTableCounters");
static_assert(offsetof(FEndDataTableCounters, ArrayIndex) == 0x000008, "Member 'FEndDataTableCounters::ArrayIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCounters, MinValue) == 0x00000C, "Member 'FEndDataTableCounters::MinValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableCounters, MaxValue) == 0x000010, "Member 'FEndDataTableCounters::MaxValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableCounters, CallbackFuncType) == 0x000014, "Member 'FEndDataTableCounters::CallbackFuncType' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCraftLevel
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableCraftLevel final : public FEndDataTableRowBase
{
public:
	int32                                         CraftExperienceValue;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CraftLevel;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCraftLevel) == 0x000008, "Wrong alignment on FEndDataTableCraftLevel");
static_assert(sizeof(FEndDataTableCraftLevel) == 0x000010, "Wrong size on FEndDataTableCraftLevel");
static_assert(offsetof(FEndDataTableCraftLevel, CraftExperienceValue) == 0x000008, "Member 'FEndDataTableCraftLevel::CraftExperienceValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableCraftLevel, CraftLevel) == 0x00000C, "Member 'FEndDataTableCraftLevel::CraftLevel' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCrystalAnalysisLocationParameter
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableCrystalAnalysisLocationParameter final : public FEndDataTableRowBase
{
public:
	float                                         Bpm;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int8>                                  Note_Array;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCrystalAnalysisLocationParameter) == 0x000008, "Wrong alignment on FEndDataTableCrystalAnalysisLocationParameter");
static_assert(sizeof(FEndDataTableCrystalAnalysisLocationParameter) == 0x000020, "Wrong size on FEndDataTableCrystalAnalysisLocationParameter");
static_assert(offsetof(FEndDataTableCrystalAnalysisLocationParameter, Bpm) == 0x000008, "Member 'FEndDataTableCrystalAnalysisLocationParameter::Bpm' has a wrong offset!");
static_assert(offsetof(FEndDataTableCrystalAnalysisLocationParameter, Note_Array) == 0x000010, "Member 'FEndDataTableCrystalAnalysisLocationParameter::Note_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCurrencyDetail
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableCurrencyDetail final : public FEndDataTableRowBase
{
public:
	class FString                                 ShopShortName;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BuyConfirmText;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BuyMateriaConfirmText;                             // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShortageText;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ShopBuyText;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         iconIndex;                                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCurrencyDetail) == 0x000008, "Wrong alignment on FEndDataTableCurrencyDetail");
static_assert(sizeof(FEndDataTableCurrencyDetail) == 0x000060, "Wrong size on FEndDataTableCurrencyDetail");
static_assert(offsetof(FEndDataTableCurrencyDetail, ShopShortName) == 0x000008, "Member 'FEndDataTableCurrencyDetail::ShopShortName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCurrencyDetail, BuyConfirmText) == 0x000018, "Member 'FEndDataTableCurrencyDetail::BuyConfirmText' has a wrong offset!");
static_assert(offsetof(FEndDataTableCurrencyDetail, BuyMateriaConfirmText) == 0x000028, "Member 'FEndDataTableCurrencyDetail::BuyMateriaConfirmText' has a wrong offset!");
static_assert(offsetof(FEndDataTableCurrencyDetail, ShortageText) == 0x000038, "Member 'FEndDataTableCurrencyDetail::ShortageText' has a wrong offset!");
static_assert(offsetof(FEndDataTableCurrencyDetail, ShopBuyText) == 0x000048, "Member 'FEndDataTableCurrencyDetail::ShopBuyText' has a wrong offset!");
static_assert(offsetof(FEndDataTableCurrencyDetail, iconIndex) == 0x000058, "Member 'FEndDataTableCurrencyDetail::iconIndex' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCutsceneAssetDataSize
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableCutsceneAssetDataSize final : public FEndDataTableRowBase
{
public:
	class FName                                   SecondaryID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PrimarySize;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SecondarySize;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CategoryFlag;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OrderNumber;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PreviousEventList_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SpawnInCutCharaList_Array;                         // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCutsceneAssetDataSize) == 0x000008, "Wrong alignment on FEndDataTableCutsceneAssetDataSize");
static_assert(sizeof(FEndDataTableCutsceneAssetDataSize) == 0x000040, "Wrong size on FEndDataTableCutsceneAssetDataSize");
static_assert(offsetof(FEndDataTableCutsceneAssetDataSize, SecondaryID) == 0x000008, "Member 'FEndDataTableCutsceneAssetDataSize::SecondaryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutsceneAssetDataSize, PrimarySize) == 0x000010, "Member 'FEndDataTableCutsceneAssetDataSize::PrimarySize' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutsceneAssetDataSize, SecondarySize) == 0x000014, "Member 'FEndDataTableCutsceneAssetDataSize::SecondarySize' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutsceneAssetDataSize, CategoryFlag) == 0x000018, "Member 'FEndDataTableCutsceneAssetDataSize::CategoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutsceneAssetDataSize, OrderNumber) == 0x00001C, "Member 'FEndDataTableCutsceneAssetDataSize::OrderNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutsceneAssetDataSize, PreviousEventList_Array) == 0x000020, "Member 'FEndDataTableCutsceneAssetDataSize::PreviousEventList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutsceneAssetDataSize, SpawnInCutCharaList_Array) == 0x000030, "Member 'FEndDataTableCutsceneAssetDataSize::SpawnInCutCharaList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCutSceneBindActorList
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableCutSceneBindActorList final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           BindActorName_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BindStateTriggerName_Array;                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 BindStateTriggerTime_Array;                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCutSceneBindActorList) == 0x000008, "Wrong alignment on FEndDataTableCutSceneBindActorList");
static_assert(sizeof(FEndDataTableCutSceneBindActorList) == 0x000038, "Wrong size on FEndDataTableCutSceneBindActorList");
static_assert(offsetof(FEndDataTableCutSceneBindActorList, BindActorName_Array) == 0x000008, "Member 'FEndDataTableCutSceneBindActorList::BindActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneBindActorList, BindStateTriggerName_Array) == 0x000018, "Member 'FEndDataTableCutSceneBindActorList::BindStateTriggerName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneBindActorList, BindStateTriggerTime_Array) == 0x000028, "Member 'FEndDataTableCutSceneBindActorList::BindStateTriggerTime_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCutSceneChangeEquipList
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableCutSceneChangeEquipList final : public FEndDataTableRowBase
{
public:
	class FName                                   TargetCharacterName;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AfterWeaponID;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BeforeWeaponIDArray_Array;                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCutSceneChangeEquipList) == 0x000008, "Wrong alignment on FEndDataTableCutSceneChangeEquipList");
static_assert(sizeof(FEndDataTableCutSceneChangeEquipList) == 0x000028, "Wrong size on FEndDataTableCutSceneChangeEquipList");
static_assert(offsetof(FEndDataTableCutSceneChangeEquipList, TargetCharacterName) == 0x000008, "Member 'FEndDataTableCutSceneChangeEquipList::TargetCharacterName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneChangeEquipList, AfterWeaponID) == 0x000010, "Member 'FEndDataTableCutSceneChangeEquipList::AfterWeaponID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneChangeEquipList, BeforeWeaponIDArray_Array) == 0x000018, "Member 'FEndDataTableCutSceneChangeEquipList::BeforeWeaponIDArray_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableCutSceneList
// 0x0258 (0x0260 - 0x0008)
struct FEndDataTableCutSceneList final : public FEndDataTableRowBase
{
public:
	class FName                                   LocationName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BaseTransformId;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideEnableDrawDistance;                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverrideInCameraTickDistance;                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         VehicleGetOffOption;                               // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StartCameraBlend;                                  // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartCameraBlendType;                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StartAimBlendType;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StartFovBlendType;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StartCameraBlendTime;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EndCameraBlend;                                    // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EndCameraBlendType;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EndAimBlendType;                                   // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EndFovBlendType;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EndCameraBlendTime;                                // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EndCameraBlendDuration;                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LevelTimingReadyCutScene;                          // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InMotionBlendFrame;                                // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PopCharaLimitOnTick;                               // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DepopCharaLimitOnTick;                             // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ViewSlaveLocationFarClippingPlane;                 // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ViewSlaveLocationStaticShadowFarClippingPlane;     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ViewSlaveLocationStaticShadowFOVOffset;            // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MoviePasteActorID;                                 // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MoviePasteActorName;                               // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MoviePlayMode;                                     // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DebugStreamVolLabelList_Array;                     // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DebugStreamVolStatusList_Array;                    // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   DebugChapterID;                                    // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DebugProgress;                                     // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DebugSkyVolumeLabel;                               // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DebugSkySwitchLabel;                               // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DebugSkySwitchType;                                // 0x00BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DebugTimeSetVolumeLabelList_Array;                 // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DebugTimeSetSwitchLabelList_Array;                 // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DebugTimeSetSwitchTypeList_Array;                  // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DebugAdditionalLevelList_Array;                    // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaCharaSpecName1;                             // 0x0100(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaAttachActorName1;                           // 0x0110(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaAttachSocketName1;                          // 0x0120(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaCharaSpecName2;                             // 0x0130(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaAttachActorName2;                           // 0x0140(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaAttachSocketName2;                          // 0x0150(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaCharaSpecName3;                             // 0x0160(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaAttachActorName3;                           // 0x0170(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaAttachSocketName3;                          // 0x0180(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaCharaSpecName4;                             // 0x0190(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaAttachActorName4;                           // 0x01A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaAttachSocketName4;                          // 0x01B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaCharaSpecName5;                             // 0x01C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaAttachActorName5;                           // 0x01D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugFaAttachSocketName5;                          // 0x01E0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ExtraFlags;                                        // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EventType;                                         // 0x01F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AssetPackActorName;                                // 0x01F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SoundPackName;                                     // 0x0200(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   VoicePackName;                                     // 0x0208(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EffectPackName;                                    // 0x0210(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BodyPackName;                                      // 0x0218(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FacialPackName;                                    // 0x0220(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ExtraPackName;                                     // 0x0228(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   IDTablePackName;                                   // 0x0230(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MoviePackName;                                     // 0x0238(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DebugTimeSetDefaultSuffix;                         // 0x0240(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CutsceneTestTitle;                                 // 0x0250(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableCutSceneList) == 0x000008, "Wrong alignment on FEndDataTableCutSceneList");
static_assert(sizeof(FEndDataTableCutSceneList) == 0x000260, "Wrong size on FEndDataTableCutSceneList");
static_assert(offsetof(FEndDataTableCutSceneList, LocationName) == 0x000008, "Member 'FEndDataTableCutSceneList::LocationName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, BaseTransformId) == 0x000010, "Member 'FEndDataTableCutSceneList::BaseTransformId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, OverrideEnableDrawDistance) == 0x000018, "Member 'FEndDataTableCutSceneList::OverrideEnableDrawDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, OverrideInCameraTickDistance) == 0x00001C, "Member 'FEndDataTableCutSceneList::OverrideInCameraTickDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, VehicleGetOffOption) == 0x000020, "Member 'FEndDataTableCutSceneList::VehicleGetOffOption' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartCameraBlend) == 0x000021, "Member 'FEndDataTableCutSceneList::StartCameraBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartCameraBlendType) == 0x000024, "Member 'FEndDataTableCutSceneList::StartCameraBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartAimBlendType) == 0x000028, "Member 'FEndDataTableCutSceneList::StartAimBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartFovBlendType) == 0x00002C, "Member 'FEndDataTableCutSceneList::StartFovBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartCameraBlendTime) == 0x000030, "Member 'FEndDataTableCutSceneList::StartCameraBlendTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndCameraBlend) == 0x000034, "Member 'FEndDataTableCutSceneList::EndCameraBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndCameraBlendType) == 0x000038, "Member 'FEndDataTableCutSceneList::EndCameraBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndAimBlendType) == 0x00003C, "Member 'FEndDataTableCutSceneList::EndAimBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndFovBlendType) == 0x000040, "Member 'FEndDataTableCutSceneList::EndFovBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndCameraBlendTime) == 0x000044, "Member 'FEndDataTableCutSceneList::EndCameraBlendTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndCameraBlendDuration) == 0x000048, "Member 'FEndDataTableCutSceneList::EndCameraBlendDuration' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, LevelTimingReadyCutScene) == 0x00004C, "Member 'FEndDataTableCutSceneList::LevelTimingReadyCutScene' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, InMotionBlendFrame) == 0x000050, "Member 'FEndDataTableCutSceneList::InMotionBlendFrame' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, PopCharaLimitOnTick) == 0x000054, "Member 'FEndDataTableCutSceneList::PopCharaLimitOnTick' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DepopCharaLimitOnTick) == 0x000058, "Member 'FEndDataTableCutSceneList::DepopCharaLimitOnTick' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, ViewSlaveLocationFarClippingPlane) == 0x00005C, "Member 'FEndDataTableCutSceneList::ViewSlaveLocationFarClippingPlane' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, ViewSlaveLocationStaticShadowFarClippingPlane) == 0x000060, "Member 'FEndDataTableCutSceneList::ViewSlaveLocationStaticShadowFarClippingPlane' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, ViewSlaveLocationStaticShadowFOVOffset) == 0x000064, "Member 'FEndDataTableCutSceneList::ViewSlaveLocationStaticShadowFOVOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, MoviePasteActorID) == 0x000068, "Member 'FEndDataTableCutSceneList::MoviePasteActorID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, MoviePasteActorName) == 0x000070, "Member 'FEndDataTableCutSceneList::MoviePasteActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, MoviePlayMode) == 0x000078, "Member 'FEndDataTableCutSceneList::MoviePlayMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugStreamVolLabelList_Array) == 0x000080, "Member 'FEndDataTableCutSceneList::DebugStreamVolLabelList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugStreamVolStatusList_Array) == 0x000090, "Member 'FEndDataTableCutSceneList::DebugStreamVolStatusList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugChapterID) == 0x0000A0, "Member 'FEndDataTableCutSceneList::DebugChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugProgress) == 0x0000A8, "Member 'FEndDataTableCutSceneList::DebugProgress' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugSkyVolumeLabel) == 0x0000AC, "Member 'FEndDataTableCutSceneList::DebugSkyVolumeLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugSkySwitchLabel) == 0x0000B4, "Member 'FEndDataTableCutSceneList::DebugSkySwitchLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugSkySwitchType) == 0x0000BC, "Member 'FEndDataTableCutSceneList::DebugSkySwitchType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugTimeSetVolumeLabelList_Array) == 0x0000C0, "Member 'FEndDataTableCutSceneList::DebugTimeSetVolumeLabelList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugTimeSetSwitchLabelList_Array) == 0x0000D0, "Member 'FEndDataTableCutSceneList::DebugTimeSetSwitchLabelList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugTimeSetSwitchTypeList_Array) == 0x0000E0, "Member 'FEndDataTableCutSceneList::DebugTimeSetSwitchTypeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugAdditionalLevelList_Array) == 0x0000F0, "Member 'FEndDataTableCutSceneList::DebugAdditionalLevelList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaCharaSpecName1) == 0x000100, "Member 'FEndDataTableCutSceneList::DebugFaCharaSpecName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachActorName1) == 0x000110, "Member 'FEndDataTableCutSceneList::DebugFaAttachActorName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachSocketName1) == 0x000120, "Member 'FEndDataTableCutSceneList::DebugFaAttachSocketName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaCharaSpecName2) == 0x000130, "Member 'FEndDataTableCutSceneList::DebugFaCharaSpecName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachActorName2) == 0x000140, "Member 'FEndDataTableCutSceneList::DebugFaAttachActorName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachSocketName2) == 0x000150, "Member 'FEndDataTableCutSceneList::DebugFaAttachSocketName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaCharaSpecName3) == 0x000160, "Member 'FEndDataTableCutSceneList::DebugFaCharaSpecName3' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachActorName3) == 0x000170, "Member 'FEndDataTableCutSceneList::DebugFaAttachActorName3' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachSocketName3) == 0x000180, "Member 'FEndDataTableCutSceneList::DebugFaAttachSocketName3' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaCharaSpecName4) == 0x000190, "Member 'FEndDataTableCutSceneList::DebugFaCharaSpecName4' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachActorName4) == 0x0001A0, "Member 'FEndDataTableCutSceneList::DebugFaAttachActorName4' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachSocketName4) == 0x0001B0, "Member 'FEndDataTableCutSceneList::DebugFaAttachSocketName4' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaCharaSpecName5) == 0x0001C0, "Member 'FEndDataTableCutSceneList::DebugFaCharaSpecName5' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachActorName5) == 0x0001D0, "Member 'FEndDataTableCutSceneList::DebugFaAttachActorName5' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachSocketName5) == 0x0001E0, "Member 'FEndDataTableCutSceneList::DebugFaAttachSocketName5' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, ExtraFlags) == 0x0001F0, "Member 'FEndDataTableCutSceneList::ExtraFlags' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EventType) == 0x0001F4, "Member 'FEndDataTableCutSceneList::EventType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, AssetPackActorName) == 0x0001F8, "Member 'FEndDataTableCutSceneList::AssetPackActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, SoundPackName) == 0x000200, "Member 'FEndDataTableCutSceneList::SoundPackName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, VoicePackName) == 0x000208, "Member 'FEndDataTableCutSceneList::VoicePackName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EffectPackName) == 0x000210, "Member 'FEndDataTableCutSceneList::EffectPackName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, BodyPackName) == 0x000218, "Member 'FEndDataTableCutSceneList::BodyPackName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, FacialPackName) == 0x000220, "Member 'FEndDataTableCutSceneList::FacialPackName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, ExtraPackName) == 0x000228, "Member 'FEndDataTableCutSceneList::ExtraPackName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, IDTablePackName) == 0x000230, "Member 'FEndDataTableCutSceneList::IDTablePackName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, MoviePackName) == 0x000238, "Member 'FEndDataTableCutSceneList::MoviePackName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugTimeSetDefaultSuffix) == 0x000240, "Member 'FEndDataTableCutSceneList::DebugTimeSetDefaultSuffix' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, CutsceneTestTitle) == 0x000250, "Member 'FEndDataTableCutSceneList::CutsceneTestTitle' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableDebugPartyList
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableDebugPartyList final : public FEndDataTableRowBase
{
public:
	class FName                                   ViewText;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DefaultData;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InitParamGroupID_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableDebugPartyList) == 0x000008, "Wrong alignment on FEndDataTableDebugPartyList");
static_assert(sizeof(FEndDataTableDebugPartyList) == 0x000028, "Wrong size on FEndDataTableDebugPartyList");
static_assert(offsetof(FEndDataTableDebugPartyList, ViewText) == 0x000008, "Member 'FEndDataTableDebugPartyList::ViewText' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugPartyList, DefaultData) == 0x000010, "Member 'FEndDataTableDebugPartyList::DefaultData' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugPartyList, InitParamGroupID_Array) == 0x000018, "Member 'FEndDataTableDebugPartyList::InitParamGroupID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableDolphinJumpItemParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableDolphinJumpItemParameter final : public FEndDataTableRowBase
{
public:
	float                                         AdditionalBaseSpeed;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AdditionalMaxSpeed;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AdditionalTension;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableDolphinJumpItemParameter) == 0x000008, "Wrong alignment on FEndDataTableDolphinJumpItemParameter");
static_assert(sizeof(FEndDataTableDolphinJumpItemParameter) == 0x000018, "Wrong size on FEndDataTableDolphinJumpItemParameter");
static_assert(offsetof(FEndDataTableDolphinJumpItemParameter, AdditionalBaseSpeed) == 0x000008, "Member 'FEndDataTableDolphinJumpItemParameter::AdditionalBaseSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpItemParameter, AdditionalMaxSpeed) == 0x00000C, "Member 'FEndDataTableDolphinJumpItemParameter::AdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpItemParameter, AdditionalTension) == 0x000010, "Member 'FEndDataTableDolphinJumpItemParameter::AdditionalTension' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableDolphinJumpParameter
// 0x0130 (0x0138 - 0x0008)
struct FEndDataTableDolphinJumpParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   DolphinJumpSpilneActorName;                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DolphinActorName;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MiniGameAssetPackerID;                             // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinSpeed;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxSpeed;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BaseSpeed;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AccelerationQuantity;                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AccelerationSeconds;                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AccelToNormalSeconds;                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DecelerationQuantity;                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DecelerationSeconds;                               // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DecelToNormalSeconds;                              // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BrakeSpeed;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BrakeScale;                                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BrakeSecondsMin;                                   // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BrakeSecondsMax;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BrakeToNormalSeonds;                               // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         JumpAngleDegree;                                   // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PhysicsAddTensionValue;                            // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InputStrength;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InputStrengthWhenDrift;                            // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EvaluateJump;                                      // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FailedStateTriggerName;                            // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SmallSuccessScore;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SmallSuccessStateTriggerName;                      // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MediumSuccessScore;                                // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MediumSuccessStateTriggerName;                     // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GreatSuccessScore;                                 // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GreatSuccessStateTriggerName;                      // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OutOfRankStateTriggerID;                           // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BronzSeconds;                                      // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BronzStateTriggerID;                               // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SilverSeconds;                                     // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SilverStateTriggerID;                              // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GoldSeconds;                                       // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GoldStateTriggerID;                                // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BronzRewardStoryFlagID;                            // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SilverRewardStoryFlagID;                           // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GoldRewardStoryFlagID;                             // 0x00D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WarpTargetPointNameForPlayer;                      // 0x00DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WarpTargetPointNameForDolphin;                     // 0x00E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HitStateTrigger;                                   // 0x00EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PhaseSeconds_Array;                                // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PhaseStateTrigger_Array;                           // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AdditionalBaseSpeedOfLevel_Array;                  // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 AdditionalMaxSpeedOfLevel_Array;                   // 0x0128(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableDolphinJumpParameter) == 0x000008, "Wrong alignment on FEndDataTableDolphinJumpParameter");
static_assert(sizeof(FEndDataTableDolphinJumpParameter) == 0x000138, "Wrong size on FEndDataTableDolphinJumpParameter");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, DolphinJumpSpilneActorName) == 0x000008, "Member 'FEndDataTableDolphinJumpParameter::DolphinJumpSpilneActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, DolphinActorName) == 0x000010, "Member 'FEndDataTableDolphinJumpParameter::DolphinActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, MiniGameAssetPackerID) == 0x000018, "Member 'FEndDataTableDolphinJumpParameter::MiniGameAssetPackerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, MinSpeed) == 0x000020, "Member 'FEndDataTableDolphinJumpParameter::MinSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, MaxSpeed) == 0x000024, "Member 'FEndDataTableDolphinJumpParameter::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, BaseSpeed) == 0x000028, "Member 'FEndDataTableDolphinJumpParameter::BaseSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, AccelerationQuantity) == 0x00002C, "Member 'FEndDataTableDolphinJumpParameter::AccelerationQuantity' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, AccelerationSeconds) == 0x000030, "Member 'FEndDataTableDolphinJumpParameter::AccelerationSeconds' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, AccelToNormalSeconds) == 0x000034, "Member 'FEndDataTableDolphinJumpParameter::AccelToNormalSeconds' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, DecelerationQuantity) == 0x000038, "Member 'FEndDataTableDolphinJumpParameter::DecelerationQuantity' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, DecelerationSeconds) == 0x00003C, "Member 'FEndDataTableDolphinJumpParameter::DecelerationSeconds' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, DecelToNormalSeconds) == 0x000040, "Member 'FEndDataTableDolphinJumpParameter::DecelToNormalSeconds' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, BrakeSpeed) == 0x000044, "Member 'FEndDataTableDolphinJumpParameter::BrakeSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, BrakeScale) == 0x000048, "Member 'FEndDataTableDolphinJumpParameter::BrakeScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, BrakeSecondsMin) == 0x00004C, "Member 'FEndDataTableDolphinJumpParameter::BrakeSecondsMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, BrakeSecondsMax) == 0x000050, "Member 'FEndDataTableDolphinJumpParameter::BrakeSecondsMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, BrakeToNormalSeonds) == 0x000054, "Member 'FEndDataTableDolphinJumpParameter::BrakeToNormalSeonds' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, JumpAngleDegree) == 0x000058, "Member 'FEndDataTableDolphinJumpParameter::JumpAngleDegree' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, PhysicsAddTensionValue) == 0x00005C, "Member 'FEndDataTableDolphinJumpParameter::PhysicsAddTensionValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, InputStrength) == 0x000060, "Member 'FEndDataTableDolphinJumpParameter::InputStrength' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, InputStrengthWhenDrift) == 0x000064, "Member 'FEndDataTableDolphinJumpParameter::InputStrengthWhenDrift' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, EvaluateJump) == 0x000068, "Member 'FEndDataTableDolphinJumpParameter::EvaluateJump' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, FailedStateTriggerName) == 0x00006C, "Member 'FEndDataTableDolphinJumpParameter::FailedStateTriggerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, SmallSuccessScore) == 0x000074, "Member 'FEndDataTableDolphinJumpParameter::SmallSuccessScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, SmallSuccessStateTriggerName) == 0x000078, "Member 'FEndDataTableDolphinJumpParameter::SmallSuccessStateTriggerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, MediumSuccessScore) == 0x000080, "Member 'FEndDataTableDolphinJumpParameter::MediumSuccessScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, MediumSuccessStateTriggerName) == 0x000084, "Member 'FEndDataTableDolphinJumpParameter::MediumSuccessStateTriggerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, GreatSuccessScore) == 0x00008C, "Member 'FEndDataTableDolphinJumpParameter::GreatSuccessScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, GreatSuccessStateTriggerName) == 0x000090, "Member 'FEndDataTableDolphinJumpParameter::GreatSuccessStateTriggerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, OutOfRankStateTriggerID) == 0x000098, "Member 'FEndDataTableDolphinJumpParameter::OutOfRankStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, BronzSeconds) == 0x0000A0, "Member 'FEndDataTableDolphinJumpParameter::BronzSeconds' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, BronzStateTriggerID) == 0x0000A4, "Member 'FEndDataTableDolphinJumpParameter::BronzStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, SilverSeconds) == 0x0000AC, "Member 'FEndDataTableDolphinJumpParameter::SilverSeconds' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, SilverStateTriggerID) == 0x0000B0, "Member 'FEndDataTableDolphinJumpParameter::SilverStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, GoldSeconds) == 0x0000B8, "Member 'FEndDataTableDolphinJumpParameter::GoldSeconds' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, GoldStateTriggerID) == 0x0000BC, "Member 'FEndDataTableDolphinJumpParameter::GoldStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, BronzRewardStoryFlagID) == 0x0000C4, "Member 'FEndDataTableDolphinJumpParameter::BronzRewardStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, SilverRewardStoryFlagID) == 0x0000CC, "Member 'FEndDataTableDolphinJumpParameter::SilverRewardStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, GoldRewardStoryFlagID) == 0x0000D4, "Member 'FEndDataTableDolphinJumpParameter::GoldRewardStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, WarpTargetPointNameForPlayer) == 0x0000DC, "Member 'FEndDataTableDolphinJumpParameter::WarpTargetPointNameForPlayer' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, WarpTargetPointNameForDolphin) == 0x0000E4, "Member 'FEndDataTableDolphinJumpParameter::WarpTargetPointNameForDolphin' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, HitStateTrigger) == 0x0000EC, "Member 'FEndDataTableDolphinJumpParameter::HitStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, PhaseSeconds_Array) == 0x0000F8, "Member 'FEndDataTableDolphinJumpParameter::PhaseSeconds_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, PhaseStateTrigger_Array) == 0x000108, "Member 'FEndDataTableDolphinJumpParameter::PhaseStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, AdditionalBaseSpeedOfLevel_Array) == 0x000118, "Member 'FEndDataTableDolphinJumpParameter::AdditionalBaseSpeedOfLevel_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableDolphinJumpParameter, AdditionalMaxSpeedOfLevel_Array) == 0x000128, "Member 'FEndDataTableDolphinJumpParameter::AdditionalMaxSpeedOfLevel_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEffectCharaProperty
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableEffectCharaProperty final : public FEndDataTableRowBase
{
public:
	uint8                                         EffectResourceCategory;                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EffectResourceName;                                // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SoundResourceCategory;                             // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SoundResourceName;                                 // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableEffectCharaProperty) == 0x000008, "Wrong alignment on FEndDataTableEffectCharaProperty");
static_assert(sizeof(FEndDataTableEffectCharaProperty) == 0x000030, "Wrong size on FEndDataTableEffectCharaProperty");
static_assert(offsetof(FEndDataTableEffectCharaProperty, EffectResourceCategory) == 0x000008, "Member 'FEndDataTableEffectCharaProperty::EffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffectCharaProperty, EffectResourceName) == 0x000010, "Member 'FEndDataTableEffectCharaProperty::EffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffectCharaProperty, SoundResourceCategory) == 0x000020, "Member 'FEndDataTableEffectCharaProperty::SoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffectCharaProperty, SoundResourceName) == 0x000024, "Member 'FEndDataTableEffectCharaProperty::SoundResourceName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEmotion
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEmotion final : public FEndDataTableRowBase
{
public:
	uint8                                         CanUpperBodyAnimation;                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MotionName_Array;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEmotion) == 0x000008, "Wrong alignment on FEndDataTableEmotion");
static_assert(sizeof(FEndDataTableEmotion) == 0x000020, "Wrong size on FEndDataTableEmotion");
static_assert(offsetof(FEndDataTableEmotion, CanUpperBodyAnimation) == 0x000008, "Member 'FEndDataTableEmotion::CanUpperBodyAnimation' has a wrong offset!");
static_assert(offsetof(FEndDataTableEmotion, MotionName_Array) == 0x000010, "Member 'FEndDataTableEmotion::MotionName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyAP
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableEnemyAP final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 Value_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyAP) == 0x000008, "Wrong alignment on FEndDataTableEnemyAP");
static_assert(sizeof(FEndDataTableEnemyAP) == 0x000018, "Wrong size on FEndDataTableEnemyAP");
static_assert(offsetof(FEndDataTableEnemyAP, Value_Array) == 0x000008, "Member 'FEndDataTableEnemyAP::Value_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyBookAbilites
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableEnemyBookAbilites final : public FEndDataTableRowBase
{
public:
	class FName                                   Description;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AbiliteName;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Property_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         EnableSilence;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableGuardImpossible;                             // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnemySkill;                                        // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Attribute_Array;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 StateChange_Array;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 StateChangeImpossible_Array;                       // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   LearningAbilitie;                                  // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyBookAbilites) == 0x000008, "Wrong alignment on FEndDataTableEnemyBookAbilites");
static_assert(sizeof(FEndDataTableEnemyBookAbilites) == 0x000068, "Wrong size on FEndDataTableEnemyBookAbilites");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, Description) == 0x000008, "Member 'FEndDataTableEnemyBookAbilites::Description' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, AbiliteName) == 0x000010, "Member 'FEndDataTableEnemyBookAbilites::AbiliteName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, Property_Array) == 0x000018, "Member 'FEndDataTableEnemyBookAbilites::Property_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, EnableSilence) == 0x000028, "Member 'FEndDataTableEnemyBookAbilites::EnableSilence' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, EnableGuardImpossible) == 0x000029, "Member 'FEndDataTableEnemyBookAbilites::EnableGuardImpossible' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, EnemySkill) == 0x00002A, "Member 'FEndDataTableEnemyBookAbilites::EnemySkill' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, Attribute_Array) == 0x000030, "Member 'FEndDataTableEnemyBookAbilites::Attribute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, StateChange_Array) == 0x000040, "Member 'FEndDataTableEnemyBookAbilites::StateChange_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, StateChangeImpossible_Array) == 0x000050, "Member 'FEndDataTableEnemyBookAbilites::StateChangeImpossible_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, LearningAbilitie) == 0x000060, "Member 'FEndDataTableEnemyBookAbilites::LearningAbilitie' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyBookAreaData
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableEnemyBookAreaData final : public FEndDataTableRowBase
{
public:
	class FString                                 TextId;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LocationIDList_Array;                              // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyBookAreaData) == 0x000008, "Wrong alignment on FEndDataTableEnemyBookAreaData");
static_assert(sizeof(FEndDataTableEnemyBookAreaData) == 0x000028, "Wrong size on FEndDataTableEnemyBookAreaData");
static_assert(offsetof(FEndDataTableEnemyBookAreaData, TextId) == 0x000008, "Member 'FEndDataTableEnemyBookAreaData::TextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAreaData, LocationIDList_Array) == 0x000018, "Member 'FEndDataTableEnemyBookAreaData::LocationIDList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyBookBattleAbility
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableEnemyBookBattleAbility final : public FEndDataTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ReplaceDamageSourceID;                             // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyBookBattleAbility) == 0x000008, "Wrong alignment on FEndDataTableEnemyBookBattleAbility");
static_assert(sizeof(FEndDataTableEnemyBookBattleAbility) == 0x000028, "Wrong size on FEndDataTableEnemyBookBattleAbility");
static_assert(offsetof(FEndDataTableEnemyBookBattleAbility, Name) == 0x000008, "Member 'FEndDataTableEnemyBookBattleAbility::Name' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleAbility, ReplaceDamageSourceID) == 0x000018, "Member 'FEndDataTableEnemyBookBattleAbility::ReplaceDamageSourceID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyBookBattleDamageSource
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEnemyBookBattleDamageSource final : public FEndDataTableRowBase
{
public:
	uint8                                         Property;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Attribute0;                                        // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Attribute1;                                        // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Attribute2;                                        // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Attribute3;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Attribute4;                                        // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Attribute5;                                        // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Attribute6;                                        // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 StatusChangeType_Array;                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyBookBattleDamageSource) == 0x000008, "Wrong alignment on FEndDataTableEnemyBookBattleDamageSource");
static_assert(sizeof(FEndDataTableEnemyBookBattleDamageSource) == 0x000020, "Wrong size on FEndDataTableEnemyBookBattleDamageSource");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Property) == 0x000008, "Member 'FEndDataTableEnemyBookBattleDamageSource::Property' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute0) == 0x000009, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute0' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute1) == 0x00000A, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute1' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute2) == 0x00000B, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute2' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute3) == 0x00000C, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute3' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute4) == 0x00000D, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute4' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute5) == 0x00000E, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute5' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute6) == 0x00000F, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute6' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, StatusChangeType_Array) == 0x000010, "Member 'FEndDataTableEnemyBookBattleDamageSource::StatusChangeType_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyEXP
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableEnemyEXP final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 Value_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyEXP) == 0x000008, "Wrong alignment on FEndDataTableEnemyEXP");
static_assert(sizeof(FEndDataTableEnemyEXP) == 0x000018, "Wrong size on FEndDataTableEnemyEXP");
static_assert(offsetof(FEndDataTableEnemyEXP, Value_Array) == 0x000008, "Member 'FEndDataTableEnemyEXP::Value_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnemyTerritoryGroup
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEnemyTerritoryGroup final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EnemyTerritory_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnemyTerritoryGroup) == 0x000008, "Wrong alignment on FEndDataTableEnemyTerritoryGroup");
static_assert(sizeof(FEndDataTableEnemyTerritoryGroup) == 0x000020, "Wrong size on FEndDataTableEnemyTerritoryGroup");
static_assert(offsetof(FEndDataTableEnemyTerritoryGroup, UniqueIndex) == 0x000008, "Member 'FEndDataTableEnemyTerritoryGroup::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyTerritoryGroup, EnemyTerritory_Array) == 0x000010, "Member 'FEndDataTableEnemyTerritoryGroup::EnemyTerritory_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEnvironmentSet
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableEnvironmentSet final : public FEndDataTableRowBase
{
public:
	class FName                                   AdditionalEnvironmentSetId;                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 UnvisibleList_Array;                               // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LevelList_Array;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEnvironmentSet) == 0x000008, "Wrong alignment on FEndDataTableEnvironmentSet");
static_assert(sizeof(FEndDataTableEnvironmentSet) == 0x000030, "Wrong size on FEndDataTableEnvironmentSet");
static_assert(offsetof(FEndDataTableEnvironmentSet, AdditionalEnvironmentSetId) == 0x000008, "Member 'FEndDataTableEnvironmentSet::AdditionalEnvironmentSetId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSet, UnvisibleList_Array) == 0x000010, "Member 'FEndDataTableEnvironmentSet::UnvisibleList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSet, LevelList_Array) == 0x000020, "Member 'FEndDataTableEnvironmentSet::LevelList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEventPriority
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableEventPriority final : public FEndDataTableRowBase
{
public:
	int32                                         PriorityNum;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ArrayNumber;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         WinBiggerFrame;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         BehavierList_Array;                                // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEventPriority) == 0x000008, "Wrong alignment on FEndDataTableEventPriority");
static_assert(sizeof(FEndDataTableEventPriority) == 0x000028, "Wrong size on FEndDataTableEventPriority");
static_assert(offsetof(FEndDataTableEventPriority, PriorityNum) == 0x000008, "Member 'FEndDataTableEventPriority::PriorityNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriority, ArrayNumber) == 0x00000C, "Member 'FEndDataTableEventPriority::ArrayNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriority, WinBiggerFrame) == 0x000010, "Member 'FEndDataTableEventPriority::WinBiggerFrame' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriority, BehavierList_Array) == 0x000018, "Member 'FEndDataTableEventPriority::BehavierList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableEventPriorityOverride
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableEventPriorityOverride final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 Index_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         OverrideProperty_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableEventPriorityOverride) == 0x000008, "Wrong alignment on FEndDataTableEventPriorityOverride");
static_assert(sizeof(FEndDataTableEventPriorityOverride) == 0x000028, "Wrong size on FEndDataTableEventPriorityOverride");
static_assert(offsetof(FEndDataTableEventPriorityOverride, Index_Array) == 0x000008, "Member 'FEndDataTableEventPriorityOverride::Index_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityOverride, OverrideProperty_Array) == 0x000018, "Member 'FEndDataTableEventPriorityOverride::OverrideProperty_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableExclusion
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableExclusion final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 ExclusionTableList_Array;                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 Priority;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BattlePriority;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 OnOffTable_Array;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableExclusion) == 0x000008, "Wrong alignment on FEndDataTableExclusion");
static_assert(sizeof(FEndDataTableExclusion) == 0x000048, "Wrong size on FEndDataTableExclusion");
static_assert(offsetof(FEndDataTableExclusion, ExclusionTableList_Array) == 0x000008, "Member 'FEndDataTableExclusion::ExclusionTableList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableExclusion, Priority) == 0x000018, "Member 'FEndDataTableExclusion::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableExclusion, BattlePriority) == 0x000028, "Member 'FEndDataTableExclusion::BattlePriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableExclusion, OnOffTable_Array) == 0x000038, "Member 'FEndDataTableExclusion::OnOffTable_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableFieldTips
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableFieldTips final : public FEndDataTableRowBase
{
public:
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GuidLineId;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WidgetTexturePath;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WidgetTextId;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TipsMoviePath;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TipsTitle;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FlagTrueOnViewWidget_Array;                        // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableFieldTips) == 0x000008, "Wrong alignment on FEndDataTableFieldTips");
static_assert(sizeof(FEndDataTableFieldTips) == 0x000058, "Wrong size on FEndDataTableFieldTips");
static_assert(offsetof(FEndDataTableFieldTips, WidgetName) == 0x000008, "Member 'FEndDataTableFieldTips::WidgetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldTips, GuidLineId) == 0x000010, "Member 'FEndDataTableFieldTips::GuidLineId' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldTips, WidgetTexturePath) == 0x000018, "Member 'FEndDataTableFieldTips::WidgetTexturePath' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldTips, WidgetTextId) == 0x000020, "Member 'FEndDataTableFieldTips::WidgetTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldTips, TipsMoviePath) == 0x000028, "Member 'FEndDataTableFieldTips::TipsMoviePath' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldTips, TipsTitle) == 0x000038, "Member 'FEndDataTableFieldTips::TipsTitle' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldTips, FlagTrueOnViewWidget_Array) == 0x000048, "Member 'FEndDataTableFieldTips::FlagTrueOnViewWidget_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableFootAttribute
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableFootAttribute final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           EffectName_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableFootAttribute) == 0x000008, "Wrong alignment on FEndDataTableFootAttribute");
static_assert(sizeof(FEndDataTableFootAttribute) == 0x000018, "Wrong size on FEndDataTableFootAttribute");
static_assert(offsetof(FEndDataTableFootAttribute, EffectName_Array) == 0x000008, "Member 'FEndDataTableFootAttribute::EffectName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableFootBGMSet
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableFootBGMSet final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         bgmList_Array;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         sccList_Array;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableFootBGMSet) == 0x000008, "Wrong alignment on FEndDataTableFootBGMSet");
static_assert(sizeof(FEndDataTableFootBGMSet) == 0x000030, "Wrong size on FEndDataTableFootBGMSet");
static_assert(offsetof(FEndDataTableFootBGMSet, UniqueIndex) == 0x000008, "Member 'FEndDataTableFootBGMSet::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableFootBGMSet, Priority) == 0x00000C, "Member 'FEndDataTableFootBGMSet::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableFootBGMSet, bgmList_Array) == 0x000010, "Member 'FEndDataTableFootBGMSet::bgmList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableFootBGMSet, sccList_Array) == 0x000020, "Member 'FEndDataTableFootBGMSet::sccList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableGambitFortCharacterParameter
// 0x00A8 (0x00B0 - 0x0008)
struct FEndDataTableGambitFortCharacterParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   GameStartPoint;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CharaSpec;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RoleType;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HpParam;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AttackParam;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LibraVFXType;                                      // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NeedDeathEnemy;                                    // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AIPreset;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AIForceStartRadius;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AIDelaySec;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HPUIOffsetZ;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetSocket;                                      // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsInAir;                                           // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 PropertyResist_Array;                              // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 AttributeResist_Array;                             // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 GambitImagePath;                                   // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 GambitEnemyName;                                   // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 GambitEnemyInfoText;                               // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AbilityId_Array;                                   // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         BossSealType;                                      // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableGambitFortCharacterParameter) == 0x000008, "Wrong alignment on FEndDataTableGambitFortCharacterParameter");
static_assert(sizeof(FEndDataTableGambitFortCharacterParameter) == 0x0000B0, "Wrong size on FEndDataTableGambitFortCharacterParameter");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, GameStartPoint) == 0x000008, "Member 'FEndDataTableGambitFortCharacterParameter::GameStartPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, CharaSpec) == 0x000010, "Member 'FEndDataTableGambitFortCharacterParameter::CharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, RoleType) == 0x000018, "Member 'FEndDataTableGambitFortCharacterParameter::RoleType' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, HpParam) == 0x00001C, "Member 'FEndDataTableGambitFortCharacterParameter::HpParam' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, AttackParam) == 0x000020, "Member 'FEndDataTableGambitFortCharacterParameter::AttackParam' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, LibraVFXType) == 0x000024, "Member 'FEndDataTableGambitFortCharacterParameter::LibraVFXType' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, NeedDeathEnemy) == 0x000025, "Member 'FEndDataTableGambitFortCharacterParameter::NeedDeathEnemy' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, AIPreset) == 0x000028, "Member 'FEndDataTableGambitFortCharacterParameter::AIPreset' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, AIForceStartRadius) == 0x000030, "Member 'FEndDataTableGambitFortCharacterParameter::AIForceStartRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, AIDelaySec) == 0x000034, "Member 'FEndDataTableGambitFortCharacterParameter::AIDelaySec' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, HPUIOffsetZ) == 0x000038, "Member 'FEndDataTableGambitFortCharacterParameter::HPUIOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, TargetSocket) == 0x00003C, "Member 'FEndDataTableGambitFortCharacterParameter::TargetSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, IsInAir) == 0x000044, "Member 'FEndDataTableGambitFortCharacterParameter::IsInAir' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, PropertyResist_Array) == 0x000048, "Member 'FEndDataTableGambitFortCharacterParameter::PropertyResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, AttributeResist_Array) == 0x000058, "Member 'FEndDataTableGambitFortCharacterParameter::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, GambitImagePath) == 0x000068, "Member 'FEndDataTableGambitFortCharacterParameter::GambitImagePath' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, GambitEnemyName) == 0x000078, "Member 'FEndDataTableGambitFortCharacterParameter::GambitEnemyName' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, GambitEnemyInfoText) == 0x000088, "Member 'FEndDataTableGambitFortCharacterParameter::GambitEnemyInfoText' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, AbilityId_Array) == 0x000098, "Member 'FEndDataTableGambitFortCharacterParameter::AbilityId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCharacterParameter, BossSealType) == 0x0000A8, "Member 'FEndDataTableGambitFortCharacterParameter::BossSealType' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableGambitFortCommonParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableGambitFortCommonParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ParamString;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ParamFloat;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableGambitFortCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableGambitFortCommonParameter");
static_assert(sizeof(FEndDataTableGambitFortCommonParameter) == 0x000018, "Wrong size on FEndDataTableGambitFortCommonParameter");
static_assert(offsetof(FEndDataTableGambitFortCommonParameter, ParamString) == 0x000008, "Member 'FEndDataTableGambitFortCommonParameter::ParamString' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortCommonParameter, ParamFloat) == 0x000010, "Member 'FEndDataTableGambitFortCommonParameter::ParamFloat' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableGambitFortGambitAction
// 0x0098 (0x00A0 - 0x0008)
struct FEndDataTableGambitFortGambitAction final : public FEndDataTableRowBase
{
public:
	class FString                                 ActionName;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        UniqueId;                                          // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnableTargetFlag;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ActionTargetType;                                  // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ActionOptionFilter;                                // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableStageIndex;                                  // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActionType;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CancelJudgeSec;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WaitNextSec;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GambitActionConst;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ActionLimit;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ActionAddHP;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AttributeInfo;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RobotOverrideWeak;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UseEditor;                                         // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         WeakIconIndex;                                     // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActionDescription;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NeedOptionCheck;                                   // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreStatusChange;                                // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   IgnoreBscID;                                       // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AirAttack;                                         // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IntArgumentList_Array;                             // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 FloatArgumentList_Array;                           // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         StringArgumentList_Array;                          // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableGambitFortGambitAction) == 0x000008, "Wrong alignment on FEndDataTableGambitFortGambitAction");
static_assert(sizeof(FEndDataTableGambitFortGambitAction) == 0x0000A0, "Wrong size on FEndDataTableGambitFortGambitAction");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, ActionName) == 0x000008, "Member 'FEndDataTableGambitFortGambitAction::ActionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, UniqueId) == 0x000018, "Member 'FEndDataTableGambitFortGambitAction::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, EnableTargetFlag) == 0x00001C, "Member 'FEndDataTableGambitFortGambitAction::EnableTargetFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, ActionTargetType) == 0x000020, "Member 'FEndDataTableGambitFortGambitAction::ActionTargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, ActionOptionFilter) == 0x000021, "Member 'FEndDataTableGambitFortGambitAction::ActionOptionFilter' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, EnableStageIndex) == 0x000022, "Member 'FEndDataTableGambitFortGambitAction::EnableStageIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, ActionType) == 0x000024, "Member 'FEndDataTableGambitFortGambitAction::ActionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, CancelJudgeSec) == 0x000028, "Member 'FEndDataTableGambitFortGambitAction::CancelJudgeSec' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, WaitNextSec) == 0x00002C, "Member 'FEndDataTableGambitFortGambitAction::WaitNextSec' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, GambitActionConst) == 0x000030, "Member 'FEndDataTableGambitFortGambitAction::GambitActionConst' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, ActionLimit) == 0x000034, "Member 'FEndDataTableGambitFortGambitAction::ActionLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, ActionAddHP) == 0x000038, "Member 'FEndDataTableGambitFortGambitAction::ActionAddHP' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, AttributeInfo) == 0x00003C, "Member 'FEndDataTableGambitFortGambitAction::AttributeInfo' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, RobotOverrideWeak) == 0x000040, "Member 'FEndDataTableGambitFortGambitAction::RobotOverrideWeak' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, UseEditor) == 0x000044, "Member 'FEndDataTableGambitFortGambitAction::UseEditor' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, WeakIconIndex) == 0x000045, "Member 'FEndDataTableGambitFortGambitAction::WeakIconIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, ActionDescription) == 0x000048, "Member 'FEndDataTableGambitFortGambitAction::ActionDescription' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, NeedOptionCheck) == 0x000058, "Member 'FEndDataTableGambitFortGambitAction::NeedOptionCheck' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, IgnoreStatusChange) == 0x00005C, "Member 'FEndDataTableGambitFortGambitAction::IgnoreStatusChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, IgnoreBscID) == 0x000060, "Member 'FEndDataTableGambitFortGambitAction::IgnoreBscID' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, AirAttack) == 0x000068, "Member 'FEndDataTableGambitFortGambitAction::AirAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, IntArgumentList_Array) == 0x000070, "Member 'FEndDataTableGambitFortGambitAction::IntArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, FloatArgumentList_Array) == 0x000080, "Member 'FEndDataTableGambitFortGambitAction::FloatArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAction, StringArgumentList_Array) == 0x000090, "Member 'FEndDataTableGambitFortGambitAction::StringArgumentList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableGambitFortGambitAIPreset
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableGambitFortGambitAIPreset final : public FEndDataTableRowBase
{
public:
	uint8                                         UseEditor;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PresetDisplayName;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ConditionNameList_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActionNameList_Array;                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActionCheckNameList_Array;                         // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableGambitFortGambitAIPreset) == 0x000008, "Wrong alignment on FEndDataTableGambitFortGambitAIPreset");
static_assert(sizeof(FEndDataTableGambitFortGambitAIPreset) == 0x000050, "Wrong size on FEndDataTableGambitFortGambitAIPreset");
static_assert(offsetof(FEndDataTableGambitFortGambitAIPreset, UseEditor) == 0x000008, "Member 'FEndDataTableGambitFortGambitAIPreset::UseEditor' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAIPreset, PresetDisplayName) == 0x000010, "Member 'FEndDataTableGambitFortGambitAIPreset::PresetDisplayName' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAIPreset, ConditionNameList_Array) == 0x000020, "Member 'FEndDataTableGambitFortGambitAIPreset::ConditionNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAIPreset, ActionNameList_Array) == 0x000030, "Member 'FEndDataTableGambitFortGambitAIPreset::ActionNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitAIPreset, ActionCheckNameList_Array) == 0x000040, "Member 'FEndDataTableGambitFortGambitAIPreset::ActionCheckNameList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableGambitFortGambitCondition
// 0x00A0 (0x00A8 - 0x0008)
struct FEndDataTableGambitFortGambitCondition final : public FEndDataTableRowBase
{
public:
	class FString                                 ConaditionName;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        UniqueId;                                          // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetType;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableStageIndex;                                  // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NeedRadiusMin;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NeedRadiusMax;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NeedHPRateMin;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NeedHPRateMax;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NeedBPRateMin;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NeedBPRateMax;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentFocusTarget;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NeedRoleCategory;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NeedBuffCategory;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetCharaSpec;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MinigamePropertyMask;                              // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetLaneType;                                    // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CheckGround;                                       // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UseActionAttribute;                                // 0x0056(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CheckBoss;                                         // 0x0057(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UseEditor;                                         // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ActionOptionFilter;                                // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConditionDescription;                              // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ConditionType;                                     // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IntArgumentList_Array;                             // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 FloatArgumentList_Array;                           // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         StringArgumentList_Array;                          // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableGambitFortGambitCondition) == 0x000008, "Wrong alignment on FEndDataTableGambitFortGambitCondition");
static_assert(sizeof(FEndDataTableGambitFortGambitCondition) == 0x0000A8, "Wrong size on FEndDataTableGambitFortGambitCondition");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, ConaditionName) == 0x000008, "Member 'FEndDataTableGambitFortGambitCondition::ConaditionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, UniqueId) == 0x000018, "Member 'FEndDataTableGambitFortGambitCondition::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, TargetType) == 0x00001C, "Member 'FEndDataTableGambitFortGambitCondition::TargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, EnableStageIndex) == 0x000020, "Member 'FEndDataTableGambitFortGambitCondition::EnableStageIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, NeedRadiusMin) == 0x000024, "Member 'FEndDataTableGambitFortGambitCondition::NeedRadiusMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, NeedRadiusMax) == 0x000028, "Member 'FEndDataTableGambitFortGambitCondition::NeedRadiusMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, NeedHPRateMin) == 0x00002C, "Member 'FEndDataTableGambitFortGambitCondition::NeedHPRateMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, NeedHPRateMax) == 0x000030, "Member 'FEndDataTableGambitFortGambitCondition::NeedHPRateMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, NeedBPRateMin) == 0x000034, "Member 'FEndDataTableGambitFortGambitCondition::NeedBPRateMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, NeedBPRateMax) == 0x000038, "Member 'FEndDataTableGambitFortGambitCondition::NeedBPRateMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, CurrentFocusTarget) == 0x00003C, "Member 'FEndDataTableGambitFortGambitCondition::CurrentFocusTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, NeedRoleCategory) == 0x000040, "Member 'FEndDataTableGambitFortGambitCondition::NeedRoleCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, NeedBuffCategory) == 0x000044, "Member 'FEndDataTableGambitFortGambitCondition::NeedBuffCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, TargetCharaSpec) == 0x000048, "Member 'FEndDataTableGambitFortGambitCondition::TargetCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, MinigamePropertyMask) == 0x000050, "Member 'FEndDataTableGambitFortGambitCondition::MinigamePropertyMask' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, TargetLaneType) == 0x000054, "Member 'FEndDataTableGambitFortGambitCondition::TargetLaneType' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, CheckGround) == 0x000055, "Member 'FEndDataTableGambitFortGambitCondition::CheckGround' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, UseActionAttribute) == 0x000056, "Member 'FEndDataTableGambitFortGambitCondition::UseActionAttribute' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, CheckBoss) == 0x000057, "Member 'FEndDataTableGambitFortGambitCondition::CheckBoss' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, UseEditor) == 0x000058, "Member 'FEndDataTableGambitFortGambitCondition::UseEditor' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, ActionOptionFilter) == 0x000059, "Member 'FEndDataTableGambitFortGambitCondition::ActionOptionFilter' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, ConditionDescription) == 0x000060, "Member 'FEndDataTableGambitFortGambitCondition::ConditionDescription' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, ConditionType) == 0x000070, "Member 'FEndDataTableGambitFortGambitCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, IntArgumentList_Array) == 0x000078, "Member 'FEndDataTableGambitFortGambitCondition::IntArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, FloatArgumentList_Array) == 0x000088, "Member 'FEndDataTableGambitFortGambitCondition::FloatArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortGambitCondition, StringArgumentList_Array) == 0x000098, "Member 'FEndDataTableGambitFortGambitCondition::StringArgumentList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableGambitFortIconPriority
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableGambitFortIconPriority final : public FEndDataTableRowBase
{
public:
	int8                                          Priority;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableGambitFortIconPriority) == 0x000008, "Wrong alignment on FEndDataTableGambitFortIconPriority");
static_assert(sizeof(FEndDataTableGambitFortIconPriority) == 0x000010, "Wrong size on FEndDataTableGambitFortIconPriority");
static_assert(offsetof(FEndDataTableGambitFortIconPriority, Priority) == 0x000008, "Member 'FEndDataTableGambitFortIconPriority::Priority' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableGambitFortLocationParameter
// 0x0110 (0x0118 - 0x0008)
struct FEndDataTableGambitFortLocationParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ClearTrigger;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PrepareTrigger;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           GambitUnitId_Array;                                // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           GameStartPoint_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   Reward;                                            // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PhaseNum;                                          // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           GambitTargetId_Array;                              // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           GambitEnemyInfoID_Array;                           // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 EnemyTip;                                          // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnableAISetNum;                                    // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Timelimit;                                         // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResultRecortWork_Array;                            // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   RewardUILevel;                                     // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BriefingLogTxt;                                    // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BriefingLogStf;                                    // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RobotSealSec;                                      // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RobotCountMax;                                     // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                 PhaseHPRate_Array;                                 // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 RequlationTxt;                                     // 0x00C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PresetAArray_Array;                                // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PresetBArray_Array;                                // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PresetCArray_Array;                                // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PresetDArray_Array;                                // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableGambitFortLocationParameter) == 0x000008, "Wrong alignment on FEndDataTableGambitFortLocationParameter");
static_assert(sizeof(FEndDataTableGambitFortLocationParameter) == 0x000118, "Wrong size on FEndDataTableGambitFortLocationParameter");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, ClearTrigger) == 0x000008, "Member 'FEndDataTableGambitFortLocationParameter::ClearTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, PrepareTrigger) == 0x000010, "Member 'FEndDataTableGambitFortLocationParameter::PrepareTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, GambitUnitId_Array) == 0x000018, "Member 'FEndDataTableGambitFortLocationParameter::GambitUnitId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, GameStartPoint_Array) == 0x000028, "Member 'FEndDataTableGambitFortLocationParameter::GameStartPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, Reward) == 0x000038, "Member 'FEndDataTableGambitFortLocationParameter::Reward' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, PhaseNum) == 0x000040, "Member 'FEndDataTableGambitFortLocationParameter::PhaseNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, GambitTargetId_Array) == 0x000048, "Member 'FEndDataTableGambitFortLocationParameter::GambitTargetId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, GambitEnemyInfoID_Array) == 0x000058, "Member 'FEndDataTableGambitFortLocationParameter::GambitEnemyInfoID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, EnemyTip) == 0x000068, "Member 'FEndDataTableGambitFortLocationParameter::EnemyTip' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, EnableAISetNum) == 0x000078, "Member 'FEndDataTableGambitFortLocationParameter::EnableAISetNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, Timelimit) == 0x00007C, "Member 'FEndDataTableGambitFortLocationParameter::Timelimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, ResultRecortWork_Array) == 0x000080, "Member 'FEndDataTableGambitFortLocationParameter::ResultRecortWork_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, RewardUILevel) == 0x000090, "Member 'FEndDataTableGambitFortLocationParameter::RewardUILevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, BriefingLogTxt) == 0x000098, "Member 'FEndDataTableGambitFortLocationParameter::BriefingLogTxt' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, BriefingLogStf) == 0x0000A8, "Member 'FEndDataTableGambitFortLocationParameter::BriefingLogStf' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, RobotSealSec) == 0x0000B0, "Member 'FEndDataTableGambitFortLocationParameter::RobotSealSec' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, RobotCountMax) == 0x0000B4, "Member 'FEndDataTableGambitFortLocationParameter::RobotCountMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, PhaseHPRate_Array) == 0x0000B8, "Member 'FEndDataTableGambitFortLocationParameter::PhaseHPRate_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, RequlationTxt) == 0x0000C8, "Member 'FEndDataTableGambitFortLocationParameter::RequlationTxt' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, PresetAArray_Array) == 0x0000D8, "Member 'FEndDataTableGambitFortLocationParameter::PresetAArray_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, PresetBArray_Array) == 0x0000E8, "Member 'FEndDataTableGambitFortLocationParameter::PresetBArray_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, PresetCArray_Array) == 0x0000F8, "Member 'FEndDataTableGambitFortLocationParameter::PresetCArray_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortLocationParameter, PresetDArray_Array) == 0x000108, "Member 'FEndDataTableGambitFortLocationParameter::PresetDArray_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableGambitFortNestParameter
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableGambitFortNestParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   SpawnGambitCharaID;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpawnInterval;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SpawnTargetPointName;                              // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableGambitFortNestParameter) == 0x000008, "Wrong alignment on FEndDataTableGambitFortNestParameter");
static_assert(sizeof(FEndDataTableGambitFortNestParameter) == 0x000020, "Wrong size on FEndDataTableGambitFortNestParameter");
static_assert(offsetof(FEndDataTableGambitFortNestParameter, SpawnGambitCharaID) == 0x000008, "Member 'FEndDataTableGambitFortNestParameter::SpawnGambitCharaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortNestParameter, SpawnInterval) == 0x000010, "Member 'FEndDataTableGambitFortNestParameter::SpawnInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableGambitFortNestParameter, SpawnTargetPointName) == 0x000014, "Member 'FEndDataTableGambitFortNestParameter::SpawnTargetPointName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableHandlePuzzleParameter
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableHandlePuzzleParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   MiniGameAssetPackerID;                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LevelName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int8>                                  UniquIndex_Array;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActorName_Array;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DefaultDirection_Array;                            // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int8>                                  AffectHandle_Array;                                // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 CorrectDirection_Array;                            // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   SuccessStateTriggerName;                           // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ClearedStoryFlagName;                              // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableHandlePuzzleParameter) == 0x000008, "Wrong alignment on FEndDataTableHandlePuzzleParameter");
static_assert(sizeof(FEndDataTableHandlePuzzleParameter) == 0x000078, "Wrong size on FEndDataTableHandlePuzzleParameter");
static_assert(offsetof(FEndDataTableHandlePuzzleParameter, MiniGameAssetPackerID) == 0x000008, "Member 'FEndDataTableHandlePuzzleParameter::MiniGameAssetPackerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHandlePuzzleParameter, LevelName) == 0x000010, "Member 'FEndDataTableHandlePuzzleParameter::LevelName' has a wrong offset!");
static_assert(offsetof(FEndDataTableHandlePuzzleParameter, UniquIndex_Array) == 0x000018, "Member 'FEndDataTableHandlePuzzleParameter::UniquIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHandlePuzzleParameter, ActorName_Array) == 0x000028, "Member 'FEndDataTableHandlePuzzleParameter::ActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHandlePuzzleParameter, DefaultDirection_Array) == 0x000038, "Member 'FEndDataTableHandlePuzzleParameter::DefaultDirection_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHandlePuzzleParameter, AffectHandle_Array) == 0x000048, "Member 'FEndDataTableHandlePuzzleParameter::AffectHandle_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHandlePuzzleParameter, CorrectDirection_Array) == 0x000058, "Member 'FEndDataTableHandlePuzzleParameter::CorrectDirection_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHandlePuzzleParameter, SuccessStateTriggerName) == 0x000068, "Member 'FEndDataTableHandlePuzzleParameter::SuccessStateTriggerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableHandlePuzzleParameter, ClearedStoryFlagName) == 0x000070, "Member 'FEndDataTableHandlePuzzleParameter::ClearedStoryFlagName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableHintAnimalGroup
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableHintAnimalGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           HintAnimalID_Array;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 OffsetX_Array;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 OffsetY_Array;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 OffsetZ_Array;                                     // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 OffsetYaw_Array;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableHintAnimalGroup) == 0x000008, "Wrong alignment on FEndDataTableHintAnimalGroup");
static_assert(sizeof(FEndDataTableHintAnimalGroup) == 0x000058, "Wrong size on FEndDataTableHintAnimalGroup");
static_assert(offsetof(FEndDataTableHintAnimalGroup, HintAnimalID_Array) == 0x000008, "Member 'FEndDataTableHintAnimalGroup::HintAnimalID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalGroup, OffsetX_Array) == 0x000018, "Member 'FEndDataTableHintAnimalGroup::OffsetX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalGroup, OffsetY_Array) == 0x000028, "Member 'FEndDataTableHintAnimalGroup::OffsetY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalGroup, OffsetZ_Array) == 0x000038, "Member 'FEndDataTableHintAnimalGroup::OffsetZ_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalGroup, OffsetYaw_Array) == 0x000048, "Member 'FEndDataTableHintAnimalGroup::OffsetYaw_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableHintAnimalLayout
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableHintAnimalLayout final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           DisableFlag_Array;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           HintAnimalGroupID_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           HintAnimalMoveID_Array;                            // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   RevisitHintAnimalGroupID;                          // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RevisitSpawnPoint;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RevisitPointNearBench;                             // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RevisitSpawnIfEnterRadius;                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableHintAnimalLayout) == 0x000008, "Wrong alignment on FEndDataTableHintAnimalLayout");
static_assert(sizeof(FEndDataTableHintAnimalLayout) == 0x000058, "Wrong size on FEndDataTableHintAnimalLayout");
static_assert(offsetof(FEndDataTableHintAnimalLayout, DisableFlag_Array) == 0x000008, "Member 'FEndDataTableHintAnimalLayout::DisableFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalLayout, HintAnimalGroupID_Array) == 0x000018, "Member 'FEndDataTableHintAnimalLayout::HintAnimalGroupID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalLayout, HintAnimalMoveID_Array) == 0x000028, "Member 'FEndDataTableHintAnimalLayout::HintAnimalMoveID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalLayout, RevisitHintAnimalGroupID) == 0x000038, "Member 'FEndDataTableHintAnimalLayout::RevisitHintAnimalGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalLayout, RevisitSpawnPoint) == 0x000040, "Member 'FEndDataTableHintAnimalLayout::RevisitSpawnPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalLayout, RevisitPointNearBench) == 0x000048, "Member 'FEndDataTableHintAnimalLayout::RevisitPointNearBench' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalLayout, RevisitSpawnIfEnterRadius) == 0x000050, "Member 'FEndDataTableHintAnimalLayout::RevisitSpawnIfEnterRadius' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableHintAnimalMove
// 0x00E8 (0x00F0 - 0x0008)
struct FEndDataTableHintAnimalMove final : public FEndDataTableRowBase
{
public:
	class FName                                   EnableIfSendTrigger;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OriginPoint;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OriginOffsetX;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OriginOffsetY;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OriginOffsetZ;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DestinationPoint;                                  // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DestinationOffsetX;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DestinationOffsetY;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DestinationOffsetZ;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ArrivedPointNearChocoboStop;                       // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ArrivedPointNearBench;                             // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpawnIfEnterRadius;                                // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EnableBoxName_Array;                               // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         AppearanceType;                                    // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveToPlayerIfEnterRadius;                         // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveToPlayerDistance;                              // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveToDestinationIfEnterRadius;                    // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DoParkour;                                         // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChangeSpeedIfAheadDistance;                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveStopIfExitRadius;                              // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveBackDistance;                                  // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DespawnIfExitRadiusAtWait;                         // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WaitTimeLimit;                                     // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MeetPlayerIfStayingTime;                           // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MeetPlayerDistance;                                // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AvoidHubID_Array;                                  // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 WaitAtSplineHeadUntilEnterRadius_Array;            // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SplineName_Array;                                  // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 WaitAtSplineTailUntilEnterRadius_Array;            // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SplineWaitType_Array;                              // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 EnableCliffSpline_Array;                           // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableHintAnimalMove) == 0x000008, "Wrong alignment on FEndDataTableHintAnimalMove");
static_assert(sizeof(FEndDataTableHintAnimalMove) == 0x0000F0, "Wrong size on FEndDataTableHintAnimalMove");
static_assert(offsetof(FEndDataTableHintAnimalMove, EnableIfSendTrigger) == 0x000008, "Member 'FEndDataTableHintAnimalMove::EnableIfSendTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, OriginPoint) == 0x000010, "Member 'FEndDataTableHintAnimalMove::OriginPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, OriginOffsetX) == 0x000018, "Member 'FEndDataTableHintAnimalMove::OriginOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, OriginOffsetY) == 0x00001C, "Member 'FEndDataTableHintAnimalMove::OriginOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, OriginOffsetZ) == 0x000020, "Member 'FEndDataTableHintAnimalMove::OriginOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, DestinationPoint) == 0x000024, "Member 'FEndDataTableHintAnimalMove::DestinationPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, DestinationOffsetX) == 0x00002C, "Member 'FEndDataTableHintAnimalMove::DestinationOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, DestinationOffsetY) == 0x000030, "Member 'FEndDataTableHintAnimalMove::DestinationOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, DestinationOffsetZ) == 0x000034, "Member 'FEndDataTableHintAnimalMove::DestinationOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, ArrivedPointNearChocoboStop) == 0x000038, "Member 'FEndDataTableHintAnimalMove::ArrivedPointNearChocoboStop' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, ArrivedPointNearBench) == 0x000040, "Member 'FEndDataTableHintAnimalMove::ArrivedPointNearBench' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, SpawnIfEnterRadius) == 0x000048, "Member 'FEndDataTableHintAnimalMove::SpawnIfEnterRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, EnableBoxName_Array) == 0x000050, "Member 'FEndDataTableHintAnimalMove::EnableBoxName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, AppearanceType) == 0x000060, "Member 'FEndDataTableHintAnimalMove::AppearanceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, MoveToPlayerIfEnterRadius) == 0x000064, "Member 'FEndDataTableHintAnimalMove::MoveToPlayerIfEnterRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, MoveToPlayerDistance) == 0x000068, "Member 'FEndDataTableHintAnimalMove::MoveToPlayerDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, MoveToDestinationIfEnterRadius) == 0x00006C, "Member 'FEndDataTableHintAnimalMove::MoveToDestinationIfEnterRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, DoParkour) == 0x000070, "Member 'FEndDataTableHintAnimalMove::DoParkour' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, ChangeSpeedIfAheadDistance) == 0x000074, "Member 'FEndDataTableHintAnimalMove::ChangeSpeedIfAheadDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, MoveStopIfExitRadius) == 0x000078, "Member 'FEndDataTableHintAnimalMove::MoveStopIfExitRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, MoveBackDistance) == 0x00007C, "Member 'FEndDataTableHintAnimalMove::MoveBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, DespawnIfExitRadiusAtWait) == 0x000080, "Member 'FEndDataTableHintAnimalMove::DespawnIfExitRadiusAtWait' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, WaitTimeLimit) == 0x000084, "Member 'FEndDataTableHintAnimalMove::WaitTimeLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, MeetPlayerIfStayingTime) == 0x000088, "Member 'FEndDataTableHintAnimalMove::MeetPlayerIfStayingTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, MeetPlayerDistance) == 0x00008C, "Member 'FEndDataTableHintAnimalMove::MeetPlayerDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, AvoidHubID_Array) == 0x000090, "Member 'FEndDataTableHintAnimalMove::AvoidHubID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, WaitAtSplineHeadUntilEnterRadius_Array) == 0x0000A0, "Member 'FEndDataTableHintAnimalMove::WaitAtSplineHeadUntilEnterRadius_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, SplineName_Array) == 0x0000B0, "Member 'FEndDataTableHintAnimalMove::SplineName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, WaitAtSplineTailUntilEnterRadius_Array) == 0x0000C0, "Member 'FEndDataTableHintAnimalMove::WaitAtSplineTailUntilEnterRadius_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, SplineWaitType_Array) == 0x0000D0, "Member 'FEndDataTableHintAnimalMove::SplineWaitType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHintAnimalMove, EnableCliffSpline_Array) == 0x0000E0, "Member 'FEndDataTableHintAnimalMove::EnableCliffSpline_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableHubConfig
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableHubConfig final : public FEndDataTableRowBase
{
public:
	uint8                                         IsLevel;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FastTravelOpenTiming;                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableAnimationShowingIcon;                        // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CenterizeNavIcon;                                  // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisplayMapIconWhileProhibited;                     // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableWorldReportNotify;                          // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisplayCompleteMessageForce;                       // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ActivateBySystem;                                  // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableFastTravelLogging;                           // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisplayRoutePath;                                  // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HubAreaValidityTerm;                               // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreBattleEnterLeave;                            // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreTinyBroncoEnterLeave;                        // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AllowNotifyInOutOfArea;                            // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DemoPlayMode;                                      // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ExcludeLocationVolumeErrorCheck;                   // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableHubConfig) == 0x000008, "Wrong alignment on FEndDataTableHubConfig");
static_assert(sizeof(FEndDataTableHubConfig) == 0x000018, "Wrong size on FEndDataTableHubConfig");
static_assert(offsetof(FEndDataTableHubConfig, IsLevel) == 0x000008, "Member 'FEndDataTableHubConfig::IsLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, FastTravelOpenTiming) == 0x000009, "Member 'FEndDataTableHubConfig::FastTravelOpenTiming' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, EnableAnimationShowingIcon) == 0x00000A, "Member 'FEndDataTableHubConfig::EnableAnimationShowingIcon' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, CenterizeNavIcon) == 0x00000B, "Member 'FEndDataTableHubConfig::CenterizeNavIcon' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, DisplayMapIconWhileProhibited) == 0x00000C, "Member 'FEndDataTableHubConfig::DisplayMapIconWhileProhibited' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, DisableWorldReportNotify) == 0x00000D, "Member 'FEndDataTableHubConfig::DisableWorldReportNotify' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, DisplayCompleteMessageForce) == 0x00000E, "Member 'FEndDataTableHubConfig::DisplayCompleteMessageForce' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, ActivateBySystem) == 0x00000F, "Member 'FEndDataTableHubConfig::ActivateBySystem' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, EnableFastTravelLogging) == 0x000010, "Member 'FEndDataTableHubConfig::EnableFastTravelLogging' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, DisplayRoutePath) == 0x000011, "Member 'FEndDataTableHubConfig::DisplayRoutePath' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, HubAreaValidityTerm) == 0x000012, "Member 'FEndDataTableHubConfig::HubAreaValidityTerm' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, IgnoreBattleEnterLeave) == 0x000013, "Member 'FEndDataTableHubConfig::IgnoreBattleEnterLeave' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, IgnoreTinyBroncoEnterLeave) == 0x000014, "Member 'FEndDataTableHubConfig::IgnoreTinyBroncoEnterLeave' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, AllowNotifyInOutOfArea) == 0x000015, "Member 'FEndDataTableHubConfig::AllowNotifyInOutOfArea' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, DemoPlayMode) == 0x000016, "Member 'FEndDataTableHubConfig::DemoPlayMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubConfig, ExcludeLocationVolumeErrorCheck) == 0x000017, "Member 'FEndDataTableHubConfig::ExcludeLocationVolumeErrorCheck' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableHubGroup
// 0x0090 (0x0098 - 0x0008)
struct FEndDataTableHubGroup final : public FEndDataTableRowBase
{
public:
	uint8                                         Usage;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SpecialGroupType;                                  // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpecialGroupID;                                    // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ActiveStateNumber_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActiveStateStoryFlagID_Array;                      // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActiveStateActionOrActionGroupID_Array;            // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AfterNotificationInActivateActionOrActionGroupID_Array; // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 CompleteStateNumber_Array;                         // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CompleteStateStoryFlagID_Array;                    // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CompleteStateActionOrActionGroupID_Array;          // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AfterNotificationInCompleteActionOrActionGroupID_Array; // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableHubGroup) == 0x000008, "Wrong alignment on FEndDataTableHubGroup");
static_assert(sizeof(FEndDataTableHubGroup) == 0x000098, "Wrong size on FEndDataTableHubGroup");
static_assert(offsetof(FEndDataTableHubGroup, Usage) == 0x000008, "Member 'FEndDataTableHubGroup::Usage' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubGroup, SpecialGroupType) == 0x000009, "Member 'FEndDataTableHubGroup::SpecialGroupType' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubGroup, SpecialGroupID) == 0x00000C, "Member 'FEndDataTableHubGroup::SpecialGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubGroup, ActiveStateNumber_Array) == 0x000018, "Member 'FEndDataTableHubGroup::ActiveStateNumber_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubGroup, ActiveStateStoryFlagID_Array) == 0x000028, "Member 'FEndDataTableHubGroup::ActiveStateStoryFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubGroup, ActiveStateActionOrActionGroupID_Array) == 0x000038, "Member 'FEndDataTableHubGroup::ActiveStateActionOrActionGroupID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubGroup, AfterNotificationInActivateActionOrActionGroupID_Array) == 0x000048, "Member 'FEndDataTableHubGroup::AfterNotificationInActivateActionOrActionGroupID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubGroup, CompleteStateNumber_Array) == 0x000058, "Member 'FEndDataTableHubGroup::CompleteStateNumber_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubGroup, CompleteStateStoryFlagID_Array) == 0x000068, "Member 'FEndDataTableHubGroup::CompleteStateStoryFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubGroup, CompleteStateActionOrActionGroupID_Array) == 0x000078, "Member 'FEndDataTableHubGroup::CompleteStateActionOrActionGroupID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubGroup, AfterNotificationInCompleteActionOrActionGroupID_Array) == 0x000088, "Member 'FEndDataTableHubGroup::AfterNotificationInCompleteActionOrActionGroupID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableHubStoryList
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableHubStoryList final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         TitleTextID_Array;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CompleteStoryFlag_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ShowCompletion_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 OverrideSeType_Array;                              // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         TryLockImmediately;                                // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableHubStoryList) == 0x000008, "Wrong alignment on FEndDataTableHubStoryList");
static_assert(sizeof(FEndDataTableHubStoryList) == 0x000050, "Wrong size on FEndDataTableHubStoryList");
static_assert(offsetof(FEndDataTableHubStoryList, TitleTextID_Array) == 0x000008, "Member 'FEndDataTableHubStoryList::TitleTextID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubStoryList, CompleteStoryFlag_Array) == 0x000018, "Member 'FEndDataTableHubStoryList::CompleteStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubStoryList, ShowCompletion_Array) == 0x000028, "Member 'FEndDataTableHubStoryList::ShowCompletion_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubStoryList, OverrideSeType_Array) == 0x000038, "Member 'FEndDataTableHubStoryList::OverrideSeType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubStoryList, TryLockImmediately) == 0x000048, "Member 'FEndDataTableHubStoryList::TryLockImmediately' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableIgnoreSaveDataStackAction
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableIgnoreSaveDataStackAction final : public FEndDataTableRowBase
{
public:
	uint8                                         Option;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableIgnoreSaveDataStackAction) == 0x000008, "Wrong alignment on FEndDataTableIgnoreSaveDataStackAction");
static_assert(sizeof(FEndDataTableIgnoreSaveDataStackAction) == 0x000010, "Wrong size on FEndDataTableIgnoreSaveDataStackAction");
static_assert(offsetof(FEndDataTableIgnoreSaveDataStackAction, Option) == 0x000008, "Member 'FEndDataTableIgnoreSaveDataStackAction::Option' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableInDoorVolume
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableInDoorVolume final : public FEndDataTableRowBase
{
public:
	float                                         DashRootMotionTranslationScale;                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableInDoorVolume) == 0x000008, "Wrong alignment on FEndDataTableInDoorVolume");
static_assert(sizeof(FEndDataTableInDoorVolume) == 0x000010, "Wrong size on FEndDataTableInDoorVolume");
static_assert(offsetof(FEndDataTableInDoorVolume, DashRootMotionTranslationScale) == 0x000008, "Member 'FEndDataTableInDoorVolume::DashRootMotionTranslationScale' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableInitialParameter
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableInitialParameter final : public FEndDataTableRowBase
{
public:
	int32                                         GroupType;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SceneLayerType;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Type;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PlayerStatus;                                      // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlayerTableId;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PlayerID;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetDataTableID;                                 // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntArg;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EquipTargetType;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EquipSlotIndex;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SetAP;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TableID_Array;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableInitialParameter) == 0x000008, "Wrong alignment on FEndDataTableInitialParameter");
static_assert(sizeof(FEndDataTableInitialParameter) == 0x000050, "Wrong size on FEndDataTableInitialParameter");
static_assert(offsetof(FEndDataTableInitialParameter, GroupType) == 0x000008, "Member 'FEndDataTableInitialParameter::GroupType' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, SceneLayerType) == 0x00000C, "Member 'FEndDataTableInitialParameter::SceneLayerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, Type) == 0x000010, "Member 'FEndDataTableInitialParameter::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, PlayerStatus) == 0x000014, "Member 'FEndDataTableInitialParameter::PlayerStatus' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, PlayerTableId) == 0x000018, "Member 'FEndDataTableInitialParameter::PlayerTableId' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, PlayerID) == 0x000020, "Member 'FEndDataTableInitialParameter::PlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, TargetDataTableID) == 0x000024, "Member 'FEndDataTableInitialParameter::TargetDataTableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, IntArg) == 0x00002C, "Member 'FEndDataTableInitialParameter::IntArg' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, EquipTargetType) == 0x000030, "Member 'FEndDataTableInitialParameter::EquipTargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, EquipSlotIndex) == 0x000034, "Member 'FEndDataTableInitialParameter::EquipSlotIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, SetAP) == 0x000038, "Member 'FEndDataTableInitialParameter::SetAP' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, TableID_Array) == 0x000040, "Member 'FEndDataTableInitialParameter::TableID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableInitPlayerParameter
// 0x0098 (0x00A0 - 0x0008)
struct FEndDataTableInitPlayerParameter final : public FEndDataTableRowBase
{
public:
	uint8                                         SceneLayerType;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlayerID;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PlayerLevel;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Experience;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeaponID;                                          // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ArmorID;                                           // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AccessoryID;                                       // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           WeaponMateria_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 WeaponMateriaLevel_Array;                          // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ArmorMateria_Array;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ArmorMateriaLevel_Array;                           // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   SummonMateriaId;                                   // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ShortcutGround_Array;                              // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ShortcutAir_Array;                                 // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableInitPlayerParameter) == 0x000008, "Wrong alignment on FEndDataTableInitPlayerParameter");
static_assert(sizeof(FEndDataTableInitPlayerParameter) == 0x0000A0, "Wrong size on FEndDataTableInitPlayerParameter");
static_assert(offsetof(FEndDataTableInitPlayerParameter, SceneLayerType) == 0x000008, "Member 'FEndDataTableInitPlayerParameter::SceneLayerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, PlayerID) == 0x00000C, "Member 'FEndDataTableInitPlayerParameter::PlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, PlayerLevel) == 0x000014, "Member 'FEndDataTableInitPlayerParameter::PlayerLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, Experience) == 0x000018, "Member 'FEndDataTableInitPlayerParameter::Experience' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, WeaponID) == 0x00001C, "Member 'FEndDataTableInitPlayerParameter::WeaponID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, ArmorID) == 0x000024, "Member 'FEndDataTableInitPlayerParameter::ArmorID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, AccessoryID) == 0x00002C, "Member 'FEndDataTableInitPlayerParameter::AccessoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, WeaponMateria_Array) == 0x000038, "Member 'FEndDataTableInitPlayerParameter::WeaponMateria_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, WeaponMateriaLevel_Array) == 0x000048, "Member 'FEndDataTableInitPlayerParameter::WeaponMateriaLevel_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, ArmorMateria_Array) == 0x000058, "Member 'FEndDataTableInitPlayerParameter::ArmorMateria_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, ArmorMateriaLevel_Array) == 0x000068, "Member 'FEndDataTableInitPlayerParameter::ArmorMateriaLevel_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, SummonMateriaId) == 0x000078, "Member 'FEndDataTableInitPlayerParameter::SummonMateriaId' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, ShortcutGround_Array) == 0x000080, "Member 'FEndDataTableInitPlayerParameter::ShortcutGround_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitPlayerParameter, ShortcutAir_Array) == 0x000090, "Member 'FEndDataTableInitPlayerParameter::ShortcutAir_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableInterestPointTable
// 0x0098 (0x00A0 - 0x0008)
struct FEndDataTableInterestPointTable final : public FEndDataTableRowBase
{
public:
	class FString                                 NextActionID;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ActorGroup;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          Sence;                                             // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Capacity;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Presence;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Incidence;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IsOnly;                                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IsBehaviorToLast;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RemainTime;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Command;                                           // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PollingID;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerArgumentList_Array;                         // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         StringArgumentList_Array;                          // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 FloatArgument_Array;                               // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Animation_Array;                                   // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableInterestPointTable) == 0x000008, "Wrong alignment on FEndDataTableInterestPointTable");
static_assert(sizeof(FEndDataTableInterestPointTable) == 0x0000A0, "Wrong size on FEndDataTableInterestPointTable");
static_assert(offsetof(FEndDataTableInterestPointTable, NextActionID) == 0x000008, "Member 'FEndDataTableInterestPointTable::NextActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, ActorGroup) == 0x000018, "Member 'FEndDataTableInterestPointTable::ActorGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Sence) == 0x000028, "Member 'FEndDataTableInterestPointTable::Sence' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Capacity) == 0x00002C, "Member 'FEndDataTableInterestPointTable::Capacity' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Presence) == 0x000030, "Member 'FEndDataTableInterestPointTable::Presence' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Priority) == 0x000034, "Member 'FEndDataTableInterestPointTable::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Incidence) == 0x000038, "Member 'FEndDataTableInterestPointTable::Incidence' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, IsOnly) == 0x00003C, "Member 'FEndDataTableInterestPointTable::IsOnly' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, IsBehaviorToLast) == 0x000040, "Member 'FEndDataTableInterestPointTable::IsBehaviorToLast' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, RemainTime) == 0x000044, "Member 'FEndDataTableInterestPointTable::RemainTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Command) == 0x000048, "Member 'FEndDataTableInterestPointTable::Command' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, PollingID) == 0x000050, "Member 'FEndDataTableInterestPointTable::PollingID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, IntegerArgumentList_Array) == 0x000060, "Member 'FEndDataTableInterestPointTable::IntegerArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, StringArgumentList_Array) == 0x000070, "Member 'FEndDataTableInterestPointTable::StringArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, FloatArgument_Array) == 0x000080, "Member 'FEndDataTableInterestPointTable::FloatArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Animation_Array) == 0x000090, "Member 'FEndDataTableInterestPointTable::Animation_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableInventoryList
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableInventoryList final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TableID;                                           // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsUnViewed;                                        // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsStack;                                           // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableInventoryList) == 0x000008, "Wrong alignment on FEndDataTableInventoryList");
static_assert(sizeof(FEndDataTableInventoryList) == 0x000018, "Wrong size on FEndDataTableInventoryList");
static_assert(offsetof(FEndDataTableInventoryList, Type) == 0x000008, "Member 'FEndDataTableInventoryList::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableInventoryList, TableID) == 0x00000C, "Member 'FEndDataTableInventoryList::TableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInventoryList, IsUnViewed) == 0x000014, "Member 'FEndDataTableInventoryList::IsUnViewed' has a wrong offset!");
static_assert(offsetof(FEndDataTableInventoryList, IsStack) == 0x000015, "Member 'FEndDataTableInventoryList::IsStack' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableItemAnimalGroup
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableItemAnimalGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           EnableBoxName_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DisableLocationID_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EscapeRoute_Array;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EscapeWaitPoint_Array;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableItemAnimalGroup) == 0x000008, "Wrong alignment on FEndDataTableItemAnimalGroup");
static_assert(sizeof(FEndDataTableItemAnimalGroup) == 0x000048, "Wrong size on FEndDataTableItemAnimalGroup");
static_assert(offsetof(FEndDataTableItemAnimalGroup, EnableBoxName_Array) == 0x000008, "Member 'FEndDataTableItemAnimalGroup::EnableBoxName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalGroup, DisableLocationID_Array) == 0x000018, "Member 'FEndDataTableItemAnimalGroup::DisableLocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalGroup, EscapeRoute_Array) == 0x000028, "Member 'FEndDataTableItemAnimalGroup::EscapeRoute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemAnimalGroup, EscapeWaitPoint_Array) == 0x000038, "Member 'FEndDataTableItemAnimalGroup::EscapeWaitPoint_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableItemCraftRecipe
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableItemCraftRecipe final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SortIndex;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RecipiBookID;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   IsRead;                                            // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AddedFlag;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NotifyFlag;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenConditionID;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AddFlagOnAddWishList;                              // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AcquireCraftLevel;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RequiredCraftLevel;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FirstCraftFlag;                                    // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FirstCraftExperienceValue;                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ItemPowerUp;                                       // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NotifyNumberOfUseDecrease;                         // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CraftItemID;                                       // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CraftItemValue;                                    // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ItemID_Array;                                      // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 UseValue_Array;                                    // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 UseValueSecond_Array;                              // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableItemCraftRecipe) == 0x000008, "Wrong alignment on FEndDataTableItemCraftRecipe");
static_assert(sizeof(FEndDataTableItemCraftRecipe) == 0x000090, "Wrong size on FEndDataTableItemCraftRecipe");
static_assert(offsetof(FEndDataTableItemCraftRecipe, UniqueId) == 0x000008, "Member 'FEndDataTableItemCraftRecipe::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, SortIndex) == 0x00000C, "Member 'FEndDataTableItemCraftRecipe::SortIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, RecipiBookID) == 0x000010, "Member 'FEndDataTableItemCraftRecipe::RecipiBookID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, IsRead) == 0x000018, "Member 'FEndDataTableItemCraftRecipe::IsRead' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, AddedFlag) == 0x000020, "Member 'FEndDataTableItemCraftRecipe::AddedFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, NotifyFlag) == 0x000028, "Member 'FEndDataTableItemCraftRecipe::NotifyFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, OpenConditionID) == 0x000030, "Member 'FEndDataTableItemCraftRecipe::OpenConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, AddFlagOnAddWishList) == 0x000038, "Member 'FEndDataTableItemCraftRecipe::AddFlagOnAddWishList' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, AcquireCraftLevel) == 0x00003C, "Member 'FEndDataTableItemCraftRecipe::AcquireCraftLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, RequiredCraftLevel) == 0x000040, "Member 'FEndDataTableItemCraftRecipe::RequiredCraftLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, FirstCraftFlag) == 0x000044, "Member 'FEndDataTableItemCraftRecipe::FirstCraftFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, FirstCraftExperienceValue) == 0x00004C, "Member 'FEndDataTableItemCraftRecipe::FirstCraftExperienceValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, ItemPowerUp) == 0x000050, "Member 'FEndDataTableItemCraftRecipe::ItemPowerUp' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, NotifyNumberOfUseDecrease) == 0x000051, "Member 'FEndDataTableItemCraftRecipe::NotifyNumberOfUseDecrease' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, CraftItemID) == 0x000054, "Member 'FEndDataTableItemCraftRecipe::CraftItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, CraftItemValue) == 0x00005C, "Member 'FEndDataTableItemCraftRecipe::CraftItemValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, ItemID_Array) == 0x000060, "Member 'FEndDataTableItemCraftRecipe::ItemID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, UseValue_Array) == 0x000070, "Member 'FEndDataTableItemCraftRecipe::UseValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipe, UseValueSecond_Array) == 0x000080, "Member 'FEndDataTableItemCraftRecipe::UseValueSecond_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableItemCraftRecipeCondition
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableItemCraftRecipeCondition final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 ConditionType_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ConditionValueInt_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ConditionValueName_Array;                          // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ConditionConnectType_Array;                        // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableItemCraftRecipeCondition) == 0x000008, "Wrong alignment on FEndDataTableItemCraftRecipeCondition");
static_assert(sizeof(FEndDataTableItemCraftRecipeCondition) == 0x000048, "Wrong size on FEndDataTableItemCraftRecipeCondition");
static_assert(offsetof(FEndDataTableItemCraftRecipeCondition, ConditionType_Array) == 0x000008, "Member 'FEndDataTableItemCraftRecipeCondition::ConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipeCondition, ConditionValueInt_Array) == 0x000018, "Member 'FEndDataTableItemCraftRecipeCondition::ConditionValueInt_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipeCondition, ConditionValueName_Array) == 0x000028, "Member 'FEndDataTableItemCraftRecipeCondition::ConditionValueName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemCraftRecipeCondition, ConditionConnectType_Array) == 0x000038, "Member 'FEndDataTableItemCraftRecipeCondition::ConditionConnectType_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableItemDrop
// 0x0098 (0x00A0 - 0x0008)
struct FEndDataTableItemDrop final : public FEndDataTableRowBase
{
public:
	uint8                                         Empty;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Item_Array;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ItemPercent_Array;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ItemNum_Array;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 ItemDropTextId;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ItemDropNotGetTextId;                              // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MakoStoneDamageSource_Array;                       // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 MakoStonePercent_Array;                            // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 MakoStoneNum_Array;                                // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 MakoStoneDropTextId;                               // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableItemDrop) == 0x000008, "Wrong alignment on FEndDataTableItemDrop");
static_assert(sizeof(FEndDataTableItemDrop) == 0x0000A0, "Wrong size on FEndDataTableItemDrop");
static_assert(offsetof(FEndDataTableItemDrop, Empty) == 0x000008, "Member 'FEndDataTableItemDrop::Empty' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, Item_Array) == 0x000010, "Member 'FEndDataTableItemDrop::Item_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, ItemPercent_Array) == 0x000020, "Member 'FEndDataTableItemDrop::ItemPercent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, ItemNum_Array) == 0x000030, "Member 'FEndDataTableItemDrop::ItemNum_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, ItemDropTextId) == 0x000040, "Member 'FEndDataTableItemDrop::ItemDropTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, ItemDropNotGetTextId) == 0x000050, "Member 'FEndDataTableItemDrop::ItemDropNotGetTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, MakoStoneDamageSource_Array) == 0x000060, "Member 'FEndDataTableItemDrop::MakoStoneDamageSource_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, MakoStonePercent_Array) == 0x000070, "Member 'FEndDataTableItemDrop::MakoStonePercent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, MakoStoneNum_Array) == 0x000080, "Member 'FEndDataTableItemDrop::MakoStoneNum_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, MakoStoneDropTextId) == 0x000090, "Member 'FEndDataTableItemDrop::MakoStoneDropTextId' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableJunonParadeTownSoldierFormationMatching
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableJunonParadeTownSoldierFormationMatching final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 PlatoonNumber_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PerformanceFormation_Array;                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PerformanceDifficulty_Array;                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         PerformanceHelpText_Array;                         // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableJunonParadeTownSoldierFormationMatching) == 0x000008, "Wrong alignment on FEndDataTableJunonParadeTownSoldierFormationMatching");
static_assert(sizeof(FEndDataTableJunonParadeTownSoldierFormationMatching) == 0x000048, "Wrong size on FEndDataTableJunonParadeTownSoldierFormationMatching");
static_assert(offsetof(FEndDataTableJunonParadeTownSoldierFormationMatching, PlatoonNumber_Array) == 0x000008, "Member 'FEndDataTableJunonParadeTownSoldierFormationMatching::PlatoonNumber_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableJunonParadeTownSoldierFormationMatching, PerformanceFormation_Array) == 0x000018, "Member 'FEndDataTableJunonParadeTownSoldierFormationMatching::PerformanceFormation_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableJunonParadeTownSoldierFormationMatching, PerformanceDifficulty_Array) == 0x000028, "Member 'FEndDataTableJunonParadeTownSoldierFormationMatching::PerformanceDifficulty_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableJunonParadeTownSoldierFormationMatching, PerformanceHelpText_Array) == 0x000038, "Member 'FEndDataTableJunonParadeTownSoldierFormationMatching::PerformanceHelpText_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableLifeSpotInputMiniGameCommonParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableLifeSpotInputMiniGameCommonParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ParamString;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ParamFloat;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableLifeSpotInputMiniGameCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableLifeSpotInputMiniGameCommonParameter");
static_assert(sizeof(FEndDataTableLifeSpotInputMiniGameCommonParameter) == 0x000018, "Wrong size on FEndDataTableLifeSpotInputMiniGameCommonParameter");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameCommonParameter, ParamString) == 0x000008, "Member 'FEndDataTableLifeSpotInputMiniGameCommonParameter::ParamString' has a wrong offset!");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameCommonParameter, ParamFloat) == 0x000010, "Member 'FEndDataTableLifeSpotInputMiniGameCommonParameter::ParamFloat' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableLifeSpotInputMiniGameLocationParameter
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableLifeSpotInputMiniGameLocationParameter final : public FEndDataTableRowBase
{
public:
	uint8                                         WaveCount;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 InputFrameStartRadius_Array;                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 InputFrameMovingSpeed_Array;                       // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 InputFrameThickness_Array;                         // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 JudgeFrameRadius_Array;                            // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 JudgeFrameThickness_Array;                         // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           WaveClearVibrationID_Array;                        // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           WaveClearStateTrigger_Array;                       // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   AllClearStateTrigger;                              // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WaitCompleteSeconds;                               // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableLifeSpotInputMiniGameLocationParameter) == 0x000008, "Wrong alignment on FEndDataTableLifeSpotInputMiniGameLocationParameter");
static_assert(sizeof(FEndDataTableLifeSpotInputMiniGameLocationParameter) == 0x000090, "Wrong size on FEndDataTableLifeSpotInputMiniGameLocationParameter");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameLocationParameter, WaveCount) == 0x000008, "Member 'FEndDataTableLifeSpotInputMiniGameLocationParameter::WaveCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameLocationParameter, InputFrameStartRadius_Array) == 0x000010, "Member 'FEndDataTableLifeSpotInputMiniGameLocationParameter::InputFrameStartRadius_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameLocationParameter, InputFrameMovingSpeed_Array) == 0x000020, "Member 'FEndDataTableLifeSpotInputMiniGameLocationParameter::InputFrameMovingSpeed_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameLocationParameter, InputFrameThickness_Array) == 0x000030, "Member 'FEndDataTableLifeSpotInputMiniGameLocationParameter::InputFrameThickness_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameLocationParameter, JudgeFrameRadius_Array) == 0x000040, "Member 'FEndDataTableLifeSpotInputMiniGameLocationParameter::JudgeFrameRadius_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameLocationParameter, JudgeFrameThickness_Array) == 0x000050, "Member 'FEndDataTableLifeSpotInputMiniGameLocationParameter::JudgeFrameThickness_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameLocationParameter, WaveClearVibrationID_Array) == 0x000060, "Member 'FEndDataTableLifeSpotInputMiniGameLocationParameter::WaveClearVibrationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameLocationParameter, WaveClearStateTrigger_Array) == 0x000070, "Member 'FEndDataTableLifeSpotInputMiniGameLocationParameter::WaveClearStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameLocationParameter, AllClearStateTrigger) == 0x000080, "Member 'FEndDataTableLifeSpotInputMiniGameLocationParameter::AllClearStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableLifeSpotInputMiniGameLocationParameter, WaitCompleteSeconds) == 0x000088, "Member 'FEndDataTableLifeSpotInputMiniGameLocationParameter::WaitCompleteSeconds' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableLoadingTips
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableLoadingTips final : public FEndDataTableRowBase
{
public:
	uint8                                         IsUseLayerIndex;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 LayerIndex_Array;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ReferenceIndex;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ViewTitle_Array;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ViewText_Array;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ImagePath_Array;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableLoadingTips) == 0x000008, "Wrong alignment on FEndDataTableLoadingTips");
static_assert(sizeof(FEndDataTableLoadingTips) == 0x000058, "Wrong size on FEndDataTableLoadingTips");
static_assert(offsetof(FEndDataTableLoadingTips, IsUseLayerIndex) == 0x000008, "Member 'FEndDataTableLoadingTips::IsUseLayerIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLoadingTips, LayerIndex_Array) == 0x000010, "Member 'FEndDataTableLoadingTips::LayerIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLoadingTips, ReferenceIndex) == 0x000020, "Member 'FEndDataTableLoadingTips::ReferenceIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLoadingTips, ViewTitle_Array) == 0x000028, "Member 'FEndDataTableLoadingTips::ViewTitle_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLoadingTips, ViewText_Array) == 0x000038, "Member 'FEndDataTableLoadingTips::ViewText_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLoadingTips, ImagePath_Array) == 0x000048, "Member 'FEndDataTableLoadingTips::ImagePath_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableLocationProgrammer
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableLocationProgrammer final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           EntryObjectList_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   NextLocation;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableLocationProgrammer) == 0x000008, "Wrong alignment on FEndDataTableLocationProgrammer");
static_assert(sizeof(FEndDataTableLocationProgrammer) == 0x000020, "Wrong size on FEndDataTableLocationProgrammer");
static_assert(offsetof(FEndDataTableLocationProgrammer, EntryObjectList_Array) == 0x000008, "Member 'FEndDataTableLocationProgrammer::EntryObjectList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationProgrammer, NextLocation) == 0x000018, "Member 'FEndDataTableLocationProgrammer::NextLocation' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableLocationResident
// 0x01F8 (0x0200 - 0x0008)
struct FEndDataTableLocationResident final : public FEndDataTableRowBase
{
public:
	class FString                                 Detail;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UniqueIndex;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MainLocationUniqueIndex;                           // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 NaviMapSaveDataUniqueIndex_Array;                  // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         PriorityBias;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LocationType;                                      // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GroupTargetID;                                     // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisablePartyWarpInFastTravel;                      // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AutoSaveAreaNameActionID;                          // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsWorldMap;                                        // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsWorldMapForChadleyTalk;                          // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AreaFlag;                                          // 0x004A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BaseLocation;                                      // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ChildLocationID_Array;                             // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         HaveOctree;                                        // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OctreeSeparateType;                                // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OctreeExtent;                                      // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MapIconRefLocationID_Array;                        // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   ChapterID;                                         // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ExistGroundCreateActor;                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationScale;                                     // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationOffsetX;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationOffsetY;                                   // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationOffsetZ;                                   // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationSubOffsetX;                                // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationSubOffsetY;                                // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationSubOffsetZ;                                // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetLocationX;                                   // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetLocationY;                                   // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetLocationZ;                                   // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EntryMainLocationStoryFlag;                        // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MainLocation;                                      // 0x00BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MainLocationName;                                  // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UnuseRelease;                                      // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HiddenFieldTest;                                   // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DebugReserveCharaPopMemory;                        // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreCollisionAttribute;                          // 0x00D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LoadDebugAllDataTable;                             // 0x00D5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CharaPopLODLightEnableDrawDist;                    // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODLightInCameraTickDist;                  // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODLightOutCameraTickDist;                 // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODLightShouldTickDist;                    // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODMiddleEnableDrawDist;                   // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODMiddleInCameraTickDist;                 // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODMiddleOutCameraTickDist;                // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODMiddleShouldTickDist;                   // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODLightEnableDrawDistNEO;                 // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODLightInCameraTickDistNEO;               // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODLightOutCameraTickDistNEO;              // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODLightShouldTickDistNEO;                 // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODMiddleEnableDrawDistNEO;                // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODMiddleInCameraTickDistNEO;              // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODMiddleOutCameraTickDistNEO;             // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CharaPopLODMiddleShouldTickDistNEO;                // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TruthLocationID;                                   // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TruthLocationLayerIndex;                           // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocationName;                                      // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FinishTurorial;                                    // 0x0138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HideLocationGUI;                                   // 0x0139(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TreasureSpecIndex;                                 // 0x013A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13B[0x5];                                      // 0x013B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PlayerInfo_Array;                                  // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EntryObject_Array;                                 // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResidentPlannerLevelSet_Array;                     // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           IgnoreCollisionAttributeStoryFlagName_Array;       // 0x0170(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           IgnoreCollisionAttributeActorName_Array;           // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           IgnoreFootAttributeActorName_Array;                // 0x0190(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         SlotDetailList_Array;                              // 0x01A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SlotPresetList_Array;                              // 0x01B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DebugBeginingStoryFlag_Array;                      // 0x01C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DebugStoryFlag_Array;                              // 0x01D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DebugDisabeStoryFlag_Array;                        // 0x01E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 LocationJumpTransform_Array;                       // 0x01F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableLocationResident) == 0x000008, "Wrong alignment on FEndDataTableLocationResident");
static_assert(sizeof(FEndDataTableLocationResident) == 0x000200, "Wrong size on FEndDataTableLocationResident");
static_assert(offsetof(FEndDataTableLocationResident, Detail) == 0x000008, "Member 'FEndDataTableLocationResident::Detail' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, UniqueIndex) == 0x000018, "Member 'FEndDataTableLocationResident::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, MainLocationUniqueIndex) == 0x00001C, "Member 'FEndDataTableLocationResident::MainLocationUniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, NaviMapSaveDataUniqueIndex_Array) == 0x000020, "Member 'FEndDataTableLocationResident::NaviMapSaveDataUniqueIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, PriorityBias) == 0x000030, "Member 'FEndDataTableLocationResident::PriorityBias' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationType) == 0x000031, "Member 'FEndDataTableLocationResident::LocationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, GroupTargetID) == 0x000034, "Member 'FEndDataTableLocationResident::GroupTargetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, DisablePartyWarpInFastTravel) == 0x00003C, "Member 'FEndDataTableLocationResident::DisablePartyWarpInFastTravel' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, AutoSaveAreaNameActionID) == 0x000040, "Member 'FEndDataTableLocationResident::AutoSaveAreaNameActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, IsWorldMap) == 0x000048, "Member 'FEndDataTableLocationResident::IsWorldMap' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, IsWorldMapForChadleyTalk) == 0x000049, "Member 'FEndDataTableLocationResident::IsWorldMapForChadleyTalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, AreaFlag) == 0x00004A, "Member 'FEndDataTableLocationResident::AreaFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, BaseLocation) == 0x00004C, "Member 'FEndDataTableLocationResident::BaseLocation' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, ChildLocationID_Array) == 0x000058, "Member 'FEndDataTableLocationResident::ChildLocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, HaveOctree) == 0x000068, "Member 'FEndDataTableLocationResident::HaveOctree' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, OctreeSeparateType) == 0x000069, "Member 'FEndDataTableLocationResident::OctreeSeparateType' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, OctreeExtent) == 0x00006C, "Member 'FEndDataTableLocationResident::OctreeExtent' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, MapIconRefLocationID_Array) == 0x000070, "Member 'FEndDataTableLocationResident::MapIconRefLocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, ChapterID) == 0x000080, "Member 'FEndDataTableLocationResident::ChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, ExistGroundCreateActor) == 0x000088, "Member 'FEndDataTableLocationResident::ExistGroundCreateActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationScale) == 0x00008C, "Member 'FEndDataTableLocationResident::LocationScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationOffsetX) == 0x000090, "Member 'FEndDataTableLocationResident::LocationOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationOffsetY) == 0x000094, "Member 'FEndDataTableLocationResident::LocationOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationOffsetZ) == 0x000098, "Member 'FEndDataTableLocationResident::LocationOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationSubOffsetX) == 0x00009C, "Member 'FEndDataTableLocationResident::LocationSubOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationSubOffsetY) == 0x0000A0, "Member 'FEndDataTableLocationResident::LocationSubOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationSubOffsetZ) == 0x0000A4, "Member 'FEndDataTableLocationResident::LocationSubOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, TargetLocationX) == 0x0000A8, "Member 'FEndDataTableLocationResident::TargetLocationX' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, TargetLocationY) == 0x0000AC, "Member 'FEndDataTableLocationResident::TargetLocationY' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, TargetLocationZ) == 0x0000B0, "Member 'FEndDataTableLocationResident::TargetLocationZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, EntryMainLocationStoryFlag) == 0x0000B4, "Member 'FEndDataTableLocationResident::EntryMainLocationStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, MainLocation) == 0x0000BC, "Member 'FEndDataTableLocationResident::MainLocation' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, MainLocationName) == 0x0000C0, "Member 'FEndDataTableLocationResident::MainLocationName' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, UnuseRelease) == 0x0000C8, "Member 'FEndDataTableLocationResident::UnuseRelease' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, HiddenFieldTest) == 0x0000CC, "Member 'FEndDataTableLocationResident::HiddenFieldTest' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, DebugReserveCharaPopMemory) == 0x0000D0, "Member 'FEndDataTableLocationResident::DebugReserveCharaPopMemory' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, IgnoreCollisionAttribute) == 0x0000D4, "Member 'FEndDataTableLocationResident::IgnoreCollisionAttribute' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LoadDebugAllDataTable) == 0x0000D5, "Member 'FEndDataTableLocationResident::LoadDebugAllDataTable' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightEnableDrawDist) == 0x0000D8, "Member 'FEndDataTableLocationResident::CharaPopLODLightEnableDrawDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightInCameraTickDist) == 0x0000DC, "Member 'FEndDataTableLocationResident::CharaPopLODLightInCameraTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightOutCameraTickDist) == 0x0000E0, "Member 'FEndDataTableLocationResident::CharaPopLODLightOutCameraTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightShouldTickDist) == 0x0000E4, "Member 'FEndDataTableLocationResident::CharaPopLODLightShouldTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleEnableDrawDist) == 0x0000E8, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleEnableDrawDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleInCameraTickDist) == 0x0000EC, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleInCameraTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleOutCameraTickDist) == 0x0000F0, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleOutCameraTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleShouldTickDist) == 0x0000F4, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleShouldTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightEnableDrawDistNEO) == 0x0000F8, "Member 'FEndDataTableLocationResident::CharaPopLODLightEnableDrawDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightInCameraTickDistNEO) == 0x0000FC, "Member 'FEndDataTableLocationResident::CharaPopLODLightInCameraTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightOutCameraTickDistNEO) == 0x000100, "Member 'FEndDataTableLocationResident::CharaPopLODLightOutCameraTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightShouldTickDistNEO) == 0x000104, "Member 'FEndDataTableLocationResident::CharaPopLODLightShouldTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleEnableDrawDistNEO) == 0x000108, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleEnableDrawDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleInCameraTickDistNEO) == 0x00010C, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleInCameraTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleOutCameraTickDistNEO) == 0x000110, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleOutCameraTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleShouldTickDistNEO) == 0x000114, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleShouldTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, TruthLocationID) == 0x000118, "Member 'FEndDataTableLocationResident::TruthLocationID' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, TruthLocationLayerIndex) == 0x000120, "Member 'FEndDataTableLocationResident::TruthLocationLayerIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationName) == 0x000128, "Member 'FEndDataTableLocationResident::LocationName' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, FinishTurorial) == 0x000138, "Member 'FEndDataTableLocationResident::FinishTurorial' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, HideLocationGUI) == 0x000139, "Member 'FEndDataTableLocationResident::HideLocationGUI' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, TreasureSpecIndex) == 0x00013A, "Member 'FEndDataTableLocationResident::TreasureSpecIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, PlayerInfo_Array) == 0x000140, "Member 'FEndDataTableLocationResident::PlayerInfo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, EntryObject_Array) == 0x000150, "Member 'FEndDataTableLocationResident::EntryObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, ResidentPlannerLevelSet_Array) == 0x000160, "Member 'FEndDataTableLocationResident::ResidentPlannerLevelSet_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, IgnoreCollisionAttributeStoryFlagName_Array) == 0x000170, "Member 'FEndDataTableLocationResident::IgnoreCollisionAttributeStoryFlagName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, IgnoreCollisionAttributeActorName_Array) == 0x000180, "Member 'FEndDataTableLocationResident::IgnoreCollisionAttributeActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, IgnoreFootAttributeActorName_Array) == 0x000190, "Member 'FEndDataTableLocationResident::IgnoreFootAttributeActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, SlotDetailList_Array) == 0x0001A0, "Member 'FEndDataTableLocationResident::SlotDetailList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, SlotPresetList_Array) == 0x0001B0, "Member 'FEndDataTableLocationResident::SlotPresetList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, DebugBeginingStoryFlag_Array) == 0x0001C0, "Member 'FEndDataTableLocationResident::DebugBeginingStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, DebugStoryFlag_Array) == 0x0001D0, "Member 'FEndDataTableLocationResident::DebugStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, DebugDisabeStoryFlag_Array) == 0x0001E0, "Member 'FEndDataTableLocationResident::DebugDisabeStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationJumpTransform_Array) == 0x0001F0, "Member 'FEndDataTableLocationResident::LocationJumpTransform_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableLocationResidentEnvironment
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableLocationResidentEnvironment final : public FEndDataTableRowBase
{
public:
	float                                         PlayerLocX;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerLocY;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerLocZ;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerYaw;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableLocationResidentEnvironment) == 0x000008, "Wrong alignment on FEndDataTableLocationResidentEnvironment");
static_assert(sizeof(FEndDataTableLocationResidentEnvironment) == 0x000018, "Wrong size on FEndDataTableLocationResidentEnvironment");
static_assert(offsetof(FEndDataTableLocationResidentEnvironment, PlayerLocX) == 0x000008, "Member 'FEndDataTableLocationResidentEnvironment::PlayerLocX' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResidentEnvironment, PlayerLocY) == 0x00000C, "Member 'FEndDataTableLocationResidentEnvironment::PlayerLocY' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResidentEnvironment, PlayerLocZ) == 0x000010, "Member 'FEndDataTableLocationResidentEnvironment::PlayerLocZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResidentEnvironment, PlayerYaw) == 0x000014, "Member 'FEndDataTableLocationResidentEnvironment::PlayerYaw' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableLocationWork
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableLocationWork final : public FEndDataTableRowBase
{
public:
	int32                                         LocationNumber;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableLocationWork) == 0x000008, "Wrong alignment on FEndDataTableLocationWork");
static_assert(sizeof(FEndDataTableLocationWork) == 0x000010, "Wrong size on FEndDataTableLocationWork");
static_assert(offsetof(FEndDataTableLocationWork, LocationNumber) == 0x000008, "Member 'FEndDataTableLocationWork::LocationNumber' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMainMenuCondition
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableMainMenuCondition final : public FEndDataTableRowBase
{
public:
	int32                                         KindItemType;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SceneType;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CondtionType;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CondtionStoryFlag;                                 // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NextConditionId;                                   // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MatchVisibleType;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MismatchVisibleType;                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableMainMenuCondition) == 0x000008, "Wrong alignment on FEndDataTableMainMenuCondition");
static_assert(sizeof(FEndDataTableMainMenuCondition) == 0x000030, "Wrong size on FEndDataTableMainMenuCondition");
static_assert(offsetof(FEndDataTableMainMenuCondition, KindItemType) == 0x000008, "Member 'FEndDataTableMainMenuCondition::KindItemType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMainMenuCondition, SceneType) == 0x00000C, "Member 'FEndDataTableMainMenuCondition::SceneType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMainMenuCondition, CondtionType) == 0x000010, "Member 'FEndDataTableMainMenuCondition::CondtionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMainMenuCondition, CondtionStoryFlag) == 0x000014, "Member 'FEndDataTableMainMenuCondition::CondtionStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMainMenuCondition, NextConditionId) == 0x00001C, "Member 'FEndDataTableMainMenuCondition::NextConditionId' has a wrong offset!");
static_assert(offsetof(FEndDataTableMainMenuCondition, MatchVisibleType) == 0x000024, "Member 'FEndDataTableMainMenuCondition::MatchVisibleType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMainMenuCondition, MismatchVisibleType) == 0x000028, "Member 'FEndDataTableMainMenuCondition::MismatchVisibleType' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableManual
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTableManual final : public FEndDataTableRowBase
{
public:
	uint8                                         Category;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewFlag;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReadFlag;                                          // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SortIndex;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParentID;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TitleName;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         SubTitleName_Array;                                // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DetailType_Array;                                  // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ManualItemStyle_Array;                             // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ManualItemDescription_Array;                       // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ManualItemImageName_Array;                         // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableManual) == 0x000008, "Wrong alignment on FEndDataTableManual");
static_assert(sizeof(FEndDataTableManual) == 0x000088, "Wrong size on FEndDataTableManual");
static_assert(offsetof(FEndDataTableManual, Category) == 0x000008, "Member 'FEndDataTableManual::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ViewFlag) == 0x00000C, "Member 'FEndDataTableManual::ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ReadFlag) == 0x000014, "Member 'FEndDataTableManual::ReadFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, SortIndex) == 0x00001C, "Member 'FEndDataTableManual::SortIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ParentID) == 0x000020, "Member 'FEndDataTableManual::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, TitleName) == 0x000028, "Member 'FEndDataTableManual::TitleName' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, SubTitleName_Array) == 0x000038, "Member 'FEndDataTableManual::SubTitleName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, DetailType_Array) == 0x000048, "Member 'FEndDataTableManual::DetailType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ManualItemStyle_Array) == 0x000058, "Member 'FEndDataTableManual::ManualItemStyle_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ManualItemDescription_Array) == 0x000068, "Member 'FEndDataTableManual::ManualItemDescription_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ManualItemImageName_Array) == 0x000078, "Member 'FEndDataTableManual::ManualItemImageName_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMapIconInfo
// 0x0158 (0x0160 - 0x0008)
struct FEndDataTableMapIconInfo final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 IconChangeCondition_Array;                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextIconID_Array;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StringArgument_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerArgument_Array;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 FloatArgument_Array;                               // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ViewConditionType;                                 // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ViewFlagID_Array;                                  // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   LocationId;                                        // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AffiliationName;                                   // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RefSceneLayerType;                                 // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FilterLocationID_Array;                            // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ExcludeFilterLocationID_Array;                     // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   GotoLocationID;                                    // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StateType;                                         // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StateTargetID;                                     // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 IconType_Array;                                    // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         OnlyField;                                         // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InvisibleNavimap;                                  // 0x00D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InvisibleCompass;                                  // 0x00D2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InvisibleArea;                                     // 0x00D3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InText;                                            // 0x00D8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 IconStateStringArgument;                           // 0x00E8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ObjectType;                                        // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   objectID;                                          // 0x00FC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RefIDWhenNotFoundObjectID;                         // 0x0104(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SocketName;                                        // 0x010C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetX;                                           // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetY;                                           // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetZ;                                           // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HeightFromOffset;                                  // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ViewDistance;                                      // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ReleaseInvViewFlag;                                // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SaveInvisibleViewStoryFlag;                        // 0x012C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReleaseInvViewDistance;                            // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AreaRadius;                                        // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         InVisible3DFieldIcon;                              // 0x013C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewDistanceInArea;                                // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ViewDistanceInTown;                                // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverlapIconAreaMapOffsetX;                         // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverlapIconAreaMapOffsetY;                         // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NaviMapLayerIndex;                                 // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChapterID;                                         // 0x0154(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableMapIconInfo) == 0x000008, "Wrong alignment on FEndDataTableMapIconInfo");
static_assert(sizeof(FEndDataTableMapIconInfo) == 0x000160, "Wrong size on FEndDataTableMapIconInfo");
static_assert(offsetof(FEndDataTableMapIconInfo, IconChangeCondition_Array) == 0x000008, "Member 'FEndDataTableMapIconInfo::IconChangeCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, NextIconID_Array) == 0x000018, "Member 'FEndDataTableMapIconInfo::NextIconID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, StringArgument_Array) == 0x000028, "Member 'FEndDataTableMapIconInfo::StringArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, IntegerArgument_Array) == 0x000038, "Member 'FEndDataTableMapIconInfo::IntegerArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, FloatArgument_Array) == 0x000048, "Member 'FEndDataTableMapIconInfo::FloatArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ViewConditionType) == 0x000058, "Member 'FEndDataTableMapIconInfo::ViewConditionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ViewFlagID_Array) == 0x000060, "Member 'FEndDataTableMapIconInfo::ViewFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, LocationId) == 0x000070, "Member 'FEndDataTableMapIconInfo::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, AffiliationName) == 0x000078, "Member 'FEndDataTableMapIconInfo::AffiliationName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, RefSceneLayerType) == 0x000080, "Member 'FEndDataTableMapIconInfo::RefSceneLayerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, FilterLocationID_Array) == 0x000088, "Member 'FEndDataTableMapIconInfo::FilterLocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ExcludeFilterLocationID_Array) == 0x000098, "Member 'FEndDataTableMapIconInfo::ExcludeFilterLocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, GotoLocationID) == 0x0000A8, "Member 'FEndDataTableMapIconInfo::GotoLocationID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, StateType) == 0x0000B0, "Member 'FEndDataTableMapIconInfo::StateType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, StateTargetID) == 0x0000B4, "Member 'FEndDataTableMapIconInfo::StateTargetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, IconType_Array) == 0x0000C0, "Member 'FEndDataTableMapIconInfo::IconType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, OnlyField) == 0x0000D0, "Member 'FEndDataTableMapIconInfo::OnlyField' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, InvisibleNavimap) == 0x0000D1, "Member 'FEndDataTableMapIconInfo::InvisibleNavimap' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, InvisibleCompass) == 0x0000D2, "Member 'FEndDataTableMapIconInfo::InvisibleCompass' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, InvisibleArea) == 0x0000D3, "Member 'FEndDataTableMapIconInfo::InvisibleArea' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, InText) == 0x0000D8, "Member 'FEndDataTableMapIconInfo::InText' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, IconStateStringArgument) == 0x0000E8, "Member 'FEndDataTableMapIconInfo::IconStateStringArgument' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ObjectType) == 0x0000F8, "Member 'FEndDataTableMapIconInfo::ObjectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, objectID) == 0x0000FC, "Member 'FEndDataTableMapIconInfo::objectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, RefIDWhenNotFoundObjectID) == 0x000104, "Member 'FEndDataTableMapIconInfo::RefIDWhenNotFoundObjectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, SocketName) == 0x00010C, "Member 'FEndDataTableMapIconInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, OffsetX) == 0x000114, "Member 'FEndDataTableMapIconInfo::OffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, OffsetY) == 0x000118, "Member 'FEndDataTableMapIconInfo::OffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, OffsetZ) == 0x00011C, "Member 'FEndDataTableMapIconInfo::OffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, HeightFromOffset) == 0x000120, "Member 'FEndDataTableMapIconInfo::HeightFromOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ViewDistance) == 0x000124, "Member 'FEndDataTableMapIconInfo::ViewDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ReleaseInvViewFlag) == 0x000128, "Member 'FEndDataTableMapIconInfo::ReleaseInvViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, SaveInvisibleViewStoryFlag) == 0x00012C, "Member 'FEndDataTableMapIconInfo::SaveInvisibleViewStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ReleaseInvViewDistance) == 0x000134, "Member 'FEndDataTableMapIconInfo::ReleaseInvViewDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, AreaRadius) == 0x000138, "Member 'FEndDataTableMapIconInfo::AreaRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, InVisible3DFieldIcon) == 0x00013C, "Member 'FEndDataTableMapIconInfo::InVisible3DFieldIcon' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ViewDistanceInArea) == 0x000140, "Member 'FEndDataTableMapIconInfo::ViewDistanceInArea' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ViewDistanceInTown) == 0x000144, "Member 'FEndDataTableMapIconInfo::ViewDistanceInTown' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, OverlapIconAreaMapOffsetX) == 0x000148, "Member 'FEndDataTableMapIconInfo::OverlapIconAreaMapOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, OverlapIconAreaMapOffsetY) == 0x00014C, "Member 'FEndDataTableMapIconInfo::OverlapIconAreaMapOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, NaviMapLayerIndex) == 0x000150, "Member 'FEndDataTableMapIconInfo::NaviMapLayerIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ChapterID) == 0x000154, "Member 'FEndDataTableMapIconInfo::ChapterID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMemo
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableMemo final : public FEndDataTableRowBase
{
public:
	class FName                                   ManagedFlag;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NextMemoID;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HIdeUI;                                            // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Use2DZoom;                                         // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FilterLocationID_Array;                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ExcludeFilterLocationID_Array;                     // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 ImageName;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ModelName;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BoneName;                                          // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetX;                                           // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetY;                                           // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetZ;                                           // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetPitch;                                       // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetYaw;                                         // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OffsetRoll;                                        // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ScaleX;                                            // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ScaleY;                                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ScaleZ;                                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ZoomFOV;                                           // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableMemo) == 0x000008, "Wrong alignment on FEndDataTableMemo");
static_assert(sizeof(FEndDataTableMemo) == 0x000090, "Wrong size on FEndDataTableMemo");
static_assert(offsetof(FEndDataTableMemo, ManagedFlag) == 0x000008, "Member 'FEndDataTableMemo::ManagedFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, NextMemoID) == 0x000010, "Member 'FEndDataTableMemo::NextMemoID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, HIdeUI) == 0x000018, "Member 'FEndDataTableMemo::HIdeUI' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, Use2DZoom) == 0x000019, "Member 'FEndDataTableMemo::Use2DZoom' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, FilterLocationID_Array) == 0x000020, "Member 'FEndDataTableMemo::FilterLocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, ExcludeFilterLocationID_Array) == 0x000030, "Member 'FEndDataTableMemo::ExcludeFilterLocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, ImageName) == 0x000040, "Member 'FEndDataTableMemo::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, ModelName) == 0x000050, "Member 'FEndDataTableMemo::ModelName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, BoneName) == 0x000060, "Member 'FEndDataTableMemo::BoneName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, OffsetX) == 0x000068, "Member 'FEndDataTableMemo::OffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, OffsetY) == 0x00006C, "Member 'FEndDataTableMemo::OffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, OffsetZ) == 0x000070, "Member 'FEndDataTableMemo::OffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, OffsetPitch) == 0x000074, "Member 'FEndDataTableMemo::OffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, OffsetYaw) == 0x000078, "Member 'FEndDataTableMemo::OffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, OffsetRoll) == 0x00007C, "Member 'FEndDataTableMemo::OffsetRoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, ScaleX) == 0x000080, "Member 'FEndDataTableMemo::ScaleX' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, ScaleY) == 0x000084, "Member 'FEndDataTableMemo::ScaleY' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, ScaleZ) == 0x000088, "Member 'FEndDataTableMemo::ScaleZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableMemo, ZoomFOV) == 0x00008C, "Member 'FEndDataTableMemo::ZoomFOV' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMidgarMapLocationPoint
// 0x00A0 (0x00A8 - 0x0008)
struct FEndDataTableMidgarMapLocationPoint final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PointName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Location;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SocketName;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ShowLabelCondition;                                // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HideUntilShowLabel;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HideLabelCondition;                                // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChangeAltCondition;                                // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LocationWire_Array;                                // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LocationSurface_Array;                             // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LocationWireAlt_Array;                             // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LocationAltSurface_Array;                          // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         IsShortUILabel;                                    // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ExtraLocation_Array;                               // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableMidgarMapLocationPoint) == 0x000008, "Wrong alignment on FEndDataTableMidgarMapLocationPoint");
static_assert(sizeof(FEndDataTableMidgarMapLocationPoint) == 0x0000A8, "Wrong size on FEndDataTableMidgarMapLocationPoint");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, UniqueIndex) == 0x000008, "Member 'FEndDataTableMidgarMapLocationPoint::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, PointName) == 0x000010, "Member 'FEndDataTableMidgarMapLocationPoint::PointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, Location) == 0x000020, "Member 'FEndDataTableMidgarMapLocationPoint::Location' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, SocketName) == 0x000028, "Member 'FEndDataTableMidgarMapLocationPoint::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, ShowLabelCondition) == 0x000030, "Member 'FEndDataTableMidgarMapLocationPoint::ShowLabelCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, HideUntilShowLabel) == 0x000038, "Member 'FEndDataTableMidgarMapLocationPoint::HideUntilShowLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, HideLabelCondition) == 0x00003C, "Member 'FEndDataTableMidgarMapLocationPoint::HideLabelCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, ChangeAltCondition) == 0x000044, "Member 'FEndDataTableMidgarMapLocationPoint::ChangeAltCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, LocationWire_Array) == 0x000050, "Member 'FEndDataTableMidgarMapLocationPoint::LocationWire_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, LocationSurface_Array) == 0x000060, "Member 'FEndDataTableMidgarMapLocationPoint::LocationSurface_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, LocationWireAlt_Array) == 0x000070, "Member 'FEndDataTableMidgarMapLocationPoint::LocationWireAlt_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, LocationAltSurface_Array) == 0x000080, "Member 'FEndDataTableMidgarMapLocationPoint::LocationAltSurface_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, IsShortUILabel) == 0x000090, "Member 'FEndDataTableMidgarMapLocationPoint::IsShortUILabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, ExtraLocation_Array) == 0x000098, "Member 'FEndDataTableMidgarMapLocationPoint::ExtraLocation_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMiniGameAssetPacker
// 0x00E0 (0x00E8 - 0x0008)
struct FEndDataTableMiniGameAssetPacker final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           MotionList_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MotionActionList_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MotionFieldActionList_Array;                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SEList_Array;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           UIList_Array;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EffectList_Array;                                  // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           bgmList_Array;                                     // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MiniGameAsset_Array;                               // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PhysicsBPList_Array;                               // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MeshAssetList_Array;                               // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattleCameraList_Array;                            // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AnimSetList_Array;                                 // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MoviePackList_Array;                               // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EffectPackList_Array;                              // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableMiniGameAssetPacker) == 0x000008, "Wrong alignment on FEndDataTableMiniGameAssetPacker");
static_assert(sizeof(FEndDataTableMiniGameAssetPacker) == 0x0000E8, "Wrong size on FEndDataTableMiniGameAssetPacker");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, MotionList_Array) == 0x000008, "Member 'FEndDataTableMiniGameAssetPacker::MotionList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, MotionActionList_Array) == 0x000018, "Member 'FEndDataTableMiniGameAssetPacker::MotionActionList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, MotionFieldActionList_Array) == 0x000028, "Member 'FEndDataTableMiniGameAssetPacker::MotionFieldActionList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, SEList_Array) == 0x000038, "Member 'FEndDataTableMiniGameAssetPacker::SEList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, UIList_Array) == 0x000048, "Member 'FEndDataTableMiniGameAssetPacker::UIList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, EffectList_Array) == 0x000058, "Member 'FEndDataTableMiniGameAssetPacker::EffectList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, bgmList_Array) == 0x000068, "Member 'FEndDataTableMiniGameAssetPacker::bgmList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, MiniGameAsset_Array) == 0x000078, "Member 'FEndDataTableMiniGameAssetPacker::MiniGameAsset_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, PhysicsBPList_Array) == 0x000088, "Member 'FEndDataTableMiniGameAssetPacker::PhysicsBPList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, MeshAssetList_Array) == 0x000098, "Member 'FEndDataTableMiniGameAssetPacker::MeshAssetList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, BattleCameraList_Array) == 0x0000A8, "Member 'FEndDataTableMiniGameAssetPacker::BattleCameraList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, AnimSetList_Array) == 0x0000B8, "Member 'FEndDataTableMiniGameAssetPacker::AnimSetList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, MoviePackList_Array) == 0x0000C8, "Member 'FEndDataTableMiniGameAssetPacker::MoviePackList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, EffectPackList_Array) == 0x0000D8, "Member 'FEndDataTableMiniGameAssetPacker::EffectPackList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMiniGameSetting
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableMiniGameSetting final : public FEndDataTableRowBase
{
public:
	int8                                          UseSoundLayer;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableMiniGameSetting) == 0x000008, "Wrong alignment on FEndDataTableMiniGameSetting");
static_assert(sizeof(FEndDataTableMiniGameSetting) == 0x000010, "Wrong size on FEndDataTableMiniGameSetting");
static_assert(offsetof(FEndDataTableMiniGameSetting, UseSoundLayer) == 0x000008, "Member 'FEndDataTableMiniGameSetting::UseSoundLayer' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMobAbstractName
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableMobAbstractName final : public FEndDataTableRowBase
{
public:
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableMobAbstractName) == 0x000008, "Wrong alignment on FEndDataTableMobAbstractName");
static_assert(sizeof(FEndDataTableMobAbstractName) == 0x000010, "Wrong size on FEndDataTableMobAbstractName");
static_assert(offsetof(FEndDataTableMobAbstractName, Index) == 0x000008, "Member 'FEndDataTableMobAbstractName::Index' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMoogleCaptureLocationParameter
// 0x00D8 (0x00E0 - 0x0008)
struct FEndDataTableMoogleCaptureLocationParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ClearTrigger;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GameStartPoint;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RestartPoint;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartPoint;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PrepareEvent;                                      // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LocationEventFlag;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PrepareEventEnding;                                // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LocationEventEndingFlag;                           // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Reward;                                            // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SubLevelVolume;                                    // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EventLevelVolume;                                  // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SubLevelPath;                                      // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Timelimit;                                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CountDownSubTitle;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StartTxtTitle;                                     // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StartTxtLevel;                                     // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MotionPath;                                        // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ShopTriggerName;                                   // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShopRadius;                                        // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShopTrickSec;                                      // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShopTrickIntervalSec;                              // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MoogleParam_Array;                                 // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AttractPoint_Array;                                // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableMoogleCaptureLocationParameter) == 0x000008, "Wrong alignment on FEndDataTableMoogleCaptureLocationParameter");
static_assert(sizeof(FEndDataTableMoogleCaptureLocationParameter) == 0x0000E0, "Wrong size on FEndDataTableMoogleCaptureLocationParameter");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, ClearTrigger) == 0x000008, "Member 'FEndDataTableMoogleCaptureLocationParameter::ClearTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, GameStartPoint) == 0x000010, "Member 'FEndDataTableMoogleCaptureLocationParameter::GameStartPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, RestartPoint) == 0x000018, "Member 'FEndDataTableMoogleCaptureLocationParameter::RestartPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, StartPoint) == 0x000020, "Member 'FEndDataTableMoogleCaptureLocationParameter::StartPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, PrepareEvent) == 0x000028, "Member 'FEndDataTableMoogleCaptureLocationParameter::PrepareEvent' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, LocationEventFlag) == 0x000030, "Member 'FEndDataTableMoogleCaptureLocationParameter::LocationEventFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, PrepareEventEnding) == 0x000038, "Member 'FEndDataTableMoogleCaptureLocationParameter::PrepareEventEnding' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, LocationEventEndingFlag) == 0x000040, "Member 'FEndDataTableMoogleCaptureLocationParameter::LocationEventEndingFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, Reward) == 0x000048, "Member 'FEndDataTableMoogleCaptureLocationParameter::Reward' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, SubLevelVolume) == 0x000050, "Member 'FEndDataTableMoogleCaptureLocationParameter::SubLevelVolume' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, EventLevelVolume) == 0x000058, "Member 'FEndDataTableMoogleCaptureLocationParameter::EventLevelVolume' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, SubLevelPath) == 0x000060, "Member 'FEndDataTableMoogleCaptureLocationParameter::SubLevelPath' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, Timelimit) == 0x000068, "Member 'FEndDataTableMoogleCaptureLocationParameter::Timelimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, CountDownSubTitle) == 0x000070, "Member 'FEndDataTableMoogleCaptureLocationParameter::CountDownSubTitle' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, StartTxtTitle) == 0x000080, "Member 'FEndDataTableMoogleCaptureLocationParameter::StartTxtTitle' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, StartTxtLevel) == 0x000090, "Member 'FEndDataTableMoogleCaptureLocationParameter::StartTxtLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, MotionPath) == 0x0000A0, "Member 'FEndDataTableMoogleCaptureLocationParameter::MotionPath' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, ShopTriggerName) == 0x0000A8, "Member 'FEndDataTableMoogleCaptureLocationParameter::ShopTriggerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, ShopRadius) == 0x0000B0, "Member 'FEndDataTableMoogleCaptureLocationParameter::ShopRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, ShopTrickSec) == 0x0000B4, "Member 'FEndDataTableMoogleCaptureLocationParameter::ShopTrickSec' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, ShopTrickIntervalSec) == 0x0000B8, "Member 'FEndDataTableMoogleCaptureLocationParameter::ShopTrickIntervalSec' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, MoogleParam_Array) == 0x0000C0, "Member 'FEndDataTableMoogleCaptureLocationParameter::MoogleParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureLocationParameter, AttractPoint_Array) == 0x0000D0, "Member 'FEndDataTableMoogleCaptureLocationParameter::AttractPoint_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMoogleCaptureMoogleParameter
// 0x00B8 (0x00C0 - 0x0008)
struct FEndDataTableMoogleCaptureMoogleParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   MoogleName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RestartPoint;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CaptureFlag;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MoogleCharaSpec;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CautionSpeed;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CautionRadius;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GrabReleaseSec;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DownRecoverSec;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EatingFruitSec;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FullKupoSec;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PersonalityType;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IconsIndexArray_Array;                             // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   IconsGaugeAnim;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MooglePVActionArray_Array;                         // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         ThrowInterval;                                     // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ThrowIntervalAddRange;                             // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         JammerRange;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ThrowAchieveSec;                                   // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ThrowPrevisRandomMin;                              // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ThrowPrevisRandomMax;                              // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ThrowCloseRandomMin;                               // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ThrowCloseRandomMax;                               // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RescueStartRadius;                                 // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RescuePlayerAngle;                                 // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TrickType;                                         // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TrickInterval;                                     // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TrickRate;                                         // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TrickAddRadius;                                    // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TrickRadiusFromShop;                               // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TrickAngleFromShop;                                // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TrickMotion;                                       // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TrickFloatArgument;                                // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TrickIntArgument0;                                 // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableMoogleCaptureMoogleParameter) == 0x000008, "Wrong alignment on FEndDataTableMoogleCaptureMoogleParameter");
static_assert(sizeof(FEndDataTableMoogleCaptureMoogleParameter) == 0x0000C0, "Wrong size on FEndDataTableMoogleCaptureMoogleParameter");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, MoogleName) == 0x000008, "Member 'FEndDataTableMoogleCaptureMoogleParameter::MoogleName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, RestartPoint) == 0x000010, "Member 'FEndDataTableMoogleCaptureMoogleParameter::RestartPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, CaptureFlag) == 0x000018, "Member 'FEndDataTableMoogleCaptureMoogleParameter::CaptureFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, MoogleCharaSpec) == 0x000020, "Member 'FEndDataTableMoogleCaptureMoogleParameter::MoogleCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, CautionSpeed) == 0x000028, "Member 'FEndDataTableMoogleCaptureMoogleParameter::CautionSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, CautionRadius) == 0x00002C, "Member 'FEndDataTableMoogleCaptureMoogleParameter::CautionRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, GrabReleaseSec) == 0x000030, "Member 'FEndDataTableMoogleCaptureMoogleParameter::GrabReleaseSec' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, DownRecoverSec) == 0x000034, "Member 'FEndDataTableMoogleCaptureMoogleParameter::DownRecoverSec' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, EatingFruitSec) == 0x000038, "Member 'FEndDataTableMoogleCaptureMoogleParameter::EatingFruitSec' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, FullKupoSec) == 0x00003C, "Member 'FEndDataTableMoogleCaptureMoogleParameter::FullKupoSec' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, PersonalityType) == 0x000040, "Member 'FEndDataTableMoogleCaptureMoogleParameter::PersonalityType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, IconsIndexArray_Array) == 0x000048, "Member 'FEndDataTableMoogleCaptureMoogleParameter::IconsIndexArray_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, IconsGaugeAnim) == 0x000058, "Member 'FEndDataTableMoogleCaptureMoogleParameter::IconsGaugeAnim' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, MooglePVActionArray_Array) == 0x000060, "Member 'FEndDataTableMoogleCaptureMoogleParameter::MooglePVActionArray_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, ThrowInterval) == 0x000070, "Member 'FEndDataTableMoogleCaptureMoogleParameter::ThrowInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, ThrowIntervalAddRange) == 0x000074, "Member 'FEndDataTableMoogleCaptureMoogleParameter::ThrowIntervalAddRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, JammerRange) == 0x000078, "Member 'FEndDataTableMoogleCaptureMoogleParameter::JammerRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, ThrowAchieveSec) == 0x00007C, "Member 'FEndDataTableMoogleCaptureMoogleParameter::ThrowAchieveSec' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, ThrowPrevisRandomMin) == 0x000080, "Member 'FEndDataTableMoogleCaptureMoogleParameter::ThrowPrevisRandomMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, ThrowPrevisRandomMax) == 0x000084, "Member 'FEndDataTableMoogleCaptureMoogleParameter::ThrowPrevisRandomMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, ThrowCloseRandomMin) == 0x000088, "Member 'FEndDataTableMoogleCaptureMoogleParameter::ThrowCloseRandomMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, ThrowCloseRandomMax) == 0x00008C, "Member 'FEndDataTableMoogleCaptureMoogleParameter::ThrowCloseRandomMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, RescueStartRadius) == 0x000090, "Member 'FEndDataTableMoogleCaptureMoogleParameter::RescueStartRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, RescuePlayerAngle) == 0x000094, "Member 'FEndDataTableMoogleCaptureMoogleParameter::RescuePlayerAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, TrickType) == 0x000098, "Member 'FEndDataTableMoogleCaptureMoogleParameter::TrickType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, TrickInterval) == 0x00009C, "Member 'FEndDataTableMoogleCaptureMoogleParameter::TrickInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, TrickRate) == 0x0000A0, "Member 'FEndDataTableMoogleCaptureMoogleParameter::TrickRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, TrickAddRadius) == 0x0000A4, "Member 'FEndDataTableMoogleCaptureMoogleParameter::TrickAddRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, TrickRadiusFromShop) == 0x0000A8, "Member 'FEndDataTableMoogleCaptureMoogleParameter::TrickRadiusFromShop' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, TrickAngleFromShop) == 0x0000AC, "Member 'FEndDataTableMoogleCaptureMoogleParameter::TrickAngleFromShop' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, TrickMotion) == 0x0000B0, "Member 'FEndDataTableMoogleCaptureMoogleParameter::TrickMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, TrickFloatArgument) == 0x0000B8, "Member 'FEndDataTableMoogleCaptureMoogleParameter::TrickFloatArgument' has a wrong offset!");
static_assert(offsetof(FEndDataTableMoogleCaptureMoogleParameter, TrickIntArgument0) == 0x0000BC, "Member 'FEndDataTableMoogleCaptureMoogleParameter::TrickIntArgument0' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableMultiByteString
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableMultiByteString final : public FEndDataTableRowBase
{
public:
	class FString                                 MultiByteString;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableMultiByteString) == 0x000008, "Wrong alignment on FEndDataTableMultiByteString");
static_assert(sizeof(FEndDataTableMultiByteString) == 0x000018, "Wrong size on FEndDataTableMultiByteString");
static_assert(offsetof(FEndDataTableMultiByteString, MultiByteString) == 0x000008, "Member 'FEndDataTableMultiByteString::MultiByteString' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableNaviMapWorldOffset
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableNaviMapWorldOffset final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           LocationID_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LocationParent_Array;                              // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 LocationOffsetX_Array;                             // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 LocationOffsetY_Array;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 LocationOffsetZ_Array;                             // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableNaviMapWorldOffset) == 0x000008, "Wrong alignment on FEndDataTableNaviMapWorldOffset");
static_assert(sizeof(FEndDataTableNaviMapWorldOffset) == 0x000058, "Wrong size on FEndDataTableNaviMapWorldOffset");
static_assert(offsetof(FEndDataTableNaviMapWorldOffset, LocationID_Array) == 0x000008, "Member 'FEndDataTableNaviMapWorldOffset::LocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapWorldOffset, LocationParent_Array) == 0x000018, "Member 'FEndDataTableNaviMapWorldOffset::LocationParent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapWorldOffset, LocationOffsetX_Array) == 0x000028, "Member 'FEndDataTableNaviMapWorldOffset::LocationOffsetX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapWorldOffset, LocationOffsetY_Array) == 0x000038, "Member 'FEndDataTableNaviMapWorldOffset::LocationOffsetY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapWorldOffset, LocationOffsetZ_Array) == 0x000048, "Member 'FEndDataTableNaviMapWorldOffset::LocationOffsetZ_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableObject
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableObject final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 AttachID;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AttachLayer;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartStateChange;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableObject) == 0x000008, "Wrong alignment on FEndDataTableObject");
static_assert(sizeof(FEndDataTableObject) == 0x000038, "Wrong size on FEndDataTableObject");
static_assert(offsetof(FEndDataTableObject, UniqueIndex) == 0x000008, "Member 'FEndDataTableObject::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObject, Priority) == 0x00000C, "Member 'FEndDataTableObject::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObject, AttachID) == 0x000010, "Member 'FEndDataTableObject::AttachID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObject, AttachLayer) == 0x000020, "Member 'FEndDataTableObject::AttachLayer' has a wrong offset!");
static_assert(offsetof(FEndDataTableObject, StartStateChange) == 0x000028, "Member 'FEndDataTableObject::StartStateChange' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableObjectActor
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableObjectActor final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ActorName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CharaSpecID;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResponseAreaID_Array;                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaPlayerID;                              // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaPlayerID01;                            // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TweetResponseAreaID;                               // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TweetResponseAreaPlayerID;                         // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         AttributeList_Array;                               // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ForceCreateActor;                                  // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NearFarFadeState;                                  // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Important;                                         // 0x0072(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableObjectActor) == 0x000008, "Wrong alignment on FEndDataTableObjectActor");
static_assert(sizeof(FEndDataTableObjectActor) == 0x000078, "Wrong size on FEndDataTableObjectActor");
static_assert(offsetof(FEndDataTableObjectActor, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectActor::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, Priority) == 0x00000C, "Member 'FEndDataTableObjectActor::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, ActorName) == 0x000010, "Member 'FEndDataTableObjectActor::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, CharaSpecID) == 0x000020, "Member 'FEndDataTableObjectActor::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, ResponseAreaID_Array) == 0x000030, "Member 'FEndDataTableObjectActor::ResponseAreaID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, ResponseAreaPlayerID) == 0x000040, "Member 'FEndDataTableObjectActor::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, ResponseAreaPlayerID01) == 0x000048, "Member 'FEndDataTableObjectActor::ResponseAreaPlayerID01' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, TweetResponseAreaID) == 0x000050, "Member 'FEndDataTableObjectActor::TweetResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, TweetResponseAreaPlayerID) == 0x000058, "Member 'FEndDataTableObjectActor::TweetResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, AttributeList_Array) == 0x000060, "Member 'FEndDataTableObjectActor::AttributeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, ForceCreateActor) == 0x000070, "Member 'FEndDataTableObjectActor::ForceCreateActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, NearFarFadeState) == 0x000071, "Member 'FEndDataTableObjectActor::NearFarFadeState' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, Important) == 0x000072, "Member 'FEndDataTableObjectActor::Important' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableObjectBattleScene
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableObjectBattleScene final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StartStateChange;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BaseTargetPointName;                               // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EscapeLength;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AttributeList_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableObjectBattleScene) == 0x000008, "Wrong alignment on FEndDataTableObjectBattleScene");
static_assert(sizeof(FEndDataTableObjectBattleScene) == 0x000048, "Wrong size on FEndDataTableObjectBattleScene");
static_assert(offsetof(FEndDataTableObjectBattleScene, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectBattleScene::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectBattleScene, Priority) == 0x00000C, "Member 'FEndDataTableObjectBattleScene::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectBattleScene, StartStateChange) == 0x000010, "Member 'FEndDataTableObjectBattleScene::StartStateChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectBattleScene, BaseTargetPointName) == 0x000020, "Member 'FEndDataTableObjectBattleScene::BaseTargetPointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectBattleScene, EscapeLength) == 0x000030, "Member 'FEndDataTableObjectBattleScene::EscapeLength' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectBattleScene, AttributeList_Array) == 0x000038, "Member 'FEndDataTableObjectBattleScene::AttributeList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableObjectEnvironmentSet
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableObjectEnvironmentSet final : public FEndDataTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PlacementName;                                     // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartStateChange;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PlannerLevelSetStartStateChange;                   // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableObjectEnvironmentSet) == 0x000008, "Wrong alignment on FEndDataTableObjectEnvironmentSet");
static_assert(sizeof(FEndDataTableObjectEnvironmentSet) == 0x000038, "Wrong size on FEndDataTableObjectEnvironmentSet");
static_assert(offsetof(FEndDataTableObjectEnvironmentSet, Priority) == 0x000008, "Member 'FEndDataTableObjectEnvironmentSet::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnvironmentSet, PlacementName) == 0x00000C, "Member 'FEndDataTableObjectEnvironmentSet::PlacementName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnvironmentSet, StartStateChange) == 0x000018, "Member 'FEndDataTableObjectEnvironmentSet::StartStateChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnvironmentSet, PlannerLevelSetStartStateChange) == 0x000028, "Member 'FEndDataTableObjectEnvironmentSet::PlannerLevelSetStartStateChange' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableObjectLayout
// 0x0098 (0x00A0 - 0x0008)
struct FEndDataTableObjectLayout final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Type;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetName;                                        // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActorName;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StringArgument_Array;                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   OverlapActorGroup;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResponseAreaID_Array;                              // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaPlayerID;                              // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TweetResponseAreaID;                               // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TweetResponseAreaPlayerID;                         // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SituationTriggerID;                                // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BGActorName;                                       // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BGActorSocketName;                                 // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PushButtonActionID;                                // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         AttributeList_Array;                               // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableObjectLayout) == 0x000008, "Wrong alignment on FEndDataTableObjectLayout");
static_assert(sizeof(FEndDataTableObjectLayout) == 0x0000A0, "Wrong size on FEndDataTableObjectLayout");
static_assert(offsetof(FEndDataTableObjectLayout, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectLayout::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, Priority) == 0x00000C, "Member 'FEndDataTableObjectLayout::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, Type) == 0x000010, "Member 'FEndDataTableObjectLayout::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, TargetName) == 0x000014, "Member 'FEndDataTableObjectLayout::TargetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, ActorName) == 0x000020, "Member 'FEndDataTableObjectLayout::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, StringArgument_Array) == 0x000030, "Member 'FEndDataTableObjectLayout::StringArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, OverlapActorGroup) == 0x000040, "Member 'FEndDataTableObjectLayout::OverlapActorGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, ResponseAreaID_Array) == 0x000048, "Member 'FEndDataTableObjectLayout::ResponseAreaID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, ResponseAreaPlayerID) == 0x000058, "Member 'FEndDataTableObjectLayout::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, TweetResponseAreaID) == 0x000060, "Member 'FEndDataTableObjectLayout::TweetResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, TweetResponseAreaPlayerID) == 0x000068, "Member 'FEndDataTableObjectLayout::TweetResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, SituationTriggerID) == 0x000070, "Member 'FEndDataTableObjectLayout::SituationTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, BGActorName) == 0x000078, "Member 'FEndDataTableObjectLayout::BGActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, BGActorSocketName) == 0x000080, "Member 'FEndDataTableObjectLayout::BGActorSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, PushButtonActionID) == 0x000088, "Member 'FEndDataTableObjectLayout::PushButtonActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, AttributeList_Array) == 0x000090, "Member 'FEndDataTableObjectLayout::AttributeList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableObjectMob
// 0x00E0 (0x00E8 - 0x0008)
struct FEndDataTableObjectMob final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MobPrefabName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HideInPerformanceMode;                             // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableHitChara;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MobActorName_Array;                                // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 OnlyWalk_Array;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   RouteSplineName;                                   // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ReverseRoute;                                      // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnableOverlap;                                     // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MobSwitchingVolumeName_Array;                      // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   MobPrefabStateTrigger1;                            // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MobPrefabStateTrigger2;                            // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MobPrefabStateTrigger3;                            // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MobPrefabStateTrigger4;                            // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MobPrefabStateTrigger5;                            // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MobPrefabStateTrigger6;                            // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MobPrefabStateTrigger7;                            // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MobPrefabStateTrigger8;                            // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaID;                                    // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaPlayerID;                              // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MobTalkResponseAreaInOutId_Array;                  // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MobTalkAction_Array;                               // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         AttributeList_Array;                               // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ForceCreateActor;                                  // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NearFarFadeState;                                  // 0x00E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Important;                                         // 0x00E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableObjectMob) == 0x000008, "Wrong alignment on FEndDataTableObjectMob");
static_assert(sizeof(FEndDataTableObjectMob) == 0x0000E8, "Wrong size on FEndDataTableObjectMob");
static_assert(offsetof(FEndDataTableObjectMob, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectMob::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, Priority) == 0x00000C, "Member 'FEndDataTableObjectMob::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobPrefabName) == 0x000010, "Member 'FEndDataTableObjectMob::MobPrefabName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, HideInPerformanceMode) == 0x000018, "Member 'FEndDataTableObjectMob::HideInPerformanceMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, DisableHitChara) == 0x000019, "Member 'FEndDataTableObjectMob::DisableHitChara' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobActorName_Array) == 0x000020, "Member 'FEndDataTableObjectMob::MobActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, OnlyWalk_Array) == 0x000030, "Member 'FEndDataTableObjectMob::OnlyWalk_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, RouteSplineName) == 0x000040, "Member 'FEndDataTableObjectMob::RouteSplineName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, ReverseRoute) == 0x000048, "Member 'FEndDataTableObjectMob::ReverseRoute' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, EnableOverlap) == 0x000049, "Member 'FEndDataTableObjectMob::EnableOverlap' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobSwitchingVolumeName_Array) == 0x000050, "Member 'FEndDataTableObjectMob::MobSwitchingVolumeName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobPrefabStateTrigger1) == 0x000060, "Member 'FEndDataTableObjectMob::MobPrefabStateTrigger1' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobPrefabStateTrigger2) == 0x000068, "Member 'FEndDataTableObjectMob::MobPrefabStateTrigger2' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobPrefabStateTrigger3) == 0x000070, "Member 'FEndDataTableObjectMob::MobPrefabStateTrigger3' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobPrefabStateTrigger4) == 0x000078, "Member 'FEndDataTableObjectMob::MobPrefabStateTrigger4' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobPrefabStateTrigger5) == 0x000080, "Member 'FEndDataTableObjectMob::MobPrefabStateTrigger5' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobPrefabStateTrigger6) == 0x000088, "Member 'FEndDataTableObjectMob::MobPrefabStateTrigger6' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobPrefabStateTrigger7) == 0x000090, "Member 'FEndDataTableObjectMob::MobPrefabStateTrigger7' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobPrefabStateTrigger8) == 0x000098, "Member 'FEndDataTableObjectMob::MobPrefabStateTrigger8' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, ResponseAreaID) == 0x0000A0, "Member 'FEndDataTableObjectMob::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, ResponseAreaPlayerID) == 0x0000A8, "Member 'FEndDataTableObjectMob::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobTalkResponseAreaInOutId_Array) == 0x0000B0, "Member 'FEndDataTableObjectMob::MobTalkResponseAreaInOutId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, MobTalkAction_Array) == 0x0000C0, "Member 'FEndDataTableObjectMob::MobTalkAction_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, AttributeList_Array) == 0x0000D0, "Member 'FEndDataTableObjectMob::AttributeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, ForceCreateActor) == 0x0000E0, "Member 'FEndDataTableObjectMob::ForceCreateActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, NearFarFadeState) == 0x0000E1, "Member 'FEndDataTableObjectMob::NearFarFadeState' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectMob, Important) == 0x0000E2, "Member 'FEndDataTableObjectMob::Important' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableObjectParty
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableObjectParty final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActorName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaID;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaPlayerID;                              // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TweetResponseAreaID;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TweetResponseAreaPlayerID;                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         AttributeList_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableObjectParty) == 0x000008, "Wrong alignment on FEndDataTableObjectParty");
static_assert(sizeof(FEndDataTableObjectParty) == 0x000048, "Wrong size on FEndDataTableObjectParty");
static_assert(offsetof(FEndDataTableObjectParty, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectParty::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, Priority) == 0x00000C, "Member 'FEndDataTableObjectParty::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, ActorName) == 0x000010, "Member 'FEndDataTableObjectParty::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, ResponseAreaID) == 0x000018, "Member 'FEndDataTableObjectParty::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, ResponseAreaPlayerID) == 0x000020, "Member 'FEndDataTableObjectParty::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, TweetResponseAreaID) == 0x000028, "Member 'FEndDataTableObjectParty::TweetResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, TweetResponseAreaPlayerID) == 0x000030, "Member 'FEndDataTableObjectParty::TweetResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, AttributeList_Array) == 0x000038, "Member 'FEndDataTableObjectParty::AttributeList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePartyEntry
// 0x00E8 (0x00F0 - 0x0008)
struct FEndDataTablePartyEntry final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RswBackupBattleLeaderID;                           // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RswSaveBackupBattleLeaderType;                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RswRefBackupBattleLeaderType;                      // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RswResetBackupBattleLeaderID;                      // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ChangeBattleLeader_Cloud;                          // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ResetControlCharacter;                             // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TakeOverMembers;                                   // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PlayerTable_Array;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PartyStatus_Array;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 RejectPlayerPartyOnlyIsCleared_Array;              // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 RejectPlayerRemoveEquipment_Array;                 // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RejectPlayerID_Array;                              // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 PartyInFlagOff_Array;                              // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 EquipmentAddFlagOff_Array;                         // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SelectChapterPartyOutChara_Array;                  // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         NoCameraInterpolationChangeLeader;                 // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UseDebugInitPartySet;                              // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DebugInitPartySet_Array;                           // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DebugPartySetPlayerTableID_Array;                  // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DebugPartySetPlayerStatus_Array;                   // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePartyEntry) == 0x000008, "Wrong alignment on FEndDataTablePartyEntry");
static_assert(sizeof(FEndDataTablePartyEntry) == 0x0000F0, "Wrong size on FEndDataTablePartyEntry");
static_assert(offsetof(FEndDataTablePartyEntry, UniqueId) == 0x000008, "Member 'FEndDataTablePartyEntry::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RswBackupBattleLeaderID) == 0x00000C, "Member 'FEndDataTablePartyEntry::RswBackupBattleLeaderID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RswSaveBackupBattleLeaderType) == 0x000014, "Member 'FEndDataTablePartyEntry::RswSaveBackupBattleLeaderType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RswRefBackupBattleLeaderType) == 0x00001C, "Member 'FEndDataTablePartyEntry::RswRefBackupBattleLeaderType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RswResetBackupBattleLeaderID) == 0x000024, "Member 'FEndDataTablePartyEntry::RswResetBackupBattleLeaderID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, ChangeBattleLeader_Cloud) == 0x00002C, "Member 'FEndDataTablePartyEntry::ChangeBattleLeader_Cloud' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, ResetControlCharacter) == 0x00002D, "Member 'FEndDataTablePartyEntry::ResetControlCharacter' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, TakeOverMembers) == 0x00002E, "Member 'FEndDataTablePartyEntry::TakeOverMembers' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, PlayerTable_Array) == 0x000030, "Member 'FEndDataTablePartyEntry::PlayerTable_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, PartyStatus_Array) == 0x000040, "Member 'FEndDataTablePartyEntry::PartyStatus_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RejectPlayerPartyOnlyIsCleared_Array) == 0x000050, "Member 'FEndDataTablePartyEntry::RejectPlayerPartyOnlyIsCleared_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RejectPlayerRemoveEquipment_Array) == 0x000060, "Member 'FEndDataTablePartyEntry::RejectPlayerRemoveEquipment_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RejectPlayerID_Array) == 0x000070, "Member 'FEndDataTablePartyEntry::RejectPlayerID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, PartyInFlagOff_Array) == 0x000080, "Member 'FEndDataTablePartyEntry::PartyInFlagOff_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, EquipmentAddFlagOff_Array) == 0x000090, "Member 'FEndDataTablePartyEntry::EquipmentAddFlagOff_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, SelectChapterPartyOutChara_Array) == 0x0000A0, "Member 'FEndDataTablePartyEntry::SelectChapterPartyOutChara_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, NoCameraInterpolationChangeLeader) == 0x0000B0, "Member 'FEndDataTablePartyEntry::NoCameraInterpolationChangeLeader' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, UseDebugInitPartySet) == 0x0000B4, "Member 'FEndDataTablePartyEntry::UseDebugInitPartySet' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, DebugInitPartySet_Array) == 0x0000C0, "Member 'FEndDataTablePartyEntry::DebugInitPartySet_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, DebugPartySetPlayerTableID_Array) == 0x0000D0, "Member 'FEndDataTablePartyEntry::DebugPartySetPlayerTableID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, DebugPartySetPlayerStatus_Array) == 0x0000E0, "Member 'FEndDataTablePartyEntry::DebugPartySetPlayerStatus_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePCReinforced
// 0x0158 (0x0160 - 0x0008)
struct FEndDataTablePCReinforced final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NodeParamType;                                     // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NodeType;                                          // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RootType;                                          // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CategoryName;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NodeName;                                          // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MoviePath;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ReferenceUIAssetID;                                // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         iconType;                                          // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RefIconValue;                                      // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 SkillConditionType_Array;                          // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 SkillConditionValue_Array;                         // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 SkillEffectType_Array;                             // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 SkillEffectValue_Array;                            // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SkillEffectName_Array;                             // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         SkillDescriptionText_Array;                        // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SkillEffectTextInfo_Array;                         // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NextNode_Array;                                    // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ActiveNodeCheckType;                               // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActiveCheckID_Array;                               // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         UseSP;                                             // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 NodeAddCondition_Array;                            // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 NodeAddConditionValue_Array;                       // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           UseItem_Array;                                     // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 UseNum_Array;                                      // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         Pos_X;                                             // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Pos_Y;                                             // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Pos_Z;                                             // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePCReinforced) == 0x000008, "Wrong alignment on FEndDataTablePCReinforced");
static_assert(sizeof(FEndDataTablePCReinforced) == 0x000160, "Wrong size on FEndDataTablePCReinforced");
static_assert(offsetof(FEndDataTablePCReinforced, UniqueId) == 0x000008, "Member 'FEndDataTablePCReinforced::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, NodeParamType) == 0x00000C, "Member 'FEndDataTablePCReinforced::NodeParamType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, NodeType) == 0x00000D, "Member 'FEndDataTablePCReinforced::NodeType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, RootType) == 0x00000E, "Member 'FEndDataTablePCReinforced::RootType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, CategoryName) == 0x000010, "Member 'FEndDataTablePCReinforced::CategoryName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, NodeName) == 0x000020, "Member 'FEndDataTablePCReinforced::NodeName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, Description) == 0x000030, "Member 'FEndDataTablePCReinforced::Description' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, MoviePath) == 0x000040, "Member 'FEndDataTablePCReinforced::MoviePath' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, ReferenceUIAssetID) == 0x000050, "Member 'FEndDataTablePCReinforced::ReferenceUIAssetID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, iconType) == 0x000060, "Member 'FEndDataTablePCReinforced::iconType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, RefIconValue) == 0x000064, "Member 'FEndDataTablePCReinforced::RefIconValue' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, SkillConditionType_Array) == 0x000070, "Member 'FEndDataTablePCReinforced::SkillConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, SkillConditionValue_Array) == 0x000080, "Member 'FEndDataTablePCReinforced::SkillConditionValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, SkillEffectType_Array) == 0x000090, "Member 'FEndDataTablePCReinforced::SkillEffectType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, SkillEffectValue_Array) == 0x0000A0, "Member 'FEndDataTablePCReinforced::SkillEffectValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, SkillEffectName_Array) == 0x0000B0, "Member 'FEndDataTablePCReinforced::SkillEffectName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, SkillDescriptionText_Array) == 0x0000C0, "Member 'FEndDataTablePCReinforced::SkillDescriptionText_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, SkillEffectTextInfo_Array) == 0x0000D0, "Member 'FEndDataTablePCReinforced::SkillEffectTextInfo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, NextNode_Array) == 0x0000E0, "Member 'FEndDataTablePCReinforced::NextNode_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, ActiveNodeCheckType) == 0x0000F0, "Member 'FEndDataTablePCReinforced::ActiveNodeCheckType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, ActiveCheckID_Array) == 0x0000F8, "Member 'FEndDataTablePCReinforced::ActiveCheckID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, UseSP) == 0x000108, "Member 'FEndDataTablePCReinforced::UseSP' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, NodeAddCondition_Array) == 0x000110, "Member 'FEndDataTablePCReinforced::NodeAddCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, NodeAddConditionValue_Array) == 0x000120, "Member 'FEndDataTablePCReinforced::NodeAddConditionValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, UseItem_Array) == 0x000130, "Member 'FEndDataTablePCReinforced::UseItem_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, UseNum_Array) == 0x000140, "Member 'FEndDataTablePCReinforced::UseNum_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, Pos_X) == 0x000150, "Member 'FEndDataTablePCReinforced::Pos_X' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, Pos_Y) == 0x000154, "Member 'FEndDataTablePCReinforced::Pos_Y' has a wrong offset!");
static_assert(offsetof(FEndDataTablePCReinforced, Pos_Z) == 0x000158, "Member 'FEndDataTablePCReinforced::Pos_Z' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePhotoCommonParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTablePhotoCommonParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ParamString;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ParamFloat;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePhotoCommonParameter) == 0x000008, "Wrong alignment on FEndDataTablePhotoCommonParameter");
static_assert(sizeof(FEndDataTablePhotoCommonParameter) == 0x000018, "Wrong size on FEndDataTablePhotoCommonParameter");
static_assert(offsetof(FEndDataTablePhotoCommonParameter, ParamString) == 0x000008, "Member 'FEndDataTablePhotoCommonParameter::ParamString' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoCommonParameter, ParamFloat) == 0x000010, "Member 'FEndDataTablePhotoCommonParameter::ParamFloat' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePhotoTargetParameter
// 0x0120 (0x0128 - 0x0008)
struct FEndDataTablePhotoTargetParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MemorizeFinished;                                  // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NotCheckObstacleWhenScoring;                       // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ShowCameraIcon;                                    // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         UpdatePriority;                                    // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FrameInStateTrigger;                               // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FrameOutStateTrigger;                              // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ScoreThreshold_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         TargetScore;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ScoreStateTrigger_Array;                           // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ScoreFrameColor_Array;                             // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   SuccessEndStateTrigger;                            // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartScoreAdjustmentStateTrigger;                  // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EndScoreAdjustmentStateTrigger;                    // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConditionalScoreAdjustmentFactor;                  // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ScoreAdjustmentFactor;                             // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MotionStartTrigger_Array;                          // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           InMotionName_Array;                                // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LoopMotionName_Array;                              // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           OutMotionName_Array;                               // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         FOVFactorByTarget;                                 // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LimitDistance;                                     // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ShowNoticeCenterTargetPoint;                       // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShowNoticeLimitDistance;                           // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LookAtStartStateTrigger;                           // 0x00D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LookAtEndStateTrigger;                             // 0x00DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ForceFrameColorStartStateTrigger;                  // 0x00E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceFrameColor;                                   // 0x00EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StarPoint_Array;                                   // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 StarFrameX_Array;                                  // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 StarFrameY_Array;                                  // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         StarFrameRadius;                                   // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StarFrameOuterRadius;                              // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePhotoTargetParameter) == 0x000008, "Wrong alignment on FEndDataTablePhotoTargetParameter");
static_assert(sizeof(FEndDataTablePhotoTargetParameter) == 0x000128, "Wrong size on FEndDataTablePhotoTargetParameter");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ActorName) == 0x000008, "Member 'FEndDataTablePhotoTargetParameter::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, MemorizeFinished) == 0x000010, "Member 'FEndDataTablePhotoTargetParameter::MemorizeFinished' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, NotCheckObstacleWhenScoring) == 0x000011, "Member 'FEndDataTablePhotoTargetParameter::NotCheckObstacleWhenScoring' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ShowCameraIcon) == 0x000012, "Member 'FEndDataTablePhotoTargetParameter::ShowCameraIcon' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, UpdatePriority) == 0x000013, "Member 'FEndDataTablePhotoTargetParameter::UpdatePriority' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, FrameInStateTrigger) == 0x000014, "Member 'FEndDataTablePhotoTargetParameter::FrameInStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, FrameOutStateTrigger) == 0x00001C, "Member 'FEndDataTablePhotoTargetParameter::FrameOutStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ScoreThreshold_Array) == 0x000028, "Member 'FEndDataTablePhotoTargetParameter::ScoreThreshold_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, TargetScore) == 0x000038, "Member 'FEndDataTablePhotoTargetParameter::TargetScore' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ScoreStateTrigger_Array) == 0x000040, "Member 'FEndDataTablePhotoTargetParameter::ScoreStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ScoreFrameColor_Array) == 0x000050, "Member 'FEndDataTablePhotoTargetParameter::ScoreFrameColor_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, SuccessEndStateTrigger) == 0x000060, "Member 'FEndDataTablePhotoTargetParameter::SuccessEndStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, StartScoreAdjustmentStateTrigger) == 0x000068, "Member 'FEndDataTablePhotoTargetParameter::StartScoreAdjustmentStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, EndScoreAdjustmentStateTrigger) == 0x000070, "Member 'FEndDataTablePhotoTargetParameter::EndScoreAdjustmentStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ConditionalScoreAdjustmentFactor) == 0x000078, "Member 'FEndDataTablePhotoTargetParameter::ConditionalScoreAdjustmentFactor' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ScoreAdjustmentFactor) == 0x00007C, "Member 'FEndDataTablePhotoTargetParameter::ScoreAdjustmentFactor' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, MotionStartTrigger_Array) == 0x000080, "Member 'FEndDataTablePhotoTargetParameter::MotionStartTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, InMotionName_Array) == 0x000090, "Member 'FEndDataTablePhotoTargetParameter::InMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, LoopMotionName_Array) == 0x0000A0, "Member 'FEndDataTablePhotoTargetParameter::LoopMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, OutMotionName_Array) == 0x0000B0, "Member 'FEndDataTablePhotoTargetParameter::OutMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, FOVFactorByTarget) == 0x0000C0, "Member 'FEndDataTablePhotoTargetParameter::FOVFactorByTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, LimitDistance) == 0x0000C4, "Member 'FEndDataTablePhotoTargetParameter::LimitDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ShowNoticeCenterTargetPoint) == 0x0000C8, "Member 'FEndDataTablePhotoTargetParameter::ShowNoticeCenterTargetPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ShowNoticeLimitDistance) == 0x0000D0, "Member 'FEndDataTablePhotoTargetParameter::ShowNoticeLimitDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, LookAtStartStateTrigger) == 0x0000D4, "Member 'FEndDataTablePhotoTargetParameter::LookAtStartStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, LookAtEndStateTrigger) == 0x0000DC, "Member 'FEndDataTablePhotoTargetParameter::LookAtEndStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ForceFrameColorStartStateTrigger) == 0x0000E4, "Member 'FEndDataTablePhotoTargetParameter::ForceFrameColorStartStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, ForceFrameColor) == 0x0000EC, "Member 'FEndDataTablePhotoTargetParameter::ForceFrameColor' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, StarPoint_Array) == 0x0000F0, "Member 'FEndDataTablePhotoTargetParameter::StarPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, StarFrameX_Array) == 0x000100, "Member 'FEndDataTablePhotoTargetParameter::StarFrameX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, StarFrameY_Array) == 0x000110, "Member 'FEndDataTablePhotoTargetParameter::StarFrameY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, StarFrameRadius) == 0x000120, "Member 'FEndDataTablePhotoTargetParameter::StarFrameRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTablePhotoTargetParameter, StarFrameOuterRadius) == 0x000124, "Member 'FEndDataTablePhotoTargetParameter::StarFrameOuterRadius' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePianoChordsConfig
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTablePianoChordsConfig final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           SoundName_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 Velocity_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 TextId;                                            // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePianoChordsConfig) == 0x000008, "Wrong alignment on FEndDataTablePianoChordsConfig");
static_assert(sizeof(FEndDataTablePianoChordsConfig) == 0x000038, "Wrong size on FEndDataTablePianoChordsConfig");
static_assert(offsetof(FEndDataTablePianoChordsConfig, SoundName_Array) == 0x000008, "Member 'FEndDataTablePianoChordsConfig::SoundName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoChordsConfig, Velocity_Array) == 0x000018, "Member 'FEndDataTablePianoChordsConfig::Velocity_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoChordsConfig, TextId) == 0x000028, "Member 'FEndDataTablePianoChordsConfig::TextId' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePianoKeyboardBoneAssign
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTablePianoKeyboardBoneAssign final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           KeyBones_Array;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePianoKeyboardBoneAssign) == 0x000008, "Wrong alignment on FEndDataTablePianoKeyboardBoneAssign");
static_assert(sizeof(FEndDataTablePianoKeyboardBoneAssign) == 0x000018, "Wrong size on FEndDataTablePianoKeyboardBoneAssign");
static_assert(offsetof(FEndDataTablePianoKeyboardBoneAssign, KeyBones_Array) == 0x000008, "Member 'FEndDataTablePianoKeyboardBoneAssign::KeyBones_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePianoSafePointList
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTablePianoSafePointList final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           TargetPoint_Array;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePianoSafePointList) == 0x000008, "Wrong alignment on FEndDataTablePianoSafePointList");
static_assert(sizeof(FEndDataTablePianoSafePointList) == 0x000018, "Wrong size on FEndDataTablePianoSafePointList");
static_assert(offsetof(FEndDataTablePianoSafePointList, TargetPoint_Array) == 0x000008, "Member 'FEndDataTablePianoSafePointList::TargetPoint_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePianoScore
// 0x00B0 (0x00B8 - 0x0008)
struct FEndDataTablePianoScore final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         TimeStr_Array;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 GroupIndex_Array;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ChordID_Array;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ChordNoteType_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ChordDotType_Array;                                // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           IgnoreSound_Array;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           MonotoneID_Array;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 MonotoneNoteType_Array;                            // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 MonotoneDotType_Array;                             // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Strength_Array;                                    // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 CameraSwitchTiming_Array;                          // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePianoScore) == 0x000008, "Wrong alignment on FEndDataTablePianoScore");
static_assert(sizeof(FEndDataTablePianoScore) == 0x0000B8, "Wrong size on FEndDataTablePianoScore");
static_assert(offsetof(FEndDataTablePianoScore, TimeStr_Array) == 0x000008, "Member 'FEndDataTablePianoScore::TimeStr_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScore, GroupIndex_Array) == 0x000018, "Member 'FEndDataTablePianoScore::GroupIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScore, ChordID_Array) == 0x000028, "Member 'FEndDataTablePianoScore::ChordID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScore, ChordNoteType_Array) == 0x000038, "Member 'FEndDataTablePianoScore::ChordNoteType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScore, ChordDotType_Array) == 0x000048, "Member 'FEndDataTablePianoScore::ChordDotType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScore, IgnoreSound_Array) == 0x000058, "Member 'FEndDataTablePianoScore::IgnoreSound_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScore, MonotoneID_Array) == 0x000068, "Member 'FEndDataTablePianoScore::MonotoneID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScore, MonotoneNoteType_Array) == 0x000078, "Member 'FEndDataTablePianoScore::MonotoneNoteType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScore, MonotoneDotType_Array) == 0x000088, "Member 'FEndDataTablePianoScore::MonotoneDotType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScore, Strength_Array) == 0x000098, "Member 'FEndDataTablePianoScore::Strength_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScore, CameraSwitchTiming_Array) == 0x0000A8, "Member 'FEndDataTablePianoScore::CameraSwitchTiming_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePianoScoreInfo
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTablePianoScoreInfo final : public FEndDataTableRowBase
{
public:
	uint8                                         UniqueIndex;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MenuTextID;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BGMName;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Bpm;                                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint32>                                ModeChangeComboCount_Array;                        // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint32                                        StreamingFrame;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DefaultSpeedIndex;                                 // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MinSpeedIndex;                                     // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Difficulty;                                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraPlayMinTime;                                 // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraPlayMaxTime;                                 // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraSwitchRate;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Score_Array;                                       // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ScoreStateTrigger_Array;                           // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ScoreStoryFlag_Array;                              // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePianoScoreInfo) == 0x000008, "Wrong alignment on FEndDataTablePianoScoreInfo");
static_assert(sizeof(FEndDataTablePianoScoreInfo) == 0x000088, "Wrong size on FEndDataTablePianoScoreInfo");
static_assert(offsetof(FEndDataTablePianoScoreInfo, UniqueIndex) == 0x000008, "Member 'FEndDataTablePianoScoreInfo::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, MenuTextID) == 0x000010, "Member 'FEndDataTablePianoScoreInfo::MenuTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, BGMName) == 0x000020, "Member 'FEndDataTablePianoScoreInfo::BGMName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, Bpm) == 0x000028, "Member 'FEndDataTablePianoScoreInfo::Bpm' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, ModeChangeComboCount_Array) == 0x000030, "Member 'FEndDataTablePianoScoreInfo::ModeChangeComboCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, StreamingFrame) == 0x000040, "Member 'FEndDataTablePianoScoreInfo::StreamingFrame' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, DefaultSpeedIndex) == 0x000044, "Member 'FEndDataTablePianoScoreInfo::DefaultSpeedIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, MinSpeedIndex) == 0x000045, "Member 'FEndDataTablePianoScoreInfo::MinSpeedIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, Difficulty) == 0x000048, "Member 'FEndDataTablePianoScoreInfo::Difficulty' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, CameraPlayMinTime) == 0x00004C, "Member 'FEndDataTablePianoScoreInfo::CameraPlayMinTime' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, CameraPlayMaxTime) == 0x000050, "Member 'FEndDataTablePianoScoreInfo::CameraPlayMaxTime' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, CameraSwitchRate) == 0x000054, "Member 'FEndDataTablePianoScoreInfo::CameraSwitchRate' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, Score_Array) == 0x000058, "Member 'FEndDataTablePianoScoreInfo::Score_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, ScoreStateTrigger_Array) == 0x000068, "Member 'FEndDataTablePianoScoreInfo::ScoreStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePianoScoreInfo, ScoreStoryFlag_Array) == 0x000078, "Member 'FEndDataTablePianoScoreInfo::ScoreStoryFlag_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlacement
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTablePlacement final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePlacement) == 0x000008, "Wrong alignment on FEndDataTablePlacement");
static_assert(sizeof(FEndDataTablePlacement) == 0x000010, "Wrong size on FEndDataTablePlacement");
static_assert(offsetof(FEndDataTablePlacement, UniqueIndex) == 0x000008, "Member 'FEndDataTablePlacement::UniqueIndex' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlannerEvent
// 0x0130 (0x0138 - 0x0008)
struct FEndDataTablePlannerEvent final : public FEndDataTableRowBase
{
public:
	float                                         Time;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinSubtitleTime;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeAfterVoice;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextId;                                            // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         OutputType;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CanSkip;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NoLipSync;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HideSubtitle;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VoiceType;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VoicePackCategory;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 VoicePack;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CameraType;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CameraArgument_Array;                              // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 Talker;                                            // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TalkerCmd;                                         // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TalkerTargetPoint;                                 // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ListenerList_Array;                                // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ListenerCmdList_Array;                             // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ListenerTargetPointList_Array;                     // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 CommandTypeList_Array;                             // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 WaitTimeList_Array;                                // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         CommandArgumentList_Array;                         // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 CommandArgumentInteger_Array;                      // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         AttenuationOverride;                               // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DisallowTalkIDOverwrite;                           // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TalkerOverwriteID;                                 // 0x0108(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 SoundID;                                           // 0x0118(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NextPE;                                            // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlannerEvent) == 0x000008, "Wrong alignment on FEndDataTablePlannerEvent");
static_assert(sizeof(FEndDataTablePlannerEvent) == 0x000138, "Wrong size on FEndDataTablePlannerEvent");
static_assert(offsetof(FEndDataTablePlannerEvent, Time) == 0x000008, "Member 'FEndDataTablePlannerEvent::Time' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, MinSubtitleTime) == 0x00000C, "Member 'FEndDataTablePlannerEvent::MinSubtitleTime' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TimeAfterVoice) == 0x000010, "Member 'FEndDataTablePlannerEvent::TimeAfterVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TextId) == 0x000018, "Member 'FEndDataTablePlannerEvent::TextId' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, OutputType) == 0x000028, "Member 'FEndDataTablePlannerEvent::OutputType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CanSkip) == 0x00002C, "Member 'FEndDataTablePlannerEvent::CanSkip' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, NoLipSync) == 0x000030, "Member 'FEndDataTablePlannerEvent::NoLipSync' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, HideSubtitle) == 0x000034, "Member 'FEndDataTablePlannerEvent::HideSubtitle' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, VoiceType) == 0x000038, "Member 'FEndDataTablePlannerEvent::VoiceType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, VoicePackCategory) == 0x00003C, "Member 'FEndDataTablePlannerEvent::VoicePackCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, VoicePack) == 0x000040, "Member 'FEndDataTablePlannerEvent::VoicePack' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CameraType) == 0x000050, "Member 'FEndDataTablePlannerEvent::CameraType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CameraArgument_Array) == 0x000058, "Member 'FEndDataTablePlannerEvent::CameraArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, Talker) == 0x000068, "Member 'FEndDataTablePlannerEvent::Talker' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TalkerCmd) == 0x000078, "Member 'FEndDataTablePlannerEvent::TalkerCmd' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TalkerTargetPoint) == 0x000080, "Member 'FEndDataTablePlannerEvent::TalkerTargetPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, ListenerList_Array) == 0x000090, "Member 'FEndDataTablePlannerEvent::ListenerList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, ListenerCmdList_Array) == 0x0000A0, "Member 'FEndDataTablePlannerEvent::ListenerCmdList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, ListenerTargetPointList_Array) == 0x0000B0, "Member 'FEndDataTablePlannerEvent::ListenerTargetPointList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CommandTypeList_Array) == 0x0000C0, "Member 'FEndDataTablePlannerEvent::CommandTypeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, WaitTimeList_Array) == 0x0000D0, "Member 'FEndDataTablePlannerEvent::WaitTimeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CommandArgumentList_Array) == 0x0000E0, "Member 'FEndDataTablePlannerEvent::CommandArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CommandArgumentInteger_Array) == 0x0000F0, "Member 'FEndDataTablePlannerEvent::CommandArgumentInteger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, AttenuationOverride) == 0x000100, "Member 'FEndDataTablePlannerEvent::AttenuationOverride' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, DisallowTalkIDOverwrite) == 0x000104, "Member 'FEndDataTablePlannerEvent::DisallowTalkIDOverwrite' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TalkerOverwriteID) == 0x000108, "Member 'FEndDataTablePlannerEvent::TalkerOverwriteID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, SoundID) == 0x000118, "Member 'FEndDataTablePlannerEvent::SoundID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, NextPE) == 0x000128, "Member 'FEndDataTablePlannerEvent::NextPE' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlannerEventChara
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTablePlannerEventChara final : public FEndDataTableRowBase
{
public:
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CharaSpecName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OutputPad;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePlannerEventChara) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventChara");
static_assert(sizeof(FEndDataTablePlannerEventChara) == 0x000020, "Wrong size on FEndDataTablePlannerEventChara");
static_assert(offsetof(FEndDataTablePlannerEventChara, ActorName) == 0x000008, "Member 'FEndDataTablePlannerEventChara::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventChara, CharaSpecName) == 0x000010, "Member 'FEndDataTablePlannerEventChara::CharaSpecName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventChara, OutputPad) == 0x000018, "Member 'FEndDataTablePlannerEventChara::OutputPad' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlannerEventLSDList
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTablePlannerEventLSDList final : public FEndDataTableRowBase
{
public:
	class FName                                   Value;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlannerEventLSDList) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventLSDList");
static_assert(sizeof(FEndDataTablePlannerEventLSDList) == 0x000010, "Wrong size on FEndDataTablePlannerEventLSDList");
static_assert(offsetof(FEndDataTablePlannerEventLSDList, Value) == 0x000008, "Member 'FEndDataTablePlannerEventLSDList::Value' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlannerEventMemberExclusion
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTablePlannerEventMemberExclusion final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           Condition_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Member_Array;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlannerEventMemberExclusion) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventMemberExclusion");
static_assert(sizeof(FEndDataTablePlannerEventMemberExclusion) == 0x000028, "Wrong size on FEndDataTablePlannerEventMemberExclusion");
static_assert(offsetof(FEndDataTablePlannerEventMemberExclusion, Condition_Array) == 0x000008, "Member 'FEndDataTablePlannerEventMemberExclusion::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventMemberExclusion, Member_Array) == 0x000018, "Member 'FEndDataTablePlannerEventMemberExclusion::Member_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlannerEventRelativeCamera
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTablePlannerEventRelativeCamera final : public FEndDataTableRowBase
{
public:
	class FName                                   MainTargetName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MainTargetOffsetZ;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SubTargetName;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SubTargetOffsetZ;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotatePitch;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotateYaw;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RelativeRate;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RelativeZRate;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CameraDist;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FOV;                                               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NextCamera;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PlayTime;                                          // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePlannerEventRelativeCamera) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventRelativeCamera");
static_assert(sizeof(FEndDataTablePlannerEventRelativeCamera) == 0x000048, "Wrong size on FEndDataTablePlannerEventRelativeCamera");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, MainTargetName) == 0x000008, "Member 'FEndDataTablePlannerEventRelativeCamera::MainTargetName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, MainTargetOffsetZ) == 0x000010, "Member 'FEndDataTablePlannerEventRelativeCamera::MainTargetOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, SubTargetName) == 0x000014, "Member 'FEndDataTablePlannerEventRelativeCamera::SubTargetName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, SubTargetOffsetZ) == 0x00001C, "Member 'FEndDataTablePlannerEventRelativeCamera::SubTargetOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, RotatePitch) == 0x000020, "Member 'FEndDataTablePlannerEventRelativeCamera::RotatePitch' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, RotateYaw) == 0x000024, "Member 'FEndDataTablePlannerEventRelativeCamera::RotateYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, RelativeRate) == 0x000028, "Member 'FEndDataTablePlannerEventRelativeCamera::RelativeRate' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, RelativeZRate) == 0x00002C, "Member 'FEndDataTablePlannerEventRelativeCamera::RelativeZRate' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, CameraDist) == 0x000030, "Member 'FEndDataTablePlannerEventRelativeCamera::CameraDist' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, FOV) == 0x000034, "Member 'FEndDataTablePlannerEventRelativeCamera::FOV' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, NextCamera) == 0x000038, "Member 'FEndDataTablePlannerEventRelativeCamera::NextCamera' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, PlayTime) == 0x000040, "Member 'FEndDataTablePlannerEventRelativeCamera::PlayTime' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlannerEventSEList
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTablePlannerEventSEList final : public FEndDataTableRowBase
{
public:
	class FName                                   Value;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlannerEventSEList) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventSEList");
static_assert(sizeof(FEndDataTablePlannerEventSEList) == 0x000010, "Wrong size on FEndDataTablePlannerEventSEList");
static_assert(offsetof(FEndDataTablePlannerEventSEList, Value) == 0x000008, "Member 'FEndDataTablePlannerEventSEList::Value' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlannerEventTalkInfo
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTablePlannerEventTalkInfo final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ListnerName_Array;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         SituationType;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HintName;                                          // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LastLookAt;                                        // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IgnoreCullingTarget_Array;                         // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlannerEventTalkInfo) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventTalkInfo");
static_assert(sizeof(FEndDataTablePlannerEventTalkInfo) == 0x000040, "Wrong size on FEndDataTablePlannerEventTalkInfo");
static_assert(offsetof(FEndDataTablePlannerEventTalkInfo, ListnerName_Array) == 0x000008, "Member 'FEndDataTablePlannerEventTalkInfo::ListnerName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventTalkInfo, SituationType) == 0x000018, "Member 'FEndDataTablePlannerEventTalkInfo::SituationType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventTalkInfo, HintName) == 0x00001C, "Member 'FEndDataTablePlannerEventTalkInfo::HintName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventTalkInfo, LastLookAt) == 0x000024, "Member 'FEndDataTablePlannerEventTalkInfo::LastLookAt' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventTalkInfo, IgnoreCullingTarget_Array) == 0x000030, "Member 'FEndDataTablePlannerEventTalkInfo::IgnoreCullingTarget_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlannerEventTalkLocation
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTablePlannerEventTalkLocation final : public FEndDataTableRowBase
{
public:
	class FName                                   ConvertLocation;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlannerEventTalkLocation) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventTalkLocation");
static_assert(sizeof(FEndDataTablePlannerEventTalkLocation) == 0x000010, "Wrong size on FEndDataTablePlannerEventTalkLocation");
static_assert(offsetof(FEndDataTablePlannerEventTalkLocation, ConvertLocation) == 0x000008, "Member 'FEndDataTablePlannerEventTalkLocation::ConvertLocation' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlannerLevelSet
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTablePlannerLevelSet final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           LevelList_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlannerLevelSet) == 0x000008, "Wrong alignment on FEndDataTablePlannerLevelSet");
static_assert(sizeof(FEndDataTablePlannerLevelSet) == 0x000018, "Wrong size on FEndDataTablePlannerLevelSet");
static_assert(offsetof(FEndDataTablePlannerLevelSet, LevelList_Array) == 0x000008, "Member 'FEndDataTablePlannerLevelSet::LevelList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlayerEstimateParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTablePlayerEstimateParameter final : public FEndDataTableRowBase
{
public:
	int32                                         PhysicsAttack;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicAttack;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PhysicsDefense;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MagicDefense;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlayerEstimateParameter) == 0x000008, "Wrong alignment on FEndDataTablePlayerEstimateParameter");
static_assert(sizeof(FEndDataTablePlayerEstimateParameter) == 0x000018, "Wrong size on FEndDataTablePlayerEstimateParameter");
static_assert(offsetof(FEndDataTablePlayerEstimateParameter, PhysicsAttack) == 0x000008, "Member 'FEndDataTablePlayerEstimateParameter::PhysicsAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerEstimateParameter, MagicAttack) == 0x00000C, "Member 'FEndDataTablePlayerEstimateParameter::MagicAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerEstimateParameter, PhysicsDefense) == 0x000010, "Member 'FEndDataTablePlayerEstimateParameter::PhysicsDefense' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerEstimateParameter, MagicDefense) == 0x000014, "Member 'FEndDataTablePlayerEstimateParameter::MagicDefense' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlayerFavRank
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTablePlayerFavRank final : public FEndDataTableRowBase
{
public:
	int32                                         NextFavPoint;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePlayerFavRank) == 0x000008, "Wrong alignment on FEndDataTablePlayerFavRank");
static_assert(sizeof(FEndDataTablePlayerFavRank) == 0x000010, "Wrong size on FEndDataTablePlayerFavRank");
static_assert(offsetof(FEndDataTablePlayerFavRank, NextFavPoint) == 0x000008, "Member 'FEndDataTablePlayerFavRank::NextFavPoint' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlayerTable
// 0x0138 (0x0140 - 0x0008)
struct FEndDataTablePlayerTable final : public FEndDataTableRowBase
{
public:
	uint8                                         PlayerType;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextId;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActorName;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LastBattleInfoResidentParameterID;                 // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FavPointPriority;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SwitchFavPointResidentWorkStoryFlagID;             // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SwitchFavPointResidentWorkID;                      // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerParameterStringFormat;                       // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 WeaponUpgradeTreeLevelFormat;                      // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PCReinforcedFormat;                                // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PlayerFavRankFormat;                               // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FavMapIconID;                                      // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ConfigFavPointStoryFlag;                           // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ConfigFavPointStoryFlagChapter12;                  // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RegularMemberJoinFlag;                             // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EquipListAddFlag;                                  // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EquipmentOpenMenuFlag;                             // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MateriaOpenMenuFlag;                               // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ExcludeMateriaListFlag;                            // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ExcludeEquipmentListFlag;                          // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IgnoreBattleReward;                                // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSuppLocID;                                   // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CautionAttackResponseArea;                         // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EventStoryFlag_Array;                              // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EventCharaSpec_Array;                              // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SeeChangeCloth_Array;                              // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PlayerCharaSpec_Array;                             // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ChangeWeaponStoryFlag_Array;                       // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ChangeWeaponCharaSpec_Array;                       // 0x0128(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         NotifyLevelUpMessage;                              // 0x0138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NotifySPUpMessage;                                 // 0x0139(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePlayerTable) == 0x000008, "Wrong alignment on FEndDataTablePlayerTable");
static_assert(sizeof(FEndDataTablePlayerTable) == 0x000140, "Wrong size on FEndDataTablePlayerTable");
static_assert(offsetof(FEndDataTablePlayerTable, PlayerType) == 0x000008, "Member 'FEndDataTablePlayerTable::PlayerType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, TextId) == 0x000010, "Member 'FEndDataTablePlayerTable::TextId' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ActorName) == 0x000020, "Member 'FEndDataTablePlayerTable::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, LastBattleInfoResidentParameterID) == 0x000028, "Member 'FEndDataTablePlayerTable::LastBattleInfoResidentParameterID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, FavPointPriority) == 0x000030, "Member 'FEndDataTablePlayerTable::FavPointPriority' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, SwitchFavPointResidentWorkStoryFlagID) == 0x000034, "Member 'FEndDataTablePlayerTable::SwitchFavPointResidentWorkStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, SwitchFavPointResidentWorkID) == 0x00003C, "Member 'FEndDataTablePlayerTable::SwitchFavPointResidentWorkID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, PlayerParameterStringFormat) == 0x000048, "Member 'FEndDataTablePlayerTable::PlayerParameterStringFormat' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, WeaponUpgradeTreeLevelFormat) == 0x000058, "Member 'FEndDataTablePlayerTable::WeaponUpgradeTreeLevelFormat' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, PCReinforcedFormat) == 0x000068, "Member 'FEndDataTablePlayerTable::PCReinforcedFormat' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, PlayerFavRankFormat) == 0x000078, "Member 'FEndDataTablePlayerTable::PlayerFavRankFormat' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, FavMapIconID) == 0x000088, "Member 'FEndDataTablePlayerTable::FavMapIconID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ConfigFavPointStoryFlag) == 0x000090, "Member 'FEndDataTablePlayerTable::ConfigFavPointStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ConfigFavPointStoryFlagChapter12) == 0x000098, "Member 'FEndDataTablePlayerTable::ConfigFavPointStoryFlagChapter12' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, RegularMemberJoinFlag) == 0x0000A0, "Member 'FEndDataTablePlayerTable::RegularMemberJoinFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, EquipListAddFlag) == 0x0000A8, "Member 'FEndDataTablePlayerTable::EquipListAddFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, EquipmentOpenMenuFlag) == 0x0000B0, "Member 'FEndDataTablePlayerTable::EquipmentOpenMenuFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, MateriaOpenMenuFlag) == 0x0000B8, "Member 'FEndDataTablePlayerTable::MateriaOpenMenuFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ExcludeMateriaListFlag) == 0x0000C0, "Member 'FEndDataTablePlayerTable::ExcludeMateriaListFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ExcludeEquipmentListFlag) == 0x0000C1, "Member 'FEndDataTablePlayerTable::ExcludeEquipmentListFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, IgnoreBattleReward) == 0x0000C2, "Member 'FEndDataTablePlayerTable::IgnoreBattleReward' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, TargetSuppLocID) == 0x0000C4, "Member 'FEndDataTablePlayerTable::TargetSuppLocID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, CautionAttackResponseArea) == 0x0000CC, "Member 'FEndDataTablePlayerTable::CautionAttackResponseArea' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, EventStoryFlag_Array) == 0x0000D8, "Member 'FEndDataTablePlayerTable::EventStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, EventCharaSpec_Array) == 0x0000E8, "Member 'FEndDataTablePlayerTable::EventCharaSpec_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, SeeChangeCloth_Array) == 0x0000F8, "Member 'FEndDataTablePlayerTable::SeeChangeCloth_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, PlayerCharaSpec_Array) == 0x000108, "Member 'FEndDataTablePlayerTable::PlayerCharaSpec_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ChangeWeaponStoryFlag_Array) == 0x000118, "Member 'FEndDataTablePlayerTable::ChangeWeaponStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ChangeWeaponCharaSpec_Array) == 0x000128, "Member 'FEndDataTablePlayerTable::ChangeWeaponCharaSpec_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, NotifyLevelUpMessage) == 0x000138, "Member 'FEndDataTablePlayerTable::NotifyLevelUpMessage' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, NotifySPUpMessage) == 0x000139, "Member 'FEndDataTablePlayerTable::NotifySPUpMessage' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlayerTableFavPoint
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTablePlayerTableFavPoint final : public FEndDataTableRowBase
{
public:
	uint32                                        FavPoint;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TargetPlayerTable_Array;                           // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlayerTableFavPoint) == 0x000008, "Wrong alignment on FEndDataTablePlayerTableFavPoint");
static_assert(sizeof(FEndDataTablePlayerTableFavPoint) == 0x000020, "Wrong size on FEndDataTablePlayerTableFavPoint");
static_assert(offsetof(FEndDataTablePlayerTableFavPoint, FavPoint) == 0x000008, "Member 'FEndDataTablePlayerTableFavPoint::FavPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTableFavPoint, TargetPlayerTable_Array) == 0x000010, "Member 'FEndDataTablePlayerTableFavPoint::TargetPlayerTable_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePlayLog
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTablePlayLog final : public FEndDataTableRowBase
{
public:
	uint8                                         PageIndex;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextId;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Layer;                                             // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChildNumber;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         GrandchildNumber;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Length;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePlayLog) == 0x000008, "Wrong alignment on FEndDataTablePlayLog");
static_assert(sizeof(FEndDataTablePlayLog) == 0x000030, "Wrong size on FEndDataTablePlayLog");
static_assert(offsetof(FEndDataTablePlayLog, PageIndex) == 0x000008, "Member 'FEndDataTablePlayLog::PageIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayLog, TextId) == 0x000010, "Member 'FEndDataTablePlayLog::TextId' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayLog, Layer) == 0x000020, "Member 'FEndDataTablePlayLog::Layer' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayLog, ChildNumber) == 0x000024, "Member 'FEndDataTablePlayLog::ChildNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayLog, GrandchildNumber) == 0x000028, "Member 'FEndDataTablePlayLog::GrandchildNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayLog, Length) == 0x00002C, "Member 'FEndDataTablePlayLog::Length' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePointWarpData
// 0x00A0 (0x00A8 - 0x0008)
struct FEndDataTablePointWarpData final : public FEndDataTableRowBase
{
public:
	uint8                                         IndentType;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PointName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ArrivalTargetPoint_Array;                          // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   UseItemID;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UseItemNum;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenFlag;                                          // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DoNotUseFlag;                                      // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AttentionFlag;                                     // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MenuPicturePreview;                                // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MenuLocationPointName;                             // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ConditionStoryFlag;                                // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SelectActionOrActionGroup_StoryFlagOn;             // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SelectActionOrActionGroup;                         // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CancelActionOrActionGroup;                         // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ArrivalStateTrigger_Array;                         // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePointWarpData) == 0x000008, "Wrong alignment on FEndDataTablePointWarpData");
static_assert(sizeof(FEndDataTablePointWarpData) == 0x0000A8, "Wrong size on FEndDataTablePointWarpData");
static_assert(offsetof(FEndDataTablePointWarpData, IndentType) == 0x000008, "Member 'FEndDataTablePointWarpData::IndentType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, PointName) == 0x000010, "Member 'FEndDataTablePointWarpData::PointName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, ArrivalTargetPoint_Array) == 0x000020, "Member 'FEndDataTablePointWarpData::ArrivalTargetPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, UseItemID) == 0x000030, "Member 'FEndDataTablePointWarpData::UseItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, UseItemNum) == 0x000038, "Member 'FEndDataTablePointWarpData::UseItemNum' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, OpenFlag) == 0x00003C, "Member 'FEndDataTablePointWarpData::OpenFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, DoNotUseFlag) == 0x000044, "Member 'FEndDataTablePointWarpData::DoNotUseFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, AttentionFlag) == 0x00004C, "Member 'FEndDataTablePointWarpData::AttentionFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, MenuPicturePreview) == 0x000058, "Member 'FEndDataTablePointWarpData::MenuPicturePreview' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, MenuLocationPointName) == 0x000068, "Member 'FEndDataTablePointWarpData::MenuLocationPointName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, ConditionStoryFlag) == 0x000078, "Member 'FEndDataTablePointWarpData::ConditionStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, SelectActionOrActionGroup_StoryFlagOn) == 0x000080, "Member 'FEndDataTablePointWarpData::SelectActionOrActionGroup_StoryFlagOn' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, SelectActionOrActionGroup) == 0x000088, "Member 'FEndDataTablePointWarpData::SelectActionOrActionGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, CancelActionOrActionGroup) == 0x000090, "Member 'FEndDataTablePointWarpData::CancelActionOrActionGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpData, ArrivalStateTrigger_Array) == 0x000098, "Member 'FEndDataTablePointWarpData::ArrivalStateTrigger_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePointWarpObject
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTablePointWarpObject final : public FEndDataTableRowBase
{
public:
	uint8                                         MenuType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TitleName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MapImageName;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AutoSaveAfterPointWarp;                            // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PointWarpDataID_Array;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePointWarpObject) == 0x000008, "Wrong alignment on FEndDataTablePointWarpObject");
static_assert(sizeof(FEndDataTablePointWarpObject) == 0x000048, "Wrong size on FEndDataTablePointWarpObject");
static_assert(offsetof(FEndDataTablePointWarpObject, MenuType) == 0x000008, "Member 'FEndDataTablePointWarpObject::MenuType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpObject, TitleName) == 0x000010, "Member 'FEndDataTablePointWarpObject::TitleName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpObject, MapImageName) == 0x000020, "Member 'FEndDataTablePointWarpObject::MapImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpObject, AutoSaveAfterPointWarp) == 0x000030, "Member 'FEndDataTablePointWarpObject::AutoSaveAfterPointWarp' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointWarpObject, PointWarpDataID_Array) == 0x000038, "Member 'FEndDataTablePointWarpObject::PointWarpDataID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTablePushButtonAction
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTablePushButtonAction final : public FEndDataTableRowBase
{
public:
	uint8                                         PlayerPosType;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerPosLength;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PushTime;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActorName_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Action_Array;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 FinishAnimationStop_Array;                         // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateTrigger_Array;                                // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTablePushButtonAction) == 0x000008, "Wrong alignment on FEndDataTablePushButtonAction");
static_assert(sizeof(FEndDataTablePushButtonAction) == 0x000058, "Wrong size on FEndDataTablePushButtonAction");
static_assert(offsetof(FEndDataTablePushButtonAction, PlayerPosType) == 0x000008, "Member 'FEndDataTablePushButtonAction::PlayerPosType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, PlayerPosLength) == 0x00000C, "Member 'FEndDataTablePushButtonAction::PlayerPosLength' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, PushTime) == 0x000010, "Member 'FEndDataTablePushButtonAction::PushTime' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, ActorName_Array) == 0x000018, "Member 'FEndDataTablePushButtonAction::ActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, Action_Array) == 0x000028, "Member 'FEndDataTablePushButtonAction::Action_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, FinishAnimationStop_Array) == 0x000038, "Member 'FEndDataTablePushButtonAction::FinishAnimationStop_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, StateTrigger_Array) == 0x000048, "Member 'FEndDataTablePushButtonAction::StateTrigger_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableQuestClear
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableQuestClear final : public FEndDataTableRowBase
{
public:
	class FName                                   StateTriggerId;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AssignStateChangeID_Array;                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StoryFlagID_Array;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 NotifyStoryFlagChanged_Array;                      // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ItemID_Array;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ItemNum_Array;                                     // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableQuestClear) == 0x000008, "Wrong alignment on FEndDataTableQuestClear");
static_assert(sizeof(FEndDataTableQuestClear) == 0x000060, "Wrong size on FEndDataTableQuestClear");
static_assert(offsetof(FEndDataTableQuestClear, StateTriggerId) == 0x000008, "Member 'FEndDataTableQuestClear::StateTriggerId' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestClear, AssignStateChangeID_Array) == 0x000010, "Member 'FEndDataTableQuestClear::AssignStateChangeID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestClear, StoryFlagID_Array) == 0x000020, "Member 'FEndDataTableQuestClear::StoryFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestClear, NotifyStoryFlagChanged_Array) == 0x000030, "Member 'FEndDataTableQuestClear::NotifyStoryFlagChanged_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestClear, ItemID_Array) == 0x000040, "Member 'FEndDataTableQuestClear::ItemID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestClear, ItemNum_Array) == 0x000050, "Member 'FEndDataTableQuestClear::ItemNum_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableQuestObject
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableQuestObject final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ObjectID_Array;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableQuestObject) == 0x000008, "Wrong alignment on FEndDataTableQuestObject");
static_assert(sizeof(FEndDataTableQuestObject) == 0x000018, "Wrong size on FEndDataTableQuestObject");
static_assert(offsetof(FEndDataTableQuestObject, ObjectID_Array) == 0x000008, "Member 'FEndDataTableQuestObject::ObjectID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableQuestReset
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableQuestReset final : public FEndDataTableRowBase
{
public:
	class FName                                   StateTriggerId;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AssignStateChangeID_Array;                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StoryFlagID_Array;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 NotNotifyStoryFlagChanged_Array;                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ItemID_Array;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RevivalObjectEnemy_Array;                          // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableQuestReset) == 0x000008, "Wrong alignment on FEndDataTableQuestReset");
static_assert(sizeof(FEndDataTableQuestReset) == 0x000060, "Wrong size on FEndDataTableQuestReset");
static_assert(offsetof(FEndDataTableQuestReset, StateTriggerId) == 0x000008, "Member 'FEndDataTableQuestReset::StateTriggerId' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestReset, AssignStateChangeID_Array) == 0x000010, "Member 'FEndDataTableQuestReset::AssignStateChangeID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestReset, StoryFlagID_Array) == 0x000020, "Member 'FEndDataTableQuestReset::StoryFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestReset, NotNotifyStoryFlagChanged_Array) == 0x000030, "Member 'FEndDataTableQuestReset::NotNotifyStoryFlagChanged_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestReset, ItemID_Array) == 0x000040, "Member 'FEndDataTableQuestReset::ItemID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestReset, RevivalObjectEnemy_Array) == 0x000050, "Member 'FEndDataTableQuestReset::RevivalObjectEnemy_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableQuestTask
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableQuestTask final : public FEndDataTableRowBase
{
public:
	class FString                                 ItemName;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ImageName;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RecommendedLevelID;                                // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RecommendLevel;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ProgressStoryFlag;                                 // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CheckTarget;                                       // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ClearCondition;                                    // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CheckValue;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FailureCheckTarget;                                // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FailureCondition;                                  // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FailureCheckValue;                                 // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartAssignStateChangeID;                          // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EndAssignStateChangeID;                            // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CompleteStoryFlag;                                 // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MapIconInfoID;                                     // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableQuestTask) == 0x000008, "Wrong alignment on FEndDataTableQuestTask");
static_assert(sizeof(FEndDataTableQuestTask) == 0x000090, "Wrong size on FEndDataTableQuestTask");
static_assert(offsetof(FEndDataTableQuestTask, ItemName) == 0x000008, "Member 'FEndDataTableQuestTask::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, Description) == 0x000018, "Member 'FEndDataTableQuestTask::Description' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, ImageName) == 0x000028, "Member 'FEndDataTableQuestTask::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, RecommendedLevelID) == 0x000038, "Member 'FEndDataTableQuestTask::RecommendedLevelID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, RecommendLevel) == 0x000040, "Member 'FEndDataTableQuestTask::RecommendLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, ProgressStoryFlag) == 0x000044, "Member 'FEndDataTableQuestTask::ProgressStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, CheckTarget) == 0x00004C, "Member 'FEndDataTableQuestTask::CheckTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, ClearCondition) == 0x000054, "Member 'FEndDataTableQuestTask::ClearCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, CheckValue) == 0x000058, "Member 'FEndDataTableQuestTask::CheckValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, FailureCheckTarget) == 0x00005C, "Member 'FEndDataTableQuestTask::FailureCheckTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, FailureCondition) == 0x000064, "Member 'FEndDataTableQuestTask::FailureCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, FailureCheckValue) == 0x000068, "Member 'FEndDataTableQuestTask::FailureCheckValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, StartAssignStateChangeID) == 0x00006C, "Member 'FEndDataTableQuestTask::StartAssignStateChangeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, EndAssignStateChangeID) == 0x000074, "Member 'FEndDataTableQuestTask::EndAssignStateChangeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, CompleteStoryFlag) == 0x00007C, "Member 'FEndDataTableQuestTask::CompleteStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableQuestTask, MapIconInfoID) == 0x000084, "Member 'FEndDataTableQuestTask::MapIconInfoID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableReportCondition
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableReportCondition final : public FEndDataTableRowBase
{
public:
	uint8                                         AppendContionType;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AppendConditionValue;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HiddenDetail;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ConditionType;                                     // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ConditionTableID;                                  // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ConditionValue;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DetermineResult;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BattleConditionOperator;                           // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BattleConditionWho;                                // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BattleConditionWhoID;                              // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BattleConditionWhoUniqueIndex;                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntegerArgument;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StringArgument;                                    // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OperatorSymbol;                                    // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AddCheckConditionID;                               // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ViewString;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableReportCondition) == 0x000008, "Wrong alignment on FEndDataTableReportCondition");
static_assert(sizeof(FEndDataTableReportCondition) == 0x000058, "Wrong size on FEndDataTableReportCondition");
static_assert(offsetof(FEndDataTableReportCondition, AppendContionType) == 0x000008, "Member 'FEndDataTableReportCondition::AppendContionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, AppendConditionValue) == 0x00000C, "Member 'FEndDataTableReportCondition::AppendConditionValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, HiddenDetail) == 0x000010, "Member 'FEndDataTableReportCondition::HiddenDetail' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, ConditionType) == 0x000011, "Member 'FEndDataTableReportCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, ConditionTableID) == 0x000014, "Member 'FEndDataTableReportCondition::ConditionTableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, ConditionValue) == 0x00001C, "Member 'FEndDataTableReportCondition::ConditionValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, DetermineResult) == 0x000020, "Member 'FEndDataTableReportCondition::DetermineResult' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, BattleConditionOperator) == 0x000021, "Member 'FEndDataTableReportCondition::BattleConditionOperator' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, BattleConditionWho) == 0x000022, "Member 'FEndDataTableReportCondition::BattleConditionWho' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, BattleConditionWhoID) == 0x000024, "Member 'FEndDataTableReportCondition::BattleConditionWhoID' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, BattleConditionWhoUniqueIndex) == 0x00002C, "Member 'FEndDataTableReportCondition::BattleConditionWhoUniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, IntegerArgument) == 0x000030, "Member 'FEndDataTableReportCondition::IntegerArgument' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, StringArgument) == 0x000034, "Member 'FEndDataTableReportCondition::StringArgument' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, OperatorSymbol) == 0x00003C, "Member 'FEndDataTableReportCondition::OperatorSymbol' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, AddCheckConditionID) == 0x000040, "Member 'FEndDataTableReportCondition::AddCheckConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportCondition, ViewString) == 0x000048, "Member 'FEndDataTableReportCondition::ViewString' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableReportMission
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableReportMission final : public FEndDataTableRowBase
{
public:
	class FName                                   ConditionID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RewardID;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CompleteStoryFlag;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReportedStoryFlag;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreNotifyActionOrActionGroupID;                    // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PostNotifyActionOrActionGroupID;                   // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableReportMission) == 0x000008, "Wrong alignment on FEndDataTableReportMission");
static_assert(sizeof(FEndDataTableReportMission) == 0x000038, "Wrong size on FEndDataTableReportMission");
static_assert(offsetof(FEndDataTableReportMission, ConditionID) == 0x000008, "Member 'FEndDataTableReportMission::ConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportMission, RewardID) == 0x000010, "Member 'FEndDataTableReportMission::RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportMission, CompleteStoryFlag) == 0x000018, "Member 'FEndDataTableReportMission::CompleteStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportMission, ReportedStoryFlag) == 0x000020, "Member 'FEndDataTableReportMission::ReportedStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportMission, PreNotifyActionOrActionGroupID) == 0x000028, "Member 'FEndDataTableReportMission::PreNotifyActionOrActionGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableReportMission, PostNotifyActionOrActionGroupID) == 0x000030, "Member 'FEndDataTableReportMission::PostNotifyActionOrActionGroupID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableResearchTarget
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableResearchTarget final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CategoryID;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnemyBookID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WorldReportID;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ColosseumId;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 SilhouetteImage;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 IconImage;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableResearchTarget) == 0x000008, "Wrong alignment on FEndDataTableResearchTarget");
static_assert(sizeof(FEndDataTableResearchTarget) == 0x000048, "Wrong size on FEndDataTableResearchTarget");
static_assert(offsetof(FEndDataTableResearchTarget, UniqueId) == 0x000008, "Member 'FEndDataTableResearchTarget::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableResearchTarget, CategoryID) == 0x00000C, "Member 'FEndDataTableResearchTarget::CategoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableResearchTarget, EnemyBookID) == 0x000010, "Member 'FEndDataTableResearchTarget::EnemyBookID' has a wrong offset!");
static_assert(offsetof(FEndDataTableResearchTarget, WorldReportID) == 0x000018, "Member 'FEndDataTableResearchTarget::WorldReportID' has a wrong offset!");
static_assert(offsetof(FEndDataTableResearchTarget, ColosseumId) == 0x000020, "Member 'FEndDataTableResearchTarget::ColosseumId' has a wrong offset!");
static_assert(offsetof(FEndDataTableResearchTarget, SilhouetteImage) == 0x000028, "Member 'FEndDataTableResearchTarget::SilhouetteImage' has a wrong offset!");
static_assert(offsetof(FEndDataTableResearchTarget, IconImage) == 0x000038, "Member 'FEndDataTableResearchTarget::IconImage' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableResidentObject
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableResidentObject final : public FEndDataTableRowBase
{
public:
	uint32                                        UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ObjectCategory;                                    // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MainLocation;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EntryLocation;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableResidentObject) == 0x000008, "Wrong alignment on FEndDataTableResidentObject");
static_assert(sizeof(FEndDataTableResidentObject) == 0x000020, "Wrong size on FEndDataTableResidentObject");
static_assert(offsetof(FEndDataTableResidentObject, UniqueIndex) == 0x000008, "Member 'FEndDataTableResidentObject::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObject, ObjectCategory) == 0x00000C, "Member 'FEndDataTableResidentObject::ObjectCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObject, MainLocation) == 0x000010, "Member 'FEndDataTableResidentObject::MainLocation' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObject, EntryLocation) == 0x000018, "Member 'FEndDataTableResidentObject::EntryLocation' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableResidentObjectActor
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableResidentObjectActor final : public FEndDataTableRowBase
{
public:
	class FName                                   EntryLocationId;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        UniqueIndex;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InitializeTransform;                               // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InitialOnOffAttributeStatus;                       // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableResidentObjectActor) == 0x000008, "Wrong alignment on FEndDataTableResidentObjectActor");
static_assert(sizeof(FEndDataTableResidentObjectActor) == 0x000028, "Wrong size on FEndDataTableResidentObjectActor");
static_assert(offsetof(FEndDataTableResidentObjectActor, EntryLocationId) == 0x000008, "Member 'FEndDataTableResidentObjectActor::EntryLocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObjectActor, UniqueIndex) == 0x000010, "Member 'FEndDataTableResidentObjectActor::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObjectActor, InitializeTransform) == 0x000014, "Member 'FEndDataTableResidentObjectActor::InitializeTransform' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObjectActor, InitialOnOffAttributeStatus) == 0x00001C, "Member 'FEndDataTableResidentObjectActor::InitialOnOffAttributeStatus' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableResidentObjectEnemy
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableResidentObjectEnemy final : public FEndDataTableRowBase
{
public:
	class FName                                   EntryLocationId;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        UniqueIndex;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InitializeTransform;                               // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InitialOnOffAttributeStatus;                       // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableResidentObjectEnemy) == 0x000008, "Wrong alignment on FEndDataTableResidentObjectEnemy");
static_assert(sizeof(FEndDataTableResidentObjectEnemy) == 0x000028, "Wrong size on FEndDataTableResidentObjectEnemy");
static_assert(offsetof(FEndDataTableResidentObjectEnemy, EntryLocationId) == 0x000008, "Member 'FEndDataTableResidentObjectEnemy::EntryLocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObjectEnemy, UniqueIndex) == 0x000010, "Member 'FEndDataTableResidentObjectEnemy::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObjectEnemy, InitializeTransform) == 0x000014, "Member 'FEndDataTableResidentObjectEnemy::InitializeTransform' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentObjectEnemy, InitialOnOffAttributeStatus) == 0x00001C, "Member 'FEndDataTableResidentObjectEnemy::InitialOnOffAttributeStatus' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableResidentParameter
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableResidentParameter final : public FEndDataTableRowBase
{
public:
	int32                                         ParamInt;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ParamFloat;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ParamString;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParamName;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableResidentParameter) == 0x000008, "Wrong alignment on FEndDataTableResidentParameter");
static_assert(sizeof(FEndDataTableResidentParameter) == 0x000028, "Wrong size on FEndDataTableResidentParameter");
static_assert(offsetof(FEndDataTableResidentParameter, ParamInt) == 0x000008, "Member 'FEndDataTableResidentParameter::ParamInt' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentParameter, ParamFloat) == 0x00000C, "Member 'FEndDataTableResidentParameter::ParamFloat' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentParameter, ParamString) == 0x000010, "Member 'FEndDataTableResidentParameter::ParamString' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentParameter, ParamName) == 0x000020, "Member 'FEndDataTableResidentParameter::ParamName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableResidentStateChange
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableResidentStateChange final : public FEndDataTableRowBase
{
public:
	uint32                                        UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableResidentStateChange) == 0x000008, "Wrong alignment on FEndDataTableResidentStateChange");
static_assert(sizeof(FEndDataTableResidentStateChange) == 0x000010, "Wrong size on FEndDataTableResidentStateChange");
static_assert(offsetof(FEndDataTableResidentStateChange, UniqueIndex) == 0x000008, "Member 'FEndDataTableResidentStateChange::UniqueIndex' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableResidentStateTrigger
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableResidentStateTrigger final : public FEndDataTableRowBase
{
public:
	uint32                                        UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableResidentStateTrigger) == 0x000008, "Wrong alignment on FEndDataTableResidentStateTrigger");
static_assert(sizeof(FEndDataTableResidentStateTrigger) == 0x000010, "Wrong size on FEndDataTableResidentStateTrigger");
static_assert(offsetof(FEndDataTableResidentStateTrigger, UniqueIndex) == 0x000008, "Member 'FEndDataTableResidentStateTrigger::UniqueIndex' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableResidentWork
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableResidentWork final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChapterID;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableResidentWork) == 0x000008, "Wrong alignment on FEndDataTableResidentWork");
static_assert(sizeof(FEndDataTableResidentWork) == 0x000018, "Wrong size on FEndDataTableResidentWork");
static_assert(offsetof(FEndDataTableResidentWork, UniqueIndex) == 0x000008, "Member 'FEndDataTableResidentWork::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentWork, ChapterID) == 0x00000C, "Member 'FEndDataTableResidentWork::ChapterID' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableResponseArea
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableResponseArea final : public FEndDataTableRowBase
{
public:
	float                                         ReactionRangeSquare;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SugessionRange;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SugessionRangeSquare;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReactionAngle;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SugessionAngle;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NeedRaycast;                                       // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NeedScreenSpace;                                   // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NeedNaviCheck;                                     // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactionScreenRatioX;                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReactionScreenRatioY;                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SugessionScreenRatioX;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SugessionScreenRatioY;                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ExtendedResponseAreaID;                            // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NeedZAngleCheck;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxZDistance;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ReactionInEllipse;                                 // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableResponseArea) == 0x000008, "Wrong alignment on FEndDataTableResponseArea");
static_assert(sizeof(FEndDataTableResponseArea) == 0x000048, "Wrong size on FEndDataTableResponseArea");
static_assert(offsetof(FEndDataTableResponseArea, ReactionRangeSquare) == 0x000008, "Member 'FEndDataTableResponseArea::ReactionRangeSquare' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, SugessionRange) == 0x00000C, "Member 'FEndDataTableResponseArea::SugessionRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, SugessionRangeSquare) == 0x000010, "Member 'FEndDataTableResponseArea::SugessionRangeSquare' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, ReactionAngle) == 0x000014, "Member 'FEndDataTableResponseArea::ReactionAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, SugessionAngle) == 0x000018, "Member 'FEndDataTableResponseArea::SugessionAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, NeedRaycast) == 0x00001C, "Member 'FEndDataTableResponseArea::NeedRaycast' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, NeedScreenSpace) == 0x00001D, "Member 'FEndDataTableResponseArea::NeedScreenSpace' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, NeedNaviCheck) == 0x00001E, "Member 'FEndDataTableResponseArea::NeedNaviCheck' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, ReactionScreenRatioX) == 0x000020, "Member 'FEndDataTableResponseArea::ReactionScreenRatioX' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, ReactionScreenRatioY) == 0x000024, "Member 'FEndDataTableResponseArea::ReactionScreenRatioY' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, SugessionScreenRatioX) == 0x000028, "Member 'FEndDataTableResponseArea::SugessionScreenRatioX' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, SugessionScreenRatioY) == 0x00002C, "Member 'FEndDataTableResponseArea::SugessionScreenRatioY' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, ExtendedResponseAreaID) == 0x000030, "Member 'FEndDataTableResponseArea::ExtendedResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, NeedZAngleCheck) == 0x000038, "Member 'FEndDataTableResponseArea::NeedZAngleCheck' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, MaxZDistance) == 0x00003C, "Member 'FEndDataTableResponseArea::MaxZDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, ReactionInEllipse) == 0x000040, "Member 'FEndDataTableResponseArea::ReactionInEllipse' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableResponseAreaInOut
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableResponseAreaInOut final : public FEndDataTableRowBase
{
public:
	class FName                                   Out2In;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   In2Out;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableResponseAreaInOut) == 0x000008, "Wrong alignment on FEndDataTableResponseAreaInOut");
static_assert(sizeof(FEndDataTableResponseAreaInOut) == 0x000018, "Wrong size on FEndDataTableResponseAreaInOut");
static_assert(offsetof(FEndDataTableResponseAreaInOut, Out2In) == 0x000008, "Member 'FEndDataTableResponseAreaInOut::Out2In' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseAreaInOut, In2Out) == 0x000010, "Member 'FEndDataTableResponseAreaInOut::In2Out' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableRewardRandom
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableRewardRandom final : public FEndDataTableRowBase
{
public:
	class FName                                   AbsoluteGetFlagID;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AbsoluteRewardID;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 RewardGetPercent_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           RewardID_Array;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableRewardRandom) == 0x000008, "Wrong alignment on FEndDataTableRewardRandom");
static_assert(sizeof(FEndDataTableRewardRandom) == 0x000038, "Wrong size on FEndDataTableRewardRandom");
static_assert(offsetof(FEndDataTableRewardRandom, AbsoluteGetFlagID) == 0x000008, "Member 'FEndDataTableRewardRandom::AbsoluteGetFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableRewardRandom, AbsoluteRewardID) == 0x000010, "Member 'FEndDataTableRewardRandom::AbsoluteRewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableRewardRandom, RewardGetPercent_Array) == 0x000018, "Member 'FEndDataTableRewardRandom::RewardGetPercent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableRewardRandom, RewardID_Array) == 0x000028, "Member 'FEndDataTableRewardRandom::RewardID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableSafetyStateChange
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableSafetyStateChange final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           AssignStateChangeID_Array;                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableSafetyStateChange) == 0x000008, "Wrong alignment on FEndDataTableSafetyStateChange");
static_assert(sizeof(FEndDataTableSafetyStateChange) == 0x000018, "Wrong size on FEndDataTableSafetyStateChange");
static_assert(offsetof(FEndDataTableSafetyStateChange, AssignStateChangeID_Array) == 0x000008, "Member 'FEndDataTableSafetyStateChange::AssignStateChangeID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableSceneChanger
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableSceneChanger final : public FEndDataTableRowBase
{
public:
	uint8                                         UpdateSystemDeltaTime;                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowTime;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChangeBGMDelayTime;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChangeBGMTime;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ChangeBGMType;                                     // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChangeBGMNameA;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ChangeBGMNameB;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChangeFadeDelayTime;                               // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChangeFadeTime;                                    // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ChangeFadeType;                                    // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FadeTargetA;                                       // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FadeTargetB;                                       // 0x004A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableSceneChanger) == 0x000008, "Wrong alignment on FEndDataTableSceneChanger");
static_assert(sizeof(FEndDataTableSceneChanger) == 0x000050, "Wrong size on FEndDataTableSceneChanger");
static_assert(offsetof(FEndDataTableSceneChanger, UpdateSystemDeltaTime) == 0x000008, "Member 'FEndDataTableSceneChanger::UpdateSystemDeltaTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ShowTime) == 0x00000C, "Member 'FEndDataTableSceneChanger::ShowTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeBGMDelayTime) == 0x000010, "Member 'FEndDataTableSceneChanger::ChangeBGMDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeBGMTime) == 0x000014, "Member 'FEndDataTableSceneChanger::ChangeBGMTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeBGMType) == 0x000018, "Member 'FEndDataTableSceneChanger::ChangeBGMType' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeBGMNameA) == 0x000020, "Member 'FEndDataTableSceneChanger::ChangeBGMNameA' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeBGMNameB) == 0x000030, "Member 'FEndDataTableSceneChanger::ChangeBGMNameB' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeFadeDelayTime) == 0x000040, "Member 'FEndDataTableSceneChanger::ChangeFadeDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeFadeTime) == 0x000044, "Member 'FEndDataTableSceneChanger::ChangeFadeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeFadeType) == 0x000048, "Member 'FEndDataTableSceneChanger::ChangeFadeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, FadeTargetA) == 0x000049, "Member 'FEndDataTableSceneChanger::FadeTargetA' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, FadeTargetB) == 0x00004A, "Member 'FEndDataTableSceneChanger::FadeTargetB' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableShakeCharaProperty
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableShakeCharaProperty final : public FEndDataTableRowBase
{
public:
	class FName                                   CameraShakeDataID;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ForceFeedbackFileName;                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableShakeCharaProperty) == 0x000008, "Wrong alignment on FEndDataTableShakeCharaProperty");
static_assert(sizeof(FEndDataTableShakeCharaProperty) == 0x000018, "Wrong size on FEndDataTableShakeCharaProperty");
static_assert(offsetof(FEndDataTableShakeCharaProperty, CameraShakeDataID) == 0x000008, "Member 'FEndDataTableShakeCharaProperty::CameraShakeDataID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShakeCharaProperty, ForceFeedbackFileName) == 0x000010, "Member 'FEndDataTableShakeCharaProperty::ForceFeedbackFileName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableShootingCoasterAllyData
// 0x00C0 (0x00C8 - 0x0008)
struct FEndDataTableShootingCoasterAllyData final : public FEndDataTableRowBase
{
public:
	class FName                                   StringParam00;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam00;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam00;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam01;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam02;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam03;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam04;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BlendType;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UnfollowPlayerSpline;                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam05;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CollisionLifetime;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam06;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam07;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam08;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam09;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam10;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam11;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam12;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam13;                                      // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam14;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam15;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam16;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam17;                                      // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam18;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam19;                                      // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam20;                                      // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam21;                                      // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam32;                                      // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam33;                                      // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam34;                                      // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam35;                                      // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam36;                                      // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerPhaseChangeHorizontalDistance;               // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerPhaseChangeVerticalDistance;                 // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PhaseTwoForwardDistance;                           // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalHorizontalDistance;                           // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalVerticalDistance;                             // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalForwardDistance;                              // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EvadeInvulnerabilityTime;                          // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam24;                                      // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam25;                                      // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam26;                                      // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam27;                                      // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam28;                                      // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam29;                                      // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam30;                                      // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam31;                                      // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableShootingCoasterAllyData) == 0x000008, "Wrong alignment on FEndDataTableShootingCoasterAllyData");
static_assert(sizeof(FEndDataTableShootingCoasterAllyData) == 0x0000C8, "Wrong size on FEndDataTableShootingCoasterAllyData");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, StringParam00) == 0x000008, "Member 'FEndDataTableShootingCoasterAllyData::StringParam00' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, IntParam00) == 0x000010, "Member 'FEndDataTableShootingCoasterAllyData::IntParam00' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam00) == 0x000014, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam00' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam01) == 0x000018, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam01' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam02) == 0x00001C, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam02' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam03) == 0x000020, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam03' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam04) == 0x000024, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam04' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, BlendType) == 0x000028, "Member 'FEndDataTableShootingCoasterAllyData::BlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, UnfollowPlayerSpline) == 0x00002C, "Member 'FEndDataTableShootingCoasterAllyData::UnfollowPlayerSpline' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam05) == 0x000030, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam05' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, CollisionLifetime) == 0x000034, "Member 'FEndDataTableShootingCoasterAllyData::CollisionLifetime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam06) == 0x000038, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam06' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam07) == 0x00003C, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam07' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam08) == 0x000040, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam08' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam09) == 0x000044, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam09' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam10) == 0x000048, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam10' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam11) == 0x00004C, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam11' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam12) == 0x000050, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam12' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam13) == 0x000054, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam13' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam14) == 0x000058, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam14' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam15) == 0x00005C, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam15' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam16) == 0x000060, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam16' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam17) == 0x000064, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam17' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam18) == 0x000068, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam18' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam19) == 0x00006C, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam19' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam20) == 0x000070, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam20' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam21) == 0x000074, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam21' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam32) == 0x000078, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam32' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam33) == 0x00007C, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam33' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam34) == 0x000080, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam34' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam35) == 0x000084, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam35' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam36) == 0x000088, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam36' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, PlayerPhaseChangeHorizontalDistance) == 0x00008C, "Member 'FEndDataTableShootingCoasterAllyData::PlayerPhaseChangeHorizontalDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, PlayerPhaseChangeVerticalDistance) == 0x000090, "Member 'FEndDataTableShootingCoasterAllyData::PlayerPhaseChangeVerticalDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, PhaseTwoForwardDistance) == 0x000094, "Member 'FEndDataTableShootingCoasterAllyData::PhaseTwoForwardDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FinalHorizontalDistance) == 0x000098, "Member 'FEndDataTableShootingCoasterAllyData::FinalHorizontalDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FinalVerticalDistance) == 0x00009C, "Member 'FEndDataTableShootingCoasterAllyData::FinalVerticalDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FinalForwardDistance) == 0x0000A0, "Member 'FEndDataTableShootingCoasterAllyData::FinalForwardDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, EvadeInvulnerabilityTime) == 0x0000A4, "Member 'FEndDataTableShootingCoasterAllyData::EvadeInvulnerabilityTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam24) == 0x0000A8, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam24' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam25) == 0x0000AC, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam25' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam26) == 0x0000B0, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam26' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam27) == 0x0000B4, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam27' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam28) == 0x0000B8, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam28' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam29) == 0x0000BC, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam29' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam30) == 0x0000C0, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam30' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterAllyData, FloatParam31) == 0x0000C4, "Member 'FEndDataTableShootingCoasterAllyData::FloatParam31' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableShootingCoasterEnemyGroupScoreData
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableShootingCoasterEnemyGroupScoreData final : public FEndDataTableRowBase
{
public:
	int32                                         GroupCoasterNormalScore;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         GroupCoasterHardScore;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableShootingCoasterEnemyGroupScoreData) == 0x000008, "Wrong alignment on FEndDataTableShootingCoasterEnemyGroupScoreData");
static_assert(sizeof(FEndDataTableShootingCoasterEnemyGroupScoreData) == 0x000010, "Wrong size on FEndDataTableShootingCoasterEnemyGroupScoreData");
static_assert(offsetof(FEndDataTableShootingCoasterEnemyGroupScoreData, GroupCoasterNormalScore) == 0x000008, "Member 'FEndDataTableShootingCoasterEnemyGroupScoreData::GroupCoasterNormalScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterEnemyGroupScoreData, GroupCoasterHardScore) == 0x00000C, "Member 'FEndDataTableShootingCoasterEnemyGroupScoreData::GroupCoasterHardScore' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableShootingCoasterMiniGame
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableShootingCoasterMiniGame final : public FEndDataTableRowBase
{
public:
	class FName                                   AssetID;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StringParam_Array;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         FloatParam00;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam01;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam02;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam03;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam04;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam05;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam06;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam07;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam08;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam09;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam10;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam11;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam00;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam01;                                        // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam02;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam03;                                        // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam04;                                        // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam05;                                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam06;                                        // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam07;                                        // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam08;                                        // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IntParam09;                                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableShootingCoasterMiniGame) == 0x000008, "Wrong alignment on FEndDataTableShootingCoasterMiniGame");
static_assert(sizeof(FEndDataTableShootingCoasterMiniGame) == 0x000078, "Wrong size on FEndDataTableShootingCoasterMiniGame");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, AssetID) == 0x000008, "Member 'FEndDataTableShootingCoasterMiniGame::AssetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, StringParam_Array) == 0x000010, "Member 'FEndDataTableShootingCoasterMiniGame::StringParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam00) == 0x000020, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam00' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam01) == 0x000024, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam01' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam02) == 0x000028, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam02' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam03) == 0x00002C, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam03' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam04) == 0x000030, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam04' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam05) == 0x000034, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam05' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam06) == 0x000038, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam06' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam07) == 0x00003C, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam07' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam08) == 0x000040, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam08' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam09) == 0x000044, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam09' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam10) == 0x000048, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam10' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, FloatParam11) == 0x00004C, "Member 'FEndDataTableShootingCoasterMiniGame::FloatParam11' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, IntParam00) == 0x000050, "Member 'FEndDataTableShootingCoasterMiniGame::IntParam00' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, IntParam01) == 0x000054, "Member 'FEndDataTableShootingCoasterMiniGame::IntParam01' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, IntParam02) == 0x000058, "Member 'FEndDataTableShootingCoasterMiniGame::IntParam02' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, IntParam03) == 0x00005C, "Member 'FEndDataTableShootingCoasterMiniGame::IntParam03' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, IntParam04) == 0x000060, "Member 'FEndDataTableShootingCoasterMiniGame::IntParam04' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, IntParam05) == 0x000064, "Member 'FEndDataTableShootingCoasterMiniGame::IntParam05' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, IntParam06) == 0x000068, "Member 'FEndDataTableShootingCoasterMiniGame::IntParam06' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, IntParam07) == 0x00006C, "Member 'FEndDataTableShootingCoasterMiniGame::IntParam07' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, IntParam08) == 0x000070, "Member 'FEndDataTableShootingCoasterMiniGame::IntParam08' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGame, IntParam09) == 0x000074, "Member 'FEndDataTableShootingCoasterMiniGame::IntParam09' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableShootingCoasterMiniGameTriggerEvents
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableShootingCoasterMiniGameTriggerEvents final : public FEndDataTableRowBase
{
public:
	class FName                                   TriggerID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NormalPoints;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HardPoints;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatCondition00;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatCondition01;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatCondition02;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableShootingCoasterMiniGameTriggerEvents) == 0x000008, "Wrong alignment on FEndDataTableShootingCoasterMiniGameTriggerEvents");
static_assert(sizeof(FEndDataTableShootingCoasterMiniGameTriggerEvents) == 0x000028, "Wrong size on FEndDataTableShootingCoasterMiniGameTriggerEvents");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGameTriggerEvents, TriggerID) == 0x000008, "Member 'FEndDataTableShootingCoasterMiniGameTriggerEvents::TriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGameTriggerEvents, NormalPoints) == 0x000010, "Member 'FEndDataTableShootingCoasterMiniGameTriggerEvents::NormalPoints' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGameTriggerEvents, HardPoints) == 0x000014, "Member 'FEndDataTableShootingCoasterMiniGameTriggerEvents::HardPoints' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGameTriggerEvents, FloatCondition00) == 0x000018, "Member 'FEndDataTableShootingCoasterMiniGameTriggerEvents::FloatCondition00' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGameTriggerEvents, FloatCondition01) == 0x00001C, "Member 'FEndDataTableShootingCoasterMiniGameTriggerEvents::FloatCondition01' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterMiniGameTriggerEvents, FloatCondition02) == 0x000020, "Member 'FEndDataTableShootingCoasterMiniGameTriggerEvents::FloatCondition02' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableShootingCoasterNormalEnemyData
// 0x0228 (0x0230 - 0x0008)
struct FEndDataTableShootingCoasterNormalEnemyData final : public FEndDataTableRowBase
{
public:
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Hitpoints;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TimeToSpawn;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UnfollowPlayerSpline;                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinDistance;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotInterval;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotSpeed;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotDamage;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotRadius;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotMaxDistance;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CollisionLifetime;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxRandomErrorDegrees;                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HomingPower;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EnemyScore;                                        // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CloseRangeDistanceToSpeedChange;                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CloseRangeSpeed;                                   // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CloseRangeTimeToSpeedChange;                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FarRangeDistanceToSpeedChange;                     // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FarRangeSpeed;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FarRangeTimeToSpeedChange;                         // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChargeShotMaxTime;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TotalChargeShots;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveToLocationSpeed;                               // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TotalShotsPerLocation;                             // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TotalLocationChanges;                              // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveTowardsPlayerSpeed;                            // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBeforeMovingBegins;                            // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBeforeShootingBegins;                          // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBeforeRushAttack;                              // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChanceToSideSwap;                                  // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ExchangeRadius;                                    // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ExchangeTimePerAttempt;                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnchorHorizontalOffset;                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnchorForwardOffset;                               // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HorizontalMovementLimit;                           // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VerticalMovementLimit;                             // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InterpolationMovementSpeed;                        // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChangePathPercentage;                              // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DistanceToBeginMatchingPlayerSpeed;                // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetComponentName1;                              // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetComponentHealth1;                            // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetComponentName2;                              // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetComponentHealth2;                            // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetComponentName3;                              // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetComponentHealth3;                            // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SineAmplitude;                                     // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SineFrequency;                                     // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserRadius;                                       // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserDamage;                                       // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserTotalTime;                                    // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserMaxDistance;                                  // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBetweenLaserAttacksMinimum;                    // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBetweenLaserAttacksMaximum;                    // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserHomingPower;                                  // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserChargeTime;                                   // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DrillShotDamage;                                   // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DrillShotActiveTime;                               // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DrillShotCoolDownTime;                             // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalAttackMovementSpeed;                          // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EscapeMovementSpeed;                               // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EscapeDistance;                                    // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EscapeTime;                                        // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CannonSocketName;                                  // 0x010C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InitialDelay;                                      // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Interval;                                          // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DrillShotHoming;                                   // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DrillShotSpeed;                                    // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AimToPlayer;                                       // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BossCannonAssetName;                               // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BossCannonType;                                    // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BossCannonPhase;                                   // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RequiredForPhaseChange;                            // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CannonYaw;                                         // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CannonPitch;                                       // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BossCannonSocketName;                              // 0x0144(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BossCannonGroupName;                               // 0x014C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BossCannonAttackType;                              // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonHitpoints;                               // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BossCannonScore;                                   // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonStartTime;                               // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonShotInterval;                            // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonHomingPower;                             // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonShotSpeed;                               // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonShotDamage;                              // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonShotMaxDistance;                         // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BossCannonShotRadius;                              // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxShotsBeforeRetargetting;                        // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDistanceForTargetting;                          // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChargeTotalTime;                                   // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserActiveTime;                                   // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OwnerRocketID;                                     // 0x018C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LaserSocketID;                                     // 0x0194(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserOffsetX;                                      // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserOffsetY;                                      // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserOffsetYaw;                                    // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserOffsetPitch;                                  // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossLaserRadius;                              // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossLaserDamage;                              // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossLaserMaxDistance;                         // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserDistanceFromPlayer;                           // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LaserPositionalVerticalOffset;                     // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossLaserTotalTime;                           // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossTimeBetweenLaserAttacks;                  // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossLaserChargeTime;                          // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BlendOption;                                       // 0x01CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxUpDistance;                                     // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDownDistance;                                   // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxLeftDistance;                                   // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxRightDistance;                                  // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxFrontDistance;                                  // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxBackDistance;                                   // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinimumDistanceAcceptable;                         // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBetweenMovement;                               // 0x01EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeForMovement;                                   // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossMiniLaserDelay;                           // 0x01F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossMiniLaserTotalTime;                       // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossTimeBetweenMiniLaserAttacks;              // 0x01FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalBossMiniLaserChargeTime;                      // 0x0200(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AllyCannonDamageLimit;                             // 0x0204(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AllyRocketDamageLimit;                             // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RocketAssetName;                                   // 0x020C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RocketSocketName;                                  // 0x0214(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RocketHitpoints;                                   // 0x021C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RocketScore;                                       // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FinalFeedbackTime;                                 // 0x0224(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DistanceToEndOfSpline;                             // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableShootingCoasterNormalEnemyData) == 0x000008, "Wrong alignment on FEndDataTableShootingCoasterNormalEnemyData");
static_assert(sizeof(FEndDataTableShootingCoasterNormalEnemyData) == 0x000230, "Wrong size on FEndDataTableShootingCoasterNormalEnemyData");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, Speed) == 0x000008, "Member 'FEndDataTableShootingCoasterNormalEnemyData::Speed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, Hitpoints) == 0x00000C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::Hitpoints' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TimeToSpawn) == 0x000010, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, UnfollowPlayerSpline) == 0x000014, "Member 'FEndDataTableShootingCoasterNormalEnemyData::UnfollowPlayerSpline' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MinDistance) == 0x000018, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MinDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ShotInterval) == 0x00001C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ShotInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ShotSpeed) == 0x000020, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ShotSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ShotDamage) == 0x000024, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ShotDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ShotRadius) == 0x000028, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ShotRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ShotMaxDistance) == 0x00002C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ShotMaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, CollisionLifetime) == 0x000030, "Member 'FEndDataTableShootingCoasterNormalEnemyData::CollisionLifetime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MaxRandomErrorDegrees) == 0x000034, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MaxRandomErrorDegrees' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, HomingPower) == 0x000038, "Member 'FEndDataTableShootingCoasterNormalEnemyData::HomingPower' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, EnemyScore) == 0x00003C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::EnemyScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, CloseRangeDistanceToSpeedChange) == 0x000040, "Member 'FEndDataTableShootingCoasterNormalEnemyData::CloseRangeDistanceToSpeedChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, CloseRangeSpeed) == 0x000044, "Member 'FEndDataTableShootingCoasterNormalEnemyData::CloseRangeSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, CloseRangeTimeToSpeedChange) == 0x000048, "Member 'FEndDataTableShootingCoasterNormalEnemyData::CloseRangeTimeToSpeedChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FarRangeDistanceToSpeedChange) == 0x00004C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FarRangeDistanceToSpeedChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FarRangeSpeed) == 0x000050, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FarRangeSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FarRangeTimeToSpeedChange) == 0x000054, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FarRangeTimeToSpeedChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ChargeShotMaxTime) == 0x000058, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ChargeShotMaxTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TotalChargeShots) == 0x00005C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TotalChargeShots' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MoveToLocationSpeed) == 0x000060, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MoveToLocationSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TotalShotsPerLocation) == 0x000064, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TotalShotsPerLocation' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TotalLocationChanges) == 0x000068, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TotalLocationChanges' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MoveTowardsPlayerSpeed) == 0x00006C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MoveTowardsPlayerSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TimeBeforeMovingBegins) == 0x000070, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TimeBeforeMovingBegins' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TimeBeforeShootingBegins) == 0x000074, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TimeBeforeShootingBegins' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TimeBeforeRushAttack) == 0x000078, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TimeBeforeRushAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ChanceToSideSwap) == 0x00007C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ChanceToSideSwap' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ExchangeRadius) == 0x000080, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ExchangeRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ExchangeTimePerAttempt) == 0x000084, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ExchangeTimePerAttempt' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, AnchorHorizontalOffset) == 0x000088, "Member 'FEndDataTableShootingCoasterNormalEnemyData::AnchorHorizontalOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, AnchorForwardOffset) == 0x00008C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::AnchorForwardOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, HorizontalMovementLimit) == 0x000090, "Member 'FEndDataTableShootingCoasterNormalEnemyData::HorizontalMovementLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, VerticalMovementLimit) == 0x000094, "Member 'FEndDataTableShootingCoasterNormalEnemyData::VerticalMovementLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, InterpolationMovementSpeed) == 0x000098, "Member 'FEndDataTableShootingCoasterNormalEnemyData::InterpolationMovementSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ChangePathPercentage) == 0x00009C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ChangePathPercentage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, DistanceToBeginMatchingPlayerSpeed) == 0x0000A0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::DistanceToBeginMatchingPlayerSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TargetComponentName1) == 0x0000A4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TargetComponentName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TargetComponentHealth1) == 0x0000AC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TargetComponentHealth1' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TargetComponentName2) == 0x0000B0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TargetComponentName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TargetComponentHealth2) == 0x0000B8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TargetComponentHealth2' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TargetComponentName3) == 0x0000BC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TargetComponentName3' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TargetComponentHealth3) == 0x0000C4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TargetComponentHealth3' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, SineAmplitude) == 0x0000C8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::SineAmplitude' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, SineFrequency) == 0x0000CC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::SineFrequency' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserRadius) == 0x0000D0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserDamage) == 0x0000D4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserTotalTime) == 0x0000D8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserTotalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserMaxDistance) == 0x0000DC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserMaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TimeBetweenLaserAttacksMinimum) == 0x0000E0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TimeBetweenLaserAttacksMinimum' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TimeBetweenLaserAttacksMaximum) == 0x0000E4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TimeBetweenLaserAttacksMaximum' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserHomingPower) == 0x0000E8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserHomingPower' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserChargeTime) == 0x0000EC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserChargeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, DrillShotDamage) == 0x0000F0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::DrillShotDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, DrillShotActiveTime) == 0x0000F4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::DrillShotActiveTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, DrillShotCoolDownTime) == 0x0000F8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::DrillShotCoolDownTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalAttackMovementSpeed) == 0x0000FC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalAttackMovementSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, EscapeMovementSpeed) == 0x000100, "Member 'FEndDataTableShootingCoasterNormalEnemyData::EscapeMovementSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, EscapeDistance) == 0x000104, "Member 'FEndDataTableShootingCoasterNormalEnemyData::EscapeDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, EscapeTime) == 0x000108, "Member 'FEndDataTableShootingCoasterNormalEnemyData::EscapeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, CannonSocketName) == 0x00010C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::CannonSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, InitialDelay) == 0x000114, "Member 'FEndDataTableShootingCoasterNormalEnemyData::InitialDelay' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, Interval) == 0x000118, "Member 'FEndDataTableShootingCoasterNormalEnemyData::Interval' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, DrillShotHoming) == 0x00011C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::DrillShotHoming' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, DrillShotSpeed) == 0x000120, "Member 'FEndDataTableShootingCoasterNormalEnemyData::DrillShotSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, AimToPlayer) == 0x000124, "Member 'FEndDataTableShootingCoasterNormalEnemyData::AimToPlayer' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonAssetName) == 0x000128, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonAssetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonType) == 0x000130, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonPhase) == 0x000134, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonPhase' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, RequiredForPhaseChange) == 0x000138, "Member 'FEndDataTableShootingCoasterNormalEnemyData::RequiredForPhaseChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, CannonYaw) == 0x00013C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::CannonYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, CannonPitch) == 0x000140, "Member 'FEndDataTableShootingCoasterNormalEnemyData::CannonPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonSocketName) == 0x000144, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonGroupName) == 0x00014C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonGroupName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonAttackType) == 0x000154, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonAttackType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonHitpoints) == 0x000158, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonHitpoints' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonScore) == 0x00015C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonStartTime) == 0x000160, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonStartTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonShotInterval) == 0x000164, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonShotInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonHomingPower) == 0x000168, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonHomingPower' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonShotSpeed) == 0x00016C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonShotSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonShotDamage) == 0x000170, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonShotDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonShotMaxDistance) == 0x000174, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonShotMaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BossCannonShotRadius) == 0x000178, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BossCannonShotRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MaxShotsBeforeRetargetting) == 0x00017C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MaxShotsBeforeRetargetting' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MaxDistanceForTargetting) == 0x000180, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MaxDistanceForTargetting' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, ChargeTotalTime) == 0x000184, "Member 'FEndDataTableShootingCoasterNormalEnemyData::ChargeTotalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserActiveTime) == 0x000188, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserActiveTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, OwnerRocketID) == 0x00018C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::OwnerRocketID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserSocketID) == 0x000194, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserSocketID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserOffsetX) == 0x00019C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserOffsetY) == 0x0001A0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserOffsetYaw) == 0x0001A4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserOffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserOffsetPitch) == 0x0001A8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserOffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalBossLaserRadius) == 0x0001AC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalBossLaserRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalBossLaserDamage) == 0x0001B0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalBossLaserDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalBossLaserMaxDistance) == 0x0001B4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalBossLaserMaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserDistanceFromPlayer) == 0x0001B8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserDistanceFromPlayer' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, LaserPositionalVerticalOffset) == 0x0001BC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::LaserPositionalVerticalOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalBossLaserTotalTime) == 0x0001C0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalBossLaserTotalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalBossTimeBetweenLaserAttacks) == 0x0001C4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalBossTimeBetweenLaserAttacks' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalBossLaserChargeTime) == 0x0001C8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalBossLaserChargeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, BlendOption) == 0x0001CC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::BlendOption' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MaxUpDistance) == 0x0001D0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MaxUpDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MaxDownDistance) == 0x0001D4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MaxDownDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MaxLeftDistance) == 0x0001D8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MaxLeftDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MaxRightDistance) == 0x0001DC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MaxRightDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MaxFrontDistance) == 0x0001E0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MaxFrontDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MaxBackDistance) == 0x0001E4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MaxBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, MinimumDistanceAcceptable) == 0x0001E8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::MinimumDistanceAcceptable' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TimeBetweenMovement) == 0x0001EC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TimeBetweenMovement' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, TimeForMovement) == 0x0001F0, "Member 'FEndDataTableShootingCoasterNormalEnemyData::TimeForMovement' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalBossMiniLaserDelay) == 0x0001F4, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalBossMiniLaserDelay' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalBossMiniLaserTotalTime) == 0x0001F8, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalBossMiniLaserTotalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalBossTimeBetweenMiniLaserAttacks) == 0x0001FC, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalBossTimeBetweenMiniLaserAttacks' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalBossMiniLaserChargeTime) == 0x000200, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalBossMiniLaserChargeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, AllyCannonDamageLimit) == 0x000204, "Member 'FEndDataTableShootingCoasterNormalEnemyData::AllyCannonDamageLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, AllyRocketDamageLimit) == 0x000208, "Member 'FEndDataTableShootingCoasterNormalEnemyData::AllyRocketDamageLimit' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, RocketAssetName) == 0x00020C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::RocketAssetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, RocketSocketName) == 0x000214, "Member 'FEndDataTableShootingCoasterNormalEnemyData::RocketSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, RocketHitpoints) == 0x00021C, "Member 'FEndDataTableShootingCoasterNormalEnemyData::RocketHitpoints' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, RocketScore) == 0x000220, "Member 'FEndDataTableShootingCoasterNormalEnemyData::RocketScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, FinalFeedbackTime) == 0x000224, "Member 'FEndDataTableShootingCoasterNormalEnemyData::FinalFeedbackTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingCoasterNormalEnemyData, DistanceToEndOfSpline) == 0x000228, "Member 'FEndDataTableShootingCoasterNormalEnemyData::DistanceToEndOfSpline' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableShootingGameTargetParam
// 0x00C8 (0x00D0 - 0x0008)
struct FEndDataTableShootingGameTargetParam final : public FEndDataTableRowBase
{
public:
	class FName                                   BluePrintName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CharaType;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SizeRate;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Durability;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DamageMaterial;                                    // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TargetType;                                        // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BacksideScore;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndWaitTime;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RoundTripTime;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetRotatesA;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetRotatesB;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetRotatesC;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetRotatesD;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BrokenTriggerName01;                               // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BrokenTriggerName02;                               // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BrokenTriggerName03;                               // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BrokenTriggerName04;                               // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CreateTargetAtBroken;                              // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TargetStopPointList_Array;                         // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 TargetStopTimeList_Array;                          // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           TargetParamIDList_Array;                           // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           TargetSplineNameList_Array;                        // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 TargetMoveSpeedList_Array;                         // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   MotionTargetBPName;                                // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MotionType;                                        // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MotionChangeBPName;                                // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableShootingGameTargetParam) == 0x000008, "Wrong alignment on FEndDataTableShootingGameTargetParam");
static_assert(sizeof(FEndDataTableShootingGameTargetParam) == 0x0000D0, "Wrong size on FEndDataTableShootingGameTargetParam");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, BluePrintName) == 0x000008, "Member 'FEndDataTableShootingGameTargetParam::BluePrintName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, CharaType) == 0x000010, "Member 'FEndDataTableShootingGameTargetParam::CharaType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, SizeRate) == 0x000014, "Member 'FEndDataTableShootingGameTargetParam::SizeRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, Durability) == 0x000018, "Member 'FEndDataTableShootingGameTargetParam::Durability' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, DamageMaterial) == 0x00001C, "Member 'FEndDataTableShootingGameTargetParam::DamageMaterial' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, TargetType) == 0x00001D, "Member 'FEndDataTableShootingGameTargetParam::TargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, Score) == 0x000020, "Member 'FEndDataTableShootingGameTargetParam::Score' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, BacksideScore) == 0x000024, "Member 'FEndDataTableShootingGameTargetParam::BacksideScore' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, EndWaitTime) == 0x000028, "Member 'FEndDataTableShootingGameTargetParam::EndWaitTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, RoundTripTime) == 0x00002C, "Member 'FEndDataTableShootingGameTargetParam::RoundTripTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, TargetRotatesA) == 0x000030, "Member 'FEndDataTableShootingGameTargetParam::TargetRotatesA' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, TargetRotatesB) == 0x000034, "Member 'FEndDataTableShootingGameTargetParam::TargetRotatesB' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, TargetRotatesC) == 0x000038, "Member 'FEndDataTableShootingGameTargetParam::TargetRotatesC' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, TargetRotatesD) == 0x00003C, "Member 'FEndDataTableShootingGameTargetParam::TargetRotatesD' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, BrokenTriggerName01) == 0x000040, "Member 'FEndDataTableShootingGameTargetParam::BrokenTriggerName01' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, BrokenTriggerName02) == 0x000048, "Member 'FEndDataTableShootingGameTargetParam::BrokenTriggerName02' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, BrokenTriggerName03) == 0x000050, "Member 'FEndDataTableShootingGameTargetParam::BrokenTriggerName03' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, BrokenTriggerName04) == 0x000058, "Member 'FEndDataTableShootingGameTargetParam::BrokenTriggerName04' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, CreateTargetAtBroken) == 0x000060, "Member 'FEndDataTableShootingGameTargetParam::CreateTargetAtBroken' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, TargetStopPointList_Array) == 0x000068, "Member 'FEndDataTableShootingGameTargetParam::TargetStopPointList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, TargetStopTimeList_Array) == 0x000078, "Member 'FEndDataTableShootingGameTargetParam::TargetStopTimeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, TargetParamIDList_Array) == 0x000088, "Member 'FEndDataTableShootingGameTargetParam::TargetParamIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, TargetSplineNameList_Array) == 0x000098, "Member 'FEndDataTableShootingGameTargetParam::TargetSplineNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, TargetMoveSpeedList_Array) == 0x0000A8, "Member 'FEndDataTableShootingGameTargetParam::TargetMoveSpeedList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, MotionTargetBPName) == 0x0000B8, "Member 'FEndDataTableShootingGameTargetParam::MotionTargetBPName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, MotionType) == 0x0000C0, "Member 'FEndDataTableShootingGameTargetParam::MotionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShootingGameTargetParam, MotionChangeBPName) == 0x0000C4, "Member 'FEndDataTableShootingGameTargetParam::MotionChangeBPName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableShopItem
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableShopItem final : public FEndDataTableRowBase
{
public:
	class FName                                   LocationId;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UseItemID;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ItemType;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ItemId;                                            // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ViewFlag;                                          // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SoldOutAsHasCountMax;                              // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SoldOutByStockEmpty;                               // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OverridePrice_Array;                               // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CountersID_Array;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ShopBuyStateTrigger_Array;                         // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableShopItem) == 0x000008, "Wrong alignment on FEndDataTableShopItem");
static_assert(sizeof(FEndDataTableShopItem) == 0x000060, "Wrong size on FEndDataTableShopItem");
static_assert(offsetof(FEndDataTableShopItem, LocationId) == 0x000008, "Member 'FEndDataTableShopItem::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, UseItemID) == 0x000010, "Member 'FEndDataTableShopItem::UseItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, ItemType) == 0x000018, "Member 'FEndDataTableShopItem::ItemType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, ItemId) == 0x00001C, "Member 'FEndDataTableShopItem::ItemId' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, ViewFlag) == 0x000024, "Member 'FEndDataTableShopItem::ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, SoldOutAsHasCountMax) == 0x00002C, "Member 'FEndDataTableShopItem::SoldOutAsHasCountMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, SoldOutByStockEmpty) == 0x00002D, "Member 'FEndDataTableShopItem::SoldOutByStockEmpty' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, OverridePrice_Array) == 0x000030, "Member 'FEndDataTableShopItem::OverridePrice_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, CountersID_Array) == 0x000040, "Member 'FEndDataTableShopItem::CountersID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, ShopBuyStateTrigger_Array) == 0x000050, "Member 'FEndDataTableShopItem::ShopBuyStateTrigger_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableShopLayoutData
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableShopLayoutData final : public FEndDataTableRowBase
{
public:
	class FString                                 ItemName;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SequenceType;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NextID;                                            // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         StringArgument_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerArgument_Array;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableShopLayoutData) == 0x000008, "Wrong alignment on FEndDataTableShopLayoutData");
static_assert(sizeof(FEndDataTableShopLayoutData) == 0x000048, "Wrong size on FEndDataTableShopLayoutData");
static_assert(offsetof(FEndDataTableShopLayoutData, ItemName) == 0x000008, "Member 'FEndDataTableShopLayoutData::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopLayoutData, SequenceType) == 0x000018, "Member 'FEndDataTableShopLayoutData::SequenceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopLayoutData, NextID) == 0x00001C, "Member 'FEndDataTableShopLayoutData::NextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopLayoutData, StringArgument_Array) == 0x000028, "Member 'FEndDataTableShopLayoutData::StringArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopLayoutData, IntegerArgument_Array) == 0x000038, "Member 'FEndDataTableShopLayoutData::IntegerArgument_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableShopList
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableShopList final : public FEndDataTableRowBase
{
public:
	uint8                                         ShopType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HiddenSellFlag;                                    // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         HiddenCategorySelectFlag;                          // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ShopName;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   UseItemID;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 UseCategory_Array;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ItemID_Array;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableShopList) == 0x000008, "Wrong alignment on FEndDataTableShopList");
static_assert(sizeof(FEndDataTableShopList) == 0x000048, "Wrong size on FEndDataTableShopList");
static_assert(offsetof(FEndDataTableShopList, ShopType) == 0x000008, "Member 'FEndDataTableShopList::ShopType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, HiddenSellFlag) == 0x000009, "Member 'FEndDataTableShopList::HiddenSellFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, HiddenCategorySelectFlag) == 0x00000A, "Member 'FEndDataTableShopList::HiddenCategorySelectFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, ShopName) == 0x000010, "Member 'FEndDataTableShopList::ShopName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, UseItemID) == 0x000020, "Member 'FEndDataTableShopList::UseItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, UseCategory_Array) == 0x000028, "Member 'FEndDataTableShopList::UseCategory_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, ItemID_Array) == 0x000038, "Member 'FEndDataTableShopList::ItemID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableStateAttribute
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableStateAttribute final : public FEndDataTableRowBase
{
public:
	int32                                         AttributeIndex;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStateAttribute) == 0x000008, "Wrong alignment on FEndDataTableStateAttribute");
static_assert(sizeof(FEndDataTableStateAttribute) == 0x000010, "Wrong size on FEndDataTableStateAttribute");
static_assert(offsetof(FEndDataTableStateAttribute, AttributeIndex) == 0x000008, "Member 'FEndDataTableStateAttribute::AttributeIndex' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableStateChange
// 0x00E0 (0x00E8 - 0x0008)
struct FEndDataTableStateChange final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SwapStateConditionNot_Array;                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SwapStateCondition_Array;                          // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SwapStateChange_Array;                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EnterActionList_Array;                             // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 Status;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 LoopAnimation;                                     // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Animation_Array;                                   // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   LoopEffect;                                        // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Light;                                             // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StringArgumentList_Array;                          // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerArgumentList_Array;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 FloatArgument_Array;                               // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateTriggerList_Array;                            // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         NextStateChange_Array;                             // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         ForceChange;                                       // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStateChange) == 0x000008, "Wrong alignment on FEndDataTableStateChange");
static_assert(sizeof(FEndDataTableStateChange) == 0x0000E8, "Wrong size on FEndDataTableStateChange");
static_assert(offsetof(FEndDataTableStateChange, UniqueIndex) == 0x000008, "Member 'FEndDataTableStateChange::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, SwapStateConditionNot_Array) == 0x000010, "Member 'FEndDataTableStateChange::SwapStateConditionNot_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, SwapStateCondition_Array) == 0x000020, "Member 'FEndDataTableStateChange::SwapStateCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, SwapStateChange_Array) == 0x000030, "Member 'FEndDataTableStateChange::SwapStateChange_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, EnterActionList_Array) == 0x000040, "Member 'FEndDataTableStateChange::EnterActionList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, Status) == 0x000050, "Member 'FEndDataTableStateChange::Status' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, LoopAnimation) == 0x000060, "Member 'FEndDataTableStateChange::LoopAnimation' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, Animation_Array) == 0x000070, "Member 'FEndDataTableStateChange::Animation_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, LoopEffect) == 0x000080, "Member 'FEndDataTableStateChange::LoopEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, Light) == 0x000088, "Member 'FEndDataTableStateChange::Light' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, StringArgumentList_Array) == 0x000090, "Member 'FEndDataTableStateChange::StringArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, IntegerArgumentList_Array) == 0x0000A0, "Member 'FEndDataTableStateChange::IntegerArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, FloatArgument_Array) == 0x0000B0, "Member 'FEndDataTableStateChange::FloatArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, StateTriggerList_Array) == 0x0000C0, "Member 'FEndDataTableStateChange::StateTriggerList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, NextStateChange_Array) == 0x0000D0, "Member 'FEndDataTableStateChange::NextStateChange_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, ForceChange) == 0x0000E0, "Member 'FEndDataTableStateChange::ForceChange' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableStateCondition
// 0x0090 (0x0098 - 0x0008)
struct FEndDataTableStateCondition final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         StartBracket_Array;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 TargetType_Array;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           TargetStringArgument_Array;                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ComparisonOperator_Array;                          // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 RightType_Array;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ComparisonStringValue_Array;                       // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 ComparisonValue_Array;                             // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         EndBracket_Array;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         LogicalOperator_Array;                             // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableStateCondition) == 0x000008, "Wrong alignment on FEndDataTableStateCondition");
static_assert(sizeof(FEndDataTableStateCondition) == 0x000098, "Wrong size on FEndDataTableStateCondition");
static_assert(offsetof(FEndDataTableStateCondition, StartBracket_Array) == 0x000008, "Member 'FEndDataTableStateCondition::StartBracket_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, TargetType_Array) == 0x000018, "Member 'FEndDataTableStateCondition::TargetType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, TargetStringArgument_Array) == 0x000028, "Member 'FEndDataTableStateCondition::TargetStringArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, ComparisonOperator_Array) == 0x000038, "Member 'FEndDataTableStateCondition::ComparisonOperator_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, RightType_Array) == 0x000048, "Member 'FEndDataTableStateCondition::RightType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, ComparisonStringValue_Array) == 0x000058, "Member 'FEndDataTableStateCondition::ComparisonStringValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, ComparisonValue_Array) == 0x000068, "Member 'FEndDataTableStateCondition::ComparisonValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, EndBracket_Array) == 0x000078, "Member 'FEndDataTableStateCondition::EndBracket_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, LogicalOperator_Array) == 0x000088, "Member 'FEndDataTableStateCondition::LogicalOperator_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableSteeringGroup
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableSteeringGroup final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 GroupToAvoid_Array;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 GroupToIgnoreOverlap_Array;                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableSteeringGroup) == 0x000008, "Wrong alignment on FEndDataTableSteeringGroup");
static_assert(sizeof(FEndDataTableSteeringGroup) == 0x000028, "Wrong size on FEndDataTableSteeringGroup");
static_assert(offsetof(FEndDataTableSteeringGroup, GroupToAvoid_Array) == 0x000008, "Member 'FEndDataTableSteeringGroup::GroupToAvoid_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSteeringGroup, GroupToIgnoreOverlap_Array) == 0x000018, "Member 'FEndDataTableSteeringGroup::GroupToIgnoreOverlap_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableStoryFlag
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableStoryFlag final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChapterID;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ExtraType00;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ExtraType01;                                       // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ExtraType02;                                       // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ExtraType03;                                       // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FuncType;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStoryFlag) == 0x000008, "Wrong alignment on FEndDataTableStoryFlag");
static_assert(sizeof(FEndDataTableStoryFlag) == 0x000020, "Wrong size on FEndDataTableStoryFlag");
static_assert(offsetof(FEndDataTableStoryFlag, UniqueIndex) == 0x000008, "Member 'FEndDataTableStoryFlag::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, ChapterID) == 0x00000C, "Member 'FEndDataTableStoryFlag::ChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, ExtraType00) == 0x000014, "Member 'FEndDataTableStoryFlag::ExtraType00' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, ExtraType01) == 0x000015, "Member 'FEndDataTableStoryFlag::ExtraType01' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, ExtraType02) == 0x000016, "Member 'FEndDataTableStoryFlag::ExtraType02' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, ExtraType03) == 0x000017, "Member 'FEndDataTableStoryFlag::ExtraType03' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, FuncType) == 0x000018, "Member 'FEndDataTableStoryFlag::FuncType' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableStoryJump
// 0x00E8 (0x00F0 - 0x0008)
struct FEndDataTableStoryJump final : public FEndDataTableRowBase
{
public:
	class FName                                   StoryResidentTableID;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LocationId;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChapterID;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ChapterTextID;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TitleTextID;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ChapterInfo;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BillboardImage;                                    // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ClearHardModeStoryFlag;                            // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SaveIndex;                                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AutoSaveAreaNameActionID;                          // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AutoSaveTextureStoryId;                            // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StoryFlagID_Array;                                 // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 StoryFlagValue_Array;                              // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ObjectEnemy_Array;                                 // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DeadOrAlive_Array;                                 // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActionOrActionGroup_Array;                         // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EnemyTerritoryLocationWorkID_Array;                // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int8>                                  EnemyTerritoryLocationWorkType_Array;              // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableStoryJump) == 0x000008, "Wrong alignment on FEndDataTableStoryJump");
static_assert(sizeof(FEndDataTableStoryJump) == 0x0000F0, "Wrong size on FEndDataTableStoryJump");
static_assert(offsetof(FEndDataTableStoryJump, StoryResidentTableID) == 0x000008, "Member 'FEndDataTableStoryJump::StoryResidentTableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, LocationId) == 0x000010, "Member 'FEndDataTableStoryJump::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, ChapterID) == 0x000018, "Member 'FEndDataTableStoryJump::ChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, ChapterTextID) == 0x000020, "Member 'FEndDataTableStoryJump::ChapterTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, TitleTextID) == 0x000030, "Member 'FEndDataTableStoryJump::TitleTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, ChapterInfo) == 0x000040, "Member 'FEndDataTableStoryJump::ChapterInfo' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, BillboardImage) == 0x000050, "Member 'FEndDataTableStoryJump::BillboardImage' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, ClearHardModeStoryFlag) == 0x000060, "Member 'FEndDataTableStoryJump::ClearHardModeStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, SaveIndex) == 0x000068, "Member 'FEndDataTableStoryJump::SaveIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, AutoSaveAreaNameActionID) == 0x00006C, "Member 'FEndDataTableStoryJump::AutoSaveAreaNameActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, AutoSaveTextureStoryId) == 0x000074, "Member 'FEndDataTableStoryJump::AutoSaveTextureStoryId' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, StoryFlagID_Array) == 0x000080, "Member 'FEndDataTableStoryJump::StoryFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, StoryFlagValue_Array) == 0x000090, "Member 'FEndDataTableStoryJump::StoryFlagValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, ObjectEnemy_Array) == 0x0000A0, "Member 'FEndDataTableStoryJump::ObjectEnemy_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, DeadOrAlive_Array) == 0x0000B0, "Member 'FEndDataTableStoryJump::DeadOrAlive_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, ActionOrActionGroup_Array) == 0x0000C0, "Member 'FEndDataTableStoryJump::ActionOrActionGroup_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, EnemyTerritoryLocationWorkID_Array) == 0x0000D0, "Member 'FEndDataTableStoryJump::EnemyTerritoryLocationWorkID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, EnemyTerritoryLocationWorkType_Array) == 0x0000E0, "Member 'FEndDataTableStoryJump::EnemyTerritoryLocationWorkType_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableStoryProgress
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableStoryProgress final : public FEndDataTableRowBase
{
public:
	int32                                         Progress;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         VoicePattern;                                      // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStoryProgress) == 0x000008, "Wrong alignment on FEndDataTableStoryProgress");
static_assert(sizeof(FEndDataTableStoryProgress) == 0x000010, "Wrong size on FEndDataTableStoryProgress");
static_assert(offsetof(FEndDataTableStoryProgress, Progress) == 0x000008, "Member 'FEndDataTableStoryProgress::Progress' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryProgress, VoicePattern) == 0x00000C, "Member 'FEndDataTableStoryProgress::VoicePattern' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableSubStory
// 0x0090 (0x0098 - 0x0008)
struct FEndDataTableSubStory final : public FEndDataTableRowBase
{
public:
	int32                                         StepIndex;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParentID;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChangeTargetID;                                    // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CompleteStatus;                                    // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProgressFlag;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ViewFlag;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ItemName;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StoryImageName;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StoryText;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           TargetName_Array;                                  // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   RewardID;                                          // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UniqueId;                                          // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         GroupId;                                           // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Condition;                                         // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SuccessCondition;                                  // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FailedCondition;                                   // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableSubStory) == 0x000008, "Wrong alignment on FEndDataTableSubStory");
static_assert(sizeof(FEndDataTableSubStory) == 0x000098, "Wrong size on FEndDataTableSubStory");
static_assert(offsetof(FEndDataTableSubStory, StepIndex) == 0x000008, "Member 'FEndDataTableSubStory::StepIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, ParentID) == 0x00000C, "Member 'FEndDataTableSubStory::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, ChangeTargetID) == 0x000014, "Member 'FEndDataTableSubStory::ChangeTargetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, CompleteStatus) == 0x00001C, "Member 'FEndDataTableSubStory::CompleteStatus' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, ProgressFlag) == 0x000020, "Member 'FEndDataTableSubStory::ProgressFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, ViewFlag) == 0x000028, "Member 'FEndDataTableSubStory::ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, ItemName) == 0x000030, "Member 'FEndDataTableSubStory::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, StoryImageName) == 0x000040, "Member 'FEndDataTableSubStory::StoryImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, StoryText) == 0x000050, "Member 'FEndDataTableSubStory::StoryText' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, TargetName_Array) == 0x000060, "Member 'FEndDataTableSubStory::TargetName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, RewardID) == 0x000070, "Member 'FEndDataTableSubStory::RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, UniqueId) == 0x000078, "Member 'FEndDataTableSubStory::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, GroupId) == 0x00007C, "Member 'FEndDataTableSubStory::GroupId' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, Condition) == 0x000080, "Member 'FEndDataTableSubStory::Condition' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, SuccessCondition) == 0x000088, "Member 'FEndDataTableSubStory::SuccessCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, FailedCondition) == 0x000090, "Member 'FEndDataTableSubStory::FailedCondition' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableSyncEndOneWeapon
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableSyncEndOneWeapon final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           Object_Array;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateAttribute_Array;                              // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateChangeOn_Array;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StateChangeOff_Array;                              // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableSyncEndOneWeapon) == 0x000008, "Wrong alignment on FEndDataTableSyncEndOneWeapon");
static_assert(sizeof(FEndDataTableSyncEndOneWeapon) == 0x000048, "Wrong size on FEndDataTableSyncEndOneWeapon");
static_assert(offsetof(FEndDataTableSyncEndOneWeapon, Object_Array) == 0x000008, "Member 'FEndDataTableSyncEndOneWeapon::Object_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSyncEndOneWeapon, StateAttribute_Array) == 0x000018, "Member 'FEndDataTableSyncEndOneWeapon::StateAttribute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSyncEndOneWeapon, StateChangeOn_Array) == 0x000028, "Member 'FEndDataTableSyncEndOneWeapon::StateChangeOn_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSyncEndOneWeapon, StateChangeOff_Array) == 0x000038, "Member 'FEndDataTableSyncEndOneWeapon::StateChangeOff_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTalkCanPlayCharacterStatus
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableTalkCanPlayCharacterStatus final : public FEndDataTableRowBase
{
public:
	int32                                         StatusChangeType;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IsPlayVoice;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IsPlayTalk;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         IsInterruption;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StatusName;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTalkCanPlayCharacterStatus) == 0x000008, "Wrong alignment on FEndDataTableTalkCanPlayCharacterStatus");
static_assert(sizeof(FEndDataTableTalkCanPlayCharacterStatus) == 0x000020, "Wrong size on FEndDataTableTalkCanPlayCharacterStatus");
static_assert(offsetof(FEndDataTableTalkCanPlayCharacterStatus, StatusChangeType) == 0x000008, "Member 'FEndDataTableTalkCanPlayCharacterStatus::StatusChangeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkCanPlayCharacterStatus, IsPlayVoice) == 0x00000C, "Member 'FEndDataTableTalkCanPlayCharacterStatus::IsPlayVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkCanPlayCharacterStatus, IsPlayTalk) == 0x000010, "Member 'FEndDataTableTalkCanPlayCharacterStatus::IsPlayTalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkCanPlayCharacterStatus, IsInterruption) == 0x000014, "Member 'FEndDataTableTalkCanPlayCharacterStatus::IsInterruption' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkCanPlayCharacterStatus, StatusName) == 0x000018, "Member 'FEndDataTableTalkCanPlayCharacterStatus::StatusName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTalkGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableTalkGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           TalkStateID_Array;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTalkGroup) == 0x000008, "Wrong alignment on FEndDataTableTalkGroup");
static_assert(sizeof(FEndDataTableTalkGroup) == 0x000018, "Wrong size on FEndDataTableTalkGroup");
static_assert(offsetof(FEndDataTableTalkGroup, TalkStateID_Array) == 0x000008, "Member 'FEndDataTableTalkGroup::TalkStateID_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTalkOnEndBattleVoiceSet
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableTalkOnEndBattleVoiceSet final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 VoiceChara_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           VoiceId_Array;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTalkOnEndBattleVoiceSet) == 0x000008, "Wrong alignment on FEndDataTableTalkOnEndBattleVoiceSet");
static_assert(sizeof(FEndDataTableTalkOnEndBattleVoiceSet) == 0x000028, "Wrong size on FEndDataTableTalkOnEndBattleVoiceSet");
static_assert(offsetof(FEndDataTableTalkOnEndBattleVoiceSet, VoiceChara_Array) == 0x000008, "Member 'FEndDataTableTalkOnEndBattleVoiceSet::VoiceChara_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkOnEndBattleVoiceSet, VoiceId_Array) == 0x000018, "Member 'FEndDataTableTalkOnEndBattleVoiceSet::VoiceId_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTestPlayModeSettingData
// 0x00C8 (0x00D0 - 0x0008)
struct FEndDataTableTestPlayModeSettingData final : public FEndDataTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TitleLocationID;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DebugPartyListID;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                 PartyMemberPos_X_Array;                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PartyMemberPos_Y_Array;                            // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PartyMemberPos_Z_Array;                            // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PartyMemberRot_X_Array;                            // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PartyMemberRot_Y_Array;                            // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PartyMemberRot_Z_Array;                            // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StoryFlag_Array;                                   // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           LocationID_Array;                                  // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActionID_Array;                                    // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ExchangeSrouceBattleCharaSpec_Array;               // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ExchangeDestinationBattleCharaSpec_Array;          // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTestPlayModeSettingData) == 0x000008, "Wrong alignment on FEndDataTableTestPlayModeSettingData");
static_assert(sizeof(FEndDataTableTestPlayModeSettingData) == 0x0000D0, "Wrong size on FEndDataTableTestPlayModeSettingData");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, Name) == 0x000008, "Member 'FEndDataTableTestPlayModeSettingData::Name' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, TitleLocationID) == 0x000010, "Member 'FEndDataTableTestPlayModeSettingData::TitleLocationID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, DebugPartyListID) == 0x000018, "Member 'FEndDataTableTestPlayModeSettingData::DebugPartyListID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberPos_X_Array) == 0x000020, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberPos_X_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberPos_Y_Array) == 0x000030, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberPos_Y_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberPos_Z_Array) == 0x000040, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberPos_Z_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberRot_X_Array) == 0x000050, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberRot_X_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberRot_Y_Array) == 0x000060, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberRot_Y_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberRot_Z_Array) == 0x000070, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberRot_Z_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, StoryFlag_Array) == 0x000080, "Member 'FEndDataTableTestPlayModeSettingData::StoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, LocationID_Array) == 0x000090, "Member 'FEndDataTableTestPlayModeSettingData::LocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, ActionID_Array) == 0x0000A0, "Member 'FEndDataTableTestPlayModeSettingData::ActionID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, ExchangeSrouceBattleCharaSpec_Array) == 0x0000B0, "Member 'FEndDataTableTestPlayModeSettingData::ExchangeSrouceBattleCharaSpec_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, ExchangeDestinationBattleCharaSpec_Array) == 0x0000C0, "Member 'FEndDataTableTestPlayModeSettingData::ExchangeDestinationBattleCharaSpec_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTextGroup
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableTextGroup final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 TextType_Effect_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         Text_Array;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTextGroup) == 0x000008, "Wrong alignment on FEndDataTableTextGroup");
static_assert(sizeof(FEndDataTableTextGroup) == 0x000028, "Wrong size on FEndDataTableTextGroup");
static_assert(offsetof(FEndDataTableTextGroup, TextType_Effect_Array) == 0x000008, "Member 'FEndDataTableTextGroup::TextType_Effect_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTextGroup, Text_Array) == 0x000018, "Member 'FEndDataTableTextGroup::Text_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableToroccoMiniGame
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableToroccoMiniGame final : public FEndDataTableRowBase
{
public:
	class FName                                   SequenceLevel;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SequencerActor;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           JumpFlag_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           JumpOnRailId_Array;                                // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         FloatParam00;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam01;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam02;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam03;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatParam04;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NameParam00;                                       // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NameParam01;                                       // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NameParam02;                                       // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NameParam03;                                       // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NameParam04;                                       // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableToroccoMiniGame) == 0x000008, "Wrong alignment on FEndDataTableToroccoMiniGame");
static_assert(sizeof(FEndDataTableToroccoMiniGame) == 0x000078, "Wrong size on FEndDataTableToroccoMiniGame");
static_assert(offsetof(FEndDataTableToroccoMiniGame, SequenceLevel) == 0x000008, "Member 'FEndDataTableToroccoMiniGame::SequenceLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, SequencerActor) == 0x000010, "Member 'FEndDataTableToroccoMiniGame::SequencerActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, JumpFlag_Array) == 0x000018, "Member 'FEndDataTableToroccoMiniGame::JumpFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, JumpOnRailId_Array) == 0x000028, "Member 'FEndDataTableToroccoMiniGame::JumpOnRailId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, FloatParam00) == 0x000038, "Member 'FEndDataTableToroccoMiniGame::FloatParam00' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, FloatParam01) == 0x00003C, "Member 'FEndDataTableToroccoMiniGame::FloatParam01' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, FloatParam02) == 0x000040, "Member 'FEndDataTableToroccoMiniGame::FloatParam02' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, FloatParam03) == 0x000044, "Member 'FEndDataTableToroccoMiniGame::FloatParam03' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, FloatParam04) == 0x000048, "Member 'FEndDataTableToroccoMiniGame::FloatParam04' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, NameParam00) == 0x00004C, "Member 'FEndDataTableToroccoMiniGame::NameParam00' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, NameParam01) == 0x000054, "Member 'FEndDataTableToroccoMiniGame::NameParam01' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, NameParam02) == 0x00005C, "Member 'FEndDataTableToroccoMiniGame::NameParam02' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, NameParam03) == 0x000064, "Member 'FEndDataTableToroccoMiniGame::NameParam03' has a wrong offset!");
static_assert(offsetof(FEndDataTableToroccoMiniGame, NameParam04) == 0x00006C, "Member 'FEndDataTableToroccoMiniGame::NameParam04' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTreasureResource
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableTreasureResource final : public FEndDataTableRowBase
{
public:
	class FName                                   EffectResourceName;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EffectAttachSocketName;                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTreasureResource) == 0x000008, "Wrong alignment on FEndDataTableTreasureResource");
static_assert(sizeof(FEndDataTableTreasureResource) == 0x000018, "Wrong size on FEndDataTableTreasureResource");
static_assert(offsetof(FEndDataTableTreasureResource, EffectResourceName) == 0x000008, "Member 'FEndDataTableTreasureResource::EffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasureResource, EffectAttachSocketName) == 0x000010, "Member 'FEndDataTableTreasureResource::EffectAttachSocketName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTreasureSpec
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableTreasureSpec final : public FEndDataTableRowBase
{
public:
	class FString                                 aa;                                                // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CharaSpecID_Array;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaID;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ResponseAreaPlayerID;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsDisappearInObtain;                               // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableTreasureSpec) == 0x000008, "Wrong alignment on FEndDataTableTreasureSpec");
static_assert(sizeof(FEndDataTableTreasureSpec) == 0x000040, "Wrong size on FEndDataTableTreasureSpec");
static_assert(offsetof(FEndDataTableTreasureSpec, aa) == 0x000008, "Member 'FEndDataTableTreasureSpec::aa' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasureSpec, CharaSpecID_Array) == 0x000018, "Member 'FEndDataTableTreasureSpec::CharaSpecID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasureSpec, ResponseAreaID) == 0x000028, "Member 'FEndDataTableTreasureSpec::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasureSpec, ResponseAreaPlayerID) == 0x000030, "Member 'FEndDataTableTreasureSpec::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasureSpec, IsDisappearInObtain) == 0x000038, "Member 'FEndDataTableTreasureSpec::IsDisappearInObtain' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTriggerEffect
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableTriggerEffect final : public FEndDataTableRowBase
{
public:
	uint8                                         TriggerType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EffectMode;                                        // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Parameter_Array;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTriggerEffect) == 0x000008, "Wrong alignment on FEndDataTableTriggerEffect");
static_assert(sizeof(FEndDataTableTriggerEffect) == 0x000020, "Wrong size on FEndDataTableTriggerEffect");
static_assert(offsetof(FEndDataTableTriggerEffect, TriggerType) == 0x000008, "Member 'FEndDataTableTriggerEffect::TriggerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTriggerEffect, EffectMode) == 0x000009, "Member 'FEndDataTableTriggerEffect::EffectMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableTriggerEffect, Parameter_Array) == 0x000010, "Member 'FEndDataTableTriggerEffect::Parameter_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableTutorial
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableTutorial final : public FEndDataTableRowBase
{
public:
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WidgetTextId;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GuidLineId;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParentID;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SortIndex;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReadFlag;                                          // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           FlagTrueOnViewWidget_Array;                        // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableTutorial) == 0x000008, "Wrong alignment on FEndDataTableTutorial");
static_assert(sizeof(FEndDataTableTutorial) == 0x000058, "Wrong size on FEndDataTableTutorial");
static_assert(offsetof(FEndDataTableTutorial, WidgetName) == 0x000008, "Member 'FEndDataTableTutorial::WidgetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, WidgetTextId) == 0x000010, "Member 'FEndDataTableTutorial::WidgetTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, GuidLineId) == 0x000018, "Member 'FEndDataTableTutorial::GuidLineId' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, ParentID) == 0x000020, "Member 'FEndDataTableTutorial::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, SortIndex) == 0x000028, "Member 'FEndDataTableTutorial::SortIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, ReadFlag) == 0x00002C, "Member 'FEndDataTableTutorial::ReadFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, ItemName) == 0x000038, "Member 'FEndDataTableTutorial::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, FlagTrueOnViewWidget_Array) == 0x000048, "Member 'FEndDataTableTutorial::FlagTrueOnViewWidget_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableUniqueAction
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableUniqueAction final : public FEndDataTableRowBase
{
public:
	int32                                         RepeatCount;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Time;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Next;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CollisionBoxName;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 StartTime_Array;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 PlayTime_Array;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         NodeNameList_Array;                                // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         PropertyNameList_Array;                            // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableUniqueAction) == 0x000008, "Wrong alignment on FEndDataTableUniqueAction");
static_assert(sizeof(FEndDataTableUniqueAction) == 0x000070, "Wrong size on FEndDataTableUniqueAction");
static_assert(offsetof(FEndDataTableUniqueAction, RepeatCount) == 0x000008, "Member 'FEndDataTableUniqueAction::RepeatCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, Time) == 0x00000C, "Member 'FEndDataTableUniqueAction::Time' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, Next) == 0x000010, "Member 'FEndDataTableUniqueAction::Next' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, CollisionBoxName) == 0x000020, "Member 'FEndDataTableUniqueAction::CollisionBoxName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, StartTime_Array) == 0x000030, "Member 'FEndDataTableUniqueAction::StartTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, PlayTime_Array) == 0x000040, "Member 'FEndDataTableUniqueAction::PlayTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, NodeNameList_Array) == 0x000050, "Member 'FEndDataTableUniqueAction::NodeNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, PropertyNameList_Array) == 0x000060, "Member 'FEndDataTableUniqueAction::PropertyNameList_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableUniqueActionActorAttack
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableUniqueActionActorAttack final : public FEndDataTableRowBase
{
public:
	int32                                         Time;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StartTime;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PlayTime;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ShootRange;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartFlagTriggerName;                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ShootNotifyTriggerName;                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LockXAxis;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LockYAxis;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SocketName;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetActorName;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PropertyName;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Next;                                              // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FailedNext;                                        // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableUniqueActionActorAttack) == 0x000008, "Wrong alignment on FEndDataTableUniqueActionActorAttack");
static_assert(sizeof(FEndDataTableUniqueActionActorAttack) == 0x000060, "Wrong size on FEndDataTableUniqueActionActorAttack");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, Time) == 0x000008, "Member 'FEndDataTableUniqueActionActorAttack::Time' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, StartTime) == 0x00000C, "Member 'FEndDataTableUniqueActionActorAttack::StartTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, PlayTime) == 0x000010, "Member 'FEndDataTableUniqueActionActorAttack::PlayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, ShootRange) == 0x000014, "Member 'FEndDataTableUniqueActionActorAttack::ShootRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, StartFlagTriggerName) == 0x000018, "Member 'FEndDataTableUniqueActionActorAttack::StartFlagTriggerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, ShootNotifyTriggerName) == 0x000020, "Member 'FEndDataTableUniqueActionActorAttack::ShootNotifyTriggerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, LockXAxis) == 0x000028, "Member 'FEndDataTableUniqueActionActorAttack::LockXAxis' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, LockYAxis) == 0x00002C, "Member 'FEndDataTableUniqueActionActorAttack::LockYAxis' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, SocketName) == 0x000030, "Member 'FEndDataTableUniqueActionActorAttack::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, TargetActorName) == 0x000038, "Member 'FEndDataTableUniqueActionActorAttack::TargetActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, PropertyName) == 0x000040, "Member 'FEndDataTableUniqueActionActorAttack::PropertyName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, Next) == 0x000050, "Member 'FEndDataTableUniqueActionActorAttack::Next' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, FailedNext) == 0x000058, "Member 'FEndDataTableUniqueActionActorAttack::FailedNext' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableUniqueActionRCSMove
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableUniqueActionRCSMove final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           StateChangeID_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 Rate_Array;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableUniqueActionRCSMove) == 0x000008, "Wrong alignment on FEndDataTableUniqueActionRCSMove");
static_assert(sizeof(FEndDataTableUniqueActionRCSMove) == 0x000028, "Wrong size on FEndDataTableUniqueActionRCSMove");
static_assert(offsetof(FEndDataTableUniqueActionRCSMove, StateChangeID_Array) == 0x000008, "Member 'FEndDataTableUniqueActionRCSMove::StateChangeID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionRCSMove, Rate_Array) == 0x000018, "Member 'FEndDataTableUniqueActionRCSMove::Rate_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableUniqueActionSearchLight
// 0x00B8 (0x00C0 - 0x0008)
struct FEndDataTableUniqueActionSearchLight final : public FEndDataTableRowBase
{
public:
	float                                         MoveStartAngle;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveStartAngleByRadian;                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OuterConeAngle;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OuterConeAngleByRadian;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AttenuationRadius;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VerticalLimitAngle;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HorizontalLimitAngle;                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveThreshold;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MoveCurve;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AttachActor;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 AttachSocket;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 AttachSpotlightActor;                              // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         StateObject_Array;                                 // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         StateChange_Array;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ShowTarget_Array;                                  // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         StartAngle;                                        // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartAngleByRadian;                                // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PitchOverrideObject;                               // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           PitchOverwriteState_Array;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 PitchOverwriteAngle_Array;                         // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableUniqueActionSearchLight) == 0x000008, "Wrong alignment on FEndDataTableUniqueActionSearchLight");
static_assert(sizeof(FEndDataTableUniqueActionSearchLight) == 0x0000C0, "Wrong size on FEndDataTableUniqueActionSearchLight");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, MoveStartAngle) == 0x000008, "Member 'FEndDataTableUniqueActionSearchLight::MoveStartAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, MoveStartAngleByRadian) == 0x00000C, "Member 'FEndDataTableUniqueActionSearchLight::MoveStartAngleByRadian' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, OuterConeAngle) == 0x000010, "Member 'FEndDataTableUniqueActionSearchLight::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, OuterConeAngleByRadian) == 0x000014, "Member 'FEndDataTableUniqueActionSearchLight::OuterConeAngleByRadian' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, AttenuationRadius) == 0x000018, "Member 'FEndDataTableUniqueActionSearchLight::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, VerticalLimitAngle) == 0x00001C, "Member 'FEndDataTableUniqueActionSearchLight::VerticalLimitAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, HorizontalLimitAngle) == 0x000020, "Member 'FEndDataTableUniqueActionSearchLight::HorizontalLimitAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, MoveThreshold) == 0x000024, "Member 'FEndDataTableUniqueActionSearchLight::MoveThreshold' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, MoveCurve) == 0x000028, "Member 'FEndDataTableUniqueActionSearchLight::MoveCurve' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, AttachActor) == 0x000030, "Member 'FEndDataTableUniqueActionSearchLight::AttachActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, AttachSocket) == 0x000040, "Member 'FEndDataTableUniqueActionSearchLight::AttachSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, AttachSpotlightActor) == 0x000050, "Member 'FEndDataTableUniqueActionSearchLight::AttachSpotlightActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, StateObject_Array) == 0x000060, "Member 'FEndDataTableUniqueActionSearchLight::StateObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, StateChange_Array) == 0x000070, "Member 'FEndDataTableUniqueActionSearchLight::StateChange_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, ShowTarget_Array) == 0x000080, "Member 'FEndDataTableUniqueActionSearchLight::ShowTarget_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, StartAngle) == 0x000090, "Member 'FEndDataTableUniqueActionSearchLight::StartAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, StartAngleByRadian) == 0x000094, "Member 'FEndDataTableUniqueActionSearchLight::StartAngleByRadian' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, PitchOverrideObject) == 0x000098, "Member 'FEndDataTableUniqueActionSearchLight::PitchOverrideObject' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, PitchOverwriteState_Array) == 0x0000A0, "Member 'FEndDataTableUniqueActionSearchLight::PitchOverwriteState_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, PitchOverwriteAngle_Array) == 0x0000B0, "Member 'FEndDataTableUniqueActionSearchLight::PitchOverwriteAngle_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableVehicleTargetIconInterruptGetOff
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableVehicleTargetIconInterruptGetOff final : public FEndDataTableRowBase
{
public:
	class FName                                   ObjectName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ActorName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableVehicleTargetIconInterruptGetOff) == 0x000008, "Wrong alignment on FEndDataTableVehicleTargetIconInterruptGetOff");
static_assert(sizeof(FEndDataTableVehicleTargetIconInterruptGetOff) == 0x000018, "Wrong size on FEndDataTableVehicleTargetIconInterruptGetOff");
static_assert(offsetof(FEndDataTableVehicleTargetIconInterruptGetOff, ObjectName) == 0x000008, "Member 'FEndDataTableVehicleTargetIconInterruptGetOff::ObjectName' has a wrong offset!");
static_assert(offsetof(FEndDataTableVehicleTargetIconInterruptGetOff, ActorName) == 0x000010, "Member 'FEndDataTableVehicleTargetIconInterruptGetOff::ActorName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableVRSafeList
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableVRSafeList final : public FEndDataTableRowBase
{
public:
	class FName                                   SafeList;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableVRSafeList) == 0x000008, "Wrong alignment on FEndDataTableVRSafeList");
static_assert(sizeof(FEndDataTableVRSafeList) == 0x000010, "Wrong size on FEndDataTableVRSafeList");
static_assert(offsetof(FEndDataTableVRSafeList, SafeList) == 0x000008, "Member 'FEndDataTableVRSafeList::SafeList' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableWanderingParamList
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableWanderingParamList final : public FEndDataTableRowBase
{
public:
	float                                         IdleWaitMin;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         IdleWaitMax;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MoveType;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsStateOperation;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaitRate;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MoveRate;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           IdleVariationList_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 WeightList_Array;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         RangeRadius;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StayTimeMIn;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StayTimeRand;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableWanderingParamList) == 0x000008, "Wrong alignment on FEndDataTableWanderingParamList");
static_assert(sizeof(FEndDataTableWanderingParamList) == 0x000050, "Wrong size on FEndDataTableWanderingParamList");
static_assert(offsetof(FEndDataTableWanderingParamList, IdleWaitMin) == 0x000008, "Member 'FEndDataTableWanderingParamList::IdleWaitMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, IdleWaitMax) == 0x00000C, "Member 'FEndDataTableWanderingParamList::IdleWaitMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, MoveType) == 0x000010, "Member 'FEndDataTableWanderingParamList::MoveType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, IsStateOperation) == 0x000014, "Member 'FEndDataTableWanderingParamList::IsStateOperation' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, WaitRate) == 0x000018, "Member 'FEndDataTableWanderingParamList::WaitRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, MoveRate) == 0x00001C, "Member 'FEndDataTableWanderingParamList::MoveRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, IdleVariationList_Array) == 0x000020, "Member 'FEndDataTableWanderingParamList::IdleVariationList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, WeightList_Array) == 0x000030, "Member 'FEndDataTableWanderingParamList::WeightList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, RangeRadius) == 0x000040, "Member 'FEndDataTableWanderingParamList::RangeRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, StayTimeMIn) == 0x000044, "Member 'FEndDataTableWanderingParamList::StayTimeMIn' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, StayTimeRand) == 0x000048, "Member 'FEndDataTableWanderingParamList::StayTimeRand' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableWeaponUpgrade
// 0x00D8 (0x00E0 - 0x0008)
struct FEndDataTableWeaponUpgrade final : public FEndDataTableRowBase
{
public:
	int32                                         ArrayIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UniqueId;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeaponID;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OpenTreeLevel;                                     // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NodeType;                                          // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CoreIconType;                                      // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RootIndex;                                         // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParentNodeID;                                      // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CheckNodeID;                                       // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UseSP;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SkillConditionType_Array;                          // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 SkillConditionValue_Array;                         // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 SkillEffectType_Array;                             // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 SkillEffectValue_Array;                            // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SkillEffectName_Array;                             // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         SkillEffectText_Array;                             // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SkillEffectTextInfo_Array;                         // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   IconName;                                          // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NodeName;                                          // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NodeDetail;                                        // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MoviePath;                                         // 0x00C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PlanetEffectType;                                  // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         OpenPlanetEffectType;                              // 0x00D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PriorityAuto1;                                     // 0x00DA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PriorityAuto2;                                     // 0x00DB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PriorityAuto3;                                     // 0x00DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableWeaponUpgrade) == 0x000008, "Wrong alignment on FEndDataTableWeaponUpgrade");
static_assert(sizeof(FEndDataTableWeaponUpgrade) == 0x0000E0, "Wrong size on FEndDataTableWeaponUpgrade");
static_assert(offsetof(FEndDataTableWeaponUpgrade, ArrayIndex) == 0x000008, "Member 'FEndDataTableWeaponUpgrade::ArrayIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, UniqueId) == 0x00000C, "Member 'FEndDataTableWeaponUpgrade::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, WeaponID) == 0x000010, "Member 'FEndDataTableWeaponUpgrade::WeaponID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, OpenTreeLevel) == 0x000018, "Member 'FEndDataTableWeaponUpgrade::OpenTreeLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, NodeType) == 0x000019, "Member 'FEndDataTableWeaponUpgrade::NodeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, CoreIconType) == 0x00001A, "Member 'FEndDataTableWeaponUpgrade::CoreIconType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, RootIndex) == 0x00001B, "Member 'FEndDataTableWeaponUpgrade::RootIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, ParentNodeID) == 0x00001C, "Member 'FEndDataTableWeaponUpgrade::ParentNodeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, CheckNodeID) == 0x000024, "Member 'FEndDataTableWeaponUpgrade::CheckNodeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, UseSP) == 0x00002C, "Member 'FEndDataTableWeaponUpgrade::UseSP' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, SkillConditionType_Array) == 0x000030, "Member 'FEndDataTableWeaponUpgrade::SkillConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, SkillConditionValue_Array) == 0x000040, "Member 'FEndDataTableWeaponUpgrade::SkillConditionValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, SkillEffectType_Array) == 0x000050, "Member 'FEndDataTableWeaponUpgrade::SkillEffectType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, SkillEffectValue_Array) == 0x000060, "Member 'FEndDataTableWeaponUpgrade::SkillEffectValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, SkillEffectName_Array) == 0x000070, "Member 'FEndDataTableWeaponUpgrade::SkillEffectName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, SkillEffectText_Array) == 0x000080, "Member 'FEndDataTableWeaponUpgrade::SkillEffectText_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, SkillEffectTextInfo_Array) == 0x000090, "Member 'FEndDataTableWeaponUpgrade::SkillEffectTextInfo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, IconName) == 0x0000A0, "Member 'FEndDataTableWeaponUpgrade::IconName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, NodeName) == 0x0000A8, "Member 'FEndDataTableWeaponUpgrade::NodeName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, NodeDetail) == 0x0000B8, "Member 'FEndDataTableWeaponUpgrade::NodeDetail' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, MoviePath) == 0x0000C8, "Member 'FEndDataTableWeaponUpgrade::MoviePath' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, PlanetEffectType) == 0x0000D8, "Member 'FEndDataTableWeaponUpgrade::PlanetEffectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, OpenPlanetEffectType) == 0x0000D9, "Member 'FEndDataTableWeaponUpgrade::OpenPlanetEffectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, PriorityAuto1) == 0x0000DA, "Member 'FEndDataTableWeaponUpgrade::PriorityAuto1' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, PriorityAuto2) == 0x0000DB, "Member 'FEndDataTableWeaponUpgrade::PriorityAuto2' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, PriorityAuto3) == 0x0000DC, "Member 'FEndDataTableWeaponUpgrade::PriorityAuto3' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableWildAnimal
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableWildAnimal final : public FEndDataTableRowBase
{
public:
	class FName                                   CharaSpecID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ParkourSetting;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EscapeStateTrigger;                                // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableWildAnimal) == 0x000008, "Wrong alignment on FEndDataTableWildAnimal");
static_assert(sizeof(FEndDataTableWildAnimal) == 0x000020, "Wrong size on FEndDataTableWildAnimal");
static_assert(offsetof(FEndDataTableWildAnimal, CharaSpecID) == 0x000008, "Member 'FEndDataTableWildAnimal::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimal, ParkourSetting) == 0x000010, "Member 'FEndDataTableWildAnimal::ParkourSetting' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimal, EscapeStateTrigger) == 0x000014, "Member 'FEndDataTableWildAnimal::EscapeStateTrigger' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableWildAnimalBehavior
// 0x0198 (0x01A0 - 0x0008)
struct FEndDataTableWildAnimalBehavior final : public FEndDataTableRowBase
{
public:
	class FName                                   PermanentAnimationSetName;                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChangeFromIdleMotionName;                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChangeToIdleMotionName;                            // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IdleSelectWeight;                                  // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IdleContinueCountMax;                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         IdleTime;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AdditionalIdleTime;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           IdleMotionName_Array;                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 IdleMotionWeight_Array;                            // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         WanderingSelectWeight;                             // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WanderingContinueCountMax;                         // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WanderingTime;                                     // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AdditionalWanderingTime;                           // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         WanderingType;                                     // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WanderingRadius;                                   // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           WanderingPointName_Array;                          // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           WanderingSplineName_Array;                         // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         SplinePositionDistanceMin;                         // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SplinePositionDistanceMax;                         // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SpecialSelectWeight_Array;                         // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 SpecialContinueCountMax_Array;                     // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 SpecialType_Array;                                 // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 SpecialParameterFloat_Array;                       // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SpecialParameterString_Array;                      // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         BaseMoveSpeedScale;                                // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationRateScaleMin;                              // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationRateScaleMax;                              // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VisibleAngle;                                      // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SenseNPC;                                          // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpacingDistance;                                   // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FixedHeightOffset;                                 // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RandomHeightOffset;                                // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BeginCautionEnterRadius;                           // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndCautionExitRadius;                              // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         AvoidCount;                                        // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AvoidRadius;                                       // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CautionBeginMotionName;                            // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CautionLoopMotionName;                             // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CautionEndMotionName;                              // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BeginEscapeEnterRadius;                            // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EscapeTimeOut;                                     // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EscapeHideOnOutCameraGraceTime;                    // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EscapeType;                                        // 0x0134(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EscapePointName_Array;                             // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EscapeSplineName_Array;                            // 0x0148(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         SpacingDistanceOnEscape;                           // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TurnOnEscape;                                      // 0x015C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnOnEscapePlayRateMin;                           // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TurnOnEscapePlayRateMax;                           // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NoCollisionOnEscape;                               // 0x0168(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FlyOnEscape;                                       // 0x0169(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16A[0x2];                                      // 0x016A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EscapeAnimationSetName;                            // 0x016C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   BeginEscapeMotionName;                             // 0x0174(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BeginEscapeMotionPlayRateMin;                      // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BeginEscapeMotionPlayRateMax;                      // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LandingOnEscape;                                   // 0x0184(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EscapeDelayTimeMin;                                // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EscapeDelayTimeMax;                                // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HideMotionName;                                    // 0x0190(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HideDelayTimeInMotion;                             // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableWildAnimalBehavior) == 0x000008, "Wrong alignment on FEndDataTableWildAnimalBehavior");
static_assert(sizeof(FEndDataTableWildAnimalBehavior) == 0x0001A0, "Wrong size on FEndDataTableWildAnimalBehavior");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, PermanentAnimationSetName) == 0x000008, "Member 'FEndDataTableWildAnimalBehavior::PermanentAnimationSetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, ChangeFromIdleMotionName) == 0x000010, "Member 'FEndDataTableWildAnimalBehavior::ChangeFromIdleMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, ChangeToIdleMotionName) == 0x000018, "Member 'FEndDataTableWildAnimalBehavior::ChangeToIdleMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, IdleSelectWeight) == 0x000020, "Member 'FEndDataTableWildAnimalBehavior::IdleSelectWeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, IdleContinueCountMax) == 0x000024, "Member 'FEndDataTableWildAnimalBehavior::IdleContinueCountMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, IdleTime) == 0x000028, "Member 'FEndDataTableWildAnimalBehavior::IdleTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, AdditionalIdleTime) == 0x00002C, "Member 'FEndDataTableWildAnimalBehavior::AdditionalIdleTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, IdleMotionName_Array) == 0x000030, "Member 'FEndDataTableWildAnimalBehavior::IdleMotionName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, IdleMotionWeight_Array) == 0x000040, "Member 'FEndDataTableWildAnimalBehavior::IdleMotionWeight_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, WanderingSelectWeight) == 0x000050, "Member 'FEndDataTableWildAnimalBehavior::WanderingSelectWeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, WanderingContinueCountMax) == 0x000054, "Member 'FEndDataTableWildAnimalBehavior::WanderingContinueCountMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, WanderingTime) == 0x000058, "Member 'FEndDataTableWildAnimalBehavior::WanderingTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, AdditionalWanderingTime) == 0x00005C, "Member 'FEndDataTableWildAnimalBehavior::AdditionalWanderingTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, WanderingType) == 0x000060, "Member 'FEndDataTableWildAnimalBehavior::WanderingType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, WanderingRadius) == 0x000064, "Member 'FEndDataTableWildAnimalBehavior::WanderingRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, WanderingPointName_Array) == 0x000068, "Member 'FEndDataTableWildAnimalBehavior::WanderingPointName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, WanderingSplineName_Array) == 0x000078, "Member 'FEndDataTableWildAnimalBehavior::WanderingSplineName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, SplinePositionDistanceMin) == 0x000088, "Member 'FEndDataTableWildAnimalBehavior::SplinePositionDistanceMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, SplinePositionDistanceMax) == 0x00008C, "Member 'FEndDataTableWildAnimalBehavior::SplinePositionDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, SpecialSelectWeight_Array) == 0x000090, "Member 'FEndDataTableWildAnimalBehavior::SpecialSelectWeight_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, SpecialContinueCountMax_Array) == 0x0000A0, "Member 'FEndDataTableWildAnimalBehavior::SpecialContinueCountMax_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, SpecialType_Array) == 0x0000B0, "Member 'FEndDataTableWildAnimalBehavior::SpecialType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, SpecialParameterFloat_Array) == 0x0000C0, "Member 'FEndDataTableWildAnimalBehavior::SpecialParameterFloat_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, SpecialParameterString_Array) == 0x0000D0, "Member 'FEndDataTableWildAnimalBehavior::SpecialParameterString_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, BaseMoveSpeedScale) == 0x0000E0, "Member 'FEndDataTableWildAnimalBehavior::BaseMoveSpeedScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, RotationRateScaleMin) == 0x0000E4, "Member 'FEndDataTableWildAnimalBehavior::RotationRateScaleMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, RotationRateScaleMax) == 0x0000E8, "Member 'FEndDataTableWildAnimalBehavior::RotationRateScaleMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, VisibleAngle) == 0x0000EC, "Member 'FEndDataTableWildAnimalBehavior::VisibleAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, SenseNPC) == 0x0000F0, "Member 'FEndDataTableWildAnimalBehavior::SenseNPC' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, SpacingDistance) == 0x0000F4, "Member 'FEndDataTableWildAnimalBehavior::SpacingDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, FixedHeightOffset) == 0x0000F8, "Member 'FEndDataTableWildAnimalBehavior::FixedHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, RandomHeightOffset) == 0x0000FC, "Member 'FEndDataTableWildAnimalBehavior::RandomHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, BeginCautionEnterRadius) == 0x000100, "Member 'FEndDataTableWildAnimalBehavior::BeginCautionEnterRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, EndCautionExitRadius) == 0x000104, "Member 'FEndDataTableWildAnimalBehavior::EndCautionExitRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, AvoidCount) == 0x000108, "Member 'FEndDataTableWildAnimalBehavior::AvoidCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, AvoidRadius) == 0x00010C, "Member 'FEndDataTableWildAnimalBehavior::AvoidRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, CautionBeginMotionName) == 0x000110, "Member 'FEndDataTableWildAnimalBehavior::CautionBeginMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, CautionLoopMotionName) == 0x000118, "Member 'FEndDataTableWildAnimalBehavior::CautionLoopMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, CautionEndMotionName) == 0x000120, "Member 'FEndDataTableWildAnimalBehavior::CautionEndMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, BeginEscapeEnterRadius) == 0x000128, "Member 'FEndDataTableWildAnimalBehavior::BeginEscapeEnterRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, EscapeTimeOut) == 0x00012C, "Member 'FEndDataTableWildAnimalBehavior::EscapeTimeOut' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, EscapeHideOnOutCameraGraceTime) == 0x000130, "Member 'FEndDataTableWildAnimalBehavior::EscapeHideOnOutCameraGraceTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, EscapeType) == 0x000134, "Member 'FEndDataTableWildAnimalBehavior::EscapeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, EscapePointName_Array) == 0x000138, "Member 'FEndDataTableWildAnimalBehavior::EscapePointName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, EscapeSplineName_Array) == 0x000148, "Member 'FEndDataTableWildAnimalBehavior::EscapeSplineName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, SpacingDistanceOnEscape) == 0x000158, "Member 'FEndDataTableWildAnimalBehavior::SpacingDistanceOnEscape' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, TurnOnEscape) == 0x00015C, "Member 'FEndDataTableWildAnimalBehavior::TurnOnEscape' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, TurnOnEscapePlayRateMin) == 0x000160, "Member 'FEndDataTableWildAnimalBehavior::TurnOnEscapePlayRateMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, TurnOnEscapePlayRateMax) == 0x000164, "Member 'FEndDataTableWildAnimalBehavior::TurnOnEscapePlayRateMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, NoCollisionOnEscape) == 0x000168, "Member 'FEndDataTableWildAnimalBehavior::NoCollisionOnEscape' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, FlyOnEscape) == 0x000169, "Member 'FEndDataTableWildAnimalBehavior::FlyOnEscape' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, EscapeAnimationSetName) == 0x00016C, "Member 'FEndDataTableWildAnimalBehavior::EscapeAnimationSetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, BeginEscapeMotionName) == 0x000174, "Member 'FEndDataTableWildAnimalBehavior::BeginEscapeMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, BeginEscapeMotionPlayRateMin) == 0x00017C, "Member 'FEndDataTableWildAnimalBehavior::BeginEscapeMotionPlayRateMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, BeginEscapeMotionPlayRateMax) == 0x000180, "Member 'FEndDataTableWildAnimalBehavior::BeginEscapeMotionPlayRateMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, LandingOnEscape) == 0x000184, "Member 'FEndDataTableWildAnimalBehavior::LandingOnEscape' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, EscapeDelayTimeMin) == 0x000188, "Member 'FEndDataTableWildAnimalBehavior::EscapeDelayTimeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, EscapeDelayTimeMax) == 0x00018C, "Member 'FEndDataTableWildAnimalBehavior::EscapeDelayTimeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, HideMotionName) == 0x000190, "Member 'FEndDataTableWildAnimalBehavior::HideMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalBehavior, HideDelayTimeInMotion) == 0x000198, "Member 'FEndDataTableWildAnimalBehavior::HideDelayTimeInMotion' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableWildAnimalCondition
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableWildAnimalCondition final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 Condition_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           Name_Array;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 Float_Array;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableWildAnimalCondition) == 0x000008, "Wrong alignment on FEndDataTableWildAnimalCondition");
static_assert(sizeof(FEndDataTableWildAnimalCondition) == 0x000038, "Wrong size on FEndDataTableWildAnimalCondition");
static_assert(offsetof(FEndDataTableWildAnimalCondition, Condition_Array) == 0x000008, "Member 'FEndDataTableWildAnimalCondition::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalCondition, Name_Array) == 0x000018, "Member 'FEndDataTableWildAnimalCondition::Name_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalCondition, Float_Array) == 0x000028, "Member 'FEndDataTableWildAnimalCondition::Float_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableWildAnimalGroup
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableWildAnimalGroup final : public FEndDataTableRowBase
{
public:
	class FName                                   BasePointName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ActivateConditionID_Array;                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           DeactivateConditionID_Array;                       // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   WildAnimalID;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SpawnNumber;                                       // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SpawnPriority;                                     // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceSpawnOnTinyBronco;                            // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         TickPriority;                                      // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         SpawnPositionType;                                 // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FindSpawnPointRange;                               // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FindSpawnPointHeight;                              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsNoCollision;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomSpawnRadius;                                 // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsRandomRotation;                                  // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SpawnPointName_Array;                              // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   WildAnimalBehaviorID;                              // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnableBoxName;                                     // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableWildAnimalGroup) == 0x000008, "Wrong alignment on FEndDataTableWildAnimalGroup");
static_assert(sizeof(FEndDataTableWildAnimalGroup) == 0x000078, "Wrong size on FEndDataTableWildAnimalGroup");
static_assert(offsetof(FEndDataTableWildAnimalGroup, BasePointName) == 0x000008, "Member 'FEndDataTableWildAnimalGroup::BasePointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, ActivateConditionID_Array) == 0x000010, "Member 'FEndDataTableWildAnimalGroup::ActivateConditionID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, DeactivateConditionID_Array) == 0x000020, "Member 'FEndDataTableWildAnimalGroup::DeactivateConditionID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, WildAnimalID) == 0x000030, "Member 'FEndDataTableWildAnimalGroup::WildAnimalID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, SpawnNumber) == 0x000038, "Member 'FEndDataTableWildAnimalGroup::SpawnNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, SpawnPriority) == 0x000039, "Member 'FEndDataTableWildAnimalGroup::SpawnPriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, ForceSpawnOnTinyBronco) == 0x00003A, "Member 'FEndDataTableWildAnimalGroup::ForceSpawnOnTinyBronco' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, TickPriority) == 0x00003B, "Member 'FEndDataTableWildAnimalGroup::TickPriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, SpawnPositionType) == 0x00003C, "Member 'FEndDataTableWildAnimalGroup::SpawnPositionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, FindSpawnPointRange) == 0x000040, "Member 'FEndDataTableWildAnimalGroup::FindSpawnPointRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, FindSpawnPointHeight) == 0x000044, "Member 'FEndDataTableWildAnimalGroup::FindSpawnPointHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, IsNoCollision) == 0x000048, "Member 'FEndDataTableWildAnimalGroup::IsNoCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, RandomSpawnRadius) == 0x00004C, "Member 'FEndDataTableWildAnimalGroup::RandomSpawnRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, IsRandomRotation) == 0x000050, "Member 'FEndDataTableWildAnimalGroup::IsRandomRotation' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, SpawnPointName_Array) == 0x000058, "Member 'FEndDataTableWildAnimalGroup::SpawnPointName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, WildAnimalBehaviorID) == 0x000068, "Member 'FEndDataTableWildAnimalGroup::WildAnimalBehaviorID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWildAnimalGroup, EnableBoxName) == 0x000070, "Member 'FEndDataTableWildAnimalGroup::EnableBoxName' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableWorldActorInfo
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableWorldActorInfo final : public FEndDataTableRowBase
{
public:
	float                                         BaseExtent;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PopInRadius;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ForceSpawn;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableWorldActorInfo) == 0x000008, "Wrong alignment on FEndDataTableWorldActorInfo");
static_assert(sizeof(FEndDataTableWorldActorInfo) == 0x000018, "Wrong size on FEndDataTableWorldActorInfo");
static_assert(offsetof(FEndDataTableWorldActorInfo, BaseExtent) == 0x000008, "Member 'FEndDataTableWorldActorInfo::BaseExtent' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldActorInfo, PopInRadius) == 0x00000C, "Member 'FEndDataTableWorldActorInfo::PopInRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldActorInfo, ForceSpawn) == 0x000010, "Member 'FEndDataTableWorldActorInfo::ForceSpawn' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableWorldCondition
// 0x00C8 (0x00D0 - 0x0008)
struct FEndDataTableWorldCondition final : public FEndDataTableRowBase
{
public:
	class FName                                   LocationId;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EnableStoryFlag_Array;                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 EnableStoryFlagValue_Array;                        // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 EnableStoryFlagConditionType_Array;                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Type;                                              // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpecificID;                                        // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         State;                                             // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Value;                                             // 0x004D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableDuringFade;                                 // 0x004E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DelaySeconds_Array;                                // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DisableTouchpad_Array;                             // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 DisableOptions_Array;                              // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 Action_Array;                                      // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           NameArgument_Array;                                // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 IntegerArgument_Array;                             // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 WaitForFinish_Array;                               // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CompleteStoryFlag_Array;                           // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableWorldCondition) == 0x000008, "Wrong alignment on FEndDataTableWorldCondition");
static_assert(sizeof(FEndDataTableWorldCondition) == 0x0000D0, "Wrong size on FEndDataTableWorldCondition");
static_assert(offsetof(FEndDataTableWorldCondition, LocationId) == 0x000008, "Member 'FEndDataTableWorldCondition::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, EnableStoryFlag_Array) == 0x000010, "Member 'FEndDataTableWorldCondition::EnableStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, EnableStoryFlagValue_Array) == 0x000020, "Member 'FEndDataTableWorldCondition::EnableStoryFlagValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, EnableStoryFlagConditionType_Array) == 0x000030, "Member 'FEndDataTableWorldCondition::EnableStoryFlagConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, Type) == 0x000040, "Member 'FEndDataTableWorldCondition::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, SpecificID) == 0x000044, "Member 'FEndDataTableWorldCondition::SpecificID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, State) == 0x00004C, "Member 'FEndDataTableWorldCondition::State' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, Value) == 0x00004D, "Member 'FEndDataTableWorldCondition::Value' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, DisableDuringFade) == 0x00004E, "Member 'FEndDataTableWorldCondition::DisableDuringFade' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, DelaySeconds_Array) == 0x000050, "Member 'FEndDataTableWorldCondition::DelaySeconds_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, DisableTouchpad_Array) == 0x000060, "Member 'FEndDataTableWorldCondition::DisableTouchpad_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, DisableOptions_Array) == 0x000070, "Member 'FEndDataTableWorldCondition::DisableOptions_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, Action_Array) == 0x000080, "Member 'FEndDataTableWorldCondition::Action_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, NameArgument_Array) == 0x000090, "Member 'FEndDataTableWorldCondition::NameArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, IntegerArgument_Array) == 0x0000A0, "Member 'FEndDataTableWorldCondition::IntegerArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, WaitForFinish_Array) == 0x0000B0, "Member 'FEndDataTableWorldCondition::WaitForFinish_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldCondition, CompleteStoryFlag_Array) == 0x0000C0, "Member 'FEndDataTableWorldCondition::CompleteStoryFlag_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableWorldItemSpec
// 0x0078 (0x0080 - 0x0008)
struct FEndDataTableWorldItemSpec final : public FEndDataTableRowBase
{
public:
	float                                         IconHeightOffset;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CharaSpecID_Array;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 IconType_Array;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResponseAreaID_Array;                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResponseAreaPlayerID_Array;                        // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ResponseAreaPlayerIDRedXIII_Array;                 // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 HeightLimitation_Array;                            // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 TargetIconHeightOffset_Array;                      // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableWorldItemSpec) == 0x000008, "Wrong alignment on FEndDataTableWorldItemSpec");
static_assert(sizeof(FEndDataTableWorldItemSpec) == 0x000080, "Wrong size on FEndDataTableWorldItemSpec");
static_assert(offsetof(FEndDataTableWorldItemSpec, IconHeightOffset) == 0x000008, "Member 'FEndDataTableWorldItemSpec::IconHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemSpec, CharaSpecID_Array) == 0x000010, "Member 'FEndDataTableWorldItemSpec::CharaSpecID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemSpec, IconType_Array) == 0x000020, "Member 'FEndDataTableWorldItemSpec::IconType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemSpec, ResponseAreaID_Array) == 0x000030, "Member 'FEndDataTableWorldItemSpec::ResponseAreaID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemSpec, ResponseAreaPlayerID_Array) == 0x000040, "Member 'FEndDataTableWorldItemSpec::ResponseAreaPlayerID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemSpec, ResponseAreaPlayerIDRedXIII_Array) == 0x000050, "Member 'FEndDataTableWorldItemSpec::ResponseAreaPlayerIDRedXIII_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemSpec, HeightLimitation_Array) == 0x000060, "Member 'FEndDataTableWorldItemSpec::HeightLimitation_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldItemSpec, TargetIconHeightOffset_Array) == 0x000070, "Member 'FEndDataTableWorldItemSpec::TargetIconHeightOffset_Array' has a wrong offset!");

// ScriptStruct EndDataObject.EndDataTableWorldReport
// 0x0130 (0x0138 - 0x0008)
struct FEndDataTableWorldReport final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreOpenNotifyActionOrActionGroupID;                // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PostOpenNotifyActionOrActionGroupID;               // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreCompleteNotifyActionOrActionGroupID;            // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PostCompleteNotifyActionOrActionGroupID;           // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DisableAutoSave;                                   // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortIndex;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ReportIconType;                                    // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ObjectiveTextID;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CompletedTextID;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NotVisitedTitle;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NotVisitedDetail;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NotVisitedImageName;                               // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Title;                                             // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Detail;                                            // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ClearedTitle;                                      // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ClearedDetail;                                     // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ImageName;                                         // 0x00C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RecommendedLevelID;                                // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RecommendLevel;                                    // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NewFlag;                                           // 0x00E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ViewFlag;                                          // 0x00EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OpenFlag;                                          // 0x00F4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CompleteFlag;                                      // 0x00FC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReportedFlag;                                      // 0x0104(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ChadleyRewardID;                                   // 0x010C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PartyExperience;                                   // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AllMissionClearedPartyExperience;                  // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MissionID_Array;                                   // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   AllMissionClearStateTriggerID;                     // 0x0130(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDataTableWorldReport) == 0x000008, "Wrong alignment on FEndDataTableWorldReport");
static_assert(sizeof(FEndDataTableWorldReport) == 0x000138, "Wrong size on FEndDataTableWorldReport");
static_assert(offsetof(FEndDataTableWorldReport, UniqueId) == 0x000008, "Member 'FEndDataTableWorldReport::UniqueId' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, PreOpenNotifyActionOrActionGroupID) == 0x00000C, "Member 'FEndDataTableWorldReport::PreOpenNotifyActionOrActionGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, PostOpenNotifyActionOrActionGroupID) == 0x000014, "Member 'FEndDataTableWorldReport::PostOpenNotifyActionOrActionGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, PreCompleteNotifyActionOrActionGroupID) == 0x00001C, "Member 'FEndDataTableWorldReport::PreCompleteNotifyActionOrActionGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, PostCompleteNotifyActionOrActionGroupID) == 0x000024, "Member 'FEndDataTableWorldReport::PostCompleteNotifyActionOrActionGroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, DisableAutoSave) == 0x00002C, "Member 'FEndDataTableWorldReport::DisableAutoSave' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, SortIndex) == 0x000030, "Member 'FEndDataTableWorldReport::SortIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, ReportIconType) == 0x000034, "Member 'FEndDataTableWorldReport::ReportIconType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, ObjectiveTextID) == 0x000038, "Member 'FEndDataTableWorldReport::ObjectiveTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, CompletedTextID) == 0x000048, "Member 'FEndDataTableWorldReport::CompletedTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, NotVisitedTitle) == 0x000058, "Member 'FEndDataTableWorldReport::NotVisitedTitle' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, NotVisitedDetail) == 0x000068, "Member 'FEndDataTableWorldReport::NotVisitedDetail' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, NotVisitedImageName) == 0x000078, "Member 'FEndDataTableWorldReport::NotVisitedImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, Title) == 0x000088, "Member 'FEndDataTableWorldReport::Title' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, Detail) == 0x000098, "Member 'FEndDataTableWorldReport::Detail' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, ClearedTitle) == 0x0000A8, "Member 'FEndDataTableWorldReport::ClearedTitle' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, ClearedDetail) == 0x0000B8, "Member 'FEndDataTableWorldReport::ClearedDetail' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, ImageName) == 0x0000C8, "Member 'FEndDataTableWorldReport::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, RecommendedLevelID) == 0x0000D8, "Member 'FEndDataTableWorldReport::RecommendedLevelID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, RecommendLevel) == 0x0000E0, "Member 'FEndDataTableWorldReport::RecommendLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, NewFlag) == 0x0000E4, "Member 'FEndDataTableWorldReport::NewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, ViewFlag) == 0x0000EC, "Member 'FEndDataTableWorldReport::ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, OpenFlag) == 0x0000F4, "Member 'FEndDataTableWorldReport::OpenFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, CompleteFlag) == 0x0000FC, "Member 'FEndDataTableWorldReport::CompleteFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, ReportedFlag) == 0x000104, "Member 'FEndDataTableWorldReport::ReportedFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, ChadleyRewardID) == 0x00010C, "Member 'FEndDataTableWorldReport::ChadleyRewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, PartyExperience) == 0x000114, "Member 'FEndDataTableWorldReport::PartyExperience' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, AllMissionClearedPartyExperience) == 0x000118, "Member 'FEndDataTableWorldReport::AllMissionClearedPartyExperience' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, MissionID_Array) == 0x000120, "Member 'FEndDataTableWorldReport::MissionID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWorldReport, AllMissionClearStateTriggerID) == 0x000130, "Member 'FEndDataTableWorldReport::AllMissionClearStateTriggerID' has a wrong offset!");

}

