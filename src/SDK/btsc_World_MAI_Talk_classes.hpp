#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: btsc_World_MAI_Talk

#include "Basic.hpp"

#include "EndDataBase_structs.hpp"
#include "Engine_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass btsc_World_MAI_Talk.btsc_World_MAI_Talk_C
// 0x0030 (0x02F0 - 0x02C0)
class Abtsc_World_MAI_Talk_C final : public AEndBattleSceneBlueprint
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<class FName>                           PV_ID;                                             // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PV_Running;                                        // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Running_PV_ID;                                     // 0x02E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_btsc_World_MAI_Talk(int32 EntryPoint);
	void OnTakeDamage(int32 Damage, const class FName& CauserCharaName, const class FName& DamagedCharaName, const class FName& AbilityId, bool bBind, bool bGuard, const class FName& hitBoneName, bool bAttributeHit, bool bResistHit, const class FName& DamageSourceID, EEndBattleAttributeType appendAttribute, float justHitRotYaw, const struct FVector& hitPosition, bool bHeal, bool bBurst, bool bLock);
	void OnEntryBattleScene(const class FName& battleScenenBPName, const class FName& territoryID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"btsc_World_MAI_Talk_C">();
	}
	static class Abtsc_World_MAI_Talk_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Abtsc_World_MAI_Talk_C>();
	}
};
static_assert(alignof(Abtsc_World_MAI_Talk_C) == 0x000008, "Wrong alignment on Abtsc_World_MAI_Talk_C");
static_assert(sizeof(Abtsc_World_MAI_Talk_C) == 0x0002F0, "Wrong size on Abtsc_World_MAI_Talk_C");
static_assert(offsetof(Abtsc_World_MAI_Talk_C, UberGraphFrame) == 0x0002C0, "Member 'Abtsc_World_MAI_Talk_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Abtsc_World_MAI_Talk_C, DefaultSceneRoot) == 0x0002C8, "Member 'Abtsc_World_MAI_Talk_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(Abtsc_World_MAI_Talk_C, PV_ID) == 0x0002D0, "Member 'Abtsc_World_MAI_Talk_C::PV_ID' has a wrong offset!");
static_assert(offsetof(Abtsc_World_MAI_Talk_C, PV_Running) == 0x0002E0, "Member 'Abtsc_World_MAI_Talk_C::PV_Running' has a wrong offset!");
static_assert(offsetof(Abtsc_World_MAI_Talk_C, Running_PV_ID) == 0x0002E4, "Member 'Abtsc_World_MAI_Talk_C::Running_PV_ID' has a wrong offset!");

}

