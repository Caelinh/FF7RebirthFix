#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EndGame

#include "Basic.hpp"

#include "BodyDriverPlugin_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimationCore_structs.hpp"
#include "SQEXSEAD_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "VFXNiagara_structs.hpp"
#include "HSFLipSyncRuntime_structs.hpp"
#include "NiagaraAnimNotifies_structs.hpp"
#include "EndDataBase_structs.hpp"
#include "SlateCore_structs.hpp"
#include "MovieScene_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "UMG_structs.hpp"
#include "ControlRig_structs.hpp"


namespace SDK
{

// Enum EndGame.EEndMenuTextButtonLayoutMode
// NumValues: 0x0003
enum class EEndMenuTextButtonLayoutMode : uint8
{
	Middle                                   = 0,
	Middle2K                                 = 1,
	EEndMenuTextButtonLayoutMode_MAX         = 2,
};

// Enum EndGame.EEndMenuScrollBarPosition
// NumValues: 0x0004
enum class EEndMenuScrollBarPosition : uint8
{
	None                                     = 0,
	RightOrBottom                            = 1,
	LeftOrTop                                = 2,
	EEndMenuScrollBarPosition_MAX            = 3,
};

// Enum EndGame.EEndAIUpdateAppearancePositionType
// NumValues: 0x0003
enum class EEndAIUpdateAppearancePositionType : uint8
{
	SelfLocation                             = 0,
	PopPointRandom                           = 1,
	EEndAIUpdateAppearancePositionType_MAX   = 2,
};

// Enum EndGame.EEndWireReelModifierType
// NumValues: 0x0007
enum class EEndWireReelModifierType : uint8
{
	Attach                                   = 0,
	Launch                                   = 1,
	EnableGravity                            = 2,
	Keeping                                  = 3,
	Release                                  = 4,
	Detach                                   = 5,
	EEndWireReelModifierType_MAX             = 6,
};

// Enum EndGame.EEndTimedNiagaraEffectAdvanced_CurveParameterType
// NumValues: 0x0003
enum class EEndTimedNiagaraEffectAdvanced_CurveParameterType : uint8
{
	Float                                    = 0,
	RGBA                                     = 1,
	EEndTimedNiagaraEffectAdvanced_MAX       = 2,
};

// Enum EndGame.EFieldActionSituationIconType
// NumValues: 0x0007
enum class EFieldActionSituationIconType : uint8
{
	Normal                                   = 0,
	JukeBox                                  = 1,
	Billboard                                = 2,
	WM                                       = 3,
	RedXIII                                  = 4,
	CaitsithDuct                             = 5,
	EFieldActionSituationIconType_MAX        = 6,
};

// Enum EndGame.EFieldActionActorUsageStatus
// NumValues: 0x0005
enum class EFieldActionActorUsageStatus : uint8
{
	Accepted                                 = 0,
	UseOf                                    = 1,
	UseNot                                   = 2,
	Invalid                                  = 3,
	EFieldActionActorUsageStatus_MAX         = 4,
};

// Enum EndGame.EEnd3DAudioActorUseType
// NumValues: 0x0003
enum class EEnd3DAudioActorUseType : uint8
{
	JukeBox                                  = 0,
	AutoPlay                                 = 1,
	EEnd3DAudioActorUseType_MAX              = 2,
};

// Enum EndGame.EAttachBarretSunglassAnimation
// NumValues: 0x000B
enum class EAttachBarretSunglassAnimation : uint8
{
	WearingSunglasses                        = 0,
	FinishWearingSunglasses                  = 1,
	InProcess_Wearing                        = 2,
	StartWearingSunglasses                   = 3,
	RemovedSunglasses                        = 4,
	FinishRemovingSunglasses                 = 5,
	InProcess_Removing                       = 6,
	StartRemovingSunglasses                  = 7,
	Battle_GlassesVisible                    = 8,
	Battle_GlassesInvisible                  = 9,
	EAttachBarretSunglassAnimation_MAX       = 10,
};

// Enum EndGame.EEndWeaponSwimEventType
// NumValues: 0x000C
enum class EEndWeaponSwimEventType : uint8
{
	MainAction                               = 0,
	Branch                                   = 1,
	SlowlyStop                               = 2,
	Reboot                                   = 3,
	ActionEnd                                = 4,
	RequestTrigger                           = 5,
	AutoReturnCamera                         = 6,
	SetupCameraSpeed                         = 7,
	SetupCameraRot                           = 8,
	SetupAutoReturnCameraSpeedRate           = 9,
	CreateInputWaitUI                        = 10,
	EEndWeaponSwimEventType_MAX              = 11,
};

// Enum EndGame.EEndActivityInitResult
// NumValues: 0x0005
enum class EEndActivityInitResult : uint8
{
	None                                     = 0,
	Title                                    = 1,
	NewGame                                  = 2,
	LoadGame                                 = 3,
	EEndActivityInitResult_MAX               = 4,
};

// Enum EndGame.EResidentEffectCategory
// NumValues: 0x0006
enum class EResidentEffectCategory : uint8
{
	Default                                  = 0,
	MoveMode                                 = 1,
	Notify                                   = 2,
	CutScene                                 = 3,
	EndPlay                                  = 4,
	EResidentEffectCategory_MAX              = 5,
};

// Enum EndGame.EEndActorTickPhase
// NumValues: 0x0006
enum class EEndActorTickPhase : uint8
{
	None                                     = 0,
	TickMovementAndAniamation                = 1,
	EvalAnimation                            = 2,
	TickActor                                = 3,
	EvalPostAnimation                        = 4,
	EEndActorTickPhase_MAX                   = 5,
};

// Enum EndGame.EEndActorTickDependencyLayer
// NumValues: 0x0011
enum class EEndActorTickDependencyLayer : uint8
{
	Cinema                                   = 0,
	MiniGame                                 = 1,
	FieldAction                              = 2,
	Battle                                   = 3,
	MobPrefab                                = 4,
	SyncPoseComponent                        = 5,
	SyncAnimation                            = 6,
	SyncAction                               = 7,
	MovementBase                             = 8,
	MovementSubBase                          = 9,
	AnimationControlActor                    = 10,
	ChocoboParts                             = 11,
	BoneAttach                               = 12,
	AttachRootCapsule                        = 13,
	AttachMeshComponent                      = 14,
	Setup                                    = 15,
	EEndActorTickDependencyLayer_MAX         = 16,
};

// Enum EndGame.ECastShadowDisableMask
// NumValues: 0x0007
enum class ECastShadowDisableMask : uint8
{
	ECastShadowDisableMask_ANIMATION         = 0,
	ECastShadowDisableMask_MOB_PREFAB        = 1,
	ECastShadowDisableMask_VOLUME            = 2,
	ECastShadowDisableMask_CINEMA            = 3,
	ECastShadowDisableMask_MINIGAME          = 4,
	ECastShadowDisableMask_DEBUG             = 5,
	ECastShadowDisableMask_Max               = 6,
};

// Enum EndGame.ETextureForceResidentMask
// NumValues: 0x000A
enum class ETextureForceResidentMask : uint8
{
	ETextureForceResidentMask_PLAN_EVENT     = 0,
	ETextureForceResidentMaskk_CINEMA        = 1,
	ETextureForceResidentMask_SKILL_CAMERA   = 2,
	ETextureForceResidentMask_ANIMATION      = 3,
	ETextureForceResidentMask_MINIGAME       = 4,
	ETextureForceResidentMask_BATTLE         = 5,
	ETextureForceResidentMask_VEHICLE        = 6,
	ETextureForceResidentMask_MENU           = 7,
	ETextureForceResidentMask_DEBUG          = 8,
	ETextureForceResidentMask_Max            = 9,
};

// Enum EndGame.ELODModeMask
// NumValues: 0x000C
enum class ELODModeMask : uint8
{
	ELODModeMask_PLAN_EVENT                  = 0,
	ELODModeMask_CINEMA                      = 1,
	ELODModeMask_SKILL_CAMERA                = 2,
	ELODModeMask_ANIMATION                   = 3,
	ELODModeMask_MINIGAME                    = 4,
	ELODModeMask_BATTLE                      = 5,
	ELODModeMask_VEHICLE                     = 6,
	ELODModeMask_NOTIFY                      = 7,
	ELODModeMask_MENU                        = 8,
	ELODModeMask_DEBUG                       = 9,
	ELODModeLevelMask_Max                    = 10,
	ELODModeMask_MAX                         = 11,
};

// Enum EndGame.EForcedDrawMask
// NumValues: 0x0003
enum class EForcedDrawMask : uint8
{
	EForcedDrawMask_CINEMA                   = 0,
	EForcedDrawMask_DEBUG                    = 1,
	EForcedDrawMask_MAX                      = 2,
};

// Enum EndGame.EForcedTickMask
// NumValues: 0x0007
enum class EForcedTickMask : uint8
{
	EForcedTickMask_CINEMA                   = 0,
	EForcedTickMask_ANIMATION                = 1,
	EForcedTickMask_DIALOGUE                 = 2,
	EForcedTickMask_MINIGAME                 = 3,
	EForcedTickMask_FIELDACTION              = 4,
	EForcedTickMask_DEBUG                    = 5,
	EForcedTickMask_MAX                      = 6,
};

// Enum EndGame.EPauseMask
// NumValues: 0x001E
enum class EPauseMask : uint8
{
	EPauseMask_DEBUG                         = 0,
	EPauseMask_SYSTEM                        = 1,
	EPauseMask_MENUPAUSE                     = 2,
	EPauseMask_HIDE_WORLD                    = 3,
	EPauseMask_INIT                          = 4,
	EPauseMask_LOADER                        = 5,
	EPauseMask_CHARAPOP                      = 6,
	EPauseMask_BATTLE                        = 7,
	EPauseMask_BATTLE_SUMMON                 = 8,
	EPauseMask_CINEMA                        = 9,
	EPauseMask_FIELDtoCINEMA                 = 10,
	EPauseMask_FIELDtoBATTLE                 = 11,
	EPauseMask_FIELD                         = 12,
	EPauseMask_FIELDtoAI                     = 13,
	EPauseMask_EXCLUSION                     = 14,
	EPauseMask_SCENE                         = 15,
	EPauseMask_ANIMATION_BUDGET              = 16,
	EPauseMask_ENCOUNT                       = 17,
	EPauseMask_WAVE                          = 18,
	EPauseMask_MINIGAME                      = 19,
	EPauseMask_LOADING                       = 20,
	EPauseMask_BATTLE_BP                     = 21,
	EPauseMask_WEAPON_ANIMATION              = 22,
	EPauseMask_FIELD_PRELOADANIMATION        = 23,
	EPauseMask_DIALOGUE                      = 24,
	EPauseMask_VEHICLE                       = 25,
	EPauseMask_PARTY                         = 26,
	EPauseMask_PAUSE_ACTOR                   = 27,
	EPauseMask_FIELDACTION                   = 28,
	EPauseMask_MAX                           = 29,
};

// Enum EndGame.EDebugCallerType
// NumValues: 0x0013
enum class EDebugCallerType : uint8
{
	Action                                   = 0,
	Animation                                = 1,
	Bike                                     = 2,
	Battle                                   = 3,
	BluePrint                                = 4,
	CutScene                                 = 5,
	Debug                                    = 6,
	System                                   = 7,
	SelfUpdate                               = 8,
	PartyMgr                                 = 9,
	PlannerEvent                             = 10,
	Encount                                  = 11,
	AI                                       = 12,
	VehicleSystem                            = 13,
	MiniGame                                 = 14,
	ChadleySystem                            = 15,
	Colosseum                                = 16,
	Movement                                 = 17,
	EDebugCallerType_MAX                     = 18,
};

// Enum EndGame.EForceUpdateAnimationCategory
// NumValues: 0x000B
enum class EForceUpdateAnimationCategory : uint8
{
	MiniGame                                 = 0,
	FieldExtraAction                         = 1,
	AI                                       = 2,
	AIOverlap                                = 3,
	WildAnimal                               = 4,
	Battle                                   = 5,
	Vehicle                                  = 6,
	StateChange                              = 7,
	Cinema                                   = 8,
	Action                                   = 9,
	EForceUpdateAnimationCategory_MAX        = 10,
};

// Enum EndGame.ECenterBoneEvaluationType
// NumValues: 0x0005
enum class ECenterBoneEvaluationType : uint8
{
	TranslationAndRotation                   = 0,
	Translation                              = 1,
	Rotation                                 = 2,
	Ignore                                   = 3,
	ECenterBoneEvaluationType_MAX            = 4,
};

// Enum EndGame.ESoundResorceType
// NumValues: 0x0005
enum class ESoundResorceType : uint8
{
	ESoundResorceType_SE                     = 0,
	ESoundResorceType_Voice                  = 1,
	ESoundResorceType_AutoSE                 = 2,
	ESoundResorceType_FootAttributeSE        = 3,
	ESoundResorceType_MAX                    = 4,
};

// Enum EndGame.EActorType
// NumValues: 0x000C
enum class EActorType : uint8
{
	EActorType_PLAYER                        = 0,
	EActorType_PARTY                         = 1,
	EActorType_GUEST                         = 2,
	EActorType_NPC                           = 3,
	EActorType_ENEMY                         = 4,
	EActorType_OBJECT                        = 5,
	EActorType_GUEST_Battle                  = 6,
	EActorType_WEAPON                        = 7,
	EActorType_RESERVE                       = 8,
	EActorType_PLAYER_VEHICLE                = 9,
	EActorType_PARTY_VEHICLE                 = 10,
	EActorType_MAX                           = 11,
};

// Enum EndGame.EActorMode
// NumValues: 0x0007
enum class EActorMode : uint8
{
	EActorMode_NONE                          = 0,
	EActorMode_FIELD                         = 1,
	EActorMode_FIELD_CINEMA                  = 2,
	EActorMode_CAUTION                       = 3,
	EActorMode_BATTLE                        = 4,
	EActorMode_CINEMA                        = 5,
	EActorMode_MAX                           = 6,
};

// Enum EndGame.EAerialIgnoreShapeType
// NumValues: 0x0003
enum class EAerialIgnoreShapeType : uint8
{
	Box                                      = 0,
	Sphere                                   = 1,
	EAerialIgnoreShapeType_MAX               = 2,
};

// Enum EndGame.EEndAIMoveDefinitionFastDashEventTiming
// NumValues: 0x0005
enum class EEndAIMoveDefinitionFastDashEventTiming : uint8
{
	PlayLoop                                 = 0,
	NextMoveStart                            = 1,
	ArrivedRelay                             = 2,
	ArrivedLast                              = 3,
	EEndAIMoveDefinitionFastDashEventTiming_MAX = 4,
};

// Enum EndGame.EEndAIReactionInfoOtherType
// NumValues: 0x0003
enum class EEndAIReactionInfoOtherType : uint8
{
	UniqueAbility                            = 0,
	CombinationAbility_NoUseATB              = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndAIReactionPlayerType
// NumValues: 0x0004
enum class EEndAIReactionPlayerType : uint8
{
	All                                      = 0,
	UCPC                                     = 1,
	AIPC                                     = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndAIEnemyGuardExecSate
// NumValues: 0x0005
enum class EEndAIEnemyGuardExecSate : uint8
{
	None                                     = 0,
	Ability                                  = 1,
	Animation                                = 2,
	Damage                                   = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAIEnemyReactionCancel
// NumValues: 0x0005
enum class EEndAIEnemyReactionCancel : uint8
{
	None                                     = 0,
	Counter                                  = 1,
	Guard                                    = 2,
	Avoid                                    = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAIEnemyCancel
// NumValues: 0x0005
enum class EEndAIEnemyCancel : uint8
{
	None                                     = 0,
	Turn                                     = 1,
	ReactionAvoid                            = 2,
	FastDash                                 = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAIEnemyPointSelectType
// NumValues: 0x0004
enum class EEndAIEnemyPointSelectType : uint8
{
	DistanceMin                              = 0,
	DistanceMax                              = 1,
	Direction                                = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndAIEnemyCombinationNotify
// NumValues: 0x0006
enum class EEndAIEnemyCombinationNotify : uint8
{
	None                                     = 0,
	FirstAction                              = 1,
	ExecuteAction                            = 2,
	AfterMove                                = 3,
	Special                                  = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndAIBattleGroupNotify
// NumValues: 0x0005
enum class EEndAIBattleGroupNotify : uint8
{
	PartyAll                                 = 0,
	Party                                    = 1,
	Leader                                   = 2,
	Individual                               = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAIBattleGroupLeader
// NumValues: 0x0004
enum class EEndAIBattleGroupLeader : uint8
{
	None                                     = 0,
	CanLeader                                = 1,
	Leader                                   = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndAINotifyStartEndType
// NumValues: 0x0003
enum class EEndAINotifyStartEndType : uint8
{
	Start                                    = 0,
	End                                      = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndAIComboSelectType
// NumValues: 0x0004
enum class EEndAIComboSelectType : uint8
{
	Sequence                                 = 0,
	Random                                   = 1,
	Lot                                      = 2,
	EEndAIComboSelectType_MAX                = 3,
};

// Enum EndGame.EEndAIActionIgnoreCondition
// NumValues: 0x000A
enum class EEndAIActionIgnoreCondition : uint8
{
	None                                     = 0,
	All                                      = 1,
	Distance                                 = 2,
	DistanceMin                              = 3,
	DistanceMax                              = 4,
	Height                                   = 5,
	AngleYaw                                 = 6,
	AnglePitch                               = 7,
	CoolTime                                 = 8,
	EEndAIActionIgnoreCondition_MAX          = 9,
};

// Enum EndGame.EEndAIMoveApproachType
// NumValues: 0x0006
enum class EEndAIMoveApproachType : uint8
{
	None                                     = 0,
	Leave                                    = 1,
	Confront                                 = 2,
	Access                                   = 3,
	Around                                   = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndAIProwlCallType
// NumValues: 0x0005
enum class EEndAIProwlCallType : uint8
{
	Normal                                   = 0,
	Cancel                                   = 1,
	ChangeCharaState                         = 2,
	Max                                      = 3,
	None                                     = 4,
};

// Enum EndGame.EEndAIActionMoveTimeOut
// NumValues: 0x0004
enum class EEndAIActionMoveTimeOut : uint8
{
	StandardMove                             = 0,
	ActionMove                               = 1,
	Max                                      = 2,
	None                                     = 3,
};

// Enum EndGame.EEndAIActionTrialStraightCountCategory
// NumValues: 0x0007
enum class EEndAIActionTrialStraightCountCategory : uint8
{
	None                                     = 0,
	Category00                               = 1,
	Category01                               = 2,
	Category02                               = 3,
	Category03                               = 4,
	Category04                               = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndAIMoveDefinitionTakeoffAndLanding
// NumValues: 0x0004
enum class EEndAIMoveDefinitionTakeoffAndLanding : uint8
{
	None                                     = 0,
	Takeoff                                  = 1,
	Landing                                  = 2,
	EEndAIMoveDefinitionTakeoffAndLanding_MAX = 3,
};

// Enum EndGame.EEndAIMoveDefinitionStepExecType
// NumValues: 0x0004
enum class EEndAIMoveDefinitionStepExecType : uint8
{
	None                                     = 0,
	PreMove                                  = 1,
	LeaveAftter                              = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndAIMoveDefinitionStepDirction
// NumValues: 0x0006
enum class EEndAIMoveDefinitionStepDirction : uint8
{
	None                                     = 0,
	Back                                     = 1,
	Right                                    = 2,
	Left                                     = 3,
	Front                                    = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndAIMoveDefinition
// NumValues: 0x001B
enum class EEndAIMoveDefinition : uint8
{
	Empty                                    = 0,
	Confront                                 = 1,
	ConfrontAir                              = 2,
	ConfrontTwoStageToAction                 = 3,
	Around                                   = 4,
	AroundAir                                = 5,
	AroundAirTargetCross                     = 6,
	AroundNoSwitchDirc                       = 7,
	AroundSpecialStandby                     = 8,
	Step                                     = 9,
	OneWay                                   = 10,
	FastDash                                 = 11,
	MoveToMultiPoint                         = 12,
	MoveToNearTheGroupMember                 = 13,
	Jump                                     = 14,
	Warp                                     = 15,
	WarpToNearTheTarget                      = 16,
	MoveToGroupOffset                        = 17,
	Herd                                     = 18,
	HerdAir                                  = 19,
	ZigzagStep                               = 20,
	TakeoffAndLanding                        = 21,
	WaveAttackMember                         = 22,
	EB2000_GroundToCeiling                   = 23,
	EB2090_ShieldingMove                     = 24,
	EN0007_WallMove                          = 25,
	Max                                      = 26,
};

// Enum EndGame.EEndAIActionPack
// NumValues: 0x0003
enum class EEndAIActionPack : uint8
{
	Empty                                    = 0,
	Random                                   = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndAIComboDefinition
// NumValues: 0x0003
enum class EEndAIComboDefinition : uint8
{
	Normal                                   = 0,
	Counter                                  = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndAIAnimDefinition
// NumValues: 0x0003
enum class EEndAIAnimDefinition : uint8
{
	Normal                                   = 0,
	Avoid                                    = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndAIGuardDefinition
// NumValues: 0x0004
enum class EEndAIGuardDefinition : uint8
{
	Normal                                   = 0,
	ParallelMove                             = 1,
	Reaction                                 = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndAIAbilityDefinition
// NumValues: 0x0008
enum class EEndAIAbilityDefinition : uint8
{
	Normal                                   = 0,
	ParallelMove                             = 1,
	Counter                                  = 2,
	Special                                  = 3,
	Combination                              = 4,
	ComboFirstDummy                          = 5,
	WaveAttackLeader                         = 6,
	Max                                      = 7,
};

// Enum EndGame.EEndAIActionDefinition
// NumValues: 0x0010
enum class EEndAIActionDefinition : uint8
{
	Empty                                    = 0,
	Field_Wandering                          = 1,
	Field_Fixed                              = 2,
	Move                                     = 3,
	MoveSequence                             = 4,
	Ability                                  = 5,
	Animation                                = 6,
	Trans                                    = 7,
	Combo                                    = 8,
	ComboConnect                             = 9,
	Guard                                    = 10,
	Combination                              = 11,
	CombinationAbility                       = 12,
	ReactionAvoid                            = 13,
	DoNothing                                = 14,
	Max                                      = 15,
};

// Enum EndGame.EEndAIActionState
// NumValues: 0x0006
enum class EEndAIActionState : uint8
{
	Standby                                  = 0,
	Move                                     = 1,
	Step00                                   = 2,
	Step01                                   = 3,
	Action                                   = 4,
	EEndAIActionState_MAX                    = 5,
};

// Enum EndGame.ESummonAbilityInfluenceCenter
// NumValues: 0x0004
enum class ESummonAbilityInfluenceCenter : uint8
{
	eNone                                    = 0,
	eSelf                                    = 1,
	eTarget                                  = 2,
	ESummonAbilityInfluenceCenter_MAX        = 3,
};

// Enum EndGame.ESummonAbilityExecuteState
// NumValues: 0x0005
enum class ESummonAbilityExecuteState : uint8
{
	eNone                                    = 0,
	eRequesting                              = 1,
	eInAction                                = 2,
	eCompleted                               = 3,
	ESummonAbilityExecuteState_MAX           = 4,
};

// Enum EndGame.EEndDoOnceOutCode
// NumValues: 0x0004
enum class EEndDoOnceOutCode : uint8
{
	First                                    = 0,
	Other                                    = 1,
	Reset                                    = 2,
	EEndDoOnceOutCode_MAX                    = 3,
};

// Enum EndGame.EEndDoOnceCode
// NumValues: 0x0003
enum class EEndDoOnceCode : uint8
{
	Execute                                  = 0,
	Reset                                    = 1,
	EEndDoOnceCode_MAX                       = 2,
};

// Enum EndGame.EEndPartsRepairConditionType
// NumValues: 0x0003
enum class EEndPartsRepairConditionType : uint8
{
	Default                                  = 0,
	UnbrokenPartsFullRecovery                = 1,
	EEndPartsRepairConditionType_MAX         = 2,
};

// Enum EndGame.EEndBattleAITargetLockGroupPriority
// NumValues: 0x0004
enum class EEndBattleAITargetLockGroupPriority : uint8
{
	Low                                      = 0,
	Middle                                   = 1,
	High                                     = 2,
	EEndBattleAITargetLockGroupPriority_MAX  = 3,
};

// Enum EndGame.EEndAiBattleTargetType
// NumValues: 0x0008
enum class EEndAiBattleTargetType : uint8
{
	Own                                      = 0,
	Target                                   = 1,
	Party                                    = 2,
	Enemy                                    = 3,
	Guest                                    = 4,
	Ucpc                                     = 5,
	All                                      = 6,
	EEndAiBattleTargetType_MAX               = 7,
};

// Enum EndGame.EEndBattleAILockTargetType
// NumValues: 0x000C
enum class EEndBattleAILockTargetType : uint64
{
	None                                     = 18446744073709551615,
	Dispersion                               = 0,
	LockGroupWeak                            = 1,
	BluePrint                                = 2,
	AbilityLockLine                          = 3,
	AbilityLock                              = 4,
	AbilityLockCheck                         = 5,
	HateLockLine                             = 6,
	LockGroupStrong                          = 7,
	ForceLock                                = 8,
	ForceLockCheck                           = 9,
	Max                                      = 10,
};

// Enum EndGame.EEndBattleAIHateLockType
// NumValues: 0x0002
enum class EEndBattleAIHateLockType : uint8
{
	Provocation                              = 0,
	Max                                      = 1,
};

// Enum EndGame.EEndBattleAISelectTargetType
// NumValues: 0x0004
enum class EEndBattleAISelectTargetType : uint8
{
	None                                     = 0,
	Hate                                     = 1,
	Condition                                = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndAIEnemyTargetSelectConditionType
// NumValues: 0x000C
enum class EEndAIEnemyTargetSelectConditionType : uint8
{
	None                                     = 0,
	HPPerHigh                                = 1,
	HPPerLow                                 = 2,
	DistanceNear                             = 3,
	DistanceFar                              = 4,
	SyncAction                               = 5,
	Stun                                     = 6,
	StatusChangeEffect                       = 50,
	Sleep                                    = 66,
	SpecialStatusChange                      = 100,
	Restraint                                = 141,
	Max                                      = 142,
};

// Enum EndGame.EEndAIEnemyTargetSelectCharacterType
// NumValues: 0x0004
enum class EEndAIEnemyTargetSelectCharacterType : uint8
{
	UCPC                                     = 0,
	AIPC                                     = 1,
	ALL                                      = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndAIEnemyTargetSelectConditionCategory
// NumValues: 0x0002
enum class EEndAIEnemyTargetSelectConditionCategory : uint8
{
	Default                                  = 0,
	Max                                      = 1,
};

// Enum EndGame.EFriendBattleCautionType
// NumValues: 0x0005
enum class EFriendBattleCautionType : uint8
{
	KeepMoving                               = 0,
	MoveThenWait                             = 1,
	BackAndForth                             = 2,
	Formation                                = 3,
	MAX                                      = 4,
};

// Enum EndGame.EFriendSpecialAbilityConditionType
// NumValues: 0x0004
enum class EFriendSpecialAbilityConditionType : uint8
{
	None                                     = 0,
	OnHeat                                   = 1,
	OnBurst                                  = 2,
	EFriendSpecialAbilityConditionType_MAX   = 3,
};

// Enum EndGame.EFriendAbilityTargetType
// NumValues: 0x0004
enum class EFriendAbilityTargetType : uint8
{
	None                                     = 0,
	BattleTarget                             = 1,
	Character                                = 2,
	EFriendAbilityTargetType_MAX             = 3,
};

// Enum EndGame.EFriendAbilityType
// NumValues: 0x0002
enum class EFriendAbilityType : uint8
{
	NormalAttack                             = 0,
	EFriendAbilityType_MAX                   = 1,
};

// Enum EndGame.EAutoWeaponAbilitySpecialCaseType
// NumValues: 0x000A
enum class EAutoWeaponAbilitySpecialCaseType : uint8
{
	None                                     = 0,
	OverrideGuard                            = 1,
	Toad                                     = 2,
	OverrideDodge                            = 4,
	BoundTick                                = 8,
	BoundSyncAction                          = 16,
	CancelCombo                              = 32,
	CounterAbility                           = 64,
	Aerial                                   = 128,
	EAutoWeaponAbilitySpecialCaseType_MAX    = 129,
};

// Enum EndGame.EAIPCDamagePropertyFlag
// NumValues: 0x0005
enum class EAIPCDamagePropertyFlag : uint8
{
	None                                     = 0,
	Physic                                   = 1,
	Magic                                    = 2,
	All                                      = 3,
	EAIPCDamagePropertyFlag_MAX              = 4,
};

// Enum EndGame.EAutoMagicLinkSortType
// NumValues: 0x0003
enum class EAutoMagicLinkSortType : uint8
{
	None                                     = 0,
	HighMagicLv                              = 1,
	EAutoMagicLinkSortType_MAX               = 2,
};

// Enum EndGame.EAutoMagicSelectRuleType
// NumValues: 0x0009
enum class EAutoMagicSelectRuleType : uint8
{
	None                                     = 0,
	LowHpRate                                = 1,
	LowHpRateAndMaxHp                        = 2,
	HighMaxHp                                = 3,
	LowDefence                               = 4,
	LowStatusResist                          = 5,
	HighPopulation                           = 6,
	StatusChange                             = 7,
	EAutoMagicSelectRuleType_MAX             = 8,
};

// Enum EndGame.EAutoMagicTargetConditionType
// NumValues: 0x0017
enum class EAutoMagicTargetConditionType : uint8
{
	HpRateLower                              = 0,
	HpRateHigher                             = 1,
	StatusResist                             = 2,
	MpRateForTargetRank                      = 3,
	IsDead                                   = 4,
	CurableStatusChange                      = 5,
	NoResist                                 = 6,
	ErasableBuff                             = 7,
	NeedBarrier                              = 8,
	NeedBrave                                = 9,
	NeedProtect                              = 10,
	NeedDebrave                              = 11,
	NeedDeprotect                            = 12,
	WeakPoint                                = 13,
	UseMagic                                 = 14,
	PlayerOnly                               = 15,
	RateResist                               = 16,
	HighPopulation                           = 17,
	MpRateForGroupRank                       = 18,
	NoUCPCTarget                             = 19,
	IsBurst                                  = 20,
	UCPCTarget                               = 21,
	EAutoMagicTargetConditionType_MAX        = 22,
};

// Enum EndGame.EAutoMagicTargetPriorityType
// NumValues: 0x0003
enum class EAutoMagicTargetPriorityType : uint8
{
	EnemyRank                                = 0,
	IsBurst                                  = 1,
	EAutoMagicTargetPriorityType_MAX         = 2,
};

// Enum EndGame.EAutoMagicEssentialConditionType
// NumValues: 0x0004
enum class EAutoMagicEssentialConditionType : uint8
{
	MpRateForHighestRank                     = 0,
	PlayerOperateTime                        = 1,
	ExistsResistableStatusChange             = 2,
	EAutoMagicEssentialConditionType_MAX     = 3,
};

// Enum EndGame.EAIPCAttackKind
// NumValues: 0x0004
enum class EAIPCAttackKind : uint8
{
	ShortRange                               = 0,
	LongRange                                = 1,
	YuffieWithoutShuriken                    = 2,
	EAIPCAttackKind_MAX                      = 3,
};

// Enum EndGame.EAIPCMateriaEffect
// NumValues: 0x0003
enum class EAIPCMateriaEffect : uint8
{
	AutoUniqueAbility                        = 0,
	AutoWeaponAbility                        = 1,
	EAIPCMateriaEffect_MAX                   = 2,
};

// Enum EndGame.EAIPCBattleParamType
// NumValues: 0x0008
enum class EAIPCBattleParamType : uint8
{
	Normal                                   = 0,
	TargetBurst                              = 1,
	AutoAbility                              = 2,
	OrderedVehicle                           = 3,
	KeepOffensiveMode                        = 4,
	DodgeAttack                              = 5,
	Toad                                     = 6,
	EAIPCBattleParamType_MAX                 = 7,
};

// Enum EndGame.EAIPCTerrainSensorStatus
// NumValues: 0x0004
enum class EAIPCTerrainSensorStatus : uint8
{
	Normal                                   = 0,
	NearWall                                 = 1,
	Narrow                                   = 2,
	EAIPCTerrainSensorStatus_MAX             = 3,
};

// Enum EndGame.EAIPCGuardType
// NumValues: 0x0004
enum class EAIPCGuardType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Concentrate                              = 2,
	EAIPCGuardType_MAX                       = 3,
};

// Enum EndGame.EAIPCTargetLocationType
// NumValues: 0x0007
enum class EAIPCTargetLocationType : uint8
{
	TargetCursor                             = 0,
	TargetApproach                           = 1,
	CommandTargetCursor                      = 2,
	CommandTargetApproach                    = 3,
	CoverTargetCursor                        = 4,
	CoverTargetApproach                      = 5,
	EAIPCTargetLocationType_MAX              = 6,
};

// Enum EndGame.EAIPCTargetAvailableStatus
// NumValues: 0x0007
enum class EAIPCTargetAvailableStatus : uint8
{
	Available                                = 0,
	Sleep                                    = 1,
	DefenceStatus                            = 2,
	FarDefenceActor                          = 3,
	NotifyInhibitAttack                      = 4,
	NotBattleState                           = 5,
	EAIPCTargetAvailableStatus_MAX           = 6,
};

// Enum EndGame.EAIPCAttackType
// NumValues: 0x0004
enum class EAIPCAttackType : uint8
{
	eCombo                                   = 0,
	eContinuous                              = 1,
	eNone                                    = 2,
	EAIPCAttackType_MAX                      = 3,
};

// Enum EndGame.EAIPCBattleBehavior
// NumValues: 0x0014
enum class EAIPCBattleBehavior : uint8
{
	eNone                                    = 0,
	eTemp1                                   = 1,
	eBackToBattleArea                        = 2,
	eCommandExecute                          = 3,
	eTemp2                                   = 4,
	eToSafeArea                              = 5,
	eTemp3                                   = 6,
	eConfrontIdle                            = 7,
	eAvoidDanger                             = 8,
	eSupportCombination                      = 9,
	eCombination                             = 10,
	eBattleLoop                              = 11,
	eEscaping                                = 12,
	eMoveBattleArea                          = 13,
	eNotInBattle                             = 14,
	eTemp4                                   = 15,
	eExecuteAbility                          = 16,
	eDoNothing                               = 17,
	eMax                                     = 18,
	EAIPCBattleBehavior_MAX                  = 19,
};

// Enum EndGame.EBehaviorRequest
// NumValues: 0x000B
enum class EBehaviorRequest : uint8
{
	eCommandExecute                          = 0,
	eExecuteAbility                          = 1,
	eDoNothing                               = 2,
	eCombination                             = 3,
	eToSafeArea                              = 4,
	eAvoidDanger                             = 5,
	eConfrontIdle                            = 6,
	eSupportCombination                      = 7,
	eBackToBattleArea                        = 8,
	eMax                                     = 9,
	EBehaviorRequest_MAX                     = 10,
};

// Enum EndGame.EEndBattleAIDangerAreaType
// NumValues: 0x0004
enum class EEndBattleAIDangerAreaType : uint8
{
	eNone                                    = 0,
	eCircle                                  = 1,
	eRectangle                               = 2,
	EEndBattleAIDangerAreaType_MAX           = 3,
};

// Enum EndGame.ETargetChoosingSort
// NumValues: 0x0006
enum class ETargetChoosingSort : uint8
{
	eCloserToMyself                          = 0,
	eCloserToLeader                          = 1,
	eInHigherLocation                        = 2,
	eLowerHP                                 = 3,
	eScore                                   = 4,
	ETargetChoosingSort_MAX                  = 5,
};

// Enum EndGame.ETargetChoosingTag
// NumValues: 0x000D
enum class ETargetChoosingTag : uint8
{
	eSameAsLeader                            = 0,
	eCurrentOne                              = 1,
	eWallClimber                             = 2,
	eOneWhoTargetLeader                      = 3,
	eOneWhoTargetMe                          = 4,
	eWhoInBurst                              = 5,
	eHasLowestHP                             = 6,
	eAssignedTarget                          = 7,
	eUnassignedTarget                        = 8,
	eOneWhosHigher                           = 9,
	eNoDefenceStatus                         = 10,
	eNoDamageZeroStatus                      = 11,
	ETargetChoosingTag_MAX                   = 12,
};

// Enum EndGame.EConfrontType
// NumValues: 0x000C
enum class EConfrontType : uint8
{
	COMBAT                                   = 0,
	CAUTION                                  = 1,
	COMMAND                                  = 2,
	STANDBY                                  = 3,
	ABILITY                                  = 4,
	WRAPAROUND                               = 5,
	COMMAND_FALLBACK                         = 6,
	ABILITY_TELEPORT                         = 7,
	UNIQUE                                   = 8,
	GUARDORDER                               = 9,
	SUPPORT_COMBINATION                      = 10,
	EConfrontType_MAX                        = 11,
};

// Enum EndGame.EEndAIComboHitCondition
// NumValues: 0x0006
enum class EEndAIComboHitCondition : uint8
{
	Unconditionally                          = 0,
	HitToNext                                = 1,
	HitToNotNext                             = 2,
	MissToNext                               = 3,
	GuardToNotNext                           = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndAIBattlePhaseChangeActionIdType
// NumValues: 0x0003
enum class EEndAIBattlePhaseChangeActionIdType : uint8
{
	ReactionId                               = 0,
	AbilityId                                = 1,
	EEndAIBattlePhaseChangeActionIdType_MAX  = 2,
};

// Enum EndGame.EEndAiMathBinCmp
// NumValues: 0x0003
enum class EEndAiMathBinCmp : uint8
{
	BinEqual                                 = 0,
	BinNotEqual                              = 1,
	EEndAiMathBinCmp_MAX                     = 2,
};

// Enum EndGame.EEndAiMathCmp
// NumValues: 0x0007
enum class EEndAiMathCmp : uint8
{
	Equal                                    = 0,
	Less                                     = 1,
	LessEqual                                = 2,
	Greater                                  = 3,
	GreaterEqual                             = 4,
	NotEqual                                 = 5,
	EEndAiMathCmp_MAX                        = 6,
};

// Enum EndGame.EEndAIExecPinBranch
// NumValues: 0x0003
enum class EEndAIExecPinBranch : uint8
{
	Pin_True                                 = 0,
	Pin_False                                = 1,
	Pin_MAX                                  = 2,
};

// Enum EndGame.EEndAIEnemyCautionMoveKind
// NumValues: 0x0006
enum class EEndAIEnemyCautionMoveKind : uint8
{
	None                                     = 0,
	Approach                                 = 1,
	Escape                                   = 2,
	Keep                                     = 3,
	Around                                   = 4,
	EEndAIEnemyCautionMoveKind_MAX           = 5,
};

// Enum EndGame.EEndAIEnemyCautionPhase
// NumValues: 0x0005
enum class EEndAIEnemyCautionPhase : uint8
{
	None                                     = 0,
	WaitFieldAnimation                       = 1,
	PlayCautionAnimation                     = 2,
	Move                                     = 3,
	EEndAIEnemyCautionPhase_MAX              = 4,
};

// Enum EndGame.EEndAICautionType
// NumValues: 0x0003
enum class EEndAICautionType : uint32
{
	Active                                   = 0,
	NonActive                                = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndHeatMapType
// NumValues: 0x0003
enum class EEndHeatMapType : uint32
{
	ENEMY                                    = 0,
	PLAYER                                   = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndAIRecognitionVolumeType
// NumValues: 0x000A
enum class EEndAIRecognitionVolumeType : uint8
{
	SafeArea                                 = 0,
	CombatArea                               = 1,
	CombatAreaEnemy                          = 2,
	ExcludeArea                              = 3,
	Common00                                 = 4,
	Common01                                 = 5,
	Common02                                 = 6,
	Common03                                 = 7,
	Common04                                 = 8,
	MAX                                      = 9,
};

// Enum EndGame.EEndAIDistanceType
// NumValues: 0x0005
enum class EEndAIDistanceType : uint8
{
	Dist2D                                   = 0,
	Dist3D                                   = 1,
	DistZ                                    = 2,
	DistZ_Relative                           = 3,
	EEndAIDistanceType_MAX                   = 4,
};

// Enum EndGame.EEndAILayerStatus
// NumValues: 0x0006
enum class EEndAILayerStatus : uint8
{
	None                                     = 0,
	Active                                   = 1,
	Deactive                                 = 2,
	Suspend                                  = 3,
	SuspendEntry                             = 4,
	EEndAILayerStatus_MAX                    = 5,
};

// Enum EndGame.EEndAILayer
// NumValues: 0x0016
enum class EEndAILayer : uint8
{
	DEFAULT                                  = 0,
	RIDE_MOUNT                               = 1,
	FIELD_FORCE                              = 2,
	INTEREST_DEFAULT                         = 3,
	FIELD_FIELDACTION                        = 4,
	MINIGAME_LOW                             = 5,
	VR_OVERRIDE                              = 6,
	BATTLE_DEFAULT                           = 7,
	BATTLE_DEMO                              = 8,
	PV_DEFAULT                               = 9,
	FIELD_ANIMATION                          = 10,
	PV_MOVE                                  = 11,
	FIELD_ACTION                             = 12,
	INTEREST_HIGH                            = 13,
	SITUATION                                = 14,
	MINIGAME                                 = 15,
	FIELD_CINEMA                             = 16,
	CINEMA                                   = 17,
	INTEREST_OVERCINEMA                      = 18,
	DEBUG                                    = 19,
	MAX                                      = 20,
	EMPTY                                    = 21,
};

// Enum EndGame.EEndAIControllerMask
// NumValues: 0x000F
enum class EEndAIControllerMask : uint8
{
	SYSTEM                                   = 0,
	BATTLE_SUMMON                            = 1,
	BATTLE_STATUS                            = 2,
	SUMMON_CUTSCENE_SKILL                    = 3,
	BATTLE_SYSTEM                            = 4,
	AUTO_PLAY                                = 5,
	BATTLE_SCENE_BP                          = 6,
	BATTLE_SYNC_ACTION                       = 7,
	CHARA_POP                                = 8,
	WAVE                                     = 9,
	BATTLE_SPECIAL_STATUS                    = 10,
	BATTLE_ENCOUNT                           = 11,
	WAIT_WIN_MOTION                          = 12,
	ANIMATION_BUDGET                         = 13,
	MAX                                      = 14,
};

// Enum EndGame.EEndAiCharaType
// NumValues: 0x0005
enum class EEndAiCharaType : uint8
{
	None                                     = 0,
	PCMembers                                = 1,
	EnemyMembers                             = 2,
	Leader                                   = 3,
	EEndAiCharaType_MAX                      = 4,
};

// Enum EndGame.EAIInfoParam
// NumValues: 0x000A
enum class EAIInfoParam : uint8
{
	eLOOKAT_START_DISTANCE                   = 0,
	eLOOKAT_END_DISTANCE                     = 1,
	eLOOKAT_START_ANGLE                      = 2,
	eLOOKAT_END_ANGLE                        = 3,
	eINTERVAL_MOVE_TIME                      = 4,
	eWAIT_MOVE_TIME                          = 5,
	eFOLLOW_DISTANCE                         = 6,
	eFOLLOW_RUN_DISTANCE                     = 7,
	eMAX                                     = 8,
	EAIInfoParam_MAX                         = 9,
};

// Enum EndGame.EAIInfoFlag
// NumValues: 0x0010
enum class EAIInfoFlag : uint8
{
	eCAN_MOVE                                = 0,
	eCAN_TURN                                = 1,
	eCAN_RUN                                 = 2,
	eCAN_STRAFE                              = 3,
	eCAN_TURN_MOVE                           = 4,
	eCAN_LOOKAT                              = 5,
	eCAN_LOOKAT_MOVE                         = 6,
	eCAN_LOOKAT_TURN                         = 7,
	eCAN_HERMITE_MOVE                        = 8,
	eCAN_MOVE_UPDATE                         = 9,
	eSTOP_MOVE_UPDATE                        = 10,
	eMAX                                     = 11,
	eCAN_FIX_MOVE                            = 11,
	eTURN_BEFORE_MOVE                        = 12,
	eMAX_DUMMY                               = 13,
	EAIInfoFlag_MAX                          = 14,
};

// Enum EndGame.EFieldAiPathWayType
// NumValues: 0x0005
enum class EFieldAiPathWayType : uint8
{
	None                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	Left                                     = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAiMoveType
// NumValues: 0x0006
enum class EEndAiMoveType : uint8
{
	RUN                                      = 0,
	DASH                                     = 1,
	WALK                                     = 2,
	HIGHWALK                                 = 3,
	JOG                                      = 4,
	MAX                                      = 5,
};

// Enum EndGame.EEndAIFrogGuysVolumeRollType
// NumValues: 0x0003
enum class EEndAIFrogGuysVolumeRollType : uint8
{
	CW                                       = 0,
	CCW                                      = 1,
	EEndAIFrogGuysVolumeRollType_MAX         = 2,
};

// Enum EndGame.EEndAIInterestActionState
// NumValues: 0x0005
enum class EEndAIInterestActionState : uint8
{
	Pending                                  = 0,
	Playing                                  = 1,
	Suspended                                = 2,
	Completed                                = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAIInterestActionTag
// NumValues: 0x0007
enum class EEndAIInterestActionTag : uint8
{
	Move                                     = 0,
	LookAt                                   = 1,
	Saccade                                  = 2,
	BodyEmotion                              = 3,
	BodyControl                              = 4,
	Voice                                    = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndAIIntentionPriority
// NumValues: 0x0005
enum class EEndAIIntentionPriority : uint8
{
	RuleBased                                = 0,
	High                                     = 1,
	Middle                                   = 2,
	Low                                      = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAIPersonalType
// NumValues: 0x0003
enum class EEndAIPersonalType : uint8
{
	PC                                       = 0,
	Mob                                      = 1,
	EEndAIPersonalType_MAX                   = 2,
};

// Enum EndGame.EEndAIUpdatePriority
// NumValues: 0x0005
enum class EEndAIUpdatePriority : uint8
{
	VelyHigh                                 = 0,
	High                                     = 1,
	Middle                                   = 2,
	Low                                      = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAIMoveNavPropertyType
// NumValues: 0x0005
enum class EEndAIMoveNavPropertyType : uint8
{
	Character                                = 0,
	Normal                                   = 1,
	NormalField                              = 2,
	NormalBattle                             = 3,
	EEndAIMoveNavPropertyType_MAX            = 4,
};

// Enum EndGame.EEndAIMoveStateType
// NumValues: 0x0012
enum class EEndAIMoveStateType : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	PathFollowing                            = 2,
	Spline                                   = 3,
	ToAerial                                 = 4,
	JumpGroundToGround                       = 5,
	JumpGroundToWall                         = 6,
	AerialIdle                               = 7,
	AerialPathFollowing                      = 8,
	AerialSpline                             = 9,
	AerialToGround                           = 10,
	JumpAerialToGround                       = 11,
	JumpAerialToWall                         = 12,
	WallIdle                                 = 13,
	WallPathFollowing                        = 14,
	JumpWallToGround                         = 15,
	JumpWallToWall                           = 16,
	EEndAIMoveStateType_MAX                  = 17,
};

// Enum EndGame.EEndAIMoveDefinitionFastDashActionExecuteType
// NumValues: 0x0004
enum class EEndAIMoveDefinitionFastDashActionExecuteType : uint8
{
	Always                                   = 0,
	Arrived                                  = 1,
	ArrivedNotify                            = 2,
	EEndAIMoveDefinitionFastDashActionExecuteType_MAX = 3,
};

// Enum EndGame.EEndAIMoveDefinitionFastDashGotoType
// NumValues: 0x0004
enum class EEndAIMoveDefinitionFastDashGotoType : uint8
{
	TargetCharacter                          = 0,
	LayoutItem                               = 1,
	OwnerStart                               = 2,
	EEndAIMoveDefinitionFastDashGotoType_MAX = 3,
};

// Enum EndGame.EEndAIMoveDefWarpToNearTheTargetType
// NumValues: 0x0003
enum class EEndAIMoveDefWarpToNearTheTargetType : uint8
{
	NearSelf                                 = 0,
	Angle                                    = 1,
	EEndAIMoveDefWarpToNearTheTargetType_MAX = 2,
};

// Enum EndGame.EEndAIRecognitionVolumeShapeType
// NumValues: 0x0003
enum class EEndAIRecognitionVolumeShapeType : uint8
{
	Cube                                     = 0,
	Cylinder                                 = 1,
	EEndAIRecognitionVolumeShapeType_MAX     = 2,
};

// Enum EndGame.EEndAISensorDangerObjectGraphicsMode
// NumValues: 0x0004
enum class EEndAISensorDangerObjectGraphicsMode : uint8
{
	All                                      = 0,
	Graphics                                 = 1,
	Performance                              = 2,
	EEndAISensorDangerObjectGraphicsMode_MAX = 3,
};

// Enum EndGame.EEndAISensorDangerObjectDodgeDirectionType
// NumValues: 0x0011
enum class EEndAISensorDangerObjectDodgeDirectionType : uint8
{
	Auto                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	Back                                     = 3,
	Side                                     = 4,
	Front                                    = 5,
	DmgLeft                                  = 6,
	DmgRight                                 = 7,
	DmgSide                                  = 8,
	DmgBack                                  = 9,
	DmgFront                                 = 10,
	RelLeft                                  = 11,
	RelRight                                 = 12,
	RelSide                                  = 13,
	RelBack                                  = 14,
	RelFront                                 = 15,
	EEndAISensorDangerObjectDodgeDirectionType_MAX = 16,
};

// Enum EndGame.EEndAISensorDangerObjectAttachType
// NumValues: 0x0004
enum class EEndAISensorDangerObjectAttachType : uint8
{
	Off                                      = 0,
	OnlyInit                                 = 1,
	On                                       = 2,
	EEndAISensorDangerObjectAttachType_MAX   = 3,
};

// Enum EndGame.EEndAISensorDangerObjectType
// NumValues: 0x0003
enum class EEndAISensorDangerObjectType : uint8
{
	DangerDamage                             = 0,
	DangerArea                               = 1,
	EEndAISensorDangerObjectType_MAX         = 2,
};

// Enum EndGame.EEndAISensorType
// NumValues: 0x0005
enum class EEndAISensorType : uint8
{
	BattleEyeTrace                           = 0,
	AbilityReaction                          = 1,
	DangerObject                             = 2,
	Interest                                 = 3,
	MAX                                      = 4,
};

// Enum EndGame.ERenoMineMovementMode
// NumValues: 0x0012
enum class ERenoMineMovementMode : uint8
{
	NONE                                     = 0,
	Spawning                                 = 1,
	Prowl                                    = 2,
	Prowl_1Mines                             = 3,
	Prowl_2Mines                             = 4,
	Prowl_3Mines                             = 5,
	Prowl_4Mines                             = 6,
	Prowl_5Mines                             = 7,
	Prowl_6Mines                             = 8,
	Prowl_7Mines                             = 9,
	Prowl_8Mines                             = 10,
	Prowl_9Mines                             = 11,
	Prowl_10Mines                            = 12,
	RollAroundTornado                        = 13,
	RollAround_SpecialAttack                 = 14,
	DestroyedOutsideOfField                  = 15,
	Destroyed                                = 16,
	ERenoMineMovementMode_MAX                = 17,
};

// Enum EndGame.EEndAIActionPackTransOptionReleaseTiming
// NumValues: 0x0004
enum class EEndAIActionPackTransOptionReleaseTiming : uint8
{
	ActionAfter                              = 0,
	Keep                                     = 1,
	ForceRelease                             = 2,
	EEndAIActionPackTransOptionReleaseTiming_MAX = 3,
};

// Enum EndGame.EEndAIIntervalType
// NumValues: 0x0005
enum class EEndAIIntervalType : uint8
{
	LightAttack                              = 0,
	HardAttack                               = 1,
	ExtraInterval                            = 2,
	Max                                      = 3,
	None                                     = 4,
};

// Enum EndGame.EEndAIStateBattleEnemyState
// NumValues: 0x0009
enum class EEndAIStateBattleEnemyState : uint8
{
	STATE_STANDBY                            = 0,
	STATE_ATTACK                             = 1,
	STATE_WAIT                               = 2,
	STATE_PROWL                              = 3,
	STATE_REACTION                           = 4,
	STATE_FORCE_ACTION                       = 5,
	STATE_COMBINATION                        = 6,
	STATE_RETURN_TO_BATTLE_AREA              = 7,
	STATE_MAX                                = 8,
};

// Enum EndGame.EEndAIFollowBehaviorTreeFlow
// NumValues: 0x0003
enum class EEndAIFollowBehaviorTreeFlow : uint8
{
	None                                     = 0,
	FollowMove                               = 1,
	EEndAIFollowBehaviorTreeFlow_MAX         = 2,
};

// Enum EndGame.EEndAIFollowPosition
// NumValues: 0x0005
enum class EEndAIFollowPosition : uint8
{
	NONE                                     = 0,
	FORWARD                                  = 1,
	BACKWARD                                 = 2,
	BACKWARD_SUB                             = 3,
	MAX                                      = 4,
};

// Enum EndGame.EEndAIFollowMode
// NumValues: 0x000C
enum class EEndAIFollowMode : uint8
{
	Normal                                   = 0,
	NormalWait                               = 1,
	PointLeave                               = 2,
	PointLeaveWait                           = 3,
	BackwardLeaveLeaderToPoint               = 4,
	GlideJumpAreaLeave                       = 5,
	GlideTeleport                            = 6,
	Glide                                    = 7,
	JetMoveToStartPosition                   = 8,
	JetTeleport                              = 9,
	Jet                                      = 10,
	EEndAIFollowMode_MAX                     = 11,
};

// Enum EndGame.EEndAIBattleEvacuationRole
// NumValues: 0x000F
enum class EEndAIBattleEvacuationRole : uint8
{
	None                                     = 0,
	BattleMain                               = 1,
	BattleSubStart                           = 2,
	BattleSub1                               = 2,
	BattleSub2                               = 3,
	BattleSub3                               = 4,
	BattleSub4                               = 5,
	BattleSub5                               = 6,
	BattleSubEnd                             = 7,
	FieldMain                                = 8,
	FieldSubStart                            = 9,
	FieldSub1                                = 9,
	FieldSub2                                = 10,
	FieldSubEnd                              = 11,
	EEndAIBattleEvacuationRole_MAX           = 12,
};

// Enum EndGame.EEndAIFrogGuysBehaviorType
// NumValues: 0x0004
enum class EEndAIFrogGuysBehaviorType : uint8
{
	Weak                                     = 0,
	Normal                                   = 1,
	Strong                                   = 2,
	EEndAIFrogGuysBehaviorType_MAX           = 3,
};

// Enum EndGame.EEndAIFrogGuysType
// NumValues: 0x0003
enum class EEndAIFrogGuysType : uint8
{
	Disk                                     = 0,
	Roll                                     = 1,
	EEndAIFrogGuysType_MAX                   = 2,
};

// Enum EndGame.EEndAIStateAnimSequence
// NumValues: 0x0005
enum class EEndAIStateAnimSequence : uint8
{
	Start                                    = 0,
	Loop                                     = 1,
	End                                      = 2,
	Max                                      = 3,
	None                                     = 4,
};

// Enum EndGame.EEndAIStateBattleEvacuationType
// NumValues: 0x0005
enum class EEndAIStateBattleEvacuationType : uint8
{
	None                                     = 0,
	Auto                                     = 1,
	FieldMode                                = 2,
	BattleMode                               = 3,
	EEndAIStateBattleEvacuationType_MAX      = 4,
};

// Enum EndGame.EEndExtensionAIStateFieldAction
// NumValues: 0x0006
enum class EEndExtensionAIStateFieldAction : uint8
{
	NONE                                     = 0,
	LADDER                                   = 1,
	CRACK_MOVE                               = 2,
	CROUCHED                                 = 3,
	CHOCOBO_CLIMB                            = 4,
	EEndExtensionAIStateFieldAction_MAX      = 5,
};

// Enum EndGame.EEndExtensionAIStateHintAnimal
// NumValues: 0x0002
enum class EEndExtensionAIStateHintAnimal : uint8
{
	NONE                                     = 0,
	EEndExtensionAIStateHintAnimal_MAX       = 1,
};

// Enum EndGame.EEndExtensionAIStateBattleEvacuation
// NumValues: 0x0006
enum class EEndExtensionAIStateBattleEvacuation : uint8
{
	NONE                                     = 0,
	FIELD_MODE                               = 1,
	BATTLE_MODE                              = 2,
	BUGEN_HAGEN                              = 16,
	BUGEN_HAGEN_RETURN                       = 17,
	EEndExtensionAIStateBattleEvacuation_MAX = 18,
};

// Enum EndGame.EEndExtensionAIStateWildAnimal
// NumValues: 0x0005
enum class EEndExtensionAIStateWildAnimal : uint8
{
	NONE                                     = 0,
	ITEM                                     = 1,
	ITEM_FOLLOWER                            = 2,
	VEHICLE                                  = 3,
	EEndExtensionAIStateWildAnimal_MAX       = 4,
};

// Enum EndGame.EEndExtensionAIStateInterest
// NumValues: 0x0002
enum class EEndExtensionAIStateInterest : uint8
{
	NONE                                     = 0,
	EEndExtensionAIStateInterest_MAX         = 1,
};

// Enum EndGame.EEndExtensionAIStateUnique
// NumValues: 0x000C
enum class EEndExtensionAIStateUnique : uint8
{
	NONE                                     = 0,
	MINIGAME_CHOCOBOCAPTURE                  = 1,
	MOVE_SURROUNDINGS                        = 2,
	STALKER                                  = 3,
	MINIGAME_FROGGUYS                        = 4,
	MINIGAME_ANIMALRUN_ATTACKR               = 5,
	MINIGAME_ANIMALRUN_GOALKEEPER            = 6,
	MINIGAME_ANIMALRUN_WANDERER              = 7,
	MINIGAME_FROGGUYS_ROLL                   = 8,
	MINIGAME_ANIMALRUN_STRIKER               = 9,
	MINIGAME_ANIMALRUN_ANCHOR                = 10,
	EEndExtensionAIStateUnique_MAX           = 11,
};

// Enum EndGame.EEndExtensionAIStateAnimation
// NumValues: 0x0003
enum class EEndExtensionAIStateAnimation : uint8
{
	NONE                                     = 0,
	STALKER                                  = 1,
	EEndExtensionAIStateAnimation_MAX        = 2,
};

// Enum EndGame.EEndExtensionAIStateWandering
// NumValues: 0x0003
enum class EEndExtensionAIStateWandering : uint8
{
	NONE                                     = 0,
	AROUND                                   = 1,
	EEndExtensionAIStateWandering_MAX        = 2,
};

// Enum EndGame.EEndExtensionAIStateFollow
// NumValues: 0x000E
enum class EEndExtensionAIStateFollow : uint8
{
	NONE                                     = 0,
	PLAYER                                   = 1,
	PLAYER_SUB                               = 2,
	CHOCOBO                                  = 3,
	CHOCOBO_MEMBER                           = 4,
	CHOCOBO_MEMBER_SKY                       = 5,
	CHOCOBO_MEMBER_OCEAN                     = 6,
	CHOCOBO_SUB                              = 7,
	CHOCOBO_ROPE                             = 8,
	HINA_CHOCOBO                             = 9,
	STALKER                                  = 10,
	STOP_AND_WALK                            = 11,
	DATE                                     = 12,
	EEndExtensionAIStateFollow_MAX           = 13,
};

// Enum EndGame.EEndExtensionAIStateLead
// NumValues: 0x0002
enum class EEndExtensionAIStateLead : uint8
{
	NONE                                     = 0,
	EEndExtensionAIStateLead_MAX             = 1,
};

// Enum EndGame.EEndExtensionAIStateMoveTo
// NumValues: 0x0002
enum class EEndExtensionAIStateMoveTo : uint8
{
	NONE                                     = 0,
	EEndExtensionAIStateMoveTo_MAX           = 1,
};

// Enum EndGame.EEndExtensionAIStateStay
// NumValues: 0x0002
enum class EEndExtensionAIStateStay : uint8
{
	NONE                                     = 0,
	EEndExtensionAIStateStay_MAX             = 1,
};

// Enum EndGame.EEndExtensionAIStateBattle
// NumValues: 0x000A
enum class EEndExtensionAIStateBattle : uint8
{
	NONE                                     = 0,
	PLAYER                                   = 1,
	ENEMY                                    = 2,
	SUB_PLAYER                               = 3,
	BOSS                                     = 4,
	BOSS_EB0004_MINE                         = 5,
	BOSS_EB2000                              = 6,
	FRIEND                                   = 7,
	ENEMY_EN2219                             = 8,
	EEndExtensionAIStateBattle_MAX           = 9,
};

// Enum EndGame.EEndExtensionAIStateConnectEncount
// NumValues: 0x0008
enum class EEndExtensionAIStateConnectEncount : uint8
{
	NONE                                     = 0,
	PLAYER_CAUTION                           = 1,
	ENEMY_CAUTION                            = 2,
	ENEMY_RETURN_HOME                        = 3,
	FRIEND_CAUTION                           = 4,
	ENEMY_HYBRID_CAUTION                     = 5,
	ENEMY_HYBRID_RETURN_HOME                 = 6,
	EEndExtensionAIStateConnectEncount_MAX   = 7,
};

// Enum EndGame.EEndExtensionAIStateDoNothing
// NumValues: 0x0003
enum class EEndExtensionAIStateDoNothing : uint8
{
	NONE                                     = 0,
	BOSS_EB2000                              = 1,
	EEndExtensionAIStateDoNothing_MAX        = 2,
};

// Enum EndGame.EEndAIState
// NumValues: 0x0012
enum class EEndAIState : uint8
{
	EMPTY                                    = 0,
	DO_NOTHINY                               = 1,
	CONNECT_ENCOUNT                          = 2,
	BATTLE                                   = 3,
	STAY                                     = 4,
	MOVE_TO                                  = 5,
	LEAD                                     = 6,
	FOLLOW                                   = 7,
	WANDERING                                = 8,
	ANIMATION                                = 9,
	SINGLE_ANIMATION                         = 10,
	UNIQUE                                   = 11,
	INTEREST                                 = 12,
	WILD_ANIMAL                              = 13,
	BATTLE_EVACUATION                        = 14,
	HINT_ANIMAL                              = 15,
	FIELDACTION                              = 16,
	MAX                                      = 17,
};

// Enum EndGame.EEndAILogicalOperator
// NumValues: 0x0003
enum class EEndAILogicalOperator : uint8
{
	AND                                      = 0,
	OR                                       = 1,
	EEndAILogicalOperator_MAX                = 2,
};

// Enum EndGame.EEndAIStateParamBool
// NumValues: 0x0004
enum class EEndAIStateParamBool : uint8
{
	FalseFlag                                = 0,
	TrueFlag                                 = 1,
	DefaultFlag                              = 2,
	EEndAIStateParamBool_MAX                 = 3,
};

// Enum EndGame.EEndAISteeringParamLayer
// NumValues: 0x0006
enum class EEndAISteeringParamLayer : uint8
{
	Default                                  = 0,
	System                                   = 1,
	MiniGame                                 = 2,
	AIState                                  = 3,
	Debug                                    = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndAIAsyncNavRequestType
// NumValues: 0x0006
enum class EEndAIAsyncNavRequestType : uint8
{
	FindPath                                 = 0,
	FindPathFilter                           = 1,
	NavMeshPathDistance                      = 2,
	NavMeshPathDistanceFilter                = 3,
	IsConnectedNavMeshPathFilter             = 4,
	EEndAIAsyncNavRequestType_MAX            = 5,
};

// Enum EndGame.EEndAnimalRunAIPhase
// NumValues: 0x000B
enum class EEndAnimalRunAIPhase : uint8
{
	None                                     = 0,
	Prepare                                  = 1,
	Shoot                                    = 2,
	Chase                                    = 3,
	Dribble                                  = 4,
	WaitAirBall                              = 5,
	Rest                                     = 6,
	StandBy                                  = 7,
	Defence                                  = 8,
	Wandering                                = 9,
	EEndAnimalRunAIPhase_MAX                 = 10,
};

// Enum EndGame.EEndAnimalRunFloatParameterType
// NumValues: 0x0014
enum class EEndAnimalRunFloatParameterType : uint8
{
	CommonShootPower                         = 0,
	CommonShootPowerVert                     = 1,
	AttackBaseShootDistance                  = 2,
	AttackBaseShootDiffAngle                 = 3,
	AttackBaseRestTimeAfterShoot             = 4,
	AttackerRestTime                         = 5,
	AttackerRestTimeMax                      = 6,
	AttackerChasingTime                      = 7,
	AttackerChasingTimeMax                   = 8,
	AttackerStopChaseDisntace                = 9,
	StrikerRangeMin                          = 10,
	StrikerRangeMax                          = 11,
	GoalKeeperSearchRangeRadius              = 12,
	GoalKeeperRestTime                       = 13,
	GoalKeeperRestTimeMax                    = 14,
	GoalKeeperMoveRangeRadius                = 15,
	GoalKeeperRestTimeAfterShoot             = 16,
	AnchorRangeMin                           = 17,
	AnchorRangeMax                           = 18,
	EEndAnimalRunFloatParameterType_MAX      = 19,
};

// Enum EndGame.EEndAnimalRunBallSelectionType
// NumValues: 0x0003
enum class EEndAnimalRunBallSelectionType : uint8
{
	NearestSelf                              = 0,
	NearestTarget                            = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndAnimalRunTargetSelectionSortType
// NumValues: 0x0007
enum class EEndAnimalRunTargetSelectionSortType : uint8
{
	Score                                    = 0,
	DistanceFromBall                         = 1,
	Player                                   = 2,
	FirstPlacePlayer                         = 3,
	CurrentTarget                            = 4,
	AllyTarget                               = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndRunWildCheckTimerStatusType
// NumValues: 0x0003
enum class EEndRunWildCheckTimerStatusType : uint8
{
	IsRunning                                = 0,
	IsFinished                               = 1,
	EEndRunWildCheckTimerStatusType_MAX      = 2,
};

// Enum EndGame.EEndAnimalRunTimerType
// NumValues: 0x0004
enum class EEndAnimalRunTimerType : uint8
{
	Rest                                     = 0,
	Chase                                    = 1,
	AfterShoot                               = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndAnimalRunAngleType
// NumValues: 0x0008
enum class EEndAnimalRunAngleType : uint8
{
	OwnerForward                             = 0,
	BallMoveDirection                        = 1,
	TargetGoalForward                        = 2,
	SelfGoalForward                          = 3,
	BallToTargetGoal                         = 4,
	OwnerToBall                              = 5,
	OwnerToTargetGoal                        = 6,
	EEndAnimalRunAngleType_MAX               = 7,
};

// Enum EndGame.EEndAnimalRunAIState
// NumValues: 0x0004
enum class EEndAnimalRunAIState : uint8
{
	Wandering                                = 0,
	Attacker                                 = 1,
	GoalKeeper                               = 2,
	EEndAnimalRunAIState_MAX                 = 3,
};

// Enum EndGame.EEndAnimalRunTeamMode
// NumValues: 0x0004
enum class EEndAnimalRunTeamMode : uint8
{
	Default                                  = 0,
	Wild                                     = 1,
	GameOver                                 = 2,
	Max                                      = 3,
};

// Enum EndGame.ETeamType
// NumValues: 0x0006
enum class ETeamType : uint8
{
	TeamA                                    = 0,
	TeamB                                    = 1,
	TeamC                                    = 2,
	TeamD                                    = 3,
	Neutral                                  = 4,
	Max                                      = 5,
};

// Enum EndGame.EAnimalTriggerCondition
// NumValues: 0x0008
enum class EAnimalTriggerCondition : uint8
{
	GameStart                                = 0,
	GameEnd                                  = 1,
	SameGoalBall                             = 2,
	GoalA                                    = 3,
	GoalB                                    = 4,
	GoalC                                    = 5,
	GoalD                                    = 6,
	Max                                      = 7,
};

// Enum EndGame.EAnimalFinishCondition
// NumValues: 0x0003
enum class EAnimalFinishCondition : uint8
{
	TimeUp                                   = 0,
	AllBallClear                             = 1,
	Max                                      = 2,
};

// Enum EndGame.EAnimalRefereeType
// NumValues: 0x0003
enum class EAnimalRefereeType : uint8
{
	Rank                                     = 0,
	Score                                    = 1,
	Max                                      = 2,
};

// Enum EndGame.EBallSpawnConditionType
// NumValues: 0x0003
enum class EBallSpawnConditionType : uint8
{
	Once                                     = 0,
	repetition                               = 1,
	Max                                      = 2,
};

// Enum EndGame.EBallSpawnCondition
// NumValues: 0x000A
enum class EBallSpawnCondition : uint8
{
	SpawnElapsedTime                         = 0,
	StartElapsedTime                         = 1,
	GoalBallIndex                            = 2,
	CurrentBallCount                         = 3,
	TeamAScore                               = 4,
	TeamBScore                               = 5,
	TeamCScore                               = 6,
	TeamDScore                               = 7,
	TotalScore                               = 8,
	Max                                      = 9,
};

// Enum EndGame.EEndTreasureAnimationPlayerType
// NumValues: 0x000B
enum class EEndTreasureAnimationPlayerType : uint8
{
	Cloud                                    = 0,
	Tifa                                     = 1,
	Aerith                                   = 2,
	Yuffie                                   = 3,
	Barret                                   = 4,
	RedXIII                                  = 5,
	CaitSith                                 = 6,
	ChocoboOnRiding                          = 7,
	FatMoogleOnRiding                        = 8,
	Unknown                                  = 9,
	EEndTreasureAnimationPlayerType_MAX      = 10,
};

// Enum EndGame.EEndAnimalRunTargetCorrectionType
// NumValues: 0x0004
enum class EEndAnimalRunTargetCorrectionType : uint8
{
	TargetGoal                               = 0,
	TargetBall                               = 1,
	Shoot                                    = 2,
	EEndAnimalRunTargetCorrectionType_MAX    = 3,
};

// Enum EndGame.EEndAnimNotifyBattleType
// NumValues: 0x0002
enum class EEndAnimNotifyBattleType : uint8
{
	StartSummon                              = 0,
	EEndAnimNotifyBattleType_MAX             = 1,
};

// Enum EndGame.EEndAnimNotifyBattleAbilityEnergyType
// NumValues: 0x0003
enum class EEndAnimNotifyBattleAbilityEnergyType : uint32
{
	Charge                                   = 0,
	Discharge                                = 1,
	EEndAnimNotifyBattleAbilityEnergyType_MAX = 2,
};

// Enum EndGame.EEndNotifyBattleCameraChangeTimingType
// NumValues: 0x0003
enum class EEndNotifyBattleCameraChangeTimingType : uint8
{
	Branch0                                  = 0,
	Branch1                                  = 1,
	EEndNotifyBattleCameraChangeTimingType_MAX = 2,
};

// Enum EndGame.EEndAnimNotifyBattleDamageRandomProbabilityEffect
// NumValues: 0x0003
enum class EEndAnimNotifyBattleDamageRandomProbabilityEffect : uint32
{
	None                                     = 0,
	StatusChangeCritical                     = 1,
	EEndAnimNotifyBattleDamageRandomProbabilityEffect_MAX = 2,
};

// Enum EndGame.EEndAnimNotifyBattleUniqueAbilityChargeCrystalActionType
// NumValues: 0x0004
enum class EEndAnimNotifyBattleUniqueAbilityChargeCrystalActionType : uint8
{
	None                                     = 0,
	Summon                                   = 1,
	Broken                                   = 2,
	EEndAnimNotifyBattleUniqueAbilityChargeCrystalActionType_MAX = 3,
};

// Enum EndGame.EEndAnimNotifyBattleUniqueAbilityGraniteJailActionType
// NumValues: 0x0005
enum class EEndAnimNotifyBattleUniqueAbilityGraniteJailActionType : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Finish                                   = 2,
	NotifyParents                            = 3,
	EEndAnimNotifyBattleUniqueAbilityGraniteJailActionType_MAX = 4,
};

// Enum EndGame.EEndAnimNotifyBattleUniqueAbilityRockThrowActionType
// NumValues: 0x0005
enum class EEndAnimNotifyBattleUniqueAbilityRockThrowActionType : uint8
{
	None                                     = 0,
	Have                                     = 1,
	Throw                                    = 2,
	Broken                                   = 3,
	EEndAnimNotifyBattleUniqueAbilityRockThrowActionType_MAX = 4,
};

// Enum EndGame.EEndAnimNotifyBuggyMessageType
// NumValues: 0x0004
enum class EEndAnimNotifyBuggyMessageType : uint8
{
	None                                     = 0,
	AppearEventFocusCarKey                   = 1,
	AppearEventRunBuggy                      = 2,
	MAX                                      = 3,
};

// Enum EndGame.EChocoboCaptureRodeoPhase
// NumValues: 0x000D
enum class EChocoboCaptureRodeoPhase : uint8
{
	CCR_AttachStart                          = 0,
	CCR_DetachStart                          = 1,
	CCR_FeatherLeftVisible                   = 2,
	CCR_FeatherLeftHidden                    = 3,
	CCR_FeatherRightVisible                  = 4,
	CCR_FeatherRightHidden                   = 5,
	CCR_StoneHidden                          = 6,
	CCR_EatingHidden                         = 7,
	CCR_EnableCancelGetItem                  = 8,
	CCR_SetReinsConstraint                   = 9,
	CCR_ResetReinsConstraint                 = 10,
	Num                                      = 11,
	EChocoboCaptureRodeoPhase_MAX            = 12,
};

// Enum EndGame.EChocoboCraftEvent
// NumValues: 0x0006
enum class EChocoboCraftEvent : uint32
{
	DisableEffects_Immediate                 = 0,
	DisableEffects_Auto                      = 1,
	ItemGet                                  = 2,
	ItemFound                                = 3,
	SpawnHoleFA                              = 4,
	EChocoboCraftEvent_MAX                   = 5,
};

// Enum EndGame.EEndCrimsonRocketPunchMovementType
// NumValues: 0x0003
enum class EEndCrimsonRocketPunchMovementType : uint8
{
	LAUNCH                                   = 0,
	RETURN                                   = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndCrimsonRocketPunchSide
// NumValues: 0x0003
enum class EEndCrimsonRocketPunchSide : uint8
{
	LEFT                                     = 0,
	RIGHT                                    = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndDeactiveResidentEffectType
// NumValues: 0x0003
enum class EEndDeactiveResidentEffectType : uint8
{
	LoopOff                                  = 0,
	Hidden                                   = 1,
	EEndDeactiveResidentEffectType_MAX       = 2,
};

// Enum EndGame.EEndAnimNotifyAttachType
// NumValues: 0x000D
enum class EEndAnimNotifyAttachType : uint8
{
	None                                     = 0,
	Character                                = 1,
	Weapon1                                  = 2,
	Weapon2                                  = 3,
	Weapon3                                  = 4,
	Weapon4                                  = 5,
	Weapon5                                  = 6,
	Weapon6                                  = 7,
	Weapon7                                  = 8,
	Weapon8                                  = 9,
	Weapon9                                  = 10,
	Weapon10                                 = 11,
	EEndAnimNotifyAttachType_MAX             = 12,
};

// Enum EndGame.EEndAnimNotifyBranchConditionType
// NumValues: 0x0008
enum class EEndAnimNotifyBranchConditionType : uint8
{
	None                                     = 0,
	CharaID                                  = 1,
	Weapon1CharaID                           = 2,
	Weapon2CharaID                           = 3,
	Weapon3CharaID                           = 4,
	Weapon4CharaID                           = 5,
	AbilityID                                = 6,
	EEndAnimNotifyBranchConditionType_MAX    = 7,
};

// Enum EndGame.EEndAnimNotifyEffectCharaPropertyAttachType
// NumValues: 0x0006
enum class EEndAnimNotifyEffectCharaPropertyAttachType : uint8
{
	Character                                = 0,
	Weapon1                                  = 1,
	Weapon2                                  = 2,
	Weapon3                                  = 3,
	Weapon4                                  = 4,
	EEndAnimNotifyEffectCharaPropertyAttachType_MAX = 5,
};

// Enum EndGame.EEndAnimNotifyEffectCharaPropertyReplaceType
// NumValues: 0x0007
enum class EEndAnimNotifyEffectCharaPropertyReplaceType : uint8
{
	Character                                = 0,
	Weapon1                                  = 1,
	Weapon2                                  = 2,
	Weapon3                                  = 3,
	Weapon4                                  = 4,
	Ability                                  = 5,
	EEndAnimNotifyEffectCharaPropertyReplaceType_MAX = 6,
};

// Enum EndGame.EMotionPhaseNotify
// NumValues: 0x0005
enum class EMotionPhaseNotify : uint8
{
	MP_InjectionCancel                       = 0,
	MP_InjectionEffect                       = 1,
	MP_SelectRotation                        = 2,
	Num                                      = 3,
	EMotionPhaseNotify_MAX                   = 4,
};

// Enum EndGame.EEndAnimNotifyMiniGameBuggyEnergyType
// NumValues: 0x0003
enum class EEndAnimNotifyMiniGameBuggyEnergyType : uint32
{
	Charge                                   = 0,
	Discharge                                = 1,
	EEndAnimNotifyMiniGameBuggyEnergyType_MAX = 2,
};

// Enum EndGame.EMoogleShopNotifyType
// NumValues: 0x0005
enum class EMoogleShopNotifyType : uint8
{
	MSN_AddPenalty                           = 0,
	MSN_GimmickStart                         = 1,
	MSN_GimmickStop                          = 2,
	Num                                      = 3,
	EMoogleShopNotifyType_MAX                = 4,
};

// Enum EndGame.ETimelineMovementType
// NumValues: 0x0004
enum class ETimelineMovementType : uint8
{
	Straight                                 = 0,
	Curve                                    = 1,
	SameAsPrevious                           = 2,
	ETimelineMovementType_MAX                = 3,
};

// Enum EndGame.EEndAnimNotifyPlayerChocoboMessageType
// NumValues: 0x0003
enum class EEndAnimNotifyPlayerChocoboMessageType : uint8
{
	None                                     = 0,
	GlideJumpRisingCancel                    = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndAnimNotifyAttachCollisionTMRule
// NumValues: 0x0004
enum class EEndAnimNotifyAttachCollisionTMRule : uint8
{
	ComponentTM                              = 0,
	ComponentTMSocketLocation                = 1,
	ComponentTMSocketLocationXY              = 2,
	EEndAnimNotifyAttachCollisionTMRule_MAX  = 3,
};

// Enum EndGame.EEndAnimNotifyAttachCollisionType
// NumValues: 0x0003
enum class EEndAnimNotifyAttachCollisionType : uint8
{
	DamageHit                                = 0,
	PushCollision                            = 1,
	EEndAnimNotifyAttachCollisionType_MAX    = 2,
};

// Enum EndGame.EEndAnimNotifyBattleAbilityAnimationReplaceCondition
// NumValues: 0x0003
enum class EEndAnimNotifyBattleAbilityAnimationReplaceCondition : uint8
{
	None                                     = 0,
	UpgradeBraveMode                         = 1,
	EEndAnimNotifyBattleAbilityAnimationReplaceCondition_MAX = 2,
};

// Enum EndGame.EEndBattleAbilityMoveWeaponRelativeToTargetType
// NumValues: 0x0004
enum class EEndBattleAbilityMoveWeaponRelativeToTargetType : uint8
{
	Toward                                   = 0,
	Stay                                     = 1,
	Return                                   = 2,
	EEndBattleAbilityMoveWeaponRelativeToTargetType_MAX = 3,
};

// Enum EndGame.EEndAnimNotifyStateBattleDamagePartyChocoboCondition
// NumValues: 0x0002
enum class EEndAnimNotifyStateBattleDamagePartyChocoboCondition : uint8
{
	PlayerRidingOnly                         = 0,
	MAX                                      = 1,
};

// Enum EndGame.EEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelConditionType
// NumValues: 0x0003
enum class EEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelConditionType : uint8
{
	None                                     = 0,
	StateConditionNot                        = 1,
	EEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelConditionType_MAX = 2,
};

// Enum EndGame.EEndBattleTargetCorrectionDirectionType
// NumValues: 0x0004
enum class EEndBattleTargetCorrectionDirectionType : uint8
{
	TargetPosition                           = 0,
	TargetBackward                           = 1,
	FieldPosition                            = 2,
	EEndBattleTargetCorrectionDirectionType_MAX = 3,
};

// Enum EndGame.EEndBattleTargetCorrectionDistanceType
// NumValues: 0x0006
enum class EEndBattleTargetCorrectionDistanceType : uint8
{
	TargetPosition                           = 0,
	TargetBackwardLinePosition               = 1,
	FieldPosition                            = 2,
	FieldPositionScaleRoot                   = 3,
	JustMoveToFieldPosition                  = 4,
	EEndBattleTargetCorrectionDistanceType_MAX = 5,
};

// Enum EndGame.EEndFieldActionNotifyToMoveAction
// NumValues: 0x0007
enum class EEndFieldActionNotifyToMoveAction : uint8
{
	None                                     = 0,
	Move                                     = 2,
	Attack                                   = 4,
	Parkour                                  = 8,
	Dodge                                    = 16,
	Swimming                                 = 32,
	EEndFieldActionNotifyToMoveAction_MAX    = 33,
};

// Enum EndGame.EEndAnimNotifyDitherFadeType
// NumValues: 0x0003
enum class EEndAnimNotifyDitherFadeType : uint8
{
	Default                                  = 0,
	Battle1                                  = 1,
	EEndAnimNotifyDitherFadeType_MAX         = 2,
};

// Enum EndGame.EEndAnimRopeConstraint
// NumValues: 0x0004
enum class EEndAnimRopeConstraint : uint8
{
	HandL                                    = 0,
	HandR                                    = 1,
	Foot                                     = 2,
	EEndAnimRopeConstraint_MAX               = 3,
};

// Enum EndGame.EEndAnimDisableUpdateCondition
// NumValues: 0x0004
enum class EEndAnimDisableUpdateCondition : uint8
{
	None                                     = 0,
	NoAnimation                              = 1,
	Always                                   = 2,
	EEndAnimDisableUpdateCondition_MAX       = 3,
};

// Enum EndGame.EEndAnimUpdateType
// NumValues: 0x0006
enum class EEndAnimUpdateType : uint8
{
	Default                                  = 0,
	Rope                                     = 1,
	WildAnimal                               = 2,
	Chocobo                                  = 3,
	ChocoboRider                             = 4,
	EEndAnimUpdateType_MAX                   = 5,
};

// Enum EndGame.EEndAnimComponentControlLayer
// NumValues: 0x0003
enum class EEndAnimComponentControlLayer : uint8
{
	Default                                  = 0,
	Cinema                                   = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndBonamikResetType
// NumValues: 0x0003
enum class EEndBonamikResetType : uint8
{
	Default                                  = 0,
	Cinema                                   = 1,
	EEndBonamikResetType_MAX                 = 2,
};

// Enum EndGame.EEndDeformAnimationType
// NumValues: 0x0007
enum class EEndDeformAnimationType : uint8
{
	PlayOneShot                              = 0,
	PlayLoop                                 = 1,
	SetPosition                              = 2,
	SetStartPosition                         = 3,
	SetEndPosition                           = 4,
	SyncAnimation                            = 5,
	EEndDeformAnimationType_MAX              = 6,
};

// Enum EndGame.EEndPhysicsImpulseType
// NumValues: 0x0004
enum class EEndPhysicsImpulseType : uint32
{
	Default                                  = 0,
	Angular                                  = 1,
	Radial                                   = 2,
	EEndPhysicsImpulseType_MAX               = 3,
};

// Enum EndGame.EEndBumpActionLayer
// NumValues: 0x000B
enum class EEndBumpActionLayer : uint8
{
	Action                                   = 0,
	Field                                    = 1,
	Animation                                = 2,
	UpperAnimation                           = 3,
	Notify                                   = 4,
	ComponentField                           = 5,
	AI                                       = 6,
	Vehicle                                  = 7,
	Movement                                 = 8,
	Debug                                    = 9,
	Max                                      = 10,
};

// Enum EndGame.EEndIdleActionOverrideType
// NumValues: 0x0005
enum class EEndIdleActionOverrideType : uint8
{
	AIState                                  = 0,
	Interest                                 = 1,
	WildAnimal                               = 2,
	Debug                                    = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndWalkRunActionForceDeactiveType
// NumValues: 0x0004
enum class EEndWalkRunActionForceDeactiveType : uint8
{
	AIState                                  = 0,
	AIMove                                   = 1,
	Debug                                    = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndIdleActionForceDeactiveType
// NumValues: 0x0007
enum class EEndIdleActionForceDeactiveType : uint8
{
	Action                                   = 0,
	AIState                                  = 1,
	Interest                                 = 2,
	Vehicle                                  = 3,
	MiniGame                                 = 4,
	Debug                                    = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndEmotionalGesture
// NumValues: 0x0004
enum class EEndEmotionalGesture : uint8
{
	None                                     = 0,
	LookAround                               = 1,
	Warning                                  = 2,
	EEndEmotionalGesture_MAX                 = 3,
};

// Enum EndGame.EEndEmotionType
// NumValues: 0x0006
enum class EEndEmotionType : uint8
{
	Unknown                                  = 0,
	Calm                                     = 1,
	Anger                                    = 2,
	Joy                                      = 3,
	Sorrow                                   = 4,
	EEndEmotionType_MAX                      = 5,
};

// Enum EndGame.EEndWireReelState
// NumValues: 0x0005
enum class EEndWireReelState : uint8
{
	Idle                                     = 0,
	Launch                                   = 1,
	Keeping                                  = 2,
	Release                                  = 3,
	EEndWireReelState_MAX                    = 4,
};

// Enum EndGame.EEndDeadActionImpulseStrength
// NumValues: 0x0004
enum class EEndDeadActionImpulseStrength : uint8
{
	Weak                                     = 0,
	Medium                                   = 1,
	Strong                                   = 2,
	EEndDeadActionImpulseStrength_MAX        = 3,
};

// Enum EndGame.EEndAnimContactReacationCondition
// NumValues: 0x0004
enum class EEndAnimContactReacationCondition : uint8
{
	Default                                  = 0,
	AllowedPlayingMobPrefab                  = 1,
	AllowedPlayingMobPrefabAndExtraAction    = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndControlBoneCondition
// NumValues: 0x0004
enum class EEndControlBoneCondition : uint8
{
	None                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	EEndControlBoneCondition_MAX             = 3,
};

// Enum EndGame.EEndControlBoneType
// NumValues: 0x0006
enum class EEndControlBoneType : uint8
{
	None                                     = 0,
	OffsetComponentSpace                     = 1,
	OffsetWorldSpace                         = 2,
	ConstraintComponentSpace                 = 3,
	ConstraintWorldSpace                     = 4,
	EEndControlBoneType_MAX                  = 5,
};

// Enum EndGame.EEndControlBone
// NumValues: 0x0007
enum class EEndControlBone : uint8
{
	Hip                                      = 0,
	HandL                                    = 1,
	HandR                                    = 2,
	FootL                                    = 3,
	FootR                                    = 4,
	Head                                     = 5,
	EEndControlBone_MAX                      = 6,
};

// Enum EndGame.EEndHandConstraint
// NumValues: 0x000A
enum class EEndHandConstraint : uint8
{
	None                                     = 0,
	ManualPlacement                          = 1,
	ManualTransform                          = 2,
	LockPlacement                            = 3,
	LockTransform                            = 4,
	Trace                                    = 5,
	LockTransformToParentSocket              = 6,
	LockTransformToOtherSocket               = 7,
	GBike                                    = 8,
	EEndHandConstraint_MAX                   = 9,
};

// Enum EndGame.EEndHandType
// NumValues: 0x0004
enum class EEndHandType : uint8
{
	All                                      = 0,
	Left                                     = 1,
	Right                                    = 2,
	EEndHandType_MAX                         = 3,
};

// Enum EndGame.EEndLookAtForceDeactiveType
// NumValues: 0x000C
enum class EEndLookAtForceDeactiveType : uint8
{
	Field                                    = 0,
	FieldAttack                              = 1,
	MiniGame                                 = 2,
	Battle                                   = 3,
	BattleAbility                            = 4,
	Cinema                                   = 5,
	Notify                                   = 6,
	MotionPose                               = 7,
	Animation                                = 8,
	AnimSet                                  = 9,
	Facial                                   = 10,
	Max                                      = 11,
};

// Enum EndGame.EEndLookAtRequestType
// NumValues: 0x000B
enum class EEndLookAtRequestType : uint8
{
	Cinema                                   = 0,
	InterestAI_High                          = 1,
	TargetIcon                               = 2,
	AI                                       = 3,
	InterestAI_Low                           = 4,
	BaseActionContact                        = 5,
	AI_Low                                   = 6,
	MobPrefab                                = 7,
	BaseActionIdle                           = 8,
	BaseAction                               = 9,
	Max                                      = 10,
};

// Enum EndGame.EEndLookAtLayer
// NumValues: 0x0003
enum class EEndLookAtLayer : uint8
{
	Body                                     = 0,
	Head                                     = 1,
	EEndLookAtLayer_MAX                      = 2,
};

// Enum EndGame.EEndUpperBodyActionGroup
// NumValues: 0x0004
enum class EEndUpperBodyActionGroup : uint8
{
	Default                                  = 0,
	LeftHand                                 = 1,
	RightHand                                = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndUpperBodyActionLayer
// NumValues: 0x0009
enum class EEndUpperBodyActionLayer : uint8
{
	BarretSunglass                           = 0,
	CallChocobo                              = 1,
	CallBuggy                                = 2,
	SearchCactusRock                         = 3,
	WorldReport                              = 4,
	Memo                                     = 5,
	FaceGuard                                = 6,
	Unknown                                  = 7,
	Max                                      = 8,
};

// Enum EndGame.EEndExtraActionLayer
// NumValues: 0x0004
enum class EEndExtraActionLayer : uint8
{
	HighPriority                             = 0,
	Default                                  = 1,
	LowPriority                              = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndOverrideAnimSetLayer
// NumValues: 0x000C
enum class EEndOverrideAnimSetLayer : uint8
{
	MiniGame                                 = 0,
	FieldMotion                              = 1,
	StateManager                             = 2,
	Battle                                   = 3,
	Field                                    = 4,
	AIBehavior                               = 5,
	AIMove                                   = 6,
	Vehicle                                  = 7,
	Basic                                    = 8,
	WildAnimal                               = 9,
	Debug                                    = 10,
	Max                                      = 11,
};

// Enum EndGame.EEndAnimationType
// NumValues: 0x0005
enum class EEndAnimationType : uint8
{
	BodySequence                             = 0,
	BodyBlendSpace                           = 1,
	AdditiveSequence                         = 2,
	AdditiveBlendSpace                       = 3,
	EEndAnimationType_MAX                    = 4,
};

// Enum EndGame.EEndAutoFootLockModifierType
// NumValues: 0x0004
enum class EEndAutoFootLockModifierType : uint8
{
	None                                     = 0,
	ForceEnable                              = 1,
	ForceDisable                             = 2,
	EEndAutoFootLockModifierType_MAX         = 3,
};

// Enum EndGame.EEndFootIKDisableMask
// NumValues: 0x000A
enum class EEndFootIKDisableMask : uint8
{
	Notify                                   = 0,
	MobPrefab                                = 1,
	PlannerEvent                             = 2,
	Minigame                                 = 3,
	Menu                                     = 4,
	FieldAction                              = 5,
	ExtraAction                              = 6,
	SyncAction                               = 7,
	DetachFatMoogle                          = 8,
	Max                                      = 9,
};

// Enum EndGame.EEndFootIKModifierType
// NumValues: 0x0006
enum class EEndFootIKModifierType : uint8
{
	None                                     = 0,
	ForceDisableFootIK                       = 1,
	EnableCutSceneFootIK                     = 2,
	DisableGroundFit                         = 3,
	FullFootLandingRate                      = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndLookAtWeightModifierType
// NumValues: 0x0004
enum class EEndLookAtWeightModifierType : uint8
{
	Notify                                   = 0,
	AnimSet                                  = 1,
	Debug                                    = 2,
	EEndLookAtWeightModifierType_MAX         = 3,
};

// Enum EndGame.EEndLookAtModifierType
// NumValues: 0x0009
enum class EEndLookAtModifierType : uint8
{
	None                                     = 0,
	ForceDisableLookAt                       = 1,
	AutoDisableLookAt                        = 2,
	ForceEnableLookAt                        = 3,
	HeadOnly                                 = 4,
	MeshSpace                                = 5,
	UseUpAxis                                = 6,
	LookAway                                 = 7,
	Max                                      = 8,
};

// Enum EndGame.EEndRootSmoothingRequestType
// NumValues: 0x0008
enum class EEndRootSmoothingRequestType : uint8
{
	Animation                                = 0,
	Move                                     = 1,
	Action                                   = 2,
	Field                                    = 3,
	Battle                                   = 4,
	WalkingMob                               = 5,
	Debug                                    = 6,
	EEndRootSmoothingRequestType_MAX         = 7,
};

// Enum EndGame.EEndRotationRateModifierType
// NumValues: 0x0006
enum class EEndRotationRateModifierType : uint8
{
	Field                                    = 0,
	Action                                   = 1,
	WildAnimal                               = 2,
	AIMove                                   = 3,
	AIAction                                 = 4,
	EEndRotationRateModifierType_MAX         = 5,
};

// Enum EndGame.EEndWalkModeModifierType
// NumValues: 0x000A
enum class EEndWalkModeModifierType : uint8
{
	Controller                               = 0,
	Battle                                   = 1,
	BattleGuard                              = 2,
	BattleResult                             = 3,
	PlannerEvent                             = 4,
	WalkingMob                               = 5,
	WildAnimal                               = 6,
	Slope                                    = 7,
	FieldAction                              = 8,
	EEndWalkModeModifierType_MAX             = 9,
};

// Enum EndGame.EEndPlayRateModifierType
// NumValues: 0x0008
enum class EEndPlayRateModifierType : uint8
{
	Field                                    = 0,
	Battle                                   = 1,
	CharaSpec                                = 2,
	Notify                                   = 3,
	WildAnimal                               = 4,
	Dialogue                                 = 5,
	Debug                                    = 6,
	EEndPlayRateModifierType_MAX             = 7,
};

// Enum EndGame.EEndRootMotionModifierType
// NumValues: 0x000F
enum class EEndRootMotionModifierType : uint8
{
	None                                     = 0,
	FieldAction                              = 1,
	BattleAction                             = 2,
	BattleMove                               = 3,
	CharaSpec                                = 4,
	Notify                                   = 5,
	FieldAI                                  = 6,
	Dash                                     = 7,
	MoveTo                                   = 8,
	Animation                                = 9,
	WildAnimal                               = 10,
	MiniGame                                 = 11,
	WalkingMob                               = 12,
	Debug                                    = 13,
	EEndRootMotionModifierType_MAX           = 14,
};

// Enum EndGame.EEndAnimBehaviorMatchingType
// NumValues: 0x0005
enum class EEndAnimBehaviorMatchingType : uint8
{
	DeltaLocalSpaceRotationMax               = 0,
	DeltaLocalSpaceRotationAvg               = 1,
	DeltaLocalSpaceTranslationMax            = 2,
	DeltaLocalSpaceTranslationAvg            = 3,
	EEndAnimBehaviorMatchingType_MAX         = 4,
};

// Enum EndGame.EEndAnimPoseMatchingType
// NumValues: 0x0004
enum class EEndAnimPoseMatchingType : uint8
{
	Default                                  = 0,
	Foot                                     = 1,
	Custom                                   = 2,
	EEndAnimPoseMatchingType_MAX             = 3,
};

// Enum EndGame.EEndWalkRunTurnModifierType
// NumValues: 0x0006
enum class EEndWalkRunTurnModifierType : uint8
{
	AIMove                                   = 0,
	AIStateFollow                            = 1,
	AIBehaviorTree                           = 2,
	CharacterControllerState                 = 3,
	CharacterControllerChocobo               = 4,
	EEndWalkRunTurnModifierType_MAX          = 5,
};

// Enum EndGame.EEndWalkRestriction
// NumValues: 0x0005
enum class EEndWalkRestriction : uint8
{
	None                                     = 0,
	LimitedDash                              = 1,
	LimitedRunning                           = 2,
	LimitedWalking                           = 3,
	EEndWalkRestriction_MAX                  = 4,
};

// Enum EndGame.EEndAnimationCurveType
// NumValues: 0x0010
enum class EEndAnimationCurveType : uint8
{
	ZeroLoop                                 = 0,
	OneLoop                                  = 1,
	LinearZeroOneLoop                        = 2,
	EaseInZeroOneLoop                        = 3,
	LinearOneZero                            = 4,
	EaseInOneZero                            = 5,
	LinearZeroOne                            = 6,
	EaseInZeroOne                            = 7,
	ConstantZeroOne                          = 8,
	BattleDamage00                           = 9,
	BattleDamage01                           = 10,
	BattleDamage02                           = 11,
	BattleDamage03                           = 12,
	BattleDamage04                           = 13,
	BattleDamage05                           = 14,
	Max                                      = 15,
};

// Enum EndGame.EEndAnimationModifierType
// NumValues: 0x0003
enum class EEndAnimationModifierType : uint8
{
	Overlay                                  = 0,
	Scale                                    = 1,
	EEndAnimationModifierType_MAX            = 2,
};

// Enum EndGame.EEndSyncAnimationType
// NumValues: 0x0004
enum class EEndSyncAnimationType : uint8
{
	MasterSlave                              = 0,
	TimeLink                                 = 1,
	MasterSlaveTimeLink                      = 2,
	EEndSyncAnimationType_MAX                = 3,
};

// Enum EndGame.EEndCautionAnimType
// NumValues: 0x0003
enum class EEndCautionAnimType : uint8
{
	AsNeutral                                = 0,
	AsBattle                                 = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndAnimBehaviorMode
// NumValues: 0x0004
enum class EEndAnimBehaviorMode : uint8
{
	Neutral                                  = 0,
	Battle                                   = 1,
	Caution                                  = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndLocomotionAnimGroup
// NumValues: 0x0054
enum class EEndLocomotionAnimGroup : uint8
{
	Idle                                     = 0,
	Turn                                     = 1,
	Turn_0                                   = 2,
	Turn_45L                                 = 3,
	Turn_90L                                 = 4,
	Turn_135L                                = 5,
	Turn_180L                                = 6,
	Turn_45R                                 = 7,
	Turn_90R                                 = 8,
	Turn_135R                                = 9,
	Turn_180R                                = 10,
	WalkStart                                = 11,
	WalkStart_90L                            = 12,
	WalkStart_90R                            = 13,
	WalkStart_180L                           = 14,
	WalkStart_180R                           = 15,
	WalkLoop                                 = 16,
	WalkEnd                                  = 17,
	WalkEnd_90L                              = 18,
	WalkEnd_90R                              = 19,
	WalkEnd_180L                             = 20,
	WalkEnd_180R                             = 21,
	WalkTurn_180L                            = 22,
	WalkTurn_180R                            = 23,
	JogStart                                 = 24,
	JogStart_90L                             = 25,
	JogStart_90R                             = 26,
	JogStart_180L                            = 27,
	JogStart_180R                            = 28,
	JogLoop                                  = 29,
	JogEnd                                   = 30,
	JogEnd_90L                               = 31,
	JogEnd_90R                               = 32,
	JogEnd_180L                              = 33,
	JogEnd_180R                              = 34,
	RunStart                                 = 35,
	RunStart_90L                             = 36,
	RunStart_90R                             = 37,
	RunStart_180L                            = 38,
	RunStart_180R                            = 39,
	RunLoop                                  = 40,
	RunEnd                                   = 41,
	RunEnd_90L                               = 42,
	RunEnd_90R                               = 43,
	RunEnd_180L                              = 44,
	RunEnd_180R                              = 45,
	RunTurn_180L                             = 46,
	RunTurn_180R                             = 47,
	DashStart                                = 48,
	DashStart_90L                            = 49,
	DashStart_90R                            = 50,
	DashStart_180L                           = 51,
	DashStart_180R                           = 52,
	DashLoop                                 = 53,
	DashEnd                                  = 54,
	AccelLoop                                = 55,
	StrafingWalkStart                        = 56,
	StrafingWalkStart_0                      = 57,
	StrafingWalkStart_45L                    = 58,
	StrafingWalkStart_90L                    = 59,
	StrafingWalkStart_135L                   = 60,
	StrafingWalkStart_45R                    = 61,
	StrafingWalkStart_90R                    = 62,
	StrafingWalkStart_135R                   = 63,
	StrafingWalkStart_180                    = 64,
	StrafingWalkLoop                         = 65,
	StrafingWalkLoop_0                       = 66,
	StrafingWalkLoop_45L                     = 67,
	StrafingWalkLoop_90L                     = 68,
	StrafingWalkLoop_135L                    = 69,
	StrafingWalkLoop_45R                     = 70,
	StrafingWalkLoop_90R                     = 71,
	StrafingWalkLoop_135R                    = 72,
	StrafingWalkLoop_180                     = 73,
	StrafingWalkEnd                          = 74,
	StrafingWalkEnd_0                        = 75,
	StrafingWalkEnd_45L                      = 76,
	StrafingWalkEnd_90L                      = 77,
	StrafingWalkEnd_135L                     = 78,
	StrafingWalkEnd_45R                      = 79,
	StrafingWalkEnd_90R                      = 80,
	StrafingWalkEnd_135R                     = 81,
	StrafingWalkEnd_180                      = 82,
	Max                                      = 83,
};

// Enum EndGame.EEndLocomotionState
// NumValues: 0x0015
enum class EEndLocomotionState : uint8
{
	Idle                                     = 0,
	Turn                                     = 1,
	WalkStart                                = 2,
	WalkLoop                                 = 3,
	WalkEnd                                  = 4,
	WalkTurn                                 = 5,
	RunStart                                 = 6,
	RunLoop                                  = 7,
	RunEnd                                   = 8,
	RunTurn                                  = 9,
	DashStart                                = 10,
	DashLoop                                 = 11,
	DashEnd                                  = 12,
	StrafingWalkStart                        = 13,
	StrafingWalkLoop                         = 14,
	StrafingWalkEnd                          = 15,
	AccelLoop                                = 16,
	SwitchBehavior                           = 17,
	FallLoop                                 = 18,
	FallEnd                                  = 19,
	Max                                      = 20,
};

// Enum EndGame.EEndAnimWalkType
// NumValues: 0x0007
enum class EEndAnimWalkType : uint8
{
	Idle                                     = 0,
	Walk                                     = 1,
	HighWalk                                 = 2,
	Jog                                      = 3,
	Run                                      = 4,
	Dash                                     = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndAnimContactDirection
// NumValues: 0x0006
enum class EEndAnimContactDirection : uint8
{
	None                                     = 0,
	ForwardLeft                              = 1,
	ForwardRight                             = 2,
	BackLeft                                 = 3,
	BackRight                                = 4,
	EEndAnimContactDirection_MAX             = 5,
};

// Enum EndGame.EEndAnimDirection90
// NumValues: 0x0006
enum class EEndAnimDirection90 : uint8
{
	Forward                                  = 0,
	Left_90                                  = 1,
	Left_180                                 = 2,
	Right_90                                 = 3,
	Right_180                                = 4,
	EEndAnimDirection90_MAX                  = 5,
};

// Enum EndGame.EEndAnimDirection45
// NumValues: 0x000A
enum class EEndAnimDirection45 : uint8
{
	Forward                                  = 0,
	Left_45                                  = 1,
	Left_90                                  = 2,
	Left_135                                 = 3,
	Left_180                                 = 4,
	Right_45                                 = 5,
	Right_90                                 = 6,
	Right_135                                = 7,
	Right_180                                = 8,
	EEndAnimDirection45_MAX                  = 9,
};

// Enum EndGame.ENnodeType
// NumValues: 0x0006
enum class ENnodeType : uint32
{
	Comment                                  = 0,
	Knot                                     = 1,
	If                                       = 2,
	CallFunc                                 = 3,
	State                                    = 4,
	ENnodeType_MAX                           = 5,
};

// Enum EndGame.EndBattleCameraInputOffsetType
// NumValues: 0x0004
enum class EndBattleCameraInputOffsetType : uint8
{
	None                                     = 0,
	Slide                                    = 1,
	Swing                                    = 2,
	EndBattleCameraInputOffsetType_MAX       = 3,
};

// Enum EndGame.EEndBattleCameraEyeToAimTargetRotateType
// NumValues: 0x0004
enum class EEndBattleCameraEyeToAimTargetRotateType : uint8
{
	AlwaysRotate                             = 0,
	FixWithRootRotate                        = 1,
	FixWithoutRotate                         = 2,
	EEndBattleCameraEyeToAimTargetRotateType_MAX = 3,
};

// Enum EndGame.EEndBattleCameraRelativeLocationRotateType
// NumValues: 0x0004
enum class EEndBattleCameraRelativeLocationRotateType : uint8
{
	AlwaysRotate                             = 0,
	FixWithRotate                            = 1,
	FixWithoutRotate                         = 2,
	EEndBattleCameraRelativeLocationRotateType_MAX = 3,
};

// Enum EndGame.EEndBattleCameraTargetType
// NumValues: 0x001C
enum class EEndBattleCameraTargetType : uint8
{
	None                                     = 0,
	OwnerMesh                                = 1,
	TargetMesh                               = 2,
	PlayerLeaderMesh                         = 3,
	OwnerActor                               = 4,
	TargetActor                              = 5,
	PlayerLeaderActor                        = 6,
	DamageSourceGenerated                    = 7,
	DamageSourceHit                          = 8,
	AimPoint                                 = 9,
	WorldOrigin                              = 10,
	OwnerLatestPositionHit                   = 11,
	TargetLatestPositionHit                  = 12,
	PlayerLeaderLatestPositionHit            = 13,
	FieldCamera                              = 14,
	SummonMesh                               = 15,
	SummonActor                              = 16,
	ActorNameMesh                            = 17,
	ActorNameActor                           = 18,
	CharaIDMesh                              = 19,
	CharaIDActor                             = 20,
	TargetPoint                              = 21,
	DamageSourceID                           = 22,
	TargetLockPos                            = 23,
	OwnerFloor                               = 24,
	TargetFloor                              = 25,
	MenuPartyMemberMesh                      = 26,
	EEndBattleCameraTargetType_MAX           = 27,
};

// Enum EndGame.EEndBattleCompareLocationType
// NumValues: 0x0003
enum class EEndBattleCompareLocationType : uint8
{
	Nearest                                  = 0,
	Farest                                   = 1,
	EEndBattleCompareLocationType_MAX        = 2,
};

// Enum EndGame.EBattleAbilityRotateNotifyState
// NumValues: 0x0008
enum class EBattleAbilityRotateNotifyState : uint8
{
	None                                     = 0,
	Swing                                    = 1,
	TargetPointName                          = 2,
	TargetLocate                             = 3,
	ToHorizontalByRoll                       = 4,
	ToHorizontalByYAxis                      = 5,
	TargetPointRotation                      = 6,
	EBattleAbilityRotateNotifyState_MAX      = 7,
};

// Enum EndGame.EEndBattleDestructionActionType
// NumValues: 0x0004
enum class EEndBattleDestructionActionType : uint8
{
	None                                     = 0,
	Add                                      = 1,
	Destruction                              = 2,
	EEndBattleDestructionActionType_MAX      = 3,
};

// Enum EndGame.EEndBattleDefenseGuardType
// NumValues: 0x0004
enum class EEndBattleDefenseGuardType : uint8
{
	No                                       = 0,
	Guard                                    = 1,
	GuardCrush                               = 2,
	EEndBattleDefenseGuardType_MAX           = 3,
};

// Enum EndGame.EEndBattlePlayerUniqueAbilityType
// NumValues: 0x000B
enum class EEndBattlePlayerUniqueAbilityType : uint8
{
	None                                     = 0,
	OffensiveMode                            = 1,
	Energy                                   = 2,
	SelfBuff                                 = 3,
	CoolDownTime                             = 4,
	Revenge                                  = 5,
	ThrowWeapon                              = 6,
	Derived                                  = 7,
	FatMoogle                                = 8,
	Tension                                  = 9,
	EEndBattlePlayerUniqueAbilityType_MAX    = 10,
};

// Enum EndGame.EBattleKeyAssignMethodType
// NumValues: 0x0005
enum class EBattleKeyAssignMethodType : uint8
{
	None                                     = 255,
	Normal                                   = 0,
	Down                                     = 1,
	Dodge                                    = 2,
	EBattleKeyAssignMethodType_MAX           = 256,
};

// Enum EndGame.EBattleInputAttackType
// NumValues: 0x0004
enum class EBattleInputAttackType : uint8
{
	None                                     = 255,
	Normal                                   = 0,
	Unique                                   = 1,
	EBattleInputAttackType_MAX               = 256,
};

// Enum EndGame.EBattleKeyAssignPlaceType
// NumValues: 0x0004
enum class EBattleKeyAssignPlaceType : uint8
{
	None                                     = 255,
	Ground                                   = 0,
	Air                                      = 1,
	EBattleKeyAssignPlaceType_MAX            = 256,
};

// Enum EndGame.EEndAiBattleRole
// NumValues: 0x000D
enum class EEndAiBattleRole : uint8
{
	None                                     = 0,
	Front                                    = 1,
	Middle                                   = 2,
	Back                                     = 3,
	Shield                                   = 4,
	Theif                                    = 5,
	PhysicsFrontDD                           = 6,
	PhysicsBackDD                            = 7,
	Unique1                                  = 8,
	Unique2                                  = 9,
	Unique3                                  = 10,
	Unique4                                  = 11,
	EEndAiBattleRole_MAX                     = 12,
};

// Enum EndGame.GetOffsetTransform
// NumValues: 0x0003
enum class EGetOffsetTransform : uint8
{
	Stay                                     = 0,
	ToOrigin                                 = 1,
	GetOffsetTransform_MAX                   = 2,
};

// Enum EndGame.EEndBattleAttackDirectionType
// NumValues: 0x0005
enum class EEndBattleAttackDirectionType : uint8
{
	Front                                    = 0,
	Right                                    = 1,
	Left                                     = 2,
	Special                                  = 3,
	EEndBattleAttackDirectionType_MAX        = 4,
};

// Enum EndGame.EEndBattleReactionInfluenceType
// NumValues: 0x0007
enum class EEndBattleReactionInfluenceType : uint8
{
	RadiusInfinite                           = 0,
	RadiusShort                              = 1,
	RadiusMiddle                             = 2,
	RadiusLong                               = 3,
	MoveSpeed                                = 4,
	None                                     = 100,
	EEndBattleReactionInfluenceType_MAX      = 101,
};

// Enum EndGame.EEndBattleReactionNotificationType
// NumValues: 0x0007
enum class EEndBattleReactionNotificationType : uint8
{
	TakeAbility                              = 0,
	Animation                                = 1,
	DamageSource                             = 2,
	NotInvokeBPEvent                         = 100,
	TakeAbilityPC                            = 100,
	DangerDamagePC                           = 101,
	EEndBattleReactionNotificationType_MAX   = 102,
};

// Enum EndGame.EEndBattlePhase
// NumValues: 0x0009
enum class EEndBattlePhase : uint8
{
	Phase01                                  = 0,
	Phase02                                  = 1,
	Phase03                                  = 2,
	Phase04                                  = 3,
	Phase05                                  = 4,
	Phase06                                  = 5,
	Phase07                                  = 6,
	Phase08                                  = 7,
	EEndBattlePhase_MAX                      = 8,
};

// Enum EndGame.EEndBattleCharaAttachCharacterType
// NumValues: 0x0006
enum class EEndBattleCharaAttachCharacterType : uint8
{
	None                                     = 0,
	LeftArm                                  = 1,
	RightArm                                 = 2,
	BackWeaponTop                            = 3,
	BackWeaponUnder                          = 4,
	EEndBattleCharaAttachCharacterType_MAX   = 5,
};

// Enum EndGame.EEndBattleDamageSourceReplaceTargetCharaType
// NumValues: 0x0003
enum class EEndBattleDamageSourceReplaceTargetCharaType : uint8
{
	None                                     = 0,
	SyncActionTarget                         = 1,
	EEndBattleDamageSourceReplaceTargetCharaType_MAX = 2,
};

// Enum EndGame.EEndBattleDamageSourceDisableBackgroundType
// NumValues: 0x0006
enum class EEndBattleDamageSourceDisableBackgroundType : uint8
{
	All                                      = 0,
	NoHit                                    = 1,
	WallOnly                                 = 2,
	TerrainOnly                              = 3,
	AllWithCharaWall                         = 4,
	EEndBattleDamageSourceDisableBackgroundType_MAX = 5,
};

// Enum EndGame.EndBattleAbilityCancelComboCondition
// NumValues: 0x0004
enum class EndBattleAbilityCancelComboCondition : uint8
{
	None                                     = 0,
	SelfBuff                                 = 1,
	OffensiveMode                            = 2,
	EndBattleAbilityCancelComboCondition_MAX = 3,
};

// Enum EndGame.EEndBattleCharaCategoryType
// NumValues: 0x0005
enum class EEndBattleCharaCategoryType : uint8
{
	Normal                                   = 0,
	Shinra                                   = 1,
	Strong                                   = 2,
	ShinraStrong                             = 3,
	EEndBattleCharaCategoryType_MAX          = 4,
};

// Enum EndGame.EEndTakeDamageDirectionType
// NumValues: 0x0007
enum class EEndTakeDamageDirectionType : uint8
{
	None                                     = 0,
	GiveCharacter                            = 1,
	DamagePosition                           = 2,
	GiveCharacterReverse                     = 3,
	HitPosition                              = 4,
	DamageSide                               = 5,
	EEndTakeDamageDirectionType_MAX          = 6,
};

// Enum EndGame.EEndBattleCameraSLerpType
// NumValues: 0x0004
enum class EEndBattleCameraSLerpType : uint8
{
	None                                     = 0,
	Satellite                                = 1,
	Cylinder                                 = 2,
	EEndBattleCameraSLerpType_MAX            = 3,
};

// Enum EndGame.EEndBattleCameraEndYawType
// NumValues: 0x0007
enum class EEndBattleCameraEndYawType : uint8
{
	Default                                  = 0,
	SkillCameraRot                           = 1,
	PlayerLeaderToSkillCameraAim             = 2,
	PlayerLeaderToSkillCameraOwner           = 3,
	None                                     = 4,
	PlayerLeaderForward                      = 5,
	EEndBattleCameraEndYawType_MAX           = 6,
};

// Enum EndGame.EEndBattleCameraEndPitchType
// NumValues: 0x0006
enum class EEndBattleCameraEndPitchType : uint8
{
	ResetValue                               = 0,
	SkillCameraRot                           = 1,
	PlayerLeaderToSkillCameraAim             = 2,
	PlayerLeaderToSkillCameraOwner           = 3,
	None                                     = 4,
	EEndBattleCameraEndPitchType_MAX         = 5,
};

// Enum EndGame.EEndBattleCameraChangeTimingType
// NumValues: 0x0008
enum class EEndBattleCameraChangeTimingType : uint8
{
	None                                     = 0,
	DamageSourceGenerated                    = 1,
	DamageSourceHit                          = 2,
	Branch0                                  = 3,
	Branch1                                  = 4,
	SummonSpawned                            = 5,
	ActorNameDamageSourceHit                 = 6,
	MAX                                      = 7,
};

// Enum EndGame.EEndBattleCameraPriorityType
// NumValues: 0x000A
enum class EEndBattleCameraPriorityType : uint8
{
	None                                     = 0,
	SyncAction                               = 10,
	Player                                   = 20,
	Enemy                                    = 30,
	Burst                                    = 40,
	Summon                                   = 50,
	ChangePhase                              = 60,
	Menu                                     = 70,
	Debug                                    = 71,
	MAX                                      = 72,
};

// Enum EndGame.EEndBattleEasySpawnEnableRagdollType
// NumValues: 0x0005
enum class EEndBattleEasySpawnEnableRagdollType : uint8
{
	Deaded                                   = 0,
	Spawned                                  = 1,
	MovedToSocket                            = 2,
	None                                     = 3,
	EEndBattleEasySpawnEnableRagdollType_MAX = 4,
};

// Enum EndGame.EEndBattleStatusChangeTimeType
// NumValues: 0x0005
enum class EEndBattleStatusChangeTimeType : uint8
{
	Short                                    = 0,
	Middle                                   = 1,
	Long                                     = 2,
	Infinity                                 = 64,
	EEndBattleStatusChangeTimeType_MAX       = 65,
};

// Enum EndGame.EEndEquipmentUniqueActionType
// NumValues: 0x000B
enum class EEndEquipmentUniqueActionType : uint8
{
	None                                     = 0,
	OffensiveModeChange                      = 1,
	BuffLevelDownAbility                     = 2,
	ChargeAbility                            = 3,
	EnergyAbility                            = 4,
	Ability                                  = 5,
	DistanceAbility                          = 6,
	Revenge                                  = 7,
	Derived                                  = 8,
	Tension                                  = 9,
	EEndEquipmentUniqueActionType_MAX        = 10,
};

// Enum EndGame.EEndBattleCompareDistanceType
// NumValues: 0x0003
enum class EEndBattleCompareDistanceType : uint8
{
	Near                                     = 0,
	Far                                      = 1,
	EEndBattleCompareDistanceType_MAX        = 2,
};

// Enum EndGame.EEndBattleTargetCharaBaseLockType
// NumValues: 0x0004
enum class EEndBattleTargetCharaBaseLockType : uint8
{
	Ability                                  = 0,
	Combo                                    = 1,
	AI                                       = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndBattleSceneCountLifeCycleType
// NumValues: 0x0004
enum class EEndBattleSceneCountLifeCycleType : uint8
{
	eNone                                    = 0,
	eCountUp                                 = 1,
	eCountDown                               = 2,
	EEndBattleSceneCountLifeCycleType_MAX    = 3,
};

// Enum EndGame.EEndBattleEnvironmentAnimPlayType
// NumValues: 0x0004
enum class EEndBattleEnvironmentAnimPlayType : uint8
{
	Play                                     = 0,
	Looping                                  = 1,
	LastFrame                                = 2,
	EEndBattleEnvironmentAnimPlayType_MAX    = 3,
};

// Enum EndGame.EEndBattleBreakableRelationActionType
// NumValues: 0x0004
enum class EEndBattleBreakableRelationActionType : uint8
{
	Hidden                                   = 0,
	Visible                                  = 1,
	Replace                                  = 2,
	EEndBattleBreakableRelationActionType_MAX = 3,
};

// Enum EndGame.EEndBattleBreakableRelationVolumeType
// NumValues: 0x0004
enum class EEndBattleBreakableRelationVolumeType : uint8
{
	NavModifier                              = 0,
	Blocking                                 = 1,
	Both                                     = 2,
	EEndBattleBreakableRelationVolumeType_MAX = 3,
};

// Enum EndGame.EEndBattleDeadDirectionType
// NumValues: 0x000F
enum class EEndBattleDeadDirectionType : uint8
{
	None                                     = 0,
	LifeStream                               = 1,
	Explosion                                = 2,
	DarkEmission                             = 3,
	Purification                             = 4,
	BlackSmoke                               = 5,
	WhiteSmoke                               = 6,
	Digital                                  = 7,
	Gizoku                                   = 8,
	Petrify                                  = 9,
	FeelerNormal                             = 50,
	FeelerSpecial                            = 51,
	PraecoMiniNormal                         = 52,
	PraecoMiniFinish                         = 53,
	EEndBattleDeadDirectionType_MAX          = 54,
};

// Enum EndGame.EEndBattleYuffieAttributeBuffType
// NumValues: 0x0006
enum class EEndBattleYuffieAttributeBuffType : uint8
{
	None                                     = 0,
	Fire                                     = 1,
	Ice                                      = 2,
	Thunder                                  = 3,
	Wind                                     = 4,
	MAX                                      = 5,
};

// Enum EndGame.EEndBattleSyncActionEndType
// NumValues: 0x0004
enum class EEndBattleSyncActionEndType : uint8
{
	None                                     = 0,
	Escape                                   = 1,
	FinalAttack                              = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndEnemyTerritorySituationType
// NumValues: 0x0004
enum class EEndEnemyTerritorySituationType : uint8
{
	None                                     = 0,
	Event                                    = 1,
	Serious                                  = 2,
	EEndEnemyTerritorySituationType_MAX      = 3,
};

// Enum EndGame.EEndBattleSceneType
// NumValues: 0x0004
enum class EEndBattleSceneType : uint8
{
	Normal                                   = 0,
	Boss                                     = 1,
	VR                                       = 2,
	EEndBattleSceneType_MAX                  = 3,
};

// Enum EndGame.EEndAnimNotifyBattleDamageCondition
// NumValues: 0x0004
enum class EEndAnimNotifyBattleDamageCondition : uint8
{
	None                                     = 0,
	CombinationTriggerDamageHit              = 1,
	UseCombinationAbilityWithCombinationPartner = 2,
	EEndAnimNotifyBattleDamageCondition_MAX  = 3,
};

// Enum EndGame.EEndAnimNotifyBattleDamageOwnerFilterType
// NumValues: 0x0004
enum class EEndAnimNotifyBattleDamageOwnerFilterType : uint8
{
	eALL                                     = 0,
	ePlayer                                  = 1,
	eEnemy                                   = 2,
	EEndAnimNotifyBattleDamageOwnerFilterType_MAX = 3,
};

// Enum EndGame.EEndBattleDamageSourceHitReactionType
// NumValues: 0x0019
enum class EEndBattleDamageSourceHitReactionType : uint8
{
	None                                     = 2,
	Small                                    = 0,
	Medium                                   = 8,
	Large                                    = 1,
	LaunchSmall                              = 3,
	LaunchLarge                              = 9,
	BlowSmall                                = 4,
	BlowLarge                                = 10,
	Strike                                   = 5,
	SyncAction                               = 6,
	Motion                                   = 7,
	Add                                      = 11,
	Repel                                    = 12,
	AerialDeadLaunchLarge                    = 13,
	AerialDeadBlowLarge                      = 14,
	AerialDeadStrike                         = 15,
	AerialSuspendActionLaunchLarge           = 16,
	BurstPushBlowLarge                       = 17,
	FallDown                                 = 18,
	MotionBeginLoopEnd                       = 19,
	MotionBeginLoopEndDamageHitProcessTimeLoopEnd = 23,
	DownHit                                  = 20,
	PullBlow                                 = 21,
	PullMedium                               = 22,
	Max                                      = 23,
};

// Enum EndGame.EEndBattleDamageSourcePositionBaseType
// NumValues: 0x0025
enum class EEndBattleDamageSourcePositionBaseType : uint8
{
	Owner                                    = 0,
	OwnerWeapon1                             = 1,
	OwnerWeapon2                             = 2,
	OwnerWeapon3                             = 3,
	OwnerWeapon4                             = 4,
	OwnerWeapon5                             = 5,
	OwnerWeapon6                             = 6,
	OwnerWeapon7                             = 7,
	OwnerWeapon8                             = 8,
	OwnerWeapon9                             = 9,
	Target                                   = 10,
	TargetWeapon1                            = 11,
	TargetWeapon2                            = 12,
	TargetWeapon3                            = 13,
	TargetWeapon4                            = 14,
	TargetWeapon5                            = 15,
	TargetWeapon6                            = 16,
	TargetWeapon7                            = 17,
	TargetWeapon8                            = 18,
	TargetWeapon9                            = 19,
	ParentDamageSource                       = 20,
	HitPosition                              = 21,
	SpecifiedLocation                        = 23,
	LayoutItemLocation                       = 24,
	EnvironmentActor                         = 25,
	OwnerAerithAssist                        = 26,
	TargetTop                                = 27,
	OwnerAttributeAssist                     = 28,
	OwnerCombinationPartner1                 = 29,
	OwnerComponent                           = 30,
	OwnerIceReflect                          = 31,
	TargetDamageSource                       = 32,
	OwnerCombinationAttachCharacter          = 33,
	OwnerMaster                              = 34,
	ParentDamageSourceTarget                 = 35,
	TargetPriorityFatMoogle                  = 36,
	EEndBattleDamageSourcePositionBaseType_MAX = 37,
};

// Enum EndGame.EEndBattleDamageSourceProperty
// NumValues: 0x0004
enum class EEndBattleDamageSourceProperty : uint8
{
	PhysicsNear                              = 0,
	Magic                                    = 1,
	PhysicsFar                               = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndBattleDamageSourcePowerType
// NumValues: 0x0013
enum class EEndBattleDamageSourcePowerType : uint8
{
	Normal                                   = 0,
	Constant                                 = 1,
	Attack                                   = 2,
	MaxHPPercentTarget                       = 3,
	MaxHPPercentOwner                        = 4,
	HPPercentTarget                          = 5,
	HPPercentOwner                           = 6,
	DecreaseHPPercentTarget                  = 7,
	DecreaseHPPercentOwner                   = 8,
	MaxMPPercentTarget                       = 9,
	ATBPercent                               = 10,
	HPOneSingleDigit                         = 11,
	ParentDamageValue                        = 12,
	MulDecreaseHPRateOwner                   = 13,
	TypeMaxPercentRevengeGaugeRateOwner      = 14,
	Zeninage                                 = 15,
	AbilityHPDamageHitCount                  = 16,
	ConstantIgnoreResist_BurstFont           = 17,
	EEndBattleDamageSourcePowerType_MAX      = 18,
};

// Enum EndGame.EEndBattleEnemyCombinationAbilityFinishResult
// NumValues: 0x000B
enum class EEndBattleEnemyCombinationAbilityFinishResult : uint8
{
	TargetDefeated                           = 0,
	SinglePartyMemberAlive                   = 1,
	FirstAttackMissed                        = 2,
	CharacterDamageLimitBroken               = 3,
	CharacterDefeated                        = 4,
	CharacterHitByLimitBreak                 = 5,
	CharacterBurstActivated                  = 6,
	CharacterHitByCombinationAttack          = 7,
	CharacterHitBySummonAttack               = 8,
	AbilityLoopFinished                      = 9,
	EEndBattleEnemyCombinationAbilityFinishResult_MAX = 10,
};

// Enum EndGame.EEndBattleAbilityAfterTeleportRotationType
// NumValues: 0x0006
enum class EEndBattleAbilityAfterTeleportRotationType : uint8
{
	ToTarget                                 = 0,
	SameCombinationExecutor                  = 1,
	SameCombinationExecutorPriorityTarget    = 2,
	InverseCombinationExecutor               = 3,
	ToCombinationExecutor                    = 4,
	EEndBattleAbilityAfterTeleportRotationType_MAX = 5,
};

// Enum EndGame.EEndBattleAbilityTeleportType
// NumValues: 0x0009
enum class EEndBattleAbilityTeleportType : uint8
{
	None                                     = 0,
	CombinationTarget                        = 1,
	ToCombinationExecutor                    = 2,
	NearCombinationExecutor                  = 3,
	SideCombinationExecutor                  = 4,
	FBCombinationExecutor                    = 5,
	ToCombinationExecutorSocket              = 6,
	ToAbilityApproachPoint                   = 7,
	EEndBattleAbilityTeleportType_MAX        = 8,
};

// Enum EndGame.EEndBattleAbilityActionCategory
// NumValues: 0x0006
enum class EEndBattleAbilityActionCategory : uint8
{
	None                                     = 0,
	DamageToOpponent                         = 1,
	DebuffToOpponent                         = 2,
	BuffToAlly                               = 3,
	RecoverToAlly                            = 4,
	EEndBattleAbilityActionCategory_MAX      = 5,
};

// Enum EndGame.EEndBattleAbilityReactionConditionType
// NumValues: 0x0013
enum class EEndBattleAbilityReactionConditionType : uint8
{
	None                                     = 0,
	Hit                                      = 1,
	Guard                                    = 2,
	TargetDodge                              = 3,
	TargetDodgeDirection                     = 4,
	NotTargetFrontAndNear                    = 5,
	Damage                                   = 6,
	NotifyAIBP                               = 7,
	NormalAttackDamage                       = 8,
	AnimationLoopNoInput                     = 20,
	CombinationPartnerAbilityChargeDamageSourceUnLevelUpDischarge = 21,
	SelfContactWall                          = 22,
	TargetInsideAngleAndDistance             = 23,
	CombinationPartnerAbilitySuspend         = 24,
	NextAnimationNoHitDamage                 = 25,
	CombinationPartnerAbilityGuardReaction   = 26,
	CombinationPartnerAbilityGuardEnd        = 27,
	Cancel                                   = 28,
	EEndBattleAbilityReactionConditionType_MAX = 29,
};

// Enum EndGame.EEndBattleAbilityTargetCloseMoveType
// NumValues: 0x0004
enum class EEndBattleAbilityTargetCloseMoveType : uint8
{
	Stop                                     = 0,
	None                                     = 1,
	Push                                     = 2,
	EEndBattleAbilityTargetCloseMoveType_MAX = 3,
};

// Enum EndGame.EEndBattleRewardType
// NumValues: 0x0006
enum class EEndBattleRewardType : uint8
{
	Exp                                      = 0,
	Ap                                       = 1,
	Gil                                      = 2,
	Drop                                     = 3,
	Steal                                    = 4,
	EEndBattleRewardType_MAX                 = 5,
};

// Enum EndGame.EEndBattleActType
// NumValues: 0x0008
enum class EEndBattleActType : uint8
{
	Move                                     = 0,
	Moves                                    = 1,
	Turn                                     = 2,
	Warp                                     = 3,
	Motion                                   = 4,
	MotionEnd                                = 5,
	ActMax                                   = 6,
	EEndBattleActType_MAX                    = 7,
};

// Enum EndGame.EndBattleExitBattleSceneType
// NumValues: 0x0004
enum class EndBattleExitBattleSceneType : uint8
{
	EndBattleMode_Finish                     = 0,
	EndBattleMode_Escape                     = 1,
	EndBattleMode_Leave                      = 2,
	EndBattleMode_Max                        = 3,
};

// Enum EndGame.EEndBattleCameraBlendBasePosType
// NumValues: 0x0003
enum class EEndBattleCameraBlendBasePosType : uint8
{
	Aim                                      = 0,
	Eye                                      = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndBattleCameraCutEndType
// NumValues: 0x0004
enum class EEndBattleCameraCutEndType : uint8
{
	None                                     = 0,
	Continue                                 = 1,
	Loop                                     = 2,
	MAX                                      = 3,
};

// Enum EndGame.EBattleInSituationType
// NumValues: 0x0005
enum class EBattleInSituationType : uint8
{
	eNone                                    = 0,
	eTakeAttack                              = 1,
	eSense                                   = 2,
	eLink                                    = 3,
	EBattleInSituationType_MAX               = 4,
};

// Enum EndGame.EEndBattleSceneCharaStateType
// NumValues: 0x001B
enum class EEndBattleSceneCharaStateType : uint8
{
	Dead                                     = 0,
	SyncAction                               = 1,
	Stun                                     = 2,
	StatusChangePoison                       = 3,
	StatusChangeHighlyPoison                 = 4,
	StatusChangeFury                         = 5,
	StatusChangeSadness                      = 6,
	StatusChangeSilence                      = 7,
	StatusChangeSleep                        = 8,
	StatusChangeSlow                         = 9,
	StatusChangeStop                         = 10,
	StatusChangePrePetrify                   = 11,
	StatusChangePetrify                      = 12,
	StatusChangeBerserk                      = 13,
	StatusChangeFrog                         = 14,
	StatusChangeDeathSentence                = 15,
	StatusChangeDeath                        = 16,
	DamageReactionSmall                      = 17,
	DamageReactionMediun                     = 18,
	DamageReactionLarge                      = 19,
	DamageReactionLaunch                     = 20,
	DamageReactionBlow                       = 21,
	DamageReactionStrike                     = 22,
	DamageReactionMotion                     = 23,
	DamageReactionRepel                      = 24,
	Other                                    = 25,
	EEndBattleSceneCharaStateType_MAX        = 26,
};

// Enum EndGame.ESummonPointPriority
// NumValues: 0x0004
enum class ESummonPointPriority : uint8
{
	Low                                      = 0,
	Normal                                   = 1,
	High                                     = 2,
	ESummonPointPriority_MAX                 = 3,
};

// Enum EndGame.EEndBattleSupportFieldType
// NumValues: 0x0006
enum class EEndBattleSupportFieldType : uint8
{
	MagicSequence                            = 0,
	ATBDistribute                            = 1,
	CastMagic                                = 2,
	CreateDamageSource                       = 3,
	CactusMission                            = 4,
	Max                                      = 5,
};

// Enum EndGame.EFA0222ExtraAction_PoseReference
// NumValues: 0x0006
enum class EFA0222ExtraAction_PoseReference : uint8
{
	CenterHandle                             = 0,
	UpHandle                                 = 1,
	DownHandle                               = 2,
	LeftHandle                               = 3,
	RightHandle                              = 4,
	EFA0222ExtraAction_MAX                   = 5,
};

// Enum EndGame.EEndBehaviorJumpExtraActionInput
// NumValues: 0x0004
enum class EEndBehaviorJumpExtraActionInput : uint8
{
	Normal                                   = 0,
	Fall                                     = 1,
	Target                                   = 2,
	EEndBehaviorJumpExtraActionInput_MAX     = 3,
};

// Enum EndGame.EEndStepTurnTiming
// NumValues: 0x0006
enum class EEndStepTurnTiming : uint8
{
	None                                     = 0,
	MoveStart                                = 1,
	MoveEnd                                  = 2,
	TurnStart                                = 3,
	TurnEnd                                  = 4,
	EEndStepTurnTiming_MAX                   = 5,
};

// Enum EndGame.EBikeMothSlasherAttackType
// NumValues: 0x0006
enum class EBikeMothSlasherAttackType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Charge                                   = 2,
	Discharge                                = 3,
	Phase2                                   = 4,
	EBikeMothSlasherAttackType_MAX           = 5,
};

// Enum EndGame.LineType
// NumValues: 0x0004
enum class ELineType : uint8
{
	Center                                   = 0,
	Right                                    = 1,
	Left                                     = 2,
	LineType_MAX                             = 3,
};

// Enum EndGame.EEndBikeDifficultyType
// NumValues: 0x0006
enum class EEndBikeDifficultyType : uint8
{
	All                                      = 0,
	Easy                                     = 1,
	Normal                                   = 2,
	Hard                                     = 3,
	Advance                                  = 4,
	EEndBikeDifficultyType_MAX               = 5,
};

// Enum EndGame.EBikeMenuIndex
// NumValues: 0x0003
enum class EBikeMenuIndex : uint8
{
	Player                                   = 0,
	Ally                                     = 1,
	EBikeMenuIndex_MAX                       = 2,
};

// Enum EndGame.EBikeSlalomLastPositionType
// NumValues: 0x0004
enum class EBikeSlalomLastPositionType : uint8
{
	None                                     = 0,
	SameSideOfPlayer                         = 1,
	OtherSideOfPlayer                        = 2,
	EBikeSlalomLastPositionType_MAX          = 3,
};

// Enum EndGame.EBikeDamageMotionType
// NumValues: 0x0006
enum class EBikeDamageMotionType : uint8
{
	Normal                                   = 0,
	Explosion                                = 1,
	KnockBack_LR1                            = 2,
	KnockBack_F                              = 3,
	KnockBack_LR2                            = 4,
	EBikeDamageMotionType_MAX                = 5,
};

// Enum EndGame.EBikeDirection
// NumValues: 0x0006
enum class EBikeDirection : uint8
{
	None                                     = 0,
	Front                                    = 1,
	Right                                    = 2,
	Left                                     = 3,
	Back                                     = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndBikeHitFilterPartsType
// NumValues: 0x0004
enum class EEndBikeHitFilterPartsType : uint8
{
	None                                     = 0,
	RightWheels                              = 1,
	LeftWheels                               = 2,
	EEndBikeHitFilterPartsType_MAX           = 3,
};

// Enum EndGame.EEndBikeKeepRelativePositionType
// NumValues: 0x0004
enum class EEndBikeKeepRelativePositionType : uint8
{
	None                                     = 0,
	DirectValue                              = 1,
	EntryPosition                            = 2,
	EEndBikeKeepRelativePositionType_MAX     = 3,
};

// Enum EndGame.EEndBikeDamageSourcePositionBaseType
// NumValues: 0x0011
enum class EEndBikeDamageSourcePositionBaseType : uint8
{
	Owner                                    = 0,
	OwnerWeapon1                             = 1,
	OwnerWeapon2                             = 2,
	OwnerWeapon3                             = 3,
	OwnerWeapon4                             = 4,
	Target                                   = 10,
	TargetWeapon1                            = 11,
	TargetWeapon2                            = 12,
	TargetWeapon3                            = 13,
	TargetWeapon4                            = 14,
	ParentDamageSource                       = 20,
	HitPosition                              = 21,
	TargetLocation                           = 22,
	FieldLocation                            = 23,
	FieldLaunchLocation                      = 24,
	EnvironmentActor                         = 25,
	EEndBikeDamageSourcePositionBaseType_MAX = 26,
};

// Enum EndGame.EEndBikeNextActionType
// NumValues: 0x0007
enum class EEndBikeNextActionType : uint8
{
	None                                     = 0,
	Move                                     = 1,
	Ability                                  = 2,
	Ability_ATB                              = 3,
	Accel                                    = 4,
	Brake                                    = 5,
	EEndBikeNextActionType_MAX               = 6,
};

// Enum EndGame.EEndBikeAbilityPositionCondition
// NumValues: 0x0004
enum class EEndBikeAbilityPositionCondition : uint8
{
	None                                     = 0,
	Right                                    = 1,
	Left                                     = 2,
	EEndBikeAbilityPositionCondition_MAX     = 3,
};

// Enum EndGame.EEndBikeAbilityDistanceType
// NumValues: 0x0004
enum class EEndBikeAbilityDistanceType : uint8
{
	None                                     = 0,
	Short                                    = 1,
	Long                                     = 2,
	EEndBikeAbilityDistanceType_MAX          = 3,
};

// Enum EndGame.EEndBikeAbilityType
// NumValues: 0x0007
enum class EEndBikeAbilityType : uint8
{
	None                                     = 0,
	PlayerNormal                             = 1,
	PlayerATB                                = 2,
	PlayerLimit                              = 3,
	EnemyNormal                              = 10,
	EnemySpecial                             = 11,
	EEndBikeAbilityType_MAX                  = 12,
};

// Enum EndGame.EEndBikeTriggerBoxType
// NumValues: 0x0006
enum class EEndBikeTriggerBoxType : uint8
{
	Destroy                                  = 0,
	BreakBridgeKeepVelocity                  = 1,
	BreakBridgePrepare                       = 2,
	BreakBridgeExecute                       = 3,
	BreakBridgeReset                         = 4,
	EEndBikeTriggerBoxType_MAX               = 5,
};

// Enum EndGame.EEndBikeLaserPointerCharacterType
// NumValues: 0x0003
enum class EEndBikeLaserPointerCharacterType : uint8
{
	Vehicle                                  = 0,
	MainRider                                = 1,
	EEndBikeLaserPointerCharacterType_MAX    = 2,
};

// Enum EndGame.EEndBikeLaserPointerEffectResourceCategory
// NumValues: 0x0003
enum class EEndBikeLaserPointerEffectResourceCategory : uint8
{
	Resident                                 = 0,
	Character                                = 1,
	EEndBikeLaserPointerEffectResourceCategory_MAX = 2,
};

// Enum EndGame.EEndBikeRotateYawType
// NumValues: 0x0005
enum class EEndBikeRotateYawType : uint8
{
	None                                     = 0,
	LookAtTarget                             = 1,
	KeepRelativeOffset                       = 2,
	LookAtDamageSourceTarget                 = 3,
	EEndBikeRotateYawType_MAX                = 4,
};

// Enum EndGame.EEndBikeBones
// NumValues: 0x0057
enum class EEndBikeBones : uint8
{
	C_Body_a                                 = 0,
	C_Body_End                               = 1,
	C_CharaB_a                               = 2,
	C_CharaC_a                               = 3,
	C_CharaD_a                               = 4,
	C_Steering_a                             = 5,
	C_Steering_End                           = 6,
	R_Handle_a                               = 7,
	R_Handle_End                             = 8,
	R_Lever_a                                = 9,
	R_Lever_End                              = 10,
	R_HandAttachPos_a                        = 11,
	R_HandAttachPos_End                      = 12,
	L_Handle_a                               = 13,
	L_Handle_End                             = 14,
	L_HandAttachPos_a                        = 15,
	L_HandAttachPos_End                      = 16,
	L_Lever_a                                = 17,
	L_Lever_End                              = 18,
	C_MeterA_a                               = 19,
	C_MeterA_End                             = 20,
	C_Stem_Spo                               = 21,
	C_Stem_End                               = 22,
	C_Fsus_a                                 = 23,
	C_Fsus_b                                 = 24,
	C_Fsus_End                               = 25,
	C_FWheelBase_a                           = 26,
	C_FWheel_a                               = 27,
	C_FWheel_End                             = 28,
	C_LightBulbA_a                           = 29,
	C_LightBulbA_End                         = 30,
	C_Stand_a                                = 31,
	C_Stand_End                              = 32,
	C_MeterB_a                               = 33,
	C_MeterB_End                             = 34,
	C_Engine_a                               = 35,
	C_Engine_End                             = 36,
	C_SwingArm_a                             = 37,
	C_SwingArm_End                           = 38,
	C_UnderSus_Spo                           = 39,
	C_UnderSus_End                           = 40,
	C_RWheelBase_a                           = 41,
	C_RWheel_a                               = 42,
	C_RWheel_End                             = 43,
	L_RWheel_a                               = 44,
	L_RWheel_End                             = 45,
	R_RWheel_a                               = 46,
	R_RWheel_End                             = 47,
	C_TopSus_Spo                             = 48,
	C_TopSus_End                             = 49,
	L_Pedal_a                                = 50,
	L_Pedal_End                              = 51,
	L_Stand_a                                = 52,
	L_Stand_End                              = 53,
	L_StandSpring_a                          = 54,
	L_StandSpring_End                        = 55,
	L_MufflerA_a                             = 56,
	L_MufflerA_End                           = 57,
	L_VFXMuzzleA_c                           = 58,
	L_MufflerB_a                             = 59,
	L_MufflerB_End                           = 60,
	L_VFXMuzzleA_d                           = 61,
	R_Pedal_a                                = 62,
	R_Pedal_End                              = 63,
	R_MufflerA_a                             = 64,
	R_MufflerA_End                           = 65,
	R_VFXMuzzleA_d                           = 66,
	R_MufflerB_a                             = 67,
	R_MufflerB_End                           = 68,
	R_VFXMuzzleA_e                           = 69,
	R_Stand_a                                = 70,
	R_Stand_End                              = 71,
	R_StandSpring_a                          = 72,
	R_StandSpring_End                        = 73,
	C_VFXMuzzleA_a                           = 74,
	L_VFXMuzzleA_b                           = 75,
	R_VFXMuzzleA_c                           = 76,
	C_VFXMuzzleA_d                           = 77,
	C_LightA_a                               = 78,
	C_LightA_End                             = 79,
	R_LightA_a                               = 80,
	R_LightA_End                             = 81,
	L_LightA_a                               = 82,
	L_LightA_End                             = 83,
	C_VFXMuzzle_a                            = 84,
	C_CharaA_a                               = 85,
	EEndBikeBones_MAX                        = 86,
};

// Enum EndGame.EEndBikeAddEnemyType
// NumValues: 0x0003
enum class EEndBikeAddEnemyType : uint8
{
	None                                     = 0,
	RateHp                                   = 1,
	EEndBikeAddEnemyType_MAX                 = 2,
};

// Enum EndGame.EEndBikeDangerousPointType
// NumValues: 0x0005
enum class EEndBikeDangerousPointType : uint8
{
	None                                     = 0,
	DamageSource                             = 1,
	AnimNotify                               = 2,
	LockOnMarker                             = 3,
	EEndBikeDangerousPointType_MAX           = 4,
};

// Enum EndGame.BlackCloakFootprintCreationType
// NumValues: 0x0004
enum class EBlackCloakFootprintCreationType : uint8
{
	Auto                                     = 0,
	Hand                                     = 1,
	Foot                                     = 2,
	BlackCloakFootprintCreationType_MAX      = 3,
};

// Enum EndGame.BlackCloakFootprintEffectType
// NumValues: 0x0005
enum class EBlackCloakFootprintEffectType : uint8
{
	RightHand                                = 0,
	LeftHand                                 = 1,
	RightFoot                                = 2,
	LeftFoot                                 = 3,
	BlackCloakFootprintEffectType_MAX        = 4,
};

// Enum EndGame.EEndAIBranchBit
// NumValues: 0x0003
enum class EEndAIBranchBit : uint8
{
	CmpTrue                                  = 0,
	CmpFalse                                 = 1,
	EEndAIBranchBit_MAX                      = 2,
};

// Enum EndGame.EEndAIBranch4Other
// NumValues: 0x0006
enum class EEndAIBranch4Other : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	Other                                    = 4,
	EEndAIBranch4Other_MAX                   = 5,
};

// Enum EndGame.EEndAIBranch3Other
// NumValues: 0x0005
enum class EEndAIBranch3Other : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Other                                    = 3,
	EEndAIBranch3Other_MAX                   = 4,
};

// Enum EndGame.EEndAIBranch2Other
// NumValues: 0x0004
enum class EEndAIBranch2Other : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Other                                    = 2,
	EEndAIBranch2Other_MAX                   = 3,
};

// Enum EndGame.EEndAIBranch8
// NumValues: 0x0009
enum class EEndAIBranch8 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	Case5                                    = 4,
	Case6                                    = 5,
	Case7                                    = 6,
	Case8                                    = 7,
	EEndAIBranch8_MAX                        = 8,
};

// Enum EndGame.EEndAIBranch7
// NumValues: 0x0008
enum class EEndAIBranch7 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	Case5                                    = 4,
	Case6                                    = 5,
	Case7                                    = 6,
	EEndAIBranch7_MAX                        = 7,
};

// Enum EndGame.EEndAIBranch6
// NumValues: 0x0007
enum class EEndAIBranch6 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	Case5                                    = 4,
	Case6                                    = 5,
	EEndAIBranch6_MAX                        = 6,
};

// Enum EndGame.EEndAIBranch5
// NumValues: 0x0006
enum class EEndAIBranch5 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	Case5                                    = 4,
	EEndAIBranch5_MAX                        = 5,
};

// Enum EndGame.EEndAIBranch4
// NumValues: 0x0005
enum class EEndAIBranch4 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	EEndAIBranch4_MAX                        = 4,
};

// Enum EndGame.EEndAIBranch3
// NumValues: 0x0004
enum class EEndAIBranch3 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	EEndAIBranch3_MAX                        = 3,
};

// Enum EndGame.EEndAIBranch2
// NumValues: 0x0003
enum class EEndAIBranch2 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	EEndAIBranch2_MAX                        = 2,
};

// Enum EndGame.EEndBoneAttachTarget
// NumValues: 0x0007
enum class EEndBoneAttachTarget : uint8
{
	None                                     = 0,
	OwnerCharacter                           = 1,
	OwnerParentCharacter                     = 2,
	ManualCharacter                          = 3,
	ManualTransform                          = 4,
	ManualTranslation                        = 5,
	EEndBoneAttachTarget_MAX                 = 6,
};

// Enum EndGame.EEndCustomCompositeReturnCondition
// NumValues: 0x0004
enum class EEndCustomCompositeReturnCondition : uint8
{
	FirstSuccess                             = 0,
	FirstFailure                             = 1,
	LastNodeCompletes                        = 2,
	EEndCustomCompositeReturnCondition_MAX   = 3,
};

// Enum EndGame.EBTDecorator_ArithmeticComparisonSource
// NumValues: 0x0005
enum class EBTDecorator_ArithmeticComparisonSource : uint8
{
	Blackboard                               = 0,
	ActorProperty                            = 1,
	ActorFunction                            = 2,
	LiteralValue                             = 3,
	EBTDecorator_MAX                         = 4,
};

// Enum EndGame.EAngleCheckType
// NumValues: 0x0003
enum class EAngleCheckType : uint32
{
	To                                       = 0,
	From                                     = 1,
	EAngleCheckType_MAX                      = 2,
};

// Enum EndGame.EEndAIDangerSensorType
// NumValues: 0x0005
enum class EEndAIDangerSensorType : uint8
{
	InDamageArea                             = 0,
	InDamageAreaSensor                       = 1,
	NearDamageArea                           = 2,
	InDodgeAreaTarget                        = 3,
	EEndAIDangerSensorType_MAX               = 4,
};

// Enum EndGame.EEndAISensingCharacterType
// NumValues: 0x0004
enum class EEndAISensingCharacterType : uint8
{
	Party                                    = 0,
	Follow                                   = 1,
	FieldAction                              = 2,
	EEndAISensingCharacterType_MAX           = 3,
};

// Enum EndGame.ECommandAbilityInfoType
// NumValues: 0x0004
enum class ECommandAbilityInfoType : uint32
{
	IsCombinationAbility                     = 0,
	IsTeleportToExecutor                     = 1,
	ShouldCheckOcclusion                     = 2,
	ECommandAbilityInfoType_MAX              = 3,
};

// Enum EndGame.ETargetType
// NumValues: 0x0003
enum class ETargetType : uint32
{
	Normal                                   = 0,
	Command                                  = 1,
	ETargetType_MAX                          = 2,
};

// Enum EndGame.EEndAIBTScreenLogType
// NumValues: 0x0004
enum class EEndAIBTScreenLogType : uint8
{
	Standard                                 = 0,
	Warning                                  = 1,
	Error                                    = 2,
	EEndAIBTScreenLogType_MAX                = 3,
};

// Enum EndGame.EEndBTDecoratorInvokeType
// NumValues: 0x0003
enum class EEndBTDecoratorInvokeType : uint8
{
	Activate                                 = 0,
	Deactivate                               = 1,
	EEndBTDecoratorInvokeType_MAX            = 2,
};

// Enum EndGame.EAIPCDodgeInhibitType
// NumValues: 0x0003
enum class EAIPCDodgeInhibitType : uint8
{
	UCPCVehicleWeapon                        = 0,
	VehicleWeaponRider                       = 1,
	EAIPCDodgeInhibitType_MAX                = 2,
};

// Enum EndGame.EDodgeDirectionType
// NumValues: 0x0003
enum class EDodgeDirectionType : uint8
{
	TOWARD                                   = 0,
	AWAY                                     = 1,
	EDodgeDirectionType_MAX                  = 2,
};

// Enum EndGame.ECautionMoveKind
// NumValues: 0x0004
enum class ECautionMoveKind : uint8
{
	ApproachOrLeave                          = 0,
	Keep                                     = 1,
	Around                                   = 2,
	ECautionMoveKind_MAX                     = 3,
};

// Enum EndGame.EEndCactusMissionMiniGameEnemyType
// NumValues: 0x0006
enum class EEndCactusMissionMiniGameEnemyType : uint8
{
	NORMAL                                   = 0,
	NORMAL_L                                 = 1,
	SHOOTER                                  = 2,
	CORTENDER                                = 3,
	TIME_PLUS                                = 4,
	MAX                                      = 5,
};

// Enum EndGame.EEndAppearCondition
// NumValues: 0x0006
enum class EEndAppearCondition : uint8
{
	None                                     = 0,
	Time                                     = 1,
	LeftTime                                 = 2,
	EnemyLeft                                = 3,
	DefeatEnemyCount                         = 4,
	EEndAppearCondition_MAX                  = 5,
};

// Enum EndGame.EEndCutBlendOutType
// NumValues: 0x0006
enum class EEndCutBlendOutType : uint8
{
	None                                     = 0,
	NoBlend                                  = 1,
	SpecifiedTime                            = 2,
	WaitUntilInput                           = 3,
	Inertia                                  = 4,
	EEndCutBlendOutType_MAX                  = 5,
};

// Enum EndGame.EEndCameraLadderStateType
// NumValues: 0x0004
enum class EEndCameraLadderStateType : uint8
{
	Enter                                    = 0,
	Move                                     = 1,
	Leave                                    = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndCameraLookAtDeactivateType
// NumValues: 0x0004
enum class EEndCameraLookAtDeactivateType : uint8
{
	ReturnPitch                              = 0,
	KeepPitch                                = 1,
	ResetPitch                               = 2,
	EEndCameraLookAtDeactivateType_MAX       = 3,
};

// Enum EndGame.ECameraInfoParamType
// NumValues: 0x0009
enum class ECameraInfoParamType : uint8
{
	Location                                 = 1,
	Rotation                                 = 2,
	FOV                                      = 4,
	SweepCenterLocation                      = 8,
	AimLocation                              = 16,
	AimDistance                              = 32,
	LocalAimOffset                           = 64,
	Height                                   = 128,
	ECameraInfoParamType_MAX                 = 129,
};

// Enum EndGame.EEndCameraModuleLayer
// NumValues: 0x001A
enum class EEndCameraModuleLayer : uint8
{
	Debug                                    = 0,
	HeightDeadzone                           = 1,
	IdleHeightStabilizer                     = 2,
	CharacterAdjust                          = 3,
	NotifyOverride                           = 4,
	BattleOffset                             = 5,
	AdjustLength                             = 6,
	LockOn                                   = 7,
	StealCamera                              = 8,
	SweepCenterAdjustments                   = 9,
	Reset                                    = 10,
	ResetTurnBack                            = 11,
	SpaceOffset                              = 12,
	Swim                                     = 13,
	SecondaryCharacter                       = 14,
	ExtraAction                              = 15,
	LookAt                                   = 16,
	LookAtTurnBack                           = 17,
	CustomizableAction                       = 18,
	AutoRotate                               = 19,
	Skill                                    = 20,
	Command                                  = 21,
	LeaderChange                             = 22,
	Scan                                     = 23,
	WaterSurface                             = 24,
	MAX                                      = 25,
};

// Enum EndGame.EEndCameraSettingLayer
// NumValues: 0x0009
enum class EEndCameraSettingLayer : uint8
{
	Debug                                    = 0,
	Override                                 = 1,
	FieldAction                              = 2,
	Chocobo                                  = 3,
	InDoor                                   = 4,
	Location                                 = 5,
	Blend                                    = 6,
	Default                                  = 7,
	MAX                                      = 8,
};

// Enum EndGame.EEndCameraOperatorType
// NumValues: 0x000E
enum class EEndCameraOperatorType : uint8
{
	Debug                                    = 0,
	MenuModel                                = 1,
	Menu                                     = 2,
	Cut                                      = 3,
	Dialogue                                 = 4,
	PlannerEvent                             = 5,
	Shop                                     = 6,
	Rail                                     = 7,
	MiniGameCard                             = 8,
	MiniGame                                 = 9,
	Sequencer                                = 10,
	Battle                                   = 11,
	Field                                    = 12,
	MAX                                      = 13,
};

// Enum EndGame.EEndCardGame3DTokenMoveState
// NumValues: 0x0004
enum class EEndCardGame3DTokenMoveState : uint8
{
	None                                     = 0,
	Moving                                   = 1,
	MoveEnd                                  = 2,
	EEndCardGame3DTokenMoveState_MAX         = 3,
};

// Enum EndGame.EEndChapterStep
// NumValues: 0x000A
enum class EEndChapterStep : uint8
{
	None                                     = 0,
	ChangeChapterStart                       = 1,
	ChangeChapterLoop                        = 2,
	ChangeChapterEnd                         = 3,
	QuestSetupLoop                           = 4,
	QuestSetupEnd                            = 5,
	PostStateManagerEntryObjectStart         = 6,
	PostStateManagerEntryObjectLoop          = 7,
	PostStateManagerEntryObjectEnd           = 8,
	Max                                      = 9,
};

// Enum EndGame.EEndCharacterAttachEffectResourceCategoryType
// NumValues: 0x0005
enum class EEndCharacterAttachEffectResourceCategoryType : uint8
{
	Resident                                 = 0,
	Character                                = 1,
	ResourceCharacter                        = 2,
	ResourceLevel                            = 3,
	EEndCharacterAttachEffectResourceCategoryType_MAX = 4,
};

// Enum EndGame.EKinematicBonesUpdateToPhysicsCategory
// NumValues: 0x0006
enum class EKinematicBonesUpdateToPhysicsCategory : uint8
{
	BehaviorMode                             = 0,
	ActorType                                = 1,
	Ragdoll                                  = 2,
	MiniGame                                 = 3,
	Vehicle                                  = 4,
	EKinematicBonesUpdateToPhysicsCategory_MAX = 5,
};

// Enum EndGame.EActorAiMode
// NumValues: 0x0006
enum class EActorAiMode : uint8
{
	EActorAiMode_CINEMA                      = 0,
	EActorAiMode_PLAYER                      = 1,
	EActorAiMode_FIELD                       = 2,
	EActorAiMode_BATTLE                      = 3,
	EActorAiMode_AI                          = 4,
	EActorAiMode_MAX                         = 5,
};

// Enum EndGame.EEndCharacterControllerStateType
// NumValues: 0x0028
enum class EEndCharacterControllerStateType : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Ability                                  = 2,
	Animation                                = 3,
	Action                                   = 4,
	Damage                                   = 5,
	Dead                                     = 6,
	Revive                                   = 7,
	FieldActionCommon                        = 8,
	FieldAttack                              = 9,
	Vault                                    = 10,
	Climbing                                 = 11,
	FieldNatural                             = 12,
	MineCart                                 = 13,
	CableCart                                = 14,
	FieldDodge                               = 15,
	FieldTargetJump                          = 16,
	HookRope                                 = 17,
	ChocoboStop                              = 18,
	Treasure                                 = 19,
	HoldObject                               = 20,
	CatsithRolling                           = 21,
	FieldWallRunning                         = 22,
	SearchCactusRock                         = 23,
	SpiderMove                               = 24,
	HintAnimalInteract                       = 25,
	ChocoboGlide                             = 26,
	ChocoboJet                               = 27,
	ChocoboFieldStep                         = 28,
	ChocoboFieldDrift                        = 29,
	ChocoboFieldBrake                        = 30,
	MiniGameTorokko                          = 31,
	MiniGameFrogGuys                         = 32,
	MiniGameAnimalRun                        = 33,
	Guard                                    = 34,
	Burst                                    = 35,
	Sleep                                    = 36,
	Stun                                     = 37,
	BattleDodge                              = 38,
	Max                                      = 39,
};

// Enum EndGame.EOverlapTargetSection
// NumValues: 0x000A
enum class EOverlapTargetSection : uint8
{
	Actor                                    = 0,
	Layout                                   = 1,
	FieldAction                              = 2,
	TurnBack                                 = 3,
	BattleTalk                               = 4,
	Vehicle                                  = 5,
	PlayerChara                              = 6,
	MiniGame                                 = 7,
	AI                                       = 8,
	Max                                      = 9,
};

// Enum EndGame.ESafeTransformEnable
// NumValues: 0x000E
enum class ESafeTransformEnable : uint8
{
	ESafeTransform_DEBUG                     = 0,
	ESafeTransform_SYSTEM                    = 1,
	ESafeTransform_AIMOVE                    = 2,
	ESafeTransform_ANIMATION                 = 3,
	ESafeTransform_FIELD                     = 4,
	ESafeTransform_FIELD_AI                  = 5,
	ESafeTransform_FIELD_ACTION              = 6,
	ESafeTransform_FIELD_CINEMA              = 7,
	ESafeTransform_MINIGAME                  = 8,
	ESafeTransform_BATTLE                    = 9,
	ESafeTransform_CINEMA                    = 10,
	ESafeTransform_VEHICLE                   = 11,
	ESafeTransform_FIELD_COMPONENT           = 12,
	ESafeTransform_MAX                       = 13,
};

// Enum EndGame.EWeaponSlot
// NumValues: 0x000C
enum class EWeaponSlot : uint8
{
	EWeaponSlot_1                            = 0,
	EWeaponSlot_2                            = 1,
	EWeaponSlot_3                            = 2,
	EWeaponSlot_4                            = 3,
	EWeaponSlot_5                            = 4,
	EWeaponSlot_6                            = 5,
	EWeaponSlot_7                            = 6,
	EWeaponSlot_8                            = 7,
	EWeaponSlot_9                            = 8,
	EWeaponSlot_10                           = 9,
	EWeaponSlot_MAX                          = 10,
	EWeaponSlot_NONE                         = 11,
};

// Enum EndGame.EEndCharacterZeroOneSeProperties
// NumValues: 0x0003
enum class EEndCharacterZeroOneSeProperties : uint8
{
	None                                     = 0,
	Velocity                                 = 1,
	EEndCharacterZeroOneSeProperties_MAX     = 2,
};

// Enum EndGame.EChocoboCameraStateType
// NumValues: 0x0012
enum class EChocoboCameraStateType : uint8
{
	Normal                                   = 0,
	StartClimb                               = 1,
	StartClimbDown                           = 2,
	Climb                                    = 3,
	LeaveClimb                               = 4,
	Swim                                     = 5,
	LeaveSwim                                = 6,
	Jet                                      = 7,
	JetCeiling                               = 8,
	JetGlide                                 = 9,
	JetFall                                  = 10,
	Glide                                    = 11,
	PrepareJump                              = 12,
	Jump                                     = 13,
	Slide                                    = 14,
	BlendToNormal                            = 15,
	OverrideCameraMode                       = 16,
	MAX                                      = 17,
};

// Enum EndGame.EEndChocoboCaptureVolumeType
// NumValues: 0x0009
enum class EEndChocoboCaptureVolumeType : uint8
{
	Bush                                     = 0,
	Goal                                     = 1,
	EscapeArea                               = 2,
	Sleep                                    = 3,
	CheckPoint                               = 4,
	BalloonArea                              = 5,
	BegWatching                              = 6,
	NoThrowBarrier                           = 7,
	EEndChocoboCaptureVolumeType_MAX         = 8,
};

// Enum EndGame.EEndChocoboPlayerMoveState
// NumValues: 0x0005
enum class EEndChocoboPlayerMoveState : uint8
{
	Idle                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	Dash                                     = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndChocoboRaceBombSearchType
// NumValues: 0x0004
enum class EEndChocoboRaceBombSearchType : uint8
{
	Player                                   = 0,
	NPC                                      = 1,
	All                                      = 2,
	EEndChocoboRaceBombSearchType_MAX        = 3,
};

// Enum EndGame.EEndChocoboRacePlaySE
// NumValues: 0x0016
enum class EEndChocoboRacePlaySE : uint8
{
	GetItemAbility                           = 0,
	GetItemDash                              = 1,
	GetItemSpeed                             = 2,
	OpenStartGate                            = 3,
	BlockMove                                = 4,
	BombExplosion                            = 5,
	HitBound                                 = 6,
	BoundJump                                = 7,
	UseDashOK                                = 8,
	UseDashNG                                = 9,
	UseAbilityOK                             = 10,
	UseAbilityNG                             = 11,
	BumpHitFenceN                            = 12,
	BumpHitFenceM                            = 13,
	BumpHitChocobo                           = 14,
	BumpHitBoard                             = 15,
	BumpHitGimmick                           = 16,
	BumpHitBox                               = 17,
	BumpHitIronBall                          = 18,
	BumpHitEtc                               = 19,
	BumpHitBound                             = 20,
	Max                                      = 21,
};

// Enum EndGame.EEndChocoboRaceAbility
// NumValues: 0x0008
enum class EEndChocoboRaceAbility : uint8
{
	Boost                                    = 0,
	SuperArmor                               = 1,
	Shot                                     = 2,
	Jump                                     = 3,
	Hover                                    = 4,
	Homing                                   = 5,
	FullPower                                = 6,
	Max                                      = 7,
};

// Enum EndGame.EEndChocoboRaceAssetPacker
// NumValues: 0x0006
enum class EEndChocoboRaceAssetPacker : uint8
{
	Common                                   = 0,
	Unique31                                 = 1,
	Unique32                                 = 2,
	Unique34                                 = 3,
	Unique35                                 = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndChocoboRaceRunTrigger
// NumValues: 0x000C
enum class EEndChocoboRaceRunTrigger : uint8
{
	RaceStart                                = 0,
	FinalLap                                 = 1,
	Damage                                   = 2,
	ReturnCourse                             = 3,
	Overtake                                 = 4,
	IsOvertaken                              = 5,
	OverGoal                                 = 6,
	ForceMoveFoward                          = 7,
	KeepDashDuration                         = 8,
	PreDriftRequestInput                     = 9,
	DisableIK                                = 10,
	Max                                      = 11,
};

// Enum EndGame.EEndChocoboRaceRunState
// NumValues: 0x0042
enum class EEndChocoboRaceRunState : uint8
{
	SuperBoost                               = 0,
	SuperBoostExtra                          = 1,
	SuperArmor                               = 2,
	AbilityFloat                             = 3,
	AbilityFullPower                         = 4,
	Dash                                     = 5,
	Brake                                    = 6,
	BrakeEnd                                 = 7,
	DriftTurboReadyLv1                       = 8,
	DriftTurboReadyLv2                       = 9,
	DriftTurboLv1                            = 10,
	DriftTurboLv2                            = 11,
	UseDashStock                             = 12,
	GimmickDash                              = 13,
	DisableDriftInput                        = 14,
	MaxSpeedTrigger                          = 15,
	SuccessRocketStart                       = 16,
	InputStartAccel                          = 17,
	AccelBoost                               = 18,
	RocketStartBoost                         = 19,
	Conveyor                                 = 20,
	Barrier                                  = 21,
	Weakened                                 = 22,
	Damage                                   = 23,
	Updraft                                  = 24,
	JumpAction                               = 25,
	AbilityJumping                           = 26,
	JumpActionFromGlide                      = 27,
	BoundCushionJump                         = 28,
	ShotKeep                                 = 29,
	AbilityShooting                          = 30,
	HomingKeep                               = 31,
	HomingShooting                           = 32,
	ActivatedAbilityJump                     = 33,
	AbilityJumpGroundTrigger                 = 34,
	JumpShockWave                            = 35,
	InGlideBox                               = 36,
	EmAttackModeApproach                     = 37,
	EmAttackMode                             = 38,
	EmPaceUpMode                             = 39,
	EmPaceDownMode                           = 40,
	DisableBackCamera                        = 41,
	Trampoline                               = 42,
	InCourseOutBox                           = 43,
	IgnoreCourseOut                          = 44,
	Bumping                                  = 45,
	IgnoreBump                               = 46,
	DisableInput                             = 47,
	OverrideDestination                      = 48,
	BranchRoot                               = 49,
	StraightCourse                           = 50,
	UseGimmick                               = 51,
	InAbilityFloatBox                        = 52,
	CountDownState                           = 53,
	RaceState                                = 54,
	RaceControllableState                    = 55,
	BombTargetExclusion                      = 56,
	AutoRunMask                              = 57,
	CourseOut                                = 58,
	KeepAbilityPoint                         = 59,
	ReduceGimmickHit                         = 60,
	InDriftBoxL                              = 61,
	InDriftBoxR                              = 62,
	ActivatePreDriftRequest                  = 63,
	AttachTrampoline                         = 64,
	Max                                      = 65,
};

// Enum EndGame.EEndChocoboRaceSkillCondition
// NumValues: 0x0018
enum class EEndChocoboRaceSkillCondition : uint8
{
	None                                     = 0,
	Always                                   = 1,
	RaceStart                                = 2,
	FinalLap                                 = 3,
	NearGoal                                 = 4,
	LowerRank                                = 5,
	EqualRank                                = 6,
	UpperRank                                = 7,
	Overtake                                 = 8,
	IsOvertaken                              = 9,
	NearTop                                  = 10,
	ReturnCourse                             = 11,
	Damage                                   = 12,
	StraightCourse                           = 13,
	Slope                                    = 14,
	CountDown                                = 15,
	RocketStart                              = 16,
	Drift                                    = 17,
	RunOff                                   = 18,
	Water                                    = 19,
	DashFloor                                = 20,
	OnMoogle                                 = 21,
	FinalLapState                            = 22,
	EEndChocoboRaceSkillCondition_MAX        = 23,
};

// Enum EndGame.EEndChocoboRaceSkillEffect
// NumValues: 0x001A
enum class EEndChocoboRaceSkillEffect : uint8
{
	None                                     = 0,
	SpeedUp                                  = 1,
	AccelerationUp                           = 2,
	WeightUp                                 = 3,
	CornaringUp                              = 4,
	GripUp                                   = 5,
	IntelligenceUp                           = 6,
	RocketStartRangeUp                       = 7,
	RocketStartSpeedUp                       = 8,
	DashSpeedUp                              = 9,
	DashDurationUp                           = 10,
	DashStockMaxUp                           = 11,
	AddDashStock                             = 12,
	AddAbilityGauge                          = 13,
	DriftTurboDurationUp                     = 14,
	DriftTurboSpeedUp                        = 15,
	RunOffPenaltyDown                        = 16,
	WaterPenaltyDown                         = 17,
	AbilityEffectUp                          = 18,
	DashFloorUp                              = 19,
	DamagePenaltyDown                        = 20,
	CourseOutPenaltyDown                     = 21,
	RandomAbilitySet                         = 22,
	ItemUp                                   = 23,
	SpeedUp_DiffTop                          = 24,
	EEndChocoboRaceSkillEffect_MAX           = 25,
};

// Enum EndGame.EEndChocoboRaceRunEventType
// NumValues: 0x0008
enum class EEndChocoboRaceRunEventType : uint8
{
	None                                     = 0,
	Glide                                    = 1,
	DriftL                                   = 2,
	DriftR                                   = 3,
	DisableBackCamera                        = 4,
	StraightCourse                           = 5,
	EnableAero                               = 6,
	EEndChocoboRaceRunEventType_MAX          = 7,
};

// Enum EndGame.EEndChocoboRaceGroundState
// NumValues: 0x0006
enum class EEndChocoboRaceGroundState : uint8
{
	Normal                                   = 0,
	RunOffGrass                              = 1,
	RunOffWater                              = 2,
	Fall                                     = 3,
	Action                                   = 4,
	EEndChocoboRaceGroundState_MAX           = 5,
};

// Enum EndGame.EEndChocoboRaceItemType
// NumValues: 0x0004
enum class EEndChocoboRaceItemType : uint8
{
	DashStock                                = 0,
	AbillityPoint                            = 1,
	SpeedUp                                  = 2,
	EEndChocoboRaceItemType_MAX              = 3,
};

// Enum EndGame.EEndChocoboRaceRunType
// NumValues: 0x0006
enum class EEndChocoboRaceRunType : uint8
{
	Constant                                 = 0,
	First                                    = 1,
	Stay                                     = 2,
	LastSpurt                                = 3,
	Random                                   = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndChocoboRaceCourseRank
// NumValues: 0x0007
enum class EEndChocoboRaceCourseRank : uint8
{
	Beginner                                 = 0,
	Advanced                                 = 1,
	Silver                                   = 2,
	Gold                                     = 3,
	Master                                   = 4,
	Special                                  = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndChocoboRaceModeType
// NumValues: 0x0008
enum class EEndChocoboRaceModeType : uint8
{
	Beginner                                 = 0,
	Advanced                                 = 1,
	GoldCup                                  = 2,
	Tutorial                                 = 3,
	SubQuest                                 = 4,
	ShinraManager                            = 5,
	MainStory                                = 6,
	EEndChocoboRaceModeType_MAX              = 7,
};

// Enum EndGame.EEndChocoboRaceCondition
// NumValues: 0x0006
enum class EEndChocoboRaceCondition : uint8
{
	VeryBad                                  = 0,
	Bad                                      = 1,
	Normal                                   = 2,
	Good                                     = 3,
	VeryGood                                 = 4,
	EEndChocoboRaceCondition_MAX             = 5,
};

// Enum EndGame.EEndChocoboRaceChocoboType
// NumValues: 0x0009
enum class EEndChocoboRaceChocoboType : uint8
{
	Normal                                   = 0,
	MountainAndRiver                         = 1,
	Sand                                     = 2,
	Forest                                   = 3,
	Sky                                      = 4,
	Sea                                      = 5,
	Mechanical                               = 6,
	UniqueRival                              = 7,
	Max                                      = 8,
};

// Enum EndGame.EEndCinemaPropertyCurveApplyType
// NumValues: 0x0004
enum class EEndCinemaPropertyCurveApplyType : uint8
{
	Store                                    = 0,
	Addition                                 = 1,
	Multiplication                           = 2,
	EEndCinemaPropertyCurveApplyType_MAX     = 3,
};

// Enum EndGame.EEndCinemaPropertyCurvePlayType
// NumValues: 0x0003
enum class EEndCinemaPropertyCurvePlayType : uint8
{
	NoLoop                                   = 0,
	Loop                                     = 1,
	EEndCinemaPropertyCurvePlayType_MAX      = 2,
};

// Enum EndGame.EEndCinemaResidentEffectVisibility
// NumValues: 0x0003
enum class EEndCinemaResidentEffectVisibility : uint8
{
	Visible                                  = 0,
	Hidden                                   = 1,
	EEndCinemaResidentEffectVisibility_MAX   = 2,
};

// Enum EndGame.EEndCinemaSceneLightCurveApplyType
// NumValues: 0x0004
enum class EEndCinemaSceneLightCurveApplyType : uint8
{
	Store                                    = 0,
	Addition                                 = 1,
	Multiplication                           = 2,
	EEndCinemaSceneLightCurveApplyType_MAX   = 3,
};

// Enum EndGame.EEndCinemaSceneLightCurvePlayType
// NumValues: 0x0003
enum class EEndCinemaSceneLightCurvePlayType : uint8
{
	NoLoop                                   = 0,
	Loop                                     = 1,
	EEndCinemaSceneLightCurvePlayType_MAX    = 2,
};

// Enum EndGame.EEndCollision
// NumValues: 0x0005
enum class EEndCollision : uint8
{
	SPHERE                                   = 0,
	CAPSULE                                  = 1,
	BOX                                      = 2,
	CONVEX                                   = 3,
	MAX                                      = 4,
};

// Enum EndGame.EEndMenuSlateColorPickerChannels
// NumValues: 0x0004
enum class EEndMenuSlateColorPickerChannels : uint8
{
	Hue                                      = 0,
	Saturation                               = 1,
	Value                                    = 2,
	EEndMenuSlateColorPickerChannels_MAX     = 3,
};

// Enum EndGame.EEndCrashBoxMiniGameBoxDifficultyType
// NumValues: 0x0004
enum class EEndCrashBoxMiniGameBoxDifficultyType : uint8
{
	ALL                                      = 0,
	NORMAL_ONLY                              = 1,
	HARD_ONLY                                = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndCrashBoxMiniGameBoxTypePhysics
// NumValues: 0x0005
enum class EEndCrashBoxMiniGameBoxTypePhysics : uint8
{
	NORMAL                                   = 0,
	ABILITY                                  = 1,
	HIGH_GREAD                               = 2,
	ELECTRIC                                 = 3,
	MAX                                      = 4,
};

// Enum EndGame.EEndCrashBoxMiniGameEffect
// NumValues: 0x0003
enum class EEndCrashBoxMiniGameEffect : uint8
{
	BREAK                                    = 0,
	ELECTRIC                                 = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndCrashBoxMiniGameBoxType
// NumValues: 0x000E
enum class EEndCrashBoxMiniGameBoxType : uint8
{
	NORMAL                                   = 0,
	ABILITY                                  = 1,
	ABILITY2                                 = 2,
	HIGH_GREAD                               = 3,
	ELECTRIC                                 = 4,
	HIGH_GREAD_L                             = 5,
	ELECTRIC_L                               = 6,
	PHYSICAL                                 = 7,
	MAGIC                                    = 8,
	STOP                                     = 9,
	CACTUS                                   = 10,
	CACTUS_L                                 = 11,
	GEAR                                     = 12,
	MAX                                      = 13,
};

// Enum EndGame.EEndCrashBoxMiniGameEffectCable
// NumValues: 0x0010
enum class EEndCrashBoxMiniGameEffectCable : uint8
{
	CHARGE_A                                 = 0,
	CHARGE_B                                 = 1,
	CHARGE_C                                 = 2,
	CHARGE_D                                 = 3,
	CHARGE_E                                 = 4,
	ELECTRIC_SHOCK_A                         = 5,
	ELECTRIC_SHOCK_B                         = 6,
	ELECTRIC_SHOCK_C                         = 7,
	ELECTRIC_SHOCK_D                         = 8,
	ELECTRIC_SHOCK_E                         = 9,
	SE_A                                     = 10,
	SE_B                                     = 11,
	SE_C                                     = 12,
	SE_D                                     = 13,
	SE_E                                     = 14,
	MAX                                      = 15,
};

// Enum EndGame.EEndCrashBoxMiniGameCableDifficultyType
// NumValues: 0x0004
enum class EEndCrashBoxMiniGameCableDifficultyType : uint8
{
	ALL                                      = 0,
	NORMAL_ONLY                              = 1,
	HARD_ONLY                                = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndCrashBoxMiniGameCableType
// NumValues: 0x000C
enum class EEndCrashBoxMiniGameCableType : uint8
{
	A                                        = 0,
	B                                        = 1,
	C                                        = 2,
	D                                        = 3,
	E                                        = 4,
	A_Effect                                 = 5,
	B_Effect                                 = 6,
	C_Effect                                 = 7,
	D_Effect                                 = 8,
	E_Effect                                 = 9,
	A_Attachment                             = 10,
	MAX                                      = 11,
};

// Enum EndGame.EEndCrashBoxMiniGameGearBoxDifficultyType
// NumValues: 0x0004
enum class EEndCrashBoxMiniGameGearBoxDifficultyType : uint8
{
	ALL                                      = 0,
	NORMAL_ONLY                              = 1,
	HARD_ONLY                                = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndCrashBoxMiniGameGearBoxEffect
// NumValues: 0x0002
enum class EEndCrashBoxMiniGameGearBoxEffect : uint8
{
	BREAK                                    = 0,
	MAX                                      = 1,
};

// Enum EndGame.EEndCrashBoxMiniGameGearBoxSkeletalMeshActorDifficultyType
// NumValues: 0x0004
enum class EEndCrashBoxMiniGameGearBoxSkeletalMeshActorDifficultyType : uint8
{
	ALL                                      = 0,
	NORMAL_ONLY                              = 1,
	HARD_ONLY                                = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndCrashBoxMiniGameGearBoxSkeletalMeshActorEffect
// NumValues: 0x0002
enum class EEndCrashBoxMiniGameGearBoxSkeletalMeshActorEffect : uint8
{
	BREAK                                    = 0,
	MAX                                      = 1,
};

// Enum EndGame.EEndCrashBoxMiniGameEffectLiftRoot
// NumValues: 0x0002
enum class EEndCrashBoxMiniGameEffectLiftRoot : uint8
{
	BREAK                                    = 0,
	MAX                                      = 1,
};

// Enum EndGame.EEndCrashBoxMiniGameLiftDifficultyType
// NumValues: 0x0004
enum class EEndCrashBoxMiniGameLiftDifficultyType : uint8
{
	ALL                                      = 0,
	NORMAL_ONLY                              = 1,
	HARD_ONLY                                = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndCrashBoxMiniGameLiftPartsType
// NumValues: 0x0006
enum class EEndCrashBoxMiniGameLiftPartsType : uint8
{
	B                                        = 0,
	C                                        = 1,
	C_Long                                   = 2,
	D                                        = 3,
	E                                        = 4,
	MAX                                      = 5,
};

// Enum EndGame.EEndCrossSaveJob
// NumValues: 0x0008
enum class EEndCrossSaveJob : uint8
{
	None                                     = 0,
	Read                                     = 1,
	Upload                                   = 2,
	Download                                 = 3,
	Write                                    = 4,
	ReadUpload                               = 5,
	DownloadWrite                            = 6,
	EEndCrossSaveJob_MAX                     = 7,
};

// Enum EndGame.EEndCrossSaveState
// NumValues: 0x000F
enum class EEndCrossSaveState : uint8
{
	None                                     = 0,
	Read                                     = 1,
	Read_WaitSaveData                        = 2,
	Upload                                   = 3,
	Upload_WaitTCS                           = 4,
	Download                                 = 5,
	Download_WaitTCS                         = 6,
	Write                                    = 7,
	Write_WaitSaveData                       = 8,
	Success                                  = 9,
	Success_WaitEndUI                        = 10,
	Error                                    = 11,
	Error_WaitSceError                       = 12,
	Error_WaitEndUI                          = 13,
	EEndCrossSaveState_MAX                   = 14,
};

// Enum EndGame.EEndCutVehicleSoundControlType
// NumValues: 0x0003
enum class EEndCutVehicleSoundControlType : uint8
{
	Stop                                     = 0,
	Play                                     = 1,
	EEndCutVehicleSoundControlType_MAX       = 2,
};

// Enum EndGame.EEndCutLogicalOperator
// NumValues: 0x0004
enum class EEndCutLogicalOperator : uint8
{
	AND                                      = 0,
	OR                                       = 1,
	XOR                                      = 2,
	EEndCutLogicalOperator_MAX               = 3,
};

// Enum EndGame.EEndCutMovieControlGroup
// NumValues: 0x0003
enum class EEndCutMovieControlGroup : uint8
{
	None                                     = 0,
	Exclusive                                = 1,
	EEndCutMovieControlGroup_MAX             = 2,
};

// Enum EndGame.EEndCutMovieControlType
// NumValues: 0x0005
enum class EEndCutMovieControlType : uint8
{
	Stop                                     = 0,
	Play                                     = 1,
	LoopPlay                                 = 2,
	Open                                     = 3,
	EEndCutMovieControlType_MAX              = 4,
};

// Enum EndGame.EEndCutLightModulationType
// NumValues: 0x0003
enum class EEndCutLightModulationType : uint8
{
	EnvironmentLight                         = 0,
	DirectionalLight                         = 1,
	EEndCutLightModulationType_MAX           = 2,
};

// Enum EndGame.EEndPachiCharaOption
// NumValues: 0x0003
enum class EEndPachiCharaOption : uint8
{
	None                                     = 0,
	BattleLastOne                            = 1,
	EEndPachiCharaOption_MAX                 = 2,
};

// Enum EndGame.EEndCutVehicleGetOffOption
// NumValues: 0x0003
enum class EEndCutVehicleGetOffOption : uint8
{
	GetOff                                   = 0,
	Nothing                                  = 1,
	EEndCutVehicleGetOffOption_MAX           = 2,
};

// Enum EndGame.EEndPachiCharaFlagType
// NumValues: 0x0005
enum class EEndPachiCharaFlagType : uint8
{
	SpawnOnEvent                             = 0,
	DerivedMotion                            = 1,
	OverwriteBindActor                       = 2,
	DisableForceLOD                          = 3,
	EEndPachiCharaFlagType_MAX               = 4,
};

// Enum EndGame.EEndCutLangType
// NumValues: 0x0005
enum class EEndCutLangType : uint8
{
	JP                                       = 0,
	US                                       = 1,
	DE                                       = 2,
	FR                                       = 3,
	EEndCutLangType_MAX                      = 4,
};

// Enum EndGame.EEndCutGetOffChocoboOption
// NumValues: 0x0003
enum class EEndCutGetOffChocoboOption : uint8
{
	GOCO_Default                             = 0,
	GOCO_BattleIn                            = 1,
	GOCO_Max                                 = 2,
};

// Enum EndGame.EEndRythmMiniGameNote
// NumValues: 0x0004
enum class EEndRythmMiniGameNote : uint8
{
	SINGLE_TAP                               = 0,
	LONG_TAP                                 = 1,
	CONSECUTIVE_TAP                          = 2,
	EEndRythmMiniGameNote_MAX                = 3,
};

// Enum EndGame.EEndRythmMiniGameInputKey
// NumValues: 0x0006
enum class EEndRythmMiniGameInputKey : uint8
{
	NONE                                     = 18446744073709551615,
	CIRCLE                                   = 0,
	TRIANGLE                                 = 1,
	SQUARE                                   = 2,
	CROSS                                    = 3,
	EEndRythmMiniGameInputKey_MAX            = 4,
};

// Enum EndGame.EEndLovelessPlayMiniGameControllerForceFeedbackEventType
// NumValues: 0x0004
enum class EEndLovelessPlayMiniGameControllerForceFeedbackEventType : uint8
{
	SINGLE_VIBRATION                         = 0,
	LONG_VIBRATION_START                     = 1,
	LONG_VIBRATION_END                       = 2,
	EEndLovelessPlayMiniGameControllerForceFeedbackEventType_MAX = 3,
};

// Enum EndGame.EEndLovelessPlayMiniGameUIAngleOrientation
// NumValues: 0x0006
enum class EEndLovelessPlayMiniGameUIAngleOrientation : uint8
{
	BTN_CENTER                               = 0,
	BTN_TOP                                  = 1,
	BTN_BOTTOM                               = 2,
	BTN_RIGHT                                = 3,
	BTN_LEFT                                 = 4,
	BTN_MAX                                  = 5,
};

// Enum EndGame.EEndLovelessPlayMiniGameKey
// NumValues: 0x0004
enum class EEndLovelessPlayMiniGameKey : uint8
{
	SINGLE_TAP                               = 0,
	CONSECUTIVE_TAP                          = 1,
	ALL_BUTTONS_TAP                          = 2,
	EEndLovelessPlayMiniGameKey_MAX          = 3,
};

// Enum EndGame.EEndLovelessPlayMiniGameInputKey
// NumValues: 0x0007
enum class EEndLovelessPlayMiniGameInputKey : uint8
{
	NONE                                     = 18446744073709551615,
	CIRCLE                                   = 0,
	TRIANGLE                                 = 1,
	SQUARE                                   = 2,
	CROSS                                    = 3,
	R1                                       = 4,
	EEndLovelessPlayMiniGameInputKey_MAX     = 5,
};

// Enum EndGame.EEndCutEnableAddViewSlaveLocation
// NumValues: 0x0004
enum class EEndCutEnableAddViewSlaveLocation : uint8
{
	None                                     = 0,
	Enable                                   = 1,
	Disable                                  = 2,
	EEndCutEnableAddViewSlaveLocation_MAX    = 3,
};

// Enum EndGame.EEndCutOverrideFootAttributeMode
// NumValues: 0x0003
enum class EEndCutOverrideFootAttributeMode : uint8
{
	COFA_Part                                = 0,
	COFA_All                                 = 1,
	COFA_Max                                 = 2,
};

// Enum EndGame.EEndCutSelectWidgetOption
// NumValues: 0x0002
enum class EEndCutSelectWidgetOption : uint8
{
	CESW_None                                = 0,
	CESW_Max                                 = 1,
};

// Enum EndGame.EEndCutLightModulateTargetMode
// NumValues: 0x0003
enum class EEndCutLightModulateTargetMode : uint8
{
	CELM_All                                 = 0,
	CELM_Part                                = 1,
	CELM_Max                                 = 2,
};

// Enum EndGame.EEndCutPhysicsMode
// NumValues: 0x0004
enum class EEndCutPhysicsMode : uint8
{
	Standard                                 = 0,
	Continuous                               = 1,
	Disable                                  = 2,
	EEndCutPhysicsMode_MAX                   = 3,
};

// Enum EndGame.EEndMovieClipMode
// NumValues: 0x0004
enum class EEndMovieClipMode : uint8
{
	Load                                     = 1,
	Play                                     = 2,
	Draw                                     = 3,
	EEndMovieClipMode_MAX                    = 4,
};

// Enum EndGame.EEndCutPhaseNo
// NumValues: 0x0015
enum class EEndCutPhaseNo : uint8
{
	Nothing                                  = 0,
	LevelLoading                             = 1,
	FastReloading                            = 2,
	CharaSpecLoading                         = 3,
	ActorCreating                            = 4,
	LoadStreamingVolume                      = 5,
	WaitStreamingVolume                      = 6,
	WaitTimeSet                              = 7,
	WaitPreviewLast                          = 8,
	WaitPlaying                              = 9,
	WaitOnActorCreated                       = 10,
	WaitOpenMovie                            = 11,
	Playing                                  = 12,
	WaitFinished                             = 13,
	Finished                                 = 14,
	ReadyPlayMovie                           = 15,
	WaitPlayMovie                            = 16,
	WaitMediaSourceOpened                    = 17,
	WaitInEventMovie                         = 18,
	MiddleCreateActor                        = 19,
	EEndCutPhaseNo_MAX                       = 20,
};

// Enum EndGame.EEndCutWrapperType
// NumValues: 0x0006
enum class EEndCutWrapperType : uint8
{
	Event                                    = 0,
	Live                                     = 1,
	Movie                                    = 2,
	MovieMonitor                             = 3,
	Type_Max                                 = 4,
	EEndCutWrapperType_MAX                   = 5,
};

// Enum EndGame.EEndCutSeamlessCamOption
// NumValues: 0x0004
enum class EEndCutSeamlessCamOption : uint8
{
	Default                                  = 0,
	LastCamTransOnCut                        = 1,
	CSCO_Max                                 = 2,
	EEndCutSeamlessCamOption_MAX             = 3,
};

// Enum EndGame.EEndCutSequencerType
// NumValues: 0x000D
enum class EEndCutSequencerType : uint8
{
	Camera                                   = 0,
	Character                                = 1,
	Attach                                   = 2,
	Sound                                    = 3,
	Voice                                    = 4,
	Text                                     = 5,
	Effect                                   = 6,
	Light                                    = 7,
	ManualSE                                 = 8,
	CutEvent                                 = 9,
	PlanEvent                                = 10,
	Root                                     = 11,
	Max                                      = 12,
};

// Enum EndGame.EDebugMessageShowType
// NumValues: 0x0005
enum class EDebugMessageShowType : uint8
{
	None                                     = 0,
	Window                                   = 1,
	Log                                      = 2,
	ScreenLog                                = 3,
	EDebugMessageShowType_MAX                = 4,
};

// Enum EndGame.EEndDialogueGenerateSourceLookAtType
// NumValues: 0x0004
enum class EEndDialogueGenerateSourceLookAtType : uint8
{
	ForceEnable                              = 0,
	AutoDisable                              = 1,
	ForceDisable                             = 2,
	EEndDialogueGenerateSourceLookAtType_MAX = 3,
};

// Enum EndGame.EEndDialogueGenerateSourceShotType
// NumValues: 0x0004
enum class EEndDialogueGenerateSourceShotType : uint8
{
	Near                                     = 0,
	Middle                                   = 1,
	Far                                      = 2,
	EEndDialogueGenerateSourceShotType_MAX   = 3,
};

// Enum EndGame.EEndDialogueSequenceSpotLight
// NumValues: 0x0005
enum class EEndDialogueSequenceSpotLight : uint8
{
	KeyLight                                 = 0,
	FillLight                                = 1,
	BackLight                                = 2,
	EyeLight                                 = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndDialogueSequenceEndShotCamera
// NumValues: 0x0004
enum class EEndDialogueSequenceEndShotCamera : uint8
{
	Cut                                      = 0,
	Unbind                                   = 1,
	Seamless                                 = 2,
	EEndDialogueSequenceEndShotCamera_MAX    = 3,
};

// Enum EndGame.EEndDialogueSequenceFirstShotCamera
// NumValues: 0x0003
enum class EEndDialogueSequenceFirstShotCamera : uint8
{
	Cut                                      = 0,
	Seamless                                 = 1,
	EEndDialogueSequenceFirstShotCamera_MAX  = 2,
};

// Enum EndGame.EEndDialogueSequenceVersion
// NumValues: 0x0005
enum class EEndDialogueSequenceVersion : uint8
{
	None                                     = 0,
	FixCommandJump                           = 1,
	PossessableCamera                        = 2,
	FixLightGenerator                        = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndDolphinJumpInputButton
// NumValues: 0x0003
enum class EEndDolphinJumpInputButton : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	EEndDolphinJumpInputButton_MAX           = 2,
};

// Enum EndGame.EEndDolphinJumpInputEvents
// NumValues: 0x0003
enum class EEndDolphinJumpInputEvents : uint8
{
	Power                                    = 0,
	Timing                                   = 1,
	EEndDolphinJumpInputEvents_MAX           = 2,
};

// Enum EndGame.EVfxNonUniformKind
// NumValues: 0x0006
enum class EVfxNonUniformKind : uint8
{
	None                                     = 0,
	Linear                                   = 1,
	Multiply                                 = 2,
	MultiplyAverage                          = 3,
	ArcSin                                   = 4,
	EVfxNonUniformKind_MAX                   = 5,
};

// Enum EndGame.EEndEffectInterpolateKind
// NumValues: 0x0003
enum class EEndEffectInterpolateKind : uint8
{
	Linear                                   = 0,
	EaseInOut                                = 1,
	EEndEffectInterpolateKind_MAX            = 2,
};

// Enum EndGame.EDisableHitBreakMask
// NumValues: 0x0003
enum class EDisableHitBreakMask : uint8
{
	Field                                    = 0,
	Battle                                   = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndEnvironmentPhysHitBreakSpeed
// NumValues: 0x0004
enum class EEndEnvironmentPhysHitBreakSpeed : uint8
{
	Speed0                                   = 0,
	Speed1                                   = 1,
	Speed2                                   = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndEnvironmentPhysForceScale
// NumValues: 0x0006
enum class EEndEnvironmentPhysForceScale : uint8
{
	Scale0                                   = 0,
	Scale1                                   = 1,
	Scale2                                   = 2,
	Scale3                                   = 3,
	Scale4                                   = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndEnvironmentPhysicsSpawnSplineConditionType
// NumValues: 0x0003
enum class EEndEnvironmentPhysicsSpawnSplineConditionType : uint8
{
	Default                                  = 0,
	TinyBronco                               = 1,
	EEndEnvironmentPhysicsSpawnSplineConditionType_MAX = 2,
};

// Enum EndGame.EEnvEffectGeneratePosition
// NumValues: 0x0004
enum class EEnvEffectGeneratePosition : uint8
{
	None                                     = 0,
	Center                                   = 1,
	Hit                                      = 2,
	EEnvEffectGeneratePosition_MAX           = 3,
};

// Enum EndGame.EEndEnvironmentPrecomputedLightEnvironmentBlendBoneType
// NumValues: 0x0003
enum class EEndEnvironmentPrecomputedLightEnvironmentBlendBoneType : uint8
{
	Rotation                                 = 0,
	Translation                              = 1,
	EEndEnvironmentPrecomputedLightEnvironmentBlendBoneType_MAX = 2,
};

// Enum EndGame.EEndEnvironmentNearFadeType
// NumValues: 0x0003
enum class EEndEnvironmentNearFadeType : uint8
{
	DisableFade                              = 0,
	EnableFade                               = 1,
	EEndEnvironmentNearFadeType_MAX          = 2,
};

// Enum EndGame.EEndEnvQueryAIPCPathConnectionTargetType
// NumValues: 0x0003
enum class EEndEnvQueryAIPCPathConnectionTargetType : uint8
{
	BattleTarget                             = 0,
	CombinationTarget                        = 1,
	EEndEnvQueryAIPCPathConnectionTargetType_MAX = 2,
};

// Enum EndGame.EEndEnvQueryGeneratorActorType
// NumValues: 0x0002
enum class EEndEnvQueryGeneratorActorType : uint8
{
	FollowEscapePoint                        = 0,
	EEndEnvQueryGeneratorActorType_MAX       = 1,
};

// Enum EndGame.EEnvGeneratorOnRingRadiusMode
// NumValues: 0x0004
enum class EEnvGeneratorOnRingRadiusMode : uint8
{
	ContextCenter                            = 0,
	ContextRadius                            = 1,
	QuerierAndContextRadius                  = 2,
	EEnvGeneratorOnRingRadiusMode_MAX        = 3,
};

// Enum EndGame.EEndTestPathfinding
// NumValues: 0x0003
enum class EEndTestPathfinding : uint8
{
	PathExist                                = 0,
	PathLength                               = 1,
	EEndTestPathfinding_MAX                  = 2,
};

// Enum EndGame.EEndTestSpacialPath
// NumValues: 0x0003
enum class EEndTestSpacialPath : uint8
{
	Aerial                                   = 0,
	Wall                                     = 1,
	EEndTestSpacialPath_MAX                  = 2,
};

// Enum EndGame.EEndQueryTestHotFixType
// NumValues: 0x0006
enum class EEndQueryTestHotFixType : uint8
{
	None                                     = 0,
	BattleIn                                 = 1,
	BattleOut                                = 2,
	AbilityJump                              = 3,
	Combination                              = 4,
	EEndQueryTestHotFixType_MAX              = 5,
};

// Enum EndGame.EEndTestSphereCast
// NumValues: 0x0003
enum class EEndTestSphereCast : uint8
{
	Test2D                                   = 0,
	Test3D                                   = 1,
	EEndTestSphereCast_MAX                   = 2,
};

// Enum EndGame.EEndEnvQueryAsyncTraceIgnoreActorType
// NumValues: 0x0002
enum class EEndEnvQueryAsyncTraceIgnoreActorType : uint8
{
	CombatAreaVolume                         = 0,
	EEndEnvQueryAsyncTraceIgnoreActorType_MAX = 1,
};

// Enum EndGame.EEnvQueryTest_DamageSource_AffectedType
// NumValues: 0x0003
enum class EEnvQueryTest_DamageSource_AffectedType : uint8
{
	Player                                   = 0,
	Enemy                                    = 1,
	EEnvQueryTest_DamageSource_MAX           = 2,
};

// Enum EndGame.EAutoDoorStatus
// NumValues: 0x0003
enum class EAutoDoorStatus : uint8
{
	CLOSING                                  = 0,
	OPENING                                  = 1,
	MAX                                      = 2,
};

// Enum EndGame.EAutoDoorActiveEffectType
// NumValues: 0x0005
enum class EAutoDoorActiveEffectType : uint8
{
	AutoDoorActiveNone                       = 0,
	AutoDoorActiveLeft                       = 1,
	AutoDoorActiveRight                      = 2,
	AutoDoorActiveBoth                       = 3,
	EAutoDoorActiveEffectType_MAX            = 4,
};

// Enum EndGame.EEndOneWayType
// NumValues: 0x0003
enum class EEndOneWayType : uint32
{
	RightToLeft                              = 0,
	LeftToRight                              = 1,
	EEndOneWayType_MAX                       = 2,
};

// Enum EndGame.EEndCrackMoveType
// NumValues: 0x0003
enum class EEndCrackMoveType : uint8
{
	FrontWall                                = 0,
	BackWall                                 = 1,
	EEndCrackMoveType_MAX                    = 2,
};

// Enum EndGame.EEndCrouchedMoveType
// NumValues: 0x0003
enum class EEndCrouchedMoveType : uint8
{
	Default                                  = 0,
	Wind                                     = 1,
	EEndCrouchedMoveType_MAX                 = 2,
};

// Enum EndGame.ECrouchedType
// NumValues: 0x0003
enum class ECrouchedType : uint8
{
	FixCoordinates                           = 0,
	FixDirection                             = 1,
	ECrouchedType_MAX                        = 2,
};

// Enum EndGame.EDoorSoundCallPosType
// NumValues: 0x0005
enum class EDoorSoundCallPosType : uint8
{
	DoorCenterGround                         = 0,
	DoorAxisGround                           = 1,
	DoorAxisKnobHeight                       = 2,
	DoorKnob                                 = 3,
	EDoorSoundCallPosType_MAX                = 4,
};

// Enum EndGame.EDoorCanUseType
// NumValues: 0x0004
enum class EDoorCanUseType : uint8
{
	All                                      = 0,
	OnlyLeader                               = 1,
	OnlyNpc                                  = 2,
	EDoorCanUseType_MAX                      = 3,
};

// Enum EndGame.EDoorTurnHandleType
// NumValues: 0x0005
enum class EDoorTurnHandleType : uint8
{
	None                                     = 0,
	TurnHandleRight                          = 1,
	TurnHandleLeft                           = 2,
	Invalid                                  = 3,
	EDoorTurnHandleType_MAX                  = 4,
};

// Enum EndGame.EDoorActiveEffectType
// NumValues: 0x0005
enum class EDoorActiveEffectType : uint8
{
	ActiveNone                               = 0,
	ActiveLeft                               = 1,
	ActiveRight                              = 2,
	ActiveBath                               = 3,
	EDoorActiveEffectType_MAX                = 4,
};

// Enum EndGame.EDoorType
// NumValues: 0x0010
enum class EDoorType : uint8
{
	NormalDoor_DEPRECATED                    = 0,
	PressDoor_DEPRECATED                     = 1,
	AerithDoor_DEPRECATED                    = 2,
	SeventhDoor_DEPRECATED                   = 3,
	DoubleDoors_DEPRECATED                   = 4,
	HandFirDoor_DEPRECATED                   = 5,
	DoorKnobDoorVariation                    = 6,
	DoubleDoorKnobDoorVariation_DEPRECATED   = 7,
	BarHandleDoorVariation                   = 8,
	DoubleBarHandleDoorVariation             = 9,
	PressDoorVariation                       = 10,
	DoublePressDoorVariation                 = 11,
	CloudDoorKnobDoorVariation               = 12,
	CloudDoubleDoorKnobDoorVariation         = 13,
	DoublePressHeavyDoorVariation            = 14,
	MAX                                      = 15,
};

// Enum EndGame.EHookShotSeType
// NumValues: 0x0004
enum class EHookShotSeType : uint8
{
	Concrete                                 = 0,
	IronPlate                                = 1,
	SteelFrame                               = 2,
	EHookShotSeType_MAX                      = 3,
};

// Enum EndGame.EEndSimpleInteractStateControllerType
// NumValues: 0x0003
enum class EEndSimpleInteractStateControllerType : uint8
{
	Actor                                    = 0,
	Player                                   = 1,
	Max                                      = 2,
};

// Enum EndGame.ESimpleInteractTargetEditMask
// NumValues: 0x000B
enum class ESimpleInteractTargetEditMask : uint8
{
	ESITargetEditMask_None                   = 0,
	ESITargetEditMask_LocationX              = 1,
	ESITargetEditMask_LocationY              = 2,
	ESITargetEditMask_LocationZ              = 4,
	ESITargetEditMask_Yaw                    = 8,
	ESITargetEditMask_Roll                   = 16,
	ESITargetEditMask_Pitch                  = 32,
	ESITargetEditMask_Location_ALL           = 7,
	ESITargetEditMask_Rotation_ALL           = 56,
	ESITargetEditMask_ALL                    = 63,
	ESITargetEditMask_MAX                    = 64,
};

// Enum EndGame.ESimpleInteractTarget
// NumValues: 0x0004
enum class ESimpleInteractTarget : uint8
{
	ESITarget_SelfActor                      = 0,
	ESITarget_InteractActor                  = 1,
	ESITarget_World                          = 2,
	ESITarget_MAX                            = 3,
};

// Enum EndGame.EEndFieldBarretComboMotionType
// NumValues: 0x0003
enum class EEndFieldBarretComboMotionType : uint32
{
	N_Crush01_0                              = 0,
	N_Crush02_0                              = 1,
	N_MAX                                    = 2,
};

// Enum EndGame.EEndFieldActionChocoboMarkerType
// NumValues: 0x0005
enum class EEndFieldActionChocoboMarkerType : uint8
{
	None                                     = 0,
	UpwardNormal                             = 1,
	DownwardBillboard                        = 2,
	UpwardBillboard                          = 3,
	Max                                      = 4,
};

// Enum EndGame.EClimbingJumpPointType
// NumValues: 0x0003
enum class EClimbingJumpPointType : uint8
{
	ToClimbing                               = 0,
	ToHookRope                               = 1,
	MAX                                      = 2,
};

// Enum EndGame.EForceParkourCheckType
// NumValues: 0x0006
enum class EForceParkourCheckType : uint8
{
	Default                                  = 0,
	MoveBlockOrDefault                       = 1,
	MoveBlock                                = 2,
	AreaAndDir                               = 3,
	Area                                     = 4,
	MAX                                      = 5,
};

// Enum EndGame.EForceParkourSetType
// NumValues: 0x0007
enum class EForceParkourSetType : uint8
{
	NaviEdgeArea                             = 0,
	Spline                                   = 1,
	ActionMarker                             = 2,
	Points                                   = 3,
	AttachComponent                          = 4,
	Box                                      = 5,
	MAX                                      = 6,
};

// Enum EndGame.EHookRopeJumpPointType
// NumValues: 0x0005
enum class EHookRopeJumpPointType : uint8
{
	ToGround                                 = 0,
	ToClimbing                               = 1,
	ToHookRope                               = 2,
	ToFall                                   = 3,
	MAX                                      = 4,
};

// Enum EndGame.EHookRopeType
// NumValues: 0x0003
enum class EHookRopeType : uint8
{
	TarzanRope                               = 0,
	Climbing                                 = 1,
	MAX                                      = 2,
};

// Enum EndGame.FEndFieldActionTracePreset
// NumValues: 0x001B
enum class EFEndFieldActionTracePreset : uint8
{
	None                                     = 0,
	Move                                     = 1,
	Icon                                     = 2,
	Background                               = 3,
	Visual                                   = 4,
	Camera                                   = 5,
	Projectile                               = 6,
	Trigger                                  = 7,
	Water                                    = 8,
	IK                                       = 9,
	NaviEdge                                 = 10,
	Physics                                  = 11,
	NavBuild                                 = 12,
	SyncMove                                 = 13,
	SyncIcon                                 = 14,
	SyncBackground                           = 15,
	SyncVisual                               = 16,
	SyncCamera                               = 17,
	SyncProjectile                           = 18,
	SyncTrigger                              = 19,
	SyncWater                                = 20,
	SyncIK                                   = 21,
	SyncNaviEdge                             = 22,
	SyncPhysics                              = 23,
	SyncNavBuild                             = 24,
	Max                                      = 25,
	SyncStart                                = 13,
};

// Enum EndGame.ELiftingRopeActorMoveType
// NumValues: 0x0003
enum class ELiftingRopeActorMoveType : uint8
{
	UpperToLower                             = 0,
	LowerToUpper                             = 1,
	ELiftingRopeActorMoveType_MAX            = 2,
};

// Enum EndGame.EEndFieldActionMessageType
// NumValues: 0x0007
enum class EEndFieldActionMessageType : uint8
{
	None                                     = 0,
	DropRedHoldItem                          = 1,
	CloudSuppressEnd                         = 2,
	WarpInVolumeCart                         = 3,
	PollingLifeStormAreaCtrl                 = 4,
	ResetCable                               = 5,
	Max                                      = 6,
};

// Enum EndGame.EMoogleFieldMovingPanelType
// NumValues: 0x0004
enum class EMoogleFieldMovingPanelType : uint8
{
	MogPanel_Direction                       = 0,
	MogPanel_SpeedScale                      = 1,
	MogPanel_ReverseControl                  = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndOneShotMoveDirType
// NumValues: 0x0004
enum class EEndOneShotMoveDirType : uint8
{
	BothWays                                 = 0,
	RightToLeft                              = 1,
	LeftToRight                              = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndOneShotMoveType
// NumValues: 0x0005
enum class EEndOneShotMoveType : uint8
{
	Crack                                    = 0,
	Crouch                                   = 1,
	DoorSteps                                = 2,
	NPCMovePointToPoint                      = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndFieldRedPullChallengeSettingType
// NumValues: 0x0003
enum class EEndFieldRedPullChallengeSettingType : uint8
{
	Normal                                   = 0,
	Random                                   = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndFieldSplineMoveType
// NumValues: 0x0003
enum class EEndFieldSplineMoveType : uint8
{
	Balance                                  = 0,
	CaitsithDash                             = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndFieldActionTinyBroncoSplineMoveActionType
// NumValues: 0x0004
enum class EEndFieldActionTinyBroncoSplineMoveActionType : uint8
{
	StableMove                               = 0,
	UnStableMove                             = 1,
	ForceMoveOnce                            = 2,
	EEndFieldActionTinyBroncoSplineMoveActionType_MAX = 3,
};

// Enum EndGame.EForceParkourJumpType
// NumValues: 0x000C
enum class EForceParkourJumpType : uint8
{
	Default                                  = 0,
	Jump                                     = 1,
	Step                                     = 2,
	VaultMin                                 = 3,
	VaultMiddle                              = 4,
	VaultMax                                 = 5,
	SuperHighJump                            = 6,
	SuperFall                                = 7,
	Jump_DisableRotationControl              = 8,
	WaterFall                                = 9,
	Fence                                    = 10,
	MAX                                      = 11,
};

// Enum EndGame.EEndFieldNaviEdgeArrivalStepHeightType
// NumValues: 0x0017
enum class EEndFieldNaviEdgeArrivalStepHeightType : uint8
{
	None                                     = 0,
	UpSkipStep                               = 1,
	UpSmallStep                              = 2,
	UpMiddleStep                             = 3,
	UpBigStep                                = 4,
	UpHugeStep                               = 5,
	UpNoStepLow                              = 6,
	UpNoStepHigh                             = 7,
	UpWaterStep                              = 8,
	UpWaterStepHuge                          = 9,
	UpWaterNoStep                            = 10,
	DownSkipStep                             = 11,
	DownSmallStep                            = 12,
	DownMiddleStep                           = 13,
	DownBigStep                              = 14,
	DownHugeStep                             = 15,
	DownNoStepLow                            = 16,
	DownNoStepHigh                           = 17,
	DownWaterStep                            = 18,
	DownWaterStepHuge                        = 19,
	DownWaterNoStep                          = 20,
	DownStartIndex                           = 11,
	EEndFieldNaviEdgeArrivalStepHeightType_MAX = 21,
};

// Enum EndGame.EEndClimbingContinueFromType
// NumValues: 0x0005
enum class EEndClimbingContinueFromType : uint8
{
	Ground                                   = 0,
	Climbing                                 = 1,
	Tarzan                                   = 2,
	ClimbingRope                             = 3,
	MAX                                      = 4,
};

// Enum EndGame.EEndClimbingPointType
// NumValues: 0x0006
enum class EEndClimbingPointType : uint8
{
	HookRope                                 = 0,
	Climbing                                 = 1,
	ClimbingStartEnd                         = 2,
	HookRopeStart                            = 3,
	HookRopeLand                             = 4,
	MAX                                      = 5,
};

// Enum EndGame.EEndFieldDipSwitch
// NumValues: 0x0025
enum class EEndFieldDipSwitch : uint8
{
	SaveFieldDipswitch                       = 0,
	EnableSpecialDebug                       = 1,
	IgnoreMob                                = 2,
	IgnoreEffectSound                        = 3,
	IgnoreTextureStreaming                   = 4,
	InfiniteTreasure                         = 5,
	ActionAutoWalkTypeDebug                  = 6,
	RootScaleCallStack                       = 7,
	LogLevelUp                               = 8,
	ForceEnableDebugMemory                   = 9,
	IgnoreFieldEncount                       = 10,
	DelayFinishBattle                        = 11,
	IgnoreRebuildSleeper                     = 12,
	IgnoreEncountEscape                      = 13,
	DeactivateBattleInAction                 = 14,
	DeactiveJumpArrivalPointWhite            = 15,
	DisableDodge                             = 16,
	DisableDashParkour                       = 17,
	PlayerControllerSpeedDebugMode           = 18,
	ForcePopObjectGroupMob                   = 19,
	ForceBattleMissionClear                  = 20,
	IgnoreFieldEncountAllowCaution           = 21,
	DisableDebugMove                         = 22,
	DisableDebugChangeGameSpeed              = 23,
	IgnoreDefaulBattleInCondition            = 24,
	ForceSkippableCutScene                   = 25,
	BattleTalkMultiLayer                     = 26,
	ShowTerritoryEnemyInfo                   = 27,
	SpecificMoveWalk                         = 28,
	ForceSkip                                = 29,
	DisableObjectEntryAttributeList          = 30,
	ForceEnableSharePlay                     = 31,
	ForceEnableChapterSelect                 = 32,
	hogehogehoge00                           = 33,
	hogehogehoge01                           = 34,
	hogehogehoge02                           = 35,
	Max                                      = 36,
};

// Enum EndGame.EEndMainMenuChapterSelectFinishType
// NumValues: 0x0003
enum class EEndMainMenuChapterSelectFinishType : uint8
{
	LocationIn                               = 0,
	OnSelectChapter                          = 1,
	EEndMainMenuChapterSelectFinishType_MAX  = 2,
};

// Enum EndGame.EEndUpdaterReportType
// NumValues: 0x0002
enum class EEndUpdaterReportType : uint8
{
	UnbindEffect                             = 0,
	EEndUpdaterReportType_MAX                = 1,
};

// Enum EndGame.EEndActionReportType
// NumValues: 0x0008
enum class EEndActionReportType : uint8
{
	ChangeCameraParameter                    = 0,
	LifeStreamerLiveAmountMax                = 1,
	ExistChocoboCustomMenu                   = 2,
	RefreshActionOverrideStateSleeper        = 3,
	ColosseumResultTipsID                    = 4,
	EverySnap2nd                             = 5,
	FinishActionTutorial                     = 6,
	EEndActionReportType_MAX                 = 7,
};

// Enum EndGame.EEndDebugMoveStep
// NumValues: 0x0005
enum class EEndDebugMoveStep : uint8
{
	None                                     = 0,
	DebugMoveStart                           = 1,
	DebugMoving                              = 2,
	DebugMoveEnd                             = 3,
	EEndDebugMoveStep_MAX                    = 4,
};

// Enum EndGame.EEndFieldActionCommunicatorType
// NumValues: 0x0004
enum class EEndFieldActionCommunicatorType : uint8
{
	None                                     = 0,
	FieldActionYesNo                         = 0,
	CampBreak                                = 1,
	EEndFieldActionCommunicatorType_MAX      = 2,
};

// Enum EndGame.ELevelSequenceLoaderSlot
// NumValues: 0x0027
enum class ELevelSequenceLoaderSlot : uint8
{
	Global00                                 = 0,
	Global01                                 = 1,
	Global02                                 = 2,
	Global03                                 = 3,
	Global04                                 = 4,
	Global05                                 = 5,
	Global06                                 = 6,
	Global07                                 = 7,
	Global08                                 = 8,
	Global09                                 = 9,
	Global10                                 = 10,
	Global11                                 = 11,
	Global12                                 = 12,
	Global13                                 = 13,
	Global14                                 = 14,
	Global15                                 = 15,
	Global16                                 = 16,
	Global17                                 = 17,
	Global18                                 = 18,
	Global19                                 = 19,
	Global20                                 = 20,
	Global21                                 = 21,
	Global22                                 = 22,
	Global23                                 = 23,
	Global24                                 = 24,
	Global25                                 = 25,
	Global26                                 = 26,
	Global27                                 = 27,
	Global28                                 = 28,
	Global29                                 = 29,
	Global30                                 = 30,
	Global31                                 = 31,
	Placement                                = 32,
	LocationResident00                       = 33,
	LocationResident01                       = 34,
	LocationResident02                       = 35,
	LocationResident03                       = 36,
	SlotMax                                  = 37,
	ELevelSequenceLoaderSlot_MAX             = 38,
};

// Enum EndGame.EEndFieldDaytime
// NumValues: 0x0003
enum class EEndFieldDaytime : uint8
{
	Day                                      = 0,
	Night                                    = 1,
	EEndFieldDaytime_MAX                     = 2,
};

// Enum EndGame.EEndFieldMoveType
// NumValues: 0x0008
enum class EEndFieldMoveType : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Walk                                     = 2,
	HighWalk                                 = 3,
	Jog                                      = 4,
	Run                                      = 5,
	Dash                                     = 6,
	EEndFieldMoveType_MAX                    = 7,
};

// Enum EndGame.EEndFieldCostType
// NumValues: 0x003D
enum class EEndFieldCostType : uint8
{
	StateManager                             = 0,
	StateManagerPost                         = 1,
	StateContainer                           = 2,
	StateSleeper                             = 3,
	LayoutManager                            = 4,
	CharaPopManager                          = 5,
	LevelSequenceLoader                      = 6,
	UniqueActionManager                      = 7,
	TargetIconManager                        = 8,
	SceneChanger                             = 9,
	BgmManager                               = 10,
	EncountManager                           = 11,
	EncountManagerPost                       = 12,
	BattleConditionTriggerManager            = 13,
	BattleTalkManager                        = 14,
	PlannerEventControllerManager            = 15,
	TalkManager                              = 16,
	SituationManager                         = 17,
	MiniGameManager                          = 18,
	CharaActionManager                       = 19,
	TurnBackManager                          = 20,
	PushButtonManager                        = 21,
	FadeManager                              = 22,
	Debug                                    = 23,
	PackLoader                               = 24,
	PointSoundManager                        = 25,
	SoundManager                             = 26,
	FreeLocationCutSceneController           = 27,
	FieldNaviMapIconManager                  = 28,
	FieldMapIconManager                      = 29,
	FieldPathGuideManager                    = 30,
	FieldAIManager                           = 31,
	ActionManager                            = 32,
	ChadleyManager                           = 33,
	ChapterManager                           = 34,
	NaviMapClearLimitedManager               = 35,
	PartyChocoboManager                      = 36,
	EnemyTerritoryManager                    = 37,
	EnemyTerritoryManagerPost                = 38,
	HubManager                               = 39,
	WorldItemCollectManager                  = 40,
	MobManager                               = 41,
	TreasureManager                          = 42,
	ChocoboParkingManager                    = 43,
	ChocoboCraftManager                      = 44,
	WorldActorManager                        = 45,
	WorldLayoutManager                       = 46,
	FieldLocationIdManager                   = 47,
	HintAnimalManager                        = 48,
	DataObjectManager                        = 49,
	WildAnimalManager                        = 50,
	BattleStateContainerWrapper              = 51,
	FieldActionCommunicator                  = 52,
	WorldConditionManager                    = 53,
	WorldEventManager                        = 54,
	MemoManager                              = 55,
	GroupMobManager                          = 56,
	MobTalkManager                           = 57,
	HandlePuzzleManager                      = 58,
	SceneManagerWrapper                      = 59,
	Max                                      = 60,
};

// Enum EndGame.EChocoboType
// NumValues: 0x0008
enum class EChocoboType : uint8
{
	Normal                                   = 0,
	MountainAndRiver                         = 1,
	Sand                                     = 2,
	Forest                                   = 3,
	Sky                                      = 4,
	Sea                                      = 5,
	Secret                                   = 6,
	Max                                      = 7,
};

// Enum EndGame.EEndStateManagerGlobalIndexCategory
// NumValues: 0x0005
enum class EEndStateManagerGlobalIndexCategory : uint8
{
	None                                     = 0,
	EnemyTerritory                           = 1,
	EnemyWave                                = 2,
	NPCMob                                   = 3,
	Max                                      = 4,
};

// Enum EndGame.EEncountDetectionType
// NumValues: 0x0004
enum class EEncountDetectionType : uint8
{
	None                                     = 0,
	ViewDetection                            = 1,
	ListenDetection                          = 2,
	EEncountDetectionType_MAX                = 3,
};

// Enum EndGame.EEndEnemyState
// NumValues: 0x0006
enum class EEndEnemyState : uint8
{
	None                                     = 0,
	Hidden                                   = 1,
	Alive                                    = 2,
	Defeated                                 = 3,
	Dead                                     = 4,
	EEndEnemyState_MAX                       = 5,
};

// Enum EndGame.EEndEnemyTerritoryShape
// NumValues: 0x0005
enum class EEndEnemyTerritoryShape : uint8
{
	None                                     = 0,
	Cylinder                                 = 1,
	Cube                                     = 2,
	Cone                                     = 3,
	EEndEnemyTerritoryShape_MAX              = 4,
};

// Enum EndGame.EEndEnemyTerritoryState
// NumValues: 0x0006
enum class EEndEnemyTerritoryState : uint8
{
	None                                     = 0,
	Loading                                  = 1,
	Active                                   = 2,
	Destroying                               = 3,
	Inactive                                 = 4,
	EEndEnemyTerritoryState_MAX              = 5,
};

// Enum EndGame.EEndTerritoryAreaCheckCondition
// NumValues: 0x0005
enum class EEndTerritoryAreaCheckCondition : uint8
{
	Territory                                = 0,
	ExtendedTerritory                        = 1,
	FreeBattleArea                           = 2,
	None                                     = 3,
	EEndTerritoryAreaCheckCondition_MAX      = 4,
};

// Enum EndGame.EEndTerritoryBattleInAllEnemiesCondition
// NumValues: 0x0006
enum class EEndTerritoryBattleInAllEnemiesCondition : uint8
{
	OnBattleIn                               = 0,
	OnTerritoryEnter                         = 1,
	OnBattleInOld                            = 2,
	OnCaution                                = 3,
	None                                     = 4,
	EEndTerritoryBattleInAllEnemiesCondition_MAX = 5,
};

// Enum EndGame.EEndTerritoryDisableEscapeWallAdjustSize
// NumValues: 0x0005
enum class EEndTerritoryDisableEscapeWallAdjustSize : uint8
{
	NoInit                                   = 0,
	TerritorySize                            = 1,
	ExtendedTerritorySize                    = 2,
	FreeSize                                 = 3,
	EEndTerritoryDisableEscapeWallAdjustSize_MAX = 4,
};

// Enum EndGame.EEndTerritoryType
// NumValues: 0x0006
enum class EEndTerritoryType : uint8
{
	Mob                                      = 0,
	Patrol                                   = 1,
	ExternalEnemies                          = 2,
	Boss                                     = 3,
	Dummy                                    = 4,
	EEndTerritoryType_MAX                    = 5,
};

// Enum EndGame.EEndEncountStateType
// NumValues: 0x0006
enum class EEndEncountStateType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	OnCaution                                = 2,
	Battle                                   = 3,
	Escaping                                 = 4,
	Max                                      = 5,
};

// Enum EndGame.EEncountEnemyAccessorType
// NumValues: 0x0009
enum class EEncountEnemyAccessorType : uint8
{
	EnemyAccesor                             = 0,
	EncountEnemyAccessor                     = 1,
	EncountAliveAndDefeatedEnemyAccessor     = 2,
	EncountAndPreEncountEnemyAccessor        = 3,
	EncountAndPreEncountAndDummyEnemyAccessor = 4,
	EncountDummyEnemyAccessor                = 5,
	EncountHideEnemyAccessor                 = 6,
	HideEnemyAccessor                        = 7,
	EEncountEnemyAccessorType_MAX            = 8,
};

// Enum EndGame.EEndFinishBattleType
// NumValues: 0x0003
enum class EEndFinishBattleType : uint8
{
	None                                     = 0,
	Battle2Cinema                            = 1,
	EEndFinishBattleType_MAX                 = 2,
};

// Enum EndGame.EEndUnstableSaveDataDebug
// NumValues: 0x0003
enum class EEndUnstableSaveDataDebug : uint8
{
	Difference                               = 0,
	AddObject                                = 1,
	EEndUnstableSaveDataDebug_MAX            = 2,
};

// Enum EndGame.EEndFieldAIFollowPosition
// NumValues: 0x0003
enum class EEndFieldAIFollowPosition : uint8
{
	FORWARD                                  = 0,
	BACKWARD                                 = 1,
	EEndFieldAIFollowPosition_MAX            = 2,
};

// Enum EndGame.EEndFieldCharaPopForceLoadType
// NumValues: 0x0004
enum class EEndFieldCharaPopForceLoadType : uint8
{
	Limit500                                 = 0,
	Limit3000                                = 1,
	Limit4000                                = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndFieldCharacterTickType
// NumValues: 0x0005
enum class EEndFieldCharacterTickType : uint8
{
	None                                     = 0,
	TickLight                                = 1,
	TickMiddle                               = 2,
	TickHeavy                                = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndLocationWorkOperationType
// NumValues: 0x0004
enum class EEndLocationWorkOperationType : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	Sub                                      = 2,
	EEndLocationWorkOperationType_MAX        = 3,
};

// Enum EndGame.EEndMovementRestriction
// NumValues: 0x0007
enum class EEndMovementRestriction : uint8
{
	None                                     = 0,
	WalkOnlyToDestination                    = 1,
	ForceWalkToDestination                   = 2,
	ForceWalkToDestinationAtSameSpeed        = 3,
	ForceFinalVectorDestination              = 4,
	WalkOrRebelMotion                        = 5,
	MAX                                      = 6,
};

// Enum EndGame.EEndSpecificMoveType
// NumValues: 0x0007
enum class EEndSpecificMoveType : uint8
{
	Walk                                     = 0,
	HighWalk                                 = 1,
	Jog                                      = 2,
	Run                                      = 3,
	None                                     = 4,
	Max                                      = 5,
	Empty                                    = 6,
};

// Enum EndGame.EEndStateTriggerSaveDataType
// NumValues: 0x000B
enum class EEndStateTriggerSaveDataType : uint8
{
	None                                     = 0,
	SnapSaveData                             = 1,
	SafetySaveData_AutoSaveData              = 2,
	AutoSaveData                             = 3,
	SnapSaveData_AutoSaveData                = 4,
	SnapSaveData_SafetySaveData_AutoSaveData = 5,
	SnapOutput_SafetySaveData_AutoSaveData   = 6,
	SnapOutput_AutoSaveData                  = 7,
	SnapSaveData_Encount                     = 8,
	SnapSaveData_Force                       = 9,
	EEndStateTriggerSaveDataType_MAX         = 10,
};

// Enum EndGame.EEndStateTriggerSpecialType
// NumValues: 0x0006
enum class EEndStateTriggerSpecialType : uint8
{
	None                                     = 0,
	EnvironmentAnimationLastFrame            = 1,
	IgnoreDelay                              = 2,
	IgnoreSe                                 = 3,
	CanDelay                                 = 4,
	EEndStateTriggerSpecialType_MAX          = 5,
};

// Enum EndGame.EEndSituationActionFinishType
// NumValues: 0x0003
enum class EEndSituationActionFinishType : uint8
{
	OneAnimation                             = 0,
	EndOverlapBox                            = 1,
	EEndSituationActionFinishType_MAX        = 2,
};

// Enum EndGame.EEndSituationActionType
// NumValues: 0x0004
enum class EEndSituationActionType : uint8
{
	None                                     = 0,
	BoxFitDirection                          = 1,
	PointFitLocationDirection                = 2,
	EEndSituationActionType_MAX              = 3,
};

// Enum EndGame.EEndSituationTriggerType
// NumValues: 0x0005
enum class EEndSituationTriggerType : uint8
{
	BoxOverlap                               = 0,
	BoxOverlapDirection                      = 1,
	BoxOverlapDirectionBoth                  = 2,
	TargetIcon                               = 3,
	EEndSituationTriggerType_MAX             = 4,
};

// Enum EndGame.EndSwitchingAnimStatus
// NumValues: 0x0005
enum class EndSwitchingAnimStatus : uint8
{
	EndSwitchingAnimStatus_Outer             = 0,
	EndSwitchingAnimStatus_Inner             = 1,
	EndSwitchingAnimStatus_OuterInner        = 2,
	EndSwitchingAnimStatus_InnerOuter        = 3,
	EndSwitchingAnimStatus_Max               = 4,
};

// Enum EndGame.EndFieldStateTriggerScope
// NumValues: 0x0005
enum class EndFieldStateTriggerScope : uint8
{
	EndFieldStateTriggerScope_Self           = 0,
	EndFieldStateTriggerScope_Location       = 1,
	EndFieldStateTriggerScope_ResidentAndLocation = 2,
	EndFieldStateTriggerScope_SpecificObject = 3,
	EndFieldStateTriggerScope_Max            = 4,
};

// Enum EndGame.EFieldActionActorType
// NumValues: 0x002C
enum class EFieldActionActorType : uint8
{
	None                                     = 0,
	Ladder                                   = 1,
	Door                                     = 2,
	CrouchedMove                             = 3,
	CrackMove                                = 4,
	AutoDoor                                 = 5,
	BalanceMove                              = 6,
	Cocoon                                   = 7,
	Jump                                     = 8,
	Trap                                     = 9,
	MonkeyBars                               = 10,
	OperationBoard                           = 11,
	VendingMachine                           = 12,
	DuctMove                                 = 13,
	BenchBreak                               = 14,
	HookShot                                 = 15,
	Sliding                                  = 16,
	SlideDown                                = 17,
	PassOver                                 = 18,
	ParkourJump                              = 19,
	CrackFan                                 = 20,
	Climb                                    = 21,
	TarzanJump                               = 22,
	CardKeyDoor                              = 23,
	JukeBox                                  = 24,
	HangMove                                 = 25,
	Curtain                                  = 26,
	PassThrough                              = 27,
	RubbleJump                               = 28,
	HeavyDoor                                = 29,
	WMElevator                               = 30,
	BarCounter                               = 31,
	Evade                                    = 32,
	PushBox                                  = 33,
	ShinraElevator                           = 34,
	WallRun                                  = 35,
	Peek                                     = 36,
	TarzanRope                               = 37,
	WireMeshMove                             = 38,
	PoleSlider                               = 39,
	LiftingRope                              = 40,
	Common                                   = 41,
	Swimming                                 = 42,
	Max                                      = 43,
};

// Enum EndGame.EEndAerialNavAreaType
// NumValues: 0x0002
enum class EEndAerialNavAreaType : uint8
{
	Default                                  = 0,
	Max                                      = 1,
};

// Enum EndGame.EEndQueryFilterType
// NumValues: 0x001B
enum class EEndQueryFilterType : uint8
{
	Default                                  = 0,
	Battle                                   = 1,
	BattleCaution                            = 2,
	SimpleBattle                             = 3,
	NoBattle                                 = 4,
	Cover                                    = 5,
	NoCost                                   = 6,
	CentralWayStreet                         = 7,
	RightWayStreet                           = 8,
	LeftWayStreet                            = 9,
	CinemaFilter                             = 10,
	NoFieldAction                            = 11,
	NoCinemaObstacle                         = 12,
	Territory                                = 13,
	TerritoryAll                             = 14,
	NoWorldLink                              = 15,
	IgnoreWater                              = 16,
	SandSwampyLand                           = 17,
	AddAttribute                             = 18,
	TerritoryEncount                         = 19,
	NarrowLane                               = 20,
	IgnoreFieldActionLink                    = 21,
	AvoidAnimal                              = 22,
	IgnoreAllNavLink                         = 23,
	TinyBronco                               = 24,
	Custom                                   = 25,
	Max                                      = 26,
};

// Enum EndGame.EEndNavAreaType
// NumValues: 0x0036
enum class EEndNavAreaType : uint8
{
	NullArea                                 = 0,
	Ladder                                   = 1,
	Cover                                    = 2,
	BattleArea                               = 3,
	CationArea                               = 4,
	Impassable                               = 5,
	Obstacle                                 = 6,
	Ignore                                   = 7,
	Versatile                                = 8,
	InDoor                                   = 9,
	RedLaser                                 = 10,
	Door                                     = 11,
	CrouchedMove                             = 12,
	CrackMove                                = 13,
	PathWay                                  = 14,
	CentralPathWay                           = 15,
	ExtendedBattleArea                       = 16,
	FieldAction                              = 17,
	CinemaObstacle                           = 18,
	HookShot                                 = 19,
	AddAttribute                             = 20,
	Versatile2                               = 21,
	Versatile3                               = 22,
	Versatile4                               = 23,
	Impassable2                              = 24,
	AddAttribute2                            = 25,
	AddAttribute3                            = 26,
	AddAttribute4                            = 27,
	DynamicBattleArea                        = 28,
	Territory                                = 29,
	SwampyLand                               = 30,
	Desert                                   = 31,
	Shoal                                    = 32,
	Sea                                      = 33,
	Mountain                                 = 34,
	River                                    = 35,
	ExtendedTerritory                        = 36,
	ExtendedTerritory2                       = 37,
	WorldGeneralJump                         = 38,
	Water                                    = 39,
	WorldGeneralJumpToPlane                  = 40,
	FieldActionLink                          = 41,
	NarrowLane                               = 42,
	PartyAttr                                = 43,
	NPCAttr                                  = 44,
	EnemyAttr                                = 45,
	SubPartyAttr                             = 46,
	SandSwampyLand                           = 47,
	WildAnimal                               = 48,
	Hub                                      = 49,
	TinyBronco                               = 50,
	Max                                      = 51,
	None                                     = 52,
	Default                                  = 63,
};

// Enum EndGame.EndCurveBlendType
// NumValues: 0x000B
enum class EndCurveBlendType : uint8
{
	Linear                                   = 0,
	Curve                                    = 1,
	SlowInFastOut                            = 2,
	FastInSlowOut                            = 3,
	Hermite                                  = 4,
	SlowInSlowOut                            = 5,
	SlowInSlowOutCirc                        = 6,
	SlowOutExpo                              = 7,
	FastInExpo                               = 8,
	CurveBlendTypeMax                        = 9,
	EndCurveBlendType_MAX                    = 10,
};

// Enum EndGame.EEndEnemyTerritoryWavePopSettingOverwrite
// NumValues: 0x0007
enum class EEndEnemyTerritoryWavePopSettingOverwrite : uint8
{
	ReinforcementsWavePopType_Default        = 0,
	ReinforcementsWavePopType_Closest        = 1,
	ReinforcementsWavePopType_Random         = 2,
	ReinforcementsWavePopType_Furthest       = 3,
	ReinforcementsWavePopType_DirectPoint    = 4,
	ReinforcementsWavePopType_OutScreen      = 5,
	ReinforcementsWavePopType_Max            = 6,
};

// Enum EndGame.EEndEnemyTerritoryWaveType
// NumValues: 0x0004
enum class EEndEnemyTerritoryWaveType : uint8
{
	ReinforcementsWaveType_Next              = 0,
	ReinforcementsWaveType_Direct            = 1,
	ReinforcementsWaveType_Random            = 2,
	ReinforcementsWaveType_Max               = 3,
};

// Enum EndGame.EncountStep
// NumValues: 0x0007
enum class EncountStep : uint8
{
	ActorPopWait                             = 0,
	ReadyEncount                             = 1,
	EncountEnd                               = 2,
	Finish                                   = 3,
	Remove                                   = 4,
	StepMax                                  = 5,
	EncountStep_MAX                          = 6,
};

// Enum EndGame.EndFieldBGMLayer
// NumValues: 0x000C
enum class EndFieldBGMLayer : uint8
{
	EndFieldBGMLayer_Debug                   = 0,
	EndFieldBGMLayer_CutScene                = 1,
	EndFieldBGMLayer_PlannerEvent            = 2,
	EndFieldBGMLayer_MiniGame                = 3,
	EndFieldBGMLayer_Quest                   = 4,
	EndFieldBGMLayer_Battle                  = 5,
	EndFieldBGMLayer_PreBattle               = 6,
	EndFieldBGMLayer_Vehicle                 = 7,
	EndFieldBGMLayer_LevelFieldLower         = 8,
	EndFieldBGMLayer_WorldField              = 9,
	EndFieldBGMLayer_Title                   = 10,
	EndFieldBGMLayer_Max                     = 11,
};

// Enum EndGame.EndFieldOnOffTable
// NumValues: 0x00AD
enum class EndFieldOnOffTable : uint8
{
	EndFieldOnOffTable_HideFieldMenu         = 0,
	EndFieldOnOffTable_ReleaseEncount        = 1,
	EndFieldOnOffTable_DisableUpdateBattleParameter = 2,
	EndFieldOnOffTable_SuspendBattle         = 3,
	EndFieldOnOffTable_DisableFieldAction    = 4,
	EndFieldOnOffTable_HideNaviMap           = 5,
	EndFieldOnOffTable_HideSituationActionEffect = 6,
	EndFieldOnOffTable_FinishCutSceneSkip    = 7,
	EndFieldOnOffTable_HideEncountEnemy      = 8,
	EndFieldOnOffTable_DisableAutoTalk       = 9,
	EndFieldOnOffTable_DisableBattleTalk     = 10,
	EndFieldOnOffTable_DisableControlerFieldMenu = 11,
	EndFieldOnOffTable_ShowSkipPauseMenu     = 12,
	EndFieldOnOffTable_StopAI                = 13,
	EndFieldOnOffTable_IncreaseNavigationCost = 14,
	EndFieldOnOffTable_HideOverheadMenu      = 15,
	EndFieldOnOffTable_DisableMainMenu       = 16,
	EndFieldOnOffTable_DisableTutorial       = 17,
	EndFieldOnOffTable_DisableTriggerBox     = 18,
	EndFieldOnOffTable_GameOver              = 19,
	EndFieldOnOffTable_ForceEnableFieldCamera = 20,
	EndFieldOnOffTable_DisableBattleConditionTrigger = 21,
	EndFieldOnOffTable_Hide3DAudioTitleMenu  = 22,
	EndFieldOnOffTable_DisableOptionsButton  = 23,
	EndFieldOnOffTable_DisableTouchPad       = 24,
	EndFieldOnOffTable_KeepSnapSaveData      = 25,
	EndFieldOnOffTable_IgnoreBattleCommandItem = 26,
	EndFieldOnOffTable_IgnoreBattleCommandMagic = 27,
	EndFieldOnOffTable_FinishToad            = 28,
	EndFieldOnOffTable_SoundCallEventMovieInOut = 29,
	EndFieldOnOffTable_PauseMenu_00_Title_Skip = 30,
	EndFieldOnOffTable_PauseMenu_05_Game_Title = 31,
	EndFieldOnOffTable_PauseMenu_10_Game_Title = 32,
	EndFieldOnOffTable_HideMessageLogs       = 33,
	EndFieldOnOffTable_HideTargetIcons       = 34,
	EndFieldOnOffTable_HeliMiniGameKnockBack = 35,
	EndFieldOnOffTable_MiniGamePlaying       = 36,
	EndFieldOnOffTable_HideMiniGameActor     = 37,
	EndFieldOnOffTable_DivideFrameUpdate     = 38,
	EndFieldOnOffTable_Game_Blackout         = 39,
	EndFieldOnOffTable_Level_Blackout        = 40,
	EndFieldOnOffTable_ShowLoadingScreen     = 41,
	EndFieldOnOffTable_HideFieldMenuWithPartyChange = 42,
	EndFieldOnOffTable_HideDyingFilter       = 43,
	EndFieldOnOffTable_44                    = 44,
	EndFieldOnOffTable_SoundCallEventCutSceneInOut = 45,
	EndFieldOnOffTable_RaisePriorityBattleTutorialOverPause = 46,
	EndFieldOnOffTable_RaisePriorityBattlePauseMenu = 47,
	EndFieldOnOffTable_Ignore_Level_Blackout = 48,
	EndFieldOnOffTable_FinishToad_Sephiroth  = 49,
	EndFieldOnOffTable_DelayGameOver         = 50,
	EndFieldOnOffTable_CameraBlendStop       = 51,
	EndFieldOnOffTable_ResetFieldCamera      = 52,
	EndFieldOnOffTable_DisablePlayerJump     = 53,
	EndFieldOnOffTable_DisableVehicleInOut   = 54,
	EndFieldOnOffTable_DisableFieldAttack    = 55,
	EndFieldOnOffTable_DisableDodge          = 56,
	EndFieldOnOffTable_DisableAutoJump       = 57,
	EndFieldOnOffTable_DisableFallByInput    = 58,
	EndFieldOnOffTable_DisableJumpByInput    = 59,
	EndFieldOnOffTable_DisableVaultByInput   = 60,
	EndFieldOnOffTable_DisablePathGuide      = 61,
	EndFieldOnOffTable_HideFieldMenuKeyGuide = 62,
	EndFieldOnOffTable_HideFieldMenuCommandButton = 63,
	EndFieldOnOffTable_HideFieldPane         = 64,
	EndFieldOnOffTable_DisableFieldForcefeedback = 65,
	EndFieldOnOffTable_ForceEnableInputButton = 66,
	EndFieldOnOffTable_FieldMenuNeutralCommand = 67,
	EndFieldOnOffTable_SuspendObject         = 68,
	EndFieldOnOffTable_DisableDisplayLocationName = 69,
	EndFieldOnOffTable_LeaderPositionFixEvaluate = 70,
	EndFieldOnOffTable_HideEventProgressMenu = 71,
	EndFieldOnOffTable_ShowFriendStatusIcons = 72,
	EndFieldOnOffTable_ShowFriendStatusWindow = 73,
	EndFieldOnOffTable_NotUpdateNavMesh      = 74,
	EndFieldOnOffTable_DisableFieldCamera    = 75,
	EndFieldOnOffTable_ForceEnableSituationActionEffect = 76,
	EndFieldOnOffTable_ForceEnableParkour    = 77,
	EndFieldOnOffTable_DisableHubNotify      = 78,
	EndFieldOnOffTable_HideStoryAreaDisplay  = 79,
	EndFieldOnOffTable_PreLoadCardGameBgImage_0 = 80,
	EndFieldOnOffTable_PreLoadCardGameBgImage_1 = 81,
	EndFieldOnOffTable_AutoParkour           = 82,
	EndFieldOnOffTable_ForceUpdateStateManager = 83,
	EndFieldOnOffTable_HideQuestIcon         = 84,
	EndFieldOnOffTable_SoundCallEventPVInOut = 85,
	EndFieldOnOffTable_ForceShowGamerRank    = 86,
	EndFieldOnOffTable_Disable3DAudioActor   = 87,
	EndFieldOnOffTable_DisableFollowAISequencerPvWarp = 88,
	EndFieldOnOffTable_SimpleCommand         = 89,
	EndFieldOnOffTable_Stop3DAudioBGM        = 90,
	EndFieldOnOffTable_DisableVrNotify       = 91,
	EndFieldOnOffTable_SoundCallEventMiniGameMenuInOut = 92,
	EndFieldOnOffTable_PauseMenuSnapSaveData2nd = 93,
	EndFieldOnOffTable_SuspendWorldReportDisplay = 94,
	EndFieldOnOffTable_SnapSaveData2ndBattleParameter = 95,
	EndFieldOnOffTable_PauseMenu_0_OnlyResumeGame = 96,
	EndFieldOnOffTable_DisableTurnBackAlertUI = 97,
	EndFieldOnOffTable_DisablePhotoMode      = 98,
	EndFieldOnOffTable_EmptyOnStartBattle    = 99,
	EndFieldOnOffTable_DisableMemo           = 100,
	EndFieldOnOffTable_CameraModeForceRestricted = 101,
	EndFieldOnOffTable_RestartFromFieldLoadSnap2nd = 102,
	EndFieldOnOffTable_PauseEncount          = 103,
	EndFieldOnOffTable_HidePartyStateChangeAttach = 104,
	EndFieldOnOffTable_DisableSkipCameraPlannerEvent = 105,
	EndFieldOnOffTable_PauseMenuSoundEventMenuOpen2PauseOpen = 106,
	EndFieldOnOffTable_PauseIK               = 107,
	EndFieldOnOffTable_PauseMenuSoundEventMenuOpen2TutorialWindow_Open = 108,
	EndFieldOnOffTable_PauseActor            = 109,
	EndFieldOnOffTable_DisableTriggerBox_InOut = 110,
	EndFieldOnOffTable_111                   = 111,
	EndFieldOnOffTable_112                   = 112,
	EndFieldOnOffTable_113                   = 113,
	EndFieldOnOffTable_114                   = 114,
	EndFieldOnOffTable_115                   = 115,
	EndFieldOnOffTable_116                   = 116,
	EndFieldOnOffTable_117                   = 117,
	EndFieldOnOffTable_118                   = 118,
	EndFieldOnOffTable_119                   = 119,
	EndFieldOnOffTable_120                   = 120,
	EndFieldOnOffTable_121                   = 121,
	EndFieldOnOffTable_122                   = 122,
	EndFieldOnOffTable_123                   = 123,
	EndFieldOnOffTable_124                   = 124,
	EndFieldOnOffTable_125                   = 125,
	EndFieldOnOffTable_126                   = 126,
	EndFieldOnOffTable_127                   = 127,
	EndFieldOnOffTable_DisableTurnBack       = 128,
	EndFieldOnOffTable_ShowTalkLog           = 129,
	EndFieldOnOffTable_ShowSubtitle          = 130,
	EndFieldOnOffTable_ShopBuy               = 131,
	EndFieldOnOffTable_ShopSale              = 132,
	EndFieldOnOffTable_ForceEnableFieldAction = 133,
	EndFieldOnOffTable_IgnorePcCaution       = 134,
	EndFieldOnOffTable_ShowBattleMenu        = 135,
	EndFieldOnOffTable_ShowPauseMenu         = 136,
	EndFieldOnOffTable_ForceEnableInterruptWhenTurnBack = 137,
	EndFieldOnOffTable_ToTitle               = 138,
	EndFieldOnOffTable_CrashBoxMiniGamePlaying = 139,
	EndFieldOnOffTable_CactusMissionMiniGamePlaying = 140,
	EndFieldOnOffTable_EncountPauseEscapeTimer = 141,
	EndFieldOnOffTable_EnableSaveLoad        = 142,
	EndFieldOnOffTable_EntryLocationStartCutScene = 143,
	EndFieldOnOffTable_ReleasePartyMemberBattleMode = 144,
	EndFieldOnOffTable_PauseActionTutorial   = 145,
	EndFieldOnOffTable_ExistAttributeChangerEnvAnim = 146,
	EndFieldOnOffTable_ShowMainMenu          = 147,
	EndFieldOnOffTable_ShowShopMenu          = 148,
	EndFieldOnOffTable_ShowMapJournal        = 149,
	EndFieldOnOffTable_ShowTutorial          = 150,
	EndFieldOnOffTable_ShowTutorial_TouchPanel = 151,
	EndFieldOnOffTable_HideFieldCommandMenu  = 152,
	EndFieldOnOffTable_ShowColosseumMenu     = 153,
	EndFieldOnOffTable_ShowSkillTreeMenu     = 154,
	EndFieldOnOffTable_ShowMainMenuInPV      = 155,
	EndFieldOnOffTable_ShowMainMenu_CardGameDecks = 156,
	EndFieldOnOffTable_ShowBattleTutorial    = 157,
	EndFieldOnOffTable_ShowBattleTutorial_TouchPanel = 158,
	EndFieldOnOffTable_Active_ShowBattleTutorial = 159,
	EndFieldOnOffTable_PauseMenu_01_StopBGM  = 160,
	EndFieldOnOffTable_PauseMenu_02          = 161,
	EndFieldOnOffTable_PauseMenu_03          = 162,
	EndFieldOnOffTable_PauseMenu_04          = 163,
	EndFieldOnOffTable_PauseMenu_06          = 164,
	EndFieldOnOffTable_PauseMenu_08          = 165,
	EndFieldOnOffTable_PauseMenu_09          = 166,
	EndFieldOnOffTable_PauseMenu_11          = 167,
	EndFieldOnOffTable_PauseMenu_12          = 168,
	EndFieldOnOffTable_PauseMenu_13          = 169,
	EndFieldOnOffTable_PauseMenu_14          = 170,
	EndFieldOnOffTable_PauseMenu_15          = 171,
	EndFieldOnOffTable_Max                   = 172,
};

// Enum EndGame.EndTalkRepeatType
// NumValues: 0x0004
enum class EndTalkRepeatType : uint8
{
	PlayOnceInEncount                        = 0,
	PlayOnceInPlay                           = 1,
	Normal                                   = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndBattleTalkInterruptReason
// NumValues: 0x0007
enum class EEndBattleTalkInterruptReason : uint8
{
	DiffrentTalk                             = 0,
	BattleEnded                              = 1,
	WholeTalkSkippedWithBadStatus            = 2,
	SomeTalkSkippedWithBadStatus             = 3,
	NormalEnd                                = 4,
	Notify                                   = 5,
	MAX                                      = 6,
};

// Enum EndGame.EndBattleTalkPriority
// NumValues: 0x000C
enum class EndBattleTalkPriority : uint8
{
	Unique                                   = 0,
	High                                     = 1,
	Middle                                   = 2,
	Low                                      = 3,
	Voice_Unique                             = 4,
	Voice_High                               = 5,
	Voice_Mid                                = 6,
	Voice_Low                                = 7,
	Announce_High                            = 8,
	Announce_Mid                             = 9,
	Announce_Low                             = 10,
	MAX                                      = 11,
};

// Enum EndGame.EndFieldSkipType
// NumValues: 0x0005
enum class EndFieldSkipType : uint8
{
	CutScene                                 = 0,
	PlannerEvent                             = 1,
	Other                                    = 2,
	None                                     = 3,
	MAX                                      = 4,
};

// Enum EndGame.EndFieldExclusion
// NumValues: 0x0021
enum class EndFieldExclusion : uint8
{
	EndFieldExclusion_DisableController      = 0,
	EndFieldExclusion_DisableController_2nd  = 1,
	EndFieldExclusion_DisableController_Treasure = 2,
	EndFieldExclusion_DisableController_Hub  = 3,
	EndFieldExclusion_DisableController_ProgramAction = 4,
	EndFieldExclusion_05                     = 5,
	EndFieldExclusion_06                     = 6,
	EndFieldExclusion_07                     = 7,
	EndFieldExclusion_08                     = 8,
	EndFieldExclusion_09                     = 9,
	EndFieldExclusion_10                     = 10,
	EndFieldExclusion_11                     = 11,
	EndFieldExclusion_12                     = 12,
	EndFieldExclusion_13                     = 13,
	EndFieldExclusion_14                     = 14,
	EndFieldExclusion_15                     = 15,
	EndFieldExclusion_DisableController_TurnBack = 16,
	EndFieldExclusion_DisableController_FinishCutSceneSkip = 17,
	EndFieldExclusion_DisableController_LocationJump = 18,
	EndFieldExclusion_DisableController_DialogFromAction = 19,
	EndFieldExclusion_DisableController_PushButtonAction = 20,
	EndFieldExclusion_DisableController_MiniGame = 21,
	EndFieldExclusion_DisableController_Battle2Cinema = 22,
	EndFieldExclusion_DisableController_Chadley = 23,
	EndFieldExclusion_DiableController_Delay_FieldAttack = 24,
	EndFieldExclusion_DisableController_CommunicatorAnimation = 25,
	EndFieldExclusion_26                     = 26,
	EndFieldExclusion_27                     = 27,
	EndFieldExclusion_28                     = 28,
	EndFieldExclusion_29                     = 29,
	EndFieldExclusion_30                     = 30,
	EndFieldExclusion_31                     = 31,
	EndFieldExclusion_Max                    = 32,
};

// Enum EndGame.EndFieldObjectProgramIds
// NumValues: 0x003E
enum class EndFieldObjectProgramIds : uint8
{
	objCmn_Prog00_DelayAutoSave              = 0,
	objCmn_Prog01_SubLocationAutoSave        = 1,
	objCmn_Prog02                            = 2,
	objCmn_Prog03_ChangeChapterAction        = 3,
	objCmn_Prog04_ChangeChapterAction_Debug  = 4,
	objCmn_Prog05_PointWarpData              = 5,
	objCmn_Prog06_ActionLocationVolumeInOutAI_FastTravel = 6,
	objCmn_Prog07_FastTravel                 = 7,
	objCmn_ProgDebug                         = 8,
	objCmn_Prog09                            = 9,
	objCmn_Prog10                            = 10,
	objCmn_Prog11                            = 11,
	objCmn_Prog12                            = 12,
	objCmn_ProgHub                           = 13,
	objCmn_ProgHub_2nd                       = 14,
	objCmn_ProgHubNotifier                   = 15,
	objCmn_ProgWorldCondition                = 16,
	objCmn_ProgJukeBox                       = 17,
	objCmn_Prog18                            = 18,
	objCmn_ProgBench                         = 19,
	objCmn_ProgVendingMachine                = 20,
	objCmn_ProgSquat                         = 21,
	objCmn_ProgChinUp                        = 22,
	objCmn_ProgBreakBox                      = 23,
	objCmn_ProgShinraElevator                = 24,
	objCmn_ProgColosseum                     = 25,
	objCmn_ProgFieldAction                   = 26,
	objCmn_Prog27                            = 27,
	objCmn_ProgMiniGame                      = 28,
	objCmn_Prog29                            = 29,
	objCmn_ProgQuestBoard                    = 30,
	objCmn_ProgChadleyTalk                   = 31,
	objCmn_ProgCardGame                      = 32,
	objCmn_Prog33                            = 33,
	objCmn_Prog34                            = 34,
	objCmn_Prog_BugFix                       = 35,
	objCmn_Prog36                            = 36,
	objCmn_Prog37                            = 37,
	objCmn_ProgMiniGame2                     = 38,
	objCmn_ProgMiniGame3                     = 39,
	objCmn_ProgBattleTalk_PriorityBattleTalk0 = 40,
	objCmn_ProgBattleTalk_PriorityBattleTalk1 = 41,
	objCmn_ProgBattleTalk_PriorityBattleTalk2 = 42,
	objCmn_ProgBattleTalk_PriorityBattleVoise0 = 43,
	objCmn_ProgBattleTalk_PriorityBattleVoise1 = 44,
	objCmn_ProgBattleTalk_PriorityBattleVoise2 = 45,
	objCmn_ProgBattleTalk_PriorityBattleAnnounce0 = 46,
	objCmn_ProgBattleTalk_PriorityBattleAnnounce1 = 47,
	objCmn_ProgBattleTalk_PriorityBattleAnnounce2 = 48,
	objCmn_ProgBattleTalk_PartyMember0       = 49,
	objCmn_ProgBattleTalk_PartyMember1       = 50,
	objCmn_ProgBattleTalk_PartyMember2       = 51,
	objCmn_Prog52                            = 52,
	objCmn_Prog53                            = 53,
	objCmn_Prog54                            = 54,
	objCmn_Prog55                            = 55,
	objCmn_ProgLevelLowPriority              = 56,
	objCmn_Prog57                            = 57,
	objCmn_Prog58                            = 58,
	objCmn_Prog59                            = 59,
	None                                     = 60,
	Max                                      = 61,
};

// Enum EndGame.EEndFieldStep
// NumValues: 0x0027
enum class EEndFieldStep : uint8
{
	SystemEntryLocationWait                  = 0,
	LoadSaveDataWait                         = 1,
	LoadDataTableWait                        = 2,
	CreatePartyWait                          = 3,
	CreateCache                              = 4,
	EntryLocationStep_Start                  = 5,
	EntryLocationStep_Loop                   = 6,
	EntryLocationStep_End                    = 7,
	EntryLocationWait                        = 8,
	LoadPlacementWait                        = 9,
	TextureStreamingWait                     = 10,
	ActorRefresh                             = 11,
	SetupWait                                = 12,
	UpdateLocationStep                       = 13,
	StartWarpInLocation                      = 14,
	WaitWarpFade                             = 15,
	WaitWarpGetOffStable                     = 16,
	WaitWarpCharaPopStable                   = 17,
	WaitWarpShiftReset                       = 18,
	WaitWarpInLocation                       = 19,
	WaitStableShiftWarpInLocation            = 20,
	WaitStableCollisionWarpInLocation        = 21,
	WaitStableStreamingWarpInLocation        = 22,
	WaitStableWarpInLocation                 = 23,
	WaitTeleportingPartyMemberAll            = 24,
	WaitStableWarpInLocationMassivePool      = 25,
	WaitStableWarpInLocationStreamingPool    = 26,
	EndWarpInLocation                        = 27,
	ExitManagerPreWait                       = 28,
	ExitManager                              = 29,
	ExitManagerWait                          = 30,
	ExitEnvironmentUnload                    = 31,
	ExitEnvironmentUnloadWait                = 32,
	ExitParty                                = 33,
	ExitPartyWait                            = 34,
	ExitGameJumpActorWait                    = 35,
	ExitStepMax                              = 36,
	StepMax                                  = 37,
	EEndFieldStep_MAX                        = 38,
};

// Enum EndGame.BattleStep
// NumValues: 0x0006
enum class EBattleStep : uint8
{
	NormalStep                               = 0,
	EscapingStep                             = 1,
	WarningStep                              = 2,
	AggressiveStep                           = 3,
	BattleModeStepMax                        = 4,
	BattleStep_MAX                           = 5,
};

// Enum EndGame.BattleModeStep
// NumValues: 0x0009
enum class EBattleModeStep : uint8
{
	Normal                                   = 0,
	Warning                                  = 1,
	ToAggressive                             = 2,
	Aggressive                               = 3,
	Escaping                                 = 4,
	EscapingWait                             = 5,
	ExitBattleSceneWait                      = 6,
	BattleModeStep_StepMax                   = 7,
	BattleModeStep_MAX                       = 8,
};

// Enum EndGame.EndBattleMode
// NumValues: 0x0004
enum class EndBattleMode : uint8
{
	EndBattleMode_Normal                     = 0,
	EndBattleMode_Warning                    = 1,
	EndBattleMode_Aggressive                 = 2,
	EndBattleMode_Max                        = 3,
};

// Enum EndGame.EEndFieldMenuHideType
// NumValues: 0x0005
enum class EEndFieldMenuHideType : uint8
{
	EEndFieldMenuHideType_FieldMenu          = 1,
	EEndFieldMenuHideType_Pane               = 2,
	EEndFieldMenuHideType_HideFieldCommandMenu = 4,
	EndBattleMode_Max                        = 5,
	EEndFieldMenuHideType_MAX                = 6,
};

// Enum EndGame.EEndFieldGridControlType
// NumValues: 0x0003
enum class EEndFieldGridControlType : uint32
{
	NONE                                     = 0,
	VACANT                                   = 1,
	EEndFieldGridControlType_MAX             = 2,
};

// Enum EndGame.EEndFieldManagerSetupWaitRetryType
// NumValues: 0x0007
enum class EEndFieldManagerSetupWaitRetryType : uint8
{
	None                                     = 0,
	WaitCharaAttach                          = 1,
	WaitMassiveStreaming                     = 2,
	WaitTextureStreaming                     = 3,
	WaitCharaPopUpdateTickLOD                = 4,
	WaitCharaPopStableTimer                  = 5,
	EEndFieldManagerSetupWaitRetryType_MAX   = 6,
};

// Enum EndGame.TextureStreamingStep
// NumValues: 0x0005
enum class ETextureStreamingStep : uint8
{
	None                                     = 0,
	WaitMassive                              = 1,
	Wait                                     = 2,
	Finish                                   = 3,
	TextureStreamingStep_MAX                 = 4,
};

// Enum EndGame.EEndFieldVibrationPrio
// NumValues: 0x0007
enum class EEndFieldVibrationPrio : uint8
{
	VIB_OneShotHigh                          = 0,
	VIB_LoopHigh                             = 1,
	VIB_OneShotNormal                        = 2,
	VIB_LoopNormal                           = 3,
	VIB_OneShotLow                           = 4,
	VIB_LoopLow                              = 5,
	VIB_Max                                  = 6,
};

// Enum EndGame.EEndForceFeedbackPlayerMuteSlot
// NumValues: 0x0006
enum class EEndForceFeedbackPlayerMuteSlot : uint8
{
	Standard                                 = 0,
	Extra1                                   = 1,
	Extra2                                   = 2,
	Extra3                                   = 3,
	FFP_MAX                                  = 4,
	EEndForceFeedbackPlayerMuteSlot_MAX      = 5,
};

// Enum EndGame.EEndForceFeedbackEffect
// NumValues: 0x003B
enum class EEndForceFeedbackEffect : uint8
{
	FFB_Effect0                              = 0,
	FFB_Effect1                              = 1,
	FFB_Effect2                              = 2,
	FFB_Effect3                              = 3,
	FFB_Effect4                              = 4,
	FFB_Effect5                              = 5,
	FFB_Effect6                              = 6,
	FFB_Effect7                              = 7,
	FFB_Effect8                              = 8,
	FFB_Effect9                              = 9,
	FFB_Noise1                               = 10,
	FFB_FACT0                                = 11,
	FFB_FACT1                                = 12,
	FFB_FACT2                                = 13,
	FFB_FACT3                                = 14,
	FFB_FACT4                                = 15,
	FFB_FACT5                                = 16,
	FFB_FACT6                                = 17,
	FFB_FACT7                                = 18,
	FFB_FACT8                                = 19,
	FFB_FACT9                                = 20,
	FFB_Bike0                                = 21,
	FFB_Bike1                                = 22,
	FFB_Bike2                                = 23,
	FFB_FACT10                               = 24,
	FFB_FACT11                               = 25,
	FFB_Minigame0                            = 26,
	FFB_Minigame1                            = 27,
	FFB_Minigame2                            = 28,
	FFB_Minigame3                            = 29,
	FFB_Minigame4                            = 30,
	FFB_Minigame5                            = 31,
	FFB_Minigame6                            = 32,
	FFB_Minigame7                            = 33,
	FFB_Minigame8                            = 34,
	FFB_Minigame9                            = 35,
	FFB_Minigame10                           = 36,
	FFB_Minigame11                           = 37,
	FFB_CutScene00                           = 38,
	FFB_CutScene01                           = 39,
	FFB_CutScene02                           = 40,
	FFB_CutScene03                           = 41,
	FFB_CutScene04                           = 42,
	FFB_CutScene05                           = 43,
	FFB_CutScene06                           = 44,
	FFB_CutScene07                           = 45,
	FFB_CutScene08                           = 46,
	FFB_CutScene09                           = 47,
	FFB_CutScene10                           = 48,
	FFB_CutScene11                           = 49,
	FFB_CutScene12                           = 50,
	FFB_CutScene13                           = 51,
	FFB_CutScene14                           = 52,
	FFB_CutScene15                           = 53,
	FFB_CutScene16                           = 54,
	FFB_CutScene17                           = 55,
	FFB_CutScene18                           = 56,
	FFB_CutScene19                           = 57,
	FFB_MAX                                  = 58,
};

// Enum EndGame.EEndForceFeedbackTrack
// NumValues: 0x0012
enum class EEndForceFeedbackTrack : uint8
{
	FFB_Track0                               = 0,
	FFB_Track1                               = 1,
	FFB_Track2                               = 2,
	FFB_Track3                               = 3,
	FFB_Track4                               = 4,
	FFB_Track5                               = 5,
	FFB_Track6                               = 6,
	FFB_Track7                               = 7,
	FFB_Track8                               = 8,
	FFB_Track9                               = 9,
	FFB_Track10                              = 10,
	FFB_Track11                              = 11,
	FFB_Track12                              = 12,
	FFB_Track13                              = 13,
	FFB_Track14                              = 14,
	FFB_Track15                              = 15,
	FFB_MAX                                  = 16,
	FFB_AllTracks                            = 16,
};

// Enum EndGame.EEndFrogGuysSplineMoveState
// NumValues: 0x0006
enum class EEndFrogGuysSplineMoveState : uint8
{
	StartStop                                = 0,
	MoveForward                              = 1,
	EndStop                                  = 2,
	MoveBack                                 = 3,
	Loop                                     = 4,
	EEndFrogGuysSplineMoveState_MAX          = 5,
};

// Enum EndGame.EGambitTargetLaneType
// NumValues: 0x0009
enum class EGambitTargetLaneType : uint8
{
	None                                     = 0,
	Lane1                                    = 1,
	Lane2                                    = 2,
	Lane3                                    = 3,
	GeneratedLane                            = 4,
	GeneratedLaneOrNeedTarget                = 5,
	TheMostRobots                            = 6,
	TheLatestEnemyDead                       = 7,
	EGambitTargetLaneType_MAX                = 8,
};

// Enum EndGame.EEndGambitSpawnLaneSelectionType
// NumValues: 0x0006
enum class EEndGambitSpawnLaneSelectionType : uint8
{
	Spawn_Here                               = 0,
	Spawn_LaneManyRobot                      = 1,
	Spawn_LaneLessRobot                      = 2,
	Spawn_LaneHighHPFactory                  = 3,
	Spawn_LaneLowHPFactory                   = 4,
	Spawn_MAX                                = 5,
};

// Enum EndGame.EEndGambitSpawnWatchingType
// NumValues: 0x0004
enum class EEndGambitSpawnWatchingType : uint8
{
	Watch_None                               = 0,
	Watch_GambitID                           = 1,
	Watch_NestLatest                         = 2,
	Watch_MAX                                = 3,
};

// Enum EndGame.EEndGameJumpSequence
// NumValues: 0x0028
enum class EEndGameJumpSequence : uint8
{
	None                                     = 0,
	Begin                                    = 1,
	LocationJump                             = 2,
	DeletePrevLocation                       = 3,
	DeletePrevLocation_WaitStable            = 4,
	DeletePrevLocation_WaitUnload            = 5,
	CheckOnline                              = 6,
	CheckOnline_WaitDialog                   = 7,
	CheckSaveData                            = 8,
	DebugLoadDataCheck                       = 9,
	CutSceneTest_LoadDebugTable              = 10,
	CutSceneTest_WaitLoadDebugTable          = 11,
	CutSceneTest_WaitStreamDebugTable        = 12,
	LoadNextLocation                         = 13,
	LoadNextLocation_WaitLoad                = 14,
	LoadNextLocation_WaitStable              = 15,
	LoadNextLocation_WaitStream              = 16,
	CutSceneTest_PreLoad                     = 17,
	CutSceneTest_WaitPreLoad                 = 18,
	CutSceneTest_EntryLocation               = 19,
	CutSceneTest_WaitEntryLocation           = 20,
	CutSceneTest_WaitWarpInLocation          = 21,
	CutSceneTest                             = 22,
	CutSceneTest_WaitLoad                    = 23,
	CutSceneTest_WaitFade                    = 24,
	RemoveLoadingView                        = 25,
	ConnectNextState                         = 26,
	CheckCommandLine                         = 27,
	CheckCommandLine_WaitTrigger             = 28,
	CheckCommandLine_WaitAction              = 29,
	CheckCommandLine_WaitDelay               = 30,
	CheckCommandLine_StartGPUTrace           = 31,
	CheckCommandLine_WaitGPUTrace            = 32,
	CheckCommandLine_StartCPUTrace           = 33,
	CheckCommandLine_WaitCPUTrace            = 34,
	CheckCommandLine_StartPrintMemory        = 35,
	CheckCommandLine_WaitPrintMemory         = 36,
	CheckCommandLine_WaitExit                = 37,
	Finish                                   = 38,
	EEndGameJumpSequence_MAX                 = 39,
};

// Enum EndGame.EEndGameModeSequence
// NumValues: 0x002B
enum class EEndGameModeSequence : uint8
{
	None                                     = 0,
	Begin                                    = 1,
	Boot                                     = 2,
	Boot_OnlineSubsystem                     = 3,
	Boot_CommonSaveData_PreCheck             = 4,
	Boot_LoadWait                            = 5,
	Boot_Resident                            = 6,
	Boot_Resident_Wait                       = 7,
	Boot_CommonSaveData                      = 8,
	Boot_CommonSaveData_CheckWait            = 9,
	Boot_CommonSaveData_Make                 = 10,
	Boot_CommonSaveData_MakeWait             = 11,
	Boot_CommonSaveData_Load                 = 12,
	Boot_CommonSaveData_LoadWait             = 13,
	Boot_Font_Load                           = 14,
	Boot_Font_LoadWait                       = 15,
	Boot_AppContent                          = 16,
	Boot_AppContent_CheckWait                = 17,
	Boot_AppContent_Message                  = 18,
	Boot_AppContent_MessageWait              = 19,
	Boot_AppContent_Update                   = 20,
	Boot_AppContent_UpdateWait               = 21,
	Boot_SendTrigger                         = 22,
	Boot_GameIntentWait                      = 23,
	DebugMenu                                = 24,
	DebugMenu_LoadWait                       = 25,
	DebugMenu_NormalWait                     = 26,
	DebugMenu_NormalUnload                   = 27,
	DebugMenu_TestPlay                       = 28,
	DebugMenu_TestPlayLoop                   = 29,
	DebugMenu_TestPlayLoadWait               = 30,
	Title_Shader_CompileWait                 = 31,
	Title                                    = 32,
	Title_Wait                               = 33,
	LocationJump                             = 34,
	LocationJump_JumpWait                    = 35,
	LocationJump_GameWait                    = 36,
	LocationJump_BootWait                    = 37,
	Editor                                   = 38,
	Editor_UnloadWait                        = 39,
	Editor_GameJumpWait                      = 40,
	Editor_Finish                            = 41,
	EEndGameModeSequence_MAX                 = 42,
};

// Enum EndGame.EActorSpeed
// NumValues: 0x0005
enum class EActorSpeed : uint8
{
	EActorSpeed_BATTLE_CAMERA                = 0,
	EActorSpeed_BATTLE_HIT                   = 1,
	EActorSpeed_CUT                          = 2,
	EActorSpeed_DEBUG                        = 3,
	EActorSpeed_MAX                          = 4,
};

// Enum EndGame.EGameSpeed
// NumValues: 0x000D
enum class EGameSpeed : uint8
{
	EGameSpeed_BATTLE_COMMAND                = 0,
	EGameSpeed_BATTLE_PARTY_CHANGE           = 1,
	EGameSpeed_BATTLE_CAMERA                 = 2,
	EGameSpeed_BATTLE_HIT                    = 3,
	EGameSpeed_BATTLE_HIT_COMBINATION        = 4,
	EGameSpeed_BATTLE_BURST                  = 5,
	EGameSpeed_MINIGAME                      = 6,
	EGameSpeed_SKIP_CINEMA                   = 7,
	EGameSpeed_NOTIFY                        = 8,
	EGameSpeed_FAST_FORWARD                  = 9,
	EGameSpeed_CUT_DEBUG                     = 10,
	EGameSpeed_DEBUG                         = 11,
	EGameSpeed_MAX                           = 12,
};

// Enum EndGame.EEndSystemPauseMenuKind
// NumValues: 0x000B
enum class EEndSystemPauseMenuKind : uint8
{
	None                                     = 0,
	Simple                                   = 1,
	CinemaPause                              = 2,
	BattlePause                              = 3,
	MainMenu                                 = 4,
	MapJournal                               = 5,
	Libra                                    = 6,
	GameOver                                 = 7,
	Colosseum                                = 8,
	OnlyResumeGame                           = 9,
	Max                                      = 10,
};

// Enum EndGame.EGamePause
// NumValues: 0x0009
enum class EGamePause : uint8
{
	EGamePause_SYSTEM                        = 0,
	EGamePause_LEVEL                         = 1,
	EGamePause_DEBUG                         = 2,
	EGamePause_SUSPEND                       = 3,
	EGamePause_WORLDSYSTEM                   = 4,
	EGamePause_STREAMING                     = 5,
	EGamePause_MINIGAME                      = 6,
	EGamePause_PLANNVEREVENT                 = 7,
	EGamePause_MAX                           = 8,
};

// Enum EndGame.EGameStatus
// NumValues: 0x0010
enum class EGameStatus : uint8
{
	EGameStatus_INIT_RESIDENT_RESOURCE       = 0,
	EGameStatus_INIT_EDITOR_GAME_PALY        = 1,
	EGameStatus_INIT_EDITOR_LOCATION         = 2,
	EGameStatus_INIT_EDITOR_CUT_SCENE        = 3,
	EGameStatus_EMPTY_EDITOR_LOCATION        = 4,
	EGameStatus_TO_TITLE                     = 5,
	EGameStatus_LOAD_SAVEDATA                = 6,
	EGameStatus_LOAD_BACKUPDATA              = 7,
	EGameStatus_LOAD_SNAPDATA                = 8,
	EGameStatus_LOAD_SNAPDATA_2ND            = 9,
	EGameStatus_INIT_EDITOR_QUICK_GAME_PALY  = 10,
	EGameStatus_JUMP_LOCATION                = 11,
	EGameStatus_INIT_EDITOR_PREVIEW_LAUNCHER = 12,
	EGameStatus_TEST_CUT_SCENE               = 13,
	EGameStatus_TO_BOOT                      = 14,
	EGameStatus_MAX                          = 15,
};

// Enum EndGame.EGameMode
// NumValues: 0x000D
enum class EGameMode : uint8
{
	EGameMode_PLAY_GAME                      = 0,
	EGameMode_FILED_TEST                     = 1,
	EGameMode_MOTION_TEST                    = 2,
	EGameMode_BATTLE_TEST                    = 3,
	EGameMode_SOUND_TEST                     = 4,
	EGameMode_EVENT_TEST                     = 5,
	EGameMode_PLAYABLE                       = 6,
	EGameMode_TRIAL                          = 7,
	EGameMode_MediaDemo                      = 8,
	EGameMode_PreviewEvent                   = 9,
	EGameMode_Expansion2                     = 10,
	EGameMode_Expansion3                     = 11,
	EGameMode_MAX                            = 12,
};

// Enum EndGame.EGameTrigger
// NumValues: 0x000F
enum class EGameTrigger : uint8
{
	EGameTrigger_NONE                        = 0,
	EGameTrigger_BOOT                        = 1,
	EGameTrigger_EDITOR_BOOT                 = 2,
	EGameTrigger_DEBUG_BOOT                  = 3,
	EGameTrigger_TITLE                       = 4,
	EGameTrigger_INIT_PERSISTENT             = 5,
	EGameTrigger_EDITOR_INIT_PERSISTENT      = 6,
	EGameTrigger_GAME_IDLE                   = 7,
	EGameTrigger_PAUSE                       = 8,
	EGameTrigger_PAUSE_END                   = 9,
	EGameTrigger_MENU                        = 10,
	EGameTrigger_MENU_END                    = 11,
	EGameTrigger_UNINIT_PERSISTENT           = 12,
	EGameTrigger_PAUSE_STARTCHAPTER          = 13,
	EGameTrigger_MAX                         = 14,
};

// Enum EndGame.EGameState
// NumValues: 0x000C
enum class EGameState : uint8
{
	EGameState_NONE                          = 0,
	EGameState_BOOT                          = 1,
	EGameState_EDITOR_BOOT                   = 2,
	EGameState_DEBUG_BOOT                    = 3,
	EGameState_TITLE                         = 4,
	EGameState_INIT_PERSISTENT               = 5,
	EGameState_GAME_IDLE                     = 6,
	EGameState_PAUSE_IDLE                    = 7,
	EGameState_MENU_IDLE                     = 8,
	EGameState_UNINIT_PERSISTENT             = 9,
	EGameState_PAUSE_IDLE_STARTCHAPTER       = 10,
	EGameState_MAX                           = 32,
};

// Enum EndGame.EndHeliLookAtType
// NumValues: 0x0003
enum class EndHeliLookAtType : uint8
{
	MoveDirection                            = 0,
	SequencerData                            = 1,
	MAX                                      = 2,
};

// Enum EndGame.EInterSense
// NumValues: 0x0004
enum class EInterSense : uint8
{
	Hearing                                  = 0,
	Vision                                   = 1,
	MaxSence                                 = 2,
	EInterSense_MAX                          = 3,
};

// Enum EndGame.EEndInterestPointTemplate
// NumValues: 0x000C
enum class EEndInterestPointTemplate : uint8
{
	None                                     = 0,
	Template00                               = 1,
	Template01                               = 2,
	Template02                               = 3,
	Template03                               = 4,
	Template04                               = 5,
	Template05                               = 6,
	Template06                               = 7,
	Template07                               = 8,
	Template08                               = 9,
	Template09                               = 10,
	MAX                                      = 11,
};

// Enum EndGame.EEndAIInterestActionCommand
// NumValues: 0x0012
enum class EEndAIInterestActionCommand : uint8
{
	Approach                                 = 0,
	PlayAnimation                            = 1,
	OverrideAnim                             = 2,
	Escape                                   = 3,
	Wait                                     = 4,
	LookAt                                   = 5,
	OverrideAnimEnd                          = 6,
	LookAtEnd                                = 7,
	UpperBodyBlendAnimation                  = 8,
	UpperBodyBlendAnimationEnd               = 9,
	Emotion                                  = 10,
	EmotionEnd                               = 11,
	OverrideIdleVariation                    = 12,
	Turn                                     = 13,
	TurnEnd                                  = 14,
	AIStateGroup                             = 15,
	None                                     = 16,
	Max                                      = 17,
};

// Enum EndGame.EEndAIInterestActionPriority
// NumValues: 0x0005
enum class EEndAIInterestActionPriority : uint8
{
	DEFAULT                                  = 0,
	HIGH                                     = 1,
	OVER_CINEMA                              = 2,
	Priority_Max                             = 3,
	EEndAIInterestActionPriority_MAX         = 4,
};

// Enum EndGame.EEndInterestPointReactionActorType
// NumValues: 0x0006
enum class EEndInterestPointReactionActorType : uint8
{
	Player                                   = 0,
	Party                                    = 1,
	Npc                                      = 2,
	Animal                                   = 3,
	Type_Max                                 = 4,
	EEndInterestPointReactionActorType_MAX   = 5,
};

// Enum EndGame.ERelativeCameraBase
// NumValues: 0x0003
enum class ERelativeCameraBase : uint8
{
	ActorBase                                = 0,
	LeaderBase                               = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndStreamingVolumeTargetType
// NumValues: 0x0008
enum class EEndStreamingVolumeTargetType : uint8
{
	All                                      = 0,
	Editor                                   = 1,
	ROM                                      = 2,
	PS5ROM                                   = 3,
	WinROM                                   = 4,
	HighSpecOnly                             = 5,
	LowSpecOnly                              = 6,
	EEndStreamingVolumeTargetType_MAX        = 7,
};

// Enum EndGame.EEndRenderingScene
// NumValues: 0x0004
enum class EEndRenderingScene : uint8
{
	Default                                  = 0,
	MainMenu                                 = 1,
	MiniGame                                 = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndLoadLevelPriority
// NumValues: 0x0011
enum class EEndLoadLevelPriority : uint8
{
	STREAM_LEVEL_NONE                        = 0,
	STREAM_LEVEL_BACK_GROUND                 = 64,
	STREAM_LEVEL_DEFAULT_PRIORITY            = 128,
	STREAM_LEVEL_LEVELSEQUENCELOADER_ANIMATION_PRIORITY = 160,
	STREAM_LEVEL_CHARA_POP_LOAD_PRIORITY     = 160,
	STREAM_LEVEL_CHARA_POP_UNLOAD_PRIORITY   = 161,
	STREAM_LEVEL_ENVSET_PRIORITY             = 170,
	STREAM_LEVEL_ABILITY_PRIORITY            = 180,
	STREAM_LEVEL_MENU_PRIORITY               = 190,
	STREAM_LEVEL_LOCATION_ENTRY_PRIORITY     = 195,
	STREAM_LEVEL_FIRST_CINEMA_PRIORITY       = 200,
	STREAM_LEVEL_PLANER_CINEMA_PRIORITY      = 210,
	STREAM_LEVEL_PARTY_CHARACTER_PRIORITY    = 230,
	STREAM_LEVEL_SECONDRY_CINEMA_PRIORITY    = 253,
	STREAM_LEVEL_INCREMENT_REFERENCE_COUNTER = 254,
	STREAM_LEVEL_UNLOAD                      = 255,
	STREAM_LEVEL_MAX                         = 256,
};

// Enum EndGame.StreamLevelPackageExist
// NumValues: 0x0004
enum class EStreamLevelPackageExist : uint8
{
	StreamLevelPackageExist_RESET            = 0,
	StreamLevelPackageExist_NONE_FILE        = 1,
	StreamLevelPackageExist_EXIT_FILE        = 2,
	StreamLevelPackageExist_MAX              = 3,
};

// Enum EndGame.EEndBarretSunglassStateOverwrite
// NumValues: 0x0004
enum class EEndBarretSunglassStateOverwrite : uint8
{
	None                                     = 0,
	On                                       = 1,
	Off                                      = 2,
	EEndBarretSunglassStateOverwrite_MAX     = 3,
};

// Enum EndGame.EEndLocationVolumeCameraPriority
// NumValues: 0x0006
enum class EEndLocationVolumeCameraPriority : uint8
{
	Priority1                                = 0,
	Priority2                                = 1,
	Priority3                                = 2,
	Priority4                                = 3,
	Priority5                                = 4,
	EEndLocationVolumeCameraPriority_MAX     = 5,
};

// Enum EndGame.EEndLocationVolumeType
// NumValues: 0x0003
enum class EEndLocationVolumeType : uint8
{
	Default                                  = 0,
	General                                  = 1,
	EEndLocationVolumeType_MAX               = 2,
};

// Enum EndGame.ELocationVolumePauseMask
// NumValues: 0x0003
enum class ELocationVolumePauseMask : uint8
{
	Default                                  = 0,
	Battle                                   = 1,
	ELocationVolumePauseMask_MAX             = 2,
};

// Enum EndGame.EOptionCategory
// NumValues: 0x00AE
enum class EOptionCategory : uint8
{
	Difficulty                               = 0,
	MenuCursor                               = 1,
	BattleCursor                             = 2,
	NaviMap                                  = 3,
	Subtitle                                 = 4,
	AutoTalk                                 = 5,
	BattleGuide                              = 6,
	BrightnessSDR                            = 7,
	BrightnessHDR                            = 8,
	CameraDistanceField                      = 9,
	CameraDistanceBattle                     = 10,
	CameraMoveFollow                         = 11,
	CameraAttackFollow                       = 12,
	CameraSlopeFollow                        = 13,
	CameraSpaceOffset                        = 14,
	CameraSensitivity                        = 15,
	CameraX                                  = 16,
	CameraY                                  = 17,
	FriendCommandCameraType                  = 18,
	TargetLockOnKey                          = 19,
	TargetLockOnType                         = 20,
	SequenceNormalAttackTargetChange         = 21,
	Vibration                                = 22,
	VibrationScreen                          = 23,
	BGMVolume                                = 24,
	SEVolume                                 = 25,
	VoiceVolume                              = 26,
	VoiceLanguage                            = 27,
	AreaNaviType                             = 28,
	LocationNaviType                         = 29,
	BattleChangeButton                       = 30,
	MasterVolume                             = 31,
	BackgroundGamepad                        = 32,
	BattleMode                               = 33,
	WindowMode                               = 34,
	ScreenResolution                         = 35,
	ZackNaviType                             = 36,
	SkipMonsterGuide                         = 37,
	PhsPadSpeaker                            = 38,
	MotionSensor                             = 39,
	StrengthHDR                              = 40,
	IntensityHDR                             = 41,
	MinLuminanceHDR                          = 42,
	GraphicsMode                             = 43,
	LODDistanceScale                         = 44,
	TextureQuality                           = 45,
	ShadowQuality                            = 46,
	FPS                                      = 47,
	HDR                                      = 48,
	MemberShortcut                           = 49,
	AutoCameraRotation                       = 50,
	OldBattleMemberOrder                     = 51,
	VibrationIntensityEvent                  = 52,
	VibrationIntensityBattle                 = 53,
	VibrationIntensityField                  = 54,
	VibrationIntensityMenu                   = 55,
	VibrationIntensityMiniGame               = 56,
	TextLanguage                             = 57,
	AreaNaviMapScale                         = 58,
	LocationNaviMapScale                     = 59,
	ZackNaviMapScale                         = 60,
	ParkourGuide                             = 61,
	TriggerEffectIntensity                   = 62,
	SongVolume                               = 63,
	FieldCommandMember                       = 64,
	BackgroundSound                          = 65,
	FastForwardPlayRate                      = 66,
	CastShadowDistScale                      = 67,
	Display                                  = 68,
	MinScreenPercentage                      = 69,
	GraphicsPreset                           = 70,
	BgQuality                                = 71,
	CharaQuality                             = 72,
	AntiAliasing                             = 73,
	DlssQuality                              = 74,
	EffectQuality                            = 75,
	PadSpeakerVolume                         = 76,
	LowResolutionFont                        = 77,
	MaxScreenPercentage                      = 78,
	VSync                                    = 79,
	MouseSensitivity                         = 80,
	CommandMenuWASD                          = 81,
	OceanQuality                             = 82,
	FogQuality                               = 83,
	GamepadLeftStick                         = 84,
	GamepadRightStick                        = 85,
	GamepadDPad                              = 86,
	GamepadFaceButtonLeft                    = 87,
	GamepadFaceButtonTop                     = 88,
	GamepadDecide                            = 89,
	GamepadCancel                            = 90,
	GamepadLeftShoulder                      = 91,
	GamepadRightShoulder                     = 92,
	GamepadLeftTrigger                       = 93,
	GamepadRightTrigger                      = 94,
	GamepadLeftThumb                         = 95,
	GamepadRightThumb                        = 96,
	GamepadSpecialLeft                       = 97,
	GamepadSpecialRight                      = 98,
	KeyboardLeftStickUp                      = 99,
	KeyboardLeftStickDown                    = 100,
	KeyboardLeftStickLeft                    = 101,
	KeyboardLeftStickRight                   = 102,
	KeyboardRightStickUp                     = 103,
	KeyboardRightStickDown                   = 104,
	KeyboardRightStickLeft                   = 105,
	KeyboardRightStickRight                  = 106,
	KeyboardPauseMenu                        = 107,
	KeyboardCommandMenu                      = 108,
	KeyboardAttack                           = 109,
	KeyboardPrevRank                         = 110,
	KeyboardNextRank                         = 111,
	KeyboardMagnify                          = 112,
	KeyboardFieldAction                      = 113,
	KeyboardAccel                            = 114,
	KeyboardDash                             = 115,
	KeyboardVehicle                          = 116,
	KeyboardCatch                            = 117,
	KeyboardMapMenu                          = 118,
	KeyboardShowStatus                       = 119,
	KeyboardResetCamera                      = 120,
	KeyboardPartySet1                        = 121,
	KeyboardPartySet2                        = 122,
	KeyboardPartySet3                        = 123,
	KeyboardDodge                            = 124,
	KeyboardUniqueAbility                    = 125,
	KeyboardGuard                            = 126,
	KeyboardTargetLock                       = 127,
	KeyboardEnemyIntel                       = 128,
	KeyboardShortcut5                        = 129,
	KeyboardPrevTarget                       = 130,
	KeyboardNextTarget                       = 131,
	KeyboardPrevMember                       = 132,
	KeyboardNextMember                       = 133,
	KeyboardChangeLeaderPrev                 = 134,
	KeyboardChangeLeaderNext                 = 135,
	KeyboardShortcutMenu                     = 136,
	KeyboardMember1ShortcutMenu              = 137,
	KeyboardMember2ShortcutMenu              = 138,
	KeyboardShortcut1                        = 139,
	KeyboardShortcut2                        = 140,
	KeyboardShortcut3                        = 141,
	KeyboardShortcut4                        = 142,
	KeyboardCoop1                            = 143,
	KeyboardCoop2                            = 144,
	KeyboardCoop3                            = 145,
	KeyboardCoop4                            = 146,
	KeyboardMember1Shortcut1                 = 147,
	KeyboardMember1Shortcut2                 = 148,
	KeyboardMember1Shortcut3                 = 149,
	KeyboardMember1Shortcut4                 = 150,
	KeyboardMember2Shortcut1                 = 151,
	KeyboardMember2Shortcut2                 = 152,
	KeyboardMember2Shortcut3                 = 153,
	KeyboardMember2Shortcut4                 = 154,
	KeyboardDPadUp                           = 155,
	KeyboardDPadDown                         = 156,
	KeyboardDPadLeft                         = 157,
	KeyboardDPadRight                        = 158,
	KeyboardDecide                           = 159,
	KeyboardCancel                           = 160,
	KeyboardLeftTrigger                      = 161,
	KeyboardRightTrigger                     = 162,
	KeyboardScrollUp                         = 163,
	KeyboardScrollDown                       = 164,
	KeyboardFaceButtonTop                    = 165,
	KeyboardFaceButtonLeft                   = 166,
	KeyboardLeftShoulder                     = 167,
	KeyboardRightShoulder                    = 168,
	KeyboardLeftThumb                        = 169,
	KeyboardRightThumb                       = 170,
	KeyboardSpecialRight                     = 171,
	KeyboardSpecialLeft                      = 172,
	EOptionCategory_MAX                      = 173,
};

// Enum EndGame.EMenuItemCategory
// NumValues: 0x0008
enum class EMenuItemCategory : uint8
{
	GamePlay                                 = 0,
	CameraController                         = 1,
	Sound                                    = 2,
	Language                                 = 3,
	Graphics                                 = 4,
	Gamepad                                  = 5,
	Keyboard                                 = 6,
	EMenuItemCategory_MAX                    = 7,
};

// Enum EndGame.EOptionSelectionKind
// NumValues: 0x0005
enum class EOptionSelectionKind : uint8
{
	List                                     = 0,
	Range                                    = 1,
	Gamepad                                  = 2,
	Keyboard                                 = 3,
	EOptionSelectionKind_MAX                 = 4,
};

// Enum EndGame.EEndMenuTurnBackAlertKind
// NumValues: 0x0003
enum class EEndMenuTurnBackAlertKind : uint8
{
	Story                                    = 0,
	Quest                                    = 1,
	EEndMenuTurnBackAlertKind_MAX            = 2,
};

// Enum EndGame.EEndMenuAncientMatterMsgKind
// NumValues: 0x0009
enum class EEndMenuAncientMatterMsgKind : uint8
{
	All                                      = 0,
	Grasslands                               = 1,
	Junon                                    = 2,
	Corel                                    = 3,
	Gongaga                                  = 4,
	Cosmo                                    = 5,
	Nibel                                    = 6,
	MiddleOcean                              = 7,
	EEndMenuAncientMatterMsgKind_MAX         = 8,
};

// Enum EndGame.EEndMenuParamaterGaugeType
// NumValues: 0x0008
enum class EEndMenuParamaterGaugeType : uint8
{
	GaugeHP                                  = 0,
	GaugeHP2                                 = 1,
	GaugeHP3                                 = 2,
	GaugeMP                                  = 3,
	GaugeLIMIT                               = 4,
	GaugeENEMY                               = 5,
	GaugeMax                                 = 6,
	EEndMenuParamaterGaugeType_MAX           = 7,
};

// Enum EndGame.EEndMenuChocoboStableMenuType
// NumValues: 0x0005
enum class EEndMenuChocoboStableMenuType : uint8
{
	Normal                                   = 0,
	Race                                     = 1,
	RaceDirect                               = 2,
	RaceNonCancellable                       = 3,
	EEndMenuChocoboStableMenuType_MAX        = 4,
};

// Enum EndGame.EEndMenuCountdownColorType
// NumValues: 0x0004
enum class EEndMenuCountdownColorType : uint8
{
	Default                                  = 0,
	Blue                                     = 1,
	Red                                      = 2,
	EEndMenuCountdownColorType_MAX           = 3,
};

// Enum EndGame.EEndMenuStoryNotifyState
// NumValues: 0x0004
enum class EEndMenuStoryNotifyState : uint8
{
	None                                     = 0,
	Added                                    = 1,
	Completed                                = 2,
	EEndMenuStoryNotifyState_MAX             = 3,
};

// Enum EndGame.EEndMenuStoryNotifyKind
// NumValues: 0x0002
enum class EEndMenuStoryNotifyKind : uint8
{
	SideStory                                = 0,
	EEndMenuStoryNotifyKind_MAX              = 1,
};

// Enum EndGame.EMenuFieldActionCommandType
// NumValues: 0x0003
enum class EMenuFieldActionCommandType : uint8
{
	Press                                    = 0,
	Up                                       = 1,
	EMenuFieldActionCommandType_MAX          = 2,
};

// Enum EndGame.EEndMenuReportIconKind
// NumValues: 0x000A
enum class EEndMenuReportIconKind : uint8
{
	CommunicationTower                       = 0,
	SubjugationPoint                         = 1,
	LifeSpot                                 = 2,
	StoryPoint                               = 3,
	ChocoboFootTrace                         = 4,
	ChocoboFeedingGround                     = 5,
	SummonMonsterSmallShrine                 = 6,
	CraftRecipeExcavatePoint                 = 7,
	SecretSubjugationPoint                   = 8,
	EEndMenuReportIconKind_MAX               = 9,
};

// Enum EndGame.EEndMenuReportNotifyState
// NumValues: 0x0007
enum class EEndMenuReportNotifyState : uint8
{
	None                                     = 0,
	Added                                    = 1,
	Completed                                = 2,
	Notice                                   = 3,
	CompletedNow                             = 4,
	FoundLocation                            = 5,
	EEndMenuReportNotifyState_MAX            = 6,
};

// Enum EndGame.EEndMenuReportNotifyKind
// NumValues: 0x0006
enum class EEndMenuReportNotifyKind : uint8
{
	WorldReport                              = 0,
	BattleMission                            = 1,
	Colosseum                                = 2,
	ChadleyReport                            = 3,
	Hub                                      = 4,
	EEndMenuReportNotifyKind_MAX             = 5,
};

// Enum EndGame.EEndMenuMiniGameKeyMappingMode
// NumValues: 0x0016
enum class EEndMenuMiniGameKeyMappingMode : uint8
{
	None                                     = 0,
	Squat                                    = 1,
	Dance                                    = 2,
	Piano                                    = 3,
	Buggy                                    = 4,
	RunWild                                  = 5,
	Bike                                     = 6,
	Boxing                                   = 7,
	Coaster                                  = 8,
	Race                                     = 9,
	Dolphin                                  = 10,
	JunonParade                              = 11,
	Condor                                   = 12,
	PauseMenu                                = 13,
	Gambit                                   = 14,
	CardGame                                 = 15,
	Torokko                                  = 16,
	MushroomPicking                          = 17,
	Shooting                                 = 18,
	GravityDevice                            = 19,
	CrystalAnalysis                          = 20,
	EEndMenuMiniGameKeyMappingMode_MAX       = 21,
};

// Enum EndGame.EEndMenuGamepadType
// NumValues: 0x0004
enum class EEndMenuGamepadType : uint8
{
	Default                                  = 0,
	XInput                                   = 1,
	DirectInput                              = 2,
	EEndMenuGamepadType_MAX                  = 3,
};

// Enum EndGame.EEndMenuDirectInputButtonMode
// NumValues: 0x0004
enum class EEndMenuDirectInputButtonMode : uint8
{
	Numerical                                = 0,
	Alphabetical                             = 1,
	Symbolic                                 = 2,
	EEndMenuDirectInputButtonMode_MAX        = 3,
};

// Enum EndGame.EEndMenuKeyGuideMode
// NumValues: 0x0005
enum class EEndMenuKeyGuideMode : uint8
{
	Gamepad                                  = 0,
	Keyboard                                 = 1,
	Gamepad_XInput                           = 2,
	Gamepad_DirectInput                      = 3,
	EEndMenuKeyGuideMode_MAX                 = 4,
};

// Enum EndGame.EEndMenuNextSaveIconKind
// NumValues: 0x0005
enum class EEndMenuNextSaveIconKind : uint8
{
	None                                     = 0,
	CheckpointUpdated                        = 1,
	FailedToSave                             = 2,
	FailedToLoad                             = 3,
	EEndMenuNextSaveIconKind_MAX             = 4,
};

// Enum EndGame.EEndMenuSaveIconKind
// NumValues: 0x0004
enum class EEndMenuSaveIconKind : uint8
{
	Load                                     = 0,
	Save                                     = 1,
	List                                     = 2,
	EEndMenuSaveIconKind_MAX                 = 3,
};

// Enum EndGame.EEndMenuQuestBattleMessageKind
// NumValues: 0x0004
enum class EEndMenuQuestBattleMessageKind : uint8
{
	TargetDiscovered                         = 0,
	TargetDestroyed                          = 1,
	ClientDiscovered                         = 2,
	EEndMenuQuestBattleMessageKind_MAX       = 3,
};

// Enum EndGame.EEndMenuMessageWindowFlags
// NumValues: 0x0004
enum class EEndMenuMessageWindowFlags : uint8
{
	None                                     = 0,
	LeftAlignedOptions                       = 1,
	PauseMenu                                = 2,
	EEndMenuMessageWindowFlags_MAX           = 3,
};

// Enum EndGame.EEndMenuGBikeGaugeType
// NumValues: 0x0004
enum class EEndMenuGBikeGaugeType : uint8
{
	Default                                  = 0,
	Boss                                     = 1,
	Wimp                                     = 2,
	EEndMenuGBikeGaugeType_MAX               = 3,
};

// Enum EndGame.EEndMenuLoadingScreenType
// NumValues: 0x0003
enum class EEndMenuLoadingScreenType : uint8
{
	Normal                                   = 0,
	ChocoboFastTravel                        = 1,
	EEndMenuLoadingScreenType_MAX            = 2,
};

// Enum EndGame.EEndMenuTalkViewType
// NumValues: 0x0004
enum class EEndMenuTalkViewType : uint8
{
	Both                                     = 0,
	OnlyText                                 = 1,
	Hidden                                   = 2,
	EEndMenuTalkViewType_MAX                 = 3,
};

// Enum EndGame.EEndMenuLockonSiteType
// NumValues: 0x0004
enum class EEndMenuLockonSiteType : uint8
{
	Default                                  = 0,
	Shooting                                 = 1,
	Compass                                  = 2,
	EEndMenuLockonSiteType_MAX               = 3,
};

// Enum EndGame.EEndMenuLockonMarkerType
// NumValues: 0x0004
enum class EEndMenuLockonMarkerType : uint8
{
	Default                                  = 0,
	Wimp                                     = 1,
	Libra                                    = 2,
	EEndMenuLockonMarkerType_MAX             = 3,
};

// Enum EndGame.EEndMenuKeyGuideType
// NumValues: 0x000A
enum class EEndMenuKeyGuideType : uint8
{
	Field                                    = 0,
	GBike                                    = 1,
	MiniGameBuggy                            = 2,
	ChocoboRace                              = 3,
	ChocoboRaceTutorial                      = 4,
	SelectByCamera                           = 5,
	FieldChainAbility                        = 6,
	FieldShortcutAbility                     = 7,
	GuideNone                                = 8,
	EEndMenuKeyGuideType_MAX                 = 9,
};

// Enum EndGame.EEndMenuCinemaButtonKindMask
// NumValues: 0x0003
enum class EEndMenuCinemaButtonKindMask : uint8
{
	Default                                  = 0,
	Cinema                                   = 1,
	EEndMenuCinemaButtonKindMask_MAX         = 2,
};

// Enum EndGame.EEndMenuCinemaButtonKind
// NumValues: 0x0004
enum class EEndMenuCinemaButtonKind : uint8
{
	EventSkip                                = 0,
	MainMenu                                 = 1,
	FastForward                              = 2,
	EEndMenuCinemaButtonKind_MAX             = 3,
};

// Enum EndGame.EMenuSkillFrameType
// NumValues: 0x0003
enum class EMenuSkillFrameType : uint8
{
	Ally                                     = 0,
	Enemy                                    = 1,
	EMenuSkillFrameType_MAX                  = 2,
};

// Enum EndGame.ECommandRequestHideType
// NumValues: 0x0003
enum class ECommandRequestHideType : uint8
{
	OK                                       = 0,
	NG                                       = 1,
	ECommandRequestHideType_MAX              = 2,
};

// Enum EndGame.ENaviMapIconDirection
// NumValues: 0x000A
enum class ENaviMapIconDirection : uint8
{
	None                                     = 0,
	North                                    = 1,
	NorthEast                                = 2,
	East                                     = 3,
	SouthEast                                = 4,
	South                                    = 5,
	SouthWest                                = 6,
	West                                     = 7,
	NorthWest                                = 8,
	ENaviMapIconDirection_MAX                = 9,
};

// Enum EndGame.EEquipType
// NumValues: 0x0004
enum class EEquipType : uint8
{
	Weapon                                   = 0,
	Bangle                                   = 1,
	Accessory                                = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndMenuMainMenuItemKind
// NumValues: 0x000F
enum class EEndMenuMainMenuItemKind : uint8
{
	ItemCraft                                = 0,
	MateriaEquip                             = 1,
	BattleSettings                           = 2,
	BattleReport                             = 3,
	EnemyReport                              = 4,
	WeaponUpgrade                            = 5,
	Magic                                    = 6,
	Item                                     = 7,
	Card                                     = 8,
	Status                                   = 9,
	Manual                                   = 10,
	SaveLoad                                 = 11,
	System                                   = 12,
	TrialSpecial                             = 13,
	EEndMenuMainMenuItemKind_MAX             = 14,
};

// Enum EndGame.EEndMenuFieldMenuStatus
// NumValues: 0x0004
enum class EEndMenuFieldMenuStatus : uint8
{
	IsWaitMode                               = 0,
	IsWaitModeCmd                            = 1,
	IsLockonSelect                           = 2,
	EEndMenuFieldMenuStatus_MAX              = 3,
};

// Enum EndGame.EEndMenuFieldPaneType
// NumValues: 0x0004
enum class EEndMenuFieldPaneType : uint8
{
	Command                                  = 0,
	Status                                   = 1,
	TypeMax                                  = 2,
	EEndMenuFieldPaneType_MAX                = 3,
};

// Enum EndGame.EEndMenuInputGuidelineType
// NumValues: 0x0005
enum class EEndMenuInputGuidelineType : uint8
{
	Attack                                   = 0,
	BindUnleash                              = 1,
	CharacterChange                          = 2,
	TypeMax                                  = 3,
	EEndMenuInputGuidelineType_MAX           = 4,
};

// Enum EndGame.EEndMenuDigitFontType
// NumValues: 0x0003
enum class EEndMenuDigitFontType : uint8
{
	Normal                                   = 0,
	Large                                    = 1,
	EEndMenuDigitFontType_MAX                = 2,
};

// Enum EndGame.EEndMenuSystemFontType
// NumValues: 0x0005
enum class EEndMenuSystemFontType : uint8
{
	Normal                                   = 0,
	Small                                    = 1,
	Large                                    = 2,
	XLarge                                   = 3,
	EEndMenuSystemFontType_MAX               = 4,
};

// Enum EndGame.EEndMenuUIFilterType
// NumValues: 0x0009
enum class EEndMenuUIFilterType : uint8
{
	WaitMode                                 = 0,
	Dying                                    = 1,
	MainMenu                                 = 2,
	MainMenuParticle                         = 3,
	MainMenuFade                             = 4,
	MainMenuMono                             = 5,
	Stone                                    = 6,
	FilterMax                                = 7,
	EEndMenuUIFilterType_MAX                 = 8,
};

// Enum EndGame.EEndMenuTalkSelectWindowType
// NumValues: 0x0006
enum class EEndMenuTalkSelectWindowType : uint8
{
	center                                   = 0,
	left                                     = 1,
	CenterList                               = 0,
	LeftList                                 = 1,
	Directional                              = 2,
	EEndMenuTalkSelectWindowType_MAX         = 3,
};

// Enum EndGame.EEndMenuCommandSummonMode
// NumValues: 0x0004
enum class EEndMenuCommandSummonMode : uint8
{
	None                                     = 0,
	Standbuy                                 = 1,
	Release                                  = 2,
	EEndMenuCommandSummonMode_MAX            = 3,
};

// Enum EndGame.EEndMenuJoinMode
// NumValues: 0x0005
enum class EEndMenuJoinMode : uint8
{
	NewJoin                                  = 0,
	ReJoin                                   = 1,
	LeftOut                                  = 2,
	Reserve                                  = 3,
	EEndMenuJoinMode_MAX                     = 4,
};

// Enum EndGame.EEndMenuMiniGameOptionsMode
// NumValues: 0x000B
enum class EEndMenuMiniGameOptionsMode : uint8
{
	None                                     = 0,
	Piano                                    = 1,
	Muscle                                   = 2,
	RunWild                                  = 3,
	Bike                                     = 4,
	Boxing                                   = 5,
	Coaster                                  = 6,
	Race                                     = 7,
	Buggy                                    = 8,
	Dolphin                                  = 9,
	EEndMenuMiniGameOptionsMode_MAX          = 10,
};

// Enum EndGame.EEndMenuPauseMode
// NumValues: 0x000D
enum class EEndMenuPauseMode : uint8
{
	Normal                                   = 0,
	Simple                                   = 1,
	Cinema                                   = 2,
	CinemaNoSkip                             = 3,
	Battle                                   = 4,
	MapJournal                               = 5,
	Colosseum                                = 6,
	ColosseumResult                          = 7,
	Libra                                    = 8,
	CommandHelp                              = 9,
	MiniGamePause                            = 10,
	PcUpgrade                                = 11,
	EEndMenuPauseMode_MAX                    = 12,
};

// Enum EndGame.EEndMenuLogOptionFlags
// NumValues: 0x0004
enum class EEndMenuLogOptionFlags : uint8
{
	None                                     = 0,
	Unique                                   = 1,
	InventoryFull                            = 2,
	EEndMenuLogOptionFlags_MAX               = 3,
};

// Enum EndGame.EEndMenuLogColorKind
// NumValues: 0x0007
enum class EEndMenuLogColorKind : uint8
{
	Default                                  = 0,
	MainStory                                = 1,
	Quest                                    = 2,
	Report                                   = 3,
	Alert                                    = 4,
	Craft                                    = 5,
	EEndMenuLogColorKind_MAX                 = 6,
};

// Enum EndGame.EEndMenuLogEffectKind
// NumValues: 0x0008
enum class EEndMenuLogEffectKind : uint8
{
	None                                     = 0,
	Small                                    = 1,
	Middle                                   = 2,
	Large                                    = 3,
	Weapon                                   = 4,
	Alert                                    = 5,
	Material                                 = 6,
	EEndMenuLogEffectKind_MAX                = 7,
};

// Enum EndGame.EEndMenuIconKind
// NumValues: 0x0024
enum class EEndMenuIconKind : uint8
{
	None                                     = 0,
	Item                                     = 1,
	KeyItem                                  = 2,
	WeaponCloud                              = 3,
	WeaponBarret                             = 4,
	WeaponTifa                               = 5,
	WeaponAerith                             = 6,
	Bangle                                   = 7,
	Accessory                                = 8,
	Materia                                  = 9,
	Resource                                 = 10,
	KnockOut                                 = 11,
	Defeat                                   = 12,
	LevelUpMateria                           = 13,
	UpgradeWeaponCloud                       = 14,
	UpgradeWeaponBarret                      = 15,
	UpgradeWeaponTifa                        = 16,
	UpgradeWeaponAerith                      = 17,
	BattleReport                             = 18,
	WishList                                 = 19,
	WeaponRedXIII                            = 20,
	WeaponYuffie                             = 21,
	WeaponCaitsith                           = 22,
	UpgradeWeaponRedXIII                     = 23,
	UpgradeWeaponYuffie                      = 24,
	UpgradeWeaponCaitsith                    = 25,
	Collection                               = 26,
	CraftMaterial                            = 27,
	CraftMaterialGrass                       = 28,
	CraftMaterialWood                        = 29,
	CraftMaterialStones                      = 30,
	CraftMaterialPouch                       = 31,
	CraftMaterialEnemy                       = 32,
	CraftMaterialOthers                      = 33,
	ChocoboAccessory                         = 34,
	EEndMenuIconKind_MAX                     = 35,
};

// Enum EndGame.EEndMenuBattleTargetState
// NumValues: 0x000A
enum class EEndMenuBattleTargetState : uint8
{
	None                                     = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	LockedEnabled                            = 3,
	LockedDisabled                           = 4,
	OutEnabled                               = 5,
	OutDisabled                              = 6,
	OutLockedEnabled                         = 7,
	OutLockedDisabled                        = 8,
	EEndMenuBattleTargetState_MAX            = 9,
};

// Enum EndGame.EEndMenuDamageResistance
// NumValues: 0x0004
enum class EEndMenuDamageResistance : uint8
{
	None                                     = 0,
	Weakness                                 = 1,
	Reduced                                  = 2,
	EEndMenuDamageResistance_MAX             = 3,
};

// Enum EndGame.EEndMenuPopupMessageKind
// NumValues: 0x0025
enum class EEndMenuPopupMessageKind : uint8
{
	None                                     = 0,
	Damage                                   = 1,
	Heal                                     = 2,
	PartyDamage                              = 3,
	MpDamage                                 = 4,
	MpHeal                                   = 5,
	Dodge                                    = 6,
	EnemyDodge                               = 7,
	StealFailed                              = 8,
	AlreadyStolen                            = 9,
	NothingToSteal                           = 10,
	LevelUp                                  = 11,
	CatchStart                               = 12,
	CatchEnd                                 = 13,
	MountStart                               = 14,
	MountEnd                                 = 15,
	JumpStart                                = 16,
	JumpEnd                                  = 17,
	StealSucceeded                           = 18,
	LevelUpMateria                           = 19,
	UpgradeWeapon                            = 20,
	Death                                    = 21,
	Learning                                 = 22,
	Area                                     = 23,
	Reject                                   = 24,
	NoEffect                                 = 25,
	LevelUpWeapon                            = 26,
	TargetDestroyed                          = 27,
	Recover                                  = 28,
	Danger                                   = 29,
	YuffieDodge                              = 30,
	MorphFailed                              = 31,
	DownLight                                = 32,
	DownNormal                               = 33,
	DownHeavy                                = 34,
	DownHeavyAir                             = 35,
	EEndMenuPopupMessageKind_MAX             = 36,
};

// Enum EndGame.EEndMenuCreepingIconType
// NumValues: 0x0003
enum class EEndMenuCreepingIconType : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	EEndMenuCreepingIconType_MAX             = 2,
};

// Enum EndGame.EEndMenuFieldTargetIconType
// NumValues: 0x0009
enum class EEndMenuFieldTargetIconType : uint8
{
	Triangle                                 = 0,
	Square                                   = 1,
	R1                                       = 2,
	Circle                                   = 3,
	R2                                       = 4,
	L1                                       = 5,
	L2                                       = 6,
	LStickTurn                               = 7,
	Max                                      = 8,
};

// Enum EndGame.EEndMenuFieldTargetState
// NumValues: 0x0009
enum class EEndMenuFieldTargetState : uint8
{
	None                                     = 0,
	On                                       = 1,
	On2                                      = 2,
	Off                                      = 3,
	NG                                       = 4,
	Hold                                     = 5,
	Shoot                                    = 6,
	Mash                                     = 7,
	EEndMenuFieldTargetState_MAX             = 8,
};

// Enum EndGame.EEndMiniGameResultWinLose
// NumValues: 0x0005
enum class EEndMiniGameResultWinLose : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Lose                                     = 2,
	Draw                                     = 3,
	EEndMiniGameResultWinLose_MAX            = 4,
};

// Enum EndGame.EEndMiniGameResultLayout
// NumValues: 0x000E
enum class EEndMiniGameResultLayout : uint8
{
	None                                     = 0,
	ChocoboTA                                = 1,
	ShootingCoaster                          = 2,
	Piano                                    = 3,
	ShootingGame                             = 4,
	Muscle                                   = 5,
	GBike                                    = 6,
	ShootingGame_2                           = 7,
	Dolphin                                  = 8,
	BoxGame                                  = 9,
	Saboten                                  = 10,
	FrogFlap                                 = 11,
	ChocoboRing                              = 12,
	Max                                      = 13,
};

// Enum EndGame.EEndMobCrowdPlacementType
// NumValues: 0x0003
enum class EEndMobCrowdPlacementType : uint8
{
	Default                                  = 0,
	Parade                                   = 1,
	EEndMobCrowdPlacementType_MAX            = 2,
};

// Enum EndGame.EEndMobPrefabFitGroundType
// NumValues: 0x0005
enum class EEndMobPrefabFitGroundType : uint8
{
	FitGroundAndIK                           = 0,
	FitGroundOnly                            = 1,
	NoFitGround                              = 2,
	Ocean                                    = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndMobPrefabStateTrigger
// NumValues: 0x0009
enum class EEndMobPrefabStateTrigger : uint8
{
	Trigger01                                = 0,
	Trigger02                                = 1,
	Trigger03                                = 2,
	Trigger04                                = 3,
	Trigger05                                = 4,
	Trigger06                                = 5,
	Trigger07                                = 6,
	Trigger08                                = 7,
	EEndMobPrefabStateTrigger_MAX            = 8,
};

// Enum EndGame.EEndMobPrefabMessage
// NumValues: 0x0004
enum class EEndMobPrefabMessage : uint8
{
	None                                     = 0,
	RequestUnbind                            = 1,
	StateTrigger                             = 2,
	EEndMobPrefabMessage_MAX                 = 3,
};

// Enum EndGame.EEndMobMoveDirectionType
// NumValues: 0x0004
enum class EEndMobMoveDirectionType : uint8
{
	Plus                                     = 0,
	Minus                                    = 1,
	Invert                                   = 2,
	EEndMobMoveDirectionType_MAX             = 3,
};

// Enum EndGame.EMoogleAITrickType
// NumValues: 0x0005
enum class EMoogleAITrickType : uint8
{
	MAT_Barrage                              = 0,
	MAT_TimerBom                             = 1,
	MAT_Banana                               = 2,
	MAT_OTHER                                = 3,
	MAT_MAX                                  = 4,
};

// Enum EndGame.EMoogleGimmickTargetType
// NumValues: 0x0005
enum class EMoogleGimmickTargetType : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Moogle                                   = 2,
	All                                      = 3,
	Max                                      = 4,
};

// Enum EndGame.EMooglePanicTriggerType
// NumValues: 0x0003
enum class EMooglePanicTriggerType : uint8
{
	MPT_Panic                                = 0,
	MPT_Warp                                 = 1,
	MPT_MAX                                  = 2,
};

// Enum EndGame.EEndBattleNavMask
// NumValues: 0x0004
enum class EEndBattleNavMask : uint8
{
	Battle                                   = 0,
	Encount                                  = 1,
	AI                                       = 2,
	EEndBattleNavMask_MAX                    = 3,
};

// Enum EndGame.EEndIgnoreRootMotionVelocityMask
// NumValues: 0x0004
enum class EEndIgnoreRootMotionVelocityMask : uint8
{
	FieldAction                              = 0,
	Attach                                   = 1,
	MiniGame                                 = 2,
	EEndIgnoreRootMotionVelocityMask_MAX     = 3,
};

// Enum EndGame.EEndDisableMovementRotationMask
// NumValues: 0x0006
enum class EEndDisableMovementRotationMask : uint8
{
	FieldAction                              = 0,
	Attach                                   = 1,
	MiniGame                                 = 2,
	DisableMovement                          = 3,
	Cinema                                   = 4,
	EEndDisableMovementRotationMask_MAX      = 5,
};

// Enum EndGame.EEndCollisionStableCheckCategory
// NumValues: 0x0003
enum class EEndCollisionStableCheckCategory : uint8
{
	System                                   = 0,
	Vehicle                                  = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndBodySubCollisionCategory
// NumValues: 0x0003
enum class EEndBodySubCollisionCategory : uint8
{
	BehaviorMode                             = 0,
	Field                                    = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndBodySubCollisionMask
// NumValues: 0x0009
enum class EEndBodySubCollisionMask : uint8
{
	Field                                    = 0,
	Battle                                   = 1,
	AI                                       = 2,
	FieldAction                              = 3,
	ChangeAppearance                         = 4,
	ComponentField                           = 5,
	TurnBack                                 = 6,
	MiniGame                                 = 7,
	Max                                      = 8,
};

// Enum EndGame.EEndDisableMovementMask
// NumValues: 0x000A
enum class EEndDisableMovementMask : uint8
{
	Loading                                  = 0,
	WarpInLocation                           = 1,
	FastTravel                               = 2,
	Interrupt                                = 3,
	AttributeChanger                         = 4,
	WaitingCollision                         = 5,
	MiniGame                                 = 6,
	FieldManager                             = 7,
	Debug                                    = 8,
	Max                                      = 9,
};

// Enum EndGame.EEndTerminalVelocityLayer
// NumValues: 0x0005
enum class EEndTerminalVelocityLayer : uint8
{
	Battle                                   = 0,
	BattleAbility                            = 1,
	Animation                                = 2,
	Debug                                    = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndGravityLayer
// NumValues: 0x0006
enum class EEndGravityLayer : uint8
{
	Low                                      = 0,
	Jump                                     = 1,
	Animation                                = 2,
	Battle                                   = 3,
	Debug                                    = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndLayer
// NumValues: 0x000E
enum class EEndLayer : uint8
{
	EEndLayer_Normal                         = 0,
	EEndLayer_MiniGame                       = 1,
	EEndLayer_AIMove                         = 2,
	EEndLayer_AI                             = 3,
	EEndLayer_Field                          = 4,
	EEndLayer_Animation                      = 5,
	EEndLayer_Notify                         = 6,
	EEndLayer_Battle                         = 7,
	EEndLayer_BattleBurst                    = 8,
	EEndLayer_BattleSyncAction               = 9,
	EEndLayer_Cinema                         = 10,
	EEndLayer_Attach                         = 11,
	EEndLayer_Debug                          = 12,
	EEndLayer_Max                            = 13,
};

// Enum EndGame.EEndNavAreaPermission
// NumValues: 0x0003
enum class EEndNavAreaPermission : uint8
{
	WhiteList                                = 0,
	BlackList                                = 1,
	EEndNavAreaPermission_MAX                = 2,
};

// Enum EndGame.EEndMenuAreaMapLOD
// NumValues: 0x0005
enum class EEndMenuAreaMapLOD : uint8
{
	Default                                  = 0,
	High                                     = 1,
	Middle                                   = 2,
	Low                                      = 3,
	EEndMenuAreaMapLOD_MAX                   = 4,
};

// Enum EndGame.EEndNaviMapVisitGroup
// NumValues: 0x0081
enum class EEndNaviMapVisitGroup : uint32
{
	VisitGroup_None                          = 0,
	VisitGroup_001                           = 1,
	VisitGroup_002                           = 2,
	VisitGroup_003                           = 3,
	VisitGroup_004                           = 4,
	VisitGroup_005                           = 5,
	VisitGroup_006                           = 6,
	VisitGroup_007                           = 7,
	VisitGroup_008                           = 8,
	VisitGroup_009                           = 9,
	VisitGroup_010                           = 10,
	VisitGroup_011                           = 11,
	VisitGroup_012                           = 12,
	VisitGroup_013                           = 13,
	VisitGroup_014                           = 14,
	VisitGroup_015                           = 15,
	VisitGroup_016                           = 16,
	VisitGroup_017                           = 17,
	VisitGroup_018                           = 18,
	VisitGroup_019                           = 19,
	VisitGroup_020                           = 20,
	VisitGroup_021                           = 21,
	VisitGroup_022                           = 22,
	VisitGroup_023                           = 23,
	VisitGroup_024                           = 24,
	VisitGroup_025                           = 25,
	VisitGroup_026                           = 26,
	VisitGroup_027                           = 27,
	VisitGroup_028                           = 28,
	VisitGroup_029                           = 29,
	VisitGroup_030                           = 30,
	VisitGroup_031                           = 31,
	VisitGroup_032                           = 32,
	VisitGroup_033                           = 33,
	VisitGroup_034                           = 34,
	VisitGroup_035                           = 35,
	VisitGroup_036                           = 36,
	VisitGroup_037                           = 37,
	VisitGroup_038                           = 38,
	VisitGroup_039                           = 39,
	VisitGroup_040                           = 40,
	VisitGroup_041                           = 41,
	VisitGroup_042                           = 42,
	VisitGroup_043                           = 43,
	VisitGroup_044                           = 44,
	VisitGroup_045                           = 45,
	VisitGroup_046                           = 46,
	VisitGroup_047                           = 47,
	VisitGroup_048                           = 48,
	VisitGroup_049                           = 49,
	VisitGroup_050                           = 50,
	VisitGroup_051                           = 51,
	VisitGroup_052                           = 52,
	VisitGroup_053                           = 53,
	VisitGroup_054                           = 54,
	VisitGroup_055                           = 55,
	VisitGroup_056                           = 56,
	VisitGroup_057                           = 57,
	VisitGroup_058                           = 58,
	VisitGroup_059                           = 59,
	VisitGroup_060                           = 60,
	VisitGroup_061                           = 61,
	VisitGroup_062                           = 62,
	VisitGroup_063                           = 63,
	VisitGroup_064                           = 64,
	VisitGroup_065                           = 65,
	VisitGroup_066                           = 66,
	VisitGroup_067                           = 67,
	VisitGroup_068                           = 68,
	VisitGroup_069                           = 69,
	VisitGroup_070                           = 70,
	VisitGroup_071                           = 71,
	VisitGroup_072                           = 72,
	VisitGroup_073                           = 73,
	VisitGroup_074                           = 74,
	VisitGroup_075                           = 75,
	VisitGroup_076                           = 76,
	VisitGroup_077                           = 77,
	VisitGroup_078                           = 78,
	VisitGroup_079                           = 79,
	VisitGroup_080                           = 80,
	VisitGroup_081                           = 81,
	VisitGroup_082                           = 82,
	VisitGroup_083                           = 83,
	VisitGroup_084                           = 84,
	VisitGroup_085                           = 85,
	VisitGroup_086                           = 86,
	VisitGroup_087                           = 87,
	VisitGroup_088                           = 88,
	VisitGroup_089                           = 89,
	VisitGroup_090                           = 90,
	VisitGroup_091                           = 91,
	VisitGroup_092                           = 92,
	VisitGroup_093                           = 93,
	VisitGroup_094                           = 94,
	VisitGroup_095                           = 95,
	VisitGroup_096                           = 96,
	VisitGroup_097                           = 97,
	VisitGroup_098                           = 98,
	VisitGroup_099                           = 99,
	VisitGroup_100                           = 100,
	VisitGroup_101                           = 101,
	VisitGroup_102                           = 102,
	VisitGroup_103                           = 103,
	VisitGroup_104                           = 104,
	VisitGroup_105                           = 105,
	VisitGroup_106                           = 106,
	VisitGroup_107                           = 107,
	VisitGroup_108                           = 108,
	VisitGroup_109                           = 109,
	VisitGroup_110                           = 110,
	VisitGroup_111                           = 111,
	VisitGroup_112                           = 112,
	VisitGroup_113                           = 113,
	VisitGroup_114                           = 114,
	VisitGroup_115                           = 115,
	VisitGroup_116                           = 116,
	VisitGroup_117                           = 117,
	VisitGroup_118                           = 118,
	VisitGroup_119                           = 119,
	VisitGroup_120                           = 120,
	VisitGroup_121                           = 121,
	VisitGroup_122                           = 122,
	VisitGroup_123                           = 123,
	VisitGroup_124                           = 124,
	VisitGroup_125                           = 125,
	VisitGroup_126                           = 126,
	VisitGroup_127                           = 127,
	VisitGroup_Max                           = 128,
};

// Enum EndGame.EEndNaviMapOpenGroup
// NumValues: 0x0081
enum class EEndNaviMapOpenGroup : uint32
{
	OpenGroup_None                           = 0,
	OpenGroup_001                            = 1,
	OpenGroup_002                            = 2,
	OpenGroup_003                            = 3,
	OpenGroup_004                            = 4,
	OpenGroup_005                            = 5,
	OpenGroup_006                            = 6,
	OpenGroup_007                            = 7,
	OpenGroup_008                            = 8,
	OpenGroup_009                            = 9,
	OpenGroup_010                            = 10,
	OpenGroup_011                            = 11,
	OpenGroup_012                            = 12,
	OpenGroup_013                            = 13,
	OpenGroup_014                            = 14,
	OpenGroup_015                            = 15,
	OpenGroup_016                            = 16,
	OpenGroup_017                            = 17,
	OpenGroup_018                            = 18,
	OpenGroup_019                            = 19,
	OpenGroup_020                            = 20,
	OpenGroup_021                            = 21,
	OpenGroup_022                            = 22,
	OpenGroup_023                            = 23,
	OpenGroup_024                            = 24,
	OpenGroup_025                            = 25,
	OpenGroup_026                            = 26,
	OpenGroup_027                            = 27,
	OpenGroup_028                            = 28,
	OpenGroup_029                            = 29,
	OpenGroup_030                            = 30,
	OpenGroup_031                            = 31,
	OpenGroup_032                            = 32,
	OpenGroup_033                            = 33,
	OpenGroup_034                            = 34,
	OpenGroup_035                            = 35,
	OpenGroup_036                            = 36,
	OpenGroup_037                            = 37,
	OpenGroup_038                            = 38,
	OpenGroup_039                            = 39,
	OpenGroup_040                            = 40,
	OpenGroup_041                            = 41,
	OpenGroup_042                            = 42,
	OpenGroup_043                            = 43,
	OpenGroup_044                            = 44,
	OpenGroup_045                            = 45,
	OpenGroup_046                            = 46,
	OpenGroup_047                            = 47,
	OpenGroup_048                            = 48,
	OpenGroup_049                            = 49,
	OpenGroup_050                            = 50,
	OpenGroup_051                            = 51,
	OpenGroup_052                            = 52,
	OpenGroup_053                            = 53,
	OpenGroup_054                            = 54,
	OpenGroup_055                            = 55,
	OpenGroup_056                            = 56,
	OpenGroup_057                            = 57,
	OpenGroup_058                            = 58,
	OpenGroup_059                            = 59,
	OpenGroup_060                            = 60,
	OpenGroup_061                            = 61,
	OpenGroup_062                            = 62,
	OpenGroup_063                            = 63,
	OpenGroup_064                            = 64,
	OpenGroup_065                            = 65,
	OpenGroup_066                            = 66,
	OpenGroup_067                            = 67,
	OpenGroup_068                            = 68,
	OpenGroup_069                            = 69,
	OpenGroup_070                            = 70,
	OpenGroup_071                            = 71,
	OpenGroup_072                            = 72,
	OpenGroup_073                            = 73,
	OpenGroup_074                            = 74,
	OpenGroup_075                            = 75,
	OpenGroup_076                            = 76,
	OpenGroup_077                            = 77,
	OpenGroup_078                            = 78,
	OpenGroup_079                            = 79,
	OpenGroup_080                            = 80,
	OpenGroup_081                            = 81,
	OpenGroup_082                            = 82,
	OpenGroup_083                            = 83,
	OpenGroup_084                            = 84,
	OpenGroup_085                            = 85,
	OpenGroup_086                            = 86,
	OpenGroup_087                            = 87,
	OpenGroup_088                            = 88,
	OpenGroup_089                            = 89,
	OpenGroup_090                            = 90,
	OpenGroup_091                            = 91,
	OpenGroup_092                            = 92,
	OpenGroup_093                            = 93,
	OpenGroup_094                            = 94,
	OpenGroup_095                            = 95,
	OpenGroup_096                            = 96,
	OpenGroup_097                            = 97,
	OpenGroup_098                            = 98,
	OpenGroup_099                            = 99,
	OpenGroup_100                            = 100,
	OpenGroup_101                            = 101,
	OpenGroup_102                            = 102,
	OpenGroup_103                            = 103,
	OpenGroup_104                            = 104,
	OpenGroup_105                            = 105,
	OpenGroup_106                            = 106,
	OpenGroup_107                            = 107,
	OpenGroup_108                            = 108,
	OpenGroup_109                            = 109,
	OpenGroup_110                            = 110,
	OpenGroup_111                            = 111,
	OpenGroup_112                            = 112,
	OpenGroup_113                            = 113,
	OpenGroup_114                            = 114,
	OpenGroup_115                            = 115,
	OpenGroup_116                            = 116,
	OpenGroup_117                            = 117,
	OpenGroup_118                            = 118,
	OpenGroup_119                            = 119,
	OpenGroup_120                            = 120,
	OpenGroup_121                            = 121,
	OpenGroup_122                            = 122,
	OpenGroup_123                            = 123,
	OpenGroup_124                            = 124,
	OpenGroup_125                            = 125,
	OpenGroup_126                            = 126,
	OpenGroup_127                            = 127,
	OpenGroup_Max                            = 128,
};

// Enum EndGame.EEndNaviMapLayer
// NumValues: 0x0041
enum class EEndNaviMapLayer : uint32
{
	Layer_00                                 = 0,
	Layer_01                                 = 1,
	Layer_02                                 = 2,
	Layer_03                                 = 3,
	Layer_04                                 = 4,
	Layer_05                                 = 5,
	Layer_06                                 = 6,
	Layer_07                                 = 7,
	Layer_08                                 = 8,
	Layer_09                                 = 9,
	Layer_10                                 = 10,
	Layer_11                                 = 11,
	Layer_12                                 = 12,
	Layer_13                                 = 13,
	Layer_14                                 = 14,
	Layer_15                                 = 15,
	Layer_16                                 = 16,
	Layer_17                                 = 17,
	Layer_18                                 = 18,
	Layer_19                                 = 19,
	Layer_20                                 = 20,
	Layer_21                                 = 21,
	Layer_22                                 = 22,
	Layer_23                                 = 23,
	Layer_24                                 = 24,
	Layer_25                                 = 25,
	Layer_26                                 = 26,
	Layer_27                                 = 27,
	Layer_28                                 = 28,
	Layer_29                                 = 29,
	Layer_30                                 = 30,
	Layer_31                                 = 31,
	Layer_32                                 = 32,
	Layer_33                                 = 33,
	Layer_34                                 = 34,
	Layer_35                                 = 35,
	Layer_36                                 = 36,
	Layer_37                                 = 37,
	Layer_38                                 = 38,
	Layer_39                                 = 39,
	Layer_40                                 = 40,
	Layer_41                                 = 41,
	Layer_42                                 = 42,
	Layer_43                                 = 43,
	Layer_44                                 = 44,
	Layer_45                                 = 45,
	Layer_46                                 = 46,
	Layer_47                                 = 47,
	Layer_48                                 = 48,
	Layer_49                                 = 49,
	Layer_50                                 = 50,
	Layer_51                                 = 51,
	Layer_52                                 = 52,
	Layer_53                                 = 53,
	Layer_54                                 = 54,
	Layer_55                                 = 55,
	Layer_56                                 = 56,
	Layer_57                                 = 57,
	Layer_58                                 = 58,
	Layer_59                                 = 59,
	Layer_60                                 = 60,
	Layer_61                                 = 61,
	Layer_62                                 = 62,
	Layer_63                                 = 63,
	Layer_Max                                = 64,
};

// Enum EndGame.EEndSceneNaviMapState
// NumValues: 0x0004
enum class EEndSceneNaviMapState : uint32
{
	Unopened                                 = 0,
	Opened                                   = 1,
	Visited                                  = 2,
	EEndSceneNaviMapState_MAX                = 3,
};

// Enum EndGame.EEndNaviMapRenderMode
// NumValues: 0x0005
enum class EEndNaviMapRenderMode : uint8
{
	Unlit                                    = 0,
	Lit                                      = 1,
	LitNoShadow                              = 2,
	AllAOVs                                  = 3,
	EEndNaviMapRenderMode_MAX                = 4,
};

// Enum EndGame.EEndNaviMapBackgroundMode
// NumValues: 0x0009
enum class EEndNaviMapBackgroundMode : uint8
{
	None                                     = 0,
	KeepExisting                             = 1,
	SceneCapture                             = 2,
	SceneCaptureTown                         = 3,
	SceneCaptureWaterMask                    = 4,
	SceneCaptureWaterMaskForceRiver          = 5,
	Silhouette                               = 6,
	SilhouetteNavMesh                        = 7,
	EEndNaviMapBackgroundMode_MAX            = 8,
};

// Enum EndGame.EEndNaviMapGenerateMode
// NumValues: 0x000D
enum class EEndNaviMapGenerateMode : uint8
{
	None                                     = 0,
	KeepExisting                             = 1,
	NavMesh                                  = 2,
	NavMeshLocationMap                       = 3,
	StaticMeshTerrain                        = 4,
	SceneCapture                             = 5,
	SceneCaptureCompositeSource              = 6,
	SceneCaptureMasked                       = 7,
	SceneCaptureTown                         = 8,
	SceneCaptureWaterMask                    = 9,
	WaterVolume                              = 10,
	DebugCanvas                              = 11,
	EEndNaviMapGenerateMode_MAX              = 12,
};

// Enum EndGame.EEndNaviMapExportTextureMode
// NumValues: 0x0007
enum class EEndNaviMapExportTextureMode : uint8
{
	Default                                  = 0,
	Export                                   = 1,
	FarLand                                  = 2,
	Retouch                                  = 3,
	Web                                      = 4,
	WebNavMesh                               = 5,
	EEndNaviMapExportTextureMode_MAX         = 6,
};

// Enum EndGame.EEndNaviMapSplitNum
// NumValues: 0x0006
enum class EEndNaviMapSplitNum : uint32
{
	Split_None                               = 1,
	Split_4                                  = 4,
	Split_16                                 = 16,
	Split_64                                 = 64,
	Split_MaxCsv                             = 16,
	Split_MAX                                = 65,
};

// Enum EndGame.EEndNaviMapUniqueIndexOffset
// NumValues: 0x0009
enum class EEndNaviMapUniqueIndexOffset : uint32
{
	Offset_0                                 = 0,
	Offset_1                                 = 1,
	Offset_2                                 = 2,
	Offset_3                                 = 3,
	Offset_4                                 = 4,
	Offset_5                                 = 5,
	Offset_6                                 = 6,
	Offset_7                                 = 7,
	Offset_Max                               = 8,
};

// Enum EndGame.EEndNavLayerType
// NumValues: 0x0009
enum class EEndNavLayerType : uint8
{
	Normal                                   = 0,
	Medium                                   = 1,
	OneLarge                                 = 2,
	TwoLarge                                 = 3,
	ThreeLarge                               = 4,
	FourLarge                                = 5,
	BattleNormal                             = 6,
	LayerMax                                 = 7,
	EEndNavLayerType_MAX                     = 8,
};

// Enum EndGame.EEndFieldCameraInDoorPriorityType
// NumValues: 0x0003
enum class EEndFieldCameraInDoorPriorityType : uint8
{
	Town                                     = 0,
	InDoor                                   = 1,
	EEndFieldCameraInDoorPriorityType_MAX    = 2,
};

// Enum EndGame.EEndFieldCameraInDoorType
// NumValues: 0x0005
enum class EEndFieldCameraInDoorType : uint8
{
	Town                                     = 0,
	Narrow                                   = 1,
	Normal                                   = 2,
	Override                                 = 3,
	EEndFieldCameraInDoorType_MAX            = 4,
};

// Enum EndGame.EEndModifierType
// NumValues: 0x000C
enum class EEndModifierType : uint8
{
	COVER_TYPE                               = 0,
	BATTLEAREA_TYPE                          = 1,
	FIELDACTION_TYPE                         = 2,
	SWITCHING_TYPE                           = 3,
	PATHWAY_TYPE                             = 4,
	INDOOR_TYPE                              = 5,
	ADDATTRIBUTE_TYPE                        = 6,
	FOOTBGM_TYPE                             = 7,
	ENVIRONMENT_TYPE                         = 8,
	MOB_TYPE                                 = 9,
	HUB_TYPE                                 = 10,
	EEndModifierType_MAX                     = 11,
};

// Enum EndGame.EModifierVolumeCoverPostureType
// NumValues: 0x0004
enum class EModifierVolumeCoverPostureType : uint8
{
	Stand                                    = 0,
	Crouch                                   = 1,
	Sit                                      = 2,
	EModifierVolumeCoverPostureType_MAX      = 3,
};

// Enum EndGame.EModifierVolumeType
// NumValues: 0x0013
enum class EModifierVolumeType : uint8
{
	CoverPc                                  = 0,
	CoverEnemy                               = 1,
	Cover                                    = 2,
	WhiteList                                = 3,
	BlackList                                = 4,
	Defence                                  = 5,
	Path                                     = 6,
	AirPoint                                 = 7,
	Chase                                    = 8,
	Wall                                     = 9,
	Ceil                                     = 10,
	Water                                    = 11,
	TargetLocation                           = 12,
	Decoy                                    = 13,
	PopPoint                                 = 14,
	Overlap                                  = 15,
	FlyThrough                               = 16,
	Ignore                                   = 17,
	EModifierVolumeType_MAX                  = 18,
};

// Enum EndGame.ECollisionProfileExtraOption
// NumValues: 0x0003
enum class ECollisionProfileExtraOption : uint8
{
	Default                                  = 0,
	IgnoreVehicle                            = 1,
	Max                                      = 2,
};

// Enum EndGame.ECollisionAndNavProfileType
// NumValues: 0x0004
enum class ECollisionAndNavProfileType : uint8
{
	Wall                                     = 0,
	Speacial_Wall                            = 1,
	NoCollision                              = 2,
	Max                                      = 3,
};

// Enum EndGame.ECollisionProfileType
// NumValues: 0x000A
enum class ECollisionProfileType : uint8
{
	Wall                                     = 0,
	Pc_Wall                                  = 1,
	Party_Wall                               = 2,
	NPC_Wall                                 = 3,
	Enemy_Wall                               = 4,
	NPCEnemy_Wall                            = 5,
	PC_Party_Wall                            = 6,
	Speacial_Wall                            = 7,
	NoCollision                              = 8,
	Max                                      = 9,
};

// Enum EndGame.EVfxVolumetricFogProbeParameterFlags
// NumValues: 0x0009
enum class EVfxVolumetricFogProbeParameterFlags : uint32
{
	None                                     = 0,
	RadialBasisX                             = 1,
	RadialBasisY                             = 2,
	RadialBasisZ                             = 4,
	ExtentCornerX                            = 8,
	ExtentCornerY                            = 16,
	ExtentCornerZ                            = 32,
	BoxShape                                 = 268435456,
	EVfxVolumetricFogProbeParameterFlags_MAX = 268435457,
};

// Enum EndGame.EVfxMaterialParameter_MeshFlags
// NumValues: 0x000E
enum class EVfxMaterialParameter_MeshFlags : uint64
{
	None                                     = 0,
	Mesh_00                                  = 1,
	Mesh_01                                  = 2,
	Mesh_02                                  = 4,
	Mesh_03                                  = 8,
	Mesh_04                                  = 16,
	Mesh_05                                  = 32,
	Mesh_06                                  = 64,
	Mesh_07                                  = 128,
	Mesh_08                                  = 256,
	Mesh_09                                  = 512,
	Mesh_10                                  = 1024,
	Mesh_All                                 = 18446744073709551615,
	EVfxMaterialParameter_MAX                = 1025,
};

// Enum EndGame.EVfxMaterialParameterLight_Flags
// NumValues: 0x0004
enum class EVfxMaterialParameterLight_Flags : uint8
{
	None                                     = 0,
	ExposureCondition                        = 1,
	Default                                  = 1,
	EVfxMaterialParameterLight_MAX           = 2,
};

// Enum EndGame.EVfxMaterialParameterLight_ColorTemperatureWhitePoint
// NumValues: 0x0003
enum class EVfxMaterialParameterLight_ColorTemperatureWhitePoint : uint8
{
	D65                                      = 0,
	D50                                      = 1,
	EVfxMaterialParameterLight_MAX           = 2,
};

// Enum EndGame.EVfxMaterialParameterCommandMethod
// NumValues: 0x0005
enum class EVfxMaterialParameterCommandMethod : uint8
{
	MPCM_None                                = 0,
	MPCM_Set                                 = 1,
	MPCM_Multiply                            = 2,
	MPCM_Add                                 = 3,
	MPCM_MAX                                 = 4,
};

// Enum EndGame.EVfxActorMaterialParameterKind
// NumValues: 0x0008
enum class EVfxActorMaterialParameterKind : uint8
{
	Coverage                                 = 0,
	Light                                    = 1,
	ExtraPixelCoordinate                     = 2,
	ExtraNormalizedCoordinate                = 3,
	AnimateTime                              = 4,
	GenericVector                            = 5,
	TransitionCoverage                       = 6,
	EVfxActorMaterialParameterKind_MAX       = 7,
};

// Enum EndGame.EEndFootAttributeTypes_Flags2
// NumValues: 0x0008
enum class EEndFootAttributeTypes_Flags2 : uint8
{
	None                                     = 0,
	Water_SandSwamp                          = 1,
	Water_Default_Shallow                    = 2,
	Water_Swamp_Shallow                      = 4,
	Water_River_Shallow                      = 8,
	Water_Ocean_Shallow                      = 16,
	Water_SandSwamp_Shallow                  = 32,
	EEndFootAttributeTypes_MAX               = 33,
};

// Enum EndGame.EEndFootAttributeTypes_Flags1
// NumValues: 0x0021
enum class EEndFootAttributeTypes_Flags1 : uint64
{
	None                                     = 0,
	Metal_Parts                              = 2,
	Metal_Floor                              = 4,
	Metal_Ami                                = 8,
	Con_Clean                                = 16,
	Con_Sandmix                              = 32,
	Con_Water                                = 64,
	Wood_Floor                               = 128,
	Wood_Parts                               = 256,
	Wood_Old                                 = 512,
	Soil                                     = 1024,
	Stone                                    = 2048,
	Gravel                                   = 4096,
	Grass                                    = 8192,
	Carpet                                   = 16384,
	Glass                                    = 32768,
	Sand                                     = 65536,
	Crap_Con                                 = 131072,
	Crap_Pla                                 = 262144,
	Crap_Tra                                 = 524288,
	Woodchip                                 = 1048576,
	Water_Default                            = 2097152,
	Water_Swamp                              = 4194304,
	Rubber                                   = 8388608,
	Metal_Totan                              = 16777216,
	Metal_Cavity                             = 33554432,
	Metal_Frame                              = 67108864,
	Wood_Piller                              = 134217728,
	Tarp                                     = 268435456,
	Slimy                                    = 536870912,
	Water_River                              = 1073741824,
	Water_Ocean                              = 18446744071562067968,
	EEndFootAttributeTypes_MAX               = 1073741825,
};

// Enum EndGame.EVfxVector2DLockedAxes
// NumValues: 0x0003
enum class EVfxVector2DLockedAxes : uint8
{
	None                                     = 0,
	XY                                       = 1,
	EVfxVector2DLockedAxes_MAX               = 2,
};

// Enum EndGame.EVfxVectorLockedAxes
// NumValues: 0x0006
enum class EVfxVectorLockedAxes : uint8
{
	None                                     = 0,
	XYZ                                      = 1,
	XY                                       = 2,
	XZ                                       = 3,
	YZ                                       = 4,
	EVfxVectorLockedAxes_MAX                 = 5,
};

// Enum EndGame.EVfxRaiseTriggerType
// NumValues: 0x0003
enum class EVfxRaiseTriggerType : uint8
{
	Time                                     = 0,
	KillParticleCount                        = 1,
	EVfxRaiseTriggerType_MAX                 = 2,
};

// Enum EndGame.EVfxLightParameterFlags
// NumValues: 0x0005
enum class EVfxLightParameterFlags : uint8
{
	None                                     = 0,
	RenderVolumetricFogOnly                  = 1,
	BeamLight                                = 2,
	DisableLowPerformance                    = 4,
	EVfxLightParameterFlags_MAX              = 5,
};

// Enum EndGame.EVfxPostProcessParameter_LensFilterFlags
// NumValues: 0x0009
enum class EVfxPostProcessParameter_LensFilterFlags : uint16
{
	None                                     = 0,
	EnabledActivated                         = 1,
	Activated                                = 2,
	EnabledNeutralDensity                    = 4,
	EnabledColorModulation                   = 16,
	EnabledNormalizedTint                    = 64,
	EnabledPhaseModulation                   = 256,
	Default                                  = 7,
	EVfxPostProcessParameter_MAX             = 257,
};

// Enum EndGame.EVfxPostProcessParameter_ChromaticAberrationFlags
// NumValues: 0x0006
enum class EVfxPostProcessParameter_ChromaticAberrationFlags : uint8
{
	None                                     = 0,
	EnabledActivated                         = 1,
	Activated                                = 2,
	EnabledVariance                          = 4,
	Default                                  = 7,
	EVfxPostProcessParameter_MAX             = 8,
};

// Enum EndGame.EVfxPostProcessParameter_SensorNoiseFlags
// NumValues: 0x000B
enum class EVfxPostProcessParameter_SensorNoiseFlags : uint16
{
	None                                     = 0,
	EnabledActivated                         = 1,
	Activated                                = 2,
	EnabledVariance                          = 4,
	EnabledMonochrome                        = 16,
	Monochrome                               = 32,
	EnabledExposureCondition                 = 64,
	ExposureCondition                        = 128,
	EnabledFraction                          = 256,
	Default                                  = 199,
	EVfxPostProcessParameter_MAX             = 257,
};

// Enum EndGame.EVfxTransformContextParameterFlags
// NumValues: 0x0004
enum class EVfxTransformContextParameterFlags : uint8
{
	None                                     = 0,
	Blending                                 = 1,
	AnimateOnce                              = 2,
	EVfxTransformContextParameterFlags_MAX   = 3,
};

// Enum EndGame.EForceEnableOverlapMask
// NumValues: 0x0003
enum class EForceEnableOverlapMask : uint8
{
	Default                                  = 0,
	Vehicle                                  = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndEffectEventKind
// NumValues: 0x0004
enum class EEndEffectEventKind : uint8
{
	EE_EK_Begin                              = 0,
	EE_EK_End                                = 1,
	EE_EK_LoopOff                            = 2,
	EE_EK_MAX                                = 3,
};

// Enum EndGame.EVfxEffectLightKind
// NumValues: 0x0004
enum class EVfxEffectLightKind : uint32
{
	Ambiguous                                = 0,
	Punctual                                 = 1,
	Max                                      = 2,
	Unpunctual                               = 0,
};

// Enum EndGame.EEndEffectStaticMeshSelectKind
// NumValues: 0x0007
enum class EEndEffectStaticMeshSelectKind : uint8
{
	Random                                   = 0,
	Order                                    = 1,
	UserSet                                  = 2,
	RandomUserSet                            = 3,
	Surface_Random                           = 4,
	Surface_Order                            = 5,
	EEndEffectStaticMeshSelectKind_MAX       = 6,
};

// Enum EndGame.EEndWeaponUpgradeEffectsKind
// NumValues: 0x000A
enum class EEndWeaponUpgradeEffectsKind : uint8
{
	None                                     = 0,
	BeginMenu                                = 1,
	FadeInFadeOut                            = 2,
	SpawnCore                                = 3,
	ActivationSkill                          = 4,
	Root                                     = 5,
	StartMenu                                = 6,
	EndMenu                                  = 7,
	Cursor                                   = 8,
	Max                                      = 9,
};

// Enum EndGame.EEndWeaponUpgradeStageEffectsStatus
// NumValues: 0x0008
enum class EEndWeaponUpgradeStageEffectsStatus : uint8
{
	None                                     = 0,
	PlayStage                                = 1,
	WaitCameraMove                           = 2,
	WaitSpawn                                = 3,
	WaitActive                               = 4,
	WaitStage                                = 5,
	Done                                     = 6,
	EEndWeaponUpgradeStageEffectsStatus_MAX  = 7,
};

// Enum EndGame.EEndWeaponUpgradeKind
// NumValues: 0x0008
enum class EEndWeaponUpgradeKind : uint8
{
	UnKnown                                  = 255,
	Core                                     = 0,
	Skill                                    = 1,
	Upgrade                                  = 2,
	MaxUpgrade                               = 1,
	MaxMainCoreResource                      = 4,
	MaxSubCoreResource                       = 4,
	EEndWeaponUpgradeKind_MAX                = 256,
};

// Enum EndGame.EEndPartyCoordinatorTaskSequence
// NumValues: 0x000E
enum class EEndPartyCoordinatorTaskSequence : uint8
{
	None                                     = 0,
	Initialize                               = 1,
	StreamingLoop                            = 2,
	ActorCreate                              = 3,
	ActorCreate_WaitLoad                     = 4,
	ActorCreate_WaitCreate                   = 5,
	ActorDestroy                             = 6,
	ActorDestroy_WaitDestroy                 = 7,
	ActorDestroy_WaitUnload                  = 8,
	SwitchSpec                               = 9,
	SwitchSpec_WaitLoad                      = 10,
	SwitchSpec_WaitUnload                    = 11,
	Finish                                   = 12,
	EEndPartyCoordinatorTaskSequence_MAX     = 13,
};

// Enum EndGame.EEndPartyCoordinatorSequence
// NumValues: 0x0006
enum class EEndPartyCoordinatorSequence : uint8
{
	None                                     = 0,
	Initialize                               = 1,
	CheckRequest                             = 2,
	WaitTask                                 = 3,
	Finish                                   = 4,
	EEndPartyCoordinatorSequence_MAX         = 5,
};

// Enum EndGame.EPartyVehicleRideStatus
// NumValues: 0x0005
enum class EPartyVehicleRideStatus : uint8
{
	GetOffStable                             = 0,
	RideOnRunning                            = 1,
	RideOnStable                             = 2,
	GetOffRunning                            = 3,
	EPartyVehicleRideStatus_MAX              = 4,
};

// Enum EndGame.EPlayerActorRefreshState
// NumValues: 0x0006
enum class EPlayerActorRefreshState : uint8
{
	EPlayerActorRefreshState_NONE            = 0,
	EPlayerActorRefreshState_BUILD           = 1,
	EPlayerActorRefreshState_REBUILD         = 2,
	EPlayerActorRefreshState_DELETE          = 3,
	EPlayerActorRefreshState_SWITCHSPEC      = 4,
	EPlayerActorRefreshState_MAX             = 5,
};

// Enum EndGame.EPlayerStreamStep
// NumValues: 0x0004
enum class EPlayerStreamStep : uint8
{
	EPlayerStreamStep_WAIT                   = 0,
	EPlayerStreamStep_REQUEST                = 1,
	EPlayerStreamStep_STREAMING              = 2,
	EPlayerStreamStep_MAX                    = 3,
};

// Enum EndGame.EPartyLeaderType
// NumValues: 0x0003
enum class EPartyLeaderType : uint8
{
	EPartyLeaderType_Current                 = 0,
	EPartyLeaderType_ForceField              = 1,
	EPartyLeaderType_MAX                     = 2,
};

// Enum EndGame.EEndFootAttributeTypes
// NumValues: 0x0027
enum class EEndFootAttributeTypes : uint32
{
	None                                     = 0,
	Metal_Parts                              = 1,
	Metal_Floor                              = 2,
	Metal_Ami                                = 3,
	Con_Clean                                = 4,
	Con_Sandmix                              = 5,
	Con_Water                                = 6,
	Wood_Floor                               = 7,
	Wood_Parts                               = 8,
	Wood_Old                                 = 9,
	Soil                                     = 10,
	Stone                                    = 11,
	Gravel                                   = 12,
	Grass                                    = 13,
	Carpet                                   = 14,
	Glass                                    = 15,
	Sand                                     = 16,
	Crap_Con                                 = 17,
	Crap_Pla                                 = 18,
	Crap_Tra                                 = 19,
	Woodchip                                 = 20,
	Water_Default                            = 21,
	Water_Swamp                              = 22,
	Rubber                                   = 23,
	Metal_Totan                              = 24,
	Metal_Cavity                             = 25,
	Metal_Frame                              = 26,
	Wood_Piller                              = 27,
	Tarp                                     = 28,
	Slimy                                    = 29,
	Water_River                              = 30,
	Water_Ocean                              = 31,
	Water_SandSwamp                          = 32,
	Water_Default_Shallow                    = 33,
	Water_Swamp_Shallow                      = 34,
	Water_River_Shallow                      = 35,
	Water_Ocean_Shallow                      = 36,
	Water_SandSwamp_Shallow                  = 37,
	MAX                                      = 38,
};

// Enum EndGame.EEndCollisionChannel
// NumValues: 0x000F
enum class EEndCollisionChannel : uint8
{
	EEndCollisionChannel_WorldStatic         = 0,
	EEndCollisionChannel_WorldDynamic        = 1,
	EEndCollisionChannel_Pawn                = 2,
	EEndCollisionChannel_Visibility          = 3,
	EEndCollisionChannel_Camera              = 4,
	EEndCollisionChannel_PhysicsBody         = 5,
	EEndCollisionChannel_Vehicle             = 6,
	EEndCollisionChannel_Destructible        = 7,
	EEndCollisionChannel_Player              = 8,
	EEndCollisionChannel_Terrain             = 9,
	EEndCollisionChannel_BattleDamageHit     = 10,
	EEndCollisionChannel_Ragdoll             = 11,
	EEndCollisionChannel_Common_Trigger      = 12,
	EEndCollisionChannel_PhysicsBlock        = 13,
	EEndCollisionChannel_MAX                 = 14,
};

// Enum EndGame.EDisableSimulatePhysicsMask
// NumValues: 0x000C
enum class EDisableSimulatePhysicsMask : uint8
{
	SP_Init                                  = 0,
	SP_System                                = 1,
	SP_Manager                               = 2,
	SP_Battle                                = 3,
	SP_Field                                 = 4,
	SP_MiniGame                              = 5,
	SP_Self                                  = 6,
	SP_Streaming                             = 7,
	SP_Attach                                = 8,
	SP_Invalid                               = 9,
	SP_Debug                                 = 10,
	SP_Max                                   = 11,
};

// Enum EndGame.EEndPhysicsStaticMeshCollisionPresetType
// NumValues: 0x0003
enum class EEndPhysicsStaticMeshCollisionPresetType : uint8
{
	AffectCharacterMove                      = 0,
	NotAffectCharacterMove                   = 1,
	EEndPhysicsStaticMeshCollisionPresetType_MAX = 2,
};

// Enum EndGame.EEndPhysicsStaticMeshResponse
// NumValues: 0x0003
enum class EEndPhysicsStaticMeshResponse : uint8
{
	Default                                  = 0,
	AttackOnly                               = 1,
	EEndPhysicsStaticMeshResponse_MAX        = 2,
};

// Enum EndGame.EEndPlayerLeaderActionFlag
// NumValues: 0x0014
enum class EEndPlayerLeaderActionFlag : uint8
{
	IsInJumpAir                              = 0,
	IsJumpUp                                 = 1,
	IsJumpPosIsFalling                       = 2,
	Falling                                  = 3,
	Swimming                                 = 4,
	NaviBlockCheckIsSoft                     = 5,
	FieldDodge                               = 6,
	FieldDodgeToMove                         = 7,
	FieldDodgeToFrontJump                    = 8,
	FieldTargetJump                          = 9,
	ForceUpdateJumpArrivalPoint              = 10,
	IsInWallRunningVolume                    = 11,
	CanAutoClimbingCatch                     = 12,
	CanAutoClimbingCatchWithLineCheck        = 13,
	DeactiveParamFrame                       = 14,
	PollingFlagStart                         = 15,
	PollingFlagCanWallRunning                = 16,
	PollingFlagDisableNaturalAction          = 17,
	PollingFlagEnd                           = 18,
	Max                                      = 19,
};

// Enum EndGame.EPlayerActionDebugFlag
// NumValues: 0x001B
enum class EPlayerActionDebugFlag : uint8
{
	CharaBaseSameLeaderActionTest            = 0,
	UseCalculatedParkour                     = 1,
	ForceUseRuntimeParkour                   = 2,
	NoRuntimeParkourCache                    = 3,
	NoAddtiveAroundParkourEdge               = 4,
	ForceInMemoArea                          = 5,
	ForceInSercretEnemy                      = 6,
	DisableOnlyNaviMove                      = 7,
	ForceWallRunning                         = 8,
	ForceWallRunningInVolume                 = 9,
	DisableNPCToMove                         = 10,
	LadderNoAlwaysAttachMode                 = 11,
	DisableDualQuatAttach                    = 12,
	AllPartySameFAction                      = 13,
	DisableParkour                           = 14,
	WalkwayReverseAIWithinFollow             = 15,
	ForceFAMoveLimitLeft                     = 16,
	ForceFAMoveLimitRight                    = 17,
	ForceFAMoveLimitUp                       = 18,
	ForceFAMoveLimitDown                     = 19,
	__WallRunInputTestDiable                 = 20,
	__WallRunInputTestView                   = 21,
	__TEST_NO_SYNC_SHOOTING                  = 22,
	UseNewEdgeSearch                         = 23,
	UseOldEdgeSearch                         = 24,
	ForceNewFlyMode                          = 25,
	Max                                      = 26,
};

// Enum EndGame.EPlayerActionDebugPage
// NumValues: 0x0010
enum class EPlayerActionDebugPage : uint8
{
	None                                     = 0,
	DebugMove                                = 1,
	JumpArrivalPoint                         = 2,
	ClimbingPoint                            = 3,
	NaviEdgeStep                             = 4,
	Door                                     = 5,
	Movement                                 = 6,
	Trace                                    = 7,
	State                                    = 8,
	FieldActors                              = 9,
	ShootingTarget                           = 10,
	TriggerEffect                            = 11,
	DeadZoneCamera                           = 12,
	NaviLink                                 = 13,
	ComponentField                           = 14,
	Max                                      = 15,
};

// Enum EndGame.EEndFieldNaviEdgeStopReactionType
// NumValues: 0x0008
enum class EEndFieldNaviEdgeStopReactionType : uint32
{
	None                                     = 0,
	DownStepBig                              = 1,
	DownStepHuge                             = 2,
	DownNoStepHigh                           = 3,
	AutoFall                                 = 4,
	AutoJump                                 = 5,
	AutoSkip                                 = 6,
	EEndFieldNaviEdgeStopReactionType_MAX    = 7,
};

// Enum EndGame.EEndCollisionFilterMask
// NumValues: 0x0004
enum class EEndCollisionFilterMask : uint8
{
	EEndCollisionFilterMask_None             = 0,
	EEndCollisionFilterMask_PhysicsStaticMesh = 1,
	EEndCollisionFilterMask_SimulatingPhysics = 2,
	EEndCollisionFilterMask_MAX              = 3,
};

// Enum EndGame.EEndDitherFadeSettingFlag
// NumValues: 0x0005
enum class EEndDitherFadeSettingFlag : uint8
{
	None                                     = 0,
	DisableNearFade                          = 1,
	EnableNearFadeOnBattle                   = 2,
	UseEnvironmentMeshSetting                = 4,
	EEndDitherFadeSettingFlag_MAX            = 5,
};

// Enum EndGame.EEndFieldMovementSettingFlag
// NumValues: 0x0009
enum class EEndFieldMovementSettingFlag : uint8
{
	EEndFieldMovementSettingFlag_None        = 0,
	EEndFieldMovementSettingFlag_DisableOnlyNaviMove = 1,
	EEndFieldMovementSettingFlag_DisableRestrictWaterNavi = 2,
	EEndFieldMovementSettingFlag_UpliftFloorAutoParkour = 4,
	EEndFieldMovementSettingFlag_DisableBumpFromSelfBump = 8,
	EEndFieldMovementSettingFlag_DisableBumpFromOtherBump = 16,
	EEndFieldMovementSettingFlag_FenceBlockToFenceJump = 32,
	EEndFieldMovementSettingFlag_JumpBlockInvalidArea = 64,
	EEndFieldMovementSettingFlag_MAX         = 65,
};

// Enum EndGame.EEndCameraCustomSuspensionType
// NumValues: 0x0008
enum class EEndCameraCustomSuspensionType : uint8
{
	EEndCameraCustomSuspension_Default       = 0,
	EEndCameraCustomSuspension_SoftLevel1    = 1,
	EEndCameraCustomSuspension_SoftLevel2    = 2,
	EEndCameraCustomSuspension_SoftLevel3    = 3,
	EEndCameraCustomSuspension_SlopeSoftLevel1 = 4,
	EEndCameraCustomSuspension_SlopeSoftLevel2 = 5,
	EEndCameraCustomSuspension_SlopeSoftLevel3 = 6,
	EEndCameraCustomSuspension_Max           = 7,
};

// Enum EndGame.EEndWaterType
// NumValues: 0x0006
enum class EEndWaterType : uint8
{
	Default                                  = 0,
	Swamp                                    = 1,
	River                                    = 2,
	Ocean                                    = 3,
	SandSwamp                                = 4,
	EEndWaterType_MAX                        = 5,
};

// Enum EndGame.EBattleEntryType
// NumValues: 0x0005
enum class EBattleEntryType : uint8
{
	eNone                                    = 0,
	eSpecial                                 = 1,
	eWall                                    = 2,
	eAerial                                  = 3,
	EBattleEntryType_MAX                     = 4,
};

// Enum EndGame.EEndDashType
// NumValues: 0x0004
enum class EEndDashType : uint8
{
	Enable                                   = 0,
	Disable                                  = 1,
	SpecificMoveDash                         = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndSpecificMoveTypeLayer
// NumValues: 0x000B
enum class EEndSpecificMoveTypeLayer : uint8
{
	Debug                                    = 0,
	StateChange                              = 1,
	ActionPlayerMoveType                     = 2,
	ActionPlayerAfterGlowMoveType            = 3,
	ActionRestrictDashWhenActorsNear         = 4,
	ActionAutoWalkType                       = 5,
	ActionTurnBack                           = 6,
	LocationVolume                           = 7,
	RoomBox                                  = 8,
	EnvAttribute                             = 9,
	Max                                      = 10,
};

// Enum EndGame.EEndMoveMode
// NumValues: 0x0005
enum class EEndMoveMode : uint8
{
	EEndMoveMode_Default                     = 0,
	EEndMoveMode_None                        = 1,
	EEndMoveMode_Flying                      = 2,
	EEndMoveMode_FlyingAsWalk                = 3,
	EEndMoveMode_Max                         = 4,
};

// Enum EndGame.EEndMoveType
// NumValues: 0x0005
enum class EEndMoveType : uint8
{
	EndMoveType1                             = 0,
	EndMoveType2                             = 1,
	EndMoveType3                             = 2,
	EndMoveType4                             = 3,
	Max                                      = 4,
};

// Enum EndGame.EActorMoveMode
// NumValues: 0x0005
enum class EActorMoveMode : uint8
{
	Ground                                   = 0,
	Fly                                      = 1,
	Other                                    = 2,
	None                                     = 3,
	EActorMoveMode_MAX                       = 4,
};

// Enum EndGame.EScooterColor
// NumValues: 0x0004
enum class EScooterColor : uint8
{
	RedScooter                               = 0,
	BlueScooter                              = 1,
	YellowScooter                            = 2,
	EScooterColor_MAX                        = 3,
};

// Enum EndGame.ETargetResultMotionType
// NumValues: 0x0003
enum class ETargetResultMotionType : uint8
{
	Joy1                                     = 0,
	Joy2                                     = 1,
	MAX                                      = 2,
};

// Enum EndGame.ESimpleCameraCollisionProfileType
// NumValues: 0x0002
enum class ESimpleCameraCollisionProfileType : uint8
{
	GameCameraWall                           = 0,
	ESimpleCameraCollisionProfileType_MAX    = 1,
};

// Enum EndGame.EEndVoiceEffectType
// NumValues: 0x0004
enum class EEndVoiceEffectType : uint8
{
	None                                     = 0,
	COM                                      = 1,
	Mask                                     = 2,
	EEndVoiceEffectType_MAX                  = 3,
};

// Enum EndGame.EEndSoundLayer
// NumValues: 0x0028
enum class EEndSoundLayer : uint8
{
	Pause_ON                                 = 0,
	Pause_OFF                                = 1,
	Skip_Cut                                 = 2,
	Reset_Game                               = 3,
	Movie_IN                                 = 4,
	Movie_OUT                                = 5,
	Menu_Open                                = 6,
	Menu_Close                               = 7,
	Title_IN                                 = 8,
	Title_OUT                                = 9,
	JBMusic_FocusMode_ON                     = 10,
	JBMusic_FocusMode_OFF                    = 11,
	WaitMode_ON                              = 12,
	WaitMode_OFF                             = 13,
	Game_Blackout_IN                         = 14,
	Game_Blackout_OUT                        = 15,
	Level_Blackout_IN                        = 16,
	Level_Blackout_OUT                       = 17,
	CutScene_IN                              = 18,
	CutScene_OUT                             = 19,
	MiniGameMenu_IN                          = 20,
	MiniGameMenu_OUT                         = 21,
	PV_IN                                    = 22,
	PV_OUT                                   = 23,
	PlayerWarp_IN                            = 24,
	PlayerWarp_OUT                           = 25,
	HitSlow_ON                               = 26,
	HitSlow_OFF                              = 27,
	MiniGame_BuggyShooting_Start             = 28,
	MiniGame_BuggyShooting_End               = 29,
	MiniGame_TorokkoShooting_Start           = 30,
	MiniGame_TorokkoShooting_End             = 31,
	MiniGame_Piano_Start                     = 32,
	MiniGame_Piano_End                       = 33,
	TutorialWindow_Open                      = 34,
	TutorialWindow_Close                     = 35,
	FastForward_Start                        = 36,
	FastForward_End                          = 37,
	_MAX                                     = 38,
	EEndSoundLayer_MAX                       = 39,
};

// Enum EndGame.EEndStreamingSwitchType
// NumValues: 0x0006
enum class EEndStreamingSwitchType : uint8
{
	Simple                                   = 0,
	Seamless                                 = 1,
	Preload                                  = 2,
	SwitchToPreloaded                        = 3,
	ForceSwitch                              = 4,
	EEndStreamingSwitchType_MAX              = 5,
};

// Enum EndGame.EEndStreamLevelCollisionType
// NumValues: 0x0004
enum class EEndStreamLevelCollisionType : uint32
{
	Invalid                                  = 0,
	Capsule                                  = 1,
	Box                                      = 2,
	EEndStreamLevelCollisionType_MAX         = 3,
};

// Enum EndGame.EEndStreamingVolumeType
// NumValues: 0x0002
enum class EEndStreamingVolumeType : uint8
{
	Default                                  = 0,
	EEndStreamingVolumeType_MAX              = 1,
};

// Enum EndGame.ESummonBattleBehavior
// NumValues: 0x000B
enum class ESummonBattleBehavior : uint8
{
	eAppear                                  = 0,
	eReadyToFight                            = 1,
	eBattleLoop                              = 2,
	eCommandExecute                          = 3,
	eHide                                    = 4,
	eResetLocation                           = 5,
	eReturn                                  = 6,
	eDoNothing                               = 7,
	eAcceptingCommands                       = 8,
	eMoveToAnother                           = 9,
	ESummonBattleBehavior_MAX                = 10,
};

// Enum EndGame.EEndBattleResidualParticlesEventType
// NumValues: 0x0005
enum class EEndBattleResidualParticlesEventType : uint8
{
	None                                     = 0,
	ActionToStay                             = 1,
	ActionToMove                             = 2,
	ActionToDisappear                        = 3,
	EEndBattleResidualParticlesEventType_MAX = 4,
};

// Enum EndGame.EEndBattleUniqueAbilitySpawnWeaponType
// NumValues: 0x0005
enum class EEndBattleUniqueAbilitySpawnWeaponType : uint8
{
	None                                     = 0,
	RockThrow                                = 1,
	GraniteJail                              = 2,
	ChargeCrystal                            = 3,
	EEndBattleUniqueAbilitySpawnWeaponType_MAX = 4,
};

// Enum EndGame.EEndBattleSpawnWeaponStateType
// NumValues: 0x0011
enum class EEndBattleSpawnWeaponStateType : uint8
{
	None                                     = 0,
	Create                                   = 1,
	Finish                                   = 2,
	CreateRockThrow                          = 3,
	HaveRockThrow                            = 4,
	ThrowRockThrow                           = 5,
	BrokenRockThrow                          = 6,
	DisappearRockThrow                       = 7,
	CreateGraniteJail                        = 8,
	StartGraniteJail                         = 9,
	CompletedGraniteJail                     = 10,
	FailureGraniteJail                       = 11,
	CancelGraniteJail                        = 12,
	CreateChargeCrystal                      = 13,
	SummonChargeCrystal                      = 14,
	BrokenChargeCrystal                      = 15,
	EEndBattleSpawnWeaponStateType_MAX       = 16,
};

// Enum EndGame.EEndBattleSummonNeoBahaCondition
// NumValues: 0x0004
enum class EEndBattleSummonNeoBahaCondition : uint8
{
	Normal                                   = 0,
	Drive                                    = 1,
	OverDrive                                = 2,
	EEndBattleSummonNeoBahaCondition_MAX     = 3,
};

// Enum EndGame.EEndBattleNeoBahaBattleMode
// NumValues: 0x0005
enum class EEndBattleNeoBahaBattleMode : uint8
{
	Normal                                   = 0,
	Booster                                  = 1,
	Blade                                    = 2,
	NoChange                                 = 3,
	EEndBattleNeoBahaBattleMode_MAX          = 4,
};

// Enum EndGame.EEndBattleSummonAppearType
// NumValues: 0x0009
enum class EEndBattleSummonAppearType : uint8
{
	Jump                                     = 0,
	Fly                                      = 1,
	Special                                  = 2,
	Odin                                     = 3,
	Ground                                   = 4,
	Shiva                                    = 5,
	Phoenix                                  = 6,
	Ifrit                                    = 7,
	EEndBattleSummonAppearType_MAX           = 8,
};

// Enum EndGame.EEndBattleSummonTrigger
// NumValues: 0x0008
enum class EEndBattleSummonTrigger : uint8
{
	BurstChance                              = 0,
	Burst                                    = 1,
	BurstHit                                 = 2,
	DyingDamageTaken                         = 3,
	MemberDie                                = 4,
	BluePrintEvent                           = 5,
	Debug                                    = 6,
	EEndBattleSummonTrigger_MAX              = 7,
};

// Enum EndGame.EEndBattleSummonType
// NumValues: 0x0017
enum class EEndBattleSummonType : uint8
{
	Ifrit                                    = 0,
	Chocobo                                  = 1,
	Shiva                                    = 2,
	DebuChocobo                              = 3,
	Leviathan                                = 4,
	Bahamut                                  = 5,
	Titan                                    = 6,
	Odin                                     = 7,
	Kjata                                    = 8,
	Alexander                                = 9,
	Phoenix                                  = 10,
	NeoBahamut                               = 11,
	Carbuncle                                = 12,
	Cactuar                                  = 13,
	Hinachocobo                              = 14,
	Ramuh                                    = 15,
	Gilgamesh                                = 16,
	Magicpot                                 = 17,
	End2Hinachocobo                          = 18,
	DLCMoogle                                = 19,
	Bottom                                   = 20,
	None                                     = 31,
	EEndBattleSummonType_MAX                 = 32,
};

// Enum EndGame.EEndBattleSummonAppearFXType
// NumValues: 0x0004
enum class EEndBattleSummonAppearFXType : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	EEndBattleSummonAppearFXType_MAX         = 3,
};

// Enum EndGame.ESummonPointUsageFlag
// NumValues: 0x0030
enum class ESummonPointUsageFlag : uint8
{
	eSpawn_All                               = 0,
	eSpawn_Ifrit                             = 1,
	eSpawn_Chocobo                           = 2,
	eSpawn_Shiva                             = 3,
	eSpawn_Leviathan                         = 4,
	eSpawn_Bahamut                           = 5,
	eSpawn_DebuChoco                         = 6,
	eSpawn_Carbuncle                         = 7,
	eSpawn_Cactuar                           = 8,
	eSpawn_Hinachocobo                       = 9,
	eSpawn_Ramuh                             = 10,
	eSpawn_Titan                             = 11,
	eSpawn_Odin                              = 12,
	eSpawn_Kjata                             = 13,
	eSpawn_Alexander                         = 14,
	eSpawn_Phoenix                           = 15,
	eSpawn_NeoBahamut                        = 16,
	eSpawn_Gilgamesh                         = 17,
	eSpawn_Magicpot                          = 18,
	eSpawn_End2Hinachocobo                   = 19,
	eSpawn_DLCMoogle                         = 20,
	eWarp_All                                = 21,
	eWarp_Ifrit                              = 22,
	eWarp_Chocobo                            = 23,
	eWarp_Shiva                              = 24,
	eWarp_Leviathan                          = 25,
	eWarp_Bahamut                            = 26,
	eWarp_DebuChoco                          = 27,
	eWarp_Carbuncle                          = 28,
	eWarp_Cactuar                            = 29,
	eWarp_Hinachocobo                        = 30,
	eWarp_Ramuh                              = 31,
	eWarp_Titan                              = 32,
	eWarp_Odin                               = 33,
	eWarp_Kjata                              = 34,
	eWarp_Alexander                          = 35,
	eWarp_Phoenix                            = 36,
	eWarp_NeoBahamut                         = 37,
	eWarp_Gilgamesh                          = 38,
	eWarp_Magicpot                           = 39,
	eWarp_End2Hinachocobo                    = 40,
	eWarp_DLCMoogle                          = 41,
	eOmen                                    = 42,
	eCutScene                                = 43,
	eResetLocation                           = 44,
	eLevelCutScene                           = 45,
	eMax                                     = 46,
	ESummonPointUsageFlag_MAX                = 47,
};

// Enum EndGame.EEndTinyBroncoDolphinActionType
// NumValues: 0x0003
enum class EEndTinyBroncoDolphinActionType : uint8
{
	SimpleJump                               = 0,
	Follow                                   = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndRestrictedAreaVehicleType
// NumValues: 0x0006
enum class EEndRestrictedAreaVehicleType : uint8
{
	Buggy                                    = 0,
	TinyBronco                               = 1,
	SBScooter                                = 2,
	Swimming                                 = 3,
	TinyBronco2                              = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndPlayerVehicleType
// NumValues: 0x0007
enum class EEndPlayerVehicleType : uint8
{
	None                                     = 0,
	Chocobo                                  = 1,
	Buggy                                    = 2,
	TinyBronco                               = 3,
	SelfBalancingScooter                     = 4,
	CaitSithFatMoogle                        = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndVehicleSEVelocityDetectionTypes
// NumValues: 0x0006
enum class EEndVehicleSEVelocityDetectionTypes : uint8
{
	EndCharaMovedVelocity                    = 0,
	OwnerVelocity                            = 1,
	MeshComponentVelocity                    = 2,
	CalculateFromMeshLocation                = 3,
	EndCharaDesiredVelocity                  = 4,
	MAX                                      = 5,
};

// Enum EndGame.EEndVehicleSwitchValueSourceTypes
// NumValues: 0x000B
enum class EEndVehicleSwitchValueSourceTypes : uint8
{
	None                                     = 0,
	ScaledVelocity                           = 1,
	ScaledRollAngle                          = 2,
	ScaledWheelVelocity                      = 3,
	EngineZeroOneSlot0                       = 4,
	EngineZeroOneSlot1                       = 5,
	TravelingZeroOneSlot0                    = 6,
	TravelingZeroOneSlot1                    = 7,
	WindNoiseZeroOneSlot0                    = 8,
	WindNoiseZeroOneSlot1                    = 9,
	MAX                                      = 10,
};

// Enum EndGame.EEndVehicleZeroOneValueSourceTypes
// NumValues: 0x0005
enum class EEndVehicleZeroOneValueSourceTypes : uint8
{
	ScaledVelocity                           = 0,
	ScaledRollAngle                          = 1,
	ScaledRotationalVelocity                 = 2,
	ScaledWheelVelocity                      = 3,
	MAX                                      = 4,
};

// Enum EndGame.EEndVehicleRoadAttributeTypes
// NumValues: 0x0008
enum class EEndVehicleRoadAttributeTypes : uint8
{
	Default                                  = 0,
	Con_Clean                                = 1,
	Con_Sandy                                = 2,
	Sandy                                    = 3,
	Grass                                    = 4,
	Muddy                                    = 5,
	Water                                    = 6,
	MAX                                      = 7,
};

// Enum EndGame.EEndVehicleSeControlTypes
// NumValues: 0x0005
enum class EEndVehicleSeControlTypes : uint8
{
	Field                                    = 0,
	GBike                                    = 1,
	BuggyShooting                            = 2,
	Cut                                      = 3,
	MAX                                      = 4,
};

// Enum EndGame.EWaterNavBuildType
// NumValues: 0x0004
enum class EWaterNavBuildType : uint8
{
	None                                     = 0,
	Hollow                                   = 1,
	Ignore                                   = 2,
	EWaterNavBuildType_MAX                   = 3,
};

// Enum EndGame.EEndFireEventsAtPosition
// NumValues: 0x0004
enum class EEndFireEventsAtPosition : uint8
{
	AtStartOfEvaluation                      = 0,
	AtEndOfEvaluation                        = 1,
	AfterSpawn                               = 2,
	EEndFireEventsAtPosition_MAX             = 3,
};

// Enum EndGame.EShootingAdaptiveEffectType
// NumValues: 0x000A
enum class EShootingAdaptiveEffectType : uint32
{
	Shot                                     = 0,
	Hit_Endurance                            = 1,
	Break_Endurance                          = 2,
	Break_NoEndurance                        = 3,
	Break_Flip                               = 4,
	Break_BOSSandSaboten                     = 5,
	SmallWaves                               = 6,
	BigWaves                                 = 7,
	Max                                      = 8,
	None                                     = 9,
};

// Enum EndGame.EShootingSEType
// NumValues: 0x002A
enum class EShootingSEType : uint32
{
	HitMastCloth                             = 0,
	HitSingleShot                            = 1,
	HitWater                                 = 2,
	HitWoodenObjects                         = 3,
	HitCarpet                                = 4,
	HitStone                                 = 5,
	HitSlimy                                 = 6,
	InsertBigWave                            = 7,
	InsertSmallWave                          = 8,
	KillRareTargetSingleShot                 = 9,
	KillSingleShot                           = 10,
	Shot                                     = 11,
	PhaseTelop                               = 12,
	KillFlipTargetShot                       = 13,
	StartCount                               = 14,
	Start                                    = 15,
	EndCount                                 = 16,
	TimeOver                                 = 17,
	Result                                   = 18,
	Result_off                               = 19,
	KillSp_Stamp                             = 20,
	KillSp_Moogle                            = 21,
	KillSp_DebuChocobo                       = 22,
	KillSp_Morbol                            = 23,
	KillSp_Sabotender                        = 24,
	ResultScore_On                           = 25,
	ResultScore_Off                          = 26,
	Create_Sabotender                        = 27,
	HitRate_OVER                             = 28,
	HitRate_UNDER                            = 29,
	HitScore_EXCELLENT                       = 30,
	HitScore_GREAT                           = 31,
	HitScore_NICE                            = 32,
	HitScore_GOOD                            = 33,
	GetReady                                 = 34,
	Option_Control                           = 35,
	Option_Weight                            = 36,
	Option_Motion                            = 37,
	HighScore_Loop                           = 38,
	HighScore_Cheers                         = 39,
	Max                                      = 40,
	None                                     = 41,
};

// Enum EndGame.EEndShootingGameSectionType
// NumValues: 0x0003
enum class EEndShootingGameSectionType : uint32
{
	CreateTarget                             = 0,
	CreatePhaseUI                            = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndLookAroundState
// NumValues: 0x0005
enum class EEndLookAroundState : uint8
{
	None                                     = 0,
	Wait                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	EEndLookAroundState_MAX                  = 4,
};

// Enum EndGame.ERigUnit_EndPBD_Constraint
// NumValues: 0x0007
enum class ERigUnit_EndPBD_Constraint : uint8
{
	None                                     = 0,
	Distance                                 = 1,
	Bend                                     = 2,
	CharacterWeight                          = 3,
	Anim                                     = 4,
	LastPosition                             = 5,
	ERigUnit_EndPBD_MAX                      = 6,
};

// Enum EndGame.EVfxTrajectoryRenderAxisOption
// NumValues: 0x0004
enum class EVfxTrajectoryRenderAxisOption : uint8
{
	EVTRAO_RightVector                       = 0,
	EVTRAO_UpVector                          = 1,
	EVTRAO_BillBoard                         = 2,
	EVTRAO_MAX                               = 3,
};

// ScriptStruct EndGame.EndNormalizedCoordinateAnimationParameterKey
// 0x0018 (0x0018 - 0x0000)
struct FEndNormalizedCoordinateAnimationParameterKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConstant;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialParameterExtraNormalizedCoordinate Parameter;                                         // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNormalizedCoordinateAnimationParameterKey) == 0x000004, "Wrong alignment on FEndNormalizedCoordinateAnimationParameterKey");
static_assert(sizeof(FEndNormalizedCoordinateAnimationParameterKey) == 0x000018, "Wrong size on FEndNormalizedCoordinateAnimationParameterKey");
static_assert(offsetof(FEndNormalizedCoordinateAnimationParameterKey, Time) == 0x000000, "Member 'FEndNormalizedCoordinateAnimationParameterKey::Time' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationParameterKey, bConstant) == 0x000004, "Member 'FEndNormalizedCoordinateAnimationParameterKey::bConstant' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationParameterKey, Parameter) == 0x000008, "Member 'FEndNormalizedCoordinateAnimationParameterKey::Parameter' has a wrong offset!");

// ScriptStruct EndGame.EndNormalizedCoordinateAnimationParameter
// 0x0078 (0x0088 - 0x0010)
struct FEndNormalizedCoordinateAnimationParameter : public FMaterialParameterExtraNormalizedCoordinate
{
public:
	TArray<struct FEndNormalizedCoordinateAnimationParameterKey> Keys;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseAnimation;                                     // 0x0020(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialParameterExtraNormalizedCoordinate EndParameter;                                      // 0x0024(0x0010)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UMaterialInterface*>  OverrideMaterials;                                 // 0x0038(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNormalizedCoordinateAnimationParameter) == 0x000008, "Wrong alignment on FEndNormalizedCoordinateAnimationParameter");
static_assert(sizeof(FEndNormalizedCoordinateAnimationParameter) == 0x000088, "Wrong size on FEndNormalizedCoordinateAnimationParameter");
static_assert(offsetof(FEndNormalizedCoordinateAnimationParameter, Keys) == 0x000010, "Member 'FEndNormalizedCoordinateAnimationParameter::Keys' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationParameter, bUseAnimation) == 0x000020, "Member 'FEndNormalizedCoordinateAnimationParameter::bUseAnimation' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationParameter, EndParameter) == 0x000024, "Member 'FEndNormalizedCoordinateAnimationParameter::EndParameter' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationParameter, OverrideMaterials) == 0x000038, "Member 'FEndNormalizedCoordinateAnimationParameter::OverrideMaterials' has a wrong offset!");

// ScriptStruct EndGame.EndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings
// 0x0028 (0x00B0 - 0x0088)
struct FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings final : public FEndNormalizedCoordinateAnimationParameter
{
public:
	TArray<class FName>                           MaterialNames;                                     // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           MeshNames;                                         // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        Curve;                                             // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings) == 0x000008, "Wrong alignment on FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings");
static_assert(sizeof(FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings) == 0x0000B0, "Wrong size on FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings");
static_assert(offsetof(FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings, MaterialNames) == 0x000088, "Member 'FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings::MaterialNames' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings, MeshNames) == 0x000098, "Member 'FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings::MeshNames' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings, Curve) == 0x0000A8, "Member 'FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings::Curve' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings, Duration) == 0x0000AC, "Member 'FEndNormalizedCoordinateAnimationDefaultOnlyMaterialSettings::Duration' has a wrong offset!");

// ScriptStruct EndGame.EndChangeAppearanceBodyPrimitiveSettings
// 0x0020 (0x0020 - 0x0000)
struct FEndChangeAppearanceBodyPrimitiveSettings final
{
public:
	EEndCollision                                 ShapeType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ShapeSize;                                         // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentSocket;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupName;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChangeAppearanceBodyPrimitiveSettings) == 0x000004, "Wrong alignment on FEndChangeAppearanceBodyPrimitiveSettings");
static_assert(sizeof(FEndChangeAppearanceBodyPrimitiveSettings) == 0x000020, "Wrong size on FEndChangeAppearanceBodyPrimitiveSettings");
static_assert(offsetof(FEndChangeAppearanceBodyPrimitiveSettings, ShapeType) == 0x000000, "Member 'FEndChangeAppearanceBodyPrimitiveSettings::ShapeType' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceBodyPrimitiveSettings, ShapeSize) == 0x000004, "Member 'FEndChangeAppearanceBodyPrimitiveSettings::ShapeSize' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceBodyPrimitiveSettings, ParentSocket) == 0x000010, "Member 'FEndChangeAppearanceBodyPrimitiveSettings::ParentSocket' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceBodyPrimitiveSettings, GroupName) == 0x000018, "Member 'FEndChangeAppearanceBodyPrimitiveSettings::GroupName' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActorAnimDetailMotionMatchUnit
// 0x0010 (0x0010 - 0x0000)
struct FEndFieldActorAnimDetailMotionMatchUnit final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFrameRate;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFrameSec;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldActorAnimDetailMotionMatchUnit) == 0x000004, "Wrong alignment on FEndFieldActorAnimDetailMotionMatchUnit");
static_assert(sizeof(FEndFieldActorAnimDetailMotionMatchUnit) == 0x000010, "Wrong size on FEndFieldActorAnimDetailMotionMatchUnit");
static_assert(offsetof(FEndFieldActorAnimDetailMotionMatchUnit, MotionName) == 0x000000, "Member 'FEndFieldActorAnimDetailMotionMatchUnit::MotionName' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimDetailMotionMatchUnit, StartFrameRate) == 0x000008, "Member 'FEndFieldActorAnimDetailMotionMatchUnit::StartFrameRate' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimDetailMotionMatchUnit, StartFrameSec) == 0x00000C, "Member 'FEndFieldActorAnimDetailMotionMatchUnit::StartFrameSec' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActorAnimDetailUnit
// 0x0030 (0x0030 - 0x0000)
struct FEndFieldActorAnimDetailUnit final
{
public:
	class FName                                   PlayAnimationName;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndFieldActorAnimDetailMotionMatchUnit> MotionMatchInfo;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaySpeedRate;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFrameRate;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFrameSec;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldActorAnimDetailUnit) == 0x000008, "Wrong alignment on FEndFieldActorAnimDetailUnit");
static_assert(sizeof(FEndFieldActorAnimDetailUnit) == 0x000030, "Wrong size on FEndFieldActorAnimDetailUnit");
static_assert(offsetof(FEndFieldActorAnimDetailUnit, PlayAnimationName) == 0x000000, "Member 'FEndFieldActorAnimDetailUnit::PlayAnimationName' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimDetailUnit, MotionMatchInfo) == 0x000008, "Member 'FEndFieldActorAnimDetailUnit::MotionMatchInfo' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimDetailUnit, BlendInTime) == 0x000018, "Member 'FEndFieldActorAnimDetailUnit::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimDetailUnit, BlendOutTime) == 0x00001C, "Member 'FEndFieldActorAnimDetailUnit::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimDetailUnit, PlaySpeedRate) == 0x000020, "Member 'FEndFieldActorAnimDetailUnit::PlaySpeedRate' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimDetailUnit, StartFrameRate) == 0x000024, "Member 'FEndFieldActorAnimDetailUnit::StartFrameRate' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimDetailUnit, StartFrameSec) == 0x000028, "Member 'FEndFieldActorAnimDetailUnit::StartFrameSec' has a wrong offset!");

// ScriptStruct EndGame.EndFieldAnimDetailSetting
// 0x0020 (0x0020 - 0x0000)
struct FEndFieldAnimDetailSetting final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndFieldActorAnimDetailUnit>   AnimationUnits;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsLoop;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsKeep;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldAnimDetailSetting) == 0x000008, "Wrong alignment on FEndFieldAnimDetailSetting");
static_assert(sizeof(FEndFieldAnimDetailSetting) == 0x000020, "Wrong size on FEndFieldAnimDetailSetting");
static_assert(offsetof(FEndFieldAnimDetailSetting, AnimationUnits) == 0x000008, "Member 'FEndFieldAnimDetailSetting::AnimationUnits' has a wrong offset!");
static_assert(offsetof(FEndFieldAnimDetailSetting, bLastAnimIsLoop) == 0x000018, "Member 'FEndFieldAnimDetailSetting::bLastAnimIsLoop' has a wrong offset!");
static_assert(offsetof(FEndFieldAnimDetailSetting, bLastAnimIsKeep) == 0x000019, "Member 'FEndFieldAnimDetailSetting::bLastAnimIsKeep' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndAdditiveDamage
// 0x0000 (0x00C8 - 0x00C8)
struct FAnimNode_EndAdditiveDamage final : public FAnimNode_SkeletalControlBase
{
};
static_assert(alignof(FAnimNode_EndAdditiveDamage) == 0x000008, "Wrong alignment on FAnimNode_EndAdditiveDamage");
static_assert(sizeof(FAnimNode_EndAdditiveDamage) == 0x0000C8, "Wrong size on FAnimNode_EndAdditiveDamage");

// ScriptStruct EndGame.AnimNode_EndBehaviorAction
// 0x0018 (0x0028 - 0x0010)
struct FAnimNode_EndBehaviorAction final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndBehaviorAction) == 0x000008, "Wrong alignment on FAnimNode_EndBehaviorAction");
static_assert(sizeof(FAnimNode_EndBehaviorAction) == 0x000028, "Wrong size on FAnimNode_EndBehaviorAction");
static_assert(offsetof(FAnimNode_EndBehaviorAction, Source) == 0x000010, "Member 'FAnimNode_EndBehaviorAction::Source' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActionWorldTransSetting2
// 0x0060 (0x0060 - 0x0000)
struct FEndFieldActionWorldTransSetting2 final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketOrBoneName;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformOffset;                                   // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldActionWorldTransSetting2) == 0x000010, "Wrong alignment on FEndFieldActionWorldTransSetting2");
static_assert(sizeof(FEndFieldActionWorldTransSetting2) == 0x000060, "Wrong size on FEndFieldActionWorldTransSetting2");
static_assert(offsetof(FEndFieldActionWorldTransSetting2, TargetActorName) == 0x000000, "Member 'FEndFieldActionWorldTransSetting2::TargetActorName' has a wrong offset!");
static_assert(offsetof(FEndFieldActionWorldTransSetting2, Actor) == 0x000008, "Member 'FEndFieldActionWorldTransSetting2::Actor' has a wrong offset!");
static_assert(offsetof(FEndFieldActionWorldTransSetting2, SocketOrBoneName) == 0x000010, "Member 'FEndFieldActionWorldTransSetting2::SocketOrBoneName' has a wrong offset!");
static_assert(offsetof(FEndFieldActionWorldTransSetting2, TransformOffset) == 0x000020, "Member 'FEndFieldActionWorldTransSetting2::TransformOffset' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboHitWallReactionParam
// 0x0014 (0x0014 - 0x0000)
struct FEndChocoboHitWallReactionParam final
{
public:
	bool                                          bEnableHitReaction;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayMotionLimitDeltaSpeed;                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayMotionLimitDeltaAngle;                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayMotionLimitDeltaTime;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayMotionLimitDeltaSpeedOnCloseToWall;            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChocoboHitWallReactionParam) == 0x000004, "Wrong alignment on FEndChocoboHitWallReactionParam");
static_assert(sizeof(FEndChocoboHitWallReactionParam) == 0x000014, "Wrong size on FEndChocoboHitWallReactionParam");
static_assert(offsetof(FEndChocoboHitWallReactionParam, bEnableHitReaction) == 0x000000, "Member 'FEndChocoboHitWallReactionParam::bEnableHitReaction' has a wrong offset!");
static_assert(offsetof(FEndChocoboHitWallReactionParam, PlayMotionLimitDeltaSpeed) == 0x000004, "Member 'FEndChocoboHitWallReactionParam::PlayMotionLimitDeltaSpeed' has a wrong offset!");
static_assert(offsetof(FEndChocoboHitWallReactionParam, PlayMotionLimitDeltaAngle) == 0x000008, "Member 'FEndChocoboHitWallReactionParam::PlayMotionLimitDeltaAngle' has a wrong offset!");
static_assert(offsetof(FEndChocoboHitWallReactionParam, PlayMotionLimitDeltaTime) == 0x00000C, "Member 'FEndChocoboHitWallReactionParam::PlayMotionLimitDeltaTime' has a wrong offset!");
static_assert(offsetof(FEndChocoboHitWallReactionParam, PlayMotionLimitDeltaSpeedOnCloseToWall) == 0x000010, "Member 'FEndChocoboHitWallReactionParam::PlayMotionLimitDeltaSpeedOnCloseToWall' has a wrong offset!");

// ScriptStruct EndGame.EndSceneNaviMapLayerTextureInfo
// 0x00C0 (0x00C0 - 0x0000)
struct FEndSceneNaviMapLayerTextureInfo final
{
public:
	class FName                                   TextureName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TexturePath;                                       // 0x0008(0x0028)(Deprecated, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UTexture2D>> TexturePathMap;                                    // 0x0030(0x0050)(Edit, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FTransform                             TextureMaskTransform;                              // 0x0080(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BaseLocation;                                      // 0x00B0(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSceneNaviMapLayerTextureInfo) == 0x000010, "Wrong alignment on FEndSceneNaviMapLayerTextureInfo");
static_assert(sizeof(FEndSceneNaviMapLayerTextureInfo) == 0x0000C0, "Wrong size on FEndSceneNaviMapLayerTextureInfo");
static_assert(offsetof(FEndSceneNaviMapLayerTextureInfo, TextureName) == 0x000000, "Member 'FEndSceneNaviMapLayerTextureInfo::TextureName' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapLayerTextureInfo, TexturePath) == 0x000008, "Member 'FEndSceneNaviMapLayerTextureInfo::TexturePath' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapLayerTextureInfo, TexturePathMap) == 0x000030, "Member 'FEndSceneNaviMapLayerTextureInfo::TexturePathMap' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapLayerTextureInfo, TextureMaskTransform) == 0x000080, "Member 'FEndSceneNaviMapLayerTextureInfo::TextureMaskTransform' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapLayerTextureInfo, BaseLocation) == 0x0000B0, "Member 'FEndSceneNaviMapLayerTextureInfo::BaseLocation' has a wrong offset!");

// ScriptStruct EndGame.EndNiagaraCreateParams
// 0x0000 (0x0068 - 0x0068)
struct FEndNiagaraCreateParams final : public FVFXNiagaraCreateParams
{
};
static_assert(alignof(FEndNiagaraCreateParams) == 0x000008, "Wrong alignment on FEndNiagaraCreateParams");
static_assert(sizeof(FEndNiagaraCreateParams) == 0x000068, "Wrong size on FEndNiagaraCreateParams");

// ScriptStruct EndGame.EndEmissiveColorPreviewSettings
// 0x0030 (0x0030 - 0x0000)
struct FEndEmissiveColorPreviewSettings final
{
public:
	class FName                                   OverrideId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationModifierType                     ModifierType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveEvaluateInLogarithmicSpace;                  // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveDuration;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomOffset;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndEmissiveColorPreviewSettings) == 0x000008, "Wrong alignment on FEndEmissiveColorPreviewSettings");
static_assert(sizeof(FEndEmissiveColorPreviewSettings) == 0x000030, "Wrong size on FEndEmissiveColorPreviewSettings");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, OverrideId) == 0x000000, "Member 'FEndEmissiveColorPreviewSettings::OverrideId' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, ModifierType) == 0x000008, "Member 'FEndEmissiveColorPreviewSettings::ModifierType' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, CurveType) == 0x000009, "Member 'FEndEmissiveColorPreviewSettings::CurveType' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, CurveAsset) == 0x000010, "Member 'FEndEmissiveColorPreviewSettings::CurveAsset' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, bCurveEvaluateInLogarithmicSpace) == 0x000018, "Member 'FEndEmissiveColorPreviewSettings::bCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, bLoop) == 0x000019, "Member 'FEndEmissiveColorPreviewSettings::bLoop' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, Duration) == 0x00001C, "Member 'FEndEmissiveColorPreviewSettings::Duration' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, RandomAdditiveDuration) == 0x000020, "Member 'FEndEmissiveColorPreviewSettings::RandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, RandomOffset) == 0x000024, "Member 'FEndEmissiveColorPreviewSettings::RandomOffset' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, BlendInTime) == 0x000028, "Member 'FEndEmissiveColorPreviewSettings::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorPreviewSettings, BlendOutTime) == 0x00002C, "Member 'FEndEmissiveColorPreviewSettings::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndBehaviorSelecter
// 0x0028 (0x0038 - 0x0010)
struct FAnimNode_EndBehaviorSelecter final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Neutral;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              Battle;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndBehaviorSelecter) == 0x000008, "Wrong alignment on FAnimNode_EndBehaviorSelecter");
static_assert(sizeof(FAnimNode_EndBehaviorSelecter) == 0x000038, "Wrong size on FAnimNode_EndBehaviorSelecter");
static_assert(offsetof(FAnimNode_EndBehaviorSelecter, Neutral) == 0x000010, "Member 'FAnimNode_EndBehaviorSelecter::Neutral' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndBehaviorSelecter, Battle) == 0x000020, "Member 'FAnimNode_EndBehaviorSelecter::Battle' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndBikeExpression
// 0x00F8 (0x0108 - 0x0010)
struct FAnimNode_EndBikeExpression final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x68];                                      // 0x0020(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugVelocity;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugMufflerVibration;                      // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugSuspension;                            // 0x008D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x7A];                                      // 0x008E(0x007A)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndBikeExpression) == 0x000008, "Wrong alignment on FAnimNode_EndBikeExpression");
static_assert(sizeof(FAnimNode_EndBikeExpression) == 0x000108, "Wrong size on FAnimNode_EndBikeExpression");
static_assert(offsetof(FAnimNode_EndBikeExpression, Source) == 0x000010, "Member 'FAnimNode_EndBikeExpression::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndBikeExpression, DebugVelocity) == 0x000088, "Member 'FAnimNode_EndBikeExpression::DebugVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndBikeExpression, bEnableDebugMufflerVibration) == 0x00008C, "Member 'FAnimNode_EndBikeExpression::bEnableDebugMufflerVibration' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndBikeExpression, bEnableDebugSuspension) == 0x00008D, "Member 'FAnimNode_EndBikeExpression::bEnableDebugSuspension' has a wrong offset!");

// ScriptStruct EndGame.AnimalRunTimeAttackData
// 0x000C (0x000C - 0x0000)
struct FAnimalRunTimeAttackData final
{
public:
	int32                                         BestTime;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TriggerName;                                       // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimalRunTimeAttackData) == 0x000004, "Wrong alignment on FAnimalRunTimeAttackData");
static_assert(sizeof(FAnimalRunTimeAttackData) == 0x00000C, "Wrong size on FAnimalRunTimeAttackData");
static_assert(offsetof(FAnimalRunTimeAttackData, BestTime) == 0x000000, "Member 'FAnimalRunTimeAttackData::BestTime' has a wrong offset!");
static_assert(offsetof(FAnimalRunTimeAttackData, TriggerName) == 0x000004, "Member 'FAnimalRunTimeAttackData::TriggerName' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActorAnimUnit
// 0x0028 (0x0028 - 0x0000)
struct FEndFieldActorAnimUnit final
{
public:
	class FName                                   PlayAnimationName;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MotionMatchAnimationNames;                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaySpeedRate;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldActorAnimUnit) == 0x000008, "Wrong alignment on FEndFieldActorAnimUnit");
static_assert(sizeof(FEndFieldActorAnimUnit) == 0x000028, "Wrong size on FEndFieldActorAnimUnit");
static_assert(offsetof(FEndFieldActorAnimUnit, PlayAnimationName) == 0x000000, "Member 'FEndFieldActorAnimUnit::PlayAnimationName' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimUnit, MotionMatchAnimationNames) == 0x000008, "Member 'FEndFieldActorAnimUnit::MotionMatchAnimationNames' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimUnit, BlendInTime) == 0x000018, "Member 'FEndFieldActorAnimUnit::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimUnit, BlendOutTime) == 0x00001C, "Member 'FEndFieldActorAnimUnit::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndFieldActorAnimUnit, PlaySpeedRate) == 0x000020, "Member 'FEndFieldActorAnimUnit::PlaySpeedRate' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerAttendantInstanceContext
// 0x0080 (0x0080 - 0x0000)
struct FEndFeelerAttendantInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             CurrentTransform;                                  // 0x0010(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0040(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x38];                                      // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerAttendantInstanceContext) == 0x000010, "Wrong alignment on FEndFeelerAttendantInstanceContext");
static_assert(sizeof(FEndFeelerAttendantInstanceContext) == 0x000080, "Wrong size on FEndFeelerAttendantInstanceContext");
static_assert(offsetof(FEndFeelerAttendantInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndFeelerAttendantInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerAttendantInstanceContext, Distance) == 0x000004, "Member 'FEndFeelerAttendantInstanceContext::Distance' has a wrong offset!");
static_assert(offsetof(FEndFeelerAttendantInstanceContext, Yaw) == 0x000008, "Member 'FEndFeelerAttendantInstanceContext::Yaw' has a wrong offset!");
static_assert(offsetof(FEndFeelerAttendantInstanceContext, Pitch) == 0x00000C, "Member 'FEndFeelerAttendantInstanceContext::Pitch' has a wrong offset!");
static_assert(offsetof(FEndFeelerAttendantInstanceContext, CurrentTransform) == 0x000010, "Member 'FEndFeelerAttendantInstanceContext::CurrentTransform' has a wrong offset!");
static_assert(offsetof(FEndFeelerAttendantInstanceContext, SkeletalMeshComponent) == 0x000040, "Member 'FEndFeelerAttendantInstanceContext::SkeletalMeshComponent' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndBodyDriver
// 0x0030 (0x0A80 - 0x0A50)
struct FAnimNode_EndBodyDriver final : public FAnimNode_BodyDriver
{
public:
	uint8                                         Pad_A50[0x30];                                     // 0x0A50(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndBodyDriver) == 0x000010, "Wrong alignment on FAnimNode_EndBodyDriver");
static_assert(sizeof(FAnimNode_EndBodyDriver) == 0x000A80, "Wrong size on FAnimNode_EndBodyDriver");

// ScriptStruct EndGame.EndAIAMoveDefWarpTerritoryTargetPointInfo
// 0x0018 (0x0018 - 0x0000)
struct FEndAIAMoveDefWarpTerritoryTargetPointInfo final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetPointNames;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIAMoveDefWarpTerritoryTargetPointInfo) == 0x000008, "Wrong alignment on FEndAIAMoveDefWarpTerritoryTargetPointInfo");
static_assert(sizeof(FEndAIAMoveDefWarpTerritoryTargetPointInfo) == 0x000018, "Wrong size on FEndAIAMoveDefWarpTerritoryTargetPointInfo");
static_assert(offsetof(FEndAIAMoveDefWarpTerritoryTargetPointInfo, territoryID) == 0x000000, "Member 'FEndAIAMoveDefWarpTerritoryTargetPointInfo::territoryID' has a wrong offset!");
static_assert(offsetof(FEndAIAMoveDefWarpTerritoryTargetPointInfo, TargetPointNames) == 0x000008, "Member 'FEndAIAMoveDefWarpTerritoryTargetPointInfo::TargetPointNames' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndCharacterMovementExpression
// 0x0030 (0x00F8 - 0x00C8)
struct FAnimNode_EndCharacterMovementExpression final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_C8[0x30];                                      // 0x00C8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndCharacterMovementExpression) == 0x000008, "Wrong alignment on FAnimNode_EndCharacterMovementExpression");
static_assert(sizeof(FAnimNode_EndCharacterMovementExpression) == 0x0000F8, "Wrong size on FAnimNode_EndCharacterMovementExpression");

// ScriptStruct EndGame.EndJenovaPulseWallPulseContext
// 0x0010 (0x0010 - 0x0000)
struct FEndJenovaPulseWallPulseContext final
{
public:
	float                                         PulseTimer;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulsePlayRate;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseWaitTime;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseScale;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndJenovaPulseWallPulseContext) == 0x000004, "Wrong alignment on FEndJenovaPulseWallPulseContext");
static_assert(sizeof(FEndJenovaPulseWallPulseContext) == 0x000010, "Wrong size on FEndJenovaPulseWallPulseContext");
static_assert(offsetof(FEndJenovaPulseWallPulseContext, PulseTimer) == 0x000000, "Member 'FEndJenovaPulseWallPulseContext::PulseTimer' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallPulseContext, PulsePlayRate) == 0x000004, "Member 'FEndJenovaPulseWallPulseContext::PulsePlayRate' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallPulseContext, PulseWaitTime) == 0x000008, "Member 'FEndJenovaPulseWallPulseContext::PulseWaitTime' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallPulseContext, PulseScale) == 0x00000C, "Member 'FEndJenovaPulseWallPulseContext::PulseScale' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboExtraMovementExpressionNeckBoneSetting
// 0x001C (0x001C - 0x0000)
struct FEndChocoboExtraMovementExpressionNeckBoneSetting final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneTurnRate;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneInterpSpeed;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseRoll;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xB];                                       // 0x0011(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndChocoboExtraMovementExpressionNeckBoneSetting) == 0x000004, "Wrong alignment on FEndChocoboExtraMovementExpressionNeckBoneSetting");
static_assert(sizeof(FEndChocoboExtraMovementExpressionNeckBoneSetting) == 0x00001C, "Wrong size on FEndChocoboExtraMovementExpressionNeckBoneSetting");
static_assert(offsetof(FEndChocoboExtraMovementExpressionNeckBoneSetting, BoneName) == 0x000000, "Member 'FEndChocoboExtraMovementExpressionNeckBoneSetting::BoneName' has a wrong offset!");
static_assert(offsetof(FEndChocoboExtraMovementExpressionNeckBoneSetting, BoneTurnRate) == 0x000008, "Member 'FEndChocoboExtraMovementExpressionNeckBoneSetting::BoneTurnRate' has a wrong offset!");
static_assert(offsetof(FEndChocoboExtraMovementExpressionNeckBoneSetting, BoneInterpSpeed) == 0x00000C, "Member 'FEndChocoboExtraMovementExpressionNeckBoneSetting::BoneInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndChocoboExtraMovementExpressionNeckBoneSetting, bReverseRoll) == 0x000010, "Member 'FEndChocoboExtraMovementExpressionNeckBoneSetting::bReverseRoll' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboExtraMovementExpressionNeckTurnSetting
// 0x0014 (0x0014 - 0x0000)
struct FEndChocoboExtraMovementExpressionNeckTurnSetting final
{
public:
	float                                         NeckTurnIncrease;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckTurnDecrease;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckTurnInterpSpeed;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckTurnDecreaseInterpSpeed;                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNeckTurnAngle;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChocoboExtraMovementExpressionNeckTurnSetting) == 0x000004, "Wrong alignment on FEndChocoboExtraMovementExpressionNeckTurnSetting");
static_assert(sizeof(FEndChocoboExtraMovementExpressionNeckTurnSetting) == 0x000014, "Wrong size on FEndChocoboExtraMovementExpressionNeckTurnSetting");
static_assert(offsetof(FEndChocoboExtraMovementExpressionNeckTurnSetting, NeckTurnIncrease) == 0x000000, "Member 'FEndChocoboExtraMovementExpressionNeckTurnSetting::NeckTurnIncrease' has a wrong offset!");
static_assert(offsetof(FEndChocoboExtraMovementExpressionNeckTurnSetting, NeckTurnDecrease) == 0x000004, "Member 'FEndChocoboExtraMovementExpressionNeckTurnSetting::NeckTurnDecrease' has a wrong offset!");
static_assert(offsetof(FEndChocoboExtraMovementExpressionNeckTurnSetting, NeckTurnInterpSpeed) == 0x000008, "Member 'FEndChocoboExtraMovementExpressionNeckTurnSetting::NeckTurnInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndChocoboExtraMovementExpressionNeckTurnSetting, NeckTurnDecreaseInterpSpeed) == 0x00000C, "Member 'FEndChocoboExtraMovementExpressionNeckTurnSetting::NeckTurnDecreaseInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndChocoboExtraMovementExpressionNeckTurnSetting, MaxNeckTurnAngle) == 0x000010, "Member 'FEndChocoboExtraMovementExpressionNeckTurnSetting::MaxNeckTurnAngle' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndChocoboExtraMovementExpression
// 0x00D8 (0x00E8 - 0x0010)
struct FAnimNode_EndChocoboExtraMovementExpression final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableNeckTurnExpression;                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndChocoboExtraMovementExpressionNeckBoneSetting> BoneSettingArray;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FEndChocoboExtraMovementExpressionNeckTurnSetting JetActionSettings;                                 // 0x0038(0x0014)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FEndChocoboExtraMovementExpressionNeckTurnSetting GlideActionSettings;                               // 0x004C(0x0014)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FEndChocoboExtraMovementExpressionNeckTurnSetting SliderActionSettings;                              // 0x0060(0x0014)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnablePenetrationControl;                         // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadMaxMoveSize;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HipMaxMoveSize;                                    // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               HipRot;                                            // 0x0080(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_8C[0x5C];                                      // 0x008C(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndChocoboExtraMovementExpression) == 0x000008, "Wrong alignment on FAnimNode_EndChocoboExtraMovementExpression");
static_assert(sizeof(FAnimNode_EndChocoboExtraMovementExpression) == 0x0000E8, "Wrong size on FAnimNode_EndChocoboExtraMovementExpression");
static_assert(offsetof(FAnimNode_EndChocoboExtraMovementExpression, Source) == 0x000010, "Member 'FAnimNode_EndChocoboExtraMovementExpression::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndChocoboExtraMovementExpression, bEnableNeckTurnExpression) == 0x000020, "Member 'FAnimNode_EndChocoboExtraMovementExpression::bEnableNeckTurnExpression' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndChocoboExtraMovementExpression, BoneSettingArray) == 0x000028, "Member 'FAnimNode_EndChocoboExtraMovementExpression::BoneSettingArray' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndChocoboExtraMovementExpression, JetActionSettings) == 0x000038, "Member 'FAnimNode_EndChocoboExtraMovementExpression::JetActionSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndChocoboExtraMovementExpression, GlideActionSettings) == 0x00004C, "Member 'FAnimNode_EndChocoboExtraMovementExpression::GlideActionSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndChocoboExtraMovementExpression, SliderActionSettings) == 0x000060, "Member 'FAnimNode_EndChocoboExtraMovementExpression::SliderActionSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndChocoboExtraMovementExpression, bEnablePenetrationControl) == 0x000074, "Member 'FAnimNode_EndChocoboExtraMovementExpression::bEnablePenetrationControl' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndChocoboExtraMovementExpression, HeadMaxMoveSize) == 0x000078, "Member 'FAnimNode_EndChocoboExtraMovementExpression::HeadMaxMoveSize' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndChocoboExtraMovementExpression, HipMaxMoveSize) == 0x00007C, "Member 'FAnimNode_EndChocoboExtraMovementExpression::HipMaxMoveSize' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndChocoboExtraMovementExpression, HipRot) == 0x000080, "Member 'FAnimNode_EndChocoboExtraMovementExpression::HipRot' has a wrong offset!");

// ScriptStruct EndGame.BallSpawnConditionData
// 0x0008 (0x0008 - 0x0000)
struct FBallSpawnConditionData final
{
public:
	EBallSpawnCondition                           SpawnCondition;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BallConditionVariable;                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBallSpawnConditionData) == 0x000004, "Wrong alignment on FBallSpawnConditionData");
static_assert(sizeof(FBallSpawnConditionData) == 0x000008, "Wrong size on FBallSpawnConditionData");
static_assert(offsetof(FBallSpawnConditionData, SpawnCondition) == 0x000000, "Member 'FBallSpawnConditionData::SpawnCondition' has a wrong offset!");
static_assert(offsetof(FBallSpawnConditionData, BallConditionVariable) == 0x000004, "Member 'FBallSpawnConditionData::BallConditionVariable' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterMovementExpressionBoneSetting
// 0x0028 (0x0028 - 0x0000)
struct FEndCharacterMovementExpressionBoneSetting final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotationInterpSpeed;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RotationOffsetRateLimit;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              VelocityLerpRange;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCharacterMovementExpressionBoneSetting) == 0x000004, "Wrong alignment on FEndCharacterMovementExpressionBoneSetting");
static_assert(sizeof(FEndCharacterMovementExpressionBoneSetting) == 0x000028, "Wrong size on FEndCharacterMovementExpressionBoneSetting");
static_assert(offsetof(FEndCharacterMovementExpressionBoneSetting, BoneName) == 0x000000, "Member 'FEndCharacterMovementExpressionBoneSetting::BoneName' has a wrong offset!");
static_assert(offsetof(FEndCharacterMovementExpressionBoneSetting, RotationOffset) == 0x000008, "Member 'FEndCharacterMovementExpressionBoneSetting::RotationOffset' has a wrong offset!");
static_assert(offsetof(FEndCharacterMovementExpressionBoneSetting, RotationInterpSpeed) == 0x000014, "Member 'FEndCharacterMovementExpressionBoneSetting::RotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndCharacterMovementExpressionBoneSetting, RotationOffsetRateLimit) == 0x000018, "Member 'FEndCharacterMovementExpressionBoneSetting::RotationOffsetRateLimit' has a wrong offset!");
static_assert(offsetof(FEndCharacterMovementExpressionBoneSetting, VelocityLerpRange) == 0x000020, "Member 'FEndCharacterMovementExpressionBoneSetting::VelocityLerpRange' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterMovementExpressionWalkSetting
// 0x0010 (0x0010 - 0x0000)
struct FEndCharacterMovementExpressionWalkSetting final
{
public:
	TArray<struct FEndCharacterMovementExpressionBoneSetting> BoneSettings;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCharacterMovementExpressionWalkSetting) == 0x000008, "Wrong alignment on FEndCharacterMovementExpressionWalkSetting");
static_assert(sizeof(FEndCharacterMovementExpressionWalkSetting) == 0x000010, "Wrong size on FEndCharacterMovementExpressionWalkSetting");
static_assert(offsetof(FEndCharacterMovementExpressionWalkSetting, BoneSettings) == 0x000000, "Member 'FEndCharacterMovementExpressionWalkSetting::BoneSettings' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterMovementExpressionBehaviorSetting
// 0x0030 (0x0030 - 0x0000)
struct FEndCharacterMovementExpressionBehaviorSetting final
{
public:
	struct FEndCharacterMovementExpressionWalkSetting Walk;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEndCharacterMovementExpressionWalkSetting Run;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEndCharacterMovementExpressionWalkSetting Dash;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCharacterMovementExpressionBehaviorSetting) == 0x000008, "Wrong alignment on FEndCharacterMovementExpressionBehaviorSetting");
static_assert(sizeof(FEndCharacterMovementExpressionBehaviorSetting) == 0x000030, "Wrong size on FEndCharacterMovementExpressionBehaviorSetting");
static_assert(offsetof(FEndCharacterMovementExpressionBehaviorSetting, Walk) == 0x000000, "Member 'FEndCharacterMovementExpressionBehaviorSetting::Walk' has a wrong offset!");
static_assert(offsetof(FEndCharacterMovementExpressionBehaviorSetting, Run) == 0x000010, "Member 'FEndCharacterMovementExpressionBehaviorSetting::Run' has a wrong offset!");
static_assert(offsetof(FEndCharacterMovementExpressionBehaviorSetting, Dash) == 0x000020, "Member 'FEndCharacterMovementExpressionBehaviorSetting::Dash' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterMovementExpressionSetting
// 0x0060 (0x0060 - 0x0000)
struct FEndCharacterMovementExpressionSetting final
{
public:
	struct FEndCharacterMovementExpressionBehaviorSetting Neutral;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEndCharacterMovementExpressionBehaviorSetting Battle;                                            // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCharacterMovementExpressionSetting) == 0x000008, "Wrong alignment on FEndCharacterMovementExpressionSetting");
static_assert(sizeof(FEndCharacterMovementExpressionSetting) == 0x000060, "Wrong size on FEndCharacterMovementExpressionSetting");
static_assert(offsetof(FEndCharacterMovementExpressionSetting, Neutral) == 0x000000, "Member 'FEndCharacterMovementExpressionSetting::Neutral' has a wrong offset!");
static_assert(offsetof(FEndCharacterMovementExpressionSetting, Battle) == 0x000030, "Member 'FEndCharacterMovementExpressionSetting::Battle' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActionWorldTransSetting
// 0x0040 (0x0040 - 0x0000)
struct FEndFieldActionWorldTransSetting final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketOrBoneName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TransformOffset;                                   // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldActionWorldTransSetting) == 0x000010, "Wrong alignment on FEndFieldActionWorldTransSetting");
static_assert(sizeof(FEndFieldActionWorldTransSetting) == 0x000040, "Wrong size on FEndFieldActionWorldTransSetting");
static_assert(offsetof(FEndFieldActionWorldTransSetting, Actor) == 0x000000, "Member 'FEndFieldActionWorldTransSetting::Actor' has a wrong offset!");
static_assert(offsetof(FEndFieldActionWorldTransSetting, SocketOrBoneName) == 0x000008, "Member 'FEndFieldActionWorldTransSetting::SocketOrBoneName' has a wrong offset!");
static_assert(offsetof(FEndFieldActionWorldTransSetting, TransformOffset) == 0x000010, "Member 'FEndFieldActionWorldTransSetting::TransformOffset' has a wrong offset!");

// ScriptStruct EndGame.EndCameraModule
// 0x03F0 (0x03F0 - 0x0000)
struct alignas(0x08) FEndCameraModule
{
public:
	uint8                                         Pad_0[0x3F0];                                      // 0x0000(0x03F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCameraModule) == 0x000008, "Wrong alignment on FEndCameraModule");
static_assert(sizeof(FEndCameraModule) == 0x0003F0, "Wrong size on FEndCameraModule");

// ScriptStruct EndGame.EndHookShotCameraModule
// 0x0038 (0x0428 - 0x03F0)
struct FEndHookShotCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x38];                                     // 0x03F0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndHookShotCameraModule) == 0x000008, "Wrong alignment on FEndHookShotCameraModule");
static_assert(sizeof(FEndHookShotCameraModule) == 0x000428, "Wrong size on FEndHookShotCameraModule");

// ScriptStruct EndGame.RigUnit_EndAim_DebugSettings
// 0x0070 (0x0070 - 0x0000)
struct FRigUnit_EndAim_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SimulateEffectors;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSimulateExtension;                                // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 EffectorTargetItems;                               // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndAim_DebugSettings) == 0x000010, "Wrong alignment on FRigUnit_EndAim_DebugSettings");
static_assert(sizeof(FRigUnit_EndAim_DebugSettings) == 0x000070, "Wrong size on FRigUnit_EndAim_DebugSettings");
static_assert(offsetof(FRigUnit_EndAim_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndAim_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_DebugSettings, Scale) == 0x000004, "Member 'FRigUnit_EndAim_DebugSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_DebugSettings, WorldOffset) == 0x000010, "Member 'FRigUnit_EndAim_DebugSettings::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_DebugSettings, SimulateEffectors) == 0x000040, "Member 'FRigUnit_EndAim_DebugSettings::SimulateEffectors' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_DebugSettings, bSimulateExtension) == 0x000050, "Member 'FRigUnit_EndAim_DebugSettings::bSimulateExtension' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_DebugSettings, EffectorTargetItems) == 0x000058, "Member 'FRigUnit_EndAim_DebugSettings::EffectorTargetItems' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioExpressionBoneAnimation
// 0x0048 (0x0048 - 0x0000)
struct FRigUnit_EndLipSyncAudioExpressionBoneAnimation final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditive;                                         // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideTranslation;                              // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRotation;                                 // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AudioPowerSmallTranslation;                        // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AudioPowerLargeTranslation;                        // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AudioPowerSmallRotation;                           // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AudioPowerLargeRotation;                           // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              AudioPowerMappedRange;                             // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation) == 0x000004, "Wrong alignment on FRigUnit_EndLipSyncAudioExpressionBoneAnimation");
static_assert(sizeof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation) == 0x000048, "Wrong size on FRigUnit_EndLipSyncAudioExpressionBoneAnimation");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation, Item) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimation::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation, bAdditive) == 0x00000C, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimation::bAdditive' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation, bOverrideTranslation) == 0x00000D, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimation::bOverrideTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation, bOverrideRotation) == 0x00000E, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimation::bOverrideRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation, AudioPowerSmallTranslation) == 0x000010, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimation::AudioPowerSmallTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation, AudioPowerLargeTranslation) == 0x00001C, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimation::AudioPowerLargeTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation, AudioPowerSmallRotation) == 0x000028, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimation::AudioPowerSmallRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation, AudioPowerLargeRotation) == 0x000034, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimation::AudioPowerLargeRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimation, AudioPowerMappedRange) == 0x000040, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimation::AudioPowerMappedRange' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioExpression_Settings
// 0x0030 (0x0030 - 0x0000)
struct FRigUnit_EndLipSyncAudioExpression_Settings final
{
public:
	float                                         AudioPowerTimeOffset;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioPowerAttenuationSpeed;                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioPowerMax;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivateBlendTime;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeactivateBlendTime;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioPowerUpBlendTime;                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioPowerDownBlendTime;                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndLipSyncAudioExpressionBoneAnimation> BoneAnimations;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioExpression_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndLipSyncAudioExpression_Settings");
static_assert(sizeof(FRigUnit_EndLipSyncAudioExpression_Settings) == 0x000030, "Wrong size on FRigUnit_EndLipSyncAudioExpression_Settings");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Settings, AudioPowerTimeOffset) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioExpression_Settings::AudioPowerTimeOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Settings, AudioPowerAttenuationSpeed) == 0x000004, "Member 'FRigUnit_EndLipSyncAudioExpression_Settings::AudioPowerAttenuationSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Settings, AudioPowerMax) == 0x000008, "Member 'FRigUnit_EndLipSyncAudioExpression_Settings::AudioPowerMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Settings, ActivateBlendTime) == 0x00000C, "Member 'FRigUnit_EndLipSyncAudioExpression_Settings::ActivateBlendTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Settings, DeactivateBlendTime) == 0x000010, "Member 'FRigUnit_EndLipSyncAudioExpression_Settings::DeactivateBlendTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Settings, AudioPowerUpBlendTime) == 0x000014, "Member 'FRigUnit_EndLipSyncAudioExpression_Settings::AudioPowerUpBlendTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Settings, AudioPowerDownBlendTime) == 0x000018, "Member 'FRigUnit_EndLipSyncAudioExpression_Settings::AudioPowerDownBlendTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Settings, BoneAnimations) == 0x000020, "Member 'FRigUnit_EndLipSyncAudioExpression_Settings::BoneAnimations' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestAction
// 0x0140 (0x0140 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x10) FEndAIInterestAction
{
public:
	uint8                                         Pad_0[0x110];                                      // 0x0000(0x0110)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUpdatableWhenAIStop;                              // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0114(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EEndAIInterestActionTag>               Tags;                                              // 0x0120(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	EEndAIIntentionPriority                       Priority;                                          // 0x0130(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIInterestActionState                     CurrentState;                                      // 0x0131(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Index;                                             // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
#pragma pack(pop)
static_assert(alignof(FEndAIInterestAction) == 0x000010, "Wrong alignment on FEndAIInterestAction");
static_assert(sizeof(FEndAIInterestAction) == 0x000140, "Wrong size on FEndAIInterestAction");
static_assert(offsetof(FEndAIInterestAction, bUpdatableWhenAIStop) == 0x000110, "Member 'FEndAIInterestAction::bUpdatableWhenAIStop' has a wrong offset!");
static_assert(offsetof(FEndAIInterestAction, Name) == 0x000114, "Member 'FEndAIInterestAction::Name' has a wrong offset!");
static_assert(offsetof(FEndAIInterestAction, Tags) == 0x000120, "Member 'FEndAIInterestAction::Tags' has a wrong offset!");
static_assert(offsetof(FEndAIInterestAction, Priority) == 0x000130, "Member 'FEndAIInterestAction::Priority' has a wrong offset!");
static_assert(offsetof(FEndAIInterestAction, CurrentState) == 0x000131, "Member 'FEndAIInterestAction::CurrentState' has a wrong offset!");
static_assert(offsetof(FEndAIInterestAction, Index) == 0x000134, "Member 'FEndAIInterestAction::Index' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionOverrideIdleVariation
// 0x0050 (0x0190 - 0x0140)
struct FEndAIInterestActionOverrideIdleVariation final : public FEndAIInterestAction
{
public:
	uint8                                         Pad_138[0x58];                                     // 0x0138(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionOverrideIdleVariation) == 0x000010, "Wrong alignment on FEndAIInterestActionOverrideIdleVariation");
static_assert(sizeof(FEndAIInterestActionOverrideIdleVariation) == 0x000190, "Wrong size on FEndAIInterestActionOverrideIdleVariation");

// ScriptStruct EndGame.AnimNode_EndCopyBoneTransforms
// 0x0000 (0x00C8 - 0x00C8)
struct FAnimNode_EndCopyBoneTransforms final : public FAnimNode_SkeletalControlBase
{
};
static_assert(alignof(FAnimNode_EndCopyBoneTransforms) == 0x000008, "Wrong alignment on FAnimNode_EndCopyBoneTransforms");
static_assert(sizeof(FAnimNode_EndCopyBoneTransforms) == 0x0000C8, "Wrong size on FAnimNode_EndCopyBoneTransforms");

// ScriptStruct EndGame.EndReinsHandSplineConstraint
// 0x0070 (0x0070 - 0x0000)
struct FEndReinsHandSplineConstraint final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         ChainBone;                                         // 0x000C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableConstraint;                                 // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         ConstraintBone;                                    // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkeletalMeshComponent>  ConstraintMesh;                                    // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConstraintSocketName;                              // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstraintLocation;                                // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstraintOffsetLocation;                          // 0x004C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstraintDirection;                               // 0x0058(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ConstraintOffsetRotation;                          // 0x0064(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndReinsHandSplineConstraint) == 0x000004, "Wrong alignment on FEndReinsHandSplineConstraint");
static_assert(sizeof(FEndReinsHandSplineConstraint) == 0x000070, "Wrong size on FEndReinsHandSplineConstraint");
static_assert(offsetof(FEndReinsHandSplineConstraint, Name) == 0x000000, "Member 'FEndReinsHandSplineConstraint::Name' has a wrong offset!");
static_assert(offsetof(FEndReinsHandSplineConstraint, ChainIndex) == 0x000008, "Member 'FEndReinsHandSplineConstraint::ChainIndex' has a wrong offset!");
static_assert(offsetof(FEndReinsHandSplineConstraint, ChainBone) == 0x00000C, "Member 'FEndReinsHandSplineConstraint::ChainBone' has a wrong offset!");
static_assert(offsetof(FEndReinsHandSplineConstraint, bEnableConstraint) == 0x00001C, "Member 'FEndReinsHandSplineConstraint::bEnableConstraint' has a wrong offset!");
static_assert(offsetof(FEndReinsHandSplineConstraint, ConstraintBone) == 0x000020, "Member 'FEndReinsHandSplineConstraint::ConstraintBone' has a wrong offset!");
static_assert(offsetof(FEndReinsHandSplineConstraint, ConstraintMesh) == 0x000030, "Member 'FEndReinsHandSplineConstraint::ConstraintMesh' has a wrong offset!");
static_assert(offsetof(FEndReinsHandSplineConstraint, ConstraintSocketName) == 0x000038, "Member 'FEndReinsHandSplineConstraint::ConstraintSocketName' has a wrong offset!");
static_assert(offsetof(FEndReinsHandSplineConstraint, ConstraintLocation) == 0x000040, "Member 'FEndReinsHandSplineConstraint::ConstraintLocation' has a wrong offset!");
static_assert(offsetof(FEndReinsHandSplineConstraint, ConstraintOffsetLocation) == 0x00004C, "Member 'FEndReinsHandSplineConstraint::ConstraintOffsetLocation' has a wrong offset!");
static_assert(offsetof(FEndReinsHandSplineConstraint, ConstraintDirection) == 0x000058, "Member 'FEndReinsHandSplineConstraint::ConstraintDirection' has a wrong offset!");
static_assert(offsetof(FEndReinsHandSplineConstraint, ConstraintOffsetRotation) == 0x000064, "Member 'FEndReinsHandSplineConstraint::ConstraintOffsetRotation' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndFacialPrimary
// 0x0000 (0x0048 - 0x0048)
struct FAnimNode_EndFacialPrimary final : public FAnimNode_Slot
{
};
static_assert(alignof(FAnimNode_EndFacialPrimary) == 0x000008, "Wrong alignment on FAnimNode_EndFacialPrimary");
static_assert(sizeof(FAnimNode_EndFacialPrimary) == 0x000048, "Wrong size on FAnimNode_EndFacialPrimary");

// ScriptStruct EndGame.SummonComboAbility
// 0x0018 (0x0018 - 0x0000)
struct FSummonComboAbility final
{
public:
	class FName                                   ComboID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AbilityList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummonComboAbility) == 0x000008, "Wrong alignment on FSummonComboAbility");
static_assert(sizeof(FSummonComboAbility) == 0x000018, "Wrong size on FSummonComboAbility");
static_assert(offsetof(FSummonComboAbility, ComboID) == 0x000000, "Member 'FSummonComboAbility::ComboID' has a wrong offset!");
static_assert(offsetof(FSummonComboAbility, AbilityList) == 0x000008, "Member 'FSummonComboAbility::AbilityList' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleCameraModule
// 0x00F0 (0x04E0 - 0x03F0)
struct alignas(0x10) FEndVehicleCameraModule : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0xF0];                                     // 0x03F0(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndVehicleCameraModule) == 0x000010, "Wrong alignment on FEndVehicleCameraModule");
static_assert(sizeof(FEndVehicleCameraModule) == 0x0004E0, "Wrong size on FEndVehicleCameraModule");

// ScriptStruct EndGame.End3DAudioSimpleCylinder
// 0x0038 (0x0038 - 0x0000)
struct FEnd3DAudioSimpleCylinder final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Enable;                                            // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSendStateTriggerPlayingOnly;                     // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StateTriggerOnEnter;                               // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StateTriggerOnLeave;                               // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnd3DAudioSimpleCylinder) == 0x000008, "Wrong alignment on FEnd3DAudioSimpleCylinder");
static_assert(sizeof(FEnd3DAudioSimpleCylinder) == 0x000038, "Wrong size on FEnd3DAudioSimpleCylinder");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, Enable) == 0x000002, "Member 'FEnd3DAudioSimpleCylinder::Enable' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, Radius) == 0x000004, "Member 'FEnd3DAudioSimpleCylinder::Radius' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, HalfHeight) == 0x000008, "Member 'FEnd3DAudioSimpleCylinder::HalfHeight' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, HeightOffset) == 0x00000C, "Member 'FEnd3DAudioSimpleCylinder::HeightOffset' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, IsSendStateTriggerPlayingOnly) == 0x000010, "Member 'FEnd3DAudioSimpleCylinder::IsSendStateTriggerPlayingOnly' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, StateTriggerOnEnter) == 0x000018, "Member 'FEnd3DAudioSimpleCylinder::StateTriggerOnEnter' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, StateTriggerOnLeave) == 0x000028, "Member 'FEnd3DAudioSimpleCylinder::StateTriggerOnLeave' has a wrong offset!");

// ScriptStruct EndGame.EndMobPrefabBoneControlRegistryOverride
// 0x001C (0x001C - 0x0000)
struct FEndMobPrefabBoneControlRegistryOverride final
{
public:
	EEndControlBone                               Bone;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOffsetMode;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Translation;                                       // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMobPrefabBoneControlRegistryOverride) == 0x000004, "Wrong alignment on FEndMobPrefabBoneControlRegistryOverride");
static_assert(sizeof(FEndMobPrefabBoneControlRegistryOverride) == 0x00001C, "Wrong size on FEndMobPrefabBoneControlRegistryOverride");
static_assert(offsetof(FEndMobPrefabBoneControlRegistryOverride, Bone) == 0x000000, "Member 'FEndMobPrefabBoneControlRegistryOverride::Bone' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabBoneControlRegistryOverride, bOffsetMode) == 0x000001, "Member 'FEndMobPrefabBoneControlRegistryOverride::bOffsetMode' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabBoneControlRegistryOverride, Translation) == 0x000004, "Member 'FEndMobPrefabBoneControlRegistryOverride::Translation' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabBoneControlRegistryOverride, Rotation) == 0x000010, "Member 'FEndMobPrefabBoneControlRegistryOverride::Rotation' has a wrong offset!");

// ScriptStruct EndGame.EndMobPrefabRegistryOverride
// 0x01C8 (0x01C8 - 0x0000)
struct FEndMobPrefabRegistryOverride final
{
public:
	class FName                                   CharaSpecID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UEndAssetDataAsset>      CharaSpecDataAsset;                                // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetTranslation;                                 // 0x0058(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0064(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideFitGroundType;                            // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMobPrefabFitGroundType                    FitGroundType;                                     // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EWeaponSlot, class FName>                AccessorIds;                                       // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      LookAtTargetList;                                  // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TMap<EWeaponSlot, TSoftClassPtr<class UClass>> InstanceOverrideWeapons;                           // 0x0118(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EWeaponSlot, TSubclassOf<class AEndSkeletalMeshActorBase>> OverrideWeapons;                                   // 0x0168(0x0050)(Deprecated, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FEndMobPrefabBoneControlRegistryOverride> BoneControls;                                      // 0x01B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMobPrefabRegistryOverride) == 0x000008, "Wrong alignment on FEndMobPrefabRegistryOverride");
static_assert(sizeof(FEndMobPrefabRegistryOverride) == 0x0001C8, "Wrong size on FEndMobPrefabRegistryOverride");
static_assert(offsetof(FEndMobPrefabRegistryOverride, CharaSpecID) == 0x000000, "Member 'FEndMobPrefabRegistryOverride::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, CharaSpecDataAsset) == 0x000008, "Member 'FEndMobPrefabRegistryOverride::CharaSpecDataAsset' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, CharacterClass) == 0x000030, "Member 'FEndMobPrefabRegistryOverride::CharacterClass' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, OffsetTranslation) == 0x000058, "Member 'FEndMobPrefabRegistryOverride::OffsetTranslation' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, OffsetRotation) == 0x000064, "Member 'FEndMobPrefabRegistryOverride::OffsetRotation' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, bOverrideFitGroundType) == 0x000070, "Member 'FEndMobPrefabRegistryOverride::bOverrideFitGroundType' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, FitGroundType) == 0x000071, "Member 'FEndMobPrefabRegistryOverride::FitGroundType' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, AccessorIds) == 0x000078, "Member 'FEndMobPrefabRegistryOverride::AccessorIds' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, LookAtTargetList) == 0x0000C8, "Member 'FEndMobPrefabRegistryOverride::LookAtTargetList' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, InstanceOverrideWeapons) == 0x000118, "Member 'FEndMobPrefabRegistryOverride::InstanceOverrideWeapons' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, OverrideWeapons) == 0x000168, "Member 'FEndMobPrefabRegistryOverride::OverrideWeapons' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistryOverride, BoneControls) == 0x0001B8, "Member 'FEndMobPrefabRegistryOverride::BoneControls' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndFacialSecondary
// 0x0010 (0x03A0 - 0x0390)
struct FAnimNode_EndFacialSecondary final : public FAnimNode_HSFLipSync
{
public:
	struct FPoseLink                              Source;                                            // 0x0388(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndFacialSecondary) == 0x000010, "Wrong alignment on FAnimNode_EndFacialSecondary");
static_assert(sizeof(FAnimNode_EndFacialSecondary) == 0x0003A0, "Wrong size on FAnimNode_EndFacialSecondary");
static_assert(offsetof(FAnimNode_EndFacialSecondary, Source) == 0x000388, "Member 'FAnimNode_EndFacialSecondary::Source' has a wrong offset!");

// ScriptStruct EndGame.EndExtensionAIStateSetting
// 0x000F (0x000F - 0x0000)
struct FEndExtensionAIStateSetting final
{
public:
	EEndExtensionAIStateDoNothing                 DoNothing;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateConnectEncount            ConnectEncount;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateBattle                    Battle;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateStay                      Stay;                                              // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateMoveTo                    MoveTo;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateLead                      Lead;                                              // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateFollow                    Follow;                                            // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateWandering                 Wandering;                                         // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateAnimation                 Animation;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateUnique                    Unique;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateInterest                  Interest;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateWildAnimal                WildAnimal;                                        // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateBattleEvacuation          BattleEvacuation;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateHintAnimal                HintAnimal;                                        // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtensionAIStateFieldAction               FieldAction;                                       // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndExtensionAIStateSetting) == 0x000001, "Wrong alignment on FEndExtensionAIStateSetting");
static_assert(sizeof(FEndExtensionAIStateSetting) == 0x00000F, "Wrong size on FEndExtensionAIStateSetting");
static_assert(offsetof(FEndExtensionAIStateSetting, DoNothing) == 0x000000, "Member 'FEndExtensionAIStateSetting::DoNothing' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, ConnectEncount) == 0x000001, "Member 'FEndExtensionAIStateSetting::ConnectEncount' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, Battle) == 0x000002, "Member 'FEndExtensionAIStateSetting::Battle' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, Stay) == 0x000003, "Member 'FEndExtensionAIStateSetting::Stay' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, MoveTo) == 0x000004, "Member 'FEndExtensionAIStateSetting::MoveTo' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, Lead) == 0x000005, "Member 'FEndExtensionAIStateSetting::Lead' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, Follow) == 0x000006, "Member 'FEndExtensionAIStateSetting::Follow' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, Wandering) == 0x000007, "Member 'FEndExtensionAIStateSetting::Wandering' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, Animation) == 0x000008, "Member 'FEndExtensionAIStateSetting::Animation' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, Unique) == 0x000009, "Member 'FEndExtensionAIStateSetting::Unique' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, Interest) == 0x00000A, "Member 'FEndExtensionAIStateSetting::Interest' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, WildAnimal) == 0x00000B, "Member 'FEndExtensionAIStateSetting::WildAnimal' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, BattleEvacuation) == 0x00000C, "Member 'FEndExtensionAIStateSetting::BattleEvacuation' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, HintAnimal) == 0x00000D, "Member 'FEndExtensionAIStateSetting::HintAnimal' has a wrong offset!");
static_assert(offsetof(FEndExtensionAIStateSetting, FieldAction) == 0x00000E, "Member 'FEndExtensionAIStateSetting::FieldAction' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndFullBodySnapshot
// 0x0000 (0x00C8 - 0x00C8)
struct FAnimNode_EndFullBodySnapshot final : public FAnimNode_SkeletalControlBase
{
};
static_assert(alignof(FAnimNode_EndFullBodySnapshot) == 0x000008, "Wrong alignment on FAnimNode_EndFullBodySnapshot");
static_assert(sizeof(FAnimNode_EndFullBodySnapshot) == 0x0000C8, "Wrong size on FAnimNode_EndFullBodySnapshot");

// ScriptStruct EndGame.EndFeelerTornadeTimeRateAndSize
// 0x000C (0x000C - 0x0000)
struct FEndFeelerTornadeTimeRateAndSize final
{
public:
	float                                         TimeRate;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRateSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerTornadeTimeRateAndSize) == 0x000004, "Wrong alignment on FEndFeelerTornadeTimeRateAndSize");
static_assert(sizeof(FEndFeelerTornadeTimeRateAndSize) == 0x00000C, "Wrong size on FEndFeelerTornadeTimeRateAndSize");
static_assert(offsetof(FEndFeelerTornadeTimeRateAndSize, TimeRate) == 0x000000, "Member 'FEndFeelerTornadeTimeRateAndSize::TimeRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeTimeRateAndSize, TimeRateSpeed) == 0x000004, "Member 'FEndFeelerTornadeTimeRateAndSize::TimeRateSpeed' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeTimeRateAndSize, Size) == 0x000008, "Member 'FEndFeelerTornadeTimeRateAndSize::Size' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndFullBodySolver
// 0x0000 (0x00C8 - 0x00C8)
struct FAnimNode_EndFullBodySolver final : public FAnimNode_SkeletalControlBase
{
};
static_assert(alignof(FAnimNode_EndFullBodySolver) == 0x000008, "Wrong alignment on FAnimNode_EndFullBodySolver");
static_assert(sizeof(FAnimNode_EndFullBodySolver) == 0x0000C8, "Wrong size on FAnimNode_EndFullBodySolver");

// ScriptStruct EndGame.EndPixelCoordinateAnimationParameterKey
// 0x0018 (0x0018 - 0x0000)
struct FEndPixelCoordinateAnimationParameterKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConstant;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialParameterExtraPixelCoordinate Parameter;                                         // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPixelCoordinateAnimationParameterKey) == 0x000004, "Wrong alignment on FEndPixelCoordinateAnimationParameterKey");
static_assert(sizeof(FEndPixelCoordinateAnimationParameterKey) == 0x000018, "Wrong size on FEndPixelCoordinateAnimationParameterKey");
static_assert(offsetof(FEndPixelCoordinateAnimationParameterKey, Time) == 0x000000, "Member 'FEndPixelCoordinateAnimationParameterKey::Time' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationParameterKey, bConstant) == 0x000004, "Member 'FEndPixelCoordinateAnimationParameterKey::bConstant' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationParameterKey, Parameter) == 0x000008, "Member 'FEndPixelCoordinateAnimationParameterKey::Parameter' has a wrong offset!");

// ScriptStruct EndGame.EndPixelCoordinateAnimationParameter
// 0x0028 (0x0038 - 0x0010)
struct FEndPixelCoordinateAnimationParameter : public FMaterialParameterExtraPixelCoordinate
{
public:
	TArray<struct FEndPixelCoordinateAnimationParameterKey> Keys;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseAnimation;                                     // 0x0020(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialParameterExtraPixelCoordinate EndParameter;                                      // 0x0024(0x0010)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPixelCoordinateAnimationParameter) == 0x000008, "Wrong alignment on FEndPixelCoordinateAnimationParameter");
static_assert(sizeof(FEndPixelCoordinateAnimationParameter) == 0x000038, "Wrong size on FEndPixelCoordinateAnimationParameter");
static_assert(offsetof(FEndPixelCoordinateAnimationParameter, Keys) == 0x000010, "Member 'FEndPixelCoordinateAnimationParameter::Keys' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationParameter, bUseAnimation) == 0x000020, "Member 'FEndPixelCoordinateAnimationParameter::bUseAnimation' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationParameter, EndParameter) == 0x000024, "Member 'FEndPixelCoordinateAnimationParameter::EndParameter' has a wrong offset!");

// ScriptStruct EndGame.EndPixelCoordinateAnimationDefaultOnlyMaterialSettings
// 0x0028 (0x0060 - 0x0038)
struct FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings final : public FEndPixelCoordinateAnimationParameter
{
public:
	TArray<class FName>                           MaterialNames;                                     // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           MeshNames;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        Curve;                                             // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings) == 0x000008, "Wrong alignment on FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings");
static_assert(sizeof(FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings) == 0x000060, "Wrong size on FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings");
static_assert(offsetof(FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings, MaterialNames) == 0x000038, "Member 'FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings::MaterialNames' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings, MeshNames) == 0x000048, "Member 'FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings::MeshNames' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings, Curve) == 0x000058, "Member 'FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings::Curve' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings, Duration) == 0x00005C, "Member 'FEndPixelCoordinateAnimationDefaultOnlyMaterialSettings::Duration' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboCaptureMinecartCameraModule
// 0x0040 (0x0430 - 0x03F0)
struct FEndChocoboCaptureMinecartCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x40];                                     // 0x03F0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndChocoboCaptureMinecartCameraModule) == 0x000008, "Wrong alignment on FEndChocoboCaptureMinecartCameraModule");
static_assert(sizeof(FEndChocoboCaptureMinecartCameraModule) == 0x000430, "Wrong size on FEndChocoboCaptureMinecartCameraModule");

// ScriptStruct EndGame.EndAdjustLengthBattleCameraModule
// 0x00C8 (0x04B8 - 0x03F0)
struct FEndAdjustLengthBattleCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0xC8];                                     // 0x03F0(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAdjustLengthBattleCameraModule) == 0x000008, "Wrong alignment on FEndAdjustLengthBattleCameraModule");
static_assert(sizeof(FEndAdjustLengthBattleCameraModule) == 0x0004B8, "Wrong size on FEndAdjustLengthBattleCameraModule");

// ScriptStruct EndGame.EndFeelerSplineTimeRateAndSize
// 0x000C (0x000C - 0x0000)
struct FEndFeelerSplineTimeRateAndSize final
{
public:
	float                                         TimeRate;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRateSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerSplineTimeRateAndSize) == 0x000004, "Wrong alignment on FEndFeelerSplineTimeRateAndSize");
static_assert(sizeof(FEndFeelerSplineTimeRateAndSize) == 0x00000C, "Wrong size on FEndFeelerSplineTimeRateAndSize");
static_assert(offsetof(FEndFeelerSplineTimeRateAndSize, TimeRate) == 0x000000, "Member 'FEndFeelerSplineTimeRateAndSize::TimeRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineTimeRateAndSize, TimeRateSpeed) == 0x000004, "Member 'FEndFeelerSplineTimeRateAndSize::TimeRateSpeed' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineTimeRateAndSize, Size) == 0x000008, "Member 'FEndFeelerSplineTimeRateAndSize::Size' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerSplineInstanceContext
// 0x00B0 (0x00B0 - 0x0000)
struct FEndFeelerSplineInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerSplineTimeRateAndSize        Horizontal;                                        // 0x0004(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VerticalHeightOffset;                              // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerSplineTimeRateAndSize        PrimaryVertical;                                   // 0x0014(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerSplineTimeRateAndSize        SecondaryVertical;                                 // 0x0020(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerSplineTimeRateAndSize        PrimaryRoll;                                       // 0x002C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerSplineTimeRateAndSize        SecondaryRoll;                                     // 0x0038(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetExtrusionDistance;                           // 0x0044(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentExtrusionDistance;                          // 0x0048(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtrusionWaitTimer;                                // 0x004C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseScale;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentTransform;                                  // 0x0060(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0090(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstancedStaticMeshComponentIndex;                 // 0x0098(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstancedStaticMeshInstanceIndex;                  // 0x009C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x00A0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0xF];                                       // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerSplineInstanceContext) == 0x000010, "Wrong alignment on FEndFeelerSplineInstanceContext");
static_assert(sizeof(FEndFeelerSplineInstanceContext) == 0x0000B0, "Wrong size on FEndFeelerSplineInstanceContext");
static_assert(offsetof(FEndFeelerSplineInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndFeelerSplineInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, Horizontal) == 0x000004, "Member 'FEndFeelerSplineInstanceContext::Horizontal' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, VerticalHeightOffset) == 0x000010, "Member 'FEndFeelerSplineInstanceContext::VerticalHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, PrimaryVertical) == 0x000014, "Member 'FEndFeelerSplineInstanceContext::PrimaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, SecondaryVertical) == 0x000020, "Member 'FEndFeelerSplineInstanceContext::SecondaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, PrimaryRoll) == 0x00002C, "Member 'FEndFeelerSplineInstanceContext::PrimaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, SecondaryRoll) == 0x000038, "Member 'FEndFeelerSplineInstanceContext::SecondaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, TargetExtrusionDistance) == 0x000044, "Member 'FEndFeelerSplineInstanceContext::TargetExtrusionDistance' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, CurrentExtrusionDistance) == 0x000048, "Member 'FEndFeelerSplineInstanceContext::CurrentExtrusionDistance' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, ExtrusionWaitTimer) == 0x00004C, "Member 'FEndFeelerSplineInstanceContext::ExtrusionWaitTimer' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, BaseScale) == 0x000050, "Member 'FEndFeelerSplineInstanceContext::BaseScale' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, CurrentTransform) == 0x000060, "Member 'FEndFeelerSplineInstanceContext::CurrentTransform' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, SkeletalMeshComponent) == 0x000090, "Member 'FEndFeelerSplineInstanceContext::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, InstancedStaticMeshComponentIndex) == 0x000098, "Member 'FEndFeelerSplineInstanceContext::InstancedStaticMeshComponentIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, InstancedStaticMeshInstanceIndex) == 0x00009C, "Member 'FEndFeelerSplineInstanceContext::InstancedStaticMeshInstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineInstanceContext, bVisibility) == 0x0000A0, "Member 'FEndFeelerSplineInstanceContext::bVisibility' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndInertialization
// 0x0018 (0x0090 - 0x0078)
struct FAnimNode_EndInertialization final : public FAnimNode_Inertialization
{
public:
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndInertialization) == 0x000008, "Wrong alignment on FAnimNode_EndInertialization");
static_assert(sizeof(FAnimNode_EndInertialization) == 0x000090, "Wrong size on FAnimNode_EndInertialization");

// ScriptStruct EndGame.EndRopePointConstraint
// 0x006C (0x006C - 0x0000)
struct FEndRopePointConstraint final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableConstraint;                                 // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         ConstraintBone;                                    // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkeletalMeshComponent>  ConstraintMesh;                                    // 0x0020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConstraintSocketName;                              // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstraintLocation;                                // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstraintOffsetLocation;                          // 0x003C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstraintDirection;                               // 0x0048(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ConstraintOffsetRotation;                          // 0x0054(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstraintDistance;                                // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstraintStiffness;                               // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolveOnResetFrameOnly;                            // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndRopePointConstraint) == 0x000004, "Wrong alignment on FEndRopePointConstraint");
static_assert(sizeof(FEndRopePointConstraint) == 0x00006C, "Wrong size on FEndRopePointConstraint");
static_assert(offsetof(FEndRopePointConstraint, Name) == 0x000000, "Member 'FEndRopePointConstraint::Name' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, Distance) == 0x000008, "Member 'FEndRopePointConstraint::Distance' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, bEnableConstraint) == 0x00000C, "Member 'FEndRopePointConstraint::bEnableConstraint' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, ConstraintBone) == 0x000010, "Member 'FEndRopePointConstraint::ConstraintBone' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, ConstraintMesh) == 0x000020, "Member 'FEndRopePointConstraint::ConstraintMesh' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, ConstraintSocketName) == 0x000028, "Member 'FEndRopePointConstraint::ConstraintSocketName' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, ConstraintLocation) == 0x000030, "Member 'FEndRopePointConstraint::ConstraintLocation' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, ConstraintOffsetLocation) == 0x00003C, "Member 'FEndRopePointConstraint::ConstraintOffsetLocation' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, ConstraintDirection) == 0x000048, "Member 'FEndRopePointConstraint::ConstraintDirection' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, ConstraintOffsetRotation) == 0x000054, "Member 'FEndRopePointConstraint::ConstraintOffsetRotation' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, ConstraintDistance) == 0x000060, "Member 'FEndRopePointConstraint::ConstraintDistance' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, ConstraintStiffness) == 0x000064, "Member 'FEndRopePointConstraint::ConstraintStiffness' has a wrong offset!");
static_assert(offsetof(FEndRopePointConstraint, bSolveOnResetFrameOnly) == 0x000068, "Member 'FEndRopePointConstraint::bSolveOnResetFrameOnly' has a wrong offset!");

// ScriptStruct EndGame.EndLocomotionBlendSpacePlayerRotationRate
// 0x0018 (0x0018 - 0x0000)
struct FEndLocomotionBlendSpacePlayerRotationRate final
{
public:
	EEndAnimBehaviorMode                          BehaviorMode;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionState                           LocomotionState;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationRate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ApplyTimeRatioRange;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ApplyAnimationSet;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLocomotionBlendSpacePlayerRotationRate) == 0x000004, "Wrong alignment on FEndLocomotionBlendSpacePlayerRotationRate");
static_assert(sizeof(FEndLocomotionBlendSpacePlayerRotationRate) == 0x000018, "Wrong size on FEndLocomotionBlendSpacePlayerRotationRate");
static_assert(offsetof(FEndLocomotionBlendSpacePlayerRotationRate, BehaviorMode) == 0x000000, "Member 'FEndLocomotionBlendSpacePlayerRotationRate::BehaviorMode' has a wrong offset!");
static_assert(offsetof(FEndLocomotionBlendSpacePlayerRotationRate, LocomotionState) == 0x000001, "Member 'FEndLocomotionBlendSpacePlayerRotationRate::LocomotionState' has a wrong offset!");
static_assert(offsetof(FEndLocomotionBlendSpacePlayerRotationRate, RotationRate) == 0x000004, "Member 'FEndLocomotionBlendSpacePlayerRotationRate::RotationRate' has a wrong offset!");
static_assert(offsetof(FEndLocomotionBlendSpacePlayerRotationRate, ApplyTimeRatioRange) == 0x000008, "Member 'FEndLocomotionBlendSpacePlayerRotationRate::ApplyTimeRatioRange' has a wrong offset!");
static_assert(offsetof(FEndLocomotionBlendSpacePlayerRotationRate, ApplyAnimationSet) == 0x000010, "Member 'FEndLocomotionBlendSpacePlayerRotationRate::ApplyAnimationSet' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndLocomotionBlendSpacePlayer
// 0x0028 (0x0110 - 0x00E8)
struct FAnimNode_EndLocomotionBlendSpacePlayer final : public FAnimNode_BlendSpacePlayer
{
public:
	EEndLocomotionState                           LocomotionState;                                   // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndLocomotionBlendSpacePlayerRotationRate> RotationRateSettings;                              // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndLocomotionBlendSpacePlayer) == 0x000008, "Wrong alignment on FAnimNode_EndLocomotionBlendSpacePlayer");
static_assert(sizeof(FAnimNode_EndLocomotionBlendSpacePlayer) == 0x000110, "Wrong size on FAnimNode_EndLocomotionBlendSpacePlayer");
static_assert(offsetof(FAnimNode_EndLocomotionBlendSpacePlayer, LocomotionState) == 0x0000E8, "Member 'FAnimNode_EndLocomotionBlendSpacePlayer::LocomotionState' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndLocomotionBlendSpacePlayer, RotationRateSettings) == 0x0000F0, "Member 'FAnimNode_EndLocomotionBlendSpacePlayer::RotationRateSettings' has a wrong offset!");

// ScriptStruct EndGame.OverrideBattleParam
// 0x0014 (0x0014 - 0x0000)
struct FOverrideBattleParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatDistance;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CautionDistance;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseParamFile;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIPCBattleParamType                          OverrideType;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOverrideBattleParam) == 0x000004, "Wrong alignment on FOverrideBattleParam");
static_assert(sizeof(FOverrideBattleParam) == 0x000014, "Wrong size on FOverrideBattleParam");
static_assert(offsetof(FOverrideBattleParam, Name) == 0x000000, "Member 'FOverrideBattleParam::Name' has a wrong offset!");
static_assert(offsetof(FOverrideBattleParam, CombatDistance) == 0x000008, "Member 'FOverrideBattleParam::CombatDistance' has a wrong offset!");
static_assert(offsetof(FOverrideBattleParam, CautionDistance) == 0x00000C, "Member 'FOverrideBattleParam::CautionDistance' has a wrong offset!");
static_assert(offsetof(FOverrideBattleParam, bUseParamFile) == 0x000010, "Member 'FOverrideBattleParam::bUseParamFile' has a wrong offset!");
static_assert(offsetof(FOverrideBattleParam, OverrideType) == 0x000011, "Member 'FOverrideBattleParam::OverrideType' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaCoordinateAnimParameters
// 0x0008 (0x0008 - 0x0000)
struct FEndCinemaCoordinateAnimParameters final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCinemaCoordinateAnimParameters) == 0x000004, "Wrong alignment on FEndCinemaCoordinateAnimParameters");
static_assert(sizeof(FEndCinemaCoordinateAnimParameters) == 0x000008, "Wrong size on FEndCinemaCoordinateAnimParameters");
static_assert(offsetof(FEndCinemaCoordinateAnimParameters, ActorName) == 0x000000, "Member 'FEndCinemaCoordinateAnimParameters::ActorName' has a wrong offset!");

// ScriptStruct EndGame.AerialPortalEdge
// 0x0030 (0x0030 - 0x0000)
struct FAerialPortalEdge final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Vert;                                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAerialPortalEdge) == 0x000008, "Wrong alignment on FAerialPortalEdge");
static_assert(sizeof(FAerialPortalEdge) == 0x000030, "Wrong size on FAerialPortalEdge");
static_assert(offsetof(FAerialPortalEdge, Name) == 0x000000, "Member 'FAerialPortalEdge::Name' has a wrong offset!");
static_assert(offsetof(FAerialPortalEdge, Vert) == 0x000008, "Member 'FAerialPortalEdge::Vert' has a wrong offset!");
static_assert(offsetof(FAerialPortalEdge, Center) == 0x000018, "Member 'FAerialPortalEdge::Center' has a wrong offset!");
static_assert(offsetof(FAerialPortalEdge, Normal) == 0x000024, "Member 'FAerialPortalEdge::Normal' has a wrong offset!");

// ScriptStruct EndGame.EndGambitSpawnEnemyInfo
// 0x002C (0x002C - 0x0000)
struct FEndGambitSpawnEnemyInfo final
{
public:
	int32                                         GenerateRate;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GenerateId;                                        // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnOffsetLocationPersonal;                       // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndGambitSpawnWatchingType                   WatchingType;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WatchingActorParam;                                // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WatchingRateParam;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndGambitSpawnLaneSelectionType              SpawnPointSelection;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWatchingOrIntervalTime;                           // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndGambitSpawnEnemyInfo) == 0x000004, "Wrong alignment on FEndGambitSpawnEnemyInfo");
static_assert(sizeof(FEndGambitSpawnEnemyInfo) == 0x00002C, "Wrong size on FEndGambitSpawnEnemyInfo");
static_assert(offsetof(FEndGambitSpawnEnemyInfo, GenerateRate) == 0x000000, "Member 'FEndGambitSpawnEnemyInfo::GenerateRate' has a wrong offset!");
static_assert(offsetof(FEndGambitSpawnEnemyInfo, GenerateId) == 0x000004, "Member 'FEndGambitSpawnEnemyInfo::GenerateId' has a wrong offset!");
static_assert(offsetof(FEndGambitSpawnEnemyInfo, SpawnOffsetLocationPersonal) == 0x00000C, "Member 'FEndGambitSpawnEnemyInfo::SpawnOffsetLocationPersonal' has a wrong offset!");
static_assert(offsetof(FEndGambitSpawnEnemyInfo, WatchingType) == 0x000018, "Member 'FEndGambitSpawnEnemyInfo::WatchingType' has a wrong offset!");
static_assert(offsetof(FEndGambitSpawnEnemyInfo, WatchingActorParam) == 0x00001C, "Member 'FEndGambitSpawnEnemyInfo::WatchingActorParam' has a wrong offset!");
static_assert(offsetof(FEndGambitSpawnEnemyInfo, WatchingRateParam) == 0x000024, "Member 'FEndGambitSpawnEnemyInfo::WatchingRateParam' has a wrong offset!");
static_assert(offsetof(FEndGambitSpawnEnemyInfo, SpawnPointSelection) == 0x000028, "Member 'FEndGambitSpawnEnemyInfo::SpawnPointSelection' has a wrong offset!");
static_assert(offsetof(FEndGambitSpawnEnemyInfo, bWatchingOrIntervalTime) == 0x000029, "Member 'FEndGambitSpawnEnemyInfo::bWatchingOrIntervalTime' has a wrong offset!");

// ScriptStruct EndGame.EndFieldNiblCrawlMoveAnimUnit
// 0x0030 (0x0030 - 0x0000)
struct FEndFieldNiblCrawlMoveAnimUnit final
{
public:
	class FName                                   PlayAnimationName;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrioPlayAnimationName;                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MotionMatchAnimationNames;                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldNiblCrawlMoveAnimUnit) == 0x000008, "Wrong alignment on FEndFieldNiblCrawlMoveAnimUnit");
static_assert(sizeof(FEndFieldNiblCrawlMoveAnimUnit) == 0x000030, "Wrong size on FEndFieldNiblCrawlMoveAnimUnit");
static_assert(offsetof(FEndFieldNiblCrawlMoveAnimUnit, PlayAnimationName) == 0x000000, "Member 'FEndFieldNiblCrawlMoveAnimUnit::PlayAnimationName' has a wrong offset!");
static_assert(offsetof(FEndFieldNiblCrawlMoveAnimUnit, PrioPlayAnimationName) == 0x000008, "Member 'FEndFieldNiblCrawlMoveAnimUnit::PrioPlayAnimationName' has a wrong offset!");
static_assert(offsetof(FEndFieldNiblCrawlMoveAnimUnit, MotionMatchAnimationNames) == 0x000010, "Member 'FEndFieldNiblCrawlMoveAnimUnit::MotionMatchAnimationNames' has a wrong offset!");
static_assert(offsetof(FEndFieldNiblCrawlMoveAnimUnit, BlendInTime) == 0x000020, "Member 'FEndFieldNiblCrawlMoveAnimUnit::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndFieldNiblCrawlMoveAnimUnit, BlendOutTime) == 0x000024, "Member 'FEndFieldNiblCrawlMoveAnimUnit::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndFieldNiblCrawlMoveAnimUnit, PlayRate) == 0x000028, "Member 'FEndFieldNiblCrawlMoveAnimUnit::PlayRate' has a wrong offset!");

// ScriptStruct EndGame.EndLocomotionSequencePlayerRotationRate
// 0x0018 (0x0018 - 0x0000)
struct FEndLocomotionSequencePlayerRotationRate final
{
public:
	EEndAnimBehaviorMode                          BehaviorMode;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionState                           LocomotionState;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationRate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ApplyTimeRatioRange;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ApplyAnimationSet;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLocomotionSequencePlayerRotationRate) == 0x000004, "Wrong alignment on FEndLocomotionSequencePlayerRotationRate");
static_assert(sizeof(FEndLocomotionSequencePlayerRotationRate) == 0x000018, "Wrong size on FEndLocomotionSequencePlayerRotationRate");
static_assert(offsetof(FEndLocomotionSequencePlayerRotationRate, BehaviorMode) == 0x000000, "Member 'FEndLocomotionSequencePlayerRotationRate::BehaviorMode' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSequencePlayerRotationRate, LocomotionState) == 0x000001, "Member 'FEndLocomotionSequencePlayerRotationRate::LocomotionState' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSequencePlayerRotationRate, RotationRate) == 0x000004, "Member 'FEndLocomotionSequencePlayerRotationRate::RotationRate' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSequencePlayerRotationRate, ApplyTimeRatioRange) == 0x000008, "Member 'FEndLocomotionSequencePlayerRotationRate::ApplyTimeRatioRange' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSequencePlayerRotationRate, ApplyAnimationSet) == 0x000010, "Member 'FEndLocomotionSequencePlayerRotationRate::ApplyAnimationSet' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndLocomotionSequencePlayer
// 0x0028 (0x00A8 - 0x0080)
struct FAnimNode_EndLocomotionSequencePlayer final : public FAnimNode_SequencePlayer
{
public:
	EEndLocomotionState                           LocomotionState;                                   // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndLocomotionSequencePlayerRotationRate> RotationRateSettings;                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndLocomotionSequencePlayer) == 0x000008, "Wrong alignment on FAnimNode_EndLocomotionSequencePlayer");
static_assert(sizeof(FAnimNode_EndLocomotionSequencePlayer) == 0x0000A8, "Wrong size on FAnimNode_EndLocomotionSequencePlayer");
static_assert(offsetof(FAnimNode_EndLocomotionSequencePlayer, LocomotionState) == 0x000080, "Member 'FAnimNode_EndLocomotionSequencePlayer::LocomotionState' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndLocomotionSequencePlayer, RotationRateSettings) == 0x000088, "Member 'FAnimNode_EndLocomotionSequencePlayer::RotationRateSettings' has a wrong offset!");

// ScriptStruct EndGame.EndVelocityExpressionBoneSetting
// 0x0028 (0x0028 - 0x0000)
struct FEndVelocityExpressionBoneSetting final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationRate;                                      // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotationSpeed;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVelocityExpressionBoneSetting) == 0x000004, "Wrong alignment on FEndVelocityExpressionBoneSetting");
static_assert(sizeof(FEndVelocityExpressionBoneSetting) == 0x000028, "Wrong size on FEndVelocityExpressionBoneSetting");
static_assert(offsetof(FEndVelocityExpressionBoneSetting, Bone) == 0x000000, "Member 'FEndVelocityExpressionBoneSetting::Bone' has a wrong offset!");
static_assert(offsetof(FEndVelocityExpressionBoneSetting, RotationRate) == 0x000010, "Member 'FEndVelocityExpressionBoneSetting::RotationRate' has a wrong offset!");
static_assert(offsetof(FEndVelocityExpressionBoneSetting, RotationSpeed) == 0x00001C, "Member 'FEndVelocityExpressionBoneSetting::RotationSpeed' has a wrong offset!");
static_assert(offsetof(FEndVelocityExpressionBoneSetting, BlendInTime) == 0x000020, "Member 'FEndVelocityExpressionBoneSetting::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndVelocityExpressionBoneSetting, BlendOutTime) == 0x000024, "Member 'FEndVelocityExpressionBoneSetting::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndAIEnemyFieldSetting
// 0x0010 (0x0010 - 0x0000)
struct FEndAIEnemyFieldSetting final
{
public:
	TSubclassOf<class UEndAIFieldDefinitionBase>  FieldDefinition;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApplyMax;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIEnemyFieldSetting) == 0x000008, "Wrong alignment on FEndAIEnemyFieldSetting");
static_assert(sizeof(FEndAIEnemyFieldSetting) == 0x000010, "Wrong size on FEndAIEnemyFieldSetting");
static_assert(offsetof(FEndAIEnemyFieldSetting, FieldDefinition) == 0x000000, "Member 'FEndAIEnemyFieldSetting::FieldDefinition' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyFieldSetting, ApplyMax) == 0x000008, "Member 'FEndAIEnemyFieldSetting::ApplyMax' has a wrong offset!");

// ScriptStruct EndGame.EndAIEnemyFieldSetting_Territory
// 0x0018 (0x0018 - 0x0000)
struct FEndAIEnemyFieldSetting_Territory final
{
public:
	class FName                                   FieldAIName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndAIEnemyFieldSetting>        DefinitionSettings;                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIEnemyFieldSetting_Territory) == 0x000008, "Wrong alignment on FEndAIEnemyFieldSetting_Territory");
static_assert(sizeof(FEndAIEnemyFieldSetting_Territory) == 0x000018, "Wrong size on FEndAIEnemyFieldSetting_Territory");
static_assert(offsetof(FEndAIEnemyFieldSetting_Territory, FieldAIName) == 0x000000, "Member 'FEndAIEnemyFieldSetting_Territory::FieldAIName' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyFieldSetting_Territory, DefinitionSettings) == 0x000008, "Member 'FEndAIEnemyFieldSetting_Territory::DefinitionSettings' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboLocomotionParam
// 0x0010 (0x0010 - 0x0000)
struct FEndChocoboLocomotionParam final
{
public:
	float                                         RootMotionTranslationScale;                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionTranslationScaleMin;                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSpeed;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSpeedInSwim;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChocoboLocomotionParam) == 0x000004, "Wrong alignment on FEndChocoboLocomotionParam");
static_assert(sizeof(FEndChocoboLocomotionParam) == 0x000010, "Wrong size on FEndChocoboLocomotionParam");
static_assert(offsetof(FEndChocoboLocomotionParam, RootMotionTranslationScale) == 0x000000, "Member 'FEndChocoboLocomotionParam::RootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(FEndChocoboLocomotionParam, RootMotionTranslationScaleMin) == 0x000004, "Member 'FEndChocoboLocomotionParam::RootMotionTranslationScaleMin' has a wrong offset!");
static_assert(offsetof(FEndChocoboLocomotionParam, TargetSpeed) == 0x000008, "Member 'FEndChocoboLocomotionParam::TargetSpeed' has a wrong offset!");
static_assert(offsetof(FEndChocoboLocomotionParam, TargetSpeedInSwim) == 0x00000C, "Member 'FEndChocoboLocomotionParam::TargetSpeedInSwim' has a wrong offset!");

// ScriptStruct EndGame.EndAIReactionInfoDamageSource
// 0x000C (0x000C - 0x0000)
struct FEndAIReactionInfoDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIReactionPlayerType                      PlayerType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIReactionInfoDamageSource) == 0x000004, "Wrong alignment on FEndAIReactionInfoDamageSource");
static_assert(sizeof(FEndAIReactionInfoDamageSource) == 0x00000C, "Wrong size on FEndAIReactionInfoDamageSource");
static_assert(offsetof(FEndAIReactionInfoDamageSource, DamageSourceID) == 0x000000, "Member 'FEndAIReactionInfoDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndAIReactionInfoDamageSource, PlayerType) == 0x000008, "Member 'FEndAIReactionInfoDamageSource::PlayerType' has a wrong offset!");

// ScriptStruct EndGame.EndFieldJumpPointSettingBase
// 0x0050 (0x0050 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x10) FEndFieldJumpPointSettingBase
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableJumpPoint;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FEndFieldJumpPointSettingBase) == 0x000010, "Wrong alignment on FEndFieldJumpPointSettingBase");
static_assert(sizeof(FEndFieldJumpPointSettingBase) == 0x000050, "Wrong size on FEndFieldJumpPointSettingBase");
static_assert(offsetof(FEndFieldJumpPointSettingBase, TargetTransform) == 0x000010, "Member 'FEndFieldJumpPointSettingBase::TargetTransform' has a wrong offset!");
static_assert(offsetof(FEndFieldJumpPointSettingBase, bEnableJumpPoint) == 0x000040, "Member 'FEndFieldJumpPointSettingBase::bEnableJumpPoint' has a wrong offset!");

// ScriptStruct EndGame.EndFieldHookRopeJumpPointSetting
// 0x0050 (0x00A0 - 0x0050)
struct FEndFieldHookRopeJumpPointSetting final : public FEndFieldJumpPointSettingBase
{
public:
	EHookRopeJumpPointType                        JumpPointType;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndFieldActionHookRopeActor*           HookRopeActor;                                     // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndFieldActionClimbingActor*           ClimbingActor;                                     // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GroundAttachActor;                                 // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClimbingPointIndex;                                // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartShowIconSwingAngle;                           // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndShowIconSwingAngle;                             // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseShowSwingNextPointIconDistance;                // 0x0074(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowSwingNextPointIconDistanceMin;                 // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowSwingNextPointIconDistanceMax;                 // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowIconDistanceMin;                               // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowIconDistanceMax;                               // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowIconGroundDistanceCheck;                      // 0x0088(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowIconToGroundDistance;                          // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRayCheckPlayerToJumpPoint;                        // 0x0090(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRayCheckHookPointToJumpPoint;                     // 0x0091(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0xE];                                       // 0x0092(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldHookRopeJumpPointSetting) == 0x000010, "Wrong alignment on FEndFieldHookRopeJumpPointSetting");
static_assert(sizeof(FEndFieldHookRopeJumpPointSetting) == 0x0000A0, "Wrong size on FEndFieldHookRopeJumpPointSetting");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, JumpPointType) == 0x000048, "Member 'FEndFieldHookRopeJumpPointSetting::JumpPointType' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, HookRopeActor) == 0x000050, "Member 'FEndFieldHookRopeJumpPointSetting::HookRopeActor' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, ClimbingActor) == 0x000058, "Member 'FEndFieldHookRopeJumpPointSetting::ClimbingActor' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, GroundAttachActor) == 0x000060, "Member 'FEndFieldHookRopeJumpPointSetting::GroundAttachActor' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, ClimbingPointIndex) == 0x000068, "Member 'FEndFieldHookRopeJumpPointSetting::ClimbingPointIndex' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, StartShowIconSwingAngle) == 0x00006C, "Member 'FEndFieldHookRopeJumpPointSetting::StartShowIconSwingAngle' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, EndShowIconSwingAngle) == 0x000070, "Member 'FEndFieldHookRopeJumpPointSetting::EndShowIconSwingAngle' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, bUseShowSwingNextPointIconDistance) == 0x000074, "Member 'FEndFieldHookRopeJumpPointSetting::bUseShowSwingNextPointIconDistance' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, ShowSwingNextPointIconDistanceMin) == 0x000078, "Member 'FEndFieldHookRopeJumpPointSetting::ShowSwingNextPointIconDistanceMin' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, ShowSwingNextPointIconDistanceMax) == 0x00007C, "Member 'FEndFieldHookRopeJumpPointSetting::ShowSwingNextPointIconDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, ShowIconDistanceMin) == 0x000080, "Member 'FEndFieldHookRopeJumpPointSetting::ShowIconDistanceMin' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, ShowIconDistanceMax) == 0x000084, "Member 'FEndFieldHookRopeJumpPointSetting::ShowIconDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, bShowIconGroundDistanceCheck) == 0x000088, "Member 'FEndFieldHookRopeJumpPointSetting::bShowIconGroundDistanceCheck' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, ShowIconToGroundDistance) == 0x00008C, "Member 'FEndFieldHookRopeJumpPointSetting::ShowIconToGroundDistance' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, bRayCheckPlayerToJumpPoint) == 0x000090, "Member 'FEndFieldHookRopeJumpPointSetting::bRayCheckPlayerToJumpPoint' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeJumpPointSetting, bRayCheckHookPointToJumpPoint) == 0x000091, "Member 'FEndFieldHookRopeJumpPointSetting::bRayCheckHookPointToJumpPoint' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndPBD
// 0x0000 (0x00C8 - 0x00C8)
struct FAnimNode_EndPBD final : public FAnimNode_SkeletalControlBase
{
};
static_assert(alignof(FAnimNode_EndPBD) == 0x000008, "Wrong alignment on FAnimNode_EndPBD");
static_assert(sizeof(FAnimNode_EndPBD) == 0x0000C8, "Wrong size on FAnimNode_EndPBD");

// ScriptStruct EndGame.RigUnit_EndPBD_ParticleCache
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FRigUnit_EndPBD_ParticleCache final
{
public:
	struct FCachedRigElement                      CachedItem;                                        // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedParentItem;                                  // 0x0014(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentParticleIndex;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastGlobalTranslation;                             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndPBD_ParticleCache) == 0x000008, "Wrong alignment on FRigUnit_EndPBD_ParticleCache");
static_assert(sizeof(FRigUnit_EndPBD_ParticleCache) == 0x000048, "Wrong size on FRigUnit_EndPBD_ParticleCache");
static_assert(offsetof(FRigUnit_EndPBD_ParticleCache, CachedItem) == 0x000000, "Member 'FRigUnit_EndPBD_ParticleCache::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_ParticleCache, CachedParentItem) == 0x000014, "Member 'FRigUnit_EndPBD_ParticleCache::CachedParentItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_ParticleCache, ParentParticleIndex) == 0x000028, "Member 'FRigUnit_EndPBD_ParticleCache::ParentParticleIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_ParticleCache, LastGlobalTranslation) == 0x00002C, "Member 'FRigUnit_EndPBD_ParticleCache::LastGlobalTranslation' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_Cache
// 0x02C0 (0x02C0 - 0x0000)
struct alignas(0x10) FRigUnit_EndPBD_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndPBD_ParticleCache>  ParticleCaches;                                    // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x2A8];                                     // 0x0018(0x02A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndPBD_Cache) == 0x000010, "Wrong alignment on FRigUnit_EndPBD_Cache");
static_assert(sizeof(FRigUnit_EndPBD_Cache) == 0x0002C0, "Wrong size on FRigUnit_EndPBD_Cache");
static_assert(offsetof(FRigUnit_EndPBD_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndPBD_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Cache, ParticleCaches) == 0x000008, "Member 'FRigUnit_EndPBD_Cache::ParticleCaches' has a wrong offset!");

// ScriptStruct EndGame.RenoMineAbilityPermissions
// 0x0010 (0x0010 - 0x0000)
struct FRenoMineAbilityPermissions final
{
public:
	TArray<class FName>                           AbilityList;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRenoMineAbilityPermissions) == 0x000008, "Wrong alignment on FRenoMineAbilityPermissions");
static_assert(sizeof(FRenoMineAbilityPermissions) == 0x000010, "Wrong size on FRenoMineAbilityPermissions");
static_assert(offsetof(FRenoMineAbilityPermissions, AbilityList) == 0x000000, "Member 'FRenoMineAbilityPermissions::AbilityList' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndPhysicsGround
// 0x0020 (0x0030 - 0x0010)
struct FAnimNode_EndPhysicsGround final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndPhysicsGround) == 0x000008, "Wrong alignment on FAnimNode_EndPhysicsGround");
static_assert(sizeof(FAnimNode_EndPhysicsGround) == 0x000030, "Wrong size on FAnimNode_EndPhysicsGround");
static_assert(offsetof(FAnimNode_EndPhysicsGround, Source) == 0x000010, "Member 'FAnimNode_EndPhysicsGround::Source' has a wrong offset!");

// ScriptStruct EndGame.EndMobPrefabRandomAnimationExecuteItem
// 0x0010 (0x0010 - 0x0000)
struct FEndMobPrefabRandomAnimationExecuteItem final
{
public:
	class FName                                   Motion;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel;                                // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMobPrefabRandomAnimationExecuteItem) == 0x000004, "Wrong alignment on FEndMobPrefabRandomAnimationExecuteItem");
static_assert(sizeof(FEndMobPrefabRandomAnimationExecuteItem) == 0x000010, "Wrong size on FEndMobPrefabRandomAnimationExecuteItem");
static_assert(offsetof(FEndMobPrefabRandomAnimationExecuteItem, Motion) == 0x000000, "Member 'FEndMobPrefabRandomAnimationExecuteItem::Motion' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRandomAnimationExecuteItem, Weight) == 0x000008, "Member 'FEndMobPrefabRandomAnimationExecuteItem::Weight' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRandomAnimationExecuteItem, bAllowMotionCancel) == 0x00000C, "Member 'FEndMobPrefabRandomAnimationExecuteItem::bAllowMotionCancel' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndRagdoll
// 0x0000 (0x00C8 - 0x00C8)
struct FAnimNode_EndRagdoll final : public FAnimNode_SkeletalControlBase
{
};
static_assert(alignof(FAnimNode_EndRagdoll) == 0x000008, "Wrong alignment on FAnimNode_EndRagdoll");
static_assert(sizeof(FAnimNode_EndRagdoll) == 0x0000C8, "Wrong size on FAnimNode_EndRagdoll");

// ScriptStruct EndGame.EndCardGame3DFieldInfo
// 0x0078 (0x0078 - 0x0000)
struct FEndCardGame3DFieldInfo final
{
public:
	bool                                          bCursorVisible;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndEffectHandle                       CursorEffect;                                      // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCursorOverrideVisible;                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndEffectHandle                       CursorOverrideEffect;                              // 0x000C(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCursorOverrideSelectVisible;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndEffectHandle                       CursorOverrideSelectEffect;                        // 0x0014(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndEffectHandle                       CursorTutorialEffect;                              // 0x0018(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuffVisible;                                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndEffectHandle                       BuffEffect;                                        // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebuffVisible;                                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndEffectHandle                       DebuffEffect;                                      // 0x0028(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInfluenceVisible;                                 // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndEffectHandle                       InfluenceEffect;                                   // 0x0030(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredictBuffVisible;                               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredictBuffWithCard;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndEffectHandle                       PredictBuffEffect;                                 // 0x0038(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredictDebuffVisible;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredictDebuffWithCard;                            // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndEffectHandle                       PredictDebuffEffect;                               // 0x0040(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredictFadeOutVisible;                            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndEffectHandle                       PredictFadeOutEffect;                              // 0x0048(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCardGame3DFlag*>             FlagPlayers;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AEndCardGame3DFlag*>             FlagOpponents;                                     // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bFocusBuffDebuffVisible;                           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndEffectHandle                       FocusBuffDebuffEffect;                             // 0x0074(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCardGame3DFieldInfo) == 0x000008, "Wrong alignment on FEndCardGame3DFieldInfo");
static_assert(sizeof(FEndCardGame3DFieldInfo) == 0x000078, "Wrong size on FEndCardGame3DFieldInfo");
static_assert(offsetof(FEndCardGame3DFieldInfo, bCursorVisible) == 0x000000, "Member 'FEndCardGame3DFieldInfo::bCursorVisible' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, CursorEffect) == 0x000004, "Member 'FEndCardGame3DFieldInfo::CursorEffect' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bCursorOverrideVisible) == 0x000008, "Member 'FEndCardGame3DFieldInfo::bCursorOverrideVisible' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, CursorOverrideEffect) == 0x00000C, "Member 'FEndCardGame3DFieldInfo::CursorOverrideEffect' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bCursorOverrideSelectVisible) == 0x000010, "Member 'FEndCardGame3DFieldInfo::bCursorOverrideSelectVisible' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, CursorOverrideSelectEffect) == 0x000014, "Member 'FEndCardGame3DFieldInfo::CursorOverrideSelectEffect' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, CursorTutorialEffect) == 0x000018, "Member 'FEndCardGame3DFieldInfo::CursorTutorialEffect' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bBuffVisible) == 0x00001C, "Member 'FEndCardGame3DFieldInfo::bBuffVisible' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, BuffEffect) == 0x000020, "Member 'FEndCardGame3DFieldInfo::BuffEffect' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bDebuffVisible) == 0x000024, "Member 'FEndCardGame3DFieldInfo::bDebuffVisible' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, DebuffEffect) == 0x000028, "Member 'FEndCardGame3DFieldInfo::DebuffEffect' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bInfluenceVisible) == 0x00002C, "Member 'FEndCardGame3DFieldInfo::bInfluenceVisible' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, InfluenceEffect) == 0x000030, "Member 'FEndCardGame3DFieldInfo::InfluenceEffect' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bPredictBuffVisible) == 0x000034, "Member 'FEndCardGame3DFieldInfo::bPredictBuffVisible' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bPredictBuffWithCard) == 0x000035, "Member 'FEndCardGame3DFieldInfo::bPredictBuffWithCard' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, PredictBuffEffect) == 0x000038, "Member 'FEndCardGame3DFieldInfo::PredictBuffEffect' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bPredictDebuffVisible) == 0x00003C, "Member 'FEndCardGame3DFieldInfo::bPredictDebuffVisible' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bPredictDebuffWithCard) == 0x00003D, "Member 'FEndCardGame3DFieldInfo::bPredictDebuffWithCard' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, PredictDebuffEffect) == 0x000040, "Member 'FEndCardGame3DFieldInfo::PredictDebuffEffect' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bPredictFadeOutVisible) == 0x000044, "Member 'FEndCardGame3DFieldInfo::bPredictFadeOutVisible' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, PredictFadeOutEffect) == 0x000048, "Member 'FEndCardGame3DFieldInfo::PredictFadeOutEffect' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, FlagPlayers) == 0x000050, "Member 'FEndCardGame3DFieldInfo::FlagPlayers' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, FlagOpponents) == 0x000060, "Member 'FEndCardGame3DFieldInfo::FlagOpponents' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, bFocusBuffDebuffVisible) == 0x000070, "Member 'FEndCardGame3DFieldInfo::bFocusBuffDebuffVisible' has a wrong offset!");
static_assert(offsetof(FEndCardGame3DFieldInfo, FocusBuffDebuffEffect) == 0x000074, "Member 'FEndCardGame3DFieldInfo::FocusBuffDebuffEffect' has a wrong offset!");

// ScriptStruct EndGame.EndReinsChainBone
// 0x0020 (0x0020 - 0x0000)
struct FEndReinsChainBone final
{
public:
	struct FBoneReference                         BeginChainBone;                                    // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndChainBone;                                      // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndReinsChainBone) == 0x000004, "Wrong alignment on FEndReinsChainBone");
static_assert(sizeof(FEndReinsChainBone) == 0x000020, "Wrong size on FEndReinsChainBone");
static_assert(offsetof(FEndReinsChainBone, BeginChainBone) == 0x000000, "Member 'FEndReinsChainBone::BeginChainBone' has a wrong offset!");
static_assert(offsetof(FEndReinsChainBone, EndChainBone) == 0x000010, "Member 'FEndReinsChainBone::EndChainBone' has a wrong offset!");

// ScriptStruct EndGame.EndReinsPointConstraint
// 0x0070 (0x0070 - 0x0000)
struct FEndReinsPointConstraint final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableConstraint;                                 // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         ConstraintBone;                                    // 0x0014(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkeletalMeshComponent>  ConstraintMesh;                                    // 0x0024(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConstraintSocketName;                              // 0x002C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstraintLocation;                                // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstraintOffsetLocation;                          // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstraintDirection;                               // 0x004C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ConstraintOffsetRotation;                          // 0x0058(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConstraintDistance;                                // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstraintStiffness;                               // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolveOnResetFrameOnly;                            // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndReinsPointConstraint) == 0x000004, "Wrong alignment on FEndReinsPointConstraint");
static_assert(sizeof(FEndReinsPointConstraint) == 0x000070, "Wrong size on FEndReinsPointConstraint");
static_assert(offsetof(FEndReinsPointConstraint, Name) == 0x000000, "Member 'FEndReinsPointConstraint::Name' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, ChainIndex) == 0x000008, "Member 'FEndReinsPointConstraint::ChainIndex' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, Distance) == 0x00000C, "Member 'FEndReinsPointConstraint::Distance' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, bEnableConstraint) == 0x000010, "Member 'FEndReinsPointConstraint::bEnableConstraint' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, ConstraintBone) == 0x000014, "Member 'FEndReinsPointConstraint::ConstraintBone' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, ConstraintMesh) == 0x000024, "Member 'FEndReinsPointConstraint::ConstraintMesh' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, ConstraintSocketName) == 0x00002C, "Member 'FEndReinsPointConstraint::ConstraintSocketName' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, ConstraintLocation) == 0x000034, "Member 'FEndReinsPointConstraint::ConstraintLocation' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, ConstraintOffsetLocation) == 0x000040, "Member 'FEndReinsPointConstraint::ConstraintOffsetLocation' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, ConstraintDirection) == 0x00004C, "Member 'FEndReinsPointConstraint::ConstraintDirection' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, ConstraintOffsetRotation) == 0x000058, "Member 'FEndReinsPointConstraint::ConstraintOffsetRotation' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, ConstraintDistance) == 0x000064, "Member 'FEndReinsPointConstraint::ConstraintDistance' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, ConstraintStiffness) == 0x000068, "Member 'FEndReinsPointConstraint::ConstraintStiffness' has a wrong offset!");
static_assert(offsetof(FEndReinsPointConstraint, bSolveOnResetFrameOnly) == 0x00006C, "Member 'FEndReinsPointConstraint::bSolveOnResetFrameOnly' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndReins
// 0x01A8 (0x0270 - 0x00C8)
struct alignas(0x10) FAnimNode_EndReins final : public FAnimNode_SkeletalControlBase
{
public:
	TArray<struct FEndReinsChainBone>             ChainBones;                                        // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ClusterSize;                                       // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSize;                                         // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReserveConstraintClusterCount;                     // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionIterationCount;                            // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VelocityIterationCount;                            // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantVelocityDumping;                           // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantAngularVelocityDumping;                    // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitCollisionVelocityRestitutionDumping;            // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitCollisionVelocityFrictionDumping;               // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityInterpRate;                                // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeLength;                                        // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeThicknessScale;                                // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleCount;                                     // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParticleRadius;                                    // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulationStiffness;                               // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendingConstraintStiffness;                        // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendingConstraintRelayPointStiffness;              // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestitutionCoeff;                                  // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrictionCoeff;                                     // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 OverrideEndPointMass;                              // 0x0128(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TwoConstraintBone0;                                // 0x0138(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TwoConstraintBone1;                                // 0x0148(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FEndReinsPointConstraint>       RopePointConstraintSettings;                       // 0x0158(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FEndReinsHandSplineConstraint>  RopeHandSplineConstraintSettings;                  // 0x0168(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0xF8];                                     // 0x0178(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndReins) == 0x000010, "Wrong alignment on FAnimNode_EndReins");
static_assert(sizeof(FAnimNode_EndReins) == 0x000270, "Wrong size on FAnimNode_EndReins");
static_assert(offsetof(FAnimNode_EndReins, ChainBones) == 0x0000C8, "Member 'FAnimNode_EndReins::ChainBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, ClusterSize) == 0x0000D8, "Member 'FAnimNode_EndReins::ClusterSize' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, WorldSize) == 0x0000DC, "Member 'FAnimNode_EndReins::WorldSize' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, ReserveConstraintClusterCount) == 0x0000E0, "Member 'FAnimNode_EndReins::ReserveConstraintClusterCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, PositionIterationCount) == 0x0000E4, "Member 'FAnimNode_EndReins::PositionIterationCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, VelocityIterationCount) == 0x0000E8, "Member 'FAnimNode_EndReins::VelocityIterationCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, ConstantVelocityDumping) == 0x0000EC, "Member 'FAnimNode_EndReins::ConstantVelocityDumping' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, ConstantAngularVelocityDumping) == 0x0000F0, "Member 'FAnimNode_EndReins::ConstantAngularVelocityDumping' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, HitCollisionVelocityRestitutionDumping) == 0x0000F4, "Member 'FAnimNode_EndReins::HitCollisionVelocityRestitutionDumping' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, HitCollisionVelocityFrictionDumping) == 0x0000F8, "Member 'FAnimNode_EndReins::HitCollisionVelocityFrictionDumping' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, VelocityInterpRate) == 0x0000FC, "Member 'FAnimNode_EndReins::VelocityInterpRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, RopeLength) == 0x000100, "Member 'FAnimNode_EndReins::RopeLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, RopeThicknessScale) == 0x000104, "Member 'FAnimNode_EndReins::RopeThicknessScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, ParticleCount) == 0x000108, "Member 'FAnimNode_EndReins::ParticleCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, ParticleRadius) == 0x00010C, "Member 'FAnimNode_EndReins::ParticleRadius' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, SimulationStiffness) == 0x000110, "Member 'FAnimNode_EndReins::SimulationStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, BendingConstraintStiffness) == 0x000114, "Member 'FAnimNode_EndReins::BendingConstraintStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, BendingConstraintRelayPointStiffness) == 0x000118, "Member 'FAnimNode_EndReins::BendingConstraintRelayPointStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, RestitutionCoeff) == 0x00011C, "Member 'FAnimNode_EndReins::RestitutionCoeff' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, FrictionCoeff) == 0x000120, "Member 'FAnimNode_EndReins::FrictionCoeff' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, OverrideEndPointMass) == 0x000128, "Member 'FAnimNode_EndReins::OverrideEndPointMass' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, TwoConstraintBone0) == 0x000138, "Member 'FAnimNode_EndReins::TwoConstraintBone0' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, TwoConstraintBone1) == 0x000148, "Member 'FAnimNode_EndReins::TwoConstraintBone1' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, RopePointConstraintSettings) == 0x000158, "Member 'FAnimNode_EndReins::RopePointConstraintSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndReins, RopeHandSplineConstraintSettings) == 0x000168, "Member 'FAnimNode_EndReins::RopeHandSplineConstraintSettings' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleActionAppearParam
// 0x0024 (0x0024 - 0x0000)
struct FEndWheeledVehicleActionAppearParam final
{
public:
	float                                         InitSpeedKph;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeepRunnigSpeedKph;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeepRunnigTime;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToStopDistance;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetFromPlayer;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaDivisionNum;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetVehicleSpawnLocation;                        // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleActionAppearParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleActionAppearParam");
static_assert(sizeof(FEndWheeledVehicleActionAppearParam) == 0x000024, "Wrong size on FEndWheeledVehicleActionAppearParam");
static_assert(offsetof(FEndWheeledVehicleActionAppearParam, InitSpeedKph) == 0x000000, "Member 'FEndWheeledVehicleActionAppearParam::InitSpeedKph' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleActionAppearParam, KeepRunnigSpeedKph) == 0x000004, "Member 'FEndWheeledVehicleActionAppearParam::KeepRunnigSpeedKph' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleActionAppearParam, KeepRunnigTime) == 0x000008, "Member 'FEndWheeledVehicleActionAppearParam::KeepRunnigTime' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleActionAppearParam, ToStopDistance) == 0x00000C, "Member 'FEndWheeledVehicleActionAppearParam::ToStopDistance' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleActionAppearParam, OffsetFromPlayer) == 0x000010, "Member 'FEndWheeledVehicleActionAppearParam::OffsetFromPlayer' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleActionAppearParam, AreaDivisionNum) == 0x000014, "Member 'FEndWheeledVehicleActionAppearParam::AreaDivisionNum' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleActionAppearParam, OffsetVehicleSpawnLocation) == 0x000018, "Member 'FEndWheeledVehicleActionAppearParam::OffsetVehicleSpawnLocation' has a wrong offset!");

// ScriptStruct EndGame.EndSceneNaviMapLayerTextureLodInfo
// 0x0018 (0x0018 - 0x0000)
struct FEndSceneNaviMapLayerTextureLodInfo final
{
public:
	float                                         PixelPerCm;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndSceneNaviMapLayerTextureInfo> TextureInfos;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndSceneNaviMapLayerTextureLodInfo) == 0x000008, "Wrong alignment on FEndSceneNaviMapLayerTextureLodInfo");
static_assert(sizeof(FEndSceneNaviMapLayerTextureLodInfo) == 0x000018, "Wrong size on FEndSceneNaviMapLayerTextureLodInfo");
static_assert(offsetof(FEndSceneNaviMapLayerTextureLodInfo, PixelPerCm) == 0x000000, "Member 'FEndSceneNaviMapLayerTextureLodInfo::PixelPerCm' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapLayerTextureLodInfo, TextureInfos) == 0x000008, "Member 'FEndSceneNaviMapLayerTextureLodInfo::TextureInfos' has a wrong offset!");

// ScriptStruct EndGame.EndSceneNaviMapLayerInfo
// 0x0060 (0x0060 - 0x0000)
struct FEndSceneNaviMapLayerInfo final
{
public:
	TArray<struct FEndSceneNaviMapLayerTextureLodInfo> TextureLods;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         LayerNumber;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   LayerBounds;                                       // 0x0014(0x001C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBox                                   LayerTextureBounds;                                // 0x0030(0x001C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LayerVolumeNames;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndSceneNaviMapLayerInfo) == 0x000008, "Wrong alignment on FEndSceneNaviMapLayerInfo");
static_assert(sizeof(FEndSceneNaviMapLayerInfo) == 0x000060, "Wrong size on FEndSceneNaviMapLayerInfo");
static_assert(offsetof(FEndSceneNaviMapLayerInfo, TextureLods) == 0x000000, "Member 'FEndSceneNaviMapLayerInfo::TextureLods' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapLayerInfo, LayerNumber) == 0x000010, "Member 'FEndSceneNaviMapLayerInfo::LayerNumber' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapLayerInfo, LayerBounds) == 0x000014, "Member 'FEndSceneNaviMapLayerInfo::LayerBounds' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapLayerInfo, LayerTextureBounds) == 0x000030, "Member 'FEndSceneNaviMapLayerInfo::LayerTextureBounds' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapLayerInfo, LayerVolumeNames) == 0x000050, "Member 'FEndSceneNaviMapLayerInfo::LayerVolumeNames' has a wrong offset!");

// ScriptStruct EndGame.EndCactusMissionEnemyTerritoryActorData
// 0x0010 (0x0010 - 0x0000)
struct FEndCactusMissionEnemyTerritoryActorData final
{
public:
	class AEndFieldEnemyTerritoryActor*           EnemyTerritory;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCactusMissionEnemyTerritoryActorData) == 0x000008, "Wrong alignment on FEndCactusMissionEnemyTerritoryActorData");
static_assert(sizeof(FEndCactusMissionEnemyTerritoryActorData) == 0x000010, "Wrong size on FEndCactusMissionEnemyTerritoryActorData");
static_assert(offsetof(FEndCactusMissionEnemyTerritoryActorData, EnemyTerritory) == 0x000000, "Member 'FEndCactusMissionEnemyTerritoryActorData::EnemyTerritory' has a wrong offset!");
static_assert(offsetof(FEndCactusMissionEnemyTerritoryActorData, Rate) == 0x000008, "Member 'FEndCactusMissionEnemyTerritoryActorData::Rate' has a wrong offset!");

// ScriptStruct EndGame.EndCactusMissionConditionData
// 0x0014 (0x0014 - 0x0000)
struct FEndCactusMissionConditionData final
{
public:
	EEndAppearCondition                           Condition;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConditionNum;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAppearCondition                           SubCondition;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubConditionNum;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionPriority;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCactusMissionConditionData) == 0x000004, "Wrong alignment on FEndCactusMissionConditionData");
static_assert(sizeof(FEndCactusMissionConditionData) == 0x000014, "Wrong size on FEndCactusMissionConditionData");
static_assert(offsetof(FEndCactusMissionConditionData, Condition) == 0x000000, "Member 'FEndCactusMissionConditionData::Condition' has a wrong offset!");
static_assert(offsetof(FEndCactusMissionConditionData, ConditionNum) == 0x000004, "Member 'FEndCactusMissionConditionData::ConditionNum' has a wrong offset!");
static_assert(offsetof(FEndCactusMissionConditionData, SubCondition) == 0x000008, "Member 'FEndCactusMissionConditionData::SubCondition' has a wrong offset!");
static_assert(offsetof(FEndCactusMissionConditionData, SubConditionNum) == 0x00000C, "Member 'FEndCactusMissionConditionData::SubConditionNum' has a wrong offset!");
static_assert(offsetof(FEndCactusMissionConditionData, ConditionPriority) == 0x000010, "Member 'FEndCactusMissionConditionData::ConditionPriority' has a wrong offset!");

// ScriptStruct EndGame.EndCactusMissionRandomEnemyTerritoryData
// 0x0028 (0x0028 - 0x0000)
struct FEndCactusMissionRandomEnemyTerritoryData final
{
public:
	TArray<struct FEndCactusMissionEnemyTerritoryActorData> EnemyTerritories;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FEndCactusMissionConditionData         ConditionData;                                     // 0x0010(0x0014)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsOnce;                                            // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCactusMissionRandomEnemyTerritoryData) == 0x000008, "Wrong alignment on FEndCactusMissionRandomEnemyTerritoryData");
static_assert(sizeof(FEndCactusMissionRandomEnemyTerritoryData) == 0x000028, "Wrong size on FEndCactusMissionRandomEnemyTerritoryData");
static_assert(offsetof(FEndCactusMissionRandomEnemyTerritoryData, EnemyTerritories) == 0x000000, "Member 'FEndCactusMissionRandomEnemyTerritoryData::EnemyTerritories' has a wrong offset!");
static_assert(offsetof(FEndCactusMissionRandomEnemyTerritoryData, ConditionData) == 0x000010, "Member 'FEndCactusMissionRandomEnemyTerritoryData::ConditionData' has a wrong offset!");
static_assert(offsetof(FEndCactusMissionRandomEnemyTerritoryData, IsOnce) == 0x000024, "Member 'FEndCactusMissionRandomEnemyTerritoryData::IsOnce' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAt_Item
// 0x0048 (0x0048 - 0x0000)
struct FRigUnit_EndLookAt_Item final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpAxis;                                            // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptionalUpAxis;                                   // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLookAtLayer                               Layer;                                             // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpRate;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownRate;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreAngle;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeBiasMin;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeBiasMax;                                  // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendDelayTimeMin;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendDelayTimeMax;                                 // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLookAt_Item) == 0x000004, "Wrong alignment on FRigUnit_EndLookAt_Item");
static_assert(sizeof(FRigUnit_EndLookAt_Item) == 0x000048, "Wrong size on FRigUnit_EndLookAt_Item");
static_assert(offsetof(FRigUnit_EndLookAt_Item, Item) == 0x000000, "Member 'FRigUnit_EndLookAt_Item::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, Axis) == 0x00000C, "Member 'FRigUnit_EndLookAt_Item::Axis' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, UpAxis) == 0x000018, "Member 'FRigUnit_EndLookAt_Item::UpAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, bOptionalUpAxis) == 0x000024, "Member 'FRigUnit_EndLookAt_Item::bOptionalUpAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, Layer) == 0x000025, "Member 'FRigUnit_EndLookAt_Item::Layer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, Weight) == 0x000028, "Member 'FRigUnit_EndLookAt_Item::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, UpRate) == 0x00002C, "Member 'FRigUnit_EndLookAt_Item::UpRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, DownRate) == 0x000030, "Member 'FRigUnit_EndLookAt_Item::DownRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, IgnoreAngle) == 0x000034, "Member 'FRigUnit_EndLookAt_Item::IgnoreAngle' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, BlendTimeBiasMin) == 0x000038, "Member 'FRigUnit_EndLookAt_Item::BlendTimeBiasMin' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, BlendTimeBiasMax) == 0x00003C, "Member 'FRigUnit_EndLookAt_Item::BlendTimeBiasMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, BlendDelayTimeMin) == 0x000040, "Member 'FRigUnit_EndLookAt_Item::BlendDelayTimeMin' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Item, BlendDelayTimeMax) == 0x000044, "Member 'FRigUnit_EndLookAt_Item::BlendDelayTimeMax' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAt_BehaviorSetting
// 0x0020 (0x0020 - 0x0000)
struct FRigUnit_EndLookAt_BehaviorSetting final
{
public:
	float                                         ActiveBlendTime;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeactiveBlendTime;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveAngle;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeactiveAngle;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightBias;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpWeightBias;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeepDirectionTime;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendDelayTimeBias;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLookAt_BehaviorSetting) == 0x000004, "Wrong alignment on FRigUnit_EndLookAt_BehaviorSetting");
static_assert(sizeof(FRigUnit_EndLookAt_BehaviorSetting) == 0x000020, "Wrong size on FRigUnit_EndLookAt_BehaviorSetting");
static_assert(offsetof(FRigUnit_EndLookAt_BehaviorSetting, ActiveBlendTime) == 0x000000, "Member 'FRigUnit_EndLookAt_BehaviorSetting::ActiveBlendTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_BehaviorSetting, DeactiveBlendTime) == 0x000004, "Member 'FRigUnit_EndLookAt_BehaviorSetting::DeactiveBlendTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_BehaviorSetting, ActiveAngle) == 0x000008, "Member 'FRigUnit_EndLookAt_BehaviorSetting::ActiveAngle' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_BehaviorSetting, DeactiveAngle) == 0x00000C, "Member 'FRigUnit_EndLookAt_BehaviorSetting::DeactiveAngle' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_BehaviorSetting, WeightBias) == 0x000010, "Member 'FRigUnit_EndLookAt_BehaviorSetting::WeightBias' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_BehaviorSetting, UpWeightBias) == 0x000014, "Member 'FRigUnit_EndLookAt_BehaviorSetting::UpWeightBias' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_BehaviorSetting, KeepDirectionTime) == 0x000018, "Member 'FRigUnit_EndLookAt_BehaviorSetting::KeepDirectionTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_BehaviorSetting, BlendDelayTimeBias) == 0x00001C, "Member 'FRigUnit_EndLookAt_BehaviorSetting::BlendDelayTimeBias' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAt_Settings
// 0x0080 (0x0080 - 0x0000)
struct FRigUnit_EndLookAt_Settings final
{
public:
	TArray<struct FRigUnit_EndLookAt_Item>        Items;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigElementKey                         AimBaseItem;                                       // 0x0010(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AimBaseAxis;                                       // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_EndLookAt_BehaviorSetting     NeutralSetting;                                    // 0x0028(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndLookAt_BehaviorSetting     BattleSetting;                                     // 0x0048(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BaseWeightBias;                                    // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampHorizontalDistanceMin;                        // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivityDurationMin;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemWeightBlendSpeed;                              // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalizeItemWeight;                              // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysComponentSpace;                             // 0x0079(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndLookAt_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndLookAt_Settings");
static_assert(sizeof(FRigUnit_EndLookAt_Settings) == 0x000080, "Wrong size on FRigUnit_EndLookAt_Settings");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, Items) == 0x000000, "Member 'FRigUnit_EndLookAt_Settings::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, AimBaseItem) == 0x000010, "Member 'FRigUnit_EndLookAt_Settings::AimBaseItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, AimBaseAxis) == 0x00001C, "Member 'FRigUnit_EndLookAt_Settings::AimBaseAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, NeutralSetting) == 0x000028, "Member 'FRigUnit_EndLookAt_Settings::NeutralSetting' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, BattleSetting) == 0x000048, "Member 'FRigUnit_EndLookAt_Settings::BattleSetting' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, BaseWeightBias) == 0x000068, "Member 'FRigUnit_EndLookAt_Settings::BaseWeightBias' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, ClampHorizontalDistanceMin) == 0x00006C, "Member 'FRigUnit_EndLookAt_Settings::ClampHorizontalDistanceMin' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, ActivityDurationMin) == 0x000070, "Member 'FRigUnit_EndLookAt_Settings::ActivityDurationMin' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, ItemWeightBlendSpeed) == 0x000074, "Member 'FRigUnit_EndLookAt_Settings::ItemWeightBlendSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, bNormalizeItemWeight) == 0x000078, "Member 'FRigUnit_EndLookAt_Settings::bNormalizeItemWeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Settings, bAlwaysComponentSpace) == 0x000079, "Member 'FRigUnit_EndLookAt_Settings::bAlwaysComponentSpace' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndRigidBody
// 0x0030 (0x06C0 - 0x0690)
struct FAnimNode_EndRigidBody final : public FAnimNode_RigidBody
{
public:
	class FName                                   SettingName;                                       // 0x0690(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0698(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x069C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A0[0x20];                                     // 0x06A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndRigidBody) == 0x000010, "Wrong alignment on FAnimNode_EndRigidBody");
static_assert(sizeof(FAnimNode_EndRigidBody) == 0x0006C0, "Wrong size on FAnimNode_EndRigidBody");
static_assert(offsetof(FAnimNode_EndRigidBody, SettingName) == 0x000690, "Member 'FAnimNode_EndRigidBody::SettingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRigidBody, BlendInTime) == 0x000698, "Member 'FAnimNode_EndRigidBody::BlendInTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRigidBody, BlendOutTime) == 0x00069C, "Member 'FAnimNode_EndRigidBody::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterAnimInstanceProxy
// 0x0070 (0x07F0 - 0x0780)
struct FEndCharacterAnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_780[0x70];                                     // 0x0780(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCharacterAnimInstanceProxy) == 0x000010, "Wrong alignment on FEndCharacterAnimInstanceProxy");
static_assert(sizeof(FEndCharacterAnimInstanceProxy) == 0x0007F0, "Wrong size on FEndCharacterAnimInstanceProxy");

// ScriptStruct EndGame.AnimNode_EndRope
// 0x02C8 (0x0390 - 0x00C8)
struct alignas(0x10) FAnimNode_EndRope final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BeginChainBone;                                    // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndChainBone;                                      // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ClusterSize;                                       // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSize;                                         // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReserveConstraintClusterCount;                     // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionIterationCount;                            // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VelocityIterationCount;                            // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantVelocityDumping;                           // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantAngularVelocityDumping;                    // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitCollisionVelocityRestitutionDumping;            // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitCollisionVelocityFrictionDumping;               // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityInterpRate;                                // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDisable;                                      // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledHighFpsEvaluation;                         // 0x0111(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledPostUpdatePositionIterationRelocation;     // 0x0112(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113[0x1];                                      // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RopeLength;                                        // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeThicknessScale;                                // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChainLength;                                       // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleCount;                                     // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParticleRadius;                                    // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulationStiffness;                               // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendingConstraintStiffness;                        // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendingConstraintRelayPointStiffness;              // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestitutionCoeff;                                  // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrictionCoeff;                                     // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullThresholdRangeRate;                            // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceConstraintBias;                            // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixedRootSnapPointDistance;                        // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixedEndSnapPointDistance;                         // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndRopePointConstraint>        RopePointConstraintSettings;                       // 0x0150(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x230];                                    // 0x0160(0x0230)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndRope) == 0x000010, "Wrong alignment on FAnimNode_EndRope");
static_assert(sizeof(FAnimNode_EndRope) == 0x000390, "Wrong size on FAnimNode_EndRope");
static_assert(offsetof(FAnimNode_EndRope, BeginChainBone) == 0x0000C8, "Member 'FAnimNode_EndRope::BeginChainBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, EndChainBone) == 0x0000D8, "Member 'FAnimNode_EndRope::EndChainBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, ClusterSize) == 0x0000E8, "Member 'FAnimNode_EndRope::ClusterSize' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, WorldSize) == 0x0000EC, "Member 'FAnimNode_EndRope::WorldSize' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, ReserveConstraintClusterCount) == 0x0000F0, "Member 'FAnimNode_EndRope::ReserveConstraintClusterCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, PositionIterationCount) == 0x0000F4, "Member 'FAnimNode_EndRope::PositionIterationCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, VelocityIterationCount) == 0x0000F8, "Member 'FAnimNode_EndRope::VelocityIterationCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, ConstantVelocityDumping) == 0x0000FC, "Member 'FAnimNode_EndRope::ConstantVelocityDumping' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, ConstantAngularVelocityDumping) == 0x000100, "Member 'FAnimNode_EndRope::ConstantAngularVelocityDumping' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, HitCollisionVelocityRestitutionDumping) == 0x000104, "Member 'FAnimNode_EndRope::HitCollisionVelocityRestitutionDumping' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, HitCollisionVelocityFrictionDumping) == 0x000108, "Member 'FAnimNode_EndRope::HitCollisionVelocityFrictionDumping' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, VelocityInterpRate) == 0x00010C, "Member 'FAnimNode_EndRope::VelocityInterpRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, bAutoDisable) == 0x000110, "Member 'FAnimNode_EndRope::bAutoDisable' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, bEnabledHighFpsEvaluation) == 0x000111, "Member 'FAnimNode_EndRope::bEnabledHighFpsEvaluation' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, bEnabledPostUpdatePositionIterationRelocation) == 0x000112, "Member 'FAnimNode_EndRope::bEnabledPostUpdatePositionIterationRelocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, RopeLength) == 0x000114, "Member 'FAnimNode_EndRope::RopeLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, RopeThicknessScale) == 0x000118, "Member 'FAnimNode_EndRope::RopeThicknessScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, ChainLength) == 0x00011C, "Member 'FAnimNode_EndRope::ChainLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, ParticleCount) == 0x000120, "Member 'FAnimNode_EndRope::ParticleCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, ParticleRadius) == 0x000124, "Member 'FAnimNode_EndRope::ParticleRadius' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, SimulationStiffness) == 0x000128, "Member 'FAnimNode_EndRope::SimulationStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, BendingConstraintStiffness) == 0x00012C, "Member 'FAnimNode_EndRope::BendingConstraintStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, BendingConstraintRelayPointStiffness) == 0x000130, "Member 'FAnimNode_EndRope::BendingConstraintRelayPointStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, RestitutionCoeff) == 0x000134, "Member 'FAnimNode_EndRope::RestitutionCoeff' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, FrictionCoeff) == 0x000138, "Member 'FAnimNode_EndRope::FrictionCoeff' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, PullThresholdRangeRate) == 0x00013C, "Member 'FAnimNode_EndRope::PullThresholdRangeRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, DistanceConstraintBias) == 0x000140, "Member 'FAnimNode_EndRope::DistanceConstraintBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, FixedRootSnapPointDistance) == 0x000144, "Member 'FAnimNode_EndRope::FixedRootSnapPointDistance' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, FixedEndSnapPointDistance) == 0x000148, "Member 'FAnimNode_EndRope::FixedEndSnapPointDistance' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRope, RopePointConstraintSettings) == 0x000150, "Member 'FAnimNode_EndRope::RopePointConstraintSettings' has a wrong offset!");

// ScriptStruct EndGame.EndChadleyPointParameters
// 0x001C (0x001C - 0x0000)
struct FEndChadleyPointParameters final
{
public:
	bool                                          IsDisableLookAt;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisableTurnAt;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDevice;                                     // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChadleyPointParameters) == 0x000004, "Wrong alignment on FEndChadleyPointParameters");
static_assert(sizeof(FEndChadleyPointParameters) == 0x00001C, "Wrong size on FEndChadleyPointParameters");
static_assert(offsetof(FEndChadleyPointParameters, IsDisableLookAt) == 0x000000, "Member 'FEndChadleyPointParameters::IsDisableLookAt' has a wrong offset!");
static_assert(offsetof(FEndChadleyPointParameters, IsDisableTurnAt) == 0x000001, "Member 'FEndChadleyPointParameters::IsDisableTurnAt' has a wrong offset!");
static_assert(offsetof(FEndChadleyPointParameters, bEnableDevice) == 0x000002, "Member 'FEndChadleyPointParameters::bEnableDevice' has a wrong offset!");
static_assert(offsetof(FEndChadleyPointParameters, Location) == 0x000004, "Member 'FEndChadleyPointParameters::Location' has a wrong offset!");
static_assert(offsetof(FEndChadleyPointParameters, Rotation) == 0x000010, "Member 'FEndChadleyPointParameters::Rotation' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndSwordExpression
// 0x00B0 (0x0178 - 0x00C8)
struct FAnimNode_EndSwordExpression final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FAxis                                  EndPointDirection;                                 // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         EndPointDistance;                                  // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledEndPointGravity;                           // 0x00EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimatedPositionStiffness;                         // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityFriction;                                  // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstraintAngle;                                   // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstraintAngleStiffness;                          // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 ContactBones;                                      // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ContactPadding;                                    // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactPaddingWalkScale;                           // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactPaddingRunScale;                            // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactPaddingDashScale;                           // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactPositionStiffness;                          // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactVelocityStiffness;                          // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionIterationCount;                            // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VelocityIterationCount;                            // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightSmoothRate;                                  // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveDuringTime;                                  // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaRotationInterpSpeedWalk;                      // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaRotationInterpSpeedRun;                       // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaRotationInterpSpeedDash;                      // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x34];                                     // 0x0144(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndSwordExpression) == 0x000008, "Wrong alignment on FAnimNode_EndSwordExpression");
static_assert(sizeof(FAnimNode_EndSwordExpression) == 0x000178, "Wrong size on FAnimNode_EndSwordExpression");
static_assert(offsetof(FAnimNode_EndSwordExpression, TargetBone) == 0x0000C8, "Member 'FAnimNode_EndSwordExpression::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, EndPointDirection) == 0x0000D8, "Member 'FAnimNode_EndSwordExpression::EndPointDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, EndPointDistance) == 0x0000E8, "Member 'FAnimNode_EndSwordExpression::EndPointDistance' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, bEnabledEndPointGravity) == 0x0000EC, "Member 'FAnimNode_EndSwordExpression::bEnabledEndPointGravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, AnimatedPositionStiffness) == 0x0000F0, "Member 'FAnimNode_EndSwordExpression::AnimatedPositionStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, VelocityFriction) == 0x0000F4, "Member 'FAnimNode_EndSwordExpression::VelocityFriction' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, ConstraintAngle) == 0x0000F8, "Member 'FAnimNode_EndSwordExpression::ConstraintAngle' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, ConstraintAngleStiffness) == 0x0000FC, "Member 'FAnimNode_EndSwordExpression::ConstraintAngleStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, ContactBones) == 0x000100, "Member 'FAnimNode_EndSwordExpression::ContactBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, ContactPadding) == 0x000110, "Member 'FAnimNode_EndSwordExpression::ContactPadding' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, ContactPaddingWalkScale) == 0x000114, "Member 'FAnimNode_EndSwordExpression::ContactPaddingWalkScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, ContactPaddingRunScale) == 0x000118, "Member 'FAnimNode_EndSwordExpression::ContactPaddingRunScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, ContactPaddingDashScale) == 0x00011C, "Member 'FAnimNode_EndSwordExpression::ContactPaddingDashScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, ContactPositionStiffness) == 0x000120, "Member 'FAnimNode_EndSwordExpression::ContactPositionStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, ContactVelocityStiffness) == 0x000124, "Member 'FAnimNode_EndSwordExpression::ContactVelocityStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, PositionIterationCount) == 0x000128, "Member 'FAnimNode_EndSwordExpression::PositionIterationCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, VelocityIterationCount) == 0x00012C, "Member 'FAnimNode_EndSwordExpression::VelocityIterationCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, WeightSmoothRate) == 0x000130, "Member 'FAnimNode_EndSwordExpression::WeightSmoothRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, ActiveDuringTime) == 0x000134, "Member 'FAnimNode_EndSwordExpression::ActiveDuringTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, DeltaRotationInterpSpeedWalk) == 0x000138, "Member 'FAnimNode_EndSwordExpression::DeltaRotationInterpSpeedWalk' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, DeltaRotationInterpSpeedRun) == 0x00013C, "Member 'FAnimNode_EndSwordExpression::DeltaRotationInterpSpeedRun' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndSwordExpression, DeltaRotationInterpSpeedDash) == 0x000140, "Member 'FAnimNode_EndSwordExpression::DeltaRotationInterpSpeedDash' has a wrong offset!");

// ScriptStruct EndGame.EndCameraRig_RailInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FEndCameraRig_RailInfo final
{
public:
	class ULevelSequence*                         Sequence;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameTime                             SequenceDuration;                                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndCameraRigSequencePlayer*            SequencePlayer;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ParentComponent;                                   // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       MoveSpline;                                        // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       CameraSpline;                                      // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        RailCameraMount;                                   // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseReturnRail;                                    // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingReturnRail;                                // 0x0059(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       ReturnCameraSpline;                                // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnRailCameraMount;                             // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnTransform;                                   // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CameraRailColor;                                   // 0x0078(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnCameraRailColor;                             // 0x0088(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineProgress;                                    // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DegreesOfCameraFreedom;                            // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraInputRotationSpeed;                          // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       CameraComponent;                                   // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       ReturnCameraComponent;                             // 0x00B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOrientationToRail;                            // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LockOrientationAlpha;                              // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOrientationToRailOnReturn;                    // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRailCameraMountRotationOnLockOrientation;      // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToFreezeControlRotation;                        // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanUseDistanceBlend;                              // 0x00C3(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedBlendInTime;                              // 0x00C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedBlendOutTime;                             // 0x00C5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendInOption;                                     // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendOutTime;                                      // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOutOption;                                    // 0x00D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRailVisualization;                            // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtOffset;                                      // 0x00D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassiveEnvironmentFrustrumScaleForMainPass;        // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCameraRig_RailInfo) == 0x000008, "Wrong alignment on FEndCameraRig_RailInfo");
static_assert(sizeof(FEndCameraRig_RailInfo) == 0x0000E8, "Wrong size on FEndCameraRig_RailInfo");
static_assert(offsetof(FEndCameraRig_RailInfo, Sequence) == 0x000000, "Member 'FEndCameraRig_RailInfo::Sequence' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, SequenceDuration) == 0x000008, "Member 'FEndCameraRig_RailInfo::SequenceDuration' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, SequencePlayer) == 0x000010, "Member 'FEndCameraRig_RailInfo::SequencePlayer' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, ParentComponent) == 0x000018, "Member 'FEndCameraRig_RailInfo::ParentComponent' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, MoveSpline) == 0x000020, "Member 'FEndCameraRig_RailInfo::MoveSpline' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, CameraSpline) == 0x000048, "Member 'FEndCameraRig_RailInfo::CameraSpline' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, RailCameraMount) == 0x000050, "Member 'FEndCameraRig_RailInfo::RailCameraMount' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, bUseReturnRail) == 0x000058, "Member 'FEndCameraRig_RailInfo::bUseReturnRail' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, bIsUsingReturnRail) == 0x000059, "Member 'FEndCameraRig_RailInfo::bIsUsingReturnRail' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, ReturnCameraSpline) == 0x000060, "Member 'FEndCameraRig_RailInfo::ReturnCameraSpline' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, ReturnRailCameraMount) == 0x000068, "Member 'FEndCameraRig_RailInfo::ReturnRailCameraMount' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, ReturnTransform) == 0x000070, "Member 'FEndCameraRig_RailInfo::ReturnTransform' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, CameraRailColor) == 0x000078, "Member 'FEndCameraRig_RailInfo::CameraRailColor' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, ReturnCameraRailColor) == 0x000088, "Member 'FEndCameraRig_RailInfo::ReturnCameraRailColor' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, SplineProgress) == 0x000098, "Member 'FEndCameraRig_RailInfo::SplineProgress' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, DegreesOfCameraFreedom) == 0x00009C, "Member 'FEndCameraRig_RailInfo::DegreesOfCameraFreedom' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, CameraInputRotationSpeed) == 0x0000A0, "Member 'FEndCameraRig_RailInfo::CameraInputRotationSpeed' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, CameraComponent) == 0x0000A8, "Member 'FEndCameraRig_RailInfo::CameraComponent' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, ReturnCameraComponent) == 0x0000B0, "Member 'FEndCameraRig_RailInfo::ReturnCameraComponent' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, bLockOrientationToRail) == 0x0000B8, "Member 'FEndCameraRig_RailInfo::bLockOrientationToRail' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, LockOrientationAlpha) == 0x0000BC, "Member 'FEndCameraRig_RailInfo::LockOrientationAlpha' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, bLockOrientationToRailOnReturn) == 0x0000C0, "Member 'FEndCameraRig_RailInfo::bLockOrientationToRailOnReturn' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, bUseRailCameraMountRotationOnLockOrientation) == 0x0000C1, "Member 'FEndCameraRig_RailInfo::bUseRailCameraMountRotationOnLockOrientation' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, bIsToFreezeControlRotation) == 0x0000C2, "Member 'FEndCameraRig_RailInfo::bIsToFreezeControlRotation' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, bCanUseDistanceBlend) == 0x0000C3, "Member 'FEndCameraRig_RailInfo::bCanUseDistanceBlend' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, bUseFixedBlendInTime) == 0x0000C4, "Member 'FEndCameraRig_RailInfo::bUseFixedBlendInTime' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, bUseFixedBlendOutTime) == 0x0000C5, "Member 'FEndCameraRig_RailInfo::bUseFixedBlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, BlendInTime) == 0x0000C8, "Member 'FEndCameraRig_RailInfo::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, BlendInOption) == 0x0000CC, "Member 'FEndCameraRig_RailInfo::BlendInOption' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, BlendOutTime) == 0x0000D0, "Member 'FEndCameraRig_RailInfo::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, BlendOutOption) == 0x0000D4, "Member 'FEndCameraRig_RailInfo::BlendOutOption' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, bShowRailVisualization) == 0x0000D5, "Member 'FEndCameraRig_RailInfo::bShowRailVisualization' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, LookAtOffset) == 0x0000D8, "Member 'FEndCameraRig_RailInfo::LookAtOffset' has a wrong offset!");
static_assert(offsetof(FEndCameraRig_RailInfo, MassiveEnvironmentFrustrumScaleForMainPass) == 0x0000E4, "Member 'FEndCameraRig_RailInfo::MassiveEnvironmentFrustrumScaleForMainPass' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndVelocityExpression
// 0x0070 (0x0080 - 0x0010)
struct FAnimNode_EndVelocityExpression final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FEndVelocityExpressionBoneSetting> BoneSettings;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndVelocityExpression) == 0x000008, "Wrong alignment on FAnimNode_EndVelocityExpression");
static_assert(sizeof(FAnimNode_EndVelocityExpression) == 0x000080, "Wrong size on FAnimNode_EndVelocityExpression");
static_assert(offsetof(FAnimNode_EndVelocityExpression, Source) == 0x000010, "Member 'FAnimNode_EndVelocityExpression::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndVelocityExpression, BoneSettings) == 0x000020, "Member 'FAnimNode_EndVelocityExpression::BoneSettings' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterAbilityCancelParameter
// 0x0010 (0x0010 - 0x0000)
struct FEndCharacterAbilityCancelParameter final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timing;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EndBattleAbilityCancelComboCondition          ComboCondition;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Combo;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCharacterAbilityCancelParameter) == 0x000004, "Wrong alignment on FEndCharacterAbilityCancelParameter");
static_assert(sizeof(FEndCharacterAbilityCancelParameter) == 0x000010, "Wrong size on FEndCharacterAbilityCancelParameter");
static_assert(offsetof(FEndCharacterAbilityCancelParameter, Number) == 0x000000, "Member 'FEndCharacterAbilityCancelParameter::Number' has a wrong offset!");
static_assert(offsetof(FEndCharacterAbilityCancelParameter, Timing) == 0x000004, "Member 'FEndCharacterAbilityCancelParameter::Timing' has a wrong offset!");
static_assert(offsetof(FEndCharacterAbilityCancelParameter, ComboCondition) == 0x000008, "Member 'FEndCharacterAbilityCancelParameter::ComboCondition' has a wrong offset!");
static_assert(offsetof(FEndCharacterAbilityCancelParameter, Combo) == 0x00000C, "Member 'FEndCharacterAbilityCancelParameter::Combo' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapMetaDataActorClass
// 0x0020 (0x0020 - 0x0000)
struct FEndNaviMapMetaDataActorClass final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 display_group;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapMetaDataActorClass) == 0x000008, "Wrong alignment on FEndNaviMapMetaDataActorClass");
static_assert(sizeof(FEndNaviMapMetaDataActorClass) == 0x000020, "Wrong size on FEndNaviMapMetaDataActorClass");
static_assert(offsetof(FEndNaviMapMetaDataActorClass, Name) == 0x000000, "Member 'FEndNaviMapMetaDataActorClass::Name' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActorClass, display_group) == 0x000010, "Member 'FEndNaviMapMetaDataActorClass::display_group' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapMetaDataIcon
// 0x0020 (0x0020 - 0x0000)
struct FEndNaviMapMetaDataIcon final
{
public:
	class FString                                 Image;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         color_r;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         color_g;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         color_b;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         color_a;                                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapMetaDataIcon) == 0x000008, "Wrong alignment on FEndNaviMapMetaDataIcon");
static_assert(sizeof(FEndNaviMapMetaDataIcon) == 0x000020, "Wrong size on FEndNaviMapMetaDataIcon");
static_assert(offsetof(FEndNaviMapMetaDataIcon, Image) == 0x000000, "Member 'FEndNaviMapMetaDataIcon::Image' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataIcon, color_r) == 0x000010, "Member 'FEndNaviMapMetaDataIcon::color_r' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataIcon, color_g) == 0x000014, "Member 'FEndNaviMapMetaDataIcon::color_g' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataIcon, color_b) == 0x000018, "Member 'FEndNaviMapMetaDataIcon::color_b' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataIcon, color_a) == 0x00001C, "Member 'FEndNaviMapMetaDataIcon::color_a' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapGlobalMetaData
// 0x0020 (0x0020 - 0x0000)
struct FEndNaviMapGlobalMetaData final
{
public:
	TArray<struct FEndNaviMapMetaDataActorClass>  actor_classes;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEndNaviMapMetaDataIcon>        icons;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapGlobalMetaData) == 0x000008, "Wrong alignment on FEndNaviMapGlobalMetaData");
static_assert(sizeof(FEndNaviMapGlobalMetaData) == 0x000020, "Wrong size on FEndNaviMapGlobalMetaData");
static_assert(offsetof(FEndNaviMapGlobalMetaData, actor_classes) == 0x000000, "Member 'FEndNaviMapGlobalMetaData::actor_classes' has a wrong offset!");
static_assert(offsetof(FEndNaviMapGlobalMetaData, icons) == 0x000010, "Member 'FEndNaviMapGlobalMetaData::icons' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndWheeledVehicleHandler
// 0x0038 (0x0048 - 0x0010)
struct FAnimNode_EndWheeledVehicleHandler final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x28];                                      // 0x0020(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndWheeledVehicleHandler) == 0x000008, "Wrong alignment on FAnimNode_EndWheeledVehicleHandler");
static_assert(sizeof(FAnimNode_EndWheeledVehicleHandler) == 0x000048, "Wrong size on FAnimNode_EndWheeledVehicleHandler");
static_assert(offsetof(FAnimNode_EndWheeledVehicleHandler, Source) == 0x000010, "Member 'FAnimNode_EndWheeledVehicleHandler::Source' has a wrong offset!");

// ScriptStruct EndGame.VfxLensFlareObjectData
// 0x0058 (0x0058 - 0x0000)
struct FVfxLensFlareObjectData final
{
public:
	int32                                         ResourceParameter;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iDrawCount;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fContinuationStartPosRatio;                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fContinuationEndPosRatio;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fContinuationRandPosRatio;                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fFitAngleRatio;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fContinuationRotationZ;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fScaleCenter;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fScaleOuter;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fScaleRand;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorCenter;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorOuter;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorRand;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVfxLensFlareObjectData) == 0x000004, "Wrong alignment on FVfxLensFlareObjectData");
static_assert(sizeof(FVfxLensFlareObjectData) == 0x000058, "Wrong size on FVfxLensFlareObjectData");
static_assert(offsetof(FVfxLensFlareObjectData, ResourceParameter) == 0x000000, "Member 'FVfxLensFlareObjectData::ResourceParameter' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, iDrawCount) == 0x000004, "Member 'FVfxLensFlareObjectData::iDrawCount' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fContinuationStartPosRatio) == 0x000008, "Member 'FVfxLensFlareObjectData::fContinuationStartPosRatio' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fContinuationEndPosRatio) == 0x00000C, "Member 'FVfxLensFlareObjectData::fContinuationEndPosRatio' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fContinuationRandPosRatio) == 0x000010, "Member 'FVfxLensFlareObjectData::fContinuationRandPosRatio' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fFitAngleRatio) == 0x000014, "Member 'FVfxLensFlareObjectData::fFitAngleRatio' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fContinuationRotationZ) == 0x000018, "Member 'FVfxLensFlareObjectData::fContinuationRotationZ' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fScaleCenter) == 0x00001C, "Member 'FVfxLensFlareObjectData::fScaleCenter' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fScaleOuter) == 0x000020, "Member 'FVfxLensFlareObjectData::fScaleOuter' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fScaleRand) == 0x000024, "Member 'FVfxLensFlareObjectData::fScaleRand' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, ColorCenter) == 0x000028, "Member 'FVfxLensFlareObjectData::ColorCenter' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, ColorOuter) == 0x000038, "Member 'FVfxLensFlareObjectData::ColorOuter' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, ColorRand) == 0x000048, "Member 'FVfxLensFlareObjectData::ColorRand' has a wrong offset!");

// ScriptStruct EndGame.EndWheelExpressionBoneSetting
// 0x0020 (0x0020 - 0x0000)
struct FEndWheelExpressionBoneSetting final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationRate;                                      // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseLocalAxisAsRightVector;                        // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         RightVectorAxis;                                   // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerformComponentSpaceVelocityCalculation;         // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndWheelExpressionBoneSetting) == 0x000004, "Wrong alignment on FEndWheelExpressionBoneSetting");
static_assert(sizeof(FEndWheelExpressionBoneSetting) == 0x000020, "Wrong size on FEndWheelExpressionBoneSetting");
static_assert(offsetof(FEndWheelExpressionBoneSetting, Bone) == 0x000000, "Member 'FEndWheelExpressionBoneSetting::Bone' has a wrong offset!");
static_assert(offsetof(FEndWheelExpressionBoneSetting, RotationRate) == 0x000010, "Member 'FEndWheelExpressionBoneSetting::RotationRate' has a wrong offset!");
static_assert(offsetof(FEndWheelExpressionBoneSetting, bUseLocalAxisAsRightVector) == 0x00001C, "Member 'FEndWheelExpressionBoneSetting::bUseLocalAxisAsRightVector' has a wrong offset!");
static_assert(offsetof(FEndWheelExpressionBoneSetting, RightVectorAxis) == 0x00001D, "Member 'FEndWheelExpressionBoneSetting::RightVectorAxis' has a wrong offset!");
static_assert(offsetof(FEndWheelExpressionBoneSetting, bPerformComponentSpaceVelocityCalculation) == 0x00001E, "Member 'FEndWheelExpressionBoneSetting::bPerformComponentSpaceVelocityCalculation' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndWheelExpression
// 0x0088 (0x0098 - 0x0010)
struct FAnimNode_EndWheelExpression final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FEndWheelExpressionBoneSetting> BoneSettings;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AccelerationRate;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x64];                                      // 0x0034(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndWheelExpression) == 0x000008, "Wrong alignment on FAnimNode_EndWheelExpression");
static_assert(sizeof(FAnimNode_EndWheelExpression) == 0x000098, "Wrong size on FAnimNode_EndWheelExpression");
static_assert(offsetof(FAnimNode_EndWheelExpression, Source) == 0x000010, "Member 'FAnimNode_EndWheelExpression::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndWheelExpression, BoneSettings) == 0x000020, "Member 'FAnimNode_EndWheelExpression::BoneSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndWheelExpression, AccelerationRate) == 0x000030, "Member 'FAnimNode_EndWheelExpression::AccelerationRate' has a wrong offset!");

// ScriptStruct EndGame.EndRestrictedAreaNotifyData
// 0x000C (0x000C - 0x0000)
struct FEndRestrictedAreaNotifyData final
{
public:
	class FName                                   TriggerName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndRestrictedAreaNotifyData) == 0x000004, "Wrong alignment on FEndRestrictedAreaNotifyData");
static_assert(sizeof(FEndRestrictedAreaNotifyData) == 0x00000C, "Wrong size on FEndRestrictedAreaNotifyData");
static_assert(offsetof(FEndRestrictedAreaNotifyData, TriggerName) == 0x000000, "Member 'FEndRestrictedAreaNotifyData::TriggerName' has a wrong offset!");
static_assert(offsetof(FEndRestrictedAreaNotifyData, Interval) == 0x000008, "Member 'FEndRestrictedAreaNotifyData::Interval' has a wrong offset!");

// ScriptStruct EndGame.EndRestrictedAreaNotifyDataInterval
// 0x0014 (0x0014 - 0x0000)
struct FEndRestrictedAreaNotifyDataInterval final
{
public:
	struct FEndRestrictedAreaNotifyData           NotifyData;                                        // 0x0000(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatInterval                         AppliedRange;                                      // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndRestrictedAreaNotifyDataInterval) == 0x000004, "Wrong alignment on FEndRestrictedAreaNotifyDataInterval");
static_assert(sizeof(FEndRestrictedAreaNotifyDataInterval) == 0x000014, "Wrong size on FEndRestrictedAreaNotifyDataInterval");
static_assert(offsetof(FEndRestrictedAreaNotifyDataInterval, NotifyData) == 0x000000, "Member 'FEndRestrictedAreaNotifyDataInterval::NotifyData' has a wrong offset!");
static_assert(offsetof(FEndRestrictedAreaNotifyDataInterval, AppliedRange) == 0x00000C, "Member 'FEndRestrictedAreaNotifyDataInterval::AppliedRange' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterAnimInstanceWeaponSettings
// 0x0010 (0x0010 - 0x0000)
struct FEndCharacterAnimInstanceWeaponSettings final
{
public:
	EWeaponSlot                                   Slot;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocketName;                                  // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCharacterAnimInstanceWeaponSettings) == 0x000004, "Wrong alignment on FEndCharacterAnimInstanceWeaponSettings");
static_assert(sizeof(FEndCharacterAnimInstanceWeaponSettings) == 0x000010, "Wrong size on FEndCharacterAnimInstanceWeaponSettings");
static_assert(offsetof(FEndCharacterAnimInstanceWeaponSettings, Slot) == 0x000000, "Member 'FEndCharacterAnimInstanceWeaponSettings::Slot' has a wrong offset!");
static_assert(offsetof(FEndCharacterAnimInstanceWeaponSettings, AttachSocketName) == 0x000004, "Member 'FEndCharacterAnimInstanceWeaponSettings::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAnimInstanceWeaponSettings, bVisibility) == 0x00000C, "Member 'FEndCharacterAnimInstanceWeaponSettings::bVisibility' has a wrong offset!");

// ScriptStruct EndGame.AnimNotify_EndBoneControlProperty
// 0x0020 (0x0020 - 0x0000)
struct FAnimNotify_EndBoneControlProperty final
{
public:
	EEndControlBone                               Bone;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndControlBoneType                           ControlType;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Translation;                                       // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EEndControlBoneCondition                      Condition;                                         // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNotify_EndBoneControlProperty) == 0x000004, "Wrong alignment on FAnimNotify_EndBoneControlProperty");
static_assert(sizeof(FAnimNotify_EndBoneControlProperty) == 0x000020, "Wrong size on FAnimNotify_EndBoneControlProperty");
static_assert(offsetof(FAnimNotify_EndBoneControlProperty, Bone) == 0x000000, "Member 'FAnimNotify_EndBoneControlProperty::Bone' has a wrong offset!");
static_assert(offsetof(FAnimNotify_EndBoneControlProperty, ControlType) == 0x000001, "Member 'FAnimNotify_EndBoneControlProperty::ControlType' has a wrong offset!");
static_assert(offsetof(FAnimNotify_EndBoneControlProperty, Translation) == 0x000004, "Member 'FAnimNotify_EndBoneControlProperty::Translation' has a wrong offset!");
static_assert(offsetof(FAnimNotify_EndBoneControlProperty, Rotation) == 0x000010, "Member 'FAnimNotify_EndBoneControlProperty::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNotify_EndBoneControlProperty, Condition) == 0x00001C, "Member 'FAnimNotify_EndBoneControlProperty::Condition' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterAttachEffectArguments
// 0x0070 (0x0070 - 0x0000)
struct FEndCharacterAttachEffectArguments final
{
public:
	class FName                                   AttachSocketName;                                  // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndCharacterAttachEffectResourceCategoryType ResourceCategory;                                  // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ResourceChara;                                     // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceLevelName;                                 // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveOnEscape;                                   // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveOnDeath;                                    // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetachOnRemove;                                   // 0x002A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          BeamTargetChara;                                   // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeamTargetCharaAttachSocketName;                   // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeamTargetDisableContactTargetChara;              // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BeamTargetContactEffectName;                       // 0x0044(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeamTargetContactWall;                            // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeamTargetContactOwnerChara;                      // 0x004D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLineEffect;                                       // 0x004E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineEffectTangentLength;                           // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreateSecondMin;                                   // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreateSecondMax;                                   // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopOffSecondMin;                                  // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopOffSecondMax;                                  // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReCreateSecondMin;                                 // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReCreateSecondMax;                                 // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchroParentActorVisible;                        // 0x006C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCharacterAttachEffectArguments) == 0x000008, "Wrong alignment on FEndCharacterAttachEffectArguments");
static_assert(sizeof(FEndCharacterAttachEffectArguments) == 0x000070, "Wrong size on FEndCharacterAttachEffectArguments");
static_assert(offsetof(FEndCharacterAttachEffectArguments, AttachSocketName) == 0x000000, "Member 'FEndCharacterAttachEffectArguments::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ResourceCategory) == 0x000008, "Member 'FEndCharacterAttachEffectArguments::ResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ResourceChara) == 0x000010, "Member 'FEndCharacterAttachEffectArguments::ResourceChara' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ResourceName) == 0x000018, "Member 'FEndCharacterAttachEffectArguments::ResourceName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ResourceLevelName) == 0x000020, "Member 'FEndCharacterAttachEffectArguments::ResourceLevelName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bRemoveOnEscape) == 0x000028, "Member 'FEndCharacterAttachEffectArguments::bRemoveOnEscape' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bRemoveOnDeath) == 0x000029, "Member 'FEndCharacterAttachEffectArguments::bRemoveOnDeath' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bDetachOnRemove) == 0x00002A, "Member 'FEndCharacterAttachEffectArguments::bDetachOnRemove' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, BeamTargetChara) == 0x000030, "Member 'FEndCharacterAttachEffectArguments::BeamTargetChara' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, BeamTargetCharaAttachSocketName) == 0x000038, "Member 'FEndCharacterAttachEffectArguments::BeamTargetCharaAttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bBeamTargetDisableContactTargetChara) == 0x000040, "Member 'FEndCharacterAttachEffectArguments::bBeamTargetDisableContactTargetChara' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, BeamTargetContactEffectName) == 0x000044, "Member 'FEndCharacterAttachEffectArguments::BeamTargetContactEffectName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bBeamTargetContactWall) == 0x00004C, "Member 'FEndCharacterAttachEffectArguments::bBeamTargetContactWall' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bBeamTargetContactOwnerChara) == 0x00004D, "Member 'FEndCharacterAttachEffectArguments::bBeamTargetContactOwnerChara' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bLineEffect) == 0x00004E, "Member 'FEndCharacterAttachEffectArguments::bLineEffect' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, LineEffectTangentLength) == 0x000050, "Member 'FEndCharacterAttachEffectArguments::LineEffectTangentLength' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, CreateSecondMin) == 0x000054, "Member 'FEndCharacterAttachEffectArguments::CreateSecondMin' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, CreateSecondMax) == 0x000058, "Member 'FEndCharacterAttachEffectArguments::CreateSecondMax' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, LoopOffSecondMin) == 0x00005C, "Member 'FEndCharacterAttachEffectArguments::LoopOffSecondMin' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, LoopOffSecondMax) == 0x000060, "Member 'FEndCharacterAttachEffectArguments::LoopOffSecondMax' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ReCreateSecondMin) == 0x000064, "Member 'FEndCharacterAttachEffectArguments::ReCreateSecondMin' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ReCreateSecondMax) == 0x000068, "Member 'FEndCharacterAttachEffectArguments::ReCreateSecondMax' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bSynchroParentActorVisible) == 0x00006C, "Member 'FEndCharacterAttachEffectArguments::bSynchroParentActorVisible' has a wrong offset!");

// ScriptStruct EndGame.EndPlayParticleActorInfo
// 0x000C (0x000C - 0x0000)
struct FEndPlayParticleActorInfo final
{
public:
	uint8                                         m_Enable : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   m_SocketName;                                      // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPlayParticleActorInfo) == 0x000004, "Wrong alignment on FEndPlayParticleActorInfo");
static_assert(sizeof(FEndPlayParticleActorInfo) == 0x00000C, "Wrong size on FEndPlayParticleActorInfo");
static_assert(offsetof(FEndPlayParticleActorInfo, m_SocketName) == 0x000004, "Member 'FEndPlayParticleActorInfo::m_SocketName' has a wrong offset!");

// ScriptStruct EndGame.MovieSceneEndToroccoParameters
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMovieSceneEndToroccoParameters final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEndToroccoParameters) == 0x000008, "Wrong alignment on FMovieSceneEndToroccoParameters");
static_assert(sizeof(FMovieSceneEndToroccoParameters) == 0x000028, "Wrong size on FMovieSceneEndToroccoParameters");

// ScriptStruct EndGame.EndCurveParameterPair
// 0x0004 (0x0014 - 0x0010)
struct FEndCurveParameterPair final : public FCurveParameterPair
{
public:
	EEndTimedNiagaraEffectAdvanced_CurveParameterType m_CurveParameterType;                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCurveParameterPair) == 0x000004, "Wrong alignment on FEndCurveParameterPair");
static_assert(sizeof(FEndCurveParameterPair) == 0x000014, "Wrong size on FEndCurveParameterPair");
static_assert(offsetof(FEndCurveParameterPair, m_CurveParameterType) == 0x000010, "Member 'FEndCurveParameterPair::m_CurveParameterType' has a wrong offset!");

// ScriptStruct EndGame.EndNavModifierInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FEndNavModifierInfo final
{
public:
	uint16                                        ID;                                                // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActorName;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndModifierType                              Type;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SameArea;                                          // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IntegerList;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FloatList;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList1;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList2;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList3;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList4;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList5;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList6;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        CompareVectorList;                                 // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNavModifierInfo) == 0x000008, "Wrong alignment on FEndNavModifierInfo");
static_assert(sizeof(FEndNavModifierInfo) == 0x0000B0, "Wrong size on FEndNavModifierInfo");
static_assert(offsetof(FEndNavModifierInfo, ID) == 0x000000, "Member 'FEndNavModifierInfo::ID' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, ActorName) == 0x000004, "Member 'FEndNavModifierInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, Type) == 0x00000C, "Member 'FEndNavModifierInfo::Type' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, SameArea) == 0x00000D, "Member 'FEndNavModifierInfo::SameArea' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, IntegerList) == 0x000010, "Member 'FEndNavModifierInfo::IntegerList' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, FloatList) == 0x000020, "Member 'FEndNavModifierInfo::FloatList' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, StringList) == 0x000030, "Member 'FEndNavModifierInfo::StringList' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList1) == 0x000040, "Member 'FEndNavModifierInfo::VectorList1' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList2) == 0x000050, "Member 'FEndNavModifierInfo::VectorList2' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList3) == 0x000060, "Member 'FEndNavModifierInfo::VectorList3' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList4) == 0x000070, "Member 'FEndNavModifierInfo::VectorList4' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList5) == 0x000080, "Member 'FEndNavModifierInfo::VectorList5' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList6) == 0x000090, "Member 'FEndNavModifierInfo::VectorList6' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, CompareVectorList) == 0x0000A0, "Member 'FEndNavModifierInfo::CompareVectorList' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFitGround_Balance
// 0x0014 (0x0014 - 0x0000)
struct FRigUnit_EndFitGround_Balance final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPitch;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsPitch;                                         // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoll;                                             // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndFitGround_Balance) == 0x000004, "Wrong alignment on FRigUnit_EndFitGround_Balance");
static_assert(sizeof(FRigUnit_EndFitGround_Balance) == 0x000014, "Wrong size on FRigUnit_EndFitGround_Balance");
static_assert(offsetof(FRigUnit_EndFitGround_Balance, Item) == 0x000000, "Member 'FRigUnit_EndFitGround_Balance::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Balance, Weight) == 0x00000C, "Member 'FRigUnit_EndFitGround_Balance::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Balance, bPitch) == 0x000010, "Member 'FRigUnit_EndFitGround_Balance::bPitch' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Balance, bAbsPitch) == 0x000011, "Member 'FRigUnit_EndFitGround_Balance::bAbsPitch' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Balance, bRoll) == 0x000012, "Member 'FRigUnit_EndFitGround_Balance::bRoll' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFitGround_Interp
// 0x0008 (0x0008 - 0x0000)
struct FRigUnit_EndFitGround_Interp final
{
public:
	float                                         GroundHeightInterpSpeed;                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundNormalFitAngleInterpSpeed;                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFitGround_Interp) == 0x000004, "Wrong alignment on FRigUnit_EndFitGround_Interp");
static_assert(sizeof(FRigUnit_EndFitGround_Interp) == 0x000008, "Wrong size on FRigUnit_EndFitGround_Interp");
static_assert(offsetof(FRigUnit_EndFitGround_Interp, GroundHeightInterpSpeed) == 0x000000, "Member 'FRigUnit_EndFitGround_Interp::GroundHeightInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Interp, GroundNormalFitAngleInterpSpeed) == 0x000004, "Member 'FRigUnit_EndFitGround_Interp::GroundNormalFitAngleInterpSpeed' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFitGround_Settings
// 0x0058 (0x0058 - 0x0000)
struct FRigUnit_EndFitGround_Settings final
{
public:
	struct FRigElementKey                         RootItem;                                          // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         HipItem;                                           // 0x000C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndFitGround_Balance>  Balances;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseInterpSettingsWalk;                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInterpSettingsRun;                             // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndFitGround_Interp           InterpSettingsIdle;                                // 0x002C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndFitGround_Interp           InterpSettingsWalk;                                // 0x0034(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndFitGround_Interp           InterpSettingsRun;                                 // 0x003C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OverrideGroundTraceOffsetX;                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGroundTraceOffsetY;                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundNormalFitAngleMax;                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMigrate;                                          // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndFitGround_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndFitGround_Settings");
static_assert(sizeof(FRigUnit_EndFitGround_Settings) == 0x000058, "Wrong size on FRigUnit_EndFitGround_Settings");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, RootItem) == 0x000000, "Member 'FRigUnit_EndFitGround_Settings::RootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, HipItem) == 0x00000C, "Member 'FRigUnit_EndFitGround_Settings::HipItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, Balances) == 0x000018, "Member 'FRigUnit_EndFitGround_Settings::Balances' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, bUseInterpSettingsWalk) == 0x000028, "Member 'FRigUnit_EndFitGround_Settings::bUseInterpSettingsWalk' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, bUseInterpSettingsRun) == 0x000029, "Member 'FRigUnit_EndFitGround_Settings::bUseInterpSettingsRun' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, InterpSettingsIdle) == 0x00002C, "Member 'FRigUnit_EndFitGround_Settings::InterpSettingsIdle' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, InterpSettingsWalk) == 0x000034, "Member 'FRigUnit_EndFitGround_Settings::InterpSettingsWalk' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, InterpSettingsRun) == 0x00003C, "Member 'FRigUnit_EndFitGround_Settings::InterpSettingsRun' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, OverrideGroundTraceOffsetX) == 0x000044, "Member 'FRigUnit_EndFitGround_Settings::OverrideGroundTraceOffsetX' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, OverrideGroundTraceOffsetY) == 0x000048, "Member 'FRigUnit_EndFitGround_Settings::OverrideGroundTraceOffsetY' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, GroundNormalFitAngleMax) == 0x00004C, "Member 'FRigUnit_EndFitGround_Settings::GroundNormalFitAngleMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Settings, bMigrate) == 0x000050, "Member 'FRigUnit_EndFitGround_Settings::bMigrate' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFitGround_DebugSettings
// 0x0050 (0x0050 - 0x0000)
struct FRigUnit_EndFitGround_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDrawTrace;                                        // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableInterp;                                    // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseImmediateTrace;                                // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMovementFloor;                                 // 0x0043(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndFitGround_DebugSettings) == 0x000010, "Wrong alignment on FRigUnit_EndFitGround_DebugSettings");
static_assert(sizeof(FRigUnit_EndFitGround_DebugSettings) == 0x000050, "Wrong size on FRigUnit_EndFitGround_DebugSettings");
static_assert(offsetof(FRigUnit_EndFitGround_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndFitGround_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_DebugSettings, Scale) == 0x000004, "Member 'FRigUnit_EndFitGround_DebugSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_DebugSettings, WorldOffset) == 0x000010, "Member 'FRigUnit_EndFitGround_DebugSettings::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_DebugSettings, bDrawTrace) == 0x000040, "Member 'FRigUnit_EndFitGround_DebugSettings::bDrawTrace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_DebugSettings, bDisableInterp) == 0x000041, "Member 'FRigUnit_EndFitGround_DebugSettings::bDisableInterp' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_DebugSettings, bUseImmediateTrace) == 0x000042, "Member 'FRigUnit_EndFitGround_DebugSettings::bUseImmediateTrace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_DebugSettings, bUseMovementFloor) == 0x000043, "Member 'FRigUnit_EndFitGround_DebugSettings::bUseMovementFloor' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFitGround_BalanceCache
// 0x0014 (0x0014 - 0x0000)
struct FRigUnit_EndFitGround_BalanceCache final
{
public:
	struct FCachedRigElement                      CachedItem;                                        // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFitGround_BalanceCache) == 0x000004, "Wrong alignment on FRigUnit_EndFitGround_BalanceCache");
static_assert(sizeof(FRigUnit_EndFitGround_BalanceCache) == 0x000014, "Wrong size on FRigUnit_EndFitGround_BalanceCache");
static_assert(offsetof(FRigUnit_EndFitGround_BalanceCache, CachedItem) == 0x000000, "Member 'FRigUnit_EndFitGround_BalanceCache::CachedItem' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFitGround_Cache
// 0x0140 (0x0140 - 0x0000)
struct FRigUnit_EndFitGround_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastSetSeamlessOutSnapShotLocation;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkRunAlpha;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeFitRate;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSpaceGroundHeightBlendRate;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundDeltaHeight;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  GroundUpDeltaRotation;                             // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             WorldTransform;                                    // 0x0030(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             FloorHitResult;                                    // 0x0060(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                FloorLocation;                                     // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedRootItem;                                    // 0x00FC(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedHipItem;                                     // 0x0110(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndFitGround_BalanceCache> BalanceCaches;                                     // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndFitGround_Cache) == 0x000010, "Wrong alignment on FRigUnit_EndFitGround_Cache");
static_assert(sizeof(FRigUnit_EndFitGround_Cache) == 0x000140, "Wrong size on FRigUnit_EndFitGround_Cache");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndFitGround_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, bLastSetSeamlessOutSnapShotLocation) == 0x000001, "Member 'FRigUnit_EndFitGround_Cache::bLastSetSeamlessOutSnapShotLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, WalkRunAlpha) == 0x000004, "Member 'FRigUnit_EndFitGround_Cache::WalkRunAlpha' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, SlopeFitRate) == 0x000008, "Member 'FRigUnit_EndFitGround_Cache::SlopeFitRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, WorldSpaceGroundHeightBlendRate) == 0x00000C, "Member 'FRigUnit_EndFitGround_Cache::WorldSpaceGroundHeightBlendRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, GroundDeltaHeight) == 0x000010, "Member 'FRigUnit_EndFitGround_Cache::GroundDeltaHeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, GroundUpDeltaRotation) == 0x000020, "Member 'FRigUnit_EndFitGround_Cache::GroundUpDeltaRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, WorldTransform) == 0x000030, "Member 'FRigUnit_EndFitGround_Cache::WorldTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, FloorHitResult) == 0x000060, "Member 'FRigUnit_EndFitGround_Cache::FloorHitResult' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, FloorLocation) == 0x0000F0, "Member 'FRigUnit_EndFitGround_Cache::FloorLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, CachedRootItem) == 0x0000FC, "Member 'FRigUnit_EndFitGround_Cache::CachedRootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, CachedHipItem) == 0x000110, "Member 'FRigUnit_EndFitGround_Cache::CachedHipItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround_Cache, BalanceCaches) == 0x000128, "Member 'FRigUnit_EndFitGround_Cache::BalanceCaches' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFitGround
// 0x01F8 (0x0260 - 0x0068)
struct FRigUnit_EndFitGround final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndFitGround_Settings         Settings;                                          // 0x0068(0x0058)(NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0xC];                                       // 0x00C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndFitGround_DebugSettings    DebugSettings;                                     // 0x00D0(0x0050)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndFitGround_Cache            Cache;                                             // 0x0120(0x0140)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFitGround) == 0x000010, "Wrong alignment on FRigUnit_EndFitGround");
static_assert(sizeof(FRigUnit_EndFitGround) == 0x000260, "Wrong size on FRigUnit_EndFitGround");
static_assert(offsetof(FRigUnit_EndFitGround, Settings) == 0x000068, "Member 'FRigUnit_EndFitGround::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround, Weight) == 0x0000C0, "Member 'FRigUnit_EndFitGround::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround, DebugSettings) == 0x0000D0, "Member 'FRigUnit_EndFitGround::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFitGround, Cache) == 0x000120, "Member 'FRigUnit_EndFitGround::Cache' has a wrong offset!");

// ScriptStruct EndGame.EndFieldAnimSettingBase
// 0x0020 (0x0020 - 0x0000)
struct FEndFieldAnimSettingBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndFieldActorAnimUnit>         AnimationUnits;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsLoop;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsKeep;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldAnimSettingBase) == 0x000008, "Wrong alignment on FEndFieldAnimSettingBase");
static_assert(sizeof(FEndFieldAnimSettingBase) == 0x000020, "Wrong size on FEndFieldAnimSettingBase");
static_assert(offsetof(FEndFieldAnimSettingBase, AnimationUnits) == 0x000008, "Member 'FEndFieldAnimSettingBase::AnimationUnits' has a wrong offset!");
static_assert(offsetof(FEndFieldAnimSettingBase, bLastAnimIsLoop) == 0x000018, "Member 'FEndFieldAnimSettingBase::bLastAnimIsLoop' has a wrong offset!");
static_assert(offsetof(FEndFieldAnimSettingBase, bLastAnimIsKeep) == 0x000019, "Member 'FEndFieldAnimSettingBase::bLastAnimIsKeep' has a wrong offset!");

// ScriptStruct EndGame.FieldActionEnterEffectController
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FFieldActionEnterEffectController final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldActionEnterEffectController) == 0x000008, "Wrong alignment on FFieldActionEnterEffectController");
static_assert(sizeof(FFieldActionEnterEffectController) == 0x000028, "Wrong size on FFieldActionEnterEffectController");

// ScriptStruct EndGame.EndDeformAnimationPreviewSettings
// 0x0008 (0x0008 - 0x0000)
struct FEndDeformAnimationPreviewSettings final
{
public:
	EEndDeformAnimationType                       AnimationType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartFrame;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDeformAnimationPreviewSettings) == 0x000004, "Wrong alignment on FEndDeformAnimationPreviewSettings");
static_assert(sizeof(FEndDeformAnimationPreviewSettings) == 0x000008, "Wrong size on FEndDeformAnimationPreviewSettings");
static_assert(offsetof(FEndDeformAnimationPreviewSettings, AnimationType) == 0x000000, "Member 'FEndDeformAnimationPreviewSettings::AnimationType' has a wrong offset!");
static_assert(offsetof(FEndDeformAnimationPreviewSettings, StartFrame) == 0x000004, "Member 'FEndDeformAnimationPreviewSettings::StartFrame' has a wrong offset!");

// ScriptStruct EndGame.EndFieldStartPointBase
// 0x0040 (0x0040 - 0x0000)
struct FEndFieldStartPointBase final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldStartPointBase) == 0x000010, "Wrong alignment on FEndFieldStartPointBase");
static_assert(sizeof(FEndFieldStartPointBase) == 0x000040, "Wrong size on FEndFieldStartPointBase");
static_assert(offsetof(FEndFieldStartPointBase, TargetTransform) == 0x000010, "Member 'FEndFieldStartPointBase::TargetTransform' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo
// 0x0050 (0x0050 - 0x0000)
struct FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo final
{
public:
	struct FTransform                             InvComponentTransform;                             // 0x0000(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x13];                                      // 0x003D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo) == 0x000010, "Wrong alignment on FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo");
static_assert(sizeof(FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo) == 0x000050, "Wrong size on FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo");
static_assert(offsetof(FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo, InvComponentTransform) == 0x000000, "Member 'FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo::InvComponentTransform' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo, BoxExtent) == 0x000030, "Member 'FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo::BoxExtent' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo, bActive) == 0x00003C, "Member 'FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo::bActive' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueCommandSectionTemplate
// 0x0000 (0x0020 - 0x0020)
struct FEndDialogueCommandSectionTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FEndDialogueCommandSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueCommandSectionTemplate");
static_assert(sizeof(FEndDialogueCommandSectionTemplate) == 0x000020, "Wrong size on FEndDialogueCommandSectionTemplate");

// ScriptStruct EndGame.CreateAStarPointData
// 0x0048 (0x0048 - 0x0000)
struct FCreateAStarPointData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Index;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                pos;                                               // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32>                                neighborPointIndexes;                              // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBattleArea;                                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GroundHitPos;                                      // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreateAStarPointData) == 0x000008, "Wrong alignment on FCreateAStarPointData");
static_assert(sizeof(FCreateAStarPointData) == 0x000048, "Wrong size on FCreateAStarPointData");
static_assert(offsetof(FCreateAStarPointData, Name) == 0x000000, "Member 'FCreateAStarPointData::Name' has a wrong offset!");
static_assert(offsetof(FCreateAStarPointData, Index) == 0x000008, "Member 'FCreateAStarPointData::Index' has a wrong offset!");
static_assert(offsetof(FCreateAStarPointData, pos) == 0x00000C, "Member 'FCreateAStarPointData::pos' has a wrong offset!");
static_assert(offsetof(FCreateAStarPointData, neighborPointIndexes) == 0x000018, "Member 'FCreateAStarPointData::neighborPointIndexes' has a wrong offset!");
static_assert(offsetof(FCreateAStarPointData, Normal) == 0x000028, "Member 'FCreateAStarPointData::Normal' has a wrong offset!");
static_assert(offsetof(FCreateAStarPointData, InBattleArea) == 0x000034, "Member 'FCreateAStarPointData::InBattleArea' has a wrong offset!");
static_assert(offsetof(FCreateAStarPointData, GroundHitPos) == 0x000038, "Member 'FCreateAStarPointData::GroundHitPos' has a wrong offset!");

// ScriptStruct EndGame.End3DAudioTriggerRequest
// 0x0010 (0x0010 - 0x0000)
struct FEnd3DAudioTriggerRequest final
{
public:
	class FName                                   StateTrigger;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePercent;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnd3DAudioTriggerRequest) == 0x000004, "Wrong alignment on FEnd3DAudioTriggerRequest");
static_assert(sizeof(FEnd3DAudioTriggerRequest) == 0x000010, "Wrong size on FEnd3DAudioTriggerRequest");
static_assert(offsetof(FEnd3DAudioTriggerRequest, StateTrigger) == 0x000000, "Member 'FEnd3DAudioTriggerRequest::StateTrigger' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioTriggerRequest, TimePercent) == 0x000008, "Member 'FEnd3DAudioTriggerRequest::TimePercent' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterResidentEffect
// 0x0070 (0x0070 - 0x0000)
struct FEndCharacterResidentEffect final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndNiagaraCreateParams                m_NiagaraCreateParams;                             // 0x0008(0x0068)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCharacterResidentEffect) == 0x000008, "Wrong alignment on FEndCharacterResidentEffect");
static_assert(sizeof(FEndCharacterResidentEffect) == 0x000070, "Wrong size on FEndCharacterResidentEffect");
static_assert(offsetof(FEndCharacterResidentEffect, m_NiagaraCreateParams) == 0x000008, "Member 'FEndCharacterResidentEffect::m_NiagaraCreateParams' has a wrong offset!");

// ScriptStruct EndGame.EndMenuImagePathMapping
// 0x0020 (0x0020 - 0x0000)
struct FEndMenuImagePathMapping final
{
public:
	class FName                                   MappingName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ImagePath;                                         // 0x0008(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuImagePathMapping) == 0x000008, "Wrong alignment on FEndMenuImagePathMapping");
static_assert(sizeof(FEndMenuImagePathMapping) == 0x000020, "Wrong size on FEndMenuImagePathMapping");
static_assert(offsetof(FEndMenuImagePathMapping, MappingName) == 0x000000, "Member 'FEndMenuImagePathMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FEndMenuImagePathMapping, ImagePath) == 0x000008, "Member 'FEndMenuImagePathMapping::ImagePath' has a wrong offset!");

// ScriptStruct EndGame.EndAerialModule
// 0xBB40 (0xBB40 - 0x0000)
struct FEndAerialModule final
{
public:
	TArray<class FName>                           territoryID;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	int32                                         X_POINT_MAX;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y_POINT_MAX;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z_POINT_MAX;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableEqualInterval;                               // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanEverAffectNavigation;                           // 0x001D(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAffectedTerritory;                               // 0x001E(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotCheckCollision;                                 // 0x001F(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotCheckGameCameraCollision;                       // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateUnderFloorPoint;                            // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowIsoLated;                                    // 0x0022(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInWater;                                     // 0x0023(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCreatePoint;                                 // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         X_CM_SPACE_MAX;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y_CM_SPACE_MAX;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z_CM_SPACE_MAX;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   AABB;                                              // 0x0034(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         XPointNum;                                         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         YPointNum;                                         // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ZPointNum;                                         // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PointMaxNum;                                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0xBAE8];                                    // 0x0058(0xBAE8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAerialModule) == 0x000008, "Wrong alignment on FEndAerialModule");
static_assert(sizeof(FEndAerialModule) == 0x00BB40, "Wrong size on FEndAerialModule");
static_assert(offsetof(FEndAerialModule, territoryID) == 0x000000, "Member 'FEndAerialModule::territoryID' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, X_POINT_MAX) == 0x000010, "Member 'FEndAerialModule::X_POINT_MAX' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, Y_POINT_MAX) == 0x000014, "Member 'FEndAerialModule::Y_POINT_MAX' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, Z_POINT_MAX) == 0x000018, "Member 'FEndAerialModule::Z_POINT_MAX' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, EnableEqualInterval) == 0x00001C, "Member 'FEndAerialModule::EnableEqualInterval' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, CanEverAffectNavigation) == 0x00001D, "Member 'FEndAerialModule::CanEverAffectNavigation' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, IsAffectedTerritory) == 0x00001E, "Member 'FEndAerialModule::IsAffectedTerritory' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, NotCheckCollision) == 0x00001F, "Member 'FEndAerialModule::NotCheckCollision' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, NotCheckGameCameraCollision) == 0x000020, "Member 'FEndAerialModule::NotCheckGameCameraCollision' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, bCreateUnderFloorPoint) == 0x000021, "Member 'FEndAerialModule::bCreateUnderFloorPoint' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, bAllowIsoLated) == 0x000022, "Member 'FEndAerialModule::bAllowIsoLated' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, bAllowInWater) == 0x000023, "Member 'FEndAerialModule::bAllowInWater' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, bForceCreatePoint) == 0x000024, "Member 'FEndAerialModule::bForceCreatePoint' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, X_CM_SPACE_MAX) == 0x000028, "Member 'FEndAerialModule::X_CM_SPACE_MAX' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, Y_CM_SPACE_MAX) == 0x00002C, "Member 'FEndAerialModule::Y_CM_SPACE_MAX' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, Z_CM_SPACE_MAX) == 0x000030, "Member 'FEndAerialModule::Z_CM_SPACE_MAX' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, AABB) == 0x000034, "Member 'FEndAerialModule::AABB' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, XPointNum) == 0x000050, "Member 'FEndAerialModule::XPointNum' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, YPointNum) == 0x000051, "Member 'FEndAerialModule::YPointNum' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, ZPointNum) == 0x000052, "Member 'FEndAerialModule::ZPointNum' has a wrong offset!");
static_assert(offsetof(FEndAerialModule, PointMaxNum) == 0x000054, "Member 'FEndAerialModule::PointMaxNum' has a wrong offset!");

// ScriptStruct EndGame.ChocoboCraftQuestPoint
// 0x001C (0x001C - 0x0000)
struct FChocoboCraftQuestPoint final
{
public:
	int32                                         Point;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiscoveryDistance;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DiscoveryTrigger;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StoryFlag;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCompleteUntilNextPoint;                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChocoboCraftQuestPoint) == 0x000004, "Wrong alignment on FChocoboCraftQuestPoint");
static_assert(sizeof(FChocoboCraftQuestPoint) == 0x00001C, "Wrong size on FChocoboCraftQuestPoint");
static_assert(offsetof(FChocoboCraftQuestPoint, Point) == 0x000000, "Member 'FChocoboCraftQuestPoint::Point' has a wrong offset!");
static_assert(offsetof(FChocoboCraftQuestPoint, DiscoveryDistance) == 0x000004, "Member 'FChocoboCraftQuestPoint::DiscoveryDistance' has a wrong offset!");
static_assert(offsetof(FChocoboCraftQuestPoint, DiscoveryTrigger) == 0x000008, "Member 'FChocoboCraftQuestPoint::DiscoveryTrigger' has a wrong offset!");
static_assert(offsetof(FChocoboCraftQuestPoint, StoryFlag) == 0x000010, "Member 'FChocoboCraftQuestPoint::StoryFlag' has a wrong offset!");
static_assert(offsetof(FChocoboCraftQuestPoint, bAutoCompleteUntilNextPoint) == 0x000018, "Member 'FChocoboCraftQuestPoint::bAutoCompleteUntilNextPoint' has a wrong offset!");

// ScriptStruct EndGame.AerialPointData
// 0x0048 (0x0048 - 0x0000)
struct FAerialPointData final
{
public:
	uint32                                        Index;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                pos;                                               // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32>                                neighborPointIndexes;                              // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                GroundHitPos;                                      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x1C];                                      // 0x002C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAerialPointData) == 0x000008, "Wrong alignment on FAerialPointData");
static_assert(sizeof(FAerialPointData) == 0x000048, "Wrong size on FAerialPointData");
static_assert(offsetof(FAerialPointData, Index) == 0x000000, "Member 'FAerialPointData::Index' has a wrong offset!");
static_assert(offsetof(FAerialPointData, pos) == 0x000004, "Member 'FAerialPointData::pos' has a wrong offset!");
static_assert(offsetof(FAerialPointData, neighborPointIndexes) == 0x000010, "Member 'FAerialPointData::neighborPointIndexes' has a wrong offset!");
static_assert(offsetof(FAerialPointData, GroundHitPos) == 0x000020, "Member 'FAerialPointData::GroundHitPos' has a wrong offset!");

// ScriptStruct EndGame.AerialPointInfo
// 0x0060 (0x0060 - 0x0000)
struct FAerialPointInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAerialPointData                       Data;                                              // 0x0018(0x0048)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAerialPointInfo) == 0x000008, "Wrong alignment on FAerialPointInfo");
static_assert(sizeof(FAerialPointInfo) == 0x000060, "Wrong size on FAerialPointInfo");
static_assert(offsetof(FAerialPointInfo, Data) == 0x000018, "Member 'FAerialPointInfo::Data' has a wrong offset!");

// ScriptStruct EndGame.MovieSceneEndShootingGameParameters
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMovieSceneEndShootingGameParameters final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEndShootingGameParameters) == 0x000008, "Wrong alignment on FMovieSceneEndShootingGameParameters");
static_assert(sizeof(FMovieSceneEndShootingGameParameters) == 0x000028, "Wrong size on FMovieSceneEndShootingGameParameters");

// ScriptStruct EndGame.EndShootingGamePayload
// 0x0060 (0x0060 - 0x0000)
struct FEndShootingGamePayload final
{
public:
	uint8                                         Priority;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EEndShootingGameSectionType                   Type;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetParamID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RouteActorName;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RouteIndex;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedRate;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SurvivalTime;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SendTriggerName;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShootingSEType                               SEType;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShootingAdaptiveEffectType                   FFBEffestType;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneEndShootingGameParameters   Parameters;                                        // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndShootingGamePayload) == 0x000008, "Wrong alignment on FEndShootingGamePayload");
static_assert(sizeof(FEndShootingGamePayload) == 0x000060, "Wrong size on FEndShootingGamePayload");
static_assert(offsetof(FEndShootingGamePayload, Priority) == 0x000000, "Member 'FEndShootingGamePayload::Priority' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, Type) == 0x000004, "Member 'FEndShootingGamePayload::Type' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, TargetParamID) == 0x000008, "Member 'FEndShootingGamePayload::TargetParamID' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, RouteActorName) == 0x000010, "Member 'FEndShootingGamePayload::RouteActorName' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, RouteIndex) == 0x000018, "Member 'FEndShootingGamePayload::RouteIndex' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, SpeedRate) == 0x00001C, "Member 'FEndShootingGamePayload::SpeedRate' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, bReverse) == 0x000020, "Member 'FEndShootingGamePayload::bReverse' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, SurvivalTime) == 0x000024, "Member 'FEndShootingGamePayload::SurvivalTime' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, SendTriggerName) == 0x000028, "Member 'FEndShootingGamePayload::SendTriggerName' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, SEType) == 0x000030, "Member 'FEndShootingGamePayload::SEType' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, FFBEffestType) == 0x000034, "Member 'FEndShootingGamePayload::FFBEffestType' has a wrong offset!");
static_assert(offsetof(FEndShootingGamePayload, Parameters) == 0x000038, "Member 'FEndShootingGamePayload::Parameters' has a wrong offset!");

// ScriptStruct EndGame.EndAIEnemyRightToAttackInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndAIEnemyRightToAttackInfo final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CountMax;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalMax;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApplyMembrsNumLine;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIEnemyRightToAttackInfo) == 0x000004, "Wrong alignment on FEndAIEnemyRightToAttackInfo");
static_assert(sizeof(FEndAIEnemyRightToAttackInfo) == 0x000010, "Wrong size on FEndAIEnemyRightToAttackInfo");
static_assert(offsetof(FEndAIEnemyRightToAttackInfo, CountMax) == 0x000004, "Member 'FEndAIEnemyRightToAttackInfo::CountMax' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyRightToAttackInfo, IntervalMax) == 0x000008, "Member 'FEndAIEnemyRightToAttackInfo::IntervalMax' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyRightToAttackInfo, ApplyMembrsNumLine) == 0x00000C, "Member 'FEndAIEnemyRightToAttackInfo::ApplyMembrsNumLine' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboRaceCharacterBase
// 0x0910 (0x0910 - 0x0000)
struct alignas(0x10) FEndChocoboRaceCharacterBase
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AEndCharacterBase>> CourseOutMoogle;                                   // 0x0020(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x8E0];                                     // 0x0030(0x08E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndChocoboRaceCharacterBase) == 0x000010, "Wrong alignment on FEndChocoboRaceCharacterBase");
static_assert(sizeof(FEndChocoboRaceCharacterBase) == 0x000910, "Wrong size on FEndChocoboRaceCharacterBase");
static_assert(offsetof(FEndChocoboRaceCharacterBase, CourseOutMoogle) == 0x000020, "Member 'FEndChocoboRaceCharacterBase::CourseOutMoogle' has a wrong offset!");

// ScriptStruct EndGame.EndAIReactionInfoOther
// 0x0002 (0x0002 - 0x0000)
struct FEndAIReactionInfoOther final
{
public:
	EEndAIReactionInfoOtherType                   OtherType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIReactionPlayerType                      PlayerType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIReactionInfoOther) == 0x000001, "Wrong alignment on FEndAIReactionInfoOther");
static_assert(sizeof(FEndAIReactionInfoOther) == 0x000002, "Wrong size on FEndAIReactionInfoOther");
static_assert(offsetof(FEndAIReactionInfoOther, OtherType) == 0x000000, "Member 'FEndAIReactionInfoOther::OtherType' has a wrong offset!");
static_assert(offsetof(FEndAIReactionInfoOther, PlayerType) == 0x000001, "Member 'FEndAIReactionInfoOther::PlayerType' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndContactShake_ItemCache
// 0x0034 (0x0034 - 0x0000)
struct FRigUnit_EndContactShake_ItemCache final
{
public:
	struct FCachedRigElement                      CachedItem;                                        // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeltaTranslation;                                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BeginDeltaTranslation;                             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmplitudeRate;                                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmplitudeTimer;                                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndContactShake_ItemCache) == 0x000004, "Wrong alignment on FRigUnit_EndContactShake_ItemCache");
static_assert(sizeof(FRigUnit_EndContactShake_ItemCache) == 0x000034, "Wrong size on FRigUnit_EndContactShake_ItemCache");
static_assert(offsetof(FRigUnit_EndContactShake_ItemCache, CachedItem) == 0x000000, "Member 'FRigUnit_EndContactShake_ItemCache::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_ItemCache, DeltaTranslation) == 0x000014, "Member 'FRigUnit_EndContactShake_ItemCache::DeltaTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_ItemCache, BeginDeltaTranslation) == 0x000020, "Member 'FRigUnit_EndContactShake_ItemCache::BeginDeltaTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_ItemCache, AmplitudeRate) == 0x00002C, "Member 'FRigUnit_EndContactShake_ItemCache::AmplitudeRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_ItemCache, AmplitudeTimer) == 0x000030, "Member 'FRigUnit_EndContactShake_ItemCache::AmplitudeTimer' has a wrong offset!");

// ScriptStruct EndGame.EndAIReactionInfoDamageSource_Property
// 0x0002 (0x0002 - 0x0000)
struct FEndAIReactionInfoDamageSource_Property final
{
public:
	EEndBattleDamageSourceProperty                DamageSource_Property;                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIReactionPlayerType                      PlayerType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIReactionInfoDamageSource_Property) == 0x000001, "Wrong alignment on FEndAIReactionInfoDamageSource_Property");
static_assert(sizeof(FEndAIReactionInfoDamageSource_Property) == 0x000002, "Wrong size on FEndAIReactionInfoDamageSource_Property");
static_assert(offsetof(FEndAIReactionInfoDamageSource_Property, DamageSource_Property) == 0x000000, "Member 'FEndAIReactionInfoDamageSource_Property::DamageSource_Property' has a wrong offset!");
static_assert(offsetof(FEndAIReactionInfoDamageSource_Property, PlayerType) == 0x000001, "Member 'FEndAIReactionInfoDamageSource_Property::PlayerType' has a wrong offset!");

// ScriptStruct EndGame.EndAIReactionInfoAbility
// 0x000C (0x000C - 0x0000)
struct FEndAIReactionInfoAbility final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIReactionPlayerType                      PlayerType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIReactionInfoAbility) == 0x000004, "Wrong alignment on FEndAIReactionInfoAbility");
static_assert(sizeof(FEndAIReactionInfoAbility) == 0x00000C, "Wrong size on FEndAIReactionInfoAbility");
static_assert(offsetof(FEndAIReactionInfoAbility, AbilityId) == 0x000000, "Member 'FEndAIReactionInfoAbility::AbilityId' has a wrong offset!");
static_assert(offsetof(FEndAIReactionInfoAbility, PlayerType) == 0x000008, "Member 'FEndAIReactionInfoAbility::PlayerType' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaBeamTargetParameters
// 0x0018 (0x0018 - 0x0000)
struct FEndCinemaBeamTargetParameters final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetSocketName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetComponentName;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCinemaBeamTargetParameters) == 0x000004, "Wrong alignment on FEndCinemaBeamTargetParameters");
static_assert(sizeof(FEndCinemaBeamTargetParameters) == 0x000018, "Wrong size on FEndCinemaBeamTargetParameters");
static_assert(offsetof(FEndCinemaBeamTargetParameters, TargetActorName) == 0x000000, "Member 'FEndCinemaBeamTargetParameters::TargetActorName' has a wrong offset!");
static_assert(offsetof(FEndCinemaBeamTargetParameters, TargetSocketName) == 0x000008, "Member 'FEndCinemaBeamTargetParameters::TargetSocketName' has a wrong offset!");
static_assert(offsetof(FEndCinemaBeamTargetParameters, TargetComponentName) == 0x000010, "Member 'FEndCinemaBeamTargetParameters::TargetComponentName' has a wrong offset!");

// ScriptStruct EndGame.EndAIReactionInfoCommand
// 0x0002 (0x0002 - 0x0000)
struct FEndAIReactionInfoCommand final
{
public:
	EEndBattleAbilityCommandType                  CommandType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIReactionPlayerType                      PlayerType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIReactionInfoCommand) == 0x000001, "Wrong alignment on FEndAIReactionInfoCommand");
static_assert(sizeof(FEndAIReactionInfoCommand) == 0x000002, "Wrong size on FEndAIReactionInfoCommand");
static_assert(offsetof(FEndAIReactionInfoCommand, CommandType) == 0x000000, "Member 'FEndAIReactionInfoCommand::CommandType' has a wrong offset!");
static_assert(offsetof(FEndAIReactionInfoCommand, PlayerType) == 0x000001, "Member 'FEndAIReactionInfoCommand::PlayerType' has a wrong offset!");

// ScriptStruct EndGame.EndAIEnemyFieldAnimationSetting
// 0x000C (0x000C - 0x0000)
struct FEndAIEnemyFieldAnimationSetting final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSuspend;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIEnemyFieldAnimationSetting) == 0x000004, "Wrong alignment on FEndAIEnemyFieldAnimationSetting");
static_assert(sizeof(FEndAIEnemyFieldAnimationSetting) == 0x00000C, "Wrong size on FEndAIEnemyFieldAnimationSetting");
static_assert(offsetof(FEndAIEnemyFieldAnimationSetting, AnimName) == 0x000000, "Member 'FEndAIEnemyFieldAnimationSetting::AnimName' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyFieldAnimationSetting, bCanSuspend) == 0x000008, "Member 'FEndAIEnemyFieldAnimationSetting::bCanSuspend' has a wrong offset!");

// ScriptStruct EndGame.EndAIActionOverrideAroundParam
// 0x0010 (0x0010 - 0x0000)
struct FEndAIActionOverrideAroundParam final
{
public:
	class FName                                   MoveDefTag;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AroundTimeOut;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AroundDistance;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIActionOverrideAroundParam) == 0x000004, "Wrong alignment on FEndAIActionOverrideAroundParam");
static_assert(sizeof(FEndAIActionOverrideAroundParam) == 0x000010, "Wrong size on FEndAIActionOverrideAroundParam");
static_assert(offsetof(FEndAIActionOverrideAroundParam, MoveDefTag) == 0x000000, "Member 'FEndAIActionOverrideAroundParam::MoveDefTag' has a wrong offset!");
static_assert(offsetof(FEndAIActionOverrideAroundParam, AroundTimeOut) == 0x000008, "Member 'FEndAIActionOverrideAroundParam::AroundTimeOut' has a wrong offset!");
static_assert(offsetof(FEndAIActionOverrideAroundParam, AroundDistance) == 0x00000C, "Member 'FEndAIActionOverrideAroundParam::AroundDistance' has a wrong offset!");

// ScriptStruct EndGame.EndAIBattleGroupSetting
// 0x0018 (0x0018 - 0x0000)
struct FEndAIBattleGroupSetting final
{
public:
	class FName                                   GroupId;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBattleGroupLeader                       LeaderType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMoveDefinitionHerd;                            // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UEndAIMoveDefinitionHerd>   MoveDefinitionHerdClass;                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIBattleGroupSetting) == 0x000008, "Wrong alignment on FEndAIBattleGroupSetting");
static_assert(sizeof(FEndAIBattleGroupSetting) == 0x000018, "Wrong size on FEndAIBattleGroupSetting");
static_assert(offsetof(FEndAIBattleGroupSetting, GroupId) == 0x000000, "Member 'FEndAIBattleGroupSetting::GroupId' has a wrong offset!");
static_assert(offsetof(FEndAIBattleGroupSetting, LeaderType) == 0x000008, "Member 'FEndAIBattleGroupSetting::LeaderType' has a wrong offset!");
static_assert(offsetof(FEndAIBattleGroupSetting, bUseMoveDefinitionHerd) == 0x000009, "Member 'FEndAIBattleGroupSetting::bUseMoveDefinitionHerd' has a wrong offset!");
static_assert(offsetof(FEndAIBattleGroupSetting, MoveDefinitionHerdClass) == 0x000010, "Member 'FEndAIBattleGroupSetting::MoveDefinitionHerdClass' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaDeformAnimParams
// 0x0010 (0x0010 - 0x0000)
struct FEndCinemaDeformAnimParams final
{
public:
	class FName                                   MeshPlacedLevel;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshAccessorID;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCinemaDeformAnimParams) == 0x000004, "Wrong alignment on FEndCinemaDeformAnimParams");
static_assert(sizeof(FEndCinemaDeformAnimParams) == 0x000010, "Wrong size on FEndCinemaDeformAnimParams");
static_assert(offsetof(FEndCinemaDeformAnimParams, MeshPlacedLevel) == 0x000000, "Member 'FEndCinemaDeformAnimParams::MeshPlacedLevel' has a wrong offset!");
static_assert(offsetof(FEndCinemaDeformAnimParams, MeshAccessorID) == 0x000008, "Member 'FEndCinemaDeformAnimParams::MeshAccessorID' has a wrong offset!");

// ScriptStruct EndGame.EndNotifyOverrideCameraModule
// 0x0018 (0x0408 - 0x03F0)
struct FEndNotifyOverrideCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x18];                                     // 0x03F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndNotifyOverrideCameraModule) == 0x000008, "Wrong alignment on FEndNotifyOverrideCameraModule");
static_assert(sizeof(FEndNotifyOverrideCameraModule) == 0x000408, "Wrong size on FEndNotifyOverrideCameraModule");

// ScriptStruct EndGame.EndAIBattleGroupNotifyInfo
// 0x0020 (0x0020 - 0x0000)
struct FEndAIBattleGroupNotifyInfo final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupId;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromLeader;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          SendCharacter;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIBattleGroupNotifyInfo) == 0x000008, "Wrong alignment on FEndAIBattleGroupNotifyInfo");
static_assert(sizeof(FEndAIBattleGroupNotifyInfo) == 0x000020, "Wrong size on FEndAIBattleGroupNotifyInfo");
static_assert(offsetof(FEndAIBattleGroupNotifyInfo, Message) == 0x000000, "Member 'FEndAIBattleGroupNotifyInfo::Message' has a wrong offset!");
static_assert(offsetof(FEndAIBattleGroupNotifyInfo, GroupId) == 0x000008, "Member 'FEndAIBattleGroupNotifyInfo::GroupId' has a wrong offset!");
static_assert(offsetof(FEndAIBattleGroupNotifyInfo, bFromLeader) == 0x000010, "Member 'FEndAIBattleGroupNotifyInfo::bFromLeader' has a wrong offset!");
static_assert(offsetof(FEndAIBattleGroupNotifyInfo, SendCharacter) == 0x000018, "Member 'FEndAIBattleGroupNotifyInfo::SendCharacter' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBoneControl_Controller
// 0x000C (0x000C - 0x0000)
struct FRigUnit_EndBoneControl_Controller final
{
public:
	struct FRigElementKey                         ControlItem;                                       // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndBoneControl_Controller) == 0x000004, "Wrong alignment on FRigUnit_EndBoneControl_Controller");
static_assert(sizeof(FRigUnit_EndBoneControl_Controller) == 0x00000C, "Wrong size on FRigUnit_EndBoneControl_Controller");
static_assert(offsetof(FRigUnit_EndBoneControl_Controller, ControlItem) == 0x000000, "Member 'FRigUnit_EndBoneControl_Controller::ControlItem' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBoneControl_Settings
// 0x0070 (0x0070 - 0x0000)
struct FRigUnit_EndBoneControl_Settings final
{
public:
	struct FRigUnit_EndBoneControl_Controller     Hip;                                               // 0x0000(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndBoneControl_Controller> Spines;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndBoneControl_Controller     HandLeft;                                          // 0x0020(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndBoneControl_Controller     HandRight;                                         // 0x002C(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndBoneControl_Controller     FootLeft;                                          // 0x0038(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndBoneControl_Controller     FootRight;                                         // 0x0044(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndBoneControl_Controller     Neck;                                              // 0x0050(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndBoneControl_Controller     Head;                                              // 0x005C(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndBoneControl_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndBoneControl_Settings");
static_assert(sizeof(FRigUnit_EndBoneControl_Settings) == 0x000070, "Wrong size on FRigUnit_EndBoneControl_Settings");
static_assert(offsetof(FRigUnit_EndBoneControl_Settings, Hip) == 0x000000, "Member 'FRigUnit_EndBoneControl_Settings::Hip' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Settings, Spines) == 0x000010, "Member 'FRigUnit_EndBoneControl_Settings::Spines' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Settings, HandLeft) == 0x000020, "Member 'FRigUnit_EndBoneControl_Settings::HandLeft' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Settings, HandRight) == 0x00002C, "Member 'FRigUnit_EndBoneControl_Settings::HandRight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Settings, FootLeft) == 0x000038, "Member 'FRigUnit_EndBoneControl_Settings::FootLeft' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Settings, FootRight) == 0x000044, "Member 'FRigUnit_EndBoneControl_Settings::FootRight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Settings, Neck) == 0x000050, "Member 'FRigUnit_EndBoneControl_Settings::Neck' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Settings, Head) == 0x00005C, "Member 'FRigUnit_EndBoneControl_Settings::Head' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Settings, BlendInTime) == 0x000068, "Member 'FRigUnit_EndBoneControl_Settings::BlendInTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Settings, BlendOutTime) == 0x00006C, "Member 'FRigUnit_EndBoneControl_Settings::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndAIActionStatusChangeConditionData
// 0x0018 (0x0018 - 0x0000)
struct FEndAIActionStatusChangeConditionData final
{
public:
	EEndAILogicalOperator                         LogicalOperator;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNot;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StatusChangeIds;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIActionStatusChangeConditionData) == 0x000008, "Wrong alignment on FEndAIActionStatusChangeConditionData");
static_assert(sizeof(FEndAIActionStatusChangeConditionData) == 0x000018, "Wrong size on FEndAIActionStatusChangeConditionData");
static_assert(offsetof(FEndAIActionStatusChangeConditionData, LogicalOperator) == 0x000000, "Member 'FEndAIActionStatusChangeConditionData::LogicalOperator' has a wrong offset!");
static_assert(offsetof(FEndAIActionStatusChangeConditionData, bNot) == 0x000001, "Member 'FEndAIActionStatusChangeConditionData::bNot' has a wrong offset!");
static_assert(offsetof(FEndAIActionStatusChangeConditionData, StatusChangeIds) == 0x000008, "Member 'FEndAIActionStatusChangeConditionData::StatusChangeIds' has a wrong offset!");

// ScriptStruct EndGame.EndScanCameraModule
// 0x0810 (0x0C00 - 0x03F0)
struct FEndScanCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x810];                                    // 0x03F0(0x0810)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndScanCameraModule) == 0x000008, "Wrong alignment on FEndScanCameraModule");
static_assert(sizeof(FEndScanCameraModule) == 0x000C00, "Wrong size on FEndScanCameraModule");

// ScriptStruct EndGame.ChocoboRaceGimmickSplineWaitPoint
// 0x0008 (0x0008 - 0x0000)
struct FChocoboRaceGimmickSplineWaitPoint final
{
public:
	float                                         InputKey;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChocoboRaceGimmickSplineWaitPoint) == 0x000004, "Wrong alignment on FChocoboRaceGimmickSplineWaitPoint");
static_assert(sizeof(FChocoboRaceGimmickSplineWaitPoint) == 0x000008, "Wrong size on FChocoboRaceGimmickSplineWaitPoint");
static_assert(offsetof(FChocoboRaceGimmickSplineWaitPoint, InputKey) == 0x000000, "Member 'FChocoboRaceGimmickSplineWaitPoint::InputKey' has a wrong offset!");
static_assert(offsetof(FChocoboRaceGimmickSplineWaitPoint, WaitTime) == 0x000004, "Member 'FChocoboRaceGimmickSplineWaitPoint::WaitTime' has a wrong offset!");

// ScriptStruct EndGame.EndAIMoveDefinitionMoveApproach
// 0x0002 (0x0002 - 0x0000)
struct FEndAIMoveDefinitionMoveApproach final
{
public:
	EEndAiMoveType                                MoveType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStrafe;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIMoveDefinitionMoveApproach) == 0x000001, "Wrong alignment on FEndAIMoveDefinitionMoveApproach");
static_assert(sizeof(FEndAIMoveDefinitionMoveApproach) == 0x000002, "Wrong size on FEndAIMoveDefinitionMoveApproach");
static_assert(offsetof(FEndAIMoveDefinitionMoveApproach, MoveType) == 0x000000, "Member 'FEndAIMoveDefinitionMoveApproach::MoveType' has a wrong offset!");
static_assert(offsetof(FEndAIMoveDefinitionMoveApproach, bStrafe) == 0x000001, "Member 'FEndAIMoveDefinitionMoveApproach::bStrafe' has a wrong offset!");

// ScriptStruct EndGame.FindJumpArrivalStepHeightInfo
// 0x002C (0x002C - 0x0000)
struct FFindJumpArrivalStepHeightInfo final
{
public:
	float                                         UpHeightMax;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpDistanceMax;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpStartToPlayerDistanceMax;                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpStopMove;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpJumpButton;                                     // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpAutoClimbingCatch;                              // 0x000E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpAutoDodgeToJump;                                // 0x000F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndFieldNaviEdgeStopReactionType             UpStopReactionType;                                // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownHeightMin;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownDistanceMax;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddDownDistanceMax;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownStartToPlayerDistanceMax;                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownStopMove;                                     // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownJumpButton;                                   // 0x0025(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownAutoClimbingCatch;                            // 0x0026(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownAutoDodgeToJump;                              // 0x0027(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndFieldNaviEdgeStopReactionType             DownStopReactionType;                              // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFindJumpArrivalStepHeightInfo) == 0x000004, "Wrong alignment on FFindJumpArrivalStepHeightInfo");
static_assert(sizeof(FFindJumpArrivalStepHeightInfo) == 0x00002C, "Wrong size on FFindJumpArrivalStepHeightInfo");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, UpHeightMax) == 0x000000, "Member 'FFindJumpArrivalStepHeightInfo::UpHeightMax' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, UpDistanceMax) == 0x000004, "Member 'FFindJumpArrivalStepHeightInfo::UpDistanceMax' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, UpStartToPlayerDistanceMax) == 0x000008, "Member 'FFindJumpArrivalStepHeightInfo::UpStartToPlayerDistanceMax' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, bUpStopMove) == 0x00000C, "Member 'FFindJumpArrivalStepHeightInfo::bUpStopMove' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, bUpJumpButton) == 0x00000D, "Member 'FFindJumpArrivalStepHeightInfo::bUpJumpButton' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, bUpAutoClimbingCatch) == 0x00000E, "Member 'FFindJumpArrivalStepHeightInfo::bUpAutoClimbingCatch' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, bUpAutoDodgeToJump) == 0x00000F, "Member 'FFindJumpArrivalStepHeightInfo::bUpAutoDodgeToJump' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, UpStopReactionType) == 0x000010, "Member 'FFindJumpArrivalStepHeightInfo::UpStopReactionType' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, DownHeightMin) == 0x000014, "Member 'FFindJumpArrivalStepHeightInfo::DownHeightMin' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, DownDistanceMax) == 0x000018, "Member 'FFindJumpArrivalStepHeightInfo::DownDistanceMax' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, AddDownDistanceMax) == 0x00001C, "Member 'FFindJumpArrivalStepHeightInfo::AddDownDistanceMax' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, DownStartToPlayerDistanceMax) == 0x000020, "Member 'FFindJumpArrivalStepHeightInfo::DownStartToPlayerDistanceMax' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, bDownStopMove) == 0x000024, "Member 'FFindJumpArrivalStepHeightInfo::bDownStopMove' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, bDownJumpButton) == 0x000025, "Member 'FFindJumpArrivalStepHeightInfo::bDownJumpButton' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, bDownAutoClimbingCatch) == 0x000026, "Member 'FFindJumpArrivalStepHeightInfo::bDownAutoClimbingCatch' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, bDownAutoDodgeToJump) == 0x000027, "Member 'FFindJumpArrivalStepHeightInfo::bDownAutoDodgeToJump' has a wrong offset!");
static_assert(offsetof(FFindJumpArrivalStepHeightInfo, DownStopReactionType) == 0x000028, "Member 'FFindJumpArrivalStepHeightInfo::DownStopReactionType' has a wrong offset!");

// ScriptStruct EndGame.EndAIActionPackReturnInfo
// 0x0014 (0x0014 - 0x0000)
struct FEndAIActionPackReturnInfo final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SelectedTag;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionPackTag;                                     // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIActionPackReturnInfo) == 0x000004, "Wrong alignment on FEndAIActionPackReturnInfo");
static_assert(sizeof(FEndAIActionPackReturnInfo) == 0x000014, "Wrong size on FEndAIActionPackReturnInfo");
static_assert(offsetof(FEndAIActionPackReturnInfo, bSuccess) == 0x000000, "Member 'FEndAIActionPackReturnInfo::bSuccess' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackReturnInfo, SelectedTag) == 0x000004, "Member 'FEndAIActionPackReturnInfo::SelectedTag' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackReturnInfo, ActionPackTag) == 0x00000C, "Member 'FEndAIActionPackReturnInfo::ActionPackTag' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaEmissiveAnimParams
// 0x0050 (0x0050 - 0x0000)
struct FEndCinemaEmissiveAnimParams final
{
public:
	class FName                                   MeshPlacedLevel;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshAccessorID;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviewOnly;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StoryFlag;                                         // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StoryFlagCondition;                                // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EmissiveColorSettingsId;                           // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationModifierType                     Modifier;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        Curve;                                             // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallStopOnEnd;                                    // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCinemaEmissiveAnimParams) == 0x000008, "Wrong alignment on FEndCinemaEmissiveAnimParams");
static_assert(sizeof(FEndCinemaEmissiveAnimParams) == 0x000050, "Wrong size on FEndCinemaEmissiveAnimParams");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, MeshPlacedLevel) == 0x000000, "Member 'FEndCinemaEmissiveAnimParams::MeshPlacedLevel' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, MeshAccessorID) == 0x000008, "Member 'FEndCinemaEmissiveAnimParams::MeshAccessorID' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, ActorName) == 0x000010, "Member 'FEndCinemaEmissiveAnimParams::ActorName' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, bPreviewOnly) == 0x000018, "Member 'FEndCinemaEmissiveAnimParams::bPreviewOnly' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, StoryFlag) == 0x00001C, "Member 'FEndCinemaEmissiveAnimParams::StoryFlag' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, StoryFlagCondition) == 0x000024, "Member 'FEndCinemaEmissiveAnimParams::StoryFlagCondition' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, EmissiveColorSettingsId) == 0x000028, "Member 'FEndCinemaEmissiveAnimParams::EmissiveColorSettingsId' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, Modifier) == 0x000030, "Member 'FEndCinemaEmissiveAnimParams::Modifier' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, Curve) == 0x000031, "Member 'FEndCinemaEmissiveAnimParams::Curve' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, CurveAsset) == 0x000038, "Member 'FEndCinemaEmissiveAnimParams::CurveAsset' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, Duration) == 0x000040, "Member 'FEndCinemaEmissiveAnimParams::Duration' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, BlendInTime) == 0x000044, "Member 'FEndCinemaEmissiveAnimParams::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, BlendOutTime) == 0x000048, "Member 'FEndCinemaEmissiveAnimParams::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndCinemaEmissiveAnimParams, bCallStopOnEnd) == 0x00004C, "Member 'FEndCinemaEmissiveAnimParams::bCallStopOnEnd' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaEmissiveAnimSectionTemplate
// 0x0050 (0x0070 - 0x0020)
struct FEndCinemaEmissiveAnimSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FEndCinemaEmissiveAnimParams           Params;                                            // 0x0020(0x0050)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndCinemaEmissiveAnimSectionTemplate) == 0x000008, "Wrong alignment on FEndCinemaEmissiveAnimSectionTemplate");
static_assert(sizeof(FEndCinemaEmissiveAnimSectionTemplate) == 0x000070, "Wrong size on FEndCinemaEmissiveAnimSectionTemplate");
static_assert(offsetof(FEndCinemaEmissiveAnimSectionTemplate, Params) == 0x000020, "Member 'FEndCinemaEmissiveAnimSectionTemplate::Params' has a wrong offset!");

// ScriptStruct EndGame.EndAIBattleExtraInterval
// 0x0018 (0x0018 - 0x0000)
struct FEndAIBattleExtraInterval final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalWidth;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeginPlayStart;                                   // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBattleExtraInterval) == 0x000004, "Wrong alignment on FEndAIBattleExtraInterval");
static_assert(sizeof(FEndAIBattleExtraInterval) == 0x000018, "Wrong size on FEndAIBattleExtraInterval");
static_assert(offsetof(FEndAIBattleExtraInterval, ID) == 0x000000, "Member 'FEndAIBattleExtraInterval::ID' has a wrong offset!");
static_assert(offsetof(FEndAIBattleExtraInterval, Interval) == 0x000008, "Member 'FEndAIBattleExtraInterval::Interval' has a wrong offset!");
static_assert(offsetof(FEndAIBattleExtraInterval, IntervalWidth) == 0x00000C, "Member 'FEndAIBattleExtraInterval::IntervalWidth' has a wrong offset!");
static_assert(offsetof(FEndAIBattleExtraInterval, Priority) == 0x000010, "Member 'FEndAIBattleExtraInterval::Priority' has a wrong offset!");
static_assert(offsetof(FEndAIBattleExtraInterval, bBeginPlayStart) == 0x000014, "Member 'FEndAIBattleExtraInterval::bBeginPlayStart' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioExpression_DebugSettings
// 0x0008 (0x0008 - 0x0000)
struct FRigUnit_EndLipSyncAudioExpression_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudioPower;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioExpression_DebugSettings) == 0x000004, "Wrong alignment on FRigUnit_EndLipSyncAudioExpression_DebugSettings");
static_assert(sizeof(FRigUnit_EndLipSyncAudioExpression_DebugSettings) == 0x000008, "Wrong size on FRigUnit_EndLipSyncAudioExpression_DebugSettings");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioExpression_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_DebugSettings, AudioPower) == 0x000004, "Member 'FRigUnit_EndLipSyncAudioExpression_DebugSettings::AudioPower' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioExpressionBoneAnimationCache
// 0x00D0 (0x00D0 - 0x0000)
struct FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache final
{
public:
	struct FCachedRigElement                      CachedItem;                                        // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedTranslation0;                                // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedTranslation1;                                // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CachedRotation0;                                   // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  CachedRotation1;                                   // 0x0040(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x80];                                      // 0x0050(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache) == 0x000010, "Wrong alignment on FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache");
static_assert(sizeof(FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache) == 0x0000D0, "Wrong size on FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache, CachedItem) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache, CachedTranslation0) == 0x000014, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache::CachedTranslation0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache, CachedTranslation1) == 0x000020, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache::CachedTranslation1' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache, CachedRotation0) == 0x000030, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache::CachedRotation0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache, CachedRotation1) == 0x000040, "Member 'FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache::CachedRotation1' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioExpression_Cache
// 0x0038 (0x0038 - 0x0000)
struct FRigUnit_EndLipSyncAudioExpression_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaying;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentEvaluateFrame;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastEvaluateFrame;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0xC];                                        // 0x000C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentAudioPower;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastAudioPower;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedDeltaTime0;                                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedDeltaTime1;                                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndLipSyncAudioExpressionBoneAnimationCache> BoneAnimationCaches;                               // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioExpression_Cache) == 0x000008, "Wrong alignment on FRigUnit_EndLipSyncAudioExpression_Cache");
static_assert(sizeof(FRigUnit_EndLipSyncAudioExpression_Cache) == 0x000038, "Wrong size on FRigUnit_EndLipSyncAudioExpression_Cache");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioExpression_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Cache, bPlaying) == 0x000001, "Member 'FRigUnit_EndLipSyncAudioExpression_Cache::bPlaying' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Cache, CurrentEvaluateFrame) == 0x000004, "Member 'FRigUnit_EndLipSyncAudioExpression_Cache::CurrentEvaluateFrame' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Cache, LastEvaluateFrame) == 0x000008, "Member 'FRigUnit_EndLipSyncAudioExpression_Cache::LastEvaluateFrame' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Cache, CurrentAudioPower) == 0x000018, "Member 'FRigUnit_EndLipSyncAudioExpression_Cache::CurrentAudioPower' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Cache, LastAudioPower) == 0x00001C, "Member 'FRigUnit_EndLipSyncAudioExpression_Cache::LastAudioPower' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Cache, CachedDeltaTime0) == 0x000020, "Member 'FRigUnit_EndLipSyncAudioExpression_Cache::CachedDeltaTime0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Cache, CachedDeltaTime1) == 0x000024, "Member 'FRigUnit_EndLipSyncAudioExpression_Cache::CachedDeltaTime1' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression_Cache, BoneAnimationCaches) == 0x000028, "Member 'FRigUnit_EndLipSyncAudioExpression_Cache::BoneAnimationCaches' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioExpression
// 0x0070 (0x00D8 - 0x0068)
struct FRigUnit_EndLipSyncAudioExpression final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndLipSyncAudioExpression_Settings Settings;                                          // 0x0068(0x0030)(NativeAccessSpecifierPublic)
	struct FRigUnit_EndLipSyncAudioExpression_DebugSettings DebugSettings;                                     // 0x0098(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndLipSyncAudioExpression_Cache Cache;                                             // 0x00A0(0x0038)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioExpression) == 0x000008, "Wrong alignment on FRigUnit_EndLipSyncAudioExpression");
static_assert(sizeof(FRigUnit_EndLipSyncAudioExpression) == 0x0000D8, "Wrong size on FRigUnit_EndLipSyncAudioExpression");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression, Settings) == 0x000068, "Member 'FRigUnit_EndLipSyncAudioExpression::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression, DebugSettings) == 0x000098, "Member 'FRigUnit_EndLipSyncAudioExpression::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioExpression, Cache) == 0x0000A0, "Member 'FRigUnit_EndLipSyncAudioExpression::Cache' has a wrong offset!");

// ScriptStruct EndGame.EndAIDefinitionReturnTag
// 0x0020 (0x0020 - 0x0000)
struct FEndAIDefinitionReturnTag final
{
public:
	class FName                                   MoveDefinitionTag;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionDefinitionTag;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComboDefinitionTag;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComboConnectDefinitionTag;                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIDefinitionReturnTag) == 0x000004, "Wrong alignment on FEndAIDefinitionReturnTag");
static_assert(sizeof(FEndAIDefinitionReturnTag) == 0x000020, "Wrong size on FEndAIDefinitionReturnTag");
static_assert(offsetof(FEndAIDefinitionReturnTag, MoveDefinitionTag) == 0x000000, "Member 'FEndAIDefinitionReturnTag::MoveDefinitionTag' has a wrong offset!");
static_assert(offsetof(FEndAIDefinitionReturnTag, ActionDefinitionTag) == 0x000008, "Member 'FEndAIDefinitionReturnTag::ActionDefinitionTag' has a wrong offset!");
static_assert(offsetof(FEndAIDefinitionReturnTag, ComboDefinitionTag) == 0x000010, "Member 'FEndAIDefinitionReturnTag::ComboDefinitionTag' has a wrong offset!");
static_assert(offsetof(FEndAIDefinitionReturnTag, ComboConnectDefinitionTag) == 0x000018, "Member 'FEndAIDefinitionReturnTag::ComboConnectDefinitionTag' has a wrong offset!");

// ScriptStruct EndGame.EndCameraOverrideParam
// 0x0038 (0x0038 - 0x0000)
struct FEndCameraOverrideParam final
{
public:
	bool                                          bOverrideFOV;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideFOV;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddDistance;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AddDistance;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddAimHeight;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AddAimHeight;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRotation;                                 // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OverrideRotation;                                  // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideFollowSpeed;                              // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideFollowSpeed;                               // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAimOffsetY;                               // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideAimOffsetY;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCameraOverrideParam) == 0x000004, "Wrong alignment on FEndCameraOverrideParam");
static_assert(sizeof(FEndCameraOverrideParam) == 0x000038, "Wrong size on FEndCameraOverrideParam");
static_assert(offsetof(FEndCameraOverrideParam, bOverrideFOV) == 0x000000, "Member 'FEndCameraOverrideParam::bOverrideFOV' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, OverrideFOV) == 0x000004, "Member 'FEndCameraOverrideParam::OverrideFOV' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, bAddDistance) == 0x000008, "Member 'FEndCameraOverrideParam::bAddDistance' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, AddDistance) == 0x00000C, "Member 'FEndCameraOverrideParam::AddDistance' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, bAddAimHeight) == 0x000010, "Member 'FEndCameraOverrideParam::bAddAimHeight' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, AddAimHeight) == 0x000014, "Member 'FEndCameraOverrideParam::AddAimHeight' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, bOverrideRotation) == 0x000018, "Member 'FEndCameraOverrideParam::bOverrideRotation' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, OverrideRotation) == 0x00001C, "Member 'FEndCameraOverrideParam::OverrideRotation' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, bOverrideFollowSpeed) == 0x000028, "Member 'FEndCameraOverrideParam::bOverrideFollowSpeed' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, OverrideFollowSpeed) == 0x00002C, "Member 'FEndCameraOverrideParam::OverrideFollowSpeed' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, bOverrideAimOffsetY) == 0x000030, "Member 'FEndCameraOverrideParam::bOverrideAimOffsetY' has a wrong offset!");
static_assert(offsetof(FEndCameraOverrideParam, OverrideAimOffsetY) == 0x000034, "Member 'FEndCameraOverrideParam::OverrideAimOffsetY' has a wrong offset!");

// ScriptStruct EndGame.EndAIActionDefinitionSet
// 0x0010 (0x0010 - 0x0000)
struct FEndAIActionDefinitionSet final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIActionDefinitionSet) == 0x000008, "Wrong alignment on FEndAIActionDefinitionSet");
static_assert(sizeof(FEndAIActionDefinitionSet) == 0x000010, "Wrong size on FEndAIActionDefinitionSet");
static_assert(offsetof(FEndAIActionDefinitionSet, MoveDefinitionClass) == 0x000000, "Member 'FEndAIActionDefinitionSet::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(FEndAIActionDefinitionSet, ActionDefinitionClass) == 0x000008, "Member 'FEndAIActionDefinitionSet::ActionDefinitionClass' has a wrong offset!");

// ScriptStruct EndGame.EndNormalizedCoordinateAnimationMaterial
// 0x0100 (0x0100 - 0x0000)
struct FEndNormalizedCoordinateAnimationMaterial final
{
public:
	TArray<class FName>                           MaterialNames;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           MeshNames;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEndNormalizedCoordinateAnimationParameter Default;                                           // 0x0020(0x0088)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FEndNormalizedCoordinateAnimationParameter> Override;                                          // 0x00A8(0x0050)(Edit, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        DefaultCurve;                                      // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultDuration;                                   // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNormalizedCoordinateAnimationMaterial) == 0x000008, "Wrong alignment on FEndNormalizedCoordinateAnimationMaterial");
static_assert(sizeof(FEndNormalizedCoordinateAnimationMaterial) == 0x000100, "Wrong size on FEndNormalizedCoordinateAnimationMaterial");
static_assert(offsetof(FEndNormalizedCoordinateAnimationMaterial, MaterialNames) == 0x000000, "Member 'FEndNormalizedCoordinateAnimationMaterial::MaterialNames' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationMaterial, MeshNames) == 0x000010, "Member 'FEndNormalizedCoordinateAnimationMaterial::MeshNames' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationMaterial, Default) == 0x000020, "Member 'FEndNormalizedCoordinateAnimationMaterial::Default' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationMaterial, Override) == 0x0000A8, "Member 'FEndNormalizedCoordinateAnimationMaterial::Override' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationMaterial, DefaultCurve) == 0x0000F8, "Member 'FEndNormalizedCoordinateAnimationMaterial::DefaultCurve' has a wrong offset!");
static_assert(offsetof(FEndNormalizedCoordinateAnimationMaterial, DefaultDuration) == 0x0000FC, "Member 'FEndNormalizedCoordinateAnimationMaterial::DefaultDuration' has a wrong offset!");

// ScriptStruct EndGame.EndAIActionPackInfo
// 0x0020 (0x0020 - 0x0000)
struct FEndAIActionPackInfo final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LotProbability;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFastSelect;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIActionPackInfo) == 0x000008, "Wrong alignment on FEndAIActionPackInfo");
static_assert(sizeof(FEndAIActionPackInfo) == 0x000020, "Wrong size on FEndAIActionPackInfo");
static_assert(offsetof(FEndAIActionPackInfo, MoveDefinitionClass) == 0x000000, "Member 'FEndAIActionPackInfo::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackInfo, ActionDefinitionClass) == 0x000008, "Member 'FEndAIActionPackInfo::ActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackInfo, LotProbability) == 0x000010, "Member 'FEndAIActionPackInfo::LotProbability' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackInfo, bFastSelect) == 0x000014, "Member 'FEndAIActionPackInfo::bFastSelect' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackInfo, Tag) == 0x000018, "Member 'FEndAIActionPackInfo::Tag' has a wrong offset!");

// ScriptStruct EndGame.EndCactusMissionConstantEnemyTerritoryData
// 0x0020 (0x0020 - 0x0000)
struct FEndCactusMissionConstantEnemyTerritoryData final
{
public:
	class AEndFieldEnemyTerritoryActor*           EnemyTerritory;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndCactusMissionConditionData         ConditionData;                                     // 0x0008(0x0014)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsOnce;                                            // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCactusMissionConstantEnemyTerritoryData) == 0x000008, "Wrong alignment on FEndCactusMissionConstantEnemyTerritoryData");
static_assert(sizeof(FEndCactusMissionConstantEnemyTerritoryData) == 0x000020, "Wrong size on FEndCactusMissionConstantEnemyTerritoryData");
static_assert(offsetof(FEndCactusMissionConstantEnemyTerritoryData, EnemyTerritory) == 0x000000, "Member 'FEndCactusMissionConstantEnemyTerritoryData::EnemyTerritory' has a wrong offset!");
static_assert(offsetof(FEndCactusMissionConstantEnemyTerritoryData, ConditionData) == 0x000008, "Member 'FEndCactusMissionConstantEnemyTerritoryData::ConditionData' has a wrong offset!");
static_assert(offsetof(FEndCactusMissionConstantEnemyTerritoryData, IsOnce) == 0x00001C, "Member 'FEndCactusMissionConstantEnemyTerritoryData::IsOnce' has a wrong offset!");

// ScriptStruct EndGame.RenoMineMovementData
// 0x0088 (0x0088 - 0x0000)
struct FRenoMineMovementData final
{
public:
	ERenoMineMovementMode                         MovementMode;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MineMaxSpeed;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MineSnapSpeed;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MineSnapEndQuantity;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RenoDistance;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UcpcDistance;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepulsiveDistance;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepulsiveAccQuantity;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreRepulsiveActgions;                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MineMoveInterval;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepulsiveOriginInterval;                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreStopFollowAction;                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreStopReturnAction;                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCanFollow;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanRollingAtack;                                  // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RollingAtackStartDistance;                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollingAtackPhase1Time;                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollingAtackPhase1Height;                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollingAtackSpeed;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollingAtackRadius;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollingAtackFinish;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnLocation;                                    // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnSpeed;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnSpeed;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRenoMineMovementData) == 0x000008, "Wrong alignment on FRenoMineMovementData");
static_assert(sizeof(FRenoMineMovementData) == 0x000088, "Wrong size on FRenoMineMovementData");
static_assert(offsetof(FRenoMineMovementData, MovementMode) == 0x000000, "Member 'FRenoMineMovementData::MovementMode' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, MineMaxSpeed) == 0x000004, "Member 'FRenoMineMovementData::MineMaxSpeed' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, MineSnapSpeed) == 0x000008, "Member 'FRenoMineMovementData::MineSnapSpeed' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, MineSnapEndQuantity) == 0x00000C, "Member 'FRenoMineMovementData::MineSnapEndQuantity' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, RenoDistance) == 0x000010, "Member 'FRenoMineMovementData::RenoDistance' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, UcpcDistance) == 0x000014, "Member 'FRenoMineMovementData::UcpcDistance' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, RepulsiveDistance) == 0x000018, "Member 'FRenoMineMovementData::RepulsiveDistance' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, RepulsiveAccQuantity) == 0x00001C, "Member 'FRenoMineMovementData::RepulsiveAccQuantity' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, IgnoreRepulsiveActgions) == 0x000020, "Member 'FRenoMineMovementData::IgnoreRepulsiveActgions' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, MineMoveInterval) == 0x000030, "Member 'FRenoMineMovementData::MineMoveInterval' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, RepulsiveOriginInterval) == 0x000034, "Member 'FRenoMineMovementData::RepulsiveOriginInterval' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, IgnoreStopFollowAction) == 0x000038, "Member 'FRenoMineMovementData::IgnoreStopFollowAction' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, IgnoreStopReturnAction) == 0x000048, "Member 'FRenoMineMovementData::IgnoreStopReturnAction' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, bCanFollow) == 0x000058, "Member 'FRenoMineMovementData::bCanFollow' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, bCanRollingAtack) == 0x000059, "Member 'FRenoMineMovementData::bCanRollingAtack' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, RollingAtackStartDistance) == 0x00005C, "Member 'FRenoMineMovementData::RollingAtackStartDistance' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, RollingAtackPhase1Time) == 0x000060, "Member 'FRenoMineMovementData::RollingAtackPhase1Time' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, RollingAtackPhase1Height) == 0x000064, "Member 'FRenoMineMovementData::RollingAtackPhase1Height' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, RollingAtackSpeed) == 0x000068, "Member 'FRenoMineMovementData::RollingAtackSpeed' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, RollingAtackRadius) == 0x00006C, "Member 'FRenoMineMovementData::RollingAtackRadius' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, RollingAtackFinish) == 0x000070, "Member 'FRenoMineMovementData::RollingAtackFinish' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, ReturnLocation) == 0x000074, "Member 'FRenoMineMovementData::ReturnLocation' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, ReturnSpeed) == 0x000080, "Member 'FRenoMineMovementData::ReturnSpeed' has a wrong offset!");
static_assert(offsetof(FRenoMineMovementData, TurnSpeed) == 0x000084, "Member 'FRenoMineMovementData::TurnSpeed' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFootControl_Foot
// 0x0070 (0x0070 - 0x0000)
struct FRigUnit_EndFootControl_Foot final
{
public:
	struct FRigElementKey                         FootRootBoneItem;                                  // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         FootBoneItem;                                      // 0x000C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         ToeBoneItem;                                       // 0x0018(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         FootItem;                                          // 0x0024(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         ToeItem;                                           // 0x0030(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         TargetItem;                                        // 0x003C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ToeOffsetRotation;                                 // 0x0048(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         GroundNormalFitAngleMax;                           // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundNormalExtractRateX;                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundNormalExtractRateY;                          // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundNormalFitRatePitch;                          // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundNormalFitRateRoll;                           // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideFootBaseHeight;                           // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootBaseHeight;                                    // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFootControl_Foot) == 0x000004, "Wrong alignment on FRigUnit_EndFootControl_Foot");
static_assert(sizeof(FRigUnit_EndFootControl_Foot) == 0x000070, "Wrong size on FRigUnit_EndFootControl_Foot");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, FootRootBoneItem) == 0x000000, "Member 'FRigUnit_EndFootControl_Foot::FootRootBoneItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, FootBoneItem) == 0x00000C, "Member 'FRigUnit_EndFootControl_Foot::FootBoneItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, ToeBoneItem) == 0x000018, "Member 'FRigUnit_EndFootControl_Foot::ToeBoneItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, FootItem) == 0x000024, "Member 'FRigUnit_EndFootControl_Foot::FootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, ToeItem) == 0x000030, "Member 'FRigUnit_EndFootControl_Foot::ToeItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, TargetItem) == 0x00003C, "Member 'FRigUnit_EndFootControl_Foot::TargetItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, ToeOffsetRotation) == 0x000048, "Member 'FRigUnit_EndFootControl_Foot::ToeOffsetRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, GroundNormalFitAngleMax) == 0x000054, "Member 'FRigUnit_EndFootControl_Foot::GroundNormalFitAngleMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, GroundNormalExtractRateX) == 0x000058, "Member 'FRigUnit_EndFootControl_Foot::GroundNormalExtractRateX' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, GroundNormalExtractRateY) == 0x00005C, "Member 'FRigUnit_EndFootControl_Foot::GroundNormalExtractRateY' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, GroundNormalFitRatePitch) == 0x000060, "Member 'FRigUnit_EndFootControl_Foot::GroundNormalFitRatePitch' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, GroundNormalFitRateRoll) == 0x000064, "Member 'FRigUnit_EndFootControl_Foot::GroundNormalFitRateRoll' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, bOverrideFootBaseHeight) == 0x000068, "Member 'FRigUnit_EndFootControl_Foot::bOverrideFootBaseHeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Foot, FootBaseHeight) == 0x00006C, "Member 'FRigUnit_EndFootControl_Foot::FootBaseHeight' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFootControl_Balance
// 0x0014 (0x0014 - 0x0000)
struct FRigUnit_EndFootControl_Balance final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPitch;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsPitch;                                         // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoll;                                             // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStairsRotation;                                // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFootControl_Balance) == 0x000004, "Wrong alignment on FRigUnit_EndFootControl_Balance");
static_assert(sizeof(FRigUnit_EndFootControl_Balance) == 0x000014, "Wrong size on FRigUnit_EndFootControl_Balance");
static_assert(offsetof(FRigUnit_EndFootControl_Balance, Item) == 0x000000, "Member 'FRigUnit_EndFootControl_Balance::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Balance, Weight) == 0x00000C, "Member 'FRigUnit_EndFootControl_Balance::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Balance, bPitch) == 0x000010, "Member 'FRigUnit_EndFootControl_Balance::bPitch' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Balance, bAbsPitch) == 0x000011, "Member 'FRigUnit_EndFootControl_Balance::bAbsPitch' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Balance, bRoll) == 0x000012, "Member 'FRigUnit_EndFootControl_Balance::bRoll' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Balance, bUseStairsRotation) == 0x000013, "Member 'FRigUnit_EndFootControl_Balance::bUseStairsRotation' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFootControl_Interp
// 0x0018 (0x0018 - 0x0000)
struct FRigUnit_EndFootControl_Interp final
{
public:
	float                                         HipOffsetTranslationInterpSpeed;                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootOffsetTranslationUpInterpSpeed;                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootOffsetTranslationDownInterpSpeed;              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootOffsetRotationInterpSpeed;                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundHeightInterpSpeed;                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundNormalFitAngleInterpSpeed;                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFootControl_Interp) == 0x000004, "Wrong alignment on FRigUnit_EndFootControl_Interp");
static_assert(sizeof(FRigUnit_EndFootControl_Interp) == 0x000018, "Wrong size on FRigUnit_EndFootControl_Interp");
static_assert(offsetof(FRigUnit_EndFootControl_Interp, HipOffsetTranslationInterpSpeed) == 0x000000, "Member 'FRigUnit_EndFootControl_Interp::HipOffsetTranslationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Interp, FootOffsetTranslationUpInterpSpeed) == 0x000004, "Member 'FRigUnit_EndFootControl_Interp::FootOffsetTranslationUpInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Interp, FootOffsetTranslationDownInterpSpeed) == 0x000008, "Member 'FRigUnit_EndFootControl_Interp::FootOffsetTranslationDownInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Interp, FootOffsetRotationInterpSpeed) == 0x00000C, "Member 'FRigUnit_EndFootControl_Interp::FootOffsetRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Interp, GroundHeightInterpSpeed) == 0x000010, "Member 'FRigUnit_EndFootControl_Interp::GroundHeightInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Interp, GroundNormalFitAngleInterpSpeed) == 0x000014, "Member 'FRigUnit_EndFootControl_Interp::GroundNormalFitAngleInterpSpeed' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFootControl_Settings
// 0x00D8 (0x00D8 - 0x0000)
struct FRigUnit_EndFootControl_Settings final
{
public:
	struct FRigElementKey                         RootItem;                                          // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         HipItem;                                           // 0x000C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndFootControl_Foot>   Foots;                                             // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndFootControl_Balance> Balances;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LandingHeightThreshold;                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootTraceStartHeight;                              // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootTraceEndHeight;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FootTraceHalfExtent;                               // 0x0044(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootTraceToeRate;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipOffsetApplyRateIdle;                            // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipOffsetApplyRateWalk;                            // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipOffsetApplyRateRun;                             // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInterpSettingsWalk;                            // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInterpSettingsRun;                             // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndFootControl_Interp         InterpSettingsIdle;                                // 0x0064(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndFootControl_Interp         InterpSettingsWalk;                                // 0x007C(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndFootControl_Interp         InterpSettingsRun;                                 // 0x0094(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OverrideGroundTraceOffsetX;                        // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGroundTraceOffsetY;                        // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundNormalFitAngleMax;                           // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLengthBias;                                    // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyStairs;                                      // 0x00BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFootLock;                                      // 0x00BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultFootLockActivation;                        // 0x00BE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BF[0x1];                                       // 0x00BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootLockTranslationRate;                           // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLockRotationRate;                              // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLockRateActiveInterpSpeed;                     // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLockRateDeactiveInterpSpeed;                   // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLockDeactivateWithExtraActionWaitTime;         // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMigrate;                                          // 0x00D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndFootControl_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndFootControl_Settings");
static_assert(sizeof(FRigUnit_EndFootControl_Settings) == 0x0000D8, "Wrong size on FRigUnit_EndFootControl_Settings");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, RootItem) == 0x000000, "Member 'FRigUnit_EndFootControl_Settings::RootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, HipItem) == 0x00000C, "Member 'FRigUnit_EndFootControl_Settings::HipItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, Foots) == 0x000018, "Member 'FRigUnit_EndFootControl_Settings::Foots' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, Balances) == 0x000028, "Member 'FRigUnit_EndFootControl_Settings::Balances' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, LandingHeightThreshold) == 0x000038, "Member 'FRigUnit_EndFootControl_Settings::LandingHeightThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, FootTraceStartHeight) == 0x00003C, "Member 'FRigUnit_EndFootControl_Settings::FootTraceStartHeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, FootTraceEndHeight) == 0x000040, "Member 'FRigUnit_EndFootControl_Settings::FootTraceEndHeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, FootTraceHalfExtent) == 0x000044, "Member 'FRigUnit_EndFootControl_Settings::FootTraceHalfExtent' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, FootTraceToeRate) == 0x000050, "Member 'FRigUnit_EndFootControl_Settings::FootTraceToeRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, HipOffsetApplyRateIdle) == 0x000054, "Member 'FRigUnit_EndFootControl_Settings::HipOffsetApplyRateIdle' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, HipOffsetApplyRateWalk) == 0x000058, "Member 'FRigUnit_EndFootControl_Settings::HipOffsetApplyRateWalk' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, HipOffsetApplyRateRun) == 0x00005C, "Member 'FRigUnit_EndFootControl_Settings::HipOffsetApplyRateRun' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, bUseInterpSettingsWalk) == 0x000060, "Member 'FRigUnit_EndFootControl_Settings::bUseInterpSettingsWalk' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, bUseInterpSettingsRun) == 0x000061, "Member 'FRigUnit_EndFootControl_Settings::bUseInterpSettingsRun' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, InterpSettingsIdle) == 0x000064, "Member 'FRigUnit_EndFootControl_Settings::InterpSettingsIdle' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, InterpSettingsWalk) == 0x00007C, "Member 'FRigUnit_EndFootControl_Settings::InterpSettingsWalk' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, InterpSettingsRun) == 0x000094, "Member 'FRigUnit_EndFootControl_Settings::InterpSettingsRun' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, OverrideGroundTraceOffsetX) == 0x0000AC, "Member 'FRigUnit_EndFootControl_Settings::OverrideGroundTraceOffsetX' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, OverrideGroundTraceOffsetY) == 0x0000B0, "Member 'FRigUnit_EndFootControl_Settings::OverrideGroundTraceOffsetY' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, GroundNormalFitAngleMax) == 0x0000B4, "Member 'FRigUnit_EndFootControl_Settings::GroundNormalFitAngleMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, FootLengthBias) == 0x0000B8, "Member 'FRigUnit_EndFootControl_Settings::FootLengthBias' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, bApplyStairs) == 0x0000BC, "Member 'FRigUnit_EndFootControl_Settings::bApplyStairs' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, bUseFootLock) == 0x0000BD, "Member 'FRigUnit_EndFootControl_Settings::bUseFootLock' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, bDefaultFootLockActivation) == 0x0000BE, "Member 'FRigUnit_EndFootControl_Settings::bDefaultFootLockActivation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, FootLockTranslationRate) == 0x0000C0, "Member 'FRigUnit_EndFootControl_Settings::FootLockTranslationRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, FootLockRotationRate) == 0x0000C4, "Member 'FRigUnit_EndFootControl_Settings::FootLockRotationRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, FootLockRateActiveInterpSpeed) == 0x0000C8, "Member 'FRigUnit_EndFootControl_Settings::FootLockRateActiveInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, FootLockRateDeactiveInterpSpeed) == 0x0000CC, "Member 'FRigUnit_EndFootControl_Settings::FootLockRateDeactiveInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, FootLockDeactivateWithExtraActionWaitTime) == 0x0000D0, "Member 'FRigUnit_EndFootControl_Settings::FootLockDeactivateWithExtraActionWaitTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Settings, bMigrate) == 0x0000D4, "Member 'FRigUnit_EndFootControl_Settings::bMigrate' has a wrong offset!");

// ScriptStruct EndGame.EndBattleReplaceCombinationCounterExecuteAbilityIDParam
// 0x0024 (0x0024 - 0x0000)
struct FEndBattleReplaceCombinationCounterExecuteAbilityIDParam final
{
public:
	class FName                                   MainBaseAbilityID;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MainReplaceAbilityID;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateToCounterDamageSource;                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SubBaseAbilityID;                                  // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubReplaceAbilityID;                               // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleReplaceCombinationCounterExecuteAbilityIDParam) == 0x000004, "Wrong alignment on FEndBattleReplaceCombinationCounterExecuteAbilityIDParam");
static_assert(sizeof(FEndBattleReplaceCombinationCounterExecuteAbilityIDParam) == 0x000024, "Wrong size on FEndBattleReplaceCombinationCounterExecuteAbilityIDParam");
static_assert(offsetof(FEndBattleReplaceCombinationCounterExecuteAbilityIDParam, MainBaseAbilityID) == 0x000000, "Member 'FEndBattleReplaceCombinationCounterExecuteAbilityIDParam::MainBaseAbilityID' has a wrong offset!");
static_assert(offsetof(FEndBattleReplaceCombinationCounterExecuteAbilityIDParam, MainReplaceAbilityID) == 0x000008, "Member 'FEndBattleReplaceCombinationCounterExecuteAbilityIDParam::MainReplaceAbilityID' has a wrong offset!");
static_assert(offsetof(FEndBattleReplaceCombinationCounterExecuteAbilityIDParam, bRotateToCounterDamageSource) == 0x000010, "Member 'FEndBattleReplaceCombinationCounterExecuteAbilityIDParam::bRotateToCounterDamageSource' has a wrong offset!");
static_assert(offsetof(FEndBattleReplaceCombinationCounterExecuteAbilityIDParam, SubBaseAbilityID) == 0x000014, "Member 'FEndBattleReplaceCombinationCounterExecuteAbilityIDParam::SubBaseAbilityID' has a wrong offset!");
static_assert(offsetof(FEndBattleReplaceCombinationCounterExecuteAbilityIDParam, SubReplaceAbilityID) == 0x00001C, "Member 'FEndBattleReplaceCombinationCounterExecuteAbilityIDParam::SubReplaceAbilityID' has a wrong offset!");

// ScriptStruct EndGame.EndBattleTargetJumpBurstInput
// 0x002C (0x002C - 0x0000)
struct FEndBattleTargetJumpBurstInput final
{
public:
	float                                         GravityScale;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RootLocation;                                      // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetRotation;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RootRotation;                                      // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         JumpAngle;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpHeightMax;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpTimeMin;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleTargetJumpBurstInput) == 0x000004, "Wrong alignment on FEndBattleTargetJumpBurstInput");
static_assert(sizeof(FEndBattleTargetJumpBurstInput) == 0x00002C, "Wrong size on FEndBattleTargetJumpBurstInput");
static_assert(offsetof(FEndBattleTargetJumpBurstInput, GravityScale) == 0x000000, "Member 'FEndBattleTargetJumpBurstInput::GravityScale' has a wrong offset!");
static_assert(offsetof(FEndBattleTargetJumpBurstInput, RootLocation) == 0x000004, "Member 'FEndBattleTargetJumpBurstInput::RootLocation' has a wrong offset!");
static_assert(offsetof(FEndBattleTargetJumpBurstInput, bSetRotation) == 0x000010, "Member 'FEndBattleTargetJumpBurstInput::bSetRotation' has a wrong offset!");
static_assert(offsetof(FEndBattleTargetJumpBurstInput, RootRotation) == 0x000014, "Member 'FEndBattleTargetJumpBurstInput::RootRotation' has a wrong offset!");
static_assert(offsetof(FEndBattleTargetJumpBurstInput, JumpAngle) == 0x000020, "Member 'FEndBattleTargetJumpBurstInput::JumpAngle' has a wrong offset!");
static_assert(offsetof(FEndBattleTargetJumpBurstInput, JumpHeightMax) == 0x000024, "Member 'FEndBattleTargetJumpBurstInput::JumpHeightMax' has a wrong offset!");
static_assert(offsetof(FEndBattleTargetJumpBurstInput, JumpTimeMin) == 0x000028, "Member 'FEndBattleTargetJumpBurstInput::JumpTimeMin' has a wrong offset!");

// ScriptStruct EndGame.EndBattleMateriaParam
// 0x0014 (0x0014 - 0x0000)
struct FEndBattleMateriaParam final
{
public:
	int32                                         LV;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Linked;                                            // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LinkedSlot;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleMateriaParam) == 0x000004, "Wrong alignment on FEndBattleMateriaParam");
static_assert(sizeof(FEndBattleMateriaParam) == 0x000014, "Wrong size on FEndBattleMateriaParam");
static_assert(offsetof(FEndBattleMateriaParam, LV) == 0x000000, "Member 'FEndBattleMateriaParam::LV' has a wrong offset!");
static_assert(offsetof(FEndBattleMateriaParam, Name) == 0x000004, "Member 'FEndBattleMateriaParam::Name' has a wrong offset!");
static_assert(offsetof(FEndBattleMateriaParam, Linked) == 0x00000C, "Member 'FEndBattleMateriaParam::Linked' has a wrong offset!");
static_assert(offsetof(FEndBattleMateriaParam, LinkedSlot) == 0x000010, "Member 'FEndBattleMateriaParam::LinkedSlot' has a wrong offset!");

// ScriptStruct EndGame.EndCaitSithVentMoveCameraModule
// 0x0090 (0x0480 - 0x03F0)
struct FEndCaitSithVentMoveCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x90];                                     // 0x03F0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCaitSithVentMoveCameraModule) == 0x000008, "Wrong alignment on FEndCaitSithVentMoveCameraModule");
static_assert(sizeof(FEndCaitSithVentMoveCameraModule) == 0x000480, "Wrong size on FEndCaitSithVentMoveCameraModule");

// ScriptStruct EndGame.EndPopupMessageColors
// 0x0040 (0x0040 - 0x0000)
struct FEndPopupMessageColors final
{
public:
	struct FLinearColor                           TopColor;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BottomColor;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPopupMessageColors) == 0x000004, "Wrong alignment on FEndPopupMessageColors");
static_assert(sizeof(FEndPopupMessageColors) == 0x000040, "Wrong size on FEndPopupMessageColors");
static_assert(offsetof(FEndPopupMessageColors, TopColor) == 0x000000, "Member 'FEndPopupMessageColors::TopColor' has a wrong offset!");
static_assert(offsetof(FEndPopupMessageColors, BottomColor) == 0x000010, "Member 'FEndPopupMessageColors::BottomColor' has a wrong offset!");
static_assert(offsetof(FEndPopupMessageColors, OutlineColor) == 0x000020, "Member 'FEndPopupMessageColors::OutlineColor' has a wrong offset!");
static_assert(offsetof(FEndPopupMessageColors, ShadowColor) == 0x000030, "Member 'FEndPopupMessageColors::ShadowColor' has a wrong offset!");

// ScriptStruct EndGame.EndBattleSummonMinRangeLimitAbility
// 0x000C (0x000C - 0x0000)
struct FEndBattleSummonMinRangeLimitAbility final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRange;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleSummonMinRangeLimitAbility) == 0x000004, "Wrong alignment on FEndBattleSummonMinRangeLimitAbility");
static_assert(sizeof(FEndBattleSummonMinRangeLimitAbility) == 0x00000C, "Wrong size on FEndBattleSummonMinRangeLimitAbility");
static_assert(offsetof(FEndBattleSummonMinRangeLimitAbility, AbilityId) == 0x000000, "Member 'FEndBattleSummonMinRangeLimitAbility::AbilityId' has a wrong offset!");
static_assert(offsetof(FEndBattleSummonMinRangeLimitAbility, MinRange) == 0x000008, "Member 'FEndBattleSummonMinRangeLimitAbility::MinRange' has a wrong offset!");

// ScriptStruct EndGame.SummonWarpPointMoveOnlyBattle
// 0x000C (0x000C - 0x0000)
struct FSummonWarpPointMoveOnlyBattle final
{
public:
	class FName                                   battleSceneID;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummonWarpPointMoveOnlyBattle) == 0x000004, "Wrong alignment on FSummonWarpPointMoveOnlyBattle");
static_assert(sizeof(FSummonWarpPointMoveOnlyBattle) == 0x00000C, "Wrong size on FSummonWarpPointMoveOnlyBattle");
static_assert(offsetof(FSummonWarpPointMoveOnlyBattle, battleSceneID) == 0x000000, "Member 'FSummonWarpPointMoveOnlyBattle::battleSceneID' has a wrong offset!");
static_assert(offsetof(FSummonWarpPointMoveOnlyBattle, Phase) == 0x000008, "Member 'FSummonWarpPointMoveOnlyBattle::Phase' has a wrong offset!");

// ScriptStruct EndGame.EndStreamingGirdData
// 0x0078 (0x0078 - 0x0000)
struct FEndStreamingGirdData final
{
public:
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0000(0x0028)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadDistance;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnloadMargin;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridX;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridY;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CollisionsAABB;                                    // 0x0038(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x24];                                      // 0x0054(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndStreamingGirdData) == 0x000008, "Wrong alignment on FEndStreamingGirdData");
static_assert(sizeof(FEndStreamingGirdData) == 0x000078, "Wrong size on FEndStreamingGirdData");
static_assert(offsetof(FEndStreamingGirdData, Level) == 0x000000, "Member 'FEndStreamingGirdData::Level' has a wrong offset!");
static_assert(offsetof(FEndStreamingGirdData, LoadDistance) == 0x000028, "Member 'FEndStreamingGirdData::LoadDistance' has a wrong offset!");
static_assert(offsetof(FEndStreamingGirdData, UnloadMargin) == 0x00002C, "Member 'FEndStreamingGirdData::UnloadMargin' has a wrong offset!");
static_assert(offsetof(FEndStreamingGirdData, GridX) == 0x000030, "Member 'FEndStreamingGirdData::GridX' has a wrong offset!");
static_assert(offsetof(FEndStreamingGirdData, GridY) == 0x000034, "Member 'FEndStreamingGirdData::GridY' has a wrong offset!");
static_assert(offsetof(FEndStreamingGirdData, CollisionsAABB) == 0x000038, "Member 'FEndStreamingGirdData::CollisionsAABB' has a wrong offset!");

// ScriptStruct EndGame.EndMenuConstumeItemInfo
// 0x0048 (0x0048 - 0x0000)
struct FEndMenuConstumeItemInfo final
{
public:
	class FName                                   CharaSpecID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ThumbnailImage;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FlavorText;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenFlag;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuConstumeItemInfo) == 0x000008, "Wrong alignment on FEndMenuConstumeItemInfo");
static_assert(sizeof(FEndMenuConstumeItemInfo) == 0x000048, "Wrong size on FEndMenuConstumeItemInfo");
static_assert(offsetof(FEndMenuConstumeItemInfo, CharaSpecID) == 0x000000, "Member 'FEndMenuConstumeItemInfo::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndMenuConstumeItemInfo, ThumbnailImage) == 0x000008, "Member 'FEndMenuConstumeItemInfo::ThumbnailImage' has a wrong offset!");
static_assert(offsetof(FEndMenuConstumeItemInfo, ItemName) == 0x000020, "Member 'FEndMenuConstumeItemInfo::ItemName' has a wrong offset!");
static_assert(offsetof(FEndMenuConstumeItemInfo, FlavorText) == 0x000030, "Member 'FEndMenuConstumeItemInfo::FlavorText' has a wrong offset!");
static_assert(offsetof(FEndMenuConstumeItemInfo, OpenFlag) == 0x000040, "Member 'FEndMenuConstumeItemInfo::OpenFlag' has a wrong offset!");

// ScriptStruct EndGame.SummonChooseAbility
// 0x0018 (0x0018 - 0x0000)
struct FSummonChooseAbility final
{
public:
	class FName                                   ChooseID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AbilityList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummonChooseAbility) == 0x000008, "Wrong alignment on FSummonChooseAbility");
static_assert(sizeof(FSummonChooseAbility) == 0x000018, "Wrong size on FSummonChooseAbility");
static_assert(offsetof(FSummonChooseAbility, ChooseID) == 0x000000, "Member 'FSummonChooseAbility::ChooseID' has a wrong offset!");
static_assert(offsetof(FSummonChooseAbility, AbilityList) == 0x000008, "Member 'FSummonChooseAbility::AbilityList' has a wrong offset!");

// ScriptStruct EndGame.EndClimbingActionCameraModule
// 0x00F0 (0x04E0 - 0x03F0)
struct FEndClimbingActionCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0xF0];                                     // 0x03F0(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndClimbingActionCameraModule) == 0x000008, "Wrong alignment on FEndClimbingActionCameraModule");
static_assert(sizeof(FEndClimbingActionCameraModule) == 0x0004E0, "Wrong size on FEndClimbingActionCameraModule");

// ScriptStruct EndGame.SummonAbilityChoice
// 0x0044 (0x0044 - 0x0000)
struct FSummonAbilityChoice final
{
public:
	class FName                                   TableID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDistance;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeight;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESummonAbilityInfluenceCenter                 InfluenceCenter;                                   // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InfluenceRadius;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InfluenceTargets;                                  // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfToGroundDist;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetToGroundDist;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAttackRange;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAttackRange;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummonAbilityChoice) == 0x000004, "Wrong alignment on FSummonAbilityChoice");
static_assert(sizeof(FSummonAbilityChoice) == 0x000044, "Wrong size on FSummonAbilityChoice");
static_assert(offsetof(FSummonAbilityChoice, TableID) == 0x000000, "Member 'FSummonAbilityChoice::TableID' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, ID) == 0x000008, "Member 'FSummonAbilityChoice::ID' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, Priority) == 0x000010, "Member 'FSummonAbilityChoice::Priority' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, MinDistance) == 0x000014, "Member 'FSummonAbilityChoice::MinDistance' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, MaxDistance) == 0x000018, "Member 'FSummonAbilityChoice::MaxDistance' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, MinHeight) == 0x00001C, "Member 'FSummonAbilityChoice::MinHeight' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, MaxHeight) == 0x000020, "Member 'FSummonAbilityChoice::MaxHeight' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, InfluenceCenter) == 0x000024, "Member 'FSummonAbilityChoice::InfluenceCenter' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, InfluenceRadius) == 0x000028, "Member 'FSummonAbilityChoice::InfluenceRadius' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, InfluenceTargets) == 0x00002C, "Member 'FSummonAbilityChoice::InfluenceTargets' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, SelfToGroundDist) == 0x000030, "Member 'FSummonAbilityChoice::SelfToGroundDist' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, TargetToGroundDist) == 0x000034, "Member 'FSummonAbilityChoice::TargetToGroundDist' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, Probability) == 0x000038, "Member 'FSummonAbilityChoice::Probability' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, MinAttackRange) == 0x00003C, "Member 'FSummonAbilityChoice::MinAttackRange' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, MaxAttackRange) == 0x000040, "Member 'FSummonAbilityChoice::MaxAttackRange' has a wrong offset!");

// ScriptStruct EndGame.EndAIBattleEnemyTargetSelectConditionElement
// 0x0014 (0x0014 - 0x0000)
struct FEndAIBattleEnemyTargetSelectConditionElement final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIEnemyTargetSelectCharacterType          CharacterType;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIEnemyTargetSelectConditionType          ConditionType;                                     // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchExclusion;                                   // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ratio;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContinuousLimit;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIBattleEnemyTargetSelectConditionElement) == 0x000004, "Wrong alignment on FEndAIBattleEnemyTargetSelectConditionElement");
static_assert(sizeof(FEndAIBattleEnemyTargetSelectConditionElement) == 0x000014, "Wrong size on FEndAIBattleEnemyTargetSelectConditionElement");
static_assert(offsetof(FEndAIBattleEnemyTargetSelectConditionElement, bEnable) == 0x000000, "Member 'FEndAIBattleEnemyTargetSelectConditionElement::bEnable' has a wrong offset!");
static_assert(offsetof(FEndAIBattleEnemyTargetSelectConditionElement, Priority) == 0x000004, "Member 'FEndAIBattleEnemyTargetSelectConditionElement::Priority' has a wrong offset!");
static_assert(offsetof(FEndAIBattleEnemyTargetSelectConditionElement, CharacterType) == 0x000008, "Member 'FEndAIBattleEnemyTargetSelectConditionElement::CharacterType' has a wrong offset!");
static_assert(offsetof(FEndAIBattleEnemyTargetSelectConditionElement, ConditionType) == 0x000009, "Member 'FEndAIBattleEnemyTargetSelectConditionElement::ConditionType' has a wrong offset!");
static_assert(offsetof(FEndAIBattleEnemyTargetSelectConditionElement, bMatchExclusion) == 0x00000A, "Member 'FEndAIBattleEnemyTargetSelectConditionElement::bMatchExclusion' has a wrong offset!");
static_assert(offsetof(FEndAIBattleEnemyTargetSelectConditionElement, Ratio) == 0x00000C, "Member 'FEndAIBattleEnemyTargetSelectConditionElement::Ratio' has a wrong offset!");
static_assert(offsetof(FEndAIBattleEnemyTargetSelectConditionElement, ContinuousLimit) == 0x000010, "Member 'FEndAIBattleEnemyTargetSelectConditionElement::ContinuousLimit' has a wrong offset!");

// ScriptStruct EndGame.EndAIBattleEnemyTargetSelectConditionData
// 0x0010 (0x0010 - 0x0000)
struct FEndAIBattleEnemyTargetSelectConditionData final
{
public:
	TArray<struct FEndAIBattleEnemyTargetSelectConditionElement> Elements;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIBattleEnemyTargetSelectConditionData) == 0x000008, "Wrong alignment on FEndAIBattleEnemyTargetSelectConditionData");
static_assert(sizeof(FEndAIBattleEnemyTargetSelectConditionData) == 0x000010, "Wrong size on FEndAIBattleEnemyTargetSelectConditionData");
static_assert(offsetof(FEndAIBattleEnemyTargetSelectConditionData, Elements) == 0x000000, "Member 'FEndAIBattleEnemyTargetSelectConditionData::Elements' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaResidentEffectVisibilityParameters
// 0x001C (0x001C - 0x0000)
struct FEndCinemaResidentEffectVisibilityParameters final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetLocationName;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetAccessorID;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndCinemaResidentEffectVisibility            Visibility;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCinemaResidentEffectVisibilityParameters) == 0x000004, "Wrong alignment on FEndCinemaResidentEffectVisibilityParameters");
static_assert(sizeof(FEndCinemaResidentEffectVisibilityParameters) == 0x00001C, "Wrong size on FEndCinemaResidentEffectVisibilityParameters");
static_assert(offsetof(FEndCinemaResidentEffectVisibilityParameters, TargetActorName) == 0x000000, "Member 'FEndCinemaResidentEffectVisibilityParameters::TargetActorName' has a wrong offset!");
static_assert(offsetof(FEndCinemaResidentEffectVisibilityParameters, TargetLocationName) == 0x000008, "Member 'FEndCinemaResidentEffectVisibilityParameters::TargetLocationName' has a wrong offset!");
static_assert(offsetof(FEndCinemaResidentEffectVisibilityParameters, TargetAccessorID) == 0x000010, "Member 'FEndCinemaResidentEffectVisibilityParameters::TargetAccessorID' has a wrong offset!");
static_assert(offsetof(FEndCinemaResidentEffectVisibilityParameters, Visibility) == 0x000018, "Member 'FEndCinemaResidentEffectVisibilityParameters::Visibility' has a wrong offset!");

// ScriptStruct EndGame.EndBattleFriendSpecialAbilityParam
// 0x0020 (0x0020 - 0x0000)
struct FEndBattleFriendSpecialAbilityParam final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EFriendSpecialAbilityConditionType>    ExecuteConditions;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Frequency;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleFriendSpecialAbilityParam) == 0x000008, "Wrong alignment on FEndBattleFriendSpecialAbilityParam");
static_assert(sizeof(FEndBattleFriendSpecialAbilityParam) == 0x000020, "Wrong size on FEndBattleFriendSpecialAbilityParam");
static_assert(offsetof(FEndBattleFriendSpecialAbilityParam, AbilityId) == 0x000000, "Member 'FEndBattleFriendSpecialAbilityParam::AbilityId' has a wrong offset!");
static_assert(offsetof(FEndBattleFriendSpecialAbilityParam, ExecuteConditions) == 0x000008, "Member 'FEndBattleFriendSpecialAbilityParam::ExecuteConditions' has a wrong offset!");
static_assert(offsetof(FEndBattleFriendSpecialAbilityParam, Frequency) == 0x000018, "Member 'FEndBattleFriendSpecialAbilityParam::Frequency' has a wrong offset!");
static_assert(offsetof(FEndBattleFriendSpecialAbilityParam, Priority) == 0x00001C, "Member 'FEndBattleFriendSpecialAbilityParam::Priority' has a wrong offset!");

// ScriptStruct EndGame.EndControlLiftCameraModule
// 0x0088 (0x0478 - 0x03F0)
struct FEndControlLiftCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x88];                                     // 0x03F0(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndControlLiftCameraModule) == 0x000008, "Wrong alignment on FEndControlLiftCameraModule");
static_assert(sizeof(FEndControlLiftCameraModule) == 0x000478, "Wrong size on FEndControlLiftCameraModule");

// ScriptStruct EndGame.EndBattleFriendAbilityParam
// 0x000C (0x000C - 0x0000)
struct FEndBattleFriendAbilityParam final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleFriendAbilityParam) == 0x000004, "Wrong alignment on FEndBattleFriendAbilityParam");
static_assert(sizeof(FEndBattleFriendAbilityParam) == 0x00000C, "Wrong size on FEndBattleFriendAbilityParam");
static_assert(offsetof(FEndBattleFriendAbilityParam, AbilityId) == 0x000000, "Member 'FEndBattleFriendAbilityParam::AbilityId' has a wrong offset!");
static_assert(offsetof(FEndBattleFriendAbilityParam, Probability) == 0x000008, "Member 'FEndBattleFriendAbilityParam::Probability' has a wrong offset!");

// ScriptStruct EndGame.EndAIAutoMagicRules
// 0x0038 (0x0038 - 0x0000)
struct FEndAIAutoMagicRules final
{
public:
	TArray<EAutoMagicEssentialConditionType>      EssentialConditions;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAutoMagicTargetPriorityType>          TargetPriorities;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAutoMagicTargetConditionType>         TargetConditions;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EAutoMagicSelectRuleType                      SelectRule;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIAutoMagicRules) == 0x000008, "Wrong alignment on FEndAIAutoMagicRules");
static_assert(sizeof(FEndAIAutoMagicRules) == 0x000038, "Wrong size on FEndAIAutoMagicRules");
static_assert(offsetof(FEndAIAutoMagicRules, EssentialConditions) == 0x000000, "Member 'FEndAIAutoMagicRules::EssentialConditions' has a wrong offset!");
static_assert(offsetof(FEndAIAutoMagicRules, TargetPriorities) == 0x000010, "Member 'FEndAIAutoMagicRules::TargetPriorities' has a wrong offset!");
static_assert(offsetof(FEndAIAutoMagicRules, TargetConditions) == 0x000020, "Member 'FEndAIAutoMagicRules::TargetConditions' has a wrong offset!");
static_assert(offsetof(FEndAIAutoMagicRules, SelectRule) == 0x000030, "Member 'FEndAIAutoMagicRules::SelectRule' has a wrong offset!");

// ScriptStruct EndGame.EndCutStoryFlagConditionItem
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEndCutStoryFlagConditionItem final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Condition;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCutStoryFlagConditionItem) == 0x000008, "Wrong alignment on FEndCutStoryFlagConditionItem");
static_assert(sizeof(FEndCutStoryFlagConditionItem) == 0x000018, "Wrong size on FEndCutStoryFlagConditionItem");
static_assert(offsetof(FEndCutStoryFlagConditionItem, ID) == 0x000008, "Member 'FEndCutStoryFlagConditionItem::ID' has a wrong offset!");
static_assert(offsetof(FEndCutStoryFlagConditionItem, Condition) == 0x000010, "Member 'FEndCutStoryFlagConditionItem::Condition' has a wrong offset!");

// ScriptStruct EndGame.EndBattleAITargetChoosingParam
// 0x0028 (0x0028 - 0x0000)
struct FEndBattleAITargetChoosingParam final
{
public:
	TArray<class AEndCharacter*>                  AssignedTargets;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETargetChoosingTag>                    PriorityTagList;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ETargetChoosingSort                           SortMethod;                                        // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBattleAITargetChoosingParam) == 0x000008, "Wrong alignment on FEndBattleAITargetChoosingParam");
static_assert(sizeof(FEndBattleAITargetChoosingParam) == 0x000028, "Wrong size on FEndBattleAITargetChoosingParam");
static_assert(offsetof(FEndBattleAITargetChoosingParam, AssignedTargets) == 0x000000, "Member 'FEndBattleAITargetChoosingParam::AssignedTargets' has a wrong offset!");
static_assert(offsetof(FEndBattleAITargetChoosingParam, PriorityTagList) == 0x000010, "Member 'FEndBattleAITargetChoosingParam::PriorityTagList' has a wrong offset!");
static_assert(offsetof(FEndBattleAITargetChoosingParam, SortMethod) == 0x000020, "Member 'FEndBattleAITargetChoosingParam::SortMethod' has a wrong offset!");

// ScriptStruct EndGame.EndCrowdActorSoundEntry
// 0x0018 (0x0018 - 0x0000)
struct FEndCrowdActorSoundEntry final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollow;                                           // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCrowdActorSoundEntry) == 0x000008, "Wrong alignment on FEndCrowdActorSoundEntry");
static_assert(sizeof(FEndCrowdActorSoundEntry) == 0x000018, "Wrong size on FEndCrowdActorSoundEntry");
static_assert(offsetof(FEndCrowdActorSoundEntry, Sound) == 0x000000, "Member 'FEndCrowdActorSoundEntry::Sound' has a wrong offset!");
static_assert(offsetof(FEndCrowdActorSoundEntry, SoundName) == 0x000008, "Member 'FEndCrowdActorSoundEntry::SoundName' has a wrong offset!");
static_assert(offsetof(FEndCrowdActorSoundEntry, FadeOutTime) == 0x000010, "Member 'FEndCrowdActorSoundEntry::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FEndCrowdActorSoundEntry, bFollow) == 0x000014, "Member 'FEndCrowdActorSoundEntry::bFollow' has a wrong offset!");

// ScriptStruct EndGame.EndShopMenuPriceColors
// 0x0030 (0x0030 - 0x0000)
struct FEndShopMenuPriceColors final
{
public:
	struct FLinearColor                           Default;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           High;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Low;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndShopMenuPriceColors) == 0x000004, "Wrong alignment on FEndShopMenuPriceColors");
static_assert(sizeof(FEndShopMenuPriceColors) == 0x000030, "Wrong size on FEndShopMenuPriceColors");
static_assert(offsetof(FEndShopMenuPriceColors, Default) == 0x000000, "Member 'FEndShopMenuPriceColors::Default' has a wrong offset!");
static_assert(offsetof(FEndShopMenuPriceColors, High) == 0x000010, "Member 'FEndShopMenuPriceColors::High' has a wrong offset!");
static_assert(offsetof(FEndShopMenuPriceColors, Low) == 0x000020, "Member 'FEndShopMenuPriceColors::Low' has a wrong offset!");

// ScriptStruct EndGame.EndAIAttackKindBattleParams
// 0x0050 (0x0050 - 0x0000)
struct FEndAIAttackKindBattleParams final
{
public:
	TMap<EAIPCBattleParamType, TSubclassOf<class UEndAIBattleParamBase>> BattleParams;                                      // 0x0000(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIAttackKindBattleParams) == 0x000008, "Wrong alignment on FEndAIAttackKindBattleParams");
static_assert(sizeof(FEndAIAttackKindBattleParams) == 0x000050, "Wrong size on FEndAIAttackKindBattleParams");
static_assert(offsetof(FEndAIAttackKindBattleParams, BattleParams) == 0x000000, "Member 'FEndAIAttackKindBattleParams::BattleParams' has a wrong offset!");

// ScriptStruct EndGame.EndAIComboInfo
// 0x0080 (0x0080 - 0x0000)
struct FEndAIComboInfo final
{
public:
	int32                                         ComboNumber;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ComboAddNumbers;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLastCombo;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSafeSelect;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 CancelNumbers;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DeselectConnectCheckCountCancelNumbers;            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EEndAIComboHitCondition                       ComboHitCondition;                                 // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EEndAIActionIgnoreCondition>           IgnoreConditionFlags;                              // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ExtraConditionTag;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LotProbability;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x14];                                      // 0x006C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIComboInfo) == 0x000008, "Wrong alignment on FEndAIComboInfo");
static_assert(sizeof(FEndAIComboInfo) == 0x000080, "Wrong size on FEndAIComboInfo");
static_assert(offsetof(FEndAIComboInfo, ComboNumber) == 0x000000, "Member 'FEndAIComboInfo::ComboNumber' has a wrong offset!");
static_assert(offsetof(FEndAIComboInfo, ComboAddNumbers) == 0x000008, "Member 'FEndAIComboInfo::ComboAddNumbers' has a wrong offset!");
static_assert(offsetof(FEndAIComboInfo, bLastCombo) == 0x000018, "Member 'FEndAIComboInfo::bLastCombo' has a wrong offset!");
static_assert(offsetof(FEndAIComboInfo, bSafeSelect) == 0x000019, "Member 'FEndAIComboInfo::bSafeSelect' has a wrong offset!");
static_assert(offsetof(FEndAIComboInfo, ActionDefinitionClass) == 0x000020, "Member 'FEndAIComboInfo::ActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(FEndAIComboInfo, CancelNumbers) == 0x000028, "Member 'FEndAIComboInfo::CancelNumbers' has a wrong offset!");
static_assert(offsetof(FEndAIComboInfo, DeselectConnectCheckCountCancelNumbers) == 0x000038, "Member 'FEndAIComboInfo::DeselectConnectCheckCountCancelNumbers' has a wrong offset!");
static_assert(offsetof(FEndAIComboInfo, ComboHitCondition) == 0x000048, "Member 'FEndAIComboInfo::ComboHitCondition' has a wrong offset!");
static_assert(offsetof(FEndAIComboInfo, IgnoreConditionFlags) == 0x000050, "Member 'FEndAIComboInfo::IgnoreConditionFlags' has a wrong offset!");
static_assert(offsetof(FEndAIComboInfo, ExtraConditionTag) == 0x000060, "Member 'FEndAIComboInfo::ExtraConditionTag' has a wrong offset!");
static_assert(offsetof(FEndAIComboInfo, LotProbability) == 0x000068, "Member 'FEndAIComboInfo::LotProbability' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleZeroOneModifierSetting
// 0x0050 (0x0050 - 0x0000)
struct FEndVehicleZeroOneModifierSetting final
{
public:
	EEndVehicleZeroOneValueSourceTypes            ZeroOneValueSourceType;                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinZeroOneValue;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZeroOneValue;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInputAccelAndDecelModify;                   // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   AccelEasingFunc;                                   // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   DecelEasingFunc;                                   // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputAccelAndDecelModifyDuration;                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseThrottleInputAsModifyRate;                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInputJumpModify;                            // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   JumpEasingFunc;                                    // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModifyJumpDuration;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x34];                                      // 0x001C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndVehicleZeroOneModifierSetting) == 0x000004, "Wrong alignment on FEndVehicleZeroOneModifierSetting");
static_assert(sizeof(FEndVehicleZeroOneModifierSetting) == 0x000050, "Wrong size on FEndVehicleZeroOneModifierSetting");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, ZeroOneValueSourceType) == 0x000000, "Member 'FEndVehicleZeroOneModifierSetting::ZeroOneValueSourceType' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, MinZeroOneValue) == 0x000004, "Member 'FEndVehicleZeroOneModifierSetting::MinZeroOneValue' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, MaxZeroOneValue) == 0x000008, "Member 'FEndVehicleZeroOneModifierSetting::MaxZeroOneValue' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, bEnableInputAccelAndDecelModify) == 0x00000C, "Member 'FEndVehicleZeroOneModifierSetting::bEnableInputAccelAndDecelModify' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, AccelEasingFunc) == 0x00000D, "Member 'FEndVehicleZeroOneModifierSetting::AccelEasingFunc' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, DecelEasingFunc) == 0x00000E, "Member 'FEndVehicleZeroOneModifierSetting::DecelEasingFunc' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, InputAccelAndDecelModifyDuration) == 0x000010, "Member 'FEndVehicleZeroOneModifierSetting::InputAccelAndDecelModifyDuration' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, bUseThrottleInputAsModifyRate) == 0x000014, "Member 'FEndVehicleZeroOneModifierSetting::bUseThrottleInputAsModifyRate' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, bEnableInputJumpModify) == 0x000015, "Member 'FEndVehicleZeroOneModifierSetting::bEnableInputJumpModify' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, JumpEasingFunc) == 0x000016, "Member 'FEndVehicleZeroOneModifierSetting::JumpEasingFunc' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneModifierSetting, ModifyJumpDuration) == 0x000018, "Member 'FEndVehicleZeroOneModifierSetting::ModifyJumpDuration' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleZeroOneSetting
// 0x0054 (0x0054 - 0x0000)
struct FEndVehicleZeroOneSetting final
{
public:
	struct FEndVehicleZeroOneModifierSetting      ZeroOneModifierSetting;                            // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ZeroOneFadeTime;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleZeroOneSetting) == 0x000004, "Wrong alignment on FEndVehicleZeroOneSetting");
static_assert(sizeof(FEndVehicleZeroOneSetting) == 0x000054, "Wrong size on FEndVehicleZeroOneSetting");
static_assert(offsetof(FEndVehicleZeroOneSetting, ZeroOneModifierSetting) == 0x000000, "Member 'FEndVehicleZeroOneSetting::ZeroOneModifierSetting' has a wrong offset!");
static_assert(offsetof(FEndVehicleZeroOneSetting, ZeroOneFadeTime) == 0x000050, "Member 'FEndVehicleZeroOneSetting::ZeroOneFadeTime' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleEngineSeSetting
// 0x0108 (0x0108 - 0x0000)
struct FEndVehicleEngineSeSetting final
{
public:
	struct FSQEXSEADSoundKey                      Sound;                                             // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      OverrideAttenuation[0x4];                          // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndVehicleZeroOneSetting              ZeroOneSlot0;                                      // 0x0060(0x0054)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndVehicleZeroOneSetting              ZeroOneSlot1;                                      // 0x00B4(0x0054)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleEngineSeSetting) == 0x000008, "Wrong alignment on FEndVehicleEngineSeSetting");
static_assert(sizeof(FEndVehicleEngineSeSetting) == 0x000108, "Wrong size on FEndVehicleEngineSeSetting");
static_assert(offsetof(FEndVehicleEngineSeSetting, Sound) == 0x000000, "Member 'FEndVehicleEngineSeSetting::Sound' has a wrong offset!");
static_assert(offsetof(FEndVehicleEngineSeSetting, AttachPointName) == 0x000038, "Member 'FEndVehicleEngineSeSetting::AttachPointName' has a wrong offset!");
static_assert(offsetof(FEndVehicleEngineSeSetting, OverrideAttenuation) == 0x000040, "Member 'FEndVehicleEngineSeSetting::OverrideAttenuation' has a wrong offset!");
static_assert(offsetof(FEndVehicleEngineSeSetting, ZeroOneSlot0) == 0x000060, "Member 'FEndVehicleEngineSeSetting::ZeroOneSlot0' has a wrong offset!");
static_assert(offsetof(FEndVehicleEngineSeSetting, ZeroOneSlot1) == 0x0000B4, "Member 'FEndVehicleEngineSeSetting::ZeroOneSlot1' has a wrong offset!");

// ScriptStruct EndGame.EndPercentAndColorPair
// 0x0014 (0x0014 - 0x0000)
struct FEndPercentAndColorPair final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0004(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPercentAndColorPair) == 0x000004, "Wrong alignment on FEndPercentAndColorPair");
static_assert(sizeof(FEndPercentAndColorPair) == 0x000014, "Wrong size on FEndPercentAndColorPair");
static_assert(offsetof(FEndPercentAndColorPair, Percent) == 0x000000, "Member 'FEndPercentAndColorPair::Percent' has a wrong offset!");
static_assert(offsetof(FEndPercentAndColorPair, ColorAndOpacity) == 0x000004, "Member 'FEndPercentAndColorPair::ColorAndOpacity' has a wrong offset!");

// ScriptStruct EndGame.EndAIBattlePhaseInfo
// 0x0044 (0x0044 - 0x0000)
struct FEndAIBattlePhaseInfo final
{
public:
	int32                                         HPPercent;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HpPercent_Heard;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HpPercent_Easy;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBattlePhaseChangeActionIdType           ActionIdType;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReactionID;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FloatReactionID;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CutSceneID;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CutSceneStateTrigger;                              // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastCutSceneID;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExtraConditionTag;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseManualPhaseChange;                             // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManualPhaseChangeAndHpLimit;                      // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHpLimitUIAlways;                            // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBattlePhaseInfo) == 0x000004, "Wrong alignment on FEndAIBattlePhaseInfo");
static_assert(sizeof(FEndAIBattlePhaseInfo) == 0x000044, "Wrong size on FEndAIBattlePhaseInfo");
static_assert(offsetof(FEndAIBattlePhaseInfo, HPPercent) == 0x000000, "Member 'FEndAIBattlePhaseInfo::HPPercent' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, HpPercent_Heard) == 0x000004, "Member 'FEndAIBattlePhaseInfo::HpPercent_Heard' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, HpPercent_Easy) == 0x000008, "Member 'FEndAIBattlePhaseInfo::HpPercent_Easy' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, ActionIdType) == 0x00000C, "Member 'FEndAIBattlePhaseInfo::ActionIdType' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, ReactionID) == 0x000010, "Member 'FEndAIBattlePhaseInfo::ReactionID' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, FloatReactionID) == 0x000018, "Member 'FEndAIBattlePhaseInfo::FloatReactionID' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, CutSceneID) == 0x000020, "Member 'FEndAIBattlePhaseInfo::CutSceneID' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, CutSceneStateTrigger) == 0x000028, "Member 'FEndAIBattlePhaseInfo::CutSceneStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, LastCutSceneID) == 0x000030, "Member 'FEndAIBattlePhaseInfo::LastCutSceneID' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, ExtraConditionTag) == 0x000038, "Member 'FEndAIBattlePhaseInfo::ExtraConditionTag' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, bUseManualPhaseChange) == 0x000040, "Member 'FEndAIBattlePhaseInfo::bUseManualPhaseChange' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, bManualPhaseChangeAndHpLimit) == 0x000041, "Member 'FEndAIBattlePhaseInfo::bManualPhaseChangeAndHpLimit' has a wrong offset!");
static_assert(offsetof(FEndAIBattlePhaseInfo, bEnableHpLimitUIAlways) == 0x000042, "Member 'FEndAIBattlePhaseInfo::bEnableHpLimitUIAlways' has a wrong offset!");

// ScriptStruct EndGame.EndCutsceneBudgetSettings
// 0x000C (0x000C - 0x0000)
struct FEndCutsceneBudgetSettings final
{
public:
	float                                         BudgetSize;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMovieNum;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCutsceneBudgetSettings) == 0x000004, "Wrong alignment on FEndCutsceneBudgetSettings");
static_assert(sizeof(FEndCutsceneBudgetSettings) == 0x00000C, "Wrong size on FEndCutsceneBudgetSettings");
static_assert(offsetof(FEndCutsceneBudgetSettings, BudgetSize) == 0x000000, "Member 'FEndCutsceneBudgetSettings::BudgetSize' has a wrong offset!");
static_assert(offsetof(FEndCutsceneBudgetSettings, Range) == 0x000004, "Member 'FEndCutsceneBudgetSettings::Range' has a wrong offset!");
static_assert(offsetof(FEndCutsceneBudgetSettings, MaxMovieNum) == 0x000008, "Member 'FEndCutsceneBudgetSettings::MaxMovieNum' has a wrong offset!");

// ScriptStruct EndGame.EndAILevelActorInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndAILevelActorInfo final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAILevelActorInfo) == 0x000004, "Wrong alignment on FEndAILevelActorInfo");
static_assert(sizeof(FEndAILevelActorInfo) == 0x000010, "Wrong size on FEndAILevelActorInfo");
static_assert(offsetof(FEndAILevelActorInfo, LevelName) == 0x000000, "Member 'FEndAILevelActorInfo::LevelName' has a wrong offset!");
static_assert(offsetof(FEndAILevelActorInfo, ActorName) == 0x000008, "Member 'FEndAILevelActorInfo::ActorName' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAdditiveDamage_HitBoneSetting
// 0x002C (0x002C - 0x0000)
struct FRigUnit_EndAdditiveDamage_HitBoneSetting final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLocation;                                    // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAdditiveDamage_HitBoneSetting) == 0x000004, "Wrong alignment on FRigUnit_EndAdditiveDamage_HitBoneSetting");
static_assert(sizeof(FRigUnit_EndAdditiveDamage_HitBoneSetting) == 0x00002C, "Wrong size on FRigUnit_EndAdditiveDamage_HitBoneSetting");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitBoneSetting, Item) == 0x000000, "Member 'FRigUnit_EndAdditiveDamage_HitBoneSetting::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitBoneSetting, OffsetLocation) == 0x00000C, "Member 'FRigUnit_EndAdditiveDamage_HitBoneSetting::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitBoneSetting, OffsetRotation) == 0x000018, "Member 'FRigUnit_EndAdditiveDamage_HitBoneSetting::OffsetRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitBoneSetting, BlendInTime) == 0x000024, "Member 'FRigUnit_EndAdditiveDamage_HitBoneSetting::BlendInTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitBoneSetting, BlendOutTime) == 0x000028, "Member 'FRigUnit_EndAdditiveDamage_HitBoneSetting::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndDebugCameraOperatorCommandShortcut
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FEndDebugCameraOperatorCommandShortcut final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDebugCameraOperatorCommandShortcut) == 0x000010, "Wrong alignment on FEndDebugCameraOperatorCommandShortcut");
static_assert(sizeof(FEndDebugCameraOperatorCommandShortcut) == 0x000070, "Wrong size on FEndDebugCameraOperatorCommandShortcut");

// ScriptStruct EndGame.EndAIParam
// 0x0008 (0x0008 - 0x0000)
struct FEndAIParam final
{
public:
	bool                                          bCanLookAt;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanTurn;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanWaitAutoTurn;                                  // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanTurnNotifyCancel;                              // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnReactionAngle;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIParam) == 0x000004, "Wrong alignment on FEndAIParam");
static_assert(sizeof(FEndAIParam) == 0x000008, "Wrong size on FEndAIParam");
static_assert(offsetof(FEndAIParam, bCanLookAt) == 0x000000, "Member 'FEndAIParam::bCanLookAt' has a wrong offset!");
static_assert(offsetof(FEndAIParam, bCanTurn) == 0x000001, "Member 'FEndAIParam::bCanTurn' has a wrong offset!");
static_assert(offsetof(FEndAIParam, bCanWaitAutoTurn) == 0x000002, "Member 'FEndAIParam::bCanWaitAutoTurn' has a wrong offset!");
static_assert(offsetof(FEndAIParam, bCanTurnNotifyCancel) == 0x000003, "Member 'FEndAIParam::bCanTurnNotifyCancel' has a wrong offset!");
static_assert(offsetof(FEndAIParam, TurnReactionAngle) == 0x000004, "Member 'FEndAIParam::TurnReactionAngle' has a wrong offset!");

// ScriptStruct EndGame.EndAIEnemyCautionMoveSetting
// 0x001C (0x001C - 0x0000)
struct FEndAIEnemyCautionMoveSetting final
{
public:
	struct FEndAIMoveDefinitionMoveApproach       MoveApproachLeave;                                 // 0x0000(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndAIMoveDefinitionMoveApproach       MoveKeep;                                          // 0x0008(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceKeepMin;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceKeepMax;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveWaitMin;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveWaitMax;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIEnemyCautionMoveSetting) == 0x000004, "Wrong alignment on FEndAIEnemyCautionMoveSetting");
static_assert(sizeof(FEndAIEnemyCautionMoveSetting) == 0x00001C, "Wrong size on FEndAIEnemyCautionMoveSetting");
static_assert(offsetof(FEndAIEnemyCautionMoveSetting, MoveApproachLeave) == 0x000000, "Member 'FEndAIEnemyCautionMoveSetting::MoveApproachLeave' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyCautionMoveSetting, Distance) == 0x000004, "Member 'FEndAIEnemyCautionMoveSetting::Distance' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyCautionMoveSetting, MoveKeep) == 0x000008, "Member 'FEndAIEnemyCautionMoveSetting::MoveKeep' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyCautionMoveSetting, DistanceKeepMin) == 0x00000C, "Member 'FEndAIEnemyCautionMoveSetting::DistanceKeepMin' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyCautionMoveSetting, DistanceKeepMax) == 0x000010, "Member 'FEndAIEnemyCautionMoveSetting::DistanceKeepMax' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyCautionMoveSetting, MoveWaitMin) == 0x000014, "Member 'FEndAIEnemyCautionMoveSetting::MoveWaitMin' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyCautionMoveSetting, MoveWaitMax) == 0x000018, "Member 'FEndAIEnemyCautionMoveSetting::MoveWaitMax' has a wrong offset!");

// ScriptStruct EndGame.EndAIEnemyCautionAnimationSetting
// 0x000C (0x000C - 0x0000)
struct FEndAIEnemyCautionAnimationSetting final
{
public:
	class FName                                   SequenceName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIEnemyCautionAnimationSetting) == 0x000004, "Wrong alignment on FEndAIEnemyCautionAnimationSetting");
static_assert(sizeof(FEndAIEnemyCautionAnimationSetting) == 0x00000C, "Wrong size on FEndAIEnemyCautionAnimationSetting");
static_assert(offsetof(FEndAIEnemyCautionAnimationSetting, SequenceName) == 0x000000, "Member 'FEndAIEnemyCautionAnimationSetting::SequenceName' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyCautionAnimationSetting, Weight) == 0x000008, "Member 'FEndAIEnemyCautionAnimationSetting::Weight' has a wrong offset!");

// ScriptStruct EndGame.EndAIEnemyCautionSetting
// 0x0038 (0x0038 - 0x0000)
struct FEndAIEnemyCautionSetting final
{
public:
	struct FEndAIEnemyCautionMoveSetting          MoveSetting;                                       // 0x0000(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndAIEnemyCautionAnimationSetting> AnimiationSettings;                                // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEndAIMoveDefinitionMoveApproach       MoveSettingFromCaution;                            // 0x0030(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIEnemyCautionSetting) == 0x000008, "Wrong alignment on FEndAIEnemyCautionSetting");
static_assert(sizeof(FEndAIEnemyCautionSetting) == 0x000038, "Wrong size on FEndAIEnemyCautionSetting");
static_assert(offsetof(FEndAIEnemyCautionSetting, MoveSetting) == 0x000000, "Member 'FEndAIEnemyCautionSetting::MoveSetting' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyCautionSetting, AnimiationSettings) == 0x000020, "Member 'FEndAIEnemyCautionSetting::AnimiationSettings' has a wrong offset!");
static_assert(offsetof(FEndAIEnemyCautionSetting, MoveSettingFromCaution) == 0x000030, "Member 'FEndAIEnemyCautionSetting::MoveSettingFromCaution' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndHandControl_DebugHandSettings
// 0x000C (0x000C - 0x0000)
struct FRigUnit_EndHandControl_DebugHandSettings final
{
public:
	struct FRigElementKey                         ControlItem;                                       // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndHandControl_DebugHandSettings) == 0x000004, "Wrong alignment on FRigUnit_EndHandControl_DebugHandSettings");
static_assert(sizeof(FRigUnit_EndHandControl_DebugHandSettings) == 0x00000C, "Wrong size on FRigUnit_EndHandControl_DebugHandSettings");
static_assert(offsetof(FRigUnit_EndHandControl_DebugHandSettings, ControlItem) == 0x000000, "Member 'FRigUnit_EndHandControl_DebugHandSettings::ControlItem' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndHandControl_DebugSettings
// 0x0018 (0x0018 - 0x0000)
struct FRigUnit_EndHandControl_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawTrace;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableInterp;                                    // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndHandControl_DebugHandSettings> Hands;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndHandControl_DebugSettings) == 0x000008, "Wrong alignment on FRigUnit_EndHandControl_DebugSettings");
static_assert(sizeof(FRigUnit_EndHandControl_DebugSettings) == 0x000018, "Wrong size on FRigUnit_EndHandControl_DebugSettings");
static_assert(offsetof(FRigUnit_EndHandControl_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndHandControl_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_DebugSettings, bDrawTrace) == 0x000001, "Member 'FRigUnit_EndHandControl_DebugSettings::bDrawTrace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_DebugSettings, bDisableInterp) == 0x000002, "Member 'FRigUnit_EndHandControl_DebugSettings::bDisableInterp' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_DebugSettings, Hands) == 0x000008, "Member 'FRigUnit_EndHandControl_DebugSettings::Hands' has a wrong offset!");

// ScriptStruct EndGame.EndCameraOperator
// 0x00E8 (0x00E8 - 0x0000)
struct alignas(0x08) FEndCameraOperator
{
public:
	uint8                                         Pad_0[0xE8];                                       // 0x0000(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCameraOperator) == 0x000008, "Wrong alignment on FEndCameraOperator");
static_assert(sizeof(FEndCameraOperator) == 0x0000E8, "Wrong size on FEndCameraOperator");

// ScriptStruct EndGame.EndCutCameraOperator
// 0x02A8 (0x0390 - 0x00E8)
struct FEndCutCameraOperator final : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0x2A8];                                     // 0x00E8(0x02A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCutCameraOperator) == 0x000008, "Wrong alignment on FEndCutCameraOperator");
static_assert(sizeof(FEndCutCameraOperator) == 0x000390, "Wrong size on FEndCutCameraOperator");

// ScriptStruct EndGame.EndBoidsTypeParam
// 0x0198 (0x0198 - 0x0000)
struct FEndBoidsTypeParam final
{
public:
	EEndAiCharaType                               InfluencersType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Influencers;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          RoleCheck;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoids;                                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoidsRadius;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepulsive;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RepulsiveRadius;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x170];                                     // 0x0028(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBoidsTypeParam) == 0x000008, "Wrong alignment on FEndBoidsTypeParam");
static_assert(sizeof(FEndBoidsTypeParam) == 0x000198, "Wrong size on FEndBoidsTypeParam");
static_assert(offsetof(FEndBoidsTypeParam, InfluencersType) == 0x000000, "Member 'FEndBoidsTypeParam::InfluencersType' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, Influencers) == 0x000008, "Member 'FEndBoidsTypeParam::Influencers' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, RoleCheck) == 0x000018, "Member 'FEndBoidsTypeParam::RoleCheck' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, bBoids) == 0x000019, "Member 'FEndBoidsTypeParam::bBoids' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, BoidsRadius) == 0x00001C, "Member 'FEndBoidsTypeParam::BoidsRadius' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, bRepulsive) == 0x000020, "Member 'FEndBoidsTypeParam::bRepulsive' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, RepulsiveRadius) == 0x000024, "Member 'FEndBoidsTypeParam::RepulsiveRadius' has a wrong offset!");

// ScriptStruct EndGame.EndAerialBoidsParam
// 0x0050 (0x0050 - 0x0000)
struct FEndAerialBoidsParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccuracyX;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccuracyY;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccuracyZ;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PersonalSpace;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Prediction;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlatUcpc;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlatTarget;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHorizontal;                                       // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CountZ;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuantityZ;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndBoidsTypeParam>             BoidsParameter;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAerialBoidsParam) == 0x000008, "Wrong alignment on FEndAerialBoidsParam");
static_assert(sizeof(FEndAerialBoidsParam) == 0x000050, "Wrong size on FEndAerialBoidsParam");
static_assert(offsetof(FEndAerialBoidsParam, AccuracyX) == 0x000008, "Member 'FEndAerialBoidsParam::AccuracyX' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, AccuracyY) == 0x00000C, "Member 'FEndAerialBoidsParam::AccuracyY' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, AccuracyZ) == 0x000010, "Member 'FEndAerialBoidsParam::AccuracyZ' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, PersonalSpace) == 0x000018, "Member 'FEndAerialBoidsParam::PersonalSpace' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, Prediction) == 0x00001C, "Member 'FEndAerialBoidsParam::Prediction' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, FlatUcpc) == 0x000020, "Member 'FEndAerialBoidsParam::FlatUcpc' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, FlatTarget) == 0x000021, "Member 'FEndAerialBoidsParam::FlatTarget' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, bHorizontal) == 0x000022, "Member 'FEndAerialBoidsParam::bHorizontal' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, CountZ) == 0x000024, "Member 'FEndAerialBoidsParam::CountZ' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, QuantityZ) == 0x000028, "Member 'FEndAerialBoidsParam::QuantityZ' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, BoidsParameter) == 0x000030, "Member 'FEndAerialBoidsParam::BoidsParameter' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableHubDebugMessage
// 0x00A8 (0x00B0 - 0x0008)
struct FEndDataTableHubDebugMessage final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActiveMessage;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CompleteMessage;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnterMessage;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaveMessage;                                      // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            UserArgs;                                          // 0x0060(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableHubDebugMessage) == 0x000008, "Wrong alignment on FEndDataTableHubDebugMessage");
static_assert(sizeof(FEndDataTableHubDebugMessage) == 0x0000B0, "Wrong size on FEndDataTableHubDebugMessage");
static_assert(offsetof(FEndDataTableHubDebugMessage, Comment) == 0x000008, "Member 'FEndDataTableHubDebugMessage::Comment' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubDebugMessage, Enable) == 0x000018, "Member 'FEndDataTableHubDebugMessage::Enable' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubDebugMessage, ActiveMessage) == 0x000020, "Member 'FEndDataTableHubDebugMessage::ActiveMessage' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubDebugMessage, CompleteMessage) == 0x000030, "Member 'FEndDataTableHubDebugMessage::CompleteMessage' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubDebugMessage, EnterMessage) == 0x000040, "Member 'FEndDataTableHubDebugMessage::EnterMessage' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubDebugMessage, LeaveMessage) == 0x000050, "Member 'FEndDataTableHubDebugMessage::LeaveMessage' has a wrong offset!");
static_assert(offsetof(FEndDataTableHubDebugMessage, UserArgs) == 0x000060, "Member 'FEndDataTableHubDebugMessage::UserArgs' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleAutoStartOnMoveSetting
// 0x0008 (0x0008 - 0x0000)
struct FEndVehicleAutoStartOnMoveSetting final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoStartOnMoveVelocityThreshold;                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleAutoStartOnMoveSetting) == 0x000004, "Wrong alignment on FEndVehicleAutoStartOnMoveSetting");
static_assert(sizeof(FEndVehicleAutoStartOnMoveSetting) == 0x000008, "Wrong size on FEndVehicleAutoStartOnMoveSetting");
static_assert(offsetof(FEndVehicleAutoStartOnMoveSetting, bEnable) == 0x000000, "Member 'FEndVehicleAutoStartOnMoveSetting::bEnable' has a wrong offset!");
static_assert(offsetof(FEndVehicleAutoStartOnMoveSetting, AutoStartOnMoveVelocityThreshold) == 0x000004, "Member 'FEndVehicleAutoStartOnMoveSetting::AutoStartOnMoveVelocityThreshold' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleOneShotSeSetting
// 0x0078 (0x0078 - 0x0000)
struct FEndVehicleOneShotSeSetting final
{
public:
	struct FSQEXSEADSoundKey                      Sound;                                             // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EEndVehicleSwitchValueSourceTypes             SwitchValueSourceType;                             // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      OverrideAttenuation[0x4];                          // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      OverrideConcurrency;                               // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveThreshold;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndVehicleOneShotSeSetting) == 0x000008, "Wrong alignment on FEndVehicleOneShotSeSetting");
static_assert(sizeof(FEndVehicleOneShotSeSetting) == 0x000078, "Wrong size on FEndVehicleOneShotSeSetting");
static_assert(offsetof(FEndVehicleOneShotSeSetting, Sound) == 0x000000, "Member 'FEndVehicleOneShotSeSetting::Sound' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSetting, SwitchValueSourceType) == 0x000038, "Member 'FEndVehicleOneShotSeSetting::SwitchValueSourceType' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSetting, AttachPointName) == 0x00003C, "Member 'FEndVehicleOneShotSeSetting::AttachPointName' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSetting, OverrideAttenuation) == 0x000048, "Member 'FEndVehicleOneShotSeSetting::OverrideAttenuation' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSetting, OverrideConcurrency) == 0x000068, "Member 'FEndVehicleOneShotSeSetting::OverrideConcurrency' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSetting, MoveThreshold) == 0x000070, "Member 'FEndVehicleOneShotSeSetting::MoveThreshold' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleTravelingSeSetting
// 0x0268 (0x0268 - 0x0000)
struct FEndVehicleTravelingSeSetting final
{
public:
	struct FSQEXSEADSoundKey                      Sound[0x7];                                        // 0x0000(0x0038)(Edit, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      OverrideAttenuation[0x4];                          // 0x0190(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotGroundedVolumeMultiplier;                       // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndVehicleZeroOneSetting              ZeroOneSlot0;                                      // 0x01B4(0x0054)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndVehicleZeroOneSetting              ZeroOneSlot1;                                      // 0x0208(0x0054)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          AdjustSteeringInput_ZeroOneSlot0;                  // 0x025C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdjustSteeringInput_ZeroOneValue;                  // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndVehicleTravelingSeSetting) == 0x000008, "Wrong alignment on FEndVehicleTravelingSeSetting");
static_assert(sizeof(FEndVehicleTravelingSeSetting) == 0x000268, "Wrong size on FEndVehicleTravelingSeSetting");
static_assert(offsetof(FEndVehicleTravelingSeSetting, Sound) == 0x000000, "Member 'FEndVehicleTravelingSeSetting::Sound' has a wrong offset!");
static_assert(offsetof(FEndVehicleTravelingSeSetting, AttachPointName) == 0x000188, "Member 'FEndVehicleTravelingSeSetting::AttachPointName' has a wrong offset!");
static_assert(offsetof(FEndVehicleTravelingSeSetting, OverrideAttenuation) == 0x000190, "Member 'FEndVehicleTravelingSeSetting::OverrideAttenuation' has a wrong offset!");
static_assert(offsetof(FEndVehicleTravelingSeSetting, NotGroundedVolumeMultiplier) == 0x0001B0, "Member 'FEndVehicleTravelingSeSetting::NotGroundedVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FEndVehicleTravelingSeSetting, ZeroOneSlot0) == 0x0001B4, "Member 'FEndVehicleTravelingSeSetting::ZeroOneSlot0' has a wrong offset!");
static_assert(offsetof(FEndVehicleTravelingSeSetting, ZeroOneSlot1) == 0x000208, "Member 'FEndVehicleTravelingSeSetting::ZeroOneSlot1' has a wrong offset!");
static_assert(offsetof(FEndVehicleTravelingSeSetting, AdjustSteeringInput_ZeroOneSlot0) == 0x00025C, "Member 'FEndVehicleTravelingSeSetting::AdjustSteeringInput_ZeroOneSlot0' has a wrong offset!");
static_assert(offsetof(FEndVehicleTravelingSeSetting, AdjustSteeringInput_ZeroOneValue) == 0x000260, "Member 'FEndVehicleTravelingSeSetting::AdjustSteeringInput_ZeroOneValue' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleOneShotSeSettingPerRoadAttribute
// 0x01C8 (0x01C8 - 0x0000)
struct FEndVehicleOneShotSeSettingPerRoadAttribute final
{
public:
	struct FSQEXSEADSoundKey                      Sound[0x7];                                        // 0x0000(0x0038)(Edit, NativeAccessSpecifierPublic)
	EEndVehicleSwitchValueSourceTypes             SwitchValueSourceType;                             // 0x0188(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x018C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      OverrideAttenuation[0x4];                          // 0x0198(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      OverrideConcurrency;                               // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveThreshold;                                     // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SupressionTimeSec;                                 // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleOneShotSeSettingPerRoadAttribute) == 0x000008, "Wrong alignment on FEndVehicleOneShotSeSettingPerRoadAttribute");
static_assert(sizeof(FEndVehicleOneShotSeSettingPerRoadAttribute) == 0x0001C8, "Wrong size on FEndVehicleOneShotSeSettingPerRoadAttribute");
static_assert(offsetof(FEndVehicleOneShotSeSettingPerRoadAttribute, Sound) == 0x000000, "Member 'FEndVehicleOneShotSeSettingPerRoadAttribute::Sound' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSettingPerRoadAttribute, SwitchValueSourceType) == 0x000188, "Member 'FEndVehicleOneShotSeSettingPerRoadAttribute::SwitchValueSourceType' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSettingPerRoadAttribute, AttachPointName) == 0x00018C, "Member 'FEndVehicleOneShotSeSettingPerRoadAttribute::AttachPointName' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSettingPerRoadAttribute, OverrideAttenuation) == 0x000198, "Member 'FEndVehicleOneShotSeSettingPerRoadAttribute::OverrideAttenuation' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSettingPerRoadAttribute, OverrideConcurrency) == 0x0001B8, "Member 'FEndVehicleOneShotSeSettingPerRoadAttribute::OverrideConcurrency' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSettingPerRoadAttribute, MoveThreshold) == 0x0001C0, "Member 'FEndVehicleOneShotSeSettingPerRoadAttribute::MoveThreshold' has a wrong offset!");
static_assert(offsetof(FEndVehicleOneShotSeSettingPerRoadAttribute, SupressionTimeSec) == 0x0001C4, "Member 'FEndVehicleOneShotSeSettingPerRoadAttribute::SupressionTimeSec' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleSuspentionSeSetting
// 0x00D8 (0x00D8 - 0x0000)
struct FEndVehicleSuspentionSeSetting final
{
public:
	struct FSQEXSEADSoundKey                      MoveSound;                                         // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MoveVelocityThreshold;                             // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveOffsetHeightThreshold;                         // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEXSEADSoundKey                      ChassisHitSound;                                   // 0x0040(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         ChassisHitVelocityThreshold;                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChassisHitOffsetHeightThreshold;                   // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      OverrideAttenuation[0x4];                          // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      OverrideConcurrency;                               // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSupressionTimeSec;                             // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitSupressionTimeSec;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x20];                                      // 0x00B8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndVehicleSuspentionSeSetting) == 0x000008, "Wrong alignment on FEndVehicleSuspentionSeSetting");
static_assert(sizeof(FEndVehicleSuspentionSeSetting) == 0x0000D8, "Wrong size on FEndVehicleSuspentionSeSetting");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, MoveSound) == 0x000000, "Member 'FEndVehicleSuspentionSeSetting::MoveSound' has a wrong offset!");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, MoveVelocityThreshold) == 0x000038, "Member 'FEndVehicleSuspentionSeSetting::MoveVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, MoveOffsetHeightThreshold) == 0x00003C, "Member 'FEndVehicleSuspentionSeSetting::MoveOffsetHeightThreshold' has a wrong offset!");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, ChassisHitSound) == 0x000040, "Member 'FEndVehicleSuspentionSeSetting::ChassisHitSound' has a wrong offset!");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, ChassisHitVelocityThreshold) == 0x000078, "Member 'FEndVehicleSuspentionSeSetting::ChassisHitVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, ChassisHitOffsetHeightThreshold) == 0x00007C, "Member 'FEndVehicleSuspentionSeSetting::ChassisHitOffsetHeightThreshold' has a wrong offset!");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, AttachPointName) == 0x000080, "Member 'FEndVehicleSuspentionSeSetting::AttachPointName' has a wrong offset!");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, OverrideAttenuation) == 0x000088, "Member 'FEndVehicleSuspentionSeSetting::OverrideAttenuation' has a wrong offset!");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, OverrideConcurrency) == 0x0000A8, "Member 'FEndVehicleSuspentionSeSetting::OverrideConcurrency' has a wrong offset!");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, MoveSupressionTimeSec) == 0x0000B0, "Member 'FEndVehicleSuspentionSeSetting::MoveSupressionTimeSec' has a wrong offset!");
static_assert(offsetof(FEndVehicleSuspentionSeSetting, HitSupressionTimeSec) == 0x0000B4, "Member 'FEndVehicleSuspentionSeSetting::HitSupressionTimeSec' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleSeSetting
// 0x0990 (0x0990 - 0x0000)
struct FEndVehicleSeSetting final
{
public:
	struct FEndVehicleAutoStartOnMoveSetting      AutoStartSetting;                                  // 0x0000(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VelociyScalingValue;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelVelociyScalingValue;                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollAngleScalingValue;                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationalVelocityScalingValue;                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFadeInTime;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopFadeOutTime;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndVehicleEngineSeSetting             Engine;                                            // 0x0020(0x0108)(Edit, NativeAccessSpecifierPublic)
	struct FEndVehicleOneShotSeSetting            OnIgnition;                                        // 0x0128(0x0078)(Edit, NativeAccessSpecifierPublic)
	struct FEndVehicleOneShotSeSetting            OnAccel;                                           // 0x01A0(0x0078)(Edit, NativeAccessSpecifierPublic)
	struct FEndVehicleOneShotSeSetting            OnDecel;                                           // 0x0218(0x0078)(Edit, NativeAccessSpecifierPublic)
	struct FEndVehicleOneShotSeSetting            OnBrake;                                           // 0x0290(0x0078)(Edit, NativeAccessSpecifierPublic)
	struct FEndVehicleOneShotSeSetting            OnSteering;                                        // 0x0308(0x0078)(Edit, NativeAccessSpecifierPublic)
	struct FEndVehicleTravelingSeSetting          Traveling;                                         // 0x0380(0x0268)(Edit, NativeAccessSpecifierPublic)
	struct FEndVehicleOneShotSeSettingPerRoadAttribute OnRoadAttributeEntry;                              // 0x05E8(0x01C8)(Edit, NativeAccessSpecifierPublic)
	struct FEndVehicleEngineSeSetting             WindNoise;                                         // 0x07B0(0x0108)(Edit, NativeAccessSpecifierPublic)
	struct FEndVehicleSuspentionSeSetting         Suspention;                                        // 0x08B8(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleSeSetting) == 0x000008, "Wrong alignment on FEndVehicleSeSetting");
static_assert(sizeof(FEndVehicleSeSetting) == 0x000990, "Wrong size on FEndVehicleSeSetting");
static_assert(offsetof(FEndVehicleSeSetting, AutoStartSetting) == 0x000000, "Member 'FEndVehicleSeSetting::AutoStartSetting' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, VelociyScalingValue) == 0x000008, "Member 'FEndVehicleSeSetting::VelociyScalingValue' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, WheelVelociyScalingValue) == 0x00000C, "Member 'FEndVehicleSeSetting::WheelVelociyScalingValue' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, RollAngleScalingValue) == 0x000010, "Member 'FEndVehicleSeSetting::RollAngleScalingValue' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, RotationalVelocityScalingValue) == 0x000014, "Member 'FEndVehicleSeSetting::RotationalVelocityScalingValue' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, StartFadeInTime) == 0x000018, "Member 'FEndVehicleSeSetting::StartFadeInTime' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, StopFadeOutTime) == 0x00001C, "Member 'FEndVehicleSeSetting::StopFadeOutTime' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, Engine) == 0x000020, "Member 'FEndVehicleSeSetting::Engine' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, OnIgnition) == 0x000128, "Member 'FEndVehicleSeSetting::OnIgnition' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, OnAccel) == 0x0001A0, "Member 'FEndVehicleSeSetting::OnAccel' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, OnDecel) == 0x000218, "Member 'FEndVehicleSeSetting::OnDecel' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, OnBrake) == 0x000290, "Member 'FEndVehicleSeSetting::OnBrake' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, OnSteering) == 0x000308, "Member 'FEndVehicleSeSetting::OnSteering' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, Traveling) == 0x000380, "Member 'FEndVehicleSeSetting::Traveling' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, OnRoadAttributeEntry) == 0x0005E8, "Member 'FEndVehicleSeSetting::OnRoadAttributeEntry' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, WindNoise) == 0x0007B0, "Member 'FEndVehicleSeSetting::WindNoise' has a wrong offset!");
static_assert(offsetof(FEndVehicleSeSetting, Suspention) == 0x0008B8, "Member 'FEndVehicleSeSetting::Suspention' has a wrong offset!");

// ScriptStruct EndGame.EndBoidsParam
// 0x0020 (0x0020 - 0x0000)
struct FEndBoidsParam final
{
public:
	float                                         PersonalSpace;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndBoidsTypeParam>             BoidsParameter;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBoidsParam) == 0x000008, "Wrong alignment on FEndBoidsParam");
static_assert(sizeof(FEndBoidsParam) == 0x000020, "Wrong size on FEndBoidsParam");
static_assert(offsetof(FEndBoidsParam, PersonalSpace) == 0x000000, "Member 'FEndBoidsParam::PersonalSpace' has a wrong offset!");
static_assert(offsetof(FEndBoidsParam, BoidsParameter) == 0x000008, "Member 'FEndBoidsParam::BoidsParameter' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_Particle
// 0x0024 (0x0024 - 0x0000)
struct FRigUnit_EndPBD_Particle final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixed;                                            // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetectCollision;                                  // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVelocity;                                      // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSetDistanceConstraint;                        // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceConstraintParentInvMass;                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndPBD_Particle) == 0x000004, "Wrong alignment on FRigUnit_EndPBD_Particle");
static_assert(sizeof(FRigUnit_EndPBD_Particle) == 0x000024, "Wrong size on FRigUnit_EndPBD_Particle");
static_assert(offsetof(FRigUnit_EndPBD_Particle, Item) == 0x000000, "Member 'FRigUnit_EndPBD_Particle::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Particle, bFixed) == 0x00000C, "Member 'FRigUnit_EndPBD_Particle::bFixed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Particle, bDetectCollision) == 0x00000D, "Member 'FRigUnit_EndPBD_Particle::bDetectCollision' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Particle, Mass) == 0x000010, "Member 'FRigUnit_EndPBD_Particle::Mass' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Particle, Radius) == 0x000014, "Member 'FRigUnit_EndPBD_Particle::Radius' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Particle, GravityScale) == 0x000018, "Member 'FRigUnit_EndPBD_Particle::GravityScale' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Particle, bUseVelocity) == 0x00001C, "Member 'FRigUnit_EndPBD_Particle::bUseVelocity' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Particle, bAutoSetDistanceConstraint) == 0x00001D, "Member 'FRigUnit_EndPBD_Particle::bAutoSetDistanceConstraint' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Particle, DistanceConstraintParentInvMass) == 0x000020, "Member 'FRigUnit_EndPBD_Particle::DistanceConstraintParentInvMass' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_Constraint
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRigUnit_EndPBD_Constraint
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConstraintOrder;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndPBD_Constraint) == 0x000008, "Wrong alignment on FRigUnit_EndPBD_Constraint");
static_assert(sizeof(FRigUnit_EndPBD_Constraint) == 0x000010, "Wrong size on FRigUnit_EndPBD_Constraint");
static_assert(offsetof(FRigUnit_EndPBD_Constraint, ConstraintOrder) == 0x000008, "Member 'FRigUnit_EndPBD_Constraint::ConstraintOrder' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_LastPositionConstraint
// 0x0010 (0x0020 - 0x0010)
struct FRigUnit_EndPBD_LastPositionConstraint final : public FRigUnit_EndPBD_Constraint
{
public:
	struct FRigElementKey                         Item0;                                             // 0x0010(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndPBD_LastPositionConstraint) == 0x000008, "Wrong alignment on FRigUnit_EndPBD_LastPositionConstraint");
static_assert(sizeof(FRigUnit_EndPBD_LastPositionConstraint) == 0x000020, "Wrong size on FRigUnit_EndPBD_LastPositionConstraint");
static_assert(offsetof(FRigUnit_EndPBD_LastPositionConstraint, Item0) == 0x000010, "Member 'FRigUnit_EndPBD_LastPositionConstraint::Item0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_LastPositionConstraint, Stiffness) == 0x00001C, "Member 'FRigUnit_EndPBD_LastPositionConstraint::Stiffness' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_DistanceConstraint
// 0x0028 (0x0038 - 0x0010)
struct FRigUnit_EndPBD_DistanceConstraint final : public FRigUnit_EndPBD_Constraint
{
public:
	struct FRigElementKey                         Item0;                                             // 0x0010(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Item1;                                             // 0x001C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompressionStiffness;                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchStiffness;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideInvMass0;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideInvMass1;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndPBD_DistanceConstraint) == 0x000008, "Wrong alignment on FRigUnit_EndPBD_DistanceConstraint");
static_assert(sizeof(FRigUnit_EndPBD_DistanceConstraint) == 0x000038, "Wrong size on FRigUnit_EndPBD_DistanceConstraint");
static_assert(offsetof(FRigUnit_EndPBD_DistanceConstraint, Item0) == 0x000010, "Member 'FRigUnit_EndPBD_DistanceConstraint::Item0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_DistanceConstraint, Item1) == 0x00001C, "Member 'FRigUnit_EndPBD_DistanceConstraint::Item1' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_DistanceConstraint, CompressionStiffness) == 0x000028, "Member 'FRigUnit_EndPBD_DistanceConstraint::CompressionStiffness' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_DistanceConstraint, StretchStiffness) == 0x00002C, "Member 'FRigUnit_EndPBD_DistanceConstraint::StretchStiffness' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_DistanceConstraint, OverrideInvMass0) == 0x000030, "Member 'FRigUnit_EndPBD_DistanceConstraint::OverrideInvMass0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_DistanceConstraint, OverrideInvMass1) == 0x000034, "Member 'FRigUnit_EndPBD_DistanceConstraint::OverrideInvMass1' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_BendConstraint
// 0x0038 (0x0048 - 0x0010)
struct FRigUnit_EndPBD_BendConstraint final : public FRigUnit_EndPBD_Constraint
{
public:
	struct FRigElementKey                         Item0;                                             // 0x0010(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Item1;                                             // 0x001C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         Item2;                                             // 0x0028(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompressionStiffness;                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchStiffness;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelayPointStiffness;                               // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideInvMass0;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideInvMass2;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndPBD_BendConstraint) == 0x000008, "Wrong alignment on FRigUnit_EndPBD_BendConstraint");
static_assert(sizeof(FRigUnit_EndPBD_BendConstraint) == 0x000048, "Wrong size on FRigUnit_EndPBD_BendConstraint");
static_assert(offsetof(FRigUnit_EndPBD_BendConstraint, Item0) == 0x000010, "Member 'FRigUnit_EndPBD_BendConstraint::Item0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_BendConstraint, Item1) == 0x00001C, "Member 'FRigUnit_EndPBD_BendConstraint::Item1' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_BendConstraint, Item2) == 0x000028, "Member 'FRigUnit_EndPBD_BendConstraint::Item2' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_BendConstraint, CompressionStiffness) == 0x000034, "Member 'FRigUnit_EndPBD_BendConstraint::CompressionStiffness' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_BendConstraint, StretchStiffness) == 0x000038, "Member 'FRigUnit_EndPBD_BendConstraint::StretchStiffness' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_BendConstraint, RelayPointStiffness) == 0x00003C, "Member 'FRigUnit_EndPBD_BendConstraint::RelayPointStiffness' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_BendConstraint, OverrideInvMass0) == 0x000040, "Member 'FRigUnit_EndPBD_BendConstraint::OverrideInvMass0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_BendConstraint, OverrideInvMass2) == 0x000044, "Member 'FRigUnit_EndPBD_BendConstraint::OverrideInvMass2' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_CharacterWeightConstraint
// 0x0020 (0x0030 - 0x0010)
struct FRigUnit_EndPBD_CharacterWeightConstraint final : public FRigUnit_EndPBD_Constraint
{
public:
	struct FRigElementKey                         Item0;                                             // 0x0010(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterMass;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveRadius;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushSize;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndPBD_CharacterWeightConstraint) == 0x000008, "Wrong alignment on FRigUnit_EndPBD_CharacterWeightConstraint");
static_assert(sizeof(FRigUnit_EndPBD_CharacterWeightConstraint) == 0x000030, "Wrong size on FRigUnit_EndPBD_CharacterWeightConstraint");
static_assert(offsetof(FRigUnit_EndPBD_CharacterWeightConstraint, Item0) == 0x000010, "Member 'FRigUnit_EndPBD_CharacterWeightConstraint::Item0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_CharacterWeightConstraint, CharacterMass) == 0x00001C, "Member 'FRigUnit_EndPBD_CharacterWeightConstraint::CharacterMass' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_CharacterWeightConstraint, AdditiveRadius) == 0x000020, "Member 'FRigUnit_EndPBD_CharacterWeightConstraint::AdditiveRadius' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_CharacterWeightConstraint, PushSize) == 0x000024, "Member 'FRigUnit_EndPBD_CharacterWeightConstraint::PushSize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_CharacterWeightConstraint, Stiffness) == 0x000028, "Member 'FRigUnit_EndPBD_CharacterWeightConstraint::Stiffness' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_AnimConstraint
// 0x0018 (0x0028 - 0x0010)
struct FRigUnit_EndPBD_AnimConstraint final : public FRigUnit_EndPBD_Constraint
{
public:
	struct FRigElementKey                         Item0;                                             // 0x0010(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndPBD_AnimConstraint) == 0x000008, "Wrong alignment on FRigUnit_EndPBD_AnimConstraint");
static_assert(sizeof(FRigUnit_EndPBD_AnimConstraint) == 0x000028, "Wrong size on FRigUnit_EndPBD_AnimConstraint");
static_assert(offsetof(FRigUnit_EndPBD_AnimConstraint, Item0) == 0x000010, "Member 'FRigUnit_EndPBD_AnimConstraint::Item0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_AnimConstraint, Distance) == 0x00001C, "Member 'FRigUnit_EndPBD_AnimConstraint::Distance' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_AnimConstraint, Stiffness) == 0x000020, "Member 'FRigUnit_EndPBD_AnimConstraint::Stiffness' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_Settings
// 0x0078 (0x0078 - 0x0000)
struct FRigUnit_EndPBD_Settings final
{
public:
	TArray<struct FRigUnit_EndPBD_Particle>       Particles;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndPBD_DistanceConstraint> DistanceConstraints;                               // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndPBD_BendConstraint> BendConstraints;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndPBD_CharacterWeightConstraint> CharacterWeightConstraints;                        // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndPBD_AnimConstraint> AnimConstraints;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndPBD_LastPositionConstraint> LastPositionConstraints;                           // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PositionIterationCount;                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VelocityIterationCount;                            // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledXPBD;                                      // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledSubStep;                                   // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledHighFpsEvaluation;                         // 0x006A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopSimulationOnWorldShift;                       // 0x006B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantVelocityDumping;                           // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpRate;                                        // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollBias;                                          // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndPBD_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndPBD_Settings");
static_assert(sizeof(FRigUnit_EndPBD_Settings) == 0x000078, "Wrong size on FRigUnit_EndPBD_Settings");
static_assert(offsetof(FRigUnit_EndPBD_Settings, Particles) == 0x000000, "Member 'FRigUnit_EndPBD_Settings::Particles' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, DistanceConstraints) == 0x000010, "Member 'FRigUnit_EndPBD_Settings::DistanceConstraints' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, BendConstraints) == 0x000020, "Member 'FRigUnit_EndPBD_Settings::BendConstraints' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, CharacterWeightConstraints) == 0x000030, "Member 'FRigUnit_EndPBD_Settings::CharacterWeightConstraints' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, AnimConstraints) == 0x000040, "Member 'FRigUnit_EndPBD_Settings::AnimConstraints' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, LastPositionConstraints) == 0x000050, "Member 'FRigUnit_EndPBD_Settings::LastPositionConstraints' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, PositionIterationCount) == 0x000060, "Member 'FRigUnit_EndPBD_Settings::PositionIterationCount' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, VelocityIterationCount) == 0x000064, "Member 'FRigUnit_EndPBD_Settings::VelocityIterationCount' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, bEnabledXPBD) == 0x000068, "Member 'FRigUnit_EndPBD_Settings::bEnabledXPBD' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, bEnabledSubStep) == 0x000069, "Member 'FRigUnit_EndPBD_Settings::bEnabledSubStep' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, bEnabledHighFpsEvaluation) == 0x00006A, "Member 'FRigUnit_EndPBD_Settings::bEnabledHighFpsEvaluation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, bStopSimulationOnWorldShift) == 0x00006B, "Member 'FRigUnit_EndPBD_Settings::bStopSimulationOnWorldShift' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, ConstantVelocityDumping) == 0x00006C, "Member 'FRigUnit_EndPBD_Settings::ConstantVelocityDumping' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, InterpRate) == 0x000070, "Member 'FRigUnit_EndPBD_Settings::InterpRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_Settings, RollBias) == 0x000074, "Member 'FRigUnit_EndPBD_Settings::RollBias' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntention
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEndAIIntention
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUpdatableWhenAIStop;                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIIntentionPriority                       Priority;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntention) == 0x000008, "Wrong alignment on FEndAIIntention");
static_assert(sizeof(FEndAIIntention) == 0x000010, "Wrong size on FEndAIIntention");
static_assert(offsetof(FEndAIIntention, bUpdatableWhenAIStop) == 0x000008, "Member 'FEndAIIntention::bUpdatableWhenAIStop' has a wrong offset!");
static_assert(offsetof(FEndAIIntention, Priority) == 0x000009, "Member 'FEndAIIntention::Priority' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntentionInterestActionControl
// 0x03D8 (0x03E8 - 0x0010)
struct FEndAIIntentionInterestActionControl final : public FEndAIIntention
{
public:
	uint8                                         Pad_10[0x3D8];                                     // 0x0010(0x03D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntentionInterestActionControl) == 0x000008, "Wrong alignment on FEndAIIntentionInterestActionControl");
static_assert(sizeof(FEndAIIntentionInterestActionControl) == 0x0003E8, "Wrong size on FEndAIIntentionInterestActionControl");

// ScriptStruct EndGame.EndAIIntentionManualControl
// 0x0030 (0x0040 - 0x0010)
struct FEndAIIntentionManualControl final : public FEndAIIntention
{
public:
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntentionManualControl) == 0x000008, "Wrong alignment on FEndAIIntentionManualControl");
static_assert(sizeof(FEndAIIntentionManualControl) == 0x000040, "Wrong size on FEndAIIntentionManualControl");

// ScriptStruct EndGame.EndStreamableAssetData
// 0x000C (0x000C - 0x0000)
struct FEndStreamableAssetData final
{
public:
	int32                                         AssetPathIndex;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LODs;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AssetType;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndStreamableAssetData) == 0x000004, "Wrong alignment on FEndStreamableAssetData");
static_assert(sizeof(FEndStreamableAssetData) == 0x00000C, "Wrong size on FEndStreamableAssetData");
static_assert(offsetof(FEndStreamableAssetData, AssetPathIndex) == 0x000000, "Member 'FEndStreamableAssetData::AssetPathIndex' has a wrong offset!");
static_assert(offsetof(FEndStreamableAssetData, Time) == 0x000004, "Member 'FEndStreamableAssetData::Time' has a wrong offset!");
static_assert(offsetof(FEndStreamableAssetData, LODs) == 0x000008, "Member 'FEndStreamableAssetData::LODs' has a wrong offset!");
static_assert(offsetof(FEndStreamableAssetData, AssetType) == 0x000009, "Member 'FEndStreamableAssetData::AssetType' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionEmotion
// 0x0050 (0x0190 - 0x0140)
struct FEndAIInterestActionEmotion final : public FEndAIInterestAction
{
public:
	class FName                                   EmotionID;                                         // 0x0138(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopTime;                                          // 0x0140(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InterestDirection;                                 // 0x0144(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x40];                                     // 0x0150(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionEmotion) == 0x000010, "Wrong alignment on FEndAIInterestActionEmotion");
static_assert(sizeof(FEndAIInterestActionEmotion) == 0x000190, "Wrong size on FEndAIInterestActionEmotion");
static_assert(offsetof(FEndAIInterestActionEmotion, EmotionID) == 0x000138, "Member 'FEndAIInterestActionEmotion::EmotionID' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionEmotion, LoopTime) == 0x000140, "Member 'FEndAIInterestActionEmotion::LoopTime' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionEmotion, InterestDirection) == 0x000144, "Member 'FEndAIInterestActionEmotion::InterestDirection' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionEmotion, TargetActor) == 0x000148, "Member 'FEndAIInterestActionEmotion::TargetActor' has a wrong offset!");

// ScriptStruct EndGame.EndWeaponSwimCameraLookAtConfig
// 0x0018 (0x0018 - 0x0000)
struct FEndWeaponSwimCameraLookAtConfig final
{
public:
	class FName                                   TargetPointName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFrame;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndFrame;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomRate;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtInterpSpeed;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWeaponSwimCameraLookAtConfig) == 0x000004, "Wrong alignment on FEndWeaponSwimCameraLookAtConfig");
static_assert(sizeof(FEndWeaponSwimCameraLookAtConfig) == 0x000018, "Wrong size on FEndWeaponSwimCameraLookAtConfig");
static_assert(offsetof(FEndWeaponSwimCameraLookAtConfig, TargetPointName) == 0x000000, "Member 'FEndWeaponSwimCameraLookAtConfig::TargetPointName' has a wrong offset!");
static_assert(offsetof(FEndWeaponSwimCameraLookAtConfig, StartFrame) == 0x000008, "Member 'FEndWeaponSwimCameraLookAtConfig::StartFrame' has a wrong offset!");
static_assert(offsetof(FEndWeaponSwimCameraLookAtConfig, EndFrame) == 0x00000C, "Member 'FEndWeaponSwimCameraLookAtConfig::EndFrame' has a wrong offset!");
static_assert(offsetof(FEndWeaponSwimCameraLookAtConfig, ZoomRate) == 0x000010, "Member 'FEndWeaponSwimCameraLookAtConfig::ZoomRate' has a wrong offset!");
static_assert(offsetof(FEndWeaponSwimCameraLookAtConfig, LookAtInterpSpeed) == 0x000014, "Member 'FEndWeaponSwimCameraLookAtConfig::LookAtInterpSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCutCharaID
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableCutCharaID final : public FTableRowBase
{
public:
	class FName                                   CutSceneID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PachiCharaName;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PachiCharaSpec;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationLevelName;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGFAAccessorID;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGFAPlaceTo;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerEquipmentReference;                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PachiCharaFlag;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PachiCharaPriority;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PachiCharaCandidates;                              // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EEndPachiCharaOption                          PachiCharaOption;                                  // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReleasePosition;                                   // 0x005C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReleaseRotation;                                   // 0x0068(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         DestMotionIndex;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCutCharaID) == 0x000008, "Wrong alignment on FEndDataTableCutCharaID");
static_assert(sizeof(FEndDataTableCutCharaID) == 0x000078, "Wrong size on FEndDataTableCutCharaID");
static_assert(offsetof(FEndDataTableCutCharaID, CutSceneID) == 0x000008, "Member 'FEndDataTableCutCharaID::CutSceneID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, PachiCharaName) == 0x000010, "Member 'FEndDataTableCutCharaID::PachiCharaName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, PachiCharaSpec) == 0x000018, "Member 'FEndDataTableCutCharaID::PachiCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, LocationLevelName) == 0x000020, "Member 'FEndDataTableCutCharaID::LocationLevelName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, BGFAAccessorID) == 0x000028, "Member 'FEndDataTableCutCharaID::BGFAAccessorID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, BGFAPlaceTo) == 0x000030, "Member 'FEndDataTableCutCharaID::BGFAPlaceTo' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, PlayerEquipmentReference) == 0x000038, "Member 'FEndDataTableCutCharaID::PlayerEquipmentReference' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, PachiCharaFlag) == 0x00003C, "Member 'FEndDataTableCutCharaID::PachiCharaFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, PachiCharaPriority) == 0x000040, "Member 'FEndDataTableCutCharaID::PachiCharaPriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, PachiCharaCandidates) == 0x000048, "Member 'FEndDataTableCutCharaID::PachiCharaCandidates' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, PachiCharaOption) == 0x000058, "Member 'FEndDataTableCutCharaID::PachiCharaOption' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, ReleasePosition) == 0x00005C, "Member 'FEndDataTableCutCharaID::ReleasePosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, ReleaseRotation) == 0x000068, "Member 'FEndDataTableCutCharaID::ReleaseRotation' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, DestMotionIndex) == 0x000074, "Member 'FEndDataTableCutCharaID::DestMotionIndex' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionEscape
// 0x0140 (0x0280 - 0x0140)
struct FEndAIInterestActionEscape final : public FEndAIInterestAction
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0138(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeDistance;                                    // 0x0140(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeDirRange;                                    // 0x0144(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrafeMove;                                        // 0x0148(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEscapeLookAtTurn;                                 // 0x0149(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x136];                                    // 0x014A(0x0136)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionEscape) == 0x000010, "Wrong alignment on FEndAIInterestActionEscape");
static_assert(sizeof(FEndAIInterestActionEscape) == 0x000280, "Wrong size on FEndAIInterestActionEscape");
static_assert(offsetof(FEndAIInterestActionEscape, TargetActor) == 0x000138, "Member 'FEndAIInterestActionEscape::TargetActor' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionEscape, EscapeDistance) == 0x000140, "Member 'FEndAIInterestActionEscape::EscapeDistance' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionEscape, EscapeDirRange) == 0x000144, "Member 'FEndAIInterestActionEscape::EscapeDirRange' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionEscape, StrafeMove) == 0x000148, "Member 'FEndAIInterestActionEscape::StrafeMove' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionEscape, bEscapeLookAtTurn) == 0x000149, "Member 'FEndAIInterestActionEscape::bEscapeLookAtTurn' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionLookAt
// 0x0030 (0x0170 - 0x0140)
struct FEndAIInterestActionLookAt : public FEndAIInterestAction
{
public:
	EEndLookAtRequestType                         RequestType;                                       // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x013C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x18];                                     // 0x0158(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionLookAt) == 0x000010, "Wrong alignment on FEndAIInterestActionLookAt");
static_assert(sizeof(FEndAIInterestActionLookAt) == 0x000170, "Wrong size on FEndAIInterestActionLookAt");
static_assert(offsetof(FEndAIInterestActionLookAt, RequestType) == 0x000138, "Member 'FEndAIInterestActionLookAt::RequestType' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionLookAt, TargetLocation) == 0x00013C, "Member 'FEndAIInterestActionLookAt::TargetLocation' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionLookAt, TargetActor) == 0x000148, "Member 'FEndAIInterestActionLookAt::TargetActor' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionLookAt, TargetName) == 0x000150, "Member 'FEndAIInterestActionLookAt::TargetName' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionLookAtForceDeactive
// 0x0010 (0x0150 - 0x0140)
struct FEndAIInterestActionLookAtForceDeactive final : public FEndAIInterestAction
{
public:
	EEndLookAtForceDeactiveType                   Type;                                              // 0x0138(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x17];                                     // 0x0139(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionLookAtForceDeactive) == 0x000010, "Wrong alignment on FEndAIInterestActionLookAtForceDeactive");
static_assert(sizeof(FEndAIInterestActionLookAtForceDeactive) == 0x000150, "Wrong size on FEndAIInterestActionLookAtForceDeactive");
static_assert(offsetof(FEndAIInterestActionLookAtForceDeactive, Type) == 0x000138, "Member 'FEndAIInterestActionLookAtForceDeactive::Type' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionLookAtTimer
// 0x0010 (0x0180 - 0x0170)
struct FEndAIInterestActionLookAtTimer final : public FEndAIInterestActionLookAt
{
public:
	float                                         LookAtTime;                                        // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0xC];                                      // 0x0174(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionLookAtTimer) == 0x000010, "Wrong alignment on FEndAIInterestActionLookAtTimer");
static_assert(sizeof(FEndAIInterestActionLookAtTimer) == 0x000180, "Wrong size on FEndAIInterestActionLookAtTimer");
static_assert(offsetof(FEndAIInterestActionLookAtTimer, LookAtTime) == 0x000170, "Member 'FEndAIInterestActionLookAtTimer::LookAtTime' has a wrong offset!");

// ScriptStruct EndGame.EndWallRunningCameraModule
// 0x00B0 (0x04A0 - 0x03F0)
struct alignas(0x10) FEndWallRunningCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0xB0];                                     // 0x03F0(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndWallRunningCameraModule) == 0x000010, "Wrong alignment on FEndWallRunningCameraModule");
static_assert(sizeof(FEndWallRunningCameraModule) == 0x0004A0, "Wrong size on FEndWallRunningCameraModule");

// ScriptStruct EndGame.EndDialogueGenerateSourceMotion
// 0x0020 (0x0020 - 0x0000)
struct FEndDialogueGenerateSourceMotion final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopTime;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeforeWait;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationScale;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationScale;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueGenerateSourceMotion) == 0x000004, "Wrong alignment on FEndDialogueGenerateSourceMotion");
static_assert(sizeof(FEndDialogueGenerateSourceMotion) == 0x000020, "Wrong size on FEndDialogueGenerateSourceMotion");
static_assert(offsetof(FEndDialogueGenerateSourceMotion, MotionName) == 0x000000, "Member 'FEndDialogueGenerateSourceMotion::MotionName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMotion, bLooping) == 0x000008, "Member 'FEndDialogueGenerateSourceMotion::bLooping' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMotion, LoopTime) == 0x00000C, "Member 'FEndDialogueGenerateSourceMotion::LoopTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMotion, BeforeWait) == 0x000010, "Member 'FEndDialogueGenerateSourceMotion::BeforeWait' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMotion, BlendTime) == 0x000014, "Member 'FEndDialogueGenerateSourceMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMotion, TranslationScale) == 0x000018, "Member 'FEndDialogueGenerateSourceMotion::TranslationScale' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMotion, RotationScale) == 0x00001C, "Member 'FEndDialogueGenerateSourceMotion::RotationScale' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceActorShotOverride
// 0x0038 (0x0038 - 0x0000)
struct FEndDialogueGenerateSourceActorShotOverride final
{
public:
	TArray<struct FEndDialogueGenerateSourceMotion> Motions;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bKeepLastShotMotion;                               // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableGenerateMotion;                            // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetTranslation;                                   // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Translation;                                       // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetRotation;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBind;                                             // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoFitGround;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueGenerateSourceActorShotOverride) == 0x000008, "Wrong alignment on FEndDialogueGenerateSourceActorShotOverride");
static_assert(sizeof(FEndDialogueGenerateSourceActorShotOverride) == 0x000038, "Wrong size on FEndDialogueGenerateSourceActorShotOverride");
static_assert(offsetof(FEndDialogueGenerateSourceActorShotOverride, Motions) == 0x000000, "Member 'FEndDialogueGenerateSourceActorShotOverride::Motions' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorShotOverride, bKeepLastShotMotion) == 0x000010, "Member 'FEndDialogueGenerateSourceActorShotOverride::bKeepLastShotMotion' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorShotOverride, bDisableGenerateMotion) == 0x000011, "Member 'FEndDialogueGenerateSourceActorShotOverride::bDisableGenerateMotion' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorShotOverride, bSetTranslation) == 0x000012, "Member 'FEndDialogueGenerateSourceActorShotOverride::bSetTranslation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorShotOverride, Translation) == 0x000014, "Member 'FEndDialogueGenerateSourceActorShotOverride::Translation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorShotOverride, bSetRotation) == 0x000020, "Member 'FEndDialogueGenerateSourceActorShotOverride::bSetRotation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorShotOverride, Rotation) == 0x000024, "Member 'FEndDialogueGenerateSourceActorShotOverride::Rotation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorShotOverride, bBind) == 0x000030, "Member 'FEndDialogueGenerateSourceActorShotOverride::bBind' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorShotOverride, bNoFitGround) == 0x000031, "Member 'FEndDialogueGenerateSourceActorShotOverride::bNoFitGround' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionManual
// 0x0000 (0x0140 - 0x0140)
struct FEndAIInterestActionManual final : public FEndAIInterestAction
{
public:
	EEndAIInterestActionTag                       BehaviorTag;                                       // 0x0138(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionManual) == 0x000010, "Wrong alignment on FEndAIInterestActionManual");
static_assert(sizeof(FEndAIInterestActionManual) == 0x000140, "Wrong size on FEndAIInterestActionManual");
static_assert(offsetof(FEndAIInterestActionManual, BehaviorTag) == 0x000138, "Member 'FEndAIInterestActionManual::BehaviorTag' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionMoveTo
// 0x0030 (0x0170 - 0x0140)
struct FEndAIInterestActionMoveTo final : public FEndAIInterestAction
{
public:
	struct FVector                                TargetLocation;                                    // 0x0138(0x000C)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTolerance;                                     // 0x0144(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpolationMove;                                // 0x0148(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMoveType                                MoveType;                                          // 0x0149(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldAiPathWayType                           PathType;                                          // 0x014A(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOutSideMove;                                   // 0x014B(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x24];                                     // 0x014C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionMoveTo) == 0x000010, "Wrong alignment on FEndAIInterestActionMoveTo");
static_assert(sizeof(FEndAIInterestActionMoveTo) == 0x000170, "Wrong size on FEndAIInterestActionMoveTo");
static_assert(offsetof(FEndAIInterestActionMoveTo, TargetLocation) == 0x000138, "Member 'FEndAIInterestActionMoveTo::TargetLocation' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionMoveTo, StopTolerance) == 0x000144, "Member 'FEndAIInterestActionMoveTo::StopTolerance' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionMoveTo, bInterpolationMove) == 0x000148, "Member 'FEndAIInterestActionMoveTo::bInterpolationMove' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionMoveTo, MoveType) == 0x000149, "Member 'FEndAIInterestActionMoveTo::MoveType' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionMoveTo, PathType) == 0x00014A, "Member 'FEndAIInterestActionMoveTo::PathType' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionMoveTo, bCanOutSideMove) == 0x00014B, "Member 'FEndAIInterestActionMoveTo::bCanOutSideMove' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceCharacter
// 0x0030 (0x0030 - 0x0000)
struct FEndDialogueGenerateSourceCharacter final
{
public:
	class FName                                   BindName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionalActorName;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACharacter>                 CharacterClass;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTemporary;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Condition;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoFitGround;                                      // 0x0024(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SwapPositionBindName;                              // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueGenerateSourceCharacter) == 0x000008, "Wrong alignment on FEndDialogueGenerateSourceCharacter");
static_assert(sizeof(FEndDialogueGenerateSourceCharacter) == 0x000030, "Wrong size on FEndDialogueGenerateSourceCharacter");
static_assert(offsetof(FEndDialogueGenerateSourceCharacter, BindName) == 0x000000, "Member 'FEndDialogueGenerateSourceCharacter::BindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCharacter, OptionalActorName) == 0x000008, "Member 'FEndDialogueGenerateSourceCharacter::OptionalActorName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCharacter, CharacterClass) == 0x000010, "Member 'FEndDialogueGenerateSourceCharacter::CharacterClass' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCharacter, bTemporary) == 0x000018, "Member 'FEndDialogueGenerateSourceCharacter::bTemporary' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCharacter, Condition) == 0x00001C, "Member 'FEndDialogueGenerateSourceCharacter::Condition' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCharacter, bNoFitGround) == 0x000024, "Member 'FEndDialogueGenerateSourceCharacter::bNoFitGround' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCharacter, SwapPositionBindName) == 0x000028, "Member 'FEndDialogueGenerateSourceCharacter::SwapPositionBindName' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceCommand
// 0x0030 (0x0030 - 0x0000)
struct FEndDialogueGenerateSourceCommand final
{
public:
	int32                                         CommandType;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wait;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArguments;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntegerArguments;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Condition;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueGenerateSourceCommand) == 0x000008, "Wrong alignment on FEndDialogueGenerateSourceCommand");
static_assert(sizeof(FEndDialogueGenerateSourceCommand) == 0x000030, "Wrong size on FEndDialogueGenerateSourceCommand");
static_assert(offsetof(FEndDialogueGenerateSourceCommand, CommandType) == 0x000000, "Member 'FEndDialogueGenerateSourceCommand::CommandType' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCommand, Wait) == 0x000004, "Member 'FEndDialogueGenerateSourceCommand::Wait' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCommand, StringArguments) == 0x000008, "Member 'FEndDialogueGenerateSourceCommand::StringArguments' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCommand, IntegerArguments) == 0x000018, "Member 'FEndDialogueGenerateSourceCommand::IntegerArguments' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCommand, Condition) == 0x000028, "Member 'FEndDialogueGenerateSourceCommand::Condition' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceMessage
// 0x0078 (0x0078 - 0x0000)
struct FEndDialogueGenerateSourceMessage final
{
public:
	class FName                                   GenerateId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceId;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationMin;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeforeWait;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterWait;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubtitleDelayTime;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreVoiceDuration;                              // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkerBindName;                                    // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoBindListener;                                 // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuspendSequence;                                  // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeamlessOutCamera;                                // 0x0036(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ListenerBindNames;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnbindNames;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRestoreToInitialPositionWhenUnbind;               // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FocusBindName;                                     // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndDialogueGenerateSourceCommand> CommandList;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueGenerateSourceMessage) == 0x000008, "Wrong alignment on FEndDialogueGenerateSourceMessage");
static_assert(sizeof(FEndDialogueGenerateSourceMessage) == 0x000078, "Wrong size on FEndDialogueGenerateSourceMessage");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, GenerateId) == 0x000000, "Member 'FEndDialogueGenerateSourceMessage::GenerateId' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, TextId) == 0x000008, "Member 'FEndDialogueGenerateSourceMessage::TextId' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, VoiceId) == 0x000010, "Member 'FEndDialogueGenerateSourceMessage::VoiceId' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, DurationMin) == 0x000018, "Member 'FEndDialogueGenerateSourceMessage::DurationMin' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, BeforeWait) == 0x00001C, "Member 'FEndDialogueGenerateSourceMessage::BeforeWait' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, AfterWait) == 0x000020, "Member 'FEndDialogueGenerateSourceMessage::AfterWait' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, SubtitleDelayTime) == 0x000024, "Member 'FEndDialogueGenerateSourceMessage::SubtitleDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, bIgnoreVoiceDuration) == 0x000028, "Member 'FEndDialogueGenerateSourceMessage::bIgnoreVoiceDuration' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, TalkerBindName) == 0x00002C, "Member 'FEndDialogueGenerateSourceMessage::TalkerBindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, bAutoBindListener) == 0x000034, "Member 'FEndDialogueGenerateSourceMessage::bAutoBindListener' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, bSuspendSequence) == 0x000035, "Member 'FEndDialogueGenerateSourceMessage::bSuspendSequence' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, bSeamlessOutCamera) == 0x000036, "Member 'FEndDialogueGenerateSourceMessage::bSeamlessOutCamera' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, ListenerBindNames) == 0x000038, "Member 'FEndDialogueGenerateSourceMessage::ListenerBindNames' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, UnbindNames) == 0x000048, "Member 'FEndDialogueGenerateSourceMessage::UnbindNames' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, bRestoreToInitialPositionWhenUnbind) == 0x000058, "Member 'FEndDialogueGenerateSourceMessage::bRestoreToInitialPositionWhenUnbind' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, FocusBindName) == 0x00005C, "Member 'FEndDialogueGenerateSourceMessage::FocusBindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceMessage, CommandList) == 0x000068, "Member 'FEndDialogueGenerateSourceMessage::CommandList' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceCharacterOverride
// 0x0030 (0x0030 - 0x0000)
struct FEndDialogueGenerateSourceCharacterOverride final
{
public:
	TArray<struct FEndDialogueGenerateSourceMotion> Motions;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSetTranslation;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Translation;                                       // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetRotation;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueGenerateSourceCharacterOverride) == 0x000008, "Wrong alignment on FEndDialogueGenerateSourceCharacterOverride");
static_assert(sizeof(FEndDialogueGenerateSourceCharacterOverride) == 0x000030, "Wrong size on FEndDialogueGenerateSourceCharacterOverride");
static_assert(offsetof(FEndDialogueGenerateSourceCharacterOverride, Motions) == 0x000000, "Member 'FEndDialogueGenerateSourceCharacterOverride::Motions' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCharacterOverride, bSetTranslation) == 0x000010, "Member 'FEndDialogueGenerateSourceCharacterOverride::bSetTranslation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCharacterOverride, Translation) == 0x000014, "Member 'FEndDialogueGenerateSourceCharacterOverride::Translation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCharacterOverride, bSetRotation) == 0x000020, "Member 'FEndDialogueGenerateSourceCharacterOverride::bSetRotation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceCharacterOverride, Rotation) == 0x000024, "Member 'FEndDialogueGenerateSourceCharacterOverride::Rotation' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceGenerator
// 0x01F0 (0x01F0 - 0x0000)
struct FEndDialogueGenerateSourceGenerator final
{
public:
	bool                                          bFix;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomSeed;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndDialogueBlueprintGeneratorBase> Generator;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      FloatParams;                                       // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector2D>           Float2DParams;                                     // 0x0060(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             Float3DParams;                                     // 0x00B0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                NameParams;                                        // 0x0100(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              GenerateData;                                      // 0x0150(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              GenerateSource;                                    // 0x01A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueGenerateSourceGenerator) == 0x000008, "Wrong alignment on FEndDialogueGenerateSourceGenerator");
static_assert(sizeof(FEndDialogueGenerateSourceGenerator) == 0x0001F0, "Wrong size on FEndDialogueGenerateSourceGenerator");
static_assert(offsetof(FEndDialogueGenerateSourceGenerator, bFix) == 0x000000, "Member 'FEndDialogueGenerateSourceGenerator::bFix' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceGenerator, RandomSeed) == 0x000004, "Member 'FEndDialogueGenerateSourceGenerator::RandomSeed' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceGenerator, Generator) == 0x000008, "Member 'FEndDialogueGenerateSourceGenerator::Generator' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceGenerator, FloatParams) == 0x000010, "Member 'FEndDialogueGenerateSourceGenerator::FloatParams' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceGenerator, Float2DParams) == 0x000060, "Member 'FEndDialogueGenerateSourceGenerator::Float2DParams' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceGenerator, Float3DParams) == 0x0000B0, "Member 'FEndDialogueGenerateSourceGenerator::Float3DParams' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceGenerator, NameParams) == 0x000100, "Member 'FEndDialogueGenerateSourceGenerator::NameParams' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceGenerator, GenerateData) == 0x000150, "Member 'FEndDialogueGenerateSourceGenerator::GenerateData' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceGenerator, GenerateSource) == 0x0001A0, "Member 'FEndDialogueGenerateSourceGenerator::GenerateSource' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceConstraint
// 0x0014 (0x0014 - 0x0000)
struct FEndDialogueGenerateSourceConstraint final
{
public:
	class FName                                   Parent;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   Slot;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueGenerateSourceConstraint) == 0x000004, "Wrong alignment on FEndDialogueGenerateSourceConstraint");
static_assert(sizeof(FEndDialogueGenerateSourceConstraint) == 0x000014, "Wrong size on FEndDialogueGenerateSourceConstraint");
static_assert(offsetof(FEndDialogueGenerateSourceConstraint, Parent) == 0x000000, "Member 'FEndDialogueGenerateSourceConstraint::Parent' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceConstraint, SocketName) == 0x000008, "Member 'FEndDialogueGenerateSourceConstraint::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceConstraint, Slot) == 0x000010, "Member 'FEndDialogueGenerateSourceConstraint::Slot' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceShot
// 0x0760 (0x0760 - 0x0000)
struct FEndDialogueGenerateSourceShot final
{
public:
	int32                                         ShotAssetIndex;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShotId;                                            // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreviousShotId;                                    // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndDialogueGenerateSourceMessage> Messages;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLoopShot;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndShot;                                          // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableShotSkip;                                   // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableShotSkipOnSkipCinema;                      // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnbindCamera;                                     // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixCharacterTransform;                            // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixCharacterLookAt;                               // 0x002E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixConstraint;                                    // 0x002F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableLookAt;                                    // 0x0030(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndDialogueGenerateSourceLookAtType          CharacterLookAtType;                               // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraShake;                                // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndDialogueGenerateSourceGenerator    Camera;                                            // 0x0038(0x01F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FEndDialogueGenerateSourceGenerator    Motion;                                            // 0x0228(0x01F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FEndDialogueGenerateSourceGenerator    Light;                                             // 0x0418(0x01F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FEndDialogueGenerateSourceActorShotOverride> ShotOverride;                                      // 0x0608(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FEndDialogueGenerateSourceCharacterOverride> CharacterOverride;                                 // 0x0658(0x0050)(Deprecated, NativeAccessSpecifierPublic)
	TMap<class FName, struct FEndDialogueGenerateSourceConstraint> Constraints;                                       // 0x06A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   FocusCharacterName;                                // 0x06F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCameraInCharacterNames;                   // 0x0700(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CameraInCharacterNames;                            // 0x0708(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EEndDialogueGenerateSourceShotType            ShotType;                                          // 0x0718(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NeedIdlingCharacterNames;                          // 0x0720(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bReverseShot;                                      // 0x0730(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_731[0x3];                                      // 0x0731(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FocusTargetName;                                   // 0x0734(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FocusTargetLocation;                               // 0x073C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FocusPairName;                                     // 0x0748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FocusPairLocation;                                 // 0x0750(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75C[0x4];                                      // 0x075C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueGenerateSourceShot) == 0x000008, "Wrong alignment on FEndDialogueGenerateSourceShot");
static_assert(sizeof(FEndDialogueGenerateSourceShot) == 0x000760, "Wrong size on FEndDialogueGenerateSourceShot");
static_assert(offsetof(FEndDialogueGenerateSourceShot, ShotAssetIndex) == 0x000000, "Member 'FEndDialogueGenerateSourceShot::ShotAssetIndex' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, ShotId) == 0x000004, "Member 'FEndDialogueGenerateSourceShot::ShotId' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, PreviousShotId) == 0x00000C, "Member 'FEndDialogueGenerateSourceShot::PreviousShotId' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, Messages) == 0x000018, "Member 'FEndDialogueGenerateSourceShot::Messages' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bLoopShot) == 0x000028, "Member 'FEndDialogueGenerateSourceShot::bLoopShot' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bEndShot) == 0x000029, "Member 'FEndDialogueGenerateSourceShot::bEndShot' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bEnableShotSkip) == 0x00002A, "Member 'FEndDialogueGenerateSourceShot::bEnableShotSkip' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bDisableShotSkipOnSkipCinema) == 0x00002B, "Member 'FEndDialogueGenerateSourceShot::bDisableShotSkipOnSkipCinema' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bUnbindCamera) == 0x00002C, "Member 'FEndDialogueGenerateSourceShot::bUnbindCamera' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bFixCharacterTransform) == 0x00002D, "Member 'FEndDialogueGenerateSourceShot::bFixCharacterTransform' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bFixCharacterLookAt) == 0x00002E, "Member 'FEndDialogueGenerateSourceShot::bFixCharacterLookAt' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bFixConstraint) == 0x00002F, "Member 'FEndDialogueGenerateSourceShot::bFixConstraint' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bDisableLookAt) == 0x000030, "Member 'FEndDialogueGenerateSourceShot::bDisableLookAt' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, CharacterLookAtType) == 0x000031, "Member 'FEndDialogueGenerateSourceShot::CharacterLookAtType' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bEnableCameraShake) == 0x000032, "Member 'FEndDialogueGenerateSourceShot::bEnableCameraShake' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, Camera) == 0x000038, "Member 'FEndDialogueGenerateSourceShot::Camera' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, Motion) == 0x000228, "Member 'FEndDialogueGenerateSourceShot::Motion' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, Light) == 0x000418, "Member 'FEndDialogueGenerateSourceShot::Light' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, ShotOverride) == 0x000608, "Member 'FEndDialogueGenerateSourceShot::ShotOverride' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, CharacterOverride) == 0x000658, "Member 'FEndDialogueGenerateSourceShot::CharacterOverride' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, Constraints) == 0x0006A8, "Member 'FEndDialogueGenerateSourceShot::Constraints' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, FocusCharacterName) == 0x0006F8, "Member 'FEndDialogueGenerateSourceShot::FocusCharacterName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bOverrideCameraInCharacterNames) == 0x000700, "Member 'FEndDialogueGenerateSourceShot::bOverrideCameraInCharacterNames' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, CameraInCharacterNames) == 0x000708, "Member 'FEndDialogueGenerateSourceShot::CameraInCharacterNames' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, ShotType) == 0x000718, "Member 'FEndDialogueGenerateSourceShot::ShotType' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, NeedIdlingCharacterNames) == 0x000720, "Member 'FEndDialogueGenerateSourceShot::NeedIdlingCharacterNames' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, bReverseShot) == 0x000730, "Member 'FEndDialogueGenerateSourceShot::bReverseShot' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, FocusTargetName) == 0x000734, "Member 'FEndDialogueGenerateSourceShot::FocusTargetName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, FocusTargetLocation) == 0x00073C, "Member 'FEndDialogueGenerateSourceShot::FocusTargetLocation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, FocusPairName) == 0x000748, "Member 'FEndDialogueGenerateSourceShot::FocusPairName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceShot, FocusPairLocation) == 0x000750, "Member 'FEndDialogueGenerateSourceShot::FocusPairLocation' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceFA
// 0x0028 (0x0028 - 0x0000)
struct FEndDialogueGenerateSourceFA final
{
public:
	class FName                                   BindName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionalActorName;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AEndSkeletalMeshActor>      SkeletalMeshClass;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTemporary;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Condition;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueGenerateSourceFA) == 0x000008, "Wrong alignment on FEndDialogueGenerateSourceFA");
static_assert(sizeof(FEndDialogueGenerateSourceFA) == 0x000028, "Wrong size on FEndDialogueGenerateSourceFA");
static_assert(offsetof(FEndDialogueGenerateSourceFA, BindName) == 0x000000, "Member 'FEndDialogueGenerateSourceFA::BindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceFA, OptionalActorName) == 0x000008, "Member 'FEndDialogueGenerateSourceFA::OptionalActorName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceFA, SkeletalMeshClass) == 0x000010, "Member 'FEndDialogueGenerateSourceFA::SkeletalMeshClass' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceFA, bTemporary) == 0x000018, "Member 'FEndDialogueGenerateSourceFA::bTemporary' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceFA, Condition) == 0x00001C, "Member 'FEndDialogueGenerateSourceFA::Condition' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceActorInitialOverride
// 0x0030 (0x0030 - 0x0000)
struct FEndDialogueGenerateSourceActorInitialOverride final
{
public:
	class FName                                   LoopMotionName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetTranslation;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Translation;                                       // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetRotation;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBind;                                             // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoFitGround;                                      // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWalkIn;                                           // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkInTime;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueGenerateSourceActorInitialOverride) == 0x000004, "Wrong alignment on FEndDialogueGenerateSourceActorInitialOverride");
static_assert(sizeof(FEndDialogueGenerateSourceActorInitialOverride) == 0x000030, "Wrong size on FEndDialogueGenerateSourceActorInitialOverride");
static_assert(offsetof(FEndDialogueGenerateSourceActorInitialOverride, LoopMotionName) == 0x000000, "Member 'FEndDialogueGenerateSourceActorInitialOverride::LoopMotionName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorInitialOverride, bSetTranslation) == 0x000008, "Member 'FEndDialogueGenerateSourceActorInitialOverride::bSetTranslation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorInitialOverride, Translation) == 0x00000C, "Member 'FEndDialogueGenerateSourceActorInitialOverride::Translation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorInitialOverride, bSetRotation) == 0x000018, "Member 'FEndDialogueGenerateSourceActorInitialOverride::bSetRotation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorInitialOverride, Rotation) == 0x00001C, "Member 'FEndDialogueGenerateSourceActorInitialOverride::Rotation' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorInitialOverride, bBind) == 0x000028, "Member 'FEndDialogueGenerateSourceActorInitialOverride::bBind' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorInitialOverride, bNoFitGround) == 0x000029, "Member 'FEndDialogueGenerateSourceActorInitialOverride::bNoFitGround' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorInitialOverride, bWalkIn) == 0x00002A, "Member 'FEndDialogueGenerateSourceActorInitialOverride::bWalkIn' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceActorInitialOverride, WalkInTime) == 0x00002C, "Member 'FEndDialogueGenerateSourceActorInitialOverride::WalkInTime' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSourceBGFA
// 0x0028 (0x0028 - 0x0000)
struct FEndDialogueGenerateSourceBGFA final
{
public:
	class FName                                   BindName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionalActorName;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AEndEnvironmentSkeletalMeshActor> SkeletalMeshClass;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTemporary;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Condition;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueGenerateSourceBGFA) == 0x000008, "Wrong alignment on FEndDialogueGenerateSourceBGFA");
static_assert(sizeof(FEndDialogueGenerateSourceBGFA) == 0x000028, "Wrong size on FEndDialogueGenerateSourceBGFA");
static_assert(offsetof(FEndDialogueGenerateSourceBGFA, BindName) == 0x000000, "Member 'FEndDialogueGenerateSourceBGFA::BindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceBGFA, OptionalActorName) == 0x000008, "Member 'FEndDialogueGenerateSourceBGFA::OptionalActorName' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceBGFA, SkeletalMeshClass) == 0x000010, "Member 'FEndDialogueGenerateSourceBGFA::SkeletalMeshClass' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceBGFA, bTemporary) == 0x000018, "Member 'FEndDialogueGenerateSourceBGFA::bTemporary' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSourceBGFA, Condition) == 0x00001C, "Member 'FEndDialogueGenerateSourceBGFA::Condition' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueGenerateSource
// 0x0178 (0x0178 - 0x0000)
struct FEndDialogueGenerateSource final
{
public:
	class FName                                   LocationId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndDialogueGenerateSourceCharacter> Characters;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEndDialogueGenerateSourceFA>   FAs;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEndDialogueGenerateSourceBGFA> BGFAs;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UEndDialogueGenerateSourcePositionPreset* PositionPreset;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndDialogueGenerateSourceShot> Shots;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUnbindEndShotCamera;                              // 0x0050(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndDialogueSequenceFirstShotCamera           FirstShotCamera;                                   // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndDialogueSequenceEndShotCamera             EndShotCamera;                                     // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseCamera;                                    // 0x0053(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionalLightCount;                                // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndDialogueBlueprintGeneratorBase> DefaultCameraGenerator;                            // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndDialogueBlueprintGeneratorBase> DefaultMotionGenerator;                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndDialogueBlueprintGeneratorBase> DefaultLightGenerator;                             // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FEndDialogueGenerateSourceActorInitialOverride> InitialOverride;                                   // 0x0070(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            MotionRootDirectoryAlias;                          // 0x00C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FName>                           MotionDirectories;                                 // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FEndDialogueGenerateSourceCharacterOverride> DefaultCharacterOverride;                          // 0x0120(0x0050)(Deprecated, NativeAccessSpecifierPublic)
	int32                                         NextGenerationRetryCount;                          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueGenerateSource) == 0x000008, "Wrong alignment on FEndDialogueGenerateSource");
static_assert(sizeof(FEndDialogueGenerateSource) == 0x000178, "Wrong size on FEndDialogueGenerateSource");
static_assert(offsetof(FEndDialogueGenerateSource, LocationId) == 0x000000, "Member 'FEndDialogueGenerateSource::LocationId' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, Characters) == 0x000008, "Member 'FEndDialogueGenerateSource::Characters' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, FAs) == 0x000018, "Member 'FEndDialogueGenerateSource::FAs' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, BGFAs) == 0x000028, "Member 'FEndDialogueGenerateSource::BGFAs' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, PositionPreset) == 0x000038, "Member 'FEndDialogueGenerateSource::PositionPreset' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, Shots) == 0x000040, "Member 'FEndDialogueGenerateSource::Shots' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, bUnbindEndShotCamera) == 0x000050, "Member 'FEndDialogueGenerateSource::bUnbindEndShotCamera' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, FirstShotCamera) == 0x000051, "Member 'FEndDialogueGenerateSource::FirstShotCamera' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, EndShotCamera) == 0x000052, "Member 'FEndDialogueGenerateSource::EndShotCamera' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, bReverseCamera) == 0x000053, "Member 'FEndDialogueGenerateSource::bReverseCamera' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, OptionalLightCount) == 0x000054, "Member 'FEndDialogueGenerateSource::OptionalLightCount' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, DefaultCameraGenerator) == 0x000058, "Member 'FEndDialogueGenerateSource::DefaultCameraGenerator' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, DefaultMotionGenerator) == 0x000060, "Member 'FEndDialogueGenerateSource::DefaultMotionGenerator' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, DefaultLightGenerator) == 0x000068, "Member 'FEndDialogueGenerateSource::DefaultLightGenerator' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, InitialOverride) == 0x000070, "Member 'FEndDialogueGenerateSource::InitialOverride' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, MotionRootDirectoryAlias) == 0x0000C0, "Member 'FEndDialogueGenerateSource::MotionRootDirectoryAlias' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, MotionDirectories) == 0x000110, "Member 'FEndDialogueGenerateSource::MotionDirectories' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, DefaultCharacterOverride) == 0x000120, "Member 'FEndDialogueGenerateSource::DefaultCharacterOverride' has a wrong offset!");
static_assert(offsetof(FEndDialogueGenerateSource, NextGenerationRetryCount) == 0x000170, "Member 'FEndDialogueGenerateSource::NextGenerationRetryCount' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionOverrideAnim
// 0x0030 (0x0170 - 0x0140)
struct FEndAIInterestActionOverrideAnim final : public FEndAIInterestAction
{
public:
	class FName                                   OverrideBehaviorMode;                              // 0x0138(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideAnimSetID;                                 // 0x0140(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x2C];                                     // 0x0144(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionOverrideAnim) == 0x000010, "Wrong alignment on FEndAIInterestActionOverrideAnim");
static_assert(sizeof(FEndAIInterestActionOverrideAnim) == 0x000170, "Wrong size on FEndAIInterestActionOverrideAnim");
static_assert(offsetof(FEndAIInterestActionOverrideAnim, OverrideBehaviorMode) == 0x000138, "Member 'FEndAIInterestActionOverrideAnim::OverrideBehaviorMode' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionOverrideAnim, OverrideAnimSetID) == 0x000140, "Member 'FEndAIInterestActionOverrideAnim::OverrideAnimSetID' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueBgmSectionTemplate
// 0x0018 (0x0038 - 0x0020)
struct FEndDialogueBgmSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	class FName                                   MusicName;                                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FadeStart;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FadeEnd;                                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCrossFade;                                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEvalOnSkip;                                       // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueBgmSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueBgmSectionTemplate");
static_assert(sizeof(FEndDialogueBgmSectionTemplate) == 0x000038, "Wrong size on FEndDialogueBgmSectionTemplate");
static_assert(offsetof(FEndDialogueBgmSectionTemplate, MusicName) == 0x000020, "Member 'FEndDialogueBgmSectionTemplate::MusicName' has a wrong offset!");
static_assert(offsetof(FEndDialogueBgmSectionTemplate, FadeStart) == 0x000028, "Member 'FEndDialogueBgmSectionTemplate::FadeStart' has a wrong offset!");
static_assert(offsetof(FEndDialogueBgmSectionTemplate, FadeEnd) == 0x00002C, "Member 'FEndDialogueBgmSectionTemplate::FadeEnd' has a wrong offset!");
static_assert(offsetof(FEndDialogueBgmSectionTemplate, bCrossFade) == 0x000030, "Member 'FEndDialogueBgmSectionTemplate::bCrossFade' has a wrong offset!");
static_assert(offsetof(FEndDialogueBgmSectionTemplate, bEvalOnSkip) == 0x000031, "Member 'FEndDialogueBgmSectionTemplate::bEvalOnSkip' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionPlayAnimation
// 0x0060 (0x01A0 - 0x0140)
struct FEndAIInterestActionPlayAnimation final : public FEndAIInterestAction
{
public:
	class FName                                   LevelName;                                         // 0x0138(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationName;                                     // 0x0140(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0148(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x57];                                     // 0x0149(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionPlayAnimation) == 0x000010, "Wrong alignment on FEndAIInterestActionPlayAnimation");
static_assert(sizeof(FEndAIInterestActionPlayAnimation) == 0x0001A0, "Wrong size on FEndAIInterestActionPlayAnimation");
static_assert(offsetof(FEndAIInterestActionPlayAnimation, LevelName) == 0x000138, "Member 'FEndAIInterestActionPlayAnimation::LevelName' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionPlayAnimation, AnimationName) == 0x000140, "Member 'FEndAIInterestActionPlayAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionPlayAnimation, IsLoop) == 0x000148, "Member 'FEndAIInterestActionPlayAnimation::IsLoop' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionPlayBeginLoopAnimation
// 0x0050 (0x0190 - 0x0140)
struct FEndAIInterestActionPlayBeginLoopAnimation final : public FEndAIInterestAction
{
public:
	class FName                                   BeginAnimationName;                                // 0x0138(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      BeginAnimation;                                    // 0x0140(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopAnimationName;                                 // 0x0148(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      LoopAnimation;                                     // 0x0150(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x38];                                     // 0x0158(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionPlayBeginLoopAnimation) == 0x000010, "Wrong alignment on FEndAIInterestActionPlayBeginLoopAnimation");
static_assert(sizeof(FEndAIInterestActionPlayBeginLoopAnimation) == 0x000190, "Wrong size on FEndAIInterestActionPlayBeginLoopAnimation");
static_assert(offsetof(FEndAIInterestActionPlayBeginLoopAnimation, BeginAnimationName) == 0x000138, "Member 'FEndAIInterestActionPlayBeginLoopAnimation::BeginAnimationName' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionPlayBeginLoopAnimation, BeginAnimation) == 0x000140, "Member 'FEndAIInterestActionPlayBeginLoopAnimation::BeginAnimation' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionPlayBeginLoopAnimation, LoopAnimationName) == 0x000148, "Member 'FEndAIInterestActionPlayBeginLoopAnimation::LoopAnimationName' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionPlayBeginLoopAnimation, LoopAnimation) == 0x000150, "Member 'FEndAIInterestActionPlayBeginLoopAnimation::LoopAnimation' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionPlayVoice
// 0x0010 (0x0150 - 0x0140)
struct FEndAIInterestActionPlayVoice final : public FEndAIInterestAction
{
public:
	uint8                                         Pad_138[0x18];                                     // 0x0138(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionPlayVoice) == 0x000010, "Wrong alignment on FEndAIInterestActionPlayVoice");
static_assert(sizeof(FEndAIInterestActionPlayVoice) == 0x000150, "Wrong size on FEndAIInterestActionPlayVoice");

// ScriptStruct EndGame.RigUnit_EndGetIKWeight
// 0x0008 (0x0070 - 0x0068)
struct FRigUnit_EndGetIKWeight final : public FRigUnitMutable
{
public:
	float                                         IKWeight;                                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndGetIKWeight) == 0x000008, "Wrong alignment on FRigUnit_EndGetIKWeight");
static_assert(sizeof(FRigUnit_EndGetIKWeight) == 0x000070, "Wrong size on FRigUnit_EndGetIKWeight");
static_assert(offsetof(FRigUnit_EndGetIKWeight, IKWeight) == 0x000068, "Member 'FRigUnit_EndGetIKWeight::IKWeight' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionStateGroup
// 0x0000 (0x0140 - 0x0140)
struct FEndAIInterestActionStateGroup final : public FEndAIInterestAction
{
};
static_assert(alignof(FEndAIInterestActionStateGroup) == 0x000010, "Wrong alignment on FEndAIInterestActionStateGroup");
static_assert(sizeof(FEndAIInterestActionStateGroup) == 0x000140, "Wrong size on FEndAIInterestActionStateGroup");

// ScriptStruct EndGame.EndAIInterestActionTurn
// 0x0030 (0x0170 - 0x0140)
struct FEndAIInterestActionTurn final : public FEndAIInterestAction
{
public:
	bool                                          bContinueTurn;                                     // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnTime;                                          // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0140(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x014C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x1C];                                     // 0x0154(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionTurn) == 0x000010, "Wrong alignment on FEndAIInterestActionTurn");
static_assert(sizeof(FEndAIInterestActionTurn) == 0x000170, "Wrong size on FEndAIInterestActionTurn");
static_assert(offsetof(FEndAIInterestActionTurn, bContinueTurn) == 0x000138, "Member 'FEndAIInterestActionTurn::bContinueTurn' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionTurn, TurnTime) == 0x00013C, "Member 'FEndAIInterestActionTurn::TurnTime' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionTurn, TargetLocation) == 0x000140, "Member 'FEndAIInterestActionTurn::TargetLocation' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionTurn, TargetActor) == 0x00014C, "Member 'FEndAIInterestActionTurn::TargetActor' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionWait
// 0x0000 (0x0140 - 0x0140)
struct FEndAIInterestActionWait final : public FEndAIInterestAction
{
public:
	float                                         WaitTime;                                          // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionWait) == 0x000010, "Wrong alignment on FEndAIInterestActionWait");
static_assert(sizeof(FEndAIInterestActionWait) == 0x000140, "Wrong size on FEndAIInterestActionWait");
static_assert(offsetof(FEndAIInterestActionWait, WaitTime) == 0x000138, "Member 'FEndAIInterestActionWait::WaitTime' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleRangedCurveParam
// 0x0088 (0x0088 - 0x0000)
struct FEndVehicleRangedCurveParam final
{
public:
	struct FRuntimeFloatCurve                     ValueCurve;                                        // 0x0000(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleRangedCurveParam) == 0x000008, "Wrong alignment on FEndVehicleRangedCurveParam");
static_assert(sizeof(FEndVehicleRangedCurveParam) == 0x000088, "Wrong size on FEndVehicleRangedCurveParam");
static_assert(offsetof(FEndVehicleRangedCurveParam, ValueCurve) == 0x000000, "Member 'FEndVehicleRangedCurveParam::ValueCurve' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestComponent
// 0x0150 (0x0150 - 0x0000)
struct FEndAIInterestComponent final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bActive;                                           // 0x0018(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowedUpdating;                                  // 0x0019(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleported;                                       // 0x001A(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIUpdatePriority                          UpdatePriority;                                    // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       DebugDrawIntentions;                               // 0x0020(0x0050)(Edit, Transient, NativeAccessSpecifierPublic)
	bool                                          DebugDrawBehaviors;                                // 0x0070(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xDF];                                      // 0x0071(0x00DF)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestComponent) == 0x000008, "Wrong alignment on FEndAIInterestComponent");
static_assert(sizeof(FEndAIInterestComponent) == 0x000150, "Wrong size on FEndAIInterestComponent");
static_assert(offsetof(FEndAIInterestComponent, bActive) == 0x000018, "Member 'FEndAIInterestComponent::bActive' has a wrong offset!");
static_assert(offsetof(FEndAIInterestComponent, bAllowedUpdating) == 0x000019, "Member 'FEndAIInterestComponent::bAllowedUpdating' has a wrong offset!");
static_assert(offsetof(FEndAIInterestComponent, bTeleported) == 0x00001A, "Member 'FEndAIInterestComponent::bTeleported' has a wrong offset!");
static_assert(offsetof(FEndAIInterestComponent, UpdatePriority) == 0x00001B, "Member 'FEndAIInterestComponent::UpdatePriority' has a wrong offset!");
static_assert(offsetof(FEndAIInterestComponent, DebugDrawIntentions) == 0x000020, "Member 'FEndAIInterestComponent::DebugDrawIntentions' has a wrong offset!");
static_assert(offsetof(FEndAIInterestComponent, DebugDrawBehaviors) == 0x000070, "Member 'FEndAIInterestComponent::DebugDrawBehaviors' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestPoint
// 0x0010 (0x0010 - 0x0000)
struct FEndAIInterestPoint final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterestRate;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterSense                                   Sense;                                             // 0x000C(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestPoint) == 0x000008, "Wrong alignment on FEndAIInterestPoint");
static_assert(sizeof(FEndAIInterestPoint) == 0x000010, "Wrong size on FEndAIInterestPoint");
static_assert(offsetof(FEndAIInterestPoint, Actor) == 0x000000, "Member 'FEndAIInterestPoint::Actor' has a wrong offset!");
static_assert(offsetof(FEndAIInterestPoint, InterestRate) == 0x000008, "Member 'FEndAIInterestPoint::InterestRate' has a wrong offset!");
static_assert(offsetof(FEndAIInterestPoint, Sense) == 0x00000C, "Member 'FEndAIInterestPoint::Sense' has a wrong offset!");

// ScriptStruct EndGame.EndAIMoveDefinitionConfrontTwoStageToActionInfo
// 0x0018 (0x0018 - 0x0000)
struct FEndAIMoveDefinitionConfrontTwoStageToActionInfo final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceMin;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceMax;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LotProbability;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIMoveDefinitionConfrontTwoStageToActionInfo) == 0x000008, "Wrong alignment on FEndAIMoveDefinitionConfrontTwoStageToActionInfo");
static_assert(sizeof(FEndAIMoveDefinitionConfrontTwoStageToActionInfo) == 0x000018, "Wrong size on FEndAIMoveDefinitionConfrontTwoStageToActionInfo");
static_assert(offsetof(FEndAIMoveDefinitionConfrontTwoStageToActionInfo, MoveDefinitionClass) == 0x000000, "Member 'FEndAIMoveDefinitionConfrontTwoStageToActionInfo::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(FEndAIMoveDefinitionConfrontTwoStageToActionInfo, DistanceMin) == 0x000008, "Member 'FEndAIMoveDefinitionConfrontTwoStageToActionInfo::DistanceMin' has a wrong offset!");
static_assert(offsetof(FEndAIMoveDefinitionConfrontTwoStageToActionInfo, DistanceMax) == 0x00000C, "Member 'FEndAIMoveDefinitionConfrontTwoStageToActionInfo::DistanceMax' has a wrong offset!");
static_assert(offsetof(FEndAIMoveDefinitionConfrontTwoStageToActionInfo, LotProbability) == 0x000010, "Member 'FEndAIMoveDefinitionConfrontTwoStageToActionInfo::LotProbability' has a wrong offset!");

// ScriptStruct EndGame.EndAIMoveDefinitionFastDashGotoParam
// 0x0018 (0x0018 - 0x0000)
struct FEndAIMoveDefinitionFastDashGotoParam final
{
public:
	EEndAIMoveDefinitionFastDashGotoType          GotoType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LayoutItemName;                                    // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GotoOffset;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIMoveDefinitionFastDashGotoParam) == 0x000004, "Wrong alignment on FEndAIMoveDefinitionFastDashGotoParam");
static_assert(sizeof(FEndAIMoveDefinitionFastDashGotoParam) == 0x000018, "Wrong size on FEndAIMoveDefinitionFastDashGotoParam");
static_assert(offsetof(FEndAIMoveDefinitionFastDashGotoParam, GotoType) == 0x000000, "Member 'FEndAIMoveDefinitionFastDashGotoParam::GotoType' has a wrong offset!");
static_assert(offsetof(FEndAIMoveDefinitionFastDashGotoParam, LayoutItemName) == 0x000004, "Member 'FEndAIMoveDefinitionFastDashGotoParam::LayoutItemName' has a wrong offset!");
static_assert(offsetof(FEndAIMoveDefinitionFastDashGotoParam, GotoOffset) == 0x00000C, "Member 'FEndAIMoveDefinitionFastDashGotoParam::GotoOffset' has a wrong offset!");

// ScriptStruct EndGame.EndAIMoveDefinitionSequenceInfo
// 0x0008 (0x0008 - 0x0000)
struct FEndAIMoveDefinitionSequenceInfo final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIMoveDefinitionSequenceInfo) == 0x000008, "Wrong alignment on FEndAIMoveDefinitionSequenceInfo");
static_assert(sizeof(FEndAIMoveDefinitionSequenceInfo) == 0x000008, "Wrong size on FEndAIMoveDefinitionSequenceInfo");
static_assert(offsetof(FEndAIMoveDefinitionSequenceInfo, MoveDefinitionClass) == 0x000000, "Member 'FEndAIMoveDefinitionSequenceInfo::MoveDefinitionClass' has a wrong offset!");

// ScriptStruct EndGame.EndAimRuntimeSetting
// 0x0100 (0x0100 - 0x0000)
struct alignas(0x08) FEndAimRuntimeSetting final
{
public:
	uint8                                         Pad_0[0x100];                                      // 0x0000(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAimRuntimeSetting) == 0x000008, "Wrong alignment on FEndAimRuntimeSetting");
static_assert(sizeof(FEndAimRuntimeSetting) == 0x000100, "Wrong size on FEndAimRuntimeSetting");

// ScriptStruct EndGame.EndAIInterestSensorParam
// 0x0014 (0x0014 - 0x0000)
struct FEndAIInterestSensorParam final
{
public:
	float                                         HearDistance;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibleAngleAtIdle;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibleDistanceAtIdle;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibleAngleAtMoving;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibleDistanceAtMoving;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIInterestSensorParam) == 0x000004, "Wrong alignment on FEndAIInterestSensorParam");
static_assert(sizeof(FEndAIInterestSensorParam) == 0x000014, "Wrong size on FEndAIInterestSensorParam");
static_assert(offsetof(FEndAIInterestSensorParam, HearDistance) == 0x000000, "Member 'FEndAIInterestSensorParam::HearDistance' has a wrong offset!");
static_assert(offsetof(FEndAIInterestSensorParam, VisibleAngleAtIdle) == 0x000004, "Member 'FEndAIInterestSensorParam::VisibleAngleAtIdle' has a wrong offset!");
static_assert(offsetof(FEndAIInterestSensorParam, VisibleDistanceAtIdle) == 0x000008, "Member 'FEndAIInterestSensorParam::VisibleDistanceAtIdle' has a wrong offset!");
static_assert(offsetof(FEndAIInterestSensorParam, VisibleAngleAtMoving) == 0x00000C, "Member 'FEndAIInterestSensorParam::VisibleAngleAtMoving' has a wrong offset!");
static_assert(offsetof(FEndAIInterestSensorParam, VisibleDistanceAtMoving) == 0x000010, "Member 'FEndAIInterestSensorParam::VisibleDistanceAtMoving' has a wrong offset!");

// ScriptStruct EndGame.EndAIDangerInfo
// 0x0048 (0x0048 - 0x0000)
struct FEndAIDangerInfo final
{
public:
	EEndAISensorDangerObjectType                  Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAISensorDangerObjectAttachType            AttachType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReferenceDamageSourceId;                           // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDodgeDirection;                                // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAISensorDangerObjectDodgeDirectionType    OverrideDodgeDirection;                            // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectedPlayer;                                   // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectedEnemy;                                    // 0x0037(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIDangerInfo) == 0x000004, "Wrong alignment on FEndAIDangerInfo");
static_assert(sizeof(FEndAIDangerInfo) == 0x000048, "Wrong size on FEndAIDangerInfo");
static_assert(offsetof(FEndAIDangerInfo, Type) == 0x000000, "Member 'FEndAIDangerInfo::Type' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, AttachType) == 0x000001, "Member 'FEndAIDangerInfo::AttachType' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, SocketName) == 0x000004, "Member 'FEndAIDangerInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, Location) == 0x00000C, "Member 'FEndAIDangerInfo::Location' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, Rotation) == 0x000018, "Member 'FEndAIDangerInfo::Rotation' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, Radius) == 0x000024, "Member 'FEndAIDangerInfo::Radius' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, Length) == 0x000028, "Member 'FEndAIDangerInfo::Length' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, ReferenceDamageSourceId) == 0x00002C, "Member 'FEndAIDangerInfo::ReferenceDamageSourceId' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, bUseDodgeDirection) == 0x000034, "Member 'FEndAIDangerInfo::bUseDodgeDirection' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, OverrideDodgeDirection) == 0x000035, "Member 'FEndAIDangerInfo::OverrideDodgeDirection' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, bAffectedPlayer) == 0x000036, "Member 'FEndAIDangerInfo::bAffectedPlayer' has a wrong offset!");
static_assert(offsetof(FEndAIDangerInfo, bAffectedEnemy) == 0x000037, "Member 'FEndAIDangerInfo::bAffectedEnemy' has a wrong offset!");

// ScriptStruct EndGame.EndAIActionPackTransOption
// 0x0002 (0x0002 - 0x0000)
struct FEndAIActionPackTransOption final
{
public:
	bool                                          bApply;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIActionPackTransOptionReleaseTiming      ReleaseTiming;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIActionPackTransOption) == 0x000001, "Wrong alignment on FEndAIActionPackTransOption");
static_assert(sizeof(FEndAIActionPackTransOption) == 0x000002, "Wrong size on FEndAIActionPackTransOption");
static_assert(offsetof(FEndAIActionPackTransOption, bApply) == 0x000000, "Member 'FEndAIActionPackTransOption::bApply' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransOption, ReleaseTiming) == 0x000001, "Member 'FEndAIActionPackTransOption::ReleaseTiming' has a wrong offset!");

// ScriptStruct EndGame.EndAIActionTransAttackInterval
// 0x000C (0x000C - 0x0000)
struct FEndAIActionTransAttackInterval final
{
public:
	EEndAIIntervalType                            IntervalType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefault;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalWidth;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIActionTransAttackInterval) == 0x000004, "Wrong alignment on FEndAIActionTransAttackInterval");
static_assert(sizeof(FEndAIActionTransAttackInterval) == 0x00000C, "Wrong size on FEndAIActionTransAttackInterval");
static_assert(offsetof(FEndAIActionTransAttackInterval, IntervalType) == 0x000000, "Member 'FEndAIActionTransAttackInterval::IntervalType' has a wrong offset!");
static_assert(offsetof(FEndAIActionTransAttackInterval, bDefault) == 0x000001, "Member 'FEndAIActionTransAttackInterval::bDefault' has a wrong offset!");
static_assert(offsetof(FEndAIActionTransAttackInterval, Interval) == 0x000004, "Member 'FEndAIActionTransAttackInterval::Interval' has a wrong offset!");
static_assert(offsetof(FEndAIActionTransAttackInterval, IntervalWidth) == 0x000008, "Member 'FEndAIActionTransAttackInterval::IntervalWidth' has a wrong offset!");

// ScriptStruct EndGame.EndAIActionPackTransInfo
// 0x0080 (0x0080 - 0x0000)
struct FEndAIActionPackTransInfo final
{
public:
	class FName                                   TransID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrimaryAnimPackName;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrimaryAnimPackIgnoreLowerPriority;                // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyTrans;                                      // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIStateParamBool                          bCanLookAt;                                        // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIStateParamBool                          bCanTurn;                                          // 0x001B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndAIActionTransAttackInterval> AttackIntervals;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   OverrideBattleCharaSpecId;                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SpecialStatusChangeIds;                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SpecialStateEffects;                               // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEndAIActionPackTransOption            DisableReaction;                                   // 0x0058(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndAIActionPackTransOption            DisableCapturablebySummon;                         // 0x005A(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndAIActionPackTransOption            Immortality;                                       // 0x005C(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndAIActionPackTransOption            DisableDamageHit;                                  // 0x005E(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndAIActionPackTransOption            DisableMoveOnlyNavMesh;                            // 0x0060(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndAIActionPackTransOption            DisableBGFAHit;                                    // 0x0062(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   BGFALevelName;                                     // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BGFAAccessorIds;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIActionPackTransInfo) == 0x000008, "Wrong alignment on FEndAIActionPackTransInfo");
static_assert(sizeof(FEndAIActionPackTransInfo) == 0x000080, "Wrong size on FEndAIActionPackTransInfo");
static_assert(offsetof(FEndAIActionPackTransInfo, TransID) == 0x000000, "Member 'FEndAIActionPackTransInfo::TransID' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, ActionDefinitionClass) == 0x000008, "Member 'FEndAIActionPackTransInfo::ActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, PrimaryAnimPackName) == 0x000010, "Member 'FEndAIActionPackTransInfo::PrimaryAnimPackName' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, PrimaryAnimPackIgnoreLowerPriority) == 0x000018, "Member 'FEndAIActionPackTransInfo::PrimaryAnimPackIgnoreLowerPriority' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, bNotifyTrans) == 0x000019, "Member 'FEndAIActionPackTransInfo::bNotifyTrans' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, bCanLookAt) == 0x00001A, "Member 'FEndAIActionPackTransInfo::bCanLookAt' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, bCanTurn) == 0x00001B, "Member 'FEndAIActionPackTransInfo::bCanTurn' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, AttackIntervals) == 0x000020, "Member 'FEndAIActionPackTransInfo::AttackIntervals' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, OverrideBattleCharaSpecId) == 0x000030, "Member 'FEndAIActionPackTransInfo::OverrideBattleCharaSpecId' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, SpecialStatusChangeIds) == 0x000038, "Member 'FEndAIActionPackTransInfo::SpecialStatusChangeIds' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, SpecialStateEffects) == 0x000048, "Member 'FEndAIActionPackTransInfo::SpecialStateEffects' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, DisableReaction) == 0x000058, "Member 'FEndAIActionPackTransInfo::DisableReaction' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, DisableCapturablebySummon) == 0x00005A, "Member 'FEndAIActionPackTransInfo::DisableCapturablebySummon' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, Immortality) == 0x00005C, "Member 'FEndAIActionPackTransInfo::Immortality' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, DisableDamageHit) == 0x00005E, "Member 'FEndAIActionPackTransInfo::DisableDamageHit' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, DisableMoveOnlyNavMesh) == 0x000060, "Member 'FEndAIActionPackTransInfo::DisableMoveOnlyNavMesh' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, DisableBGFAHit) == 0x000062, "Member 'FEndAIActionPackTransInfo::DisableBGFAHit' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, BGFALevelName) == 0x000064, "Member 'FEndAIActionPackTransInfo::BGFALevelName' has a wrong offset!");
static_assert(offsetof(FEndAIActionPackTransInfo, BGFAAccessorIds) == 0x000070, "Member 'FEndAIActionPackTransInfo::BGFAAccessorIds' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaVisibilitySectionTemplateBase
// 0x0090 (0x00C8 - 0x0038)
struct FEndCinemaVisibilitySectionTemplateBase : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneBoolChannel                 BoolCurve;                                         // 0x0038(0x0090)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEndCinemaVisibilitySectionTemplateBase) == 0x000008, "Wrong alignment on FEndCinemaVisibilitySectionTemplateBase");
static_assert(sizeof(FEndCinemaVisibilitySectionTemplateBase) == 0x0000C8, "Wrong size on FEndCinemaVisibilitySectionTemplateBase");
static_assert(offsetof(FEndCinemaVisibilitySectionTemplateBase, BoolCurve) == 0x000038, "Member 'FEndCinemaVisibilitySectionTemplateBase::BoolCurve' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaVisibilitySectionTemplate
// 0x0000 (0x00C8 - 0x00C8)
struct FEndCinemaVisibilitySectionTemplate final : public FEndCinemaVisibilitySectionTemplateBase
{
};
static_assert(alignof(FEndCinemaVisibilitySectionTemplate) == 0x000008, "Wrong alignment on FEndCinemaVisibilitySectionTemplate");
static_assert(sizeof(FEndCinemaVisibilitySectionTemplate) == 0x0000C8, "Wrong size on FEndCinemaVisibilitySectionTemplate");

// ScriptStruct EndGame.EndAnimActorDebugFlags
// 0x0003 (0x0003 - 0x0000)
struct FEndAnimActorDebugFlags final
{
public:
	bool                                          bPauseOnBeginCutScene;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseOnEndCutScene;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputAttachLogs;                                 // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimActorDebugFlags) == 0x000001, "Wrong alignment on FEndAnimActorDebugFlags");
static_assert(sizeof(FEndAnimActorDebugFlags) == 0x000003, "Wrong size on FEndAnimActorDebugFlags");
static_assert(offsetof(FEndAnimActorDebugFlags, bPauseOnBeginCutScene) == 0x000000, "Member 'FEndAnimActorDebugFlags::bPauseOnBeginCutScene' has a wrong offset!");
static_assert(offsetof(FEndAnimActorDebugFlags, bPauseOnEndCutScene) == 0x000001, "Member 'FEndAnimActorDebugFlags::bPauseOnEndCutScene' has a wrong offset!");
static_assert(offsetof(FEndAnimActorDebugFlags, bOutputAttachLogs) == 0x000002, "Member 'FEndAnimActorDebugFlags::bOutputAttachLogs' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaPropertyCurveParameters
// 0x0008 (0x0008 - 0x0000)
struct FEndCinemaPropertyCurveParameters final
{
public:
	class FName                                   TargetPropertyName;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCinemaPropertyCurveParameters) == 0x000004, "Wrong alignment on FEndCinemaPropertyCurveParameters");
static_assert(sizeof(FEndCinemaPropertyCurveParameters) == 0x000008, "Wrong size on FEndCinemaPropertyCurveParameters");
static_assert(offsetof(FEndCinemaPropertyCurveParameters, TargetPropertyName) == 0x000000, "Member 'FEndCinemaPropertyCurveParameters::TargetPropertyName' has a wrong offset!");

// ScriptStruct EndGame.WallPointData
// 0x0038 (0x0038 - 0x0000)
struct FWallPointData final
{
public:
	uint32                                        Index;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                pos;                                               // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32>                                neighborPointIndexes;                              // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0xC];                                       // 0x002C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWallPointData) == 0x000008, "Wrong alignment on FWallPointData");
static_assert(sizeof(FWallPointData) == 0x000038, "Wrong size on FWallPointData");
static_assert(offsetof(FWallPointData, Index) == 0x000000, "Member 'FWallPointData::Index' has a wrong offset!");
static_assert(offsetof(FWallPointData, pos) == 0x000004, "Member 'FWallPointData::pos' has a wrong offset!");
static_assert(offsetof(FWallPointData, neighborPointIndexes) == 0x000010, "Member 'FWallPointData::neighborPointIndexes' has a wrong offset!");
static_assert(offsetof(FWallPointData, Normal) == 0x000020, "Member 'FWallPointData::Normal' has a wrong offset!");

// ScriptStruct EndGame.WallPointInfo
// 0x0088 (0x0088 - 0x0000)
struct FWallPointInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWallPointData                         Data;                                              // 0x0020(0x0038)(NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ID;                                                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Normal[0x3];                                       // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWallPointInfo) == 0x000008, "Wrong alignment on FWallPointInfo");
static_assert(sizeof(FWallPointInfo) == 0x000088, "Wrong size on FWallPointInfo");
static_assert(offsetof(FWallPointInfo, Data) == 0x000020, "Member 'FWallPointInfo::Data' has a wrong offset!");
static_assert(offsetof(FWallPointInfo, Thickness) == 0x000058, "Member 'FWallPointInfo::Thickness' has a wrong offset!");
static_assert(offsetof(FWallPointInfo, ID) == 0x00005C, "Member 'FWallPointInfo::ID' has a wrong offset!");
static_assert(offsetof(FWallPointInfo, Normal) == 0x000060, "Member 'FWallPointInfo::Normal' has a wrong offset!");

// ScriptStruct EndGame.TriggerData
// 0x0010 (0x0010 - 0x0000)
struct FTriggerData final
{
public:
	EAnimalTriggerCondition                       TriggerCondition;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TriggerValue;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TriggerName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTriggerData) == 0x000004, "Wrong alignment on FTriggerData");
static_assert(sizeof(FTriggerData) == 0x000010, "Wrong size on FTriggerData");
static_assert(offsetof(FTriggerData, TriggerCondition) == 0x000000, "Member 'FTriggerData::TriggerCondition' has a wrong offset!");
static_assert(offsetof(FTriggerData, TriggerValue) == 0x000004, "Member 'FTriggerData::TriggerValue' has a wrong offset!");
static_assert(offsetof(FTriggerData, TriggerName) == 0x000008, "Member 'FTriggerData::TriggerName' has a wrong offset!");

// ScriptStruct EndGame.SpawnData
// 0x0020 (0x0020 - 0x0000)
struct FSpawnData final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BPorSpecName;                                      // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPointName;                                   // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIBPName;                                          // 0x0014(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimalRunAIState                          AIState;                                           // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnData) == 0x000004, "Wrong alignment on FSpawnData");
static_assert(sizeof(FSpawnData) == 0x000020, "Wrong size on FSpawnData");
static_assert(offsetof(FSpawnData, TeamType) == 0x000000, "Member 'FSpawnData::TeamType' has a wrong offset!");
static_assert(offsetof(FSpawnData, BPorSpecName) == 0x000004, "Member 'FSpawnData::BPorSpecName' has a wrong offset!");
static_assert(offsetof(FSpawnData, TargetPointName) == 0x00000C, "Member 'FSpawnData::TargetPointName' has a wrong offset!");
static_assert(offsetof(FSpawnData, AIBPName) == 0x000014, "Member 'FSpawnData::AIBPName' has a wrong offset!");
static_assert(offsetof(FSpawnData, AIState) == 0x00001C, "Member 'FSpawnData::AIState' has a wrong offset!");

// ScriptStruct EndGame.BallSpawnData
// 0x0030 (0x0030 - 0x0000)
struct FBallSpawnData final
{
public:
	class FName                                   BallBPName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBallSpawnConditionType                       ConditionType;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBallSpawnConditionData>        Conditions;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	ETeamType                                     TeamType;                                          // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetPointName;                                   // 0x0024(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBallSpawnData) == 0x000008, "Wrong alignment on FBallSpawnData");
static_assert(sizeof(FBallSpawnData) == 0x000030, "Wrong size on FBallSpawnData");
static_assert(offsetof(FBallSpawnData, BallBPName) == 0x000000, "Member 'FBallSpawnData::BallBPName' has a wrong offset!");
static_assert(offsetof(FBallSpawnData, ConditionType) == 0x000008, "Member 'FBallSpawnData::ConditionType' has a wrong offset!");
static_assert(offsetof(FBallSpawnData, Conditions) == 0x000010, "Member 'FBallSpawnData::Conditions' has a wrong offset!");
static_assert(offsetof(FBallSpawnData, TeamType) == 0x000020, "Member 'FBallSpawnData::TeamType' has a wrong offset!");
static_assert(offsetof(FBallSpawnData, TargetPointName) == 0x000024, "Member 'FBallSpawnData::TargetPointName' has a wrong offset!");
static_assert(offsetof(FBallSpawnData, Number) == 0x00002C, "Member 'FBallSpawnData::Number' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaSequenceMastershotDatum
// 0x0001 (0x0001 - 0x0000)
struct FEndCinemaSequenceMastershotDatum final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCinemaSequenceMastershotDatum) == 0x000001, "Wrong alignment on FEndCinemaSequenceMastershotDatum");
static_assert(sizeof(FEndCinemaSequenceMastershotDatum) == 0x000001, "Wrong size on FEndCinemaSequenceMastershotDatum");

// ScriptStruct EndGame.GoalData
// 0x0028 (0x0028 - 0x0000)
struct FGoalData final
{
public:
	ETeamType                                     GoalOwner;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATriggerBox*                            GoalBox;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GravityBox;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalScore;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GoalPointName;                                     // 0x001C(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGoalData) == 0x000008, "Wrong alignment on FGoalData");
static_assert(sizeof(FGoalData) == 0x000028, "Wrong size on FGoalData");
static_assert(offsetof(FGoalData, GoalOwner) == 0x000000, "Member 'FGoalData::GoalOwner' has a wrong offset!");
static_assert(offsetof(FGoalData, GoalBox) == 0x000008, "Member 'FGoalData::GoalBox' has a wrong offset!");
static_assert(offsetof(FGoalData, GravityBox) == 0x000010, "Member 'FGoalData::GravityBox' has a wrong offset!");
static_assert(offsetof(FGoalData, GoalScore) == 0x000018, "Member 'FGoalData::GoalScore' has a wrong offset!");
static_assert(offsetof(FGoalData, GoalPointName) == 0x00001C, "Member 'FGoalData::GoalPointName' has a wrong offset!");

// ScriptStruct EndGame.AnimalRefereeCondition
// 0x0018 (0x0018 - 0x0000)
struct FAnimalRefereeCondition final
{
public:
	class FName                                   ConditionName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimalRefereeType                            Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConditionValue;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SucceedStateTrigger;                               // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimalRefereeCondition) == 0x000004, "Wrong alignment on FAnimalRefereeCondition");
static_assert(sizeof(FAnimalRefereeCondition) == 0x000018, "Wrong size on FAnimalRefereeCondition");
static_assert(offsetof(FAnimalRefereeCondition, ConditionName) == 0x000000, "Member 'FAnimalRefereeCondition::ConditionName' has a wrong offset!");
static_assert(offsetof(FAnimalRefereeCondition, Type) == 0x000008, "Member 'FAnimalRefereeCondition::Type' has a wrong offset!");
static_assert(offsetof(FAnimalRefereeCondition, ConditionValue) == 0x00000C, "Member 'FAnimalRefereeCondition::ConditionValue' has a wrong offset!");
static_assert(offsetof(FAnimalRefereeCondition, SucceedStateTrigger) == 0x000010, "Member 'FAnimalRefereeCondition::SucceedStateTrigger' has a wrong offset!");

// ScriptStruct EndGame.EndAnimationSettingsReins
// 0x0010 (0x0010 - 0x0000)
struct FEndAnimationSettingsReins final
{
public:
	class FName                                   SettingName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetSocketName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimationSettingsReins) == 0x000004, "Wrong alignment on FEndAnimationSettingsReins");
static_assert(sizeof(FEndAnimationSettingsReins) == 0x000010, "Wrong size on FEndAnimationSettingsReins");
static_assert(offsetof(FEndAnimationSettingsReins, SettingName) == 0x000000, "Member 'FEndAnimationSettingsReins::SettingName' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsReins, TargetSocketName) == 0x000008, "Member 'FEndAnimationSettingsReins::TargetSocketName' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorAction
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEndBehaviorAction
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAction) == 0x000008, "Wrong alignment on FEndBehaviorAction");
static_assert(sizeof(FEndBehaviorAction) == 0x000018, "Wrong size on FEndBehaviorAction");

// ScriptStruct EndGame.EndBehaviorSequencePlayAction
// 0x02A0 (0x02B8 - 0x0018)
struct FEndBehaviorSequencePlayAction : public FEndBehaviorAction
{
public:
	uint8                                         Pad_18[0x2A0];                                     // 0x0018(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSequencePlayAction) == 0x000008, "Wrong alignment on FEndBehaviorSequencePlayAction");
static_assert(sizeof(FEndBehaviorSequencePlayAction) == 0x0002B8, "Wrong size on FEndBehaviorSequencePlayAction");

// ScriptStruct EndGame.EndBehaviorExtraAction
// 0x0148 (0x0400 - 0x02B8)
struct alignas(0x10) FEndBehaviorExtraAction : public FEndBehaviorSequencePlayAction
{
public:
	uint8                                         Pad_2B8[0x148];                                    // 0x02B8(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorExtraAction");
static_assert(sizeof(FEndBehaviorExtraAction) == 0x000400, "Wrong size on FEndBehaviorExtraAction");

// ScriptStruct EndGame.EndBehaviorStepTurnExtraAction
// 0x0060 (0x0460 - 0x0400)
struct FEndBehaviorStepTurnExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x60];                                     // 0x0400(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorStepTurnExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorStepTurnExtraAction");
static_assert(sizeof(FEndBehaviorStepTurnExtraAction) == 0x000460, "Wrong size on FEndBehaviorStepTurnExtraAction");

// ScriptStruct EndGame.EndAnimationSettingsPlannerEventCamera
// 0x0030 (0x0030 - 0x0000)
struct FEndAnimationSettingsPlannerEventCamera final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x0004(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Pitch;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Offsets;                                           // 0x0018(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	float                                         OffsetHeight;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimationSettingsPlannerEventCamera) == 0x000008, "Wrong alignment on FEndAnimationSettingsPlannerEventCamera");
static_assert(sizeof(FEndAnimationSettingsPlannerEventCamera) == 0x000030, "Wrong size on FEndAnimationSettingsPlannerEventCamera");
static_assert(offsetof(FEndAnimationSettingsPlannerEventCamera, BlendTime) == 0x000000, "Member 'FEndAnimationSettingsPlannerEventCamera::BlendTime' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsPlannerEventCamera, BlendOption) == 0x000004, "Member 'FEndAnimationSettingsPlannerEventCamera::BlendOption' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsPlannerEventCamera, Pitch) == 0x000008, "Member 'FEndAnimationSettingsPlannerEventCamera::Pitch' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsPlannerEventCamera, FOV) == 0x00000C, "Member 'FEndAnimationSettingsPlannerEventCamera::FOV' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsPlannerEventCamera, Distance) == 0x000010, "Member 'FEndAnimationSettingsPlannerEventCamera::Distance' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsPlannerEventCamera, Offsets) == 0x000018, "Member 'FEndAnimationSettingsPlannerEventCamera::Offsets' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsPlannerEventCamera, OffsetHeight) == 0x000028, "Member 'FEndAnimationSettingsPlannerEventCamera::OffsetHeight' has a wrong offset!");

// ScriptStruct EndGame.EndAnimationToroccoShakeSetting
// 0x003C (0x003C - 0x0000)
struct FEndAnimationToroccoShakeSetting final
{
public:
	bool                                          bEnableThisToroccoShake;                           // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ToroccoShakingSize;                                // 0x0004(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinToroccoShakingCadence;                          // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxToroccoShakingCadence;                          // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinToroccoShakingSustatinTime;                     // 0x0018(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxToroccoShakingSustatinTime;                     // 0x001C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x1C];                                      // 0x0020(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimationToroccoShakeSetting) == 0x000004, "Wrong alignment on FEndAnimationToroccoShakeSetting");
static_assert(sizeof(FEndAnimationToroccoShakeSetting) == 0x00003C, "Wrong size on FEndAnimationToroccoShakeSetting");
static_assert(offsetof(FEndAnimationToroccoShakeSetting, bEnableThisToroccoShake) == 0x000000, "Member 'FEndAnimationToroccoShakeSetting::bEnableThisToroccoShake' has a wrong offset!");
static_assert(offsetof(FEndAnimationToroccoShakeSetting, ToroccoShakingSize) == 0x000004, "Member 'FEndAnimationToroccoShakeSetting::ToroccoShakingSize' has a wrong offset!");
static_assert(offsetof(FEndAnimationToroccoShakeSetting, MinToroccoShakingCadence) == 0x000010, "Member 'FEndAnimationToroccoShakeSetting::MinToroccoShakingCadence' has a wrong offset!");
static_assert(offsetof(FEndAnimationToroccoShakeSetting, MaxToroccoShakingCadence) == 0x000014, "Member 'FEndAnimationToroccoShakeSetting::MaxToroccoShakingCadence' has a wrong offset!");
static_assert(offsetof(FEndAnimationToroccoShakeSetting, MinToroccoShakingSustatinTime) == 0x000018, "Member 'FEndAnimationToroccoShakeSetting::MinToroccoShakingSustatinTime' has a wrong offset!");
static_assert(offsetof(FEndAnimationToroccoShakeSetting, MaxToroccoShakingSustatinTime) == 0x00001C, "Member 'FEndAnimationToroccoShakeSetting::MaxToroccoShakingSustatinTime' has a wrong offset!");

// ScriptStruct EndGame.EndAnimationSettingsToroccoMiniGame
// 0x0080 (0x0080 - 0x0000)
struct FEndAnimationSettingsToroccoMiniGame final
{
public:
	bool                                          bEnableToroccoRoll;                                // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RollSensitivity;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollInterpSpeed;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRollAngle;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollBackToleranceAngle;                            // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollBackDuration;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollBackOvershootSize;                             // 0x0018(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollBackOvershootDuration;                         // 0x001C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableToroccoBonamikWind;                         // 0x0020(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBonamikWindPower;                               // 0x0024(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantBonamikWindPower;                          // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonamikWindPropotionalSpeed;                       // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableToroccoShaking;                             // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndAnimationToroccoShakeSetting> ToroccoShakeSettting;                              // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bEnableBoneControl;                                // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoneControlSensitivity;                            // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlInterpSpeed;                            // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlDelay;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlBarretMaxWeightShiftRight;              // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlBarretMaxWeightShiftLeft;               // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlYuffieMaxWeightShiftRight;              // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlYuffieMaxWeightShiftLeft;               // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlTifaMaxWeightShiftRight;                // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlTifaMaxWeightShiftLeft;                 // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlBarretMaxTilt;                          // 0x0070(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlYuffieMaxTilt;                          // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneControlTifaMaxTilt;                            // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimationSettingsToroccoMiniGame) == 0x000008, "Wrong alignment on FEndAnimationSettingsToroccoMiniGame");
static_assert(sizeof(FEndAnimationSettingsToroccoMiniGame) == 0x000080, "Wrong size on FEndAnimationSettingsToroccoMiniGame");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, bEnableToroccoRoll) == 0x000000, "Member 'FEndAnimationSettingsToroccoMiniGame::bEnableToroccoRoll' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, RollSensitivity) == 0x000004, "Member 'FEndAnimationSettingsToroccoMiniGame::RollSensitivity' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, RollInterpSpeed) == 0x000008, "Member 'FEndAnimationSettingsToroccoMiniGame::RollInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, MaxRollAngle) == 0x00000C, "Member 'FEndAnimationSettingsToroccoMiniGame::MaxRollAngle' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, RollBackToleranceAngle) == 0x000010, "Member 'FEndAnimationSettingsToroccoMiniGame::RollBackToleranceAngle' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, RollBackDuration) == 0x000014, "Member 'FEndAnimationSettingsToroccoMiniGame::RollBackDuration' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, RollBackOvershootSize) == 0x000018, "Member 'FEndAnimationSettingsToroccoMiniGame::RollBackOvershootSize' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, RollBackOvershootDuration) == 0x00001C, "Member 'FEndAnimationSettingsToroccoMiniGame::RollBackOvershootDuration' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, bEnableToroccoBonamikWind) == 0x000020, "Member 'FEndAnimationSettingsToroccoMiniGame::bEnableToroccoBonamikWind' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, MaxBonamikWindPower) == 0x000024, "Member 'FEndAnimationSettingsToroccoMiniGame::MaxBonamikWindPower' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, ConstantBonamikWindPower) == 0x000028, "Member 'FEndAnimationSettingsToroccoMiniGame::ConstantBonamikWindPower' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BonamikWindPropotionalSpeed) == 0x00002C, "Member 'FEndAnimationSettingsToroccoMiniGame::BonamikWindPropotionalSpeed' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, bEnableToroccoShaking) == 0x000030, "Member 'FEndAnimationSettingsToroccoMiniGame::bEnableToroccoShaking' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, ToroccoShakeSettting) == 0x000038, "Member 'FEndAnimationSettingsToroccoMiniGame::ToroccoShakeSettting' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, bEnableBoneControl) == 0x000048, "Member 'FEndAnimationSettingsToroccoMiniGame::bEnableBoneControl' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlSensitivity) == 0x00004C, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlSensitivity' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlInterpSpeed) == 0x000050, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlDelay) == 0x000054, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlDelay' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlBarretMaxWeightShiftRight) == 0x000058, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlBarretMaxWeightShiftRight' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlBarretMaxWeightShiftLeft) == 0x00005C, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlBarretMaxWeightShiftLeft' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlYuffieMaxWeightShiftRight) == 0x000060, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlYuffieMaxWeightShiftRight' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlYuffieMaxWeightShiftLeft) == 0x000064, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlYuffieMaxWeightShiftLeft' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlTifaMaxWeightShiftRight) == 0x000068, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlTifaMaxWeightShiftRight' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlTifaMaxWeightShiftLeft) == 0x00006C, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlTifaMaxWeightShiftLeft' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlBarretMaxTilt) == 0x000070, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlBarretMaxTilt' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlYuffieMaxTilt) == 0x000074, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlYuffieMaxTilt' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsToroccoMiniGame, BoneControlTifaMaxTilt) == 0x000078, "Member 'FEndAnimationSettingsToroccoMiniGame::BoneControlTifaMaxTilt' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFieldActionBase
// 0x0010 (0x0410 - 0x0400)
struct FEndBehaviorFieldActionBase : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x10];                                     // 0x0400(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldActionBase) == 0x000010, "Wrong alignment on FEndBehaviorFieldActionBase");
static_assert(sizeof(FEndBehaviorFieldActionBase) == 0x000410, "Wrong size on FEndBehaviorFieldActionBase");

// ScriptStruct EndGame.EndBehaviorNewFieldExtraAction
// 0x0070 (0x0480 - 0x0410)
struct FEndBehaviorNewFieldExtraAction : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x70];                                     // 0x0410(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorNewFieldExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorNewFieldExtraAction");
static_assert(sizeof(FEndBehaviorNewFieldExtraAction) == 0x000480, "Wrong size on FEndBehaviorNewFieldExtraAction");

// ScriptStruct EndGame.EndBehaviorFieldCableCartExtraAction
// 0x0170 (0x05F0 - 0x0480)
struct FEndBehaviorFieldCableCartExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x170];                                    // 0x0480(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldCableCartExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldCableCartExtraAction");
static_assert(sizeof(FEndBehaviorFieldCableCartExtraAction) == 0x0005F0, "Wrong size on FEndBehaviorFieldCableCartExtraAction");

// ScriptStruct EndGame.RigUnit_EndSaccade_DebugSettings
// 0x0040 (0x0040 - 0x0000)
struct FRigUnit_EndSaccade_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndSaccade_DebugSettings) == 0x000010, "Wrong alignment on FRigUnit_EndSaccade_DebugSettings");
static_assert(sizeof(FRigUnit_EndSaccade_DebugSettings) == 0x000040, "Wrong size on FRigUnit_EndSaccade_DebugSettings");
static_assert(offsetof(FRigUnit_EndSaccade_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndSaccade_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_DebugSettings, Scale) == 0x000004, "Member 'FRigUnit_EndSaccade_DebugSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_DebugSettings, WorldOffset) == 0x000010, "Member 'FRigUnit_EndSaccade_DebugSettings::WorldOffset' has a wrong offset!");

// ScriptStruct EndGame.EndAnimationSettingsAutoDisableLookAt
// 0x0018 (0x0018 - 0x0000)
struct FEndAnimationSettingsAutoDisableLookAt final
{
public:
	float                                         OverrideHeadBaseAngleThreshold;                    // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableAngleThreshold;                             // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableAngularVelocityThreshold;                   // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableAngularVelocityThresholdApplyAngleOffset;   // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputFrameOffset;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DuringFrameMin;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimationSettingsAutoDisableLookAt) == 0x000004, "Wrong alignment on FEndAnimationSettingsAutoDisableLookAt");
static_assert(sizeof(FEndAnimationSettingsAutoDisableLookAt) == 0x000018, "Wrong size on FEndAnimationSettingsAutoDisableLookAt");
static_assert(offsetof(FEndAnimationSettingsAutoDisableLookAt, OverrideHeadBaseAngleThreshold) == 0x000000, "Member 'FEndAnimationSettingsAutoDisableLookAt::OverrideHeadBaseAngleThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoDisableLookAt, DisableAngleThreshold) == 0x000004, "Member 'FEndAnimationSettingsAutoDisableLookAt::DisableAngleThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoDisableLookAt, DisableAngularVelocityThreshold) == 0x000008, "Member 'FEndAnimationSettingsAutoDisableLookAt::DisableAngularVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoDisableLookAt, DisableAngularVelocityThresholdApplyAngleOffset) == 0x00000C, "Member 'FEndAnimationSettingsAutoDisableLookAt::DisableAngularVelocityThresholdApplyAngleOffset' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoDisableLookAt, InputFrameOffset) == 0x000010, "Member 'FEndAnimationSettingsAutoDisableLookAt::InputFrameOffset' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoDisableLookAt, DuringFrameMin) == 0x000014, "Member 'FEndAnimationSettingsAutoDisableLookAt::DuringFrameMin' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSimpleFsmExtraAction
// 0x0290 (0x0690 - 0x0400)
struct FEndBehaviorSimpleFsmExtraAction : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x290];                                    // 0x0400(0x0290)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSimpleFsmExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSimpleFsmExtraAction");
static_assert(sizeof(FEndBehaviorSimpleFsmExtraAction) == 0x000690, "Wrong size on FEndBehaviorSimpleFsmExtraAction");

// ScriptStruct EndGame.EndBehaviorTalkExtraAction
// 0x0000 (0x0690 - 0x0690)
struct FEndBehaviorTalkExtraAction final : public FEndBehaviorSimpleFsmExtraAction
{
};
static_assert(alignof(FEndBehaviorTalkExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorTalkExtraAction");
static_assert(sizeof(FEndBehaviorTalkExtraAction) == 0x000690, "Wrong size on FEndBehaviorTalkExtraAction");

// ScriptStruct EndGame.EndAnimationSettingsAutoSaccade
// 0x0034 (0x0034 - 0x0000)
struct FEndAnimationSettingsAutoSaccade final
{
public:
	struct FVector2D                              EyeRotationRangeX;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EyeRotationRangeY;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveEyeRotationBySpineX;                       // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveEyeRotationBySpineY;                       // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusChangeAngle;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusClusteringAngle;                              // 0x001C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomMoveFrame;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomMoveRotationRangeX;                          // 0x0024(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomMoveRotationRangeY;                          // 0x002C(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimationSettingsAutoSaccade) == 0x000004, "Wrong alignment on FEndAnimationSettingsAutoSaccade");
static_assert(sizeof(FEndAnimationSettingsAutoSaccade) == 0x000034, "Wrong size on FEndAnimationSettingsAutoSaccade");
static_assert(offsetof(FEndAnimationSettingsAutoSaccade, EyeRotationRangeX) == 0x000000, "Member 'FEndAnimationSettingsAutoSaccade::EyeRotationRangeX' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoSaccade, EyeRotationRangeY) == 0x000008, "Member 'FEndAnimationSettingsAutoSaccade::EyeRotationRangeY' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoSaccade, AdditiveEyeRotationBySpineX) == 0x000010, "Member 'FEndAnimationSettingsAutoSaccade::AdditiveEyeRotationBySpineX' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoSaccade, AdditiveEyeRotationBySpineY) == 0x000014, "Member 'FEndAnimationSettingsAutoSaccade::AdditiveEyeRotationBySpineY' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoSaccade, FocusChangeAngle) == 0x000018, "Member 'FEndAnimationSettingsAutoSaccade::FocusChangeAngle' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoSaccade, FocusClusteringAngle) == 0x00001C, "Member 'FEndAnimationSettingsAutoSaccade::FocusClusteringAngle' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoSaccade, RandomMoveFrame) == 0x000020, "Member 'FEndAnimationSettingsAutoSaccade::RandomMoveFrame' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoSaccade, RandomMoveRotationRangeX) == 0x000024, "Member 'FEndAnimationSettingsAutoSaccade::RandomMoveRotationRangeX' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsAutoSaccade, RandomMoveRotationRangeY) == 0x00002C, "Member 'FEndAnimationSettingsAutoSaccade::RandomMoveRotationRangeY' has a wrong offset!");

// ScriptStruct EndGame.EndSweepCenterAdjustmentsCameraModule
// 0x0048 (0x0438 - 0x03F0)
struct FEndSweepCenterAdjustmentsCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x48];                                     // 0x03F0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSweepCenterAdjustmentsCameraModule) == 0x000008, "Wrong alignment on FEndSweepCenterAdjustmentsCameraModule");
static_assert(sizeof(FEndSweepCenterAdjustmentsCameraModule) == 0x000438, "Wrong size on FEndSweepCenterAdjustmentsCameraModule");

// ScriptStruct EndGame.EndAnimationSettingsMovementExpression
// 0x000C (0x000C - 0x0000)
struct FEndAnimationSettingsMovementExpression final
{
public:
	float                                         InputBaseAngleRateNeutral;                         // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputBaseAngleRateRatioBattle;                     // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultRotationInterpSpeed;                        // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimationSettingsMovementExpression) == 0x000004, "Wrong alignment on FEndAnimationSettingsMovementExpression");
static_assert(sizeof(FEndAnimationSettingsMovementExpression) == 0x00000C, "Wrong size on FEndAnimationSettingsMovementExpression");
static_assert(offsetof(FEndAnimationSettingsMovementExpression, InputBaseAngleRateNeutral) == 0x000000, "Member 'FEndAnimationSettingsMovementExpression::InputBaseAngleRateNeutral' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsMovementExpression, InputBaseAngleRateRatioBattle) == 0x000004, "Member 'FEndAnimationSettingsMovementExpression::InputBaseAngleRateRatioBattle' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsMovementExpression, DefaultRotationInterpSpeed) == 0x000008, "Member 'FEndAnimationSettingsMovementExpression::DefaultRotationInterpSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSpiderMoveExtraAction
// 0x0F20 (0x13A0 - 0x0480)
struct FEndBehaviorSpiderMoveExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0xF20];                                    // 0x0480(0x0F20)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSpiderMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSpiderMoveExtraAction");
static_assert(sizeof(FEndBehaviorSpiderMoveExtraAction) == 0x0013A0, "Wrong size on FEndBehaviorSpiderMoveExtraAction");

// ScriptStruct EndGame.EndAnimationSettingsContact
// 0x0010 (0x0010 - 0x0000)
struct FEndAnimationSettingsContact final
{
public:
	float                                         NoInputCancelTimeInWalk;                           // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoInputCancelTimeInRun;                            // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoInputRetryCountMax;                              // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SameCharacterRetryInterval;                        // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimationSettingsContact) == 0x000004, "Wrong alignment on FEndAnimationSettingsContact");
static_assert(sizeof(FEndAnimationSettingsContact) == 0x000010, "Wrong size on FEndAnimationSettingsContact");
static_assert(offsetof(FEndAnimationSettingsContact, NoInputCancelTimeInWalk) == 0x000000, "Member 'FEndAnimationSettingsContact::NoInputCancelTimeInWalk' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsContact, NoInputCancelTimeInRun) == 0x000004, "Member 'FEndAnimationSettingsContact::NoInputCancelTimeInRun' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsContact, NoInputRetryCountMax) == 0x000008, "Member 'FEndAnimationSettingsContact::NoInputRetryCountMax' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsContact, SameCharacterRetryInterval) == 0x00000C, "Member 'FEndAnimationSettingsContact::SameCharacterRetryInterval' has a wrong offset!");

// ScriptStruct EndGame.EndAnimationSettingsBattle
// 0x0004 (0x0004 - 0x0000)
struct FEndAnimationSettingsBattle final
{
public:
	float                                         DropWeaponVelocityBias;                            // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimationSettingsBattle) == 0x000004, "Wrong alignment on FEndAnimationSettingsBattle");
static_assert(sizeof(FEndAnimationSettingsBattle) == 0x000004, "Wrong size on FEndAnimationSettingsBattle");
static_assert(offsetof(FEndAnimationSettingsBattle, DropWeaponVelocityBias) == 0x000000, "Member 'FEndAnimationSettingsBattle::DropWeaponVelocityBias' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFieldActionCustomExtraAction
// 0x04A0 (0x08B0 - 0x0410)
struct FEndBehaviorFieldActionCustomExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x4A0];                                    // 0x0410(0x04A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldActionCustomExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldActionCustomExtraAction");
static_assert(sizeof(FEndBehaviorFieldActionCustomExtraAction) == 0x0008B0, "Wrong size on FEndBehaviorFieldActionCustomExtraAction");

// ScriptStruct EndGame.EndAnimationSettingsLaunch
// 0x0014 (0x0014 - 0x0000)
struct FEndAnimationSettingsLaunch final
{
public:
	float                                         LandAnimTimer;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WakeUpMinTime;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WakeUpCrashLandingIKTime;                          // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchPowerReduction;                              // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchRagdollAsLandingTime;                        // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimationSettingsLaunch) == 0x000004, "Wrong alignment on FEndAnimationSettingsLaunch");
static_assert(sizeof(FEndAnimationSettingsLaunch) == 0x000014, "Wrong size on FEndAnimationSettingsLaunch");
static_assert(offsetof(FEndAnimationSettingsLaunch, LandAnimTimer) == 0x000000, "Member 'FEndAnimationSettingsLaunch::LandAnimTimer' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsLaunch, WakeUpMinTime) == 0x000004, "Member 'FEndAnimationSettingsLaunch::WakeUpMinTime' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsLaunch, WakeUpCrashLandingIKTime) == 0x000008, "Member 'FEndAnimationSettingsLaunch::WakeUpCrashLandingIKTime' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsLaunch, LaunchPowerReduction) == 0x00000C, "Member 'FEndAnimationSettingsLaunch::LaunchPowerReduction' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsLaunch, LaunchRagdollAsLandingTime) == 0x000010, "Member 'FEndAnimationSettingsLaunch::LaunchRagdollAsLandingTime' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleMovementInRestrictedAreaParam
// 0x0024 (0x0024 - 0x0000)
struct FEndWheeledVehicleMovementInRestrictedAreaParam final
{
public:
	struct FFloatInterval                         CheckLocationOffsetPerSpeed;                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSteeringAngle;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitNormalLength;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLimitSteeringDistance;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginForceSteeringTime;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedInArea;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLimitSpeedDistance;                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginForceSpeedTime;                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleMovementInRestrictedAreaParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleMovementInRestrictedAreaParam");
static_assert(sizeof(FEndWheeledVehicleMovementInRestrictedAreaParam) == 0x000024, "Wrong size on FEndWheeledVehicleMovementInRestrictedAreaParam");
static_assert(offsetof(FEndWheeledVehicleMovementInRestrictedAreaParam, CheckLocationOffsetPerSpeed) == 0x000000, "Member 'FEndWheeledVehicleMovementInRestrictedAreaParam::CheckLocationOffsetPerSpeed' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleMovementInRestrictedAreaParam, LimitSteeringAngle) == 0x000008, "Member 'FEndWheeledVehicleMovementInRestrictedAreaParam::LimitSteeringAngle' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleMovementInRestrictedAreaParam, LimitNormalLength) == 0x00000C, "Member 'FEndWheeledVehicleMovementInRestrictedAreaParam::LimitNormalLength' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleMovementInRestrictedAreaParam, MaxLimitSteeringDistance) == 0x000010, "Member 'FEndWheeledVehicleMovementInRestrictedAreaParam::MaxLimitSteeringDistance' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleMovementInRestrictedAreaParam, BeginForceSteeringTime) == 0x000014, "Member 'FEndWheeledVehicleMovementInRestrictedAreaParam::BeginForceSteeringTime' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleMovementInRestrictedAreaParam, MaxSpeedInArea) == 0x000018, "Member 'FEndWheeledVehicleMovementInRestrictedAreaParam::MaxSpeedInArea' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleMovementInRestrictedAreaParam, MaxLimitSpeedDistance) == 0x00001C, "Member 'FEndWheeledVehicleMovementInRestrictedAreaParam::MaxLimitSpeedDistance' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleMovementInRestrictedAreaParam, BeginForceSpeedTime) == 0x000020, "Member 'FEndWheeledVehicleMovementInRestrictedAreaParam::BeginForceSpeedTime' has a wrong offset!");

// ScriptStruct EndGame.EndAnimationSettingsFall
// 0x000C (0x000C - 0x0000)
struct FEndAnimationSettingsFall final
{
public:
	float                                         DashLandingBlendInTime;                            // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashLandingBlendOutTime;                           // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashLandingRootMotionScale;                        // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimationSettingsFall) == 0x000004, "Wrong alignment on FEndAnimationSettingsFall");
static_assert(sizeof(FEndAnimationSettingsFall) == 0x00000C, "Wrong size on FEndAnimationSettingsFall");
static_assert(offsetof(FEndAnimationSettingsFall, DashLandingBlendInTime) == 0x000000, "Member 'FEndAnimationSettingsFall::DashLandingBlendInTime' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsFall, DashLandingBlendOutTime) == 0x000004, "Member 'FEndAnimationSettingsFall::DashLandingBlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsFall, DashLandingRootMotionScale) == 0x000008, "Member 'FEndAnimationSettingsFall::DashLandingRootMotionScale' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFieldSplineMoveExtraAction
// 0x0840 (0x0CC0 - 0x0480)
struct FEndBehaviorFieldSplineMoveExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x840];                                    // 0x0480(0x0840)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldSplineMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldSplineMoveExtraAction");
static_assert(sizeof(FEndBehaviorFieldSplineMoveExtraAction) == 0x000CC0, "Wrong size on FEndBehaviorFieldSplineMoveExtraAction");

// ScriptStruct EndGame.EndAnimationSettingsBlend
// 0x0008 (0x0008 - 0x0000)
struct FEndAnimationSettingsBlend final
{
public:
	float                                         FieldAndBattleBehaviorActionDefaultBlendTime;      // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventBehaviorActionDefaultBlendTime;               // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimationSettingsBlend) == 0x000004, "Wrong alignment on FEndAnimationSettingsBlend");
static_assert(sizeof(FEndAnimationSettingsBlend) == 0x000008, "Wrong size on FEndAnimationSettingsBlend");
static_assert(offsetof(FEndAnimationSettingsBlend, FieldAndBattleBehaviorActionDefaultBlendTime) == 0x000000, "Member 'FEndAnimationSettingsBlend::FieldAndBattleBehaviorActionDefaultBlendTime' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsBlend, EventBehaviorActionDefaultBlendTime) == 0x000004, "Member 'FEndAnimationSettingsBlend::EventBehaviorActionDefaultBlendTime' has a wrong offset!");

// ScriptStruct EndGame.EndAnimationSettingsInput
// 0x006C (0x006C - 0x0000)
struct FEndAnimationSettingsInput final
{
public:
	float                                         IdleToWalkInputThreshold;                          // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkToRunInputThreshold;                           // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighWalkMovementInputValue;                        // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JogMovementInputValue;                             // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunMovementInputValue;                             // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashMovementInputValue;                            // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputDurationThreshold;                            // 0x0018(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighSpeedInterpWalkRunInputTime;                   // 0x001C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighSpeedInterpWalkRunBlendInputSpeedBias;         // 0x0020(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInputSpeedInterpSpeedUpper;                   // 0x0024(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInputSpeedInterpSpeedLower;                   // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInputSpeedInterpSpeedUpperAI;                 // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInputSpeedInterpSpeedLowerAI;                 // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInputDirectionInterpSpeed;                    // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelTurnInputSizeThreshold;                       // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelTurnInputAngleThreshold;                      // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelTurnInputTimeMax;                             // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationRateInterpSpeed;                           // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceZeroSetAccelStartRotationRateInputAngleThreshold; // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelStartCancelTurnTimeThreshold;                 // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeWalkRestrictionAngleThreshold;                // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction90_MaxThreshold_0;                        // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction90_MaxThreshold_90;                       // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction45_MaxThreshold_0;                        // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction45_MaxThreshold_45;                       // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction45_MaxThreshold_90;                       // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction45_MaxThreshold_135;                      // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimationSettingsInput) == 0x000004, "Wrong alignment on FEndAnimationSettingsInput");
static_assert(sizeof(FEndAnimationSettingsInput) == 0x00006C, "Wrong size on FEndAnimationSettingsInput");
static_assert(offsetof(FEndAnimationSettingsInput, IdleToWalkInputThreshold) == 0x000000, "Member 'FEndAnimationSettingsInput::IdleToWalkInputThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, WalkToRunInputThreshold) == 0x000004, "Member 'FEndAnimationSettingsInput::WalkToRunInputThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, HighWalkMovementInputValue) == 0x000008, "Member 'FEndAnimationSettingsInput::HighWalkMovementInputValue' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, JogMovementInputValue) == 0x00000C, "Member 'FEndAnimationSettingsInput::JogMovementInputValue' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, RunMovementInputValue) == 0x000010, "Member 'FEndAnimationSettingsInput::RunMovementInputValue' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, DashMovementInputValue) == 0x000014, "Member 'FEndAnimationSettingsInput::DashMovementInputValue' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, InputDurationThreshold) == 0x000018, "Member 'FEndAnimationSettingsInput::InputDurationThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, HighSpeedInterpWalkRunInputTime) == 0x00001C, "Member 'FEndAnimationSettingsInput::HighSpeedInterpWalkRunInputTime' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, HighSpeedInterpWalkRunBlendInputSpeedBias) == 0x000020, "Member 'FEndAnimationSettingsInput::HighSpeedInterpWalkRunBlendInputSpeedBias' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, BlendInputSpeedInterpSpeedUpper) == 0x000024, "Member 'FEndAnimationSettingsInput::BlendInputSpeedInterpSpeedUpper' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, BlendInputSpeedInterpSpeedLower) == 0x000028, "Member 'FEndAnimationSettingsInput::BlendInputSpeedInterpSpeedLower' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, BlendInputSpeedInterpSpeedUpperAI) == 0x00002C, "Member 'FEndAnimationSettingsInput::BlendInputSpeedInterpSpeedUpperAI' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, BlendInputSpeedInterpSpeedLowerAI) == 0x000030, "Member 'FEndAnimationSettingsInput::BlendInputSpeedInterpSpeedLowerAI' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, BlendInputDirectionInterpSpeed) == 0x000034, "Member 'FEndAnimationSettingsInput::BlendInputDirectionInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, AccelTurnInputSizeThreshold) == 0x000038, "Member 'FEndAnimationSettingsInput::AccelTurnInputSizeThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, AccelTurnInputAngleThreshold) == 0x00003C, "Member 'FEndAnimationSettingsInput::AccelTurnInputAngleThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, AccelTurnInputTimeMax) == 0x000040, "Member 'FEndAnimationSettingsInput::AccelTurnInputTimeMax' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, RotationRateInterpSpeed) == 0x000044, "Member 'FEndAnimationSettingsInput::RotationRateInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, ForceZeroSetAccelStartRotationRateInputAngleThreshold) == 0x000048, "Member 'FEndAnimationSettingsInput::ForceZeroSetAccelStartRotationRateInputAngleThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, AccelStartCancelTurnTimeThreshold) == 0x00004C, "Member 'FEndAnimationSettingsInput::AccelStartCancelTurnTimeThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, SlopeWalkRestrictionAngleThreshold) == 0x000050, "Member 'FEndAnimationSettingsInput::SlopeWalkRestrictionAngleThreshold' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, Direction90_MaxThreshold_0) == 0x000054, "Member 'FEndAnimationSettingsInput::Direction90_MaxThreshold_0' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, Direction90_MaxThreshold_90) == 0x000058, "Member 'FEndAnimationSettingsInput::Direction90_MaxThreshold_90' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, Direction45_MaxThreshold_0) == 0x00005C, "Member 'FEndAnimationSettingsInput::Direction45_MaxThreshold_0' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, Direction45_MaxThreshold_45) == 0x000060, "Member 'FEndAnimationSettingsInput::Direction45_MaxThreshold_45' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, Direction45_MaxThreshold_90) == 0x000064, "Member 'FEndAnimationSettingsInput::Direction45_MaxThreshold_90' has a wrong offset!");
static_assert(offsetof(FEndAnimationSettingsInput, Direction45_MaxThreshold_135) == 0x000068, "Member 'FEndAnimationSettingsInput::Direction45_MaxThreshold_135' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFieldCatsithRollingExtraAction
// 0x02D0 (0x0750 - 0x0480)
struct FEndBehaviorFieldCatsithRollingExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x2D0];                                    // 0x0480(0x02D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldCatsithRollingExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldCatsithRollingExtraAction");
static_assert(sizeof(FEndBehaviorFieldCatsithRollingExtraAction) == 0x000750, "Wrong size on FEndBehaviorFieldCatsithRollingExtraAction");

// ScriptStruct EndGame.EndAnimCharacterDebugFlags
// 0x0015 (0x0015 - 0x0000)
struct FEndAnimCharacterDebugFlags final
{
public:
	bool                                          bOutputDetailLogs;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeMovement;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x1];                                        // 0x0002(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bVisualizeLookAt;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeSaccade;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeAim;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeSwordExpression;                         // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvaluateLookAtRequestedPose;                      // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvaluateLookAtPrimaryPose;                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvaluateLookAtSecondaryPose;                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDumpLookAtRevaluation;                            // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableBlink;                                     // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableEmotion;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableAutoSaccade;                               // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableLookAtBlend;                               // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCharacterMovementExpression;               // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableFootIK;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeFootIK;                                  // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableHandIK;                                    // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeHandIK;                                  // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeJump;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimCharacterDebugFlags) == 0x000001, "Wrong alignment on FEndAnimCharacterDebugFlags");
static_assert(sizeof(FEndAnimCharacterDebugFlags) == 0x000015, "Wrong size on FEndAnimCharacterDebugFlags");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bOutputDetailLogs) == 0x000000, "Member 'FEndAnimCharacterDebugFlags::bOutputDetailLogs' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bVisualizeMovement) == 0x000001, "Member 'FEndAnimCharacterDebugFlags::bVisualizeMovement' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bVisualizeLookAt) == 0x000003, "Member 'FEndAnimCharacterDebugFlags::bVisualizeLookAt' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bVisualizeSaccade) == 0x000004, "Member 'FEndAnimCharacterDebugFlags::bVisualizeSaccade' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bVisualizeAim) == 0x000005, "Member 'FEndAnimCharacterDebugFlags::bVisualizeAim' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bVisualizeSwordExpression) == 0x000006, "Member 'FEndAnimCharacterDebugFlags::bVisualizeSwordExpression' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bEvaluateLookAtRequestedPose) == 0x000007, "Member 'FEndAnimCharacterDebugFlags::bEvaluateLookAtRequestedPose' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bEvaluateLookAtPrimaryPose) == 0x000008, "Member 'FEndAnimCharacterDebugFlags::bEvaluateLookAtPrimaryPose' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bEvaluateLookAtSecondaryPose) == 0x000009, "Member 'FEndAnimCharacterDebugFlags::bEvaluateLookAtSecondaryPose' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bDumpLookAtRevaluation) == 0x00000A, "Member 'FEndAnimCharacterDebugFlags::bDumpLookAtRevaluation' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bDisableBlink) == 0x00000B, "Member 'FEndAnimCharacterDebugFlags::bDisableBlink' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bDisableEmotion) == 0x00000C, "Member 'FEndAnimCharacterDebugFlags::bDisableEmotion' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bDisableAutoSaccade) == 0x00000D, "Member 'FEndAnimCharacterDebugFlags::bDisableAutoSaccade' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bDisableLookAtBlend) == 0x00000E, "Member 'FEndAnimCharacterDebugFlags::bDisableLookAtBlend' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bDisableCharacterMovementExpression) == 0x00000F, "Member 'FEndAnimCharacterDebugFlags::bDisableCharacterMovementExpression' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bDisableFootIK) == 0x000010, "Member 'FEndAnimCharacterDebugFlags::bDisableFootIK' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bVisualizeFootIK) == 0x000011, "Member 'FEndAnimCharacterDebugFlags::bVisualizeFootIK' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bDisableHandIK) == 0x000012, "Member 'FEndAnimCharacterDebugFlags::bDisableHandIK' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bVisualizeHandIK) == 0x000013, "Member 'FEndAnimCharacterDebugFlags::bVisualizeHandIK' has a wrong offset!");
static_assert(offsetof(FEndAnimCharacterDebugFlags, bVisualizeJump) == 0x000014, "Member 'FEndAnimCharacterDebugFlags::bVisualizeJump' has a wrong offset!");

// ScriptStruct EndGame.EndAnimInput
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FEndAnimInput final
{
public:
	bool                                          bPlayerControlled;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMoveInput;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTurnInput;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedTurnInput;                                   // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDashInput;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStrafingInput;                              // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlying;                                           // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFalling;                                          // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwimming;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlaveAction;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveInput;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveInputSize;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveInputDirection;                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveInputDuration;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TurnInput;                                         // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnInputDirection;                                // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelInputSize;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimInput) == 0x000010, "Wrong alignment on FEndAnimInput");
static_assert(sizeof(FEndAnimInput) == 0x000050, "Wrong size on FEndAnimInput");
static_assert(offsetof(FEndAnimInput, bPlayerControlled) == 0x000000, "Member 'FEndAnimInput::bPlayerControlled' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, bEnableMoveInput) == 0x000001, "Member 'FEndAnimInput::bEnableMoveInput' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, bEnableTurnInput) == 0x000002, "Member 'FEndAnimInput::bEnableTurnInput' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, bFixedTurnInput) == 0x000003, "Member 'FEndAnimInput::bFixedTurnInput' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, bEnableDashInput) == 0x000004, "Member 'FEndAnimInput::bEnableDashInput' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, bEnableStrafingInput) == 0x000005, "Member 'FEndAnimInput::bEnableStrafingInput' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, bFlying) == 0x000006, "Member 'FEndAnimInput::bFlying' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, bFalling) == 0x000007, "Member 'FEndAnimInput::bFalling' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, bSwimming) == 0x000008, "Member 'FEndAnimInput::bSwimming' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, bSlaveAction) == 0x000009, "Member 'FEndAnimInput::bSlaveAction' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, MoveInput) == 0x00000C, "Member 'FEndAnimInput::MoveInput' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, MoveInputSize) == 0x000018, "Member 'FEndAnimInput::MoveInputSize' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, MoveInputDirection) == 0x00001C, "Member 'FEndAnimInput::MoveInputDirection' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, MoveInputDuration) == 0x000020, "Member 'FEndAnimInput::MoveInputDuration' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, TurnInput) == 0x000024, "Member 'FEndAnimInput::TurnInput' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, TurnInputDirection) == 0x000030, "Member 'FEndAnimInput::TurnInputDirection' has a wrong offset!");
static_assert(offsetof(FEndAnimInput, AccelInputSize) == 0x000034, "Member 'FEndAnimInput::AccelInputSize' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFaceGuardExtraAction
// 0x0070 (0x0470 - 0x0400)
struct FEndBehaviorFaceGuardExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x70];                                     // 0x0400(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFaceGuardExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFaceGuardExtraAction");
static_assert(sizeof(FEndBehaviorFaceGuardExtraAction) == 0x000470, "Wrong size on FEndBehaviorFaceGuardExtraAction");

// ScriptStruct EndGame.EndAnimNotifyBattleDamageRandomParameter
// 0x0018 (0x0018 - 0x0000)
struct FEndAnimNotifyBattleDamageRandomParameter final
{
public:
	uint8                                         Probability;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EEndAnimNotifyBattleDamageRandomProbabilityEffect ProbabilityEffect;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DamageSourceIDs;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimNotifyBattleDamageRandomParameter) == 0x000008, "Wrong alignment on FEndAnimNotifyBattleDamageRandomParameter");
static_assert(sizeof(FEndAnimNotifyBattleDamageRandomParameter) == 0x000018, "Wrong size on FEndAnimNotifyBattleDamageRandomParameter");
static_assert(offsetof(FEndAnimNotifyBattleDamageRandomParameter, Probability) == 0x000000, "Member 'FEndAnimNotifyBattleDamageRandomParameter::Probability' has a wrong offset!");
static_assert(offsetof(FEndAnimNotifyBattleDamageRandomParameter, ProbabilityEffect) == 0x000004, "Member 'FEndAnimNotifyBattleDamageRandomParameter::ProbabilityEffect' has a wrong offset!");
static_assert(offsetof(FEndAnimNotifyBattleDamageRandomParameter, DamageSourceIDs) == 0x000008, "Member 'FEndAnimNotifyBattleDamageRandomParameter::DamageSourceIDs' has a wrong offset!");

// ScriptStruct EndGame.EndAnimNotifyCondorPopSubCharacterPoint
// 0x0014 (0x0014 - 0x0000)
struct FEndAnimNotifyCondorPopSubCharacterPoint final
{
public:
	class FName                                   Socket;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x000C)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimNotifyCondorPopSubCharacterPoint) == 0x000004, "Wrong alignment on FEndAnimNotifyCondorPopSubCharacterPoint");
static_assert(sizeof(FEndAnimNotifyCondorPopSubCharacterPoint) == 0x000014, "Wrong size on FEndAnimNotifyCondorPopSubCharacterPoint");
static_assert(offsetof(FEndAnimNotifyCondorPopSubCharacterPoint, Socket) == 0x000000, "Member 'FEndAnimNotifyCondorPopSubCharacterPoint::Socket' has a wrong offset!");
static_assert(offsetof(FEndAnimNotifyCondorPopSubCharacterPoint, Offset) == 0x000008, "Member 'FEndAnimNotifyCondorPopSubCharacterPoint::Offset' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorNewFieldUpperExtraAction
// 0x0010 (0x0490 - 0x0480)
struct FEndBehaviorNewFieldUpperExtraAction : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x10];                                     // 0x0480(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorNewFieldUpperExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorNewFieldUpperExtraAction");
static_assert(sizeof(FEndBehaviorNewFieldUpperExtraAction) == 0x000490, "Wrong size on FEndBehaviorNewFieldUpperExtraAction");

// ScriptStruct EndGame.EndBehaviorFieldRedHoldDeliveryUpperExtraAction
// 0x02C0 (0x0750 - 0x0490)
struct FEndBehaviorFieldRedHoldDeliveryUpperExtraAction final : public FEndBehaviorNewFieldUpperExtraAction
{
public:
	uint8                                         Pad_490[0x2C0];                                    // 0x0490(0x02C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldRedHoldDeliveryUpperExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldRedHoldDeliveryUpperExtraAction");
static_assert(sizeof(FEndBehaviorFieldRedHoldDeliveryUpperExtraAction) == 0x000750, "Wrong size on FEndBehaviorFieldRedHoldDeliveryUpperExtraAction");

// ScriptStruct EndGame.MoveActorDataCache
// 0x0100 (0x0100 - 0x0000)
struct FMoveActorDataCache final
{
public:
	TWeakObjectPtr<class AActor>                  OwnerActor;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNotifyEvent                       LocalEvent;                                        // 0x0030(0x00B8)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineComp;                                        // 0x00E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        MovingComponent;                                   // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoveActorDataCache) == 0x000008, "Wrong alignment on FMoveActorDataCache");
static_assert(sizeof(FMoveActorDataCache) == 0x000100, "Wrong size on FMoveActorDataCache");
static_assert(offsetof(FMoveActorDataCache, OwnerActor) == 0x000000, "Member 'FMoveActorDataCache::OwnerActor' has a wrong offset!");
static_assert(offsetof(FMoveActorDataCache, LocalEvent) == 0x000030, "Member 'FMoveActorDataCache::LocalEvent' has a wrong offset!");
static_assert(offsetof(FMoveActorDataCache, SplineComp) == 0x0000E8, "Member 'FMoveActorDataCache::SplineComp' has a wrong offset!");
static_assert(offsetof(FMoveActorDataCache, MovingComponent) == 0x0000F0, "Member 'FMoveActorDataCache::MovingComponent' has a wrong offset!");

// ScriptStruct EndGame.TimelineKeyFrameData
// 0x003C (0x003C - 0x0000)
struct FTimelineKeyFrameData final
{
public:
	float                                         DistanceBetweenThisAndNextPoint;                   // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Tangent;                                           // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AutoGeneratedTangent;                              // 0x0020(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimelineMovementType                         CurveType;                                         // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimelineKeyFrameData) == 0x000004, "Wrong alignment on FTimelineKeyFrameData");
static_assert(sizeof(FTimelineKeyFrameData) == 0x00003C, "Wrong size on FTimelineKeyFrameData");
static_assert(offsetof(FTimelineKeyFrameData, DistanceBetweenThisAndNextPoint) == 0x000000, "Member 'FTimelineKeyFrameData::DistanceBetweenThisAndNextPoint' has a wrong offset!");
static_assert(offsetof(FTimelineKeyFrameData, Time) == 0x000004, "Member 'FTimelineKeyFrameData::Time' has a wrong offset!");
static_assert(offsetof(FTimelineKeyFrameData, Location) == 0x000008, "Member 'FTimelineKeyFrameData::Location' has a wrong offset!");
static_assert(offsetof(FTimelineKeyFrameData, Tangent) == 0x000014, "Member 'FTimelineKeyFrameData::Tangent' has a wrong offset!");
static_assert(offsetof(FTimelineKeyFrameData, AutoGeneratedTangent) == 0x000020, "Member 'FTimelineKeyFrameData::AutoGeneratedTangent' has a wrong offset!");
static_assert(offsetof(FTimelineKeyFrameData, CurveType) == 0x00002C, "Member 'FTimelineKeyFrameData::CurveType' has a wrong offset!");
static_assert(offsetof(FTimelineKeyFrameData, Rotation) == 0x000030, "Member 'FTimelineKeyFrameData::Rotation' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorGuardExtraAction
// 0x0020 (0x06B0 - 0x0690)
struct FEndBehaviorGuardExtraAction final : public FEndBehaviorSimpleFsmExtraAction
{
public:
	uint8                                         Pad_690[0x20];                                     // 0x0690(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorGuardExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorGuardExtraAction");
static_assert(sizeof(FEndBehaviorGuardExtraAction) == 0x0006B0, "Wrong size on FEndBehaviorGuardExtraAction");

// ScriptStruct EndGame.EndInputVelocitySetting
// 0x0008 (0x0008 - 0x0000)
struct FEndInputVelocitySetting final
{
public:
	bool                                          bEnableVelocityInput;                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputVelocityMax;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndInputVelocitySetting) == 0x000004, "Wrong alignment on FEndInputVelocitySetting");
static_assert(sizeof(FEndInputVelocitySetting) == 0x000008, "Wrong size on FEndInputVelocitySetting");
static_assert(offsetof(FEndInputVelocitySetting, bEnableVelocityInput) == 0x000000, "Member 'FEndInputVelocitySetting::bEnableVelocityInput' has a wrong offset!");
static_assert(offsetof(FEndInputVelocitySetting, InputVelocityMax) == 0x000004, "Member 'FEndInputVelocitySetting::InputVelocityMax' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAim_ItemCache
// 0x0040 (0x0040 - 0x0000)
struct FRigUnit_EndAim_ItemCache final
{
public:
	struct FCachedRigElement                      CachedItem;                                        // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  DeltaRotation;                                     // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DeltaTranslation;                                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndAim_ItemCache) == 0x000010, "Wrong alignment on FRigUnit_EndAim_ItemCache");
static_assert(sizeof(FRigUnit_EndAim_ItemCache) == 0x000040, "Wrong size on FRigUnit_EndAim_ItemCache");
static_assert(offsetof(FRigUnit_EndAim_ItemCache, CachedItem) == 0x000000, "Member 'FRigUnit_EndAim_ItemCache::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_ItemCache, DeltaRotation) == 0x000020, "Member 'FRigUnit_EndAim_ItemCache::DeltaRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_ItemCache, DeltaTranslation) == 0x000030, "Member 'FRigUnit_EndAim_ItemCache::DeltaTranslation' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAim_EffectorCache
// 0x0050 (0x0050 - 0x0000)
struct FRigUnit_EndAim_EffectorCache final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastTargetName;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedEffectorItem;                                // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedItems;                                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedExtendItems;                                 // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAim_EffectorCache) == 0x000008, "Wrong alignment on FRigUnit_EndAim_EffectorCache");
static_assert(sizeof(FRigUnit_EndAim_EffectorCache) == 0x000050, "Wrong size on FRigUnit_EndAim_EffectorCache");
static_assert(offsetof(FRigUnit_EndAim_EffectorCache, bActive) == 0x000000, "Member 'FRigUnit_EndAim_EffectorCache::bActive' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_EffectorCache, TargetLocation) == 0x000004, "Member 'FRigUnit_EndAim_EffectorCache::TargetLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_EffectorCache, LastTargetName) == 0x000010, "Member 'FRigUnit_EndAim_EffectorCache::LastTargetName' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_EffectorCache, CachedEffectorItem) == 0x000018, "Member 'FRigUnit_EndAim_EffectorCache::CachedEffectorItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_EffectorCache, CachedItems) == 0x000030, "Member 'FRigUnit_EndAim_EffectorCache::CachedItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_EffectorCache, CachedExtendItems) == 0x000040, "Member 'FRigUnit_EndAim_EffectorCache::CachedExtendItems' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAim_Cache
// 0x0050 (0x0050 - 0x0000)
struct FRigUnit_EndAim_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndAim_ItemCache>      CachedItems;                                       // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndAim_EffectorCache>  CachedEffectors;                                   // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedAimBaseItem;                                 // 0x0028(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedDebugEffectorTargets;                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAim_Cache) == 0x000008, "Wrong alignment on FRigUnit_EndAim_Cache");
static_assert(sizeof(FRigUnit_EndAim_Cache) == 0x000050, "Wrong size on FRigUnit_EndAim_Cache");
static_assert(offsetof(FRigUnit_EndAim_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndAim_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Cache, CachedItems) == 0x000008, "Member 'FRigUnit_EndAim_Cache::CachedItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Cache, CachedEffectors) == 0x000018, "Member 'FRigUnit_EndAim_Cache::CachedEffectors' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Cache, CachedAimBaseItem) == 0x000028, "Member 'FRigUnit_EndAim_Cache::CachedAimBaseItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Cache, CachedDebugEffectorTargets) == 0x000040, "Member 'FRigUnit_EndAim_Cache::CachedDebugEffectorTargets' has a wrong offset!");

// ScriptStruct EndGame.EndAbilityIDBranch
// 0x0010 (0x0010 - 0x0000)
struct FEndAbilityIDBranch final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAbilityIDBranch) == 0x000004, "Wrong alignment on FEndAbilityIDBranch");
static_assert(sizeof(FEndAbilityIDBranch) == 0x000010, "Wrong size on FEndAbilityIDBranch");
static_assert(offsetof(FEndAbilityIDBranch, AbilityId) == 0x000000, "Member 'FEndAbilityIDBranch::AbilityId' has a wrong offset!");
static_assert(offsetof(FEndAbilityIDBranch, SoundName) == 0x000008, "Member 'FEndAbilityIDBranch::SoundName' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFieldNaturalExtraAction
// 0x0380 (0x0800 - 0x0480)
struct FEndBehaviorFieldNaturalExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x380];                                    // 0x0480(0x0380)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldNaturalExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldNaturalExtraAction");
static_assert(sizeof(FEndBehaviorFieldNaturalExtraAction) == 0x000800, "Wrong size on FEndBehaviorFieldNaturalExtraAction");

// ScriptStruct EndGame.EndCharaIDBranch
// 0x0010 (0x0010 - 0x0000)
struct FEndCharaIDBranch final
{
public:
	class FName                                   CharaID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCharaIDBranch) == 0x000004, "Wrong alignment on FEndCharaIDBranch");
static_assert(sizeof(FEndCharaIDBranch) == 0x000010, "Wrong size on FEndCharaIDBranch");
static_assert(offsetof(FEndCharaIDBranch, CharaID) == 0x000000, "Member 'FEndCharaIDBranch::CharaID' has a wrong offset!");
static_assert(offsetof(FEndCharaIDBranch, SoundName) == 0x000008, "Member 'FEndCharaIDBranch::SoundName' has a wrong offset!");

// ScriptStruct EndGame.EndAnimNotifyBattleAbilityAnimationReplaceParameter
// 0x0018 (0x0018 - 0x0000)
struct FEndAnimNotifyBattleAbilityAnimationReplaceParameter final
{
public:
	class FString                                 ReplaceName;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimNotifyBattleAbilityAnimationReplaceCondition Condition;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimNotifyBattleAbilityAnimationReplaceParameter) == 0x000008, "Wrong alignment on FEndAnimNotifyBattleAbilityAnimationReplaceParameter");
static_assert(sizeof(FEndAnimNotifyBattleAbilityAnimationReplaceParameter) == 0x000018, "Wrong size on FEndAnimNotifyBattleAbilityAnimationReplaceParameter");
static_assert(offsetof(FEndAnimNotifyBattleAbilityAnimationReplaceParameter, ReplaceName) == 0x000000, "Member 'FEndAnimNotifyBattleAbilityAnimationReplaceParameter::ReplaceName' has a wrong offset!");
static_assert(offsetof(FEndAnimNotifyBattleAbilityAnimationReplaceParameter, Condition) == 0x000010, "Member 'FEndAnimNotifyBattleAbilityAnimationReplaceParameter::Condition' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorHeavyDoorExtraAction
// 0x0170 (0x0570 - 0x0400)
struct FEndBehaviorHeavyDoorExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x170];                                    // 0x0400(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorHeavyDoorExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorHeavyDoorExtraAction");
static_assert(sizeof(FEndBehaviorHeavyDoorExtraAction) == 0x000570, "Wrong size on FEndBehaviorHeavyDoorExtraAction");

// ScriptStruct EndGame.EndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelCondition
// 0x000C (0x000C - 0x0000)
struct FEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelCondition final
{
public:
	EEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelConditionType ConditionType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParameterName;                                     // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelCondition) == 0x000004, "Wrong alignment on FEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelCondition");
static_assert(sizeof(FEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelCondition) == 0x00000C, "Wrong size on FEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelCondition");
static_assert(offsetof(FEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelCondition, ConditionType) == 0x000000, "Member 'FEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelCondition, ParameterName) == 0x000004, "Member 'FEndAnimNotifyStateBattlePlayerKeyAssignAbilityOverrideCancelCondition::ParameterName' has a wrong offset!");

// ScriptStruct EndGame.MovieSceneEndEventTemplateBase
// 0x0018 (0x0038 - 0x0020)
struct FMovieSceneEndEventTemplateBase : public FMovieSceneEvalTemplate
{
public:
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEndEventTemplateBase) == 0x000008, "Wrong alignment on FMovieSceneEndEventTemplateBase");
static_assert(sizeof(FMovieSceneEndEventTemplateBase) == 0x000038, "Wrong size on FMovieSceneEndEventTemplateBase");
static_assert(offsetof(FMovieSceneEndEventTemplateBase, EventReceivers) == 0x000020, "Member 'FMovieSceneEndEventTemplateBase::EventReceivers' has a wrong offset!");

// ScriptStruct EndGame.EndPlayedSoundInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEndPlayedSoundInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPlayedSoundInfo) == 0x000008, "Wrong alignment on FEndPlayedSoundInfo");
static_assert(sizeof(FEndPlayedSoundInfo) == 0x000018, "Wrong size on FEndPlayedSoundInfo");

// ScriptStruct EndGame.EndBehaviorKnockBackExtraActionInput
// 0x0014 (0x0014 - 0x0000)
struct FEndBehaviorKnockBackExtraActionInput final
{
public:
	bool                                          bRotateToDamageVector;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DamageVector;                                      // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockBackTime;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBehaviorKnockBackExtraActionInput) == 0x000004, "Wrong alignment on FEndBehaviorKnockBackExtraActionInput");
static_assert(sizeof(FEndBehaviorKnockBackExtraActionInput) == 0x000014, "Wrong size on FEndBehaviorKnockBackExtraActionInput");
static_assert(offsetof(FEndBehaviorKnockBackExtraActionInput, bRotateToDamageVector) == 0x000000, "Member 'FEndBehaviorKnockBackExtraActionInput::bRotateToDamageVector' has a wrong offset!");
static_assert(offsetof(FEndBehaviorKnockBackExtraActionInput, DamageVector) == 0x000004, "Member 'FEndBehaviorKnockBackExtraActionInput::DamageVector' has a wrong offset!");
static_assert(offsetof(FEndBehaviorKnockBackExtraActionInput, KnockBackTime) == 0x000010, "Member 'FEndBehaviorKnockBackExtraActionInput::KnockBackTime' has a wrong offset!");

// ScriptStruct EndGame.EndAnimResidentBlend
// 0x0018 (0x0018 - 0x0000)
struct FEndAnimResidentBlend final
{
public:
	class FName                                   SequenceName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BlendBoneName;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoActive;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimResidentBlend) == 0x000004, "Wrong alignment on FEndAnimResidentBlend");
static_assert(sizeof(FEndAnimResidentBlend) == 0x000018, "Wrong size on FEndAnimResidentBlend");
static_assert(offsetof(FEndAnimResidentBlend, SequenceName) == 0x000000, "Member 'FEndAnimResidentBlend::SequenceName' has a wrong offset!");
static_assert(offsetof(FEndAnimResidentBlend, BlendBoneName) == 0x000008, "Member 'FEndAnimResidentBlend::BlendBoneName' has a wrong offset!");
static_assert(offsetof(FEndAnimResidentBlend, PlayRate) == 0x000010, "Member 'FEndAnimResidentBlend::PlayRate' has a wrong offset!");
static_assert(offsetof(FEndAnimResidentBlend, bAutoActive) == 0x000014, "Member 'FEndAnimResidentBlend::bAutoActive' has a wrong offset!");

// ScriptStruct EndGame.EndAnimSetClusterWarning
// 0x0010 (0x0010 - 0x0000)
struct FEndAnimSetClusterWarning final
{
public:
	TArray<class FName>                           Dependencies;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimSetClusterWarning) == 0x000008, "Wrong alignment on FEndAnimSetClusterWarning");
static_assert(sizeof(FEndAnimSetClusterWarning) == 0x000010, "Wrong size on FEndAnimSetClusterWarning");
static_assert(offsetof(FEndAnimSetClusterWarning, Dependencies) == 0x000000, "Member 'FEndAnimSetClusterWarning::Dependencies' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorInputLongExtraAction
// 0x0280 (0x0700 - 0x0480)
struct FEndBehaviorInputLongExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x280];                                    // 0x0480(0x0280)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorInputLongExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorInputLongExtraAction");
static_assert(sizeof(FEndBehaviorInputLongExtraAction) == 0x000700, "Wrong size on FEndBehaviorInputLongExtraAction");

// ScriptStruct EndGame.EndAssetClass
// 0x0018 (0x0018 - 0x0000)
struct FEndAssetClass final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UObject>>            AssetUserData;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAssetClass) == 0x000008, "Wrong alignment on FEndAssetClass");
static_assert(sizeof(FEndAssetClass) == 0x000018, "Wrong size on FEndAssetClass");
static_assert(offsetof(FEndAssetClass, AssetName) == 0x000000, "Member 'FEndAssetClass::AssetName' has a wrong offset!");
static_assert(offsetof(FEndAssetClass, AssetUserData) == 0x000008, "Member 'FEndAssetClass::AssetUserData' has a wrong offset!");

// ScriptStruct EndGame.EndAssetDataSoft
// 0x0018 (0x0018 - 0x0000)
struct FEndAssetDataSoft final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         AssetUserData;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAssetDataSoft) == 0x000008, "Wrong alignment on FEndAssetDataSoft");
static_assert(sizeof(FEndAssetDataSoft) == 0x000018, "Wrong size on FEndAssetDataSoft");
static_assert(offsetof(FEndAssetDataSoft, AssetName) == 0x000000, "Member 'FEndAssetDataSoft::AssetName' has a wrong offset!");
static_assert(offsetof(FEndAssetDataSoft, AssetUserData) == 0x000008, "Member 'FEndAssetDataSoft::AssetUserData' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorHandlePuzzlePlayerExtraAction
// 0x0010 (0x0410 - 0x0400)
struct FEndBehaviorHandlePuzzlePlayerExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x10];                                     // 0x0400(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorHandlePuzzlePlayerExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorHandlePuzzlePlayerExtraAction");
static_assert(sizeof(FEndBehaviorHandlePuzzlePlayerExtraAction) == 0x000410, "Wrong size on FEndBehaviorHandlePuzzlePlayerExtraAction");

// ScriptStruct EndGame.EndFeelerLaserTimeRateAndSize
// 0x000C (0x000C - 0x0000)
struct FEndFeelerLaserTimeRateAndSize final
{
public:
	float                                         TimeRate;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRateSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerLaserTimeRateAndSize) == 0x000004, "Wrong alignment on FEndFeelerLaserTimeRateAndSize");
static_assert(sizeof(FEndFeelerLaserTimeRateAndSize) == 0x00000C, "Wrong size on FEndFeelerLaserTimeRateAndSize");
static_assert(offsetof(FEndFeelerLaserTimeRateAndSize, TimeRate) == 0x000000, "Member 'FEndFeelerLaserTimeRateAndSize::TimeRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserTimeRateAndSize, TimeRateSpeed) == 0x000004, "Member 'FEndFeelerLaserTimeRateAndSize::TimeRateSpeed' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserTimeRateAndSize, Size) == 0x000008, "Member 'FEndFeelerLaserTimeRateAndSize::Size' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerLaserInstanceContext
// 0x00D0 (0x00D0 - 0x0000)
struct FEndFeelerLaserInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerLaserTimeRateAndSize         Horizontal;                                        // 0x0004(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerLaserTimeRateAndSize         PrimaryVertical;                                   // 0x0010(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerLaserTimeRateAndSize         SecondaryVertical;                                 // 0x001C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerLaserTimeRateAndSize         PrimaryRoll;                                       // 0x0028(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerLaserTimeRateAndSize         SecondaryRoll;                                     // 0x0034(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             CurrentTransform;                                  // 0x0040(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ComponentToWorld;                                  // 0x0070(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CurrentOffsetYZ;                                   // 0x00A0(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x00B0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstancedStaticMeshComponentIndex;                 // 0x00B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstancedStaticMeshInstanceIndex;                  // 0x00BC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x00C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0xF];                                       // 0x00C1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerLaserInstanceContext) == 0x000010, "Wrong alignment on FEndFeelerLaserInstanceContext");
static_assert(sizeof(FEndFeelerLaserInstanceContext) == 0x0000D0, "Wrong size on FEndFeelerLaserInstanceContext");
static_assert(offsetof(FEndFeelerLaserInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndFeelerLaserInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, Horizontal) == 0x000004, "Member 'FEndFeelerLaserInstanceContext::Horizontal' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, PrimaryVertical) == 0x000010, "Member 'FEndFeelerLaserInstanceContext::PrimaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, SecondaryVertical) == 0x00001C, "Member 'FEndFeelerLaserInstanceContext::SecondaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, PrimaryRoll) == 0x000028, "Member 'FEndFeelerLaserInstanceContext::PrimaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, SecondaryRoll) == 0x000034, "Member 'FEndFeelerLaserInstanceContext::SecondaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, CurrentTransform) == 0x000040, "Member 'FEndFeelerLaserInstanceContext::CurrentTransform' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, ComponentToWorld) == 0x000070, "Member 'FEndFeelerLaserInstanceContext::ComponentToWorld' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, CurrentOffsetYZ) == 0x0000A0, "Member 'FEndFeelerLaserInstanceContext::CurrentOffsetYZ' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, SkeletalMeshComponent) == 0x0000B0, "Member 'FEndFeelerLaserInstanceContext::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, InstancedStaticMeshComponentIndex) == 0x0000B8, "Member 'FEndFeelerLaserInstanceContext::InstancedStaticMeshComponentIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, InstancedStaticMeshInstanceIndex) == 0x0000BC, "Member 'FEndFeelerLaserInstanceContext::InstancedStaticMeshInstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserInstanceContext, bVisibility) == 0x0000C0, "Member 'FEndFeelerLaserInstanceContext::bVisibility' has a wrong offset!");

// ScriptStruct EndGame.EndAssetData
// 0x0018 (0x0018 - 0x0000)
struct FEndAssetData final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        AssetUserData;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAssetData) == 0x000008, "Wrong alignment on FEndAssetData");
static_assert(sizeof(FEndAssetData) == 0x000018, "Wrong size on FEndAssetData");
static_assert(offsetof(FEndAssetData, AssetName) == 0x000000, "Member 'FEndAssetData::AssetName' has a wrong offset!");
static_assert(offsetof(FEndAssetData, AssetUserData) == 0x000008, "Member 'FEndAssetData::AssetUserData' has a wrong offset!");

// ScriptStruct EndGame.EndAssignStateChange
// 0x0058 (0x0058 - 0x0000)
struct FEndAssignStateChange final
{
public:
	uint64                                        OwnerNodeGUID;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                NextStateChangeID;                                 // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAssignStateChange) == 0x000008, "Wrong alignment on FEndAssignStateChange");
static_assert(sizeof(FEndAssignStateChange) == 0x000058, "Wrong size on FEndAssignStateChange");
static_assert(offsetof(FEndAssignStateChange, OwnerNodeGUID) == 0x000000, "Member 'FEndAssignStateChange::OwnerNodeGUID' has a wrong offset!");
static_assert(offsetof(FEndAssignStateChange, NextStateChangeID) == 0x000008, "Member 'FEndAssignStateChange::NextStateChangeID' has a wrong offset!");

// ScriptStruct EndGame.EndObjectConnection
// 0x0018 (0x0018 - 0x0000)
struct FEndObjectConnection final
{
public:
	uint64                                        OwnerNodeGUID;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OwnerPinName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        TargetNodeGUID;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndObjectConnection) == 0x000008, "Wrong alignment on FEndObjectConnection");
static_assert(sizeof(FEndObjectConnection) == 0x000018, "Wrong size on FEndObjectConnection");
static_assert(offsetof(FEndObjectConnection, OwnerNodeGUID) == 0x000000, "Member 'FEndObjectConnection::OwnerNodeGUID' has a wrong offset!");
static_assert(offsetof(FEndObjectConnection, OwnerPinName) == 0x000008, "Member 'FEndObjectConnection::OwnerPinName' has a wrong offset!");
static_assert(offsetof(FEndObjectConnection, TargetNodeGUID) == 0x000010, "Member 'FEndObjectConnection::TargetNodeGUID' has a wrong offset!");

// ScriptStruct EndGame.EndObjectKnot
// 0x0020 (0x0020 - 0x0000)
struct FEndObjectKnot final
{
public:
	uint32                                        UniqueIndex;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OwnerUniqueIndex;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InputPinGUID;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        OutputPinGUID;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndObjectKnot) == 0x000008, "Wrong alignment on FEndObjectKnot");
static_assert(sizeof(FEndObjectKnot) == 0x000020, "Wrong size on FEndObjectKnot");
static_assert(offsetof(FEndObjectKnot, UniqueIndex) == 0x000000, "Member 'FEndObjectKnot::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndObjectKnot, OwnerUniqueIndex) == 0x000004, "Member 'FEndObjectKnot::OwnerUniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndObjectKnot, StateName) == 0x000008, "Member 'FEndObjectKnot::StateName' has a wrong offset!");
static_assert(offsetof(FEndObjectKnot, InputPinGUID) == 0x000010, "Member 'FEndObjectKnot::InputPinGUID' has a wrong offset!");
static_assert(offsetof(FEndObjectKnot, OutputPinGUID) == 0x000018, "Member 'FEndObjectKnot::OutputPinGUID' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorMuscleMiniGameAction
// 0x0060 (0x0460 - 0x0400)
struct FEndBehaviorMuscleMiniGameAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x60];                                     // 0x0400(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorMuscleMiniGameAction) == 0x000010, "Wrong alignment on FEndBehaviorMuscleMiniGameAction");
static_assert(sizeof(FEndBehaviorMuscleMiniGameAction) == 0x000460, "Wrong size on FEndBehaviorMuscleMiniGameAction");

// ScriptStruct EndGame.AssignmentParam
// 0x0018 (0x0018 - 0x0000)
struct FAssignmentParam final
{
public:
	class FName                                   objectID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   attributeID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   stateChangeID;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssignmentParam) == 0x000004, "Wrong alignment on FAssignmentParam");
static_assert(sizeof(FAssignmentParam) == 0x000018, "Wrong size on FAssignmentParam");
static_assert(offsetof(FAssignmentParam, objectID) == 0x000000, "Member 'FAssignmentParam::objectID' has a wrong offset!");
static_assert(offsetof(FAssignmentParam, attributeID) == 0x000008, "Member 'FAssignmentParam::attributeID' has a wrong offset!");
static_assert(offsetof(FAssignmentParam, stateChangeID) == 0x000010, "Member 'FAssignmentParam::stateChangeID' has a wrong offset!");

// ScriptStruct EndGame.EndObject_StateTriggerData
// 0x00A0 (0x00A0 - 0x0000)
struct FEndObject_StateTriggerData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UniqueIndex;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StateTriggerScope;                                 // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        OwnerUniqueIndex;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PartyMemberTargetPoint;                            // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SafeSaveActionName;                                // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 StateTriggerSpecialType;                           // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           PartyMemberPosition;                               // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetObjectName;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           HistoryClearStateTrigger;                          // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAssignmentParam>               AssignmentParams;                                  // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         AutoSaveType;                                      // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndObject_StateTriggerData) == 0x000008, "Wrong alignment on FEndObject_StateTriggerData");
static_assert(sizeof(FEndObject_StateTriggerData) == 0x0000A0, "Wrong size on FEndObject_StateTriggerData");
static_assert(offsetof(FEndObject_StateTriggerData, Name) == 0x000000, "Member 'FEndObject_StateTriggerData::Name' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, Comment) == 0x000010, "Member 'FEndObject_StateTriggerData::Comment' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, UniqueIndex) == 0x000020, "Member 'FEndObject_StateTriggerData::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, StateTriggerScope) == 0x000024, "Member 'FEndObject_StateTriggerData::StateTriggerScope' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, OwnerUniqueIndex) == 0x000028, "Member 'FEndObject_StateTriggerData::OwnerUniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, StateName) == 0x00002C, "Member 'FEndObject_StateTriggerData::StateName' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, PartyMemberTargetPoint) == 0x000034, "Member 'FEndObject_StateTriggerData::PartyMemberTargetPoint' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, SafeSaveActionName) == 0x00003C, "Member 'FEndObject_StateTriggerData::SafeSaveActionName' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, StateTriggerSpecialType) == 0x000048, "Member 'FEndObject_StateTriggerData::StateTriggerSpecialType' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, PartyMemberPosition) == 0x000058, "Member 'FEndObject_StateTriggerData::PartyMemberPosition' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, TargetObjectName) == 0x000068, "Member 'FEndObject_StateTriggerData::TargetObjectName' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, HistoryClearStateTrigger) == 0x000078, "Member 'FEndObject_StateTriggerData::HistoryClearStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, AssignmentParams) == 0x000088, "Member 'FEndObject_StateTriggerData::AssignmentParams' has a wrong offset!");
static_assert(offsetof(FEndObject_StateTriggerData, AutoSaveType) == 0x000098, "Member 'FEndObject_StateTriggerData::AutoSaveType' has a wrong offset!");

// ScriptStruct EndGame.StateConditionParam
// 0x0018 (0x0018 - 0x0000)
struct FStateConditionParam final
{
public:
	class FName                                   SwapStateConditionNot;                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwapStateCondition;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwapStateChange;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateConditionParam) == 0x000004, "Wrong alignment on FStateConditionParam");
static_assert(sizeof(FStateConditionParam) == 0x000018, "Wrong size on FStateConditionParam");
static_assert(offsetof(FStateConditionParam, SwapStateConditionNot) == 0x000000, "Member 'FStateConditionParam::SwapStateConditionNot' has a wrong offset!");
static_assert(offsetof(FStateConditionParam, SwapStateCondition) == 0x000008, "Member 'FStateConditionParam::SwapStateCondition' has a wrong offset!");
static_assert(offsetof(FStateConditionParam, SwapStateChange) == 0x000010, "Member 'FStateConditionParam::SwapStateChange' has a wrong offset!");

// ScriptStruct EndGame.NextStateChange
// 0x0010 (0x0010 - 0x0000)
struct FNextStateChange final
{
public:
	class FName                                   InputStateTrigger;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextStateChange;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNextStateChange) == 0x000004, "Wrong alignment on FNextStateChange");
static_assert(sizeof(FNextStateChange) == 0x000010, "Wrong size on FNextStateChange");
static_assert(offsetof(FNextStateChange, InputStateTrigger) == 0x000000, "Member 'FNextStateChange::InputStateTrigger' has a wrong offset!");
static_assert(offsetof(FNextStateChange, NextStateChange) == 0x000008, "Member 'FNextStateChange::NextStateChange' has a wrong offset!");

// ScriptStruct EndGame.EndObject_StateChange
// 0x0138 (0x0138 - 0x0000)
struct FEndObject_StateChange final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UniqueIndex;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OwnerUniqueIndex;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EnterActions;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStateConditionParam>           StateConditions;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNextStateChange>               NextStateTriggers;                                 // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Status;                                            // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopAnimation;                                     // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopEffect;                                        // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StringArg[0x10];                                   // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArg[0x10];                                  // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndObject_StateChange) == 0x000008, "Wrong alignment on FEndObject_StateChange");
static_assert(sizeof(FEndObject_StateChange) == 0x000138, "Wrong size on FEndObject_StateChange");
static_assert(offsetof(FEndObject_StateChange, Name) == 0x000000, "Member 'FEndObject_StateChange::Name' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, Comment) == 0x000010, "Member 'FEndObject_StateChange::Comment' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, UniqueIndex) == 0x000020, "Member 'FEndObject_StateChange::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, OwnerUniqueIndex) == 0x000024, "Member 'FEndObject_StateChange::OwnerUniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, StateName) == 0x000028, "Member 'FEndObject_StateChange::StateName' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, EnterActions) == 0x000030, "Member 'FEndObject_StateChange::EnterActions' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, StateConditions) == 0x000040, "Member 'FEndObject_StateChange::StateConditions' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, NextStateTriggers) == 0x000050, "Member 'FEndObject_StateChange::NextStateTriggers' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, Status) == 0x000060, "Member 'FEndObject_StateChange::Status' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, LoopAnimation) == 0x000068, "Member 'FEndObject_StateChange::LoopAnimation' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, LoopEffect) == 0x000070, "Member 'FEndObject_StateChange::LoopEffect' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, StringArg) == 0x000078, "Member 'FEndObject_StateChange::StringArg' has a wrong offset!");
static_assert(offsetof(FEndObject_StateChange, IntegerArg) == 0x0000F8, "Member 'FEndObject_StateChange::IntegerArg' has a wrong offset!");

// ScriptStruct EndGame.EndSkeletalMeshActorAnimInstanceProxy
// 0x0150 (0x0A20 - 0x08D0)
struct FEndSkeletalMeshActorAnimInstanceProxy : public FAnimSingleNodeInstanceProxy
{
public:
	uint8                                         Pad_8D0[0x150];                                    // 0x08D0(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSkeletalMeshActorAnimInstanceProxy) == 0x000010, "Wrong alignment on FEndSkeletalMeshActorAnimInstanceProxy");
static_assert(sizeof(FEndSkeletalMeshActorAnimInstanceProxy) == 0x000A20, "Wrong size on FEndSkeletalMeshActorAnimInstanceProxy");

// ScriptStruct EndGame.EndAnimWeaponInstanceProxy
// 0x0000 (0x0A20 - 0x0A20)
struct FEndAnimWeaponInstanceProxy final : public FEndSkeletalMeshActorAnimInstanceProxy
{
};
static_assert(alignof(FEndAnimWeaponInstanceProxy) == 0x000010, "Wrong alignment on FEndAnimWeaponInstanceProxy");
static_assert(sizeof(FEndAnimWeaponInstanceProxy) == 0x000A20, "Wrong size on FEndAnimWeaponInstanceProxy");

// ScriptStruct EndGame.EndCommonInfo
// 0x0024 (0x0024 - 0x0000)
struct FEndCommonInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENnodeType                                    Type;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UniqueIndex;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OwnerUniqueIndex;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCommonInfo) == 0x000004, "Wrong alignment on FEndCommonInfo");
static_assert(sizeof(FEndCommonInfo) == 0x000024, "Wrong size on FEndCommonInfo");
static_assert(offsetof(FEndCommonInfo, Name) == 0x000000, "Member 'FEndCommonInfo::Name' has a wrong offset!");
static_assert(offsetof(FEndCommonInfo, Type) == 0x000008, "Member 'FEndCommonInfo::Type' has a wrong offset!");
static_assert(offsetof(FEndCommonInfo, UniqueIndex) == 0x00000C, "Member 'FEndCommonInfo::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndCommonInfo, OwnerUniqueIndex) == 0x000010, "Member 'FEndCommonInfo::OwnerUniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndCommonInfo, StateName) == 0x000014, "Member 'FEndCommonInfo::StateName' has a wrong offset!");
static_assert(offsetof(FEndCommonInfo, Comment) == 0x00001C, "Member 'FEndCommonInfo::Comment' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndSaccade_EyeSettings
// 0x0030 (0x0030 - 0x0000)
struct FRigUnit_EndSaccade_EyeSettings final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForwardVector;                                     // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RollRange;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PitchRange;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              YawRange;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndSaccade_EyeSettings) == 0x000004, "Wrong alignment on FRigUnit_EndSaccade_EyeSettings");
static_assert(sizeof(FRigUnit_EndSaccade_EyeSettings) == 0x000030, "Wrong size on FRigUnit_EndSaccade_EyeSettings");
static_assert(offsetof(FRigUnit_EndSaccade_EyeSettings, Item) == 0x000000, "Member 'FRigUnit_EndSaccade_EyeSettings::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_EyeSettings, ForwardVector) == 0x00000C, "Member 'FRigUnit_EndSaccade_EyeSettings::ForwardVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_EyeSettings, RollRange) == 0x000018, "Member 'FRigUnit_EndSaccade_EyeSettings::RollRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_EyeSettings, PitchRange) == 0x000020, "Member 'FRigUnit_EndSaccade_EyeSettings::PitchRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_EyeSettings, YawRange) == 0x000028, "Member 'FRigUnit_EndSaccade_EyeSettings::YawRange' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorModifyTransformExtraAction
// 0x0050 (0x0450 - 0x0400)
struct FEndBehaviorModifyTransformExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x50];                                     // 0x0400(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorModifyTransformExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorModifyTransformExtraAction");
static_assert(sizeof(FEndBehaviorModifyTransformExtraAction) == 0x000450, "Wrong size on FEndBehaviorModifyTransformExtraAction");

// ScriptStruct EndGame.EndObjectNodeInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndObjectNodeInfo final
{
public:
	struct FVector2D                              pos;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndObjectNodeInfo) == 0x000004, "Wrong alignment on FEndObjectNodeInfo");
static_assert(sizeof(FEndObjectNodeInfo) == 0x000010, "Wrong size on FEndObjectNodeInfo");
static_assert(offsetof(FEndObjectNodeInfo, pos) == 0x000000, "Member 'FEndObjectNodeInfo::pos' has a wrong offset!");
static_assert(offsetof(FEndObjectNodeInfo, Comment) == 0x000008, "Member 'FEndObjectNodeInfo::Comment' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAdditiveDamage_HitSetting
// 0x0040 (0x0040 - 0x0000)
struct FRigUnit_EndAdditiveDamage_HitSetting final
{
public:
	bool                                          bIdle;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWalk;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRun;                                              // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndAdditiveDamage_HitBoneSetting BaseSetting;                                       // 0x0004(0x002C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndAdditiveDamage_HitBoneSetting> AdditiveSettings;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAdditiveDamage_HitSetting) == 0x000008, "Wrong alignment on FRigUnit_EndAdditiveDamage_HitSetting");
static_assert(sizeof(FRigUnit_EndAdditiveDamage_HitSetting) == 0x000040, "Wrong size on FRigUnit_EndAdditiveDamage_HitSetting");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitSetting, bIdle) == 0x000000, "Member 'FRigUnit_EndAdditiveDamage_HitSetting::bIdle' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitSetting, bWalk) == 0x000001, "Member 'FRigUnit_EndAdditiveDamage_HitSetting::bWalk' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitSetting, bRun) == 0x000002, "Member 'FRigUnit_EndAdditiveDamage_HitSetting::bRun' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitSetting, BaseSetting) == 0x000004, "Member 'FRigUnit_EndAdditiveDamage_HitSetting::BaseSetting' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitSetting, AdditiveSettings) == 0x000030, "Member 'FRigUnit_EndAdditiveDamage_HitSetting::AdditiveSettings' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAdditiveDamage_Settings
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_EndAdditiveDamage_Settings final
{
public:
	TArray<struct FRigUnit_EndAdditiveDamage_HitSetting> HitSettings;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAdditiveDamage_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndAdditiveDamage_Settings");
static_assert(sizeof(FRigUnit_EndAdditiveDamage_Settings) == 0x000010, "Wrong size on FRigUnit_EndAdditiveDamage_Settings");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_Settings, HitSettings) == 0x000000, "Member 'FRigUnit_EndAdditiveDamage_Settings::HitSettings' has a wrong offset!");

// ScriptStruct EndGame.EndObjectBase
// 0x00C0 (0x00C0 - 0x0000)
struct FEndObjectBase
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UniqueIndex;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreCheck;                                       // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOnOff_StateChange;                              // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBeginOverlapTrigger_StateChange;                // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEffect_StateChange;                             // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePlannerLevelSet_StateChange;                    // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAI_StateChange;                                 // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseTargetIcon_StateChange;                         // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseGeneral_StateChange;                            // 0x002F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEnvironmentAnimation_StateChange;               // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEndOverlapTrigger_StateChange;                  // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseResponseAreaAction_StateChange;                 // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseMotionState_StateChange;                        // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAttachActor0_StateChange;                       // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAttachActor1_StateChange;                       // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAttachActor2_StateChange;                       // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSideDestination_StateChange;                    // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDisableLookAt_StateChange;                      // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OnOff_StateChangeID;                               // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeginOverlapTrigger_StateChangeID;                 // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Effect_StateChangeID;                              // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlannerLevelSet_StateChangeID;                     // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AI_StateChangeID;                                  // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetIcon_StateChangeID;                          // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   General_StateChangeID;                             // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnvironmentAnimation_StateChangeID;                // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndOverlapTrigger_StateChangeID;                   // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaAction_StateChangeID;                  // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionState_StateChangeID;                         // 0x008C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachActor0_StateChangeID;                        // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachActor1_StateChangeID;                        // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachActor2_StateChangeID;                        // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SideDestination_StateChangeID;                     // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisableLookAt_StateChangeID;                       // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndObjectBase) == 0x000008, "Wrong alignment on FEndObjectBase");
static_assert(sizeof(FEndObjectBase) == 0x0000C0, "Wrong size on FEndObjectBase");
static_assert(offsetof(FEndObjectBase, Name) == 0x000000, "Member 'FEndObjectBase::Name' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, Comment) == 0x000010, "Member 'FEndObjectBase::Comment' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UniqueIndex) == 0x000020, "Member 'FEndObjectBase::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, Priority) == 0x000024, "Member 'FEndObjectBase::Priority' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, IgnoreCheck) == 0x000028, "Member 'FEndObjectBase::IgnoreCheck' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseOnOff_StateChange) == 0x000029, "Member 'FEndObjectBase::UseOnOff_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseBeginOverlapTrigger_StateChange) == 0x00002A, "Member 'FEndObjectBase::UseBeginOverlapTrigger_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseEffect_StateChange) == 0x00002B, "Member 'FEndObjectBase::UseEffect_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UsePlannerLevelSet_StateChange) == 0x00002C, "Member 'FEndObjectBase::UsePlannerLevelSet_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseAI_StateChange) == 0x00002D, "Member 'FEndObjectBase::UseAI_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseTargetIcon_StateChange) == 0x00002E, "Member 'FEndObjectBase::UseTargetIcon_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseGeneral_StateChange) == 0x00002F, "Member 'FEndObjectBase::UseGeneral_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseEnvironmentAnimation_StateChange) == 0x000030, "Member 'FEndObjectBase::UseEnvironmentAnimation_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseEndOverlapTrigger_StateChange) == 0x000031, "Member 'FEndObjectBase::UseEndOverlapTrigger_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseResponseAreaAction_StateChange) == 0x000032, "Member 'FEndObjectBase::UseResponseAreaAction_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseMotionState_StateChange) == 0x000033, "Member 'FEndObjectBase::UseMotionState_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseAttachActor0_StateChange) == 0x000034, "Member 'FEndObjectBase::UseAttachActor0_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseAttachActor1_StateChange) == 0x000035, "Member 'FEndObjectBase::UseAttachActor1_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseAttachActor2_StateChange) == 0x000036, "Member 'FEndObjectBase::UseAttachActor2_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseSideDestination_StateChange) == 0x000037, "Member 'FEndObjectBase::UseSideDestination_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, UseDisableLookAt_StateChange) == 0x000038, "Member 'FEndObjectBase::UseDisableLookAt_StateChange' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, OnOff_StateChangeID) == 0x00003C, "Member 'FEndObjectBase::OnOff_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, BeginOverlapTrigger_StateChangeID) == 0x000044, "Member 'FEndObjectBase::BeginOverlapTrigger_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, Effect_StateChangeID) == 0x00004C, "Member 'FEndObjectBase::Effect_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, PlannerLevelSet_StateChangeID) == 0x000054, "Member 'FEndObjectBase::PlannerLevelSet_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, AI_StateChangeID) == 0x00005C, "Member 'FEndObjectBase::AI_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, TargetIcon_StateChangeID) == 0x000064, "Member 'FEndObjectBase::TargetIcon_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, General_StateChangeID) == 0x00006C, "Member 'FEndObjectBase::General_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, EnvironmentAnimation_StateChangeID) == 0x000074, "Member 'FEndObjectBase::EnvironmentAnimation_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, EndOverlapTrigger_StateChangeID) == 0x00007C, "Member 'FEndObjectBase::EndOverlapTrigger_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, ResponseAreaAction_StateChangeID) == 0x000084, "Member 'FEndObjectBase::ResponseAreaAction_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, MotionState_StateChangeID) == 0x00008C, "Member 'FEndObjectBase::MotionState_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, AttachActor0_StateChangeID) == 0x000094, "Member 'FEndObjectBase::AttachActor0_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, AttachActor1_StateChangeID) == 0x00009C, "Member 'FEndObjectBase::AttachActor1_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, AttachActor2_StateChangeID) == 0x0000A4, "Member 'FEndObjectBase::AttachActor2_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, SideDestination_StateChangeID) == 0x0000AC, "Member 'FEndObjectBase::SideDestination_StateChangeID' has a wrong offset!");
static_assert(offsetof(FEndObjectBase, DisableLookAt_StateChangeID) == 0x0000B4, "Member 'FEndObjectBase::DisableLookAt_StateChangeID' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorPoleSliderExtraAction
// 0x0340 (0x0750 - 0x0410)
struct FEndBehaviorPoleSliderExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x340];                                    // 0x0410(0x0340)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorPoleSliderExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorPoleSliderExtraAction");
static_assert(sizeof(FEndBehaviorPoleSliderExtraAction) == 0x000750, "Wrong size on FEndBehaviorPoleSliderExtraAction");

// ScriptStruct EndGame.EndObjectLayout
// 0x0050 (0x0110 - 0x00C0)
struct FEndObjectLayout final : public FEndObjectBase
{
public:
	class FString                                 NodeName;                                          // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName;                                         // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverlapActorGroup;                                 // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetIconResponseAreaForSelf;                     // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetIconResponseAreaForOthers;                   // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SituationTriggerID;                                // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGActorName;                                       // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGActorSocketName;                                 // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PushButtonActionID;                                // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndObjectLayout) == 0x000008, "Wrong alignment on FEndObjectLayout");
static_assert(sizeof(FEndObjectLayout) == 0x000110, "Wrong size on FEndObjectLayout");
static_assert(offsetof(FEndObjectLayout, NodeName) == 0x0000C0, "Member 'FEndObjectLayout::NodeName' has a wrong offset!");
static_assert(offsetof(FEndObjectLayout, LevelName) == 0x0000D0, "Member 'FEndObjectLayout::LevelName' has a wrong offset!");
static_assert(offsetof(FEndObjectLayout, OverlapActorGroup) == 0x0000D8, "Member 'FEndObjectLayout::OverlapActorGroup' has a wrong offset!");
static_assert(offsetof(FEndObjectLayout, TargetIconResponseAreaForSelf) == 0x0000E0, "Member 'FEndObjectLayout::TargetIconResponseAreaForSelf' has a wrong offset!");
static_assert(offsetof(FEndObjectLayout, TargetIconResponseAreaForOthers) == 0x0000E8, "Member 'FEndObjectLayout::TargetIconResponseAreaForOthers' has a wrong offset!");
static_assert(offsetof(FEndObjectLayout, SituationTriggerID) == 0x0000F0, "Member 'FEndObjectLayout::SituationTriggerID' has a wrong offset!");
static_assert(offsetof(FEndObjectLayout, BGActorName) == 0x0000F8, "Member 'FEndObjectLayout::BGActorName' has a wrong offset!");
static_assert(offsetof(FEndObjectLayout, BGActorSocketName) == 0x000100, "Member 'FEndObjectLayout::BGActorSocketName' has a wrong offset!");
static_assert(offsetof(FEndObjectLayout, PushButtonActionID) == 0x000108, "Member 'FEndObjectLayout::PushButtonActionID' has a wrong offset!");

// ScriptStruct EndGame.EndObjectTreasure
// 0x0068 (0x0128 - 0x00C0)
struct FEndObjectTreasure final : public FEndObjectBase
{
public:
	class FName                                   ActorName;                                         // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StoryFlagName;                                     // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationTargetPointName;                           // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstRewardID;                                     // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondRewardID;                                    // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenStateTriggerID;                                // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObtainStateTriggerID01;                            // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObtainStateTriggerID02;                            // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObtainStateTriggerID03;                            // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObtainStateTriggerID04;                            // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetIconResponseArea;                            // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseArea;                                      // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaForOthers;                             // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndObjectTreasure) == 0x000008, "Wrong alignment on FEndObjectTreasure");
static_assert(sizeof(FEndObjectTreasure) == 0x000128, "Wrong size on FEndObjectTreasure");
static_assert(offsetof(FEndObjectTreasure, ActorName) == 0x0000C0, "Member 'FEndObjectTreasure::ActorName' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, StoryFlagName) == 0x0000C8, "Member 'FEndObjectTreasure::StoryFlagName' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, LocationTargetPointName) == 0x0000D0, "Member 'FEndObjectTreasure::LocationTargetPointName' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, FirstRewardID) == 0x0000D8, "Member 'FEndObjectTreasure::FirstRewardID' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, SecondRewardID) == 0x0000E0, "Member 'FEndObjectTreasure::SecondRewardID' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, OpenStateTriggerID) == 0x0000E8, "Member 'FEndObjectTreasure::OpenStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, ObtainStateTriggerID01) == 0x0000F0, "Member 'FEndObjectTreasure::ObtainStateTriggerID01' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, ObtainStateTriggerID02) == 0x0000F8, "Member 'FEndObjectTreasure::ObtainStateTriggerID02' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, ObtainStateTriggerID03) == 0x000100, "Member 'FEndObjectTreasure::ObtainStateTriggerID03' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, ObtainStateTriggerID04) == 0x000108, "Member 'FEndObjectTreasure::ObtainStateTriggerID04' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, TargetIconResponseArea) == 0x000110, "Member 'FEndObjectTreasure::TargetIconResponseArea' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, ResponseArea) == 0x000118, "Member 'FEndObjectTreasure::ResponseArea' has a wrong offset!");
static_assert(offsetof(FEndObjectTreasure, ResponseAreaForOthers) == 0x000120, "Member 'FEndObjectTreasure::ResponseAreaForOthers' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorMushroomPickingMushroomExtraAction
// 0x0030 (0x0430 - 0x0400)
struct FEndBehaviorMushroomPickingMushroomExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x30];                                     // 0x0400(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorMushroomPickingMushroomExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorMushroomPickingMushroomExtraAction");
static_assert(sizeof(FEndBehaviorMushroomPickingMushroomExtraAction) == 0x000430, "Wrong size on FEndBehaviorMushroomPickingMushroomExtraAction");

// ScriptStruct EndGame.EndObjectParty
// 0x0018 (0x00D8 - 0x00C0)
struct FEndObjectParty final : public FEndObjectBase
{
public:
	class FName                                   ActorName;                                         // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetIconResponseAreaForSelf;                     // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetIconResponseAreaForOthers;                   // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndObjectParty) == 0x000008, "Wrong alignment on FEndObjectParty");
static_assert(sizeof(FEndObjectParty) == 0x0000D8, "Wrong size on FEndObjectParty");
static_assert(offsetof(FEndObjectParty, ActorName) == 0x0000C0, "Member 'FEndObjectParty::ActorName' has a wrong offset!");
static_assert(offsetof(FEndObjectParty, TargetIconResponseAreaForSelf) == 0x0000C8, "Member 'FEndObjectParty::TargetIconResponseAreaForSelf' has a wrong offset!");
static_assert(offsetof(FEndObjectParty, TargetIconResponseAreaForOthers) == 0x0000D0, "Member 'FEndObjectParty::TargetIconResponseAreaForOthers' has a wrong offset!");

// ScriptStruct EndGame.EndObjectEnemy
// 0x0020 (0x00E0 - 0x00C0)
struct FEndObjectEnemy final : public FEndObjectBase
{
public:
	class FName                                   ActorName;                                         // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaSpecID;                                 // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   battleSceneID;                                     // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PopActorType;                                      // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NearFarFadeState;                                  // 0x00D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndObjectEnemy) == 0x000008, "Wrong alignment on FEndObjectEnemy");
static_assert(sizeof(FEndObjectEnemy) == 0x0000E0, "Wrong size on FEndObjectEnemy");
static_assert(offsetof(FEndObjectEnemy, ActorName) == 0x0000C0, "Member 'FEndObjectEnemy::ActorName' has a wrong offset!");
static_assert(offsetof(FEndObjectEnemy, BattleCharaSpecID) == 0x0000C8, "Member 'FEndObjectEnemy::BattleCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndObjectEnemy, battleSceneID) == 0x0000D0, "Member 'FEndObjectEnemy::battleSceneID' has a wrong offset!");
static_assert(offsetof(FEndObjectEnemy, PopActorType) == 0x0000D8, "Member 'FEndObjectEnemy::PopActorType' has a wrong offset!");
static_assert(offsetof(FEndObjectEnemy, NearFarFadeState) == 0x0000D9, "Member 'FEndObjectEnemy::NearFarFadeState' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorLoopExtraAction
// 0x0010 (0x0410 - 0x0400)
struct FEndBehaviorLoopExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x10];                                     // 0x0400(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorLoopExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorLoopExtraAction");
static_assert(sizeof(FEndBehaviorLoopExtraAction) == 0x000410, "Wrong size on FEndBehaviorLoopExtraAction");

// ScriptStruct EndGame.EndObjectActor
// 0x0028 (0x00E8 - 0x00C0)
struct FEndObjectActor final : public FEndObjectBase
{
public:
	class FName                                   ActorName;                                         // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaSpecID;                                       // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetIconResponseAreaForSelf;                     // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetIconResponseAreaForOthers;                   // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PopActorType;                                      // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NearFarFadeState;                                  // 0x00E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ImportanceType;                                    // 0x00E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndObjectActor) == 0x000008, "Wrong alignment on FEndObjectActor");
static_assert(sizeof(FEndObjectActor) == 0x0000E8, "Wrong size on FEndObjectActor");
static_assert(offsetof(FEndObjectActor, ActorName) == 0x0000C0, "Member 'FEndObjectActor::ActorName' has a wrong offset!");
static_assert(offsetof(FEndObjectActor, CharaSpecID) == 0x0000C8, "Member 'FEndObjectActor::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndObjectActor, TargetIconResponseAreaForSelf) == 0x0000D0, "Member 'FEndObjectActor::TargetIconResponseAreaForSelf' has a wrong offset!");
static_assert(offsetof(FEndObjectActor, TargetIconResponseAreaForOthers) == 0x0000D8, "Member 'FEndObjectActor::TargetIconResponseAreaForOthers' has a wrong offset!");
static_assert(offsetof(FEndObjectActor, PopActorType) == 0x0000E0, "Member 'FEndObjectActor::PopActorType' has a wrong offset!");
static_assert(offsetof(FEndObjectActor, NearFarFadeState) == 0x0000E1, "Member 'FEndObjectActor::NearFarFadeState' has a wrong offset!");
static_assert(offsetof(FEndObjectActor, ImportanceType) == 0x0000E2, "Member 'FEndObjectActor::ImportanceType' has a wrong offset!");

// ScriptStruct EndGame.StateObjectHandle
// 0x0018 (0x0018 - 0x0000)
struct FStateObjectHandle final
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OwnerGUID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateObjectHandle) == 0x000008, "Wrong alignment on FStateObjectHandle");
static_assert(sizeof(FStateObjectHandle) == 0x000018, "Wrong size on FStateObjectHandle");
static_assert(offsetof(FStateObjectHandle, Guid) == 0x000000, "Member 'FStateObjectHandle::Guid' has a wrong offset!");
static_assert(offsetof(FStateObjectHandle, OwnerGUID) == 0x000008, "Member 'FStateObjectHandle::OwnerGUID' has a wrong offset!");
static_assert(offsetof(FStateObjectHandle, StateName) == 0x000010, "Member 'FStateObjectHandle::StateName' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorPipeSlideExtraAction
// 0x0140 (0x0550 - 0x0410)
struct FEndBehaviorPipeSlideExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x140];                                    // 0x0410(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorPipeSlideExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorPipeSlideExtraAction");
static_assert(sizeof(FEndBehaviorPipeSlideExtraAction) == 0x000550, "Wrong size on FEndBehaviorPipeSlideExtraAction");

// ScriptStruct EndGame.EndAutoRotateCameraModule
// 0x0150 (0x0540 - 0x03F0)
struct alignas(0x10) FEndAutoRotateCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x150];                                    // 0x03F0(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAutoRotateCameraModule) == 0x000010, "Wrong alignment on FEndAutoRotateCameraModule");
static_assert(sizeof(FEndAutoRotateCameraModule) == 0x000540, "Wrong size on FEndAutoRotateCameraModule");

// ScriptStruct EndGame.EndAutoSeComponentAssetTableNonAttribute
// 0x0038 (0x0038 - 0x0000)
struct FEndAutoSeComponentAssetTableNonAttribute final
{
public:
	int32                                         SoundIndexes[0xE];                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAutoSeComponentAssetTableNonAttribute) == 0x000004, "Wrong alignment on FEndAutoSeComponentAssetTableNonAttribute");
static_assert(sizeof(FEndAutoSeComponentAssetTableNonAttribute) == 0x000038, "Wrong size on FEndAutoSeComponentAssetTableNonAttribute");
static_assert(offsetof(FEndAutoSeComponentAssetTableNonAttribute, SoundIndexes) == 0x000000, "Member 'FEndAutoSeComponentAssetTableNonAttribute::SoundIndexes' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSingleNodeExtraAction
// 0x0080 (0x0480 - 0x0400)
struct FEndBehaviorSingleNodeExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x80];                                     // 0x0400(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSingleNodeExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSingleNodeExtraAction");
static_assert(sizeof(FEndBehaviorSingleNodeExtraAction) == 0x000480, "Wrong size on FEndBehaviorSingleNodeExtraAction");

// ScriptStruct EndGame.EndAutoSeComponentAssetTablePerAttribute
// 0x0020 (0x0020 - 0x0000)
struct FEndAutoSeComponentAssetTablePerAttribute final
{
public:
	int32                                         SoundIndexes[0x8];                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAutoSeComponentAssetTablePerAttribute) == 0x000004, "Wrong alignment on FEndAutoSeComponentAssetTablePerAttribute");
static_assert(sizeof(FEndAutoSeComponentAssetTablePerAttribute) == 0x000020, "Wrong size on FEndAutoSeComponentAssetTablePerAttribute");
static_assert(offsetof(FEndAutoSeComponentAssetTablePerAttribute, SoundIndexes) == 0x000000, "Member 'FEndAutoSeComponentAssetTablePerAttribute::SoundIndexes' has a wrong offset!");

// ScriptStruct EndGame.RageDush
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FRageDush final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0024(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnSpeed;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitTargetRadius;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitStopRadius;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitStopTime;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRageDush) == 0x000008, "Wrong alignment on FRageDush");
static_assert(sizeof(FRageDush) == 0x000040, "Wrong size on FRageDush");
static_assert(offsetof(FRageDush, ID) == 0x000024, "Member 'FRageDush::ID' has a wrong offset!");
static_assert(offsetof(FRageDush, TurnSpeed) == 0x00002C, "Member 'FRageDush::TurnSpeed' has a wrong offset!");
static_assert(offsetof(FRageDush, HitTargetRadius) == 0x000030, "Member 'FRageDush::HitTargetRadius' has a wrong offset!");
static_assert(offsetof(FRageDush, HitStopRadius) == 0x000034, "Member 'FRageDush::HitStopRadius' has a wrong offset!");
static_assert(offsetof(FRageDush, HitStopTime) == 0x000038, "Member 'FRageDush::HitStopTime' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorBattleAbilityExtraAction
// 0x0140 (0x0540 - 0x0400)
struct FEndBehaviorBattleAbilityExtraAction : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x140];                                    // 0x0400(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorBattleAbilityExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorBattleAbilityExtraAction");
static_assert(sizeof(FEndBehaviorBattleAbilityExtraAction) == 0x000540, "Wrong size on FEndBehaviorBattleAbilityExtraAction");

// ScriptStruct EndGame.EndBehaviorQuickTurnAttackExtraAction
// 0x0020 (0x0560 - 0x0540)
struct FEndBehaviorQuickTurnAttackExtraAction final : public FEndBehaviorBattleAbilityExtraAction
{
public:
	uint8                                         Pad_540[0x20];                                     // 0x0540(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorQuickTurnAttackExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorQuickTurnAttackExtraAction");
static_assert(sizeof(FEndBehaviorQuickTurnAttackExtraAction) == 0x000560, "Wrong size on FEndBehaviorQuickTurnAttackExtraAction");

// ScriptStruct EndGame.EndBattleBreakableAttachData
// 0x0010 (0x0010 - 0x0000)
struct FEndBattleBreakableAttachData final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleBreakableAttachData) == 0x000004, "Wrong alignment on FEndBattleBreakableAttachData");
static_assert(sizeof(FEndBattleBreakableAttachData) == 0x000010, "Wrong size on FEndBattleBreakableAttachData");
static_assert(offsetof(FEndBattleBreakableAttachData, SocketName) == 0x000000, "Member 'FEndBattleBreakableAttachData::SocketName' has a wrong offset!");
static_assert(offsetof(FEndBattleBreakableAttachData, ActorName) == 0x000008, "Member 'FEndBattleBreakableAttachData::ActorName' has a wrong offset!");

// ScriptStruct EndGame.EndSkillCameraModule
// 0x0148 (0x0538 - 0x03F0)
struct FEndSkillCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x148];                                    // 0x03F0(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSkillCameraModule) == 0x000008, "Wrong alignment on FEndSkillCameraModule");
static_assert(sizeof(FEndSkillCameraModule) == 0x000538, "Wrong size on FEndSkillCameraModule");

// ScriptStruct EndGame.EndBehaviorOperateControlPanelExtraAction
// 0x0030 (0x0430 - 0x0400)
struct FEndBehaviorOperateControlPanelExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x30];                                     // 0x0400(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorOperateControlPanelExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorOperateControlPanelExtraAction");
static_assert(sizeof(FEndBehaviorOperateControlPanelExtraAction) == 0x000430, "Wrong size on FEndBehaviorOperateControlPanelExtraAction");

// ScriptStruct EndGame.EndModularCameraOperator
// 0x0688 (0x0770 - 0x00E8)
struct FEndModularCameraOperator : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0x688];                                     // 0x00E8(0x0688)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndModularCameraOperator) == 0x000008, "Wrong alignment on FEndModularCameraOperator");
static_assert(sizeof(FEndModularCameraOperator) == 0x000770, "Wrong size on FEndModularCameraOperator");

// ScriptStruct EndGame.EndBattleCameraOperator
// 0x0000 (0x0770 - 0x0770)
struct FEndBattleCameraOperator final : public FEndModularCameraOperator
{
};
static_assert(alignof(FEndBattleCameraOperator) == 0x000008, "Wrong alignment on FEndBattleCameraOperator");
static_assert(sizeof(FEndBattleCameraOperator) == 0x000770, "Wrong size on FEndBattleCameraOperator");

// ScriptStruct EndGame.EndBehaviorVehicleRideOnExtraActionBase
// 0x0070 (0x0470 - 0x0400)
struct FEndBehaviorVehicleRideOnExtraActionBase : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x70];                                     // 0x0400(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorVehicleRideOnExtraActionBase) == 0x000010, "Wrong alignment on FEndBehaviorVehicleRideOnExtraActionBase");
static_assert(sizeof(FEndBehaviorVehicleRideOnExtraActionBase) == 0x000470, "Wrong size on FEndBehaviorVehicleRideOnExtraActionBase");

// ScriptStruct EndGame.EndBehaviorSBScooterRideOnExtraAction
// 0x0000 (0x0470 - 0x0470)
struct FEndBehaviorSBScooterRideOnExtraAction final : public FEndBehaviorVehicleRideOnExtraActionBase
{
};
static_assert(alignof(FEndBehaviorSBScooterRideOnExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSBScooterRideOnExtraAction");
static_assert(sizeof(FEndBehaviorSBScooterRideOnExtraAction) == 0x000470, "Wrong size on FEndBehaviorSBScooterRideOnExtraAction");

// ScriptStruct EndGame.EndBattleDamageSourceCollisionDataCapsule
// 0x0020 (0x0020 - 0x0000)
struct FEndBattleDamageSourceCollisionDataCapsule final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleDamageSourceCollisionDataCapsule) == 0x000004, "Wrong alignment on FEndBattleDamageSourceCollisionDataCapsule");
static_assert(sizeof(FEndBattleDamageSourceCollisionDataCapsule) == 0x000020, "Wrong size on FEndBattleDamageSourceCollisionDataCapsule");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataCapsule, Center) == 0x000000, "Member 'FEndBattleDamageSourceCollisionDataCapsule::Center' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataCapsule, Rotation) == 0x00000C, "Member 'FEndBattleDamageSourceCollisionDataCapsule::Rotation' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataCapsule, Radius) == 0x000018, "Member 'FEndBattleDamageSourceCollisionDataCapsule::Radius' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataCapsule, Length) == 0x00001C, "Member 'FEndBattleDamageSourceCollisionDataCapsule::Length' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBodySpline_BoneCache
// 0x0040 (0x0040 - 0x0000)
struct FRigUnit_EndBodySpline_BoneCache final
{
public:
	struct FCachedRigElement                      CachedItem;                                        // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  DeltaRotation;                                     // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndBodySpline_BoneCache) == 0x000010, "Wrong alignment on FRigUnit_EndBodySpline_BoneCache");
static_assert(sizeof(FRigUnit_EndBodySpline_BoneCache) == 0x000040, "Wrong size on FRigUnit_EndBodySpline_BoneCache");
static_assert(offsetof(FRigUnit_EndBodySpline_BoneCache, CachedItem) == 0x000000, "Member 'FRigUnit_EndBodySpline_BoneCache::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_BoneCache, DeltaRotation) == 0x000020, "Member 'FRigUnit_EndBodySpline_BoneCache::DeltaRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_BoneCache, Alpha) == 0x000030, "Member 'FRigUnit_EndBodySpline_BoneCache::Alpha' has a wrong offset!");

// ScriptStruct EndGame.EndBattleDamageSourceCollisionDataBox
// 0x0024 (0x0024 - 0x0000)
struct FEndBattleDamageSourceCollisionDataBox final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleDamageSourceCollisionDataBox) == 0x000004, "Wrong alignment on FEndBattleDamageSourceCollisionDataBox");
static_assert(sizeof(FEndBattleDamageSourceCollisionDataBox) == 0x000024, "Wrong size on FEndBattleDamageSourceCollisionDataBox");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataBox, Center) == 0x000000, "Member 'FEndBattleDamageSourceCollisionDataBox::Center' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataBox, Rotation) == 0x00000C, "Member 'FEndBattleDamageSourceCollisionDataBox::Rotation' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataBox, X) == 0x000018, "Member 'FEndBattleDamageSourceCollisionDataBox::X' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataBox, Y) == 0x00001C, "Member 'FEndBattleDamageSourceCollisionDataBox::Y' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataBox, Z) == 0x000020, "Member 'FEndBattleDamageSourceCollisionDataBox::Z' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSequentialExtraAction
// 0x00C0 (0x04C0 - 0x0400)
struct FEndBehaviorSequentialExtraAction : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0xC0];                                     // 0x0400(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSequentialExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSequentialExtraAction");
static_assert(sizeof(FEndBehaviorSequentialExtraAction) == 0x0004C0, "Wrong size on FEndBehaviorSequentialExtraAction");

// ScriptStruct EndGame.EndBehaviorSwitchBehaviorExtraAction
// 0x0010 (0x04D0 - 0x04C0)
struct FEndBehaviorSwitchBehaviorExtraAction final : public FEndBehaviorSequentialExtraAction
{
public:
	uint8                                         Pad_4C0[0x10];                                     // 0x04C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSwitchBehaviorExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSwitchBehaviorExtraAction");
static_assert(sizeof(FEndBehaviorSwitchBehaviorExtraAction) == 0x0004D0, "Wrong size on FEndBehaviorSwitchBehaviorExtraAction");

// ScriptStruct EndGame.EndBattleDamageSourceCollisionDataSphere
// 0x0010 (0x0010 - 0x0000)
struct FEndBattleDamageSourceCollisionDataSphere final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleDamageSourceCollisionDataSphere) == 0x000004, "Wrong alignment on FEndBattleDamageSourceCollisionDataSphere");
static_assert(sizeof(FEndBattleDamageSourceCollisionDataSphere) == 0x000010, "Wrong size on FEndBattleDamageSourceCollisionDataSphere");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataSphere, Center) == 0x000000, "Member 'FEndBattleDamageSourceCollisionDataSphere::Center' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataSphere, Radius) == 0x00000C, "Member 'FEndBattleDamageSourceCollisionDataSphere::Radius' has a wrong offset!");

// ScriptStruct EndGame.EndBattleOffsetModule
// 0x0030 (0x0420 - 0x03F0)
struct FEndBattleOffsetModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x30];                                     // 0x03F0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBattleOffsetModule) == 0x000008, "Wrong alignment on FEndBattleOffsetModule");
static_assert(sizeof(FEndBattleOffsetModule) == 0x000420, "Wrong size on FEndBattleOffsetModule");

// ScriptStruct EndGame.EndBehaviorSlu7pHoldHandsAction
// 0x0050 (0x0450 - 0x0400)
struct FEndBehaviorSlu7pHoldHandsAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x50];                                     // 0x0400(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSlu7pHoldHandsAction) == 0x000010, "Wrong alignment on FEndBehaviorSlu7pHoldHandsAction");
static_assert(sizeof(FEndBehaviorSlu7pHoldHandsAction) == 0x000450, "Wrong size on FEndBehaviorSlu7pHoldHandsAction");

// ScriptStruct EndGame.EndCliffDataWrapper
// 0x000C (0x000C - 0x0000)
struct FEndCliffDataWrapper final
{
public:
	struct FVector                                CliffDirection;                                    // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCliffDataWrapper) == 0x000004, "Wrong alignment on FEndCliffDataWrapper");
static_assert(sizeof(FEndCliffDataWrapper) == 0x00000C, "Wrong size on FEndCliffDataWrapper");
static_assert(offsetof(FEndCliffDataWrapper, CliffDirection) == 0x000000, "Member 'FEndCliffDataWrapper::CliffDirection' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSBScooterExpressionAction
// 0x00F0 (0x0500 - 0x0410)
struct FEndBehaviorSBScooterExpressionAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0xF0];                                     // 0x0410(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSBScooterExpressionAction) == 0x000010, "Wrong alignment on FEndBehaviorSBScooterExpressionAction");
static_assert(sizeof(FEndBehaviorSBScooterExpressionAction) == 0x000500, "Wrong size on FEndBehaviorSBScooterExpressionAction");

// ScriptStruct EndGame.EndEmissiveColorParameter
// 0x0000 (0x0018 - 0x0018)
struct FEndEmissiveColorParameter : public FMaterialParameterLight
{
};
static_assert(alignof(FEndEmissiveColorParameter) == 0x000004, "Wrong alignment on FEndEmissiveColorParameter");
static_assert(sizeof(FEndEmissiveColorParameter) == 0x000018, "Wrong size on FEndEmissiveColorParameter");

// ScriptStruct EndGame.EndFeelerTornadeBaseAndRandomBias
// 0x000C (0x000C - 0x0000)
struct FEndFeelerTornadeBaseAndRandomBias final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomBiasRange;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerTornadeBaseAndRandomBias) == 0x000004, "Wrong alignment on FEndFeelerTornadeBaseAndRandomBias");
static_assert(sizeof(FEndFeelerTornadeBaseAndRandomBias) == 0x00000C, "Wrong size on FEndFeelerTornadeBaseAndRandomBias");
static_assert(offsetof(FEndFeelerTornadeBaseAndRandomBias, Base) == 0x000000, "Member 'FEndFeelerTornadeBaseAndRandomBias::Base' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeBaseAndRandomBias, RandomBiasRange) == 0x000004, "Member 'FEndFeelerTornadeBaseAndRandomBias::RandomBiasRange' has a wrong offset!");

// ScriptStruct EndGame.EndBoneBlendRate
// 0x0010 (0x0010 - 0x0000)
struct FEndBoneBlendRate final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRate;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBoneBlendRate) == 0x000004, "Wrong alignment on FEndBoneBlendRate");
static_assert(sizeof(FEndBoneBlendRate) == 0x000010, "Wrong size on FEndBoneBlendRate");
static_assert(offsetof(FEndBoneBlendRate, BoneName) == 0x000000, "Member 'FEndBoneBlendRate::BoneName' has a wrong offset!");
static_assert(offsetof(FEndBoneBlendRate, BlendRate) == 0x000008, "Member 'FEndBoneBlendRate::BlendRate' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorAdditiveBlendSpaceExtraAction
// 0x0020 (0x0420 - 0x0400)
struct FEndBehaviorAdditiveBlendSpaceExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x20];                                     // 0x0400(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAdditiveBlendSpaceExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorAdditiveBlendSpaceExtraAction");
static_assert(sizeof(FEndBehaviorAdditiveBlendSpaceExtraAction) == 0x000420, "Wrong size on FEndBehaviorAdditiveBlendSpaceExtraAction");

// ScriptStruct EndGame.RigUnit_EndAim_Item
// 0x0040 (0x0040 - 0x0000)
struct FRigUnit_EndAim_Item final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpAxis;                                            // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0024(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveAngularVelocity;                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeactiveAngularVelocity;                           // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveTranslationVelocity;                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeactiveTranslationVelocity;                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAim_Item) == 0x000004, "Wrong alignment on FRigUnit_EndAim_Item");
static_assert(sizeof(FRigUnit_EndAim_Item) == 0x000040, "Wrong size on FRigUnit_EndAim_Item");
static_assert(offsetof(FRigUnit_EndAim_Item, Item) == 0x000000, "Member 'FRigUnit_EndAim_Item::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Item, Axis) == 0x00000C, "Member 'FRigUnit_EndAim_Item::Axis' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Item, UpAxis) == 0x000018, "Member 'FRigUnit_EndAim_Item::UpAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Item, Offset) == 0x000024, "Member 'FRigUnit_EndAim_Item::Offset' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Item, ActiveAngularVelocity) == 0x000030, "Member 'FRigUnit_EndAim_Item::ActiveAngularVelocity' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Item, DeactiveAngularVelocity) == 0x000034, "Member 'FRigUnit_EndAim_Item::DeactiveAngularVelocity' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Item, ActiveTranslationVelocity) == 0x000038, "Member 'FRigUnit_EndAim_Item::ActiveTranslationVelocity' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Item, DeactiveTranslationVelocity) == 0x00003C, "Member 'FRigUnit_EndAim_Item::DeactiveTranslationVelocity' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAim_EffectorItem
// 0x001C (0x001C - 0x0000)
struct FRigUnit_EndAim_EffectorItem final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpRate;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpOnly;                                           // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TranslationRate;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAim_EffectorItem) == 0x000004, "Wrong alignment on FRigUnit_EndAim_EffectorItem");
static_assert(sizeof(FRigUnit_EndAim_EffectorItem) == 0x00001C, "Wrong size on FRigUnit_EndAim_EffectorItem");
static_assert(offsetof(FRigUnit_EndAim_EffectorItem, Item) == 0x000000, "Member 'FRigUnit_EndAim_EffectorItem::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_EffectorItem, Weight) == 0x00000C, "Member 'FRigUnit_EndAim_EffectorItem::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_EffectorItem, UpRate) == 0x000010, "Member 'FRigUnit_EndAim_EffectorItem::UpRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_EffectorItem, bUpOnly) == 0x000014, "Member 'FRigUnit_EndAim_EffectorItem::bUpOnly' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_EffectorItem, TranslationRate) == 0x000018, "Member 'FRigUnit_EndAim_EffectorItem::TranslationRate' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAim_Effector
// 0x0070 (0x0070 - 0x0000)
struct FRigUnit_EndAim_Effector final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         EffectorItem;                                      // 0x0008(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectorAxis;                                      // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComponentSpaceForwardAim;                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ComponentSpaceAimForward;                          // 0x0024(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ActiveYawRange;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ActivePitchRange;                                  // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationActiveDistance;                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSkipSolvedTarget;                            // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdditiveContinuationTargetScore;                   // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndAim_EffectorItem>   Items;                                             // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndAim_EffectorItem>   ExtendItems;                                       // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAim_Effector) == 0x000008, "Wrong alignment on FRigUnit_EndAim_Effector");
static_assert(sizeof(FRigUnit_EndAim_Effector) == 0x000070, "Wrong size on FRigUnit_EndAim_Effector");
static_assert(offsetof(FRigUnit_EndAim_Effector, Name) == 0x000000, "Member 'FRigUnit_EndAim_Effector::Name' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, EffectorItem) == 0x000008, "Member 'FRigUnit_EndAim_Effector::EffectorItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, EffectorAxis) == 0x000014, "Member 'FRigUnit_EndAim_Effector::EffectorAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, bComponentSpaceForwardAim) == 0x000020, "Member 'FRigUnit_EndAim_Effector::bComponentSpaceForwardAim' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, ComponentSpaceAimForward) == 0x000024, "Member 'FRigUnit_EndAim_Effector::ComponentSpaceAimForward' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, ActiveYawRange) == 0x000030, "Member 'FRigUnit_EndAim_Effector::ActiveYawRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, ActivePitchRange) == 0x000038, "Member 'FRigUnit_EndAim_Effector::ActivePitchRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, TranslationActiveDistance) == 0x000040, "Member 'FRigUnit_EndAim_Effector::TranslationActiveDistance' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, bForceSkipSolvedTarget) == 0x000044, "Member 'FRigUnit_EndAim_Effector::bForceSkipSolvedTarget' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, AdditiveContinuationTargetScore) == 0x000048, "Member 'FRigUnit_EndAim_Effector::AdditiveContinuationTargetScore' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, Items) == 0x000050, "Member 'FRigUnit_EndAim_Effector::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Effector, ExtendItems) == 0x000060, "Member 'FRigUnit_EndAim_Effector::ExtendItems' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAim_Settings
// 0x0040 (0x0040 - 0x0000)
struct FRigUnit_EndAim_Settings final
{
public:
	TArray<struct FRigUnit_EndAim_Item>           Items;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndAim_Effector>       Effectors;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigElementKey                         AimBaseItem;                                       // 0x0020(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AimBaseAxis;                                       // 0x002C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampHorizontalDistanceMin;                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndAim_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndAim_Settings");
static_assert(sizeof(FRigUnit_EndAim_Settings) == 0x000040, "Wrong size on FRigUnit_EndAim_Settings");
static_assert(offsetof(FRigUnit_EndAim_Settings, Items) == 0x000000, "Member 'FRigUnit_EndAim_Settings::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Settings, Effectors) == 0x000010, "Member 'FRigUnit_EndAim_Settings::Effectors' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Settings, AimBaseItem) == 0x000020, "Member 'FRigUnit_EndAim_Settings::AimBaseItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Settings, AimBaseAxis) == 0x00002C, "Member 'FRigUnit_EndAim_Settings::AimBaseAxis' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim_Settings, ClampHorizontalDistanceMin) == 0x000038, "Member 'FRigUnit_EndAim_Settings::ClampHorizontalDistanceMin' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorAdditiveSequenceExtraAction
// 0x0020 (0x0420 - 0x0400)
struct FEndBehaviorAdditiveSequenceExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x20];                                     // 0x0400(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAdditiveSequenceExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorAdditiveSequenceExtraAction");
static_assert(sizeof(FEndBehaviorAdditiveSequenceExtraAction) == 0x000420, "Wrong size on FEndBehaviorAdditiveSequenceExtraAction");

// ScriptStruct EndGame.EndBehaviorUseFA0222ControlPanelExtraAction
// 0x0030 (0x0430 - 0x0400)
struct FEndBehaviorUseFA0222ControlPanelExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x30];                                     // 0x0400(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorUseFA0222ControlPanelExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorUseFA0222ControlPanelExtraAction");
static_assert(sizeof(FEndBehaviorUseFA0222ControlPanelExtraAction) == 0x000430, "Wrong size on FEndBehaviorUseFA0222ControlPanelExtraAction");

// ScriptStruct EndGame.EndBehaviorAICharacterExtraAction
// 0x0080 (0x0480 - 0x0400)
struct FEndBehaviorAICharacterExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x80];                                     // 0x0400(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAICharacterExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorAICharacterExtraAction");
static_assert(sizeof(FEndBehaviorAICharacterExtraAction) == 0x000480, "Wrong size on FEndBehaviorAICharacterExtraAction");

// ScriptStruct EndGame.EndGroupBoneSetting
// 0x0070 (0x0070 - 0x0000)
struct FEndGroupBoneSetting final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   RootBoneName;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityThreshold;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityMax;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEXSEADSoundKey                      Sound;                                             // 0x0020(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      OverrideAttenuation;                               // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      OverrideConvurrency;                               // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSupressionTimeSec;                             // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndGroupBoneSetting) == 0x000008, "Wrong alignment on FEndGroupBoneSetting");
static_assert(sizeof(FEndGroupBoneSetting) == 0x000070, "Wrong size on FEndGroupBoneSetting");
static_assert(offsetof(FEndGroupBoneSetting, BoneNames) == 0x000000, "Member 'FEndGroupBoneSetting::BoneNames' has a wrong offset!");
static_assert(offsetof(FEndGroupBoneSetting, RootBoneName) == 0x000010, "Member 'FEndGroupBoneSetting::RootBoneName' has a wrong offset!");
static_assert(offsetof(FEndGroupBoneSetting, VelocityThreshold) == 0x000018, "Member 'FEndGroupBoneSetting::VelocityThreshold' has a wrong offset!");
static_assert(offsetof(FEndGroupBoneSetting, VelocityMax) == 0x00001C, "Member 'FEndGroupBoneSetting::VelocityMax' has a wrong offset!");
static_assert(offsetof(FEndGroupBoneSetting, Sound) == 0x000020, "Member 'FEndGroupBoneSetting::Sound' has a wrong offset!");
static_assert(offsetof(FEndGroupBoneSetting, OverrideAttenuation) == 0x000058, "Member 'FEndGroupBoneSetting::OverrideAttenuation' has a wrong offset!");
static_assert(offsetof(FEndGroupBoneSetting, OverrideConvurrency) == 0x000060, "Member 'FEndGroupBoneSetting::OverrideConvurrency' has a wrong offset!");
static_assert(offsetof(FEndGroupBoneSetting, MoveSupressionTimeSec) == 0x000068, "Member 'FEndGroupBoneSetting::MoveSupressionTimeSec' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorJumpExtraAction
// 0x0090 (0x0720 - 0x0690)
struct FEndBehaviorJumpExtraAction : public FEndBehaviorSimpleFsmExtraAction
{
public:
	uint8                                         Pad_690[0x90];                                     // 0x0690(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorJumpExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorJumpExtraAction");
static_assert(sizeof(FEndBehaviorJumpExtraAction) == 0x000720, "Wrong size on FEndBehaviorJumpExtraAction");

// ScriptStruct EndGame.EndBehaviorAnimalRunJumpExtraAction
// 0x0010 (0x0730 - 0x0720)
struct FEndBehaviorAnimalRunJumpExtraAction final : public FEndBehaviorJumpExtraAction
{
public:
	uint8                                         Pad_720[0x10];                                     // 0x0720(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAnimalRunJumpExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorAnimalRunJumpExtraAction");
static_assert(sizeof(FEndBehaviorAnimalRunJumpExtraAction) == 0x000730, "Wrong size on FEndBehaviorAnimalRunJumpExtraAction");

// ScriptStruct EndGame.EndBodySubCollisionData
// 0x0040 (0x0040 - 0x0000)
struct FEndBodySubCollisionData final
{
public:
	EEndCollision                                 ShapeType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GroupName;                                         // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShapeSize;                                         // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAttatchToMesh;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSlopeCheck;                                 // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConnectFromRoot;                                  // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableMoveOnlyXY;                                // 0x003E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowForcePushBack;                               // 0x003F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBodySubCollisionData) == 0x000004, "Wrong alignment on FEndBodySubCollisionData");
static_assert(sizeof(FEndBodySubCollisionData) == 0x000040, "Wrong size on FEndBodySubCollisionData");
static_assert(offsetof(FEndBodySubCollisionData, ShapeType) == 0x000000, "Member 'FEndBodySubCollisionData::ShapeType' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionData, GroupName) == 0x000004, "Member 'FEndBodySubCollisionData::GroupName' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionData, ShapeSize) == 0x00000C, "Member 'FEndBodySubCollisionData::ShapeSize' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionData, Location) == 0x000018, "Member 'FEndBodySubCollisionData::Location' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionData, Rotation) == 0x000024, "Member 'FEndBodySubCollisionData::Rotation' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionData, bAttatchToMesh) == 0x000030, "Member 'FEndBodySubCollisionData::bAttatchToMesh' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionData, SocketName) == 0x000034, "Member 'FEndBodySubCollisionData::SocketName' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionData, bEnableSlopeCheck) == 0x00003C, "Member 'FEndBodySubCollisionData::bEnableSlopeCheck' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionData, bConnectFromRoot) == 0x00003D, "Member 'FEndBodySubCollisionData::bConnectFromRoot' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionData, bDisableMoveOnlyXY) == 0x00003E, "Member 'FEndBodySubCollisionData::bDisableMoveOnlyXY' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionData, bAllowForcePushBack) == 0x00003F, "Member 'FEndBodySubCollisionData::bAllowForcePushBack' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorAppearanceExtraAction
// 0x00F0 (0x0780 - 0x0690)
struct FEndBehaviorAppearanceExtraAction final : public FEndBehaviorSimpleFsmExtraAction
{
public:
	uint8                                         Pad_690[0xF0];                                     // 0x0690(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAppearanceExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorAppearanceExtraAction");
static_assert(sizeof(FEndBehaviorAppearanceExtraAction) == 0x000780, "Wrong size on FEndBehaviorAppearanceExtraAction");

// ScriptStruct EndGame.EndBehaviorBalanceMoveExtraAction
// 0x0110 (0x0510 - 0x0400)
struct FEndBehaviorBalanceMoveExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x110];                                    // 0x0400(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorBalanceMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorBalanceMoveExtraAction");
static_assert(sizeof(FEndBehaviorBalanceMoveExtraAction) == 0x000510, "Wrong size on FEndBehaviorBalanceMoveExtraAction");

// ScriptStruct EndGame.EndBehaviorUpperBodyExtraAction
// 0x0180 (0x0810 - 0x0690)
struct FEndBehaviorUpperBodyExtraAction final : public FEndBehaviorSimpleFsmExtraAction
{
public:
	uint8                                         Pad_690[0x180];                                    // 0x0690(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorUpperBodyExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorUpperBodyExtraAction");
static_assert(sizeof(FEndBehaviorUpperBodyExtraAction) == 0x000810, "Wrong size on FEndBehaviorUpperBodyExtraAction");

// ScriptStruct EndGame.RigUnit_EndContactShake_DebugSettings
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_EndContactShake_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         TargetItem;                                        // 0x0004(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndContactShake_DebugSettings) == 0x000004, "Wrong alignment on FRigUnit_EndContactShake_DebugSettings");
static_assert(sizeof(FRigUnit_EndContactShake_DebugSettings) == 0x000010, "Wrong size on FRigUnit_EndContactShake_DebugSettings");
static_assert(offsetof(FRigUnit_EndContactShake_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndContactShake_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_DebugSettings, TargetItem) == 0x000004, "Member 'FRigUnit_EndContactShake_DebugSettings::TargetItem' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterLockOnInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndBikeAIHelicopterLockOnInfo final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tracking;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeAIHelicopterLockOnInfo) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterLockOnInfo");
static_assert(sizeof(FEndBikeAIHelicopterLockOnInfo) == 0x000010, "Wrong size on FEndBikeAIHelicopterLockOnInfo");
static_assert(offsetof(FEndBikeAIHelicopterLockOnInfo, DamageSourceID) == 0x000000, "Member 'FEndBikeAIHelicopterLockOnInfo::DamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterLockOnInfo, DelayTime) == 0x000008, "Member 'FEndBikeAIHelicopterLockOnInfo::DelayTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterLockOnInfo, Tracking) == 0x00000C, "Member 'FEndBikeAIHelicopterLockOnInfo::Tracking' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterLockOnInfoList
// 0x0018 (0x0018 - 0x0000)
struct FEndBikeAIHelicopterLockOnInfoList final
{
public:
	bool                                          bDisableCreateLockOnEffect;                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndBikeAIHelicopterLockOnInfo> InfoList;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterLockOnInfoList) == 0x000008, "Wrong alignment on FEndBikeAIHelicopterLockOnInfoList");
static_assert(sizeof(FEndBikeAIHelicopterLockOnInfoList) == 0x000018, "Wrong size on FEndBikeAIHelicopterLockOnInfoList");
static_assert(offsetof(FEndBikeAIHelicopterLockOnInfoList, bDisableCreateLockOnEffect) == 0x000000, "Member 'FEndBikeAIHelicopterLockOnInfoList::bDisableCreateLockOnEffect' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterLockOnInfoList, InfoList) == 0x000008, "Member 'FEndBikeAIHelicopterLockOnInfoList::InfoList' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerLaserBaseAndRandomBias
// 0x000C (0x000C - 0x0000)
struct FEndFeelerLaserBaseAndRandomBias final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomBiasRange;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerLaserBaseAndRandomBias) == 0x000004, "Wrong alignment on FEndFeelerLaserBaseAndRandomBias");
static_assert(sizeof(FEndFeelerLaserBaseAndRandomBias) == 0x00000C, "Wrong size on FEndFeelerLaserBaseAndRandomBias");
static_assert(offsetof(FEndFeelerLaserBaseAndRandomBias, Base) == 0x000000, "Member 'FEndFeelerLaserBaseAndRandomBias::Base' has a wrong offset!");
static_assert(offsetof(FEndFeelerLaserBaseAndRandomBias, RandomBiasRange) == 0x000004, "Member 'FEndFeelerLaserBaseAndRandomBias::RandomBiasRange' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorBarretComboExtraAction
// 0x0270 (0x06F0 - 0x0480)
struct FEndBehaviorBarretComboExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x270];                                    // 0x0480(0x0270)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorBarretComboExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorBarretComboExtraAction");
static_assert(sizeof(FEndBehaviorBarretComboExtraAction) == 0x0006F0, "Wrong size on FEndBehaviorBarretComboExtraAction");

// ScriptStruct EndGame.EndFeelerFollowingTimeRateAndSize
// 0x000C (0x000C - 0x0000)
struct FEndFeelerFollowingTimeRateAndSize final
{
public:
	float                                         TimeRate;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRateSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerFollowingTimeRateAndSize) == 0x000004, "Wrong alignment on FEndFeelerFollowingTimeRateAndSize");
static_assert(sizeof(FEndFeelerFollowingTimeRateAndSize) == 0x00000C, "Wrong size on FEndFeelerFollowingTimeRateAndSize");
static_assert(offsetof(FEndFeelerFollowingTimeRateAndSize, TimeRate) == 0x000000, "Member 'FEndFeelerFollowingTimeRateAndSize::TimeRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingTimeRateAndSize, TimeRateSpeed) == 0x000004, "Member 'FEndFeelerFollowingTimeRateAndSize::TimeRateSpeed' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingTimeRateAndSize, Size) == 0x000008, "Member 'FEndFeelerFollowingTimeRateAndSize::Size' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorVaultExtraAction
// 0x0AB0 (0x0F30 - 0x0480)
struct FEndBehaviorVaultExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0xAB0];                                    // 0x0480(0x0AB0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorVaultExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorVaultExtraAction");
static_assert(sizeof(FEndBehaviorVaultExtraAction) == 0x000F30, "Wrong size on FEndBehaviorVaultExtraAction");

// ScriptStruct EndGame.EndBehaviorCaitSithGetOffExtraAction
// 0x0020 (0x0420 - 0x0400)
struct FEndBehaviorCaitSithGetOffExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x20];                                     // 0x0400(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorCaitSithGetOffExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorCaitSithGetOffExtraAction");
static_assert(sizeof(FEndBehaviorCaitSithGetOffExtraAction) == 0x000420, "Wrong size on FEndBehaviorCaitSithGetOffExtraAction");

// ScriptStruct EndGame.EndMassiveEnvironmentRenderData
// 0x0010 (0x0010 - 0x0000)
struct FEndMassiveEnvironmentRenderData final
{
public:
	TArray<uint8>                                 RequestedMeshMipIndices;                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMassiveEnvironmentRenderData) == 0x000008, "Wrong alignment on FEndMassiveEnvironmentRenderData");
static_assert(sizeof(FEndMassiveEnvironmentRenderData) == 0x000010, "Wrong size on FEndMassiveEnvironmentRenderData");
static_assert(offsetof(FEndMassiveEnvironmentRenderData, RequestedMeshMipIndices) == 0x000000, "Member 'FEndMassiveEnvironmentRenderData::RequestedMeshMipIndices' has a wrong offset!");

// ScriptStruct EndGame.EndMassiveEnvironmentComponent
// 0x0018 (0x0018 - 0x0000)
struct FEndMassiveEnvironmentComponent final
{
public:
	TArray<struct FEndMassiveEnvironmentRenderData> RenderData;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AssetPathIndex;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMassiveEnvironmentComponent) == 0x000008, "Wrong alignment on FEndMassiveEnvironmentComponent");
static_assert(sizeof(FEndMassiveEnvironmentComponent) == 0x000018, "Wrong size on FEndMassiveEnvironmentComponent");
static_assert(offsetof(FEndMassiveEnvironmentComponent, RenderData) == 0x000000, "Member 'FEndMassiveEnvironmentComponent::RenderData' has a wrong offset!");
static_assert(offsetof(FEndMassiveEnvironmentComponent, AssetPathIndex) == 0x000010, "Member 'FEndMassiveEnvironmentComponent::AssetPathIndex' has a wrong offset!");

// ScriptStruct EndGame.EndStreamableAssets
// 0x0038 (0x0038 - 0x0000)
struct FEndStreamableAssets final
{
public:
	class FName                                   ViewTarget;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CutIndex;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        FrameCounter;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndStreamableAssetData>        StreamableAssetData;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEndMassiveEnvironmentComponent> StreamableMEComponents;                            // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndStreamableAssets) == 0x000008, "Wrong alignment on FEndStreamableAssets");
static_assert(sizeof(FEndStreamableAssets) == 0x000038, "Wrong size on FEndStreamableAssets");
static_assert(offsetof(FEndStreamableAssets, ViewTarget) == 0x000000, "Member 'FEndStreamableAssets::ViewTarget' has a wrong offset!");
static_assert(offsetof(FEndStreamableAssets, CutIndex) == 0x000008, "Member 'FEndStreamableAssets::CutIndex' has a wrong offset!");
static_assert(offsetof(FEndStreamableAssets, Timestamp) == 0x00000C, "Member 'FEndStreamableAssets::Timestamp' has a wrong offset!");
static_assert(offsetof(FEndStreamableAssets, FrameCounter) == 0x000010, "Member 'FEndStreamableAssets::FrameCounter' has a wrong offset!");
static_assert(offsetof(FEndStreamableAssets, StreamableAssetData) == 0x000018, "Member 'FEndStreamableAssets::StreamableAssetData' has a wrong offset!");
static_assert(offsetof(FEndStreamableAssets, StreamableMEComponents) == 0x000028, "Member 'FEndStreamableAssets::StreamableMEComponents' has a wrong offset!");

// ScriptStruct EndGame.EndPumpData
// 0x0030 (0x0030 - 0x0000)
struct FEndPumpData final
{
public:
	TArray<struct FEndStreamableAssets>           StreamableAssets;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetPaths;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         MassiveEnvironmentAssetPaths;                      // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPumpData) == 0x000008, "Wrong alignment on FEndPumpData");
static_assert(sizeof(FEndPumpData) == 0x000030, "Wrong size on FEndPumpData");
static_assert(offsetof(FEndPumpData, StreamableAssets) == 0x000000, "Member 'FEndPumpData::StreamableAssets' has a wrong offset!");
static_assert(offsetof(FEndPumpData, AssetPaths) == 0x000010, "Member 'FEndPumpData::AssetPaths' has a wrong offset!");
static_assert(offsetof(FEndPumpData, MassiveEnvironmentAssetPaths) == 0x000020, "Member 'FEndPumpData::MassiveEnvironmentAssetPaths' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorCaitSithVentExtraAction
// 0x0140 (0x0550 - 0x0410)
struct FEndBehaviorCaitSithVentExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x140];                                    // 0x0410(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorCaitSithVentExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorCaitSithVentExtraAction");
static_assert(sizeof(FEndBehaviorCaitSithVentExtraAction) == 0x000550, "Wrong size on FEndBehaviorCaitSithVentExtraAction");

// ScriptStruct EndGame.EndBehaviorTreasureExtraAction
// 0x0030 (0x0430 - 0x0400)
struct FEndBehaviorTreasureExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x30];                                     // 0x0400(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorTreasureExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorTreasureExtraAction");
static_assert(sizeof(FEndBehaviorTreasureExtraAction) == 0x000430, "Wrong size on FEndBehaviorTreasureExtraAction");

// ScriptStruct EndGame.EndEnvironmentWaterVolumeAssetUserData_Curve
// 0x0010 (0x0010 - 0x0000)
struct FEndEnvironmentWaterVolumeAssetUserData_Curve final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndEnvironmentWaterVolumeAssetUserData_Curve) == 0x000008, "Wrong alignment on FEndEnvironmentWaterVolumeAssetUserData_Curve");
static_assert(sizeof(FEndEnvironmentWaterVolumeAssetUserData_Curve) == 0x000010, "Wrong size on FEndEnvironmentWaterVolumeAssetUserData_Curve");
static_assert(offsetof(FEndEnvironmentWaterVolumeAssetUserData_Curve, Points) == 0x000000, "Member 'FEndEnvironmentWaterVolumeAssetUserData_Curve::Points' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChickenLureKickExtraAction
// 0x0040 (0x0440 - 0x0400)
struct FEndBehaviorChickenLureKickExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x40];                                     // 0x0400(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChickenLureKickExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChickenLureKickExtraAction");
static_assert(sizeof(FEndBehaviorChickenLureKickExtraAction) == 0x000440, "Wrong size on FEndBehaviorChickenLureKickExtraAction");

// ScriptStruct EndGame.EndFeelerConflictTimeRateAndSize
// 0x000C (0x000C - 0x0000)
struct FEndFeelerConflictTimeRateAndSize final
{
public:
	float                                         TimeRate;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRateSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerConflictTimeRateAndSize) == 0x000004, "Wrong alignment on FEndFeelerConflictTimeRateAndSize");
static_assert(sizeof(FEndFeelerConflictTimeRateAndSize) == 0x00000C, "Wrong size on FEndFeelerConflictTimeRateAndSize");
static_assert(offsetof(FEndFeelerConflictTimeRateAndSize, TimeRate) == 0x000000, "Member 'FEndFeelerConflictTimeRateAndSize::TimeRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictTimeRateAndSize, TimeRateSpeed) == 0x000004, "Member 'FEndFeelerConflictTimeRateAndSize::TimeRateSpeed' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictTimeRateAndSize, Size) == 0x000008, "Member 'FEndFeelerConflictTimeRateAndSize::Size' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChickenLureRopeExtraAction
// 0x0020 (0x0420 - 0x0400)
struct FEndBehaviorChickenLureRopeExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x20];                                     // 0x0400(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChickenLureRopeExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChickenLureRopeExtraAction");
static_assert(sizeof(FEndBehaviorChickenLureRopeExtraAction) == 0x000420, "Wrong size on FEndBehaviorChickenLureRopeExtraAction");

// ScriptStruct EndGame.EndDialogueVibrationSectionTemplate
// 0x0008 (0x0028 - 0x0020)
struct FEndDialogueVibrationSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	class UEndDialogueVibrationPreset*            Preset;                                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDialogueVibrationSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueVibrationSectionTemplate");
static_assert(sizeof(FEndDialogueVibrationSectionTemplate) == 0x000028, "Wrong size on FEndDialogueVibrationSectionTemplate");
static_assert(offsetof(FEndDialogueVibrationSectionTemplate, Preset) == 0x000020, "Member 'FEndDialogueVibrationSectionTemplate::Preset' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorZiplineExtraAction
// 0x0390 (0x0810 - 0x0480)
struct FEndBehaviorZiplineExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x390];                                    // 0x0480(0x0390)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorZiplineExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorZiplineExtraAction");
static_assert(sizeof(FEndBehaviorZiplineExtraAction) == 0x000810, "Wrong size on FEndBehaviorZiplineExtraAction");

// ScriptStruct EndGame.EndBehaviorChocoboClimbExtraAction
// 0x02A0 (0x06B0 - 0x0410)
struct FEndBehaviorChocoboClimbExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x2A0];                                    // 0x0410(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboClimbExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboClimbExtraAction");
static_assert(sizeof(FEndBehaviorChocoboClimbExtraAction) == 0x0006B0, "Wrong size on FEndBehaviorChocoboClimbExtraAction");

// ScriptStruct EndGame.EndBehaviorChocoboFieldBrakeExtraAction
// 0x0010 (0x0420 - 0x0410)
struct FEndBehaviorChocoboFieldBrakeExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x10];                                     // 0x0410(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboFieldBrakeExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboFieldBrakeExtraAction");
static_assert(sizeof(FEndBehaviorChocoboFieldBrakeExtraAction) == 0x000420, "Wrong size on FEndBehaviorChocoboFieldBrakeExtraAction");

// ScriptStruct EndGame.EndBikeSplinePositionData
// 0x000C (0x000C - 0x0000)
struct FEndBikeSplinePositionData final
{
public:
	int32                                         SplineIndex;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LapCount;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputKey;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeSplinePositionData) == 0x000004, "Wrong alignment on FEndBikeSplinePositionData");
static_assert(sizeof(FEndBikeSplinePositionData) == 0x00000C, "Wrong size on FEndBikeSplinePositionData");
static_assert(offsetof(FEndBikeSplinePositionData, SplineIndex) == 0x000000, "Member 'FEndBikeSplinePositionData::SplineIndex' has a wrong offset!");
static_assert(offsetof(FEndBikeSplinePositionData, LapCount) == 0x000004, "Member 'FEndBikeSplinePositionData::LapCount' has a wrong offset!");
static_assert(offsetof(FEndBikeSplinePositionData, InputKey) == 0x000008, "Member 'FEndBikeSplinePositionData::InputKey' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterAbilitySet
// 0x0020 (0x0020 - 0x0000)
struct FEndBikeAIHelicopterAbilitySet final
{
public:
	class FName                                   AbilitySet_FR;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilitySet_FL;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilitySet_RR;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilitySet_RL;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterAbilitySet) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterAbilitySet");
static_assert(sizeof(FEndBikeAIHelicopterAbilitySet) == 0x000020, "Wrong size on FEndBikeAIHelicopterAbilitySet");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySet, AbilitySet_FR) == 0x000000, "Member 'FEndBikeAIHelicopterAbilitySet::AbilitySet_FR' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySet, AbilitySet_FL) == 0x000008, "Member 'FEndBikeAIHelicopterAbilitySet::AbilitySet_FL' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySet, AbilitySet_RR) == 0x000010, "Member 'FEndBikeAIHelicopterAbilitySet::AbilitySet_RR' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySet, AbilitySet_RL) == 0x000018, "Member 'FEndBikeAIHelicopterAbilitySet::AbilitySet_RL' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterAbilitySetPhase
// 0x002C (0x002C - 0x0000)
struct FEndBikeAIHelicopterAbilitySetPhase final
{
public:
	struct FEndBikeSplinePositionData             SplinePosition;                                    // 0x0000(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBikeAIHelicopterAbilitySet         AbilitySet;                                        // 0x000C(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterAbilitySetPhase) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterAbilitySetPhase");
static_assert(sizeof(FEndBikeAIHelicopterAbilitySetPhase) == 0x00002C, "Wrong size on FEndBikeAIHelicopterAbilitySetPhase");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySetPhase, SplinePosition) == 0x000000, "Member 'FEndBikeAIHelicopterAbilitySetPhase::SplinePosition' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySetPhase, AbilitySet) == 0x00000C, "Member 'FEndBikeAIHelicopterAbilitySetPhase::AbilitySet' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChocoboFieldDriftExtraAction
// 0x00B0 (0x04C0 - 0x0410)
struct FEndBehaviorChocoboFieldDriftExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0xB0];                                     // 0x0410(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboFieldDriftExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboFieldDriftExtraAction");
static_assert(sizeof(FEndBehaviorChocoboFieldDriftExtraAction) == 0x0004C0, "Wrong size on FEndBehaviorChocoboFieldDriftExtraAction");

// ScriptStruct EndGame.EndBehaviorChocoboFieldStepExtraAction
// 0x0070 (0x0480 - 0x0410)
struct FEndBehaviorChocoboFieldStepExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x70];                                     // 0x0410(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboFieldStepExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboFieldStepExtraAction");
static_assert(sizeof(FEndBehaviorChocoboFieldStepExtraAction) == 0x000480, "Wrong size on FEndBehaviorChocoboFieldStepExtraAction");

// ScriptStruct EndGame.EndBikeEnemySwitchAbilitySetByDamage
// 0x0014 (0x0014 - 0x0000)
struct FEndBikeEnemySwitchAbilitySetByDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeforeAbilitySetId;                                // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AfterAbilitySetId;                                 // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeEnemySwitchAbilitySetByDamage) == 0x000004, "Wrong alignment on FEndBikeEnemySwitchAbilitySetByDamage");
static_assert(sizeof(FEndBikeEnemySwitchAbilitySetByDamage) == 0x000014, "Wrong size on FEndBikeEnemySwitchAbilitySetByDamage");
static_assert(offsetof(FEndBikeEnemySwitchAbilitySetByDamage, Damage) == 0x000000, "Member 'FEndBikeEnemySwitchAbilitySetByDamage::Damage' has a wrong offset!");
static_assert(offsetof(FEndBikeEnemySwitchAbilitySetByDamage, BeforeAbilitySetId) == 0x000004, "Member 'FEndBikeEnemySwitchAbilitySetByDamage::BeforeAbilitySetId' has a wrong offset!");
static_assert(offsetof(FEndBikeEnemySwitchAbilitySetByDamage, AfterAbilitySetId) == 0x00000C, "Member 'FEndBikeEnemySwitchAbilitySetByDamage::AfterAbilitySetId' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChocoboGetOffExtraAction
// 0x0020 (0x0420 - 0x0400)
struct FEndBehaviorChocoboGetOffExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x20];                                     // 0x0400(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboGetOffExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboGetOffExtraAction");
static_assert(sizeof(FEndBehaviorChocoboGetOffExtraAction) == 0x000420, "Wrong size on FEndBehaviorChocoboGetOffExtraAction");

// ScriptStruct EndGame.EndBehaviorChocoboGlideExtraAction
// 0x0070 (0x0470 - 0x0400)
struct FEndBehaviorChocoboGlideExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x70];                                     // 0x0400(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboGlideExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboGlideExtraAction");
static_assert(sizeof(FEndBehaviorChocoboGlideExtraAction) == 0x000470, "Wrong size on FEndBehaviorChocoboGlideExtraAction");

// ScriptStruct EndGame.EndBehaviorVehicleGetOffExtraActionBase
// 0x0140 (0x0540 - 0x0400)
struct FEndBehaviorVehicleGetOffExtraActionBase final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x140];                                    // 0x0400(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorVehicleGetOffExtraActionBase) == 0x000010, "Wrong alignment on FEndBehaviorVehicleGetOffExtraActionBase");
static_assert(sizeof(FEndBehaviorVehicleGetOffExtraActionBase) == 0x000540, "Wrong size on FEndBehaviorVehicleGetOffExtraActionBase");

// ScriptStruct EndGame.EndBehaviorChocoboGlideFollowExtraAction
// 0x00B0 (0x04B0 - 0x0400)
struct FEndBehaviorChocoboGlideFollowExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0xB0];                                     // 0x0400(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboGlideFollowExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboGlideFollowExtraAction");
static_assert(sizeof(FEndBehaviorChocoboGlideFollowExtraAction) == 0x0004B0, "Wrong size on FEndBehaviorChocoboGlideFollowExtraAction");

// ScriptStruct EndGame.EndBehaviorChocoboJetExtraAction
// 0x0070 (0x0470 - 0x0400)
struct FEndBehaviorChocoboJetExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x70];                                     // 0x0400(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboJetExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboJetExtraAction");
static_assert(sizeof(FEndBehaviorChocoboJetExtraAction) == 0x000470, "Wrong size on FEndBehaviorChocoboJetExtraAction");

// ScriptStruct EndGame.EndBikeAIHelicopterMoveParam_MoveForward
// 0x0008 (0x0008 - 0x0000)
struct FEndBikeAIHelicopterMoveParam_MoveForward final
{
public:
	float                                         RelativeSpeed;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeSpeedOnRotateYaw;                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterMoveParam_MoveForward) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterMoveParam_MoveForward");
static_assert(sizeof(FEndBikeAIHelicopterMoveParam_MoveForward) == 0x000008, "Wrong size on FEndBikeAIHelicopterMoveParam_MoveForward");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveForward, RelativeSpeed) == 0x000000, "Member 'FEndBikeAIHelicopterMoveParam_MoveForward::RelativeSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveForward, RelativeSpeedOnRotateYaw) == 0x000004, "Member 'FEndBikeAIHelicopterMoveParam_MoveForward::RelativeSpeedOnRotateYaw' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChocoboJetFollowExtraAction
// 0x02A0 (0x06A0 - 0x0400)
struct FEndBehaviorChocoboJetFollowExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x2A0];                                    // 0x0400(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboJetFollowExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboJetFollowExtraAction");
static_assert(sizeof(FEndBehaviorChocoboJetFollowExtraAction) == 0x0006A0, "Wrong size on FEndBehaviorChocoboJetFollowExtraAction");

// ScriptStruct EndGame.EndBehaviorChocoboRaceCourseOutExtraAction
// 0x0120 (0x0520 - 0x0400)
struct FEndBehaviorChocoboRaceCourseOutExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x120];                                    // 0x0400(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboRaceCourseOutExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboRaceCourseOutExtraAction");
static_assert(sizeof(FEndBehaviorChocoboRaceCourseOutExtraAction) == 0x000520, "Wrong size on FEndBehaviorChocoboRaceCourseOutExtraAction");

// ScriptStruct EndGame.EndBikeAITruckGunFireInfo
// 0x0008 (0x0008 - 0x0000)
struct FEndBikeAITruckGunFireInfo final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAITruckGunFireInfo) == 0x000004, "Wrong alignment on FEndBikeAITruckGunFireInfo");
static_assert(sizeof(FEndBikeAITruckGunFireInfo) == 0x000008, "Wrong size on FEndBikeAITruckGunFireInfo");
static_assert(offsetof(FEndBikeAITruckGunFireInfo, DamageSourceID) == 0x000000, "Member 'FEndBikeAITruckGunFireInfo::DamageSourceID' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAITruckParameter
// 0x00D8 (0x00D8 - 0x0000)
struct FEndBikeAITruckParameter final
{
public:
	float                                         General_SlideChangeRollToYawBias;                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_MovableSlideLength;                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_RestoreRollInterpSpeed;                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_KeepRelativeDistance;                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_KeepRelativeDistanceAtLastOneEnemy;        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_RelativeSpeedAtLastOneEnemy;               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_MoveDistanceRangeMaxAtLastOneEnemy;        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                General_CarBodyHalfSize;                           // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_BeforePullOverSlide;                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_SlideSpeedOnPullOver;                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_SlideSpeedOnAttack;                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_MaxRotateRateAfterHitWall;                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_MaxAttackingTime;                           // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_ConstantArrivalTime;                        // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_MaxSpeed;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_Acceleration;                               // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               GunFire_TargetLocationRandomRot;                   // 0x0048(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         GunFire_SlideMoveRate;                             // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_MaxSlideSpeedLength;                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_MovableSlideLength;                        // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_SlideMoveRateOnHitWall;                    // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_DelayStartTime;                            // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_HatchLoopTime;                             // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_AfterShootingTime;                         // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_ShootingInterval;                          // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         GunFire_ValidAngleRange;                           // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         GunFire_ValidSlideRange;                           // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_BeginShootTime;                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_EnableSlideMoveDistance;                   // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         GunFire_AimClampRange;                             // 0x008C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_ConstantArrivalTime;                       // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_MaxSpeed;                                  // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_Acceleration;                              // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_Count;                                     // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GunFire_LaserEffectName;                           // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_LaserTargetHeightOffset;                   // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_BeginLaserEffectTime;                      // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GunFire_LockOnSocketName;                          // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GunFire_ThresholdDamagePoint;                      // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GunFire_DamageTalkTriggerSetID;                    // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndBikeAITruckGunFireInfo>     GunFire_DamageSourceInfo;                          // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAITruckParameter) == 0x000008, "Wrong alignment on FEndBikeAITruckParameter");
static_assert(sizeof(FEndBikeAITruckParameter) == 0x0000D8, "Wrong size on FEndBikeAITruckParameter");
static_assert(offsetof(FEndBikeAITruckParameter, General_SlideChangeRollToYawBias) == 0x000000, "Member 'FEndBikeAITruckParameter::General_SlideChangeRollToYawBias' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_MovableSlideLength) == 0x000004, "Member 'FEndBikeAITruckParameter::General_MovableSlideLength' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_RestoreRollInterpSpeed) == 0x000008, "Member 'FEndBikeAITruckParameter::General_RestoreRollInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_KeepRelativeDistance) == 0x00000C, "Member 'FEndBikeAITruckParameter::General_KeepRelativeDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_KeepRelativeDistanceAtLastOneEnemy) == 0x000010, "Member 'FEndBikeAITruckParameter::General_KeepRelativeDistanceAtLastOneEnemy' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_RelativeSpeedAtLastOneEnemy) == 0x000014, "Member 'FEndBikeAITruckParameter::General_RelativeSpeedAtLastOneEnemy' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_MoveDistanceRangeMaxAtLastOneEnemy) == 0x000018, "Member 'FEndBikeAITruckParameter::General_MoveDistanceRangeMaxAtLastOneEnemy' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_CarBodyHalfSize) == 0x00001C, "Member 'FEndBikeAITruckParameter::General_CarBodyHalfSize' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_BeforePullOverSlide) == 0x000028, "Member 'FEndBikeAITruckParameter::Tackle_BeforePullOverSlide' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_SlideSpeedOnPullOver) == 0x00002C, "Member 'FEndBikeAITruckParameter::Tackle_SlideSpeedOnPullOver' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_SlideSpeedOnAttack) == 0x000030, "Member 'FEndBikeAITruckParameter::Tackle_SlideSpeedOnAttack' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_MaxRotateRateAfterHitWall) == 0x000034, "Member 'FEndBikeAITruckParameter::Tackle_MaxRotateRateAfterHitWall' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_MaxAttackingTime) == 0x000038, "Member 'FEndBikeAITruckParameter::Tackle_MaxAttackingTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_ConstantArrivalTime) == 0x00003C, "Member 'FEndBikeAITruckParameter::Tackle_ConstantArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_MaxSpeed) == 0x000040, "Member 'FEndBikeAITruckParameter::Tackle_MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_Acceleration) == 0x000044, "Member 'FEndBikeAITruckParameter::Tackle_Acceleration' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_TargetLocationRandomRot) == 0x000048, "Member 'FEndBikeAITruckParameter::GunFire_TargetLocationRandomRot' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_SlideMoveRate) == 0x000054, "Member 'FEndBikeAITruckParameter::GunFire_SlideMoveRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_MaxSlideSpeedLength) == 0x000058, "Member 'FEndBikeAITruckParameter::GunFire_MaxSlideSpeedLength' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_MovableSlideLength) == 0x00005C, "Member 'FEndBikeAITruckParameter::GunFire_MovableSlideLength' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_SlideMoveRateOnHitWall) == 0x000060, "Member 'FEndBikeAITruckParameter::GunFire_SlideMoveRateOnHitWall' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_DelayStartTime) == 0x000064, "Member 'FEndBikeAITruckParameter::GunFire_DelayStartTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_HatchLoopTime) == 0x000068, "Member 'FEndBikeAITruckParameter::GunFire_HatchLoopTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_AfterShootingTime) == 0x00006C, "Member 'FEndBikeAITruckParameter::GunFire_AfterShootingTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_ShootingInterval) == 0x000070, "Member 'FEndBikeAITruckParameter::GunFire_ShootingInterval' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_ValidAngleRange) == 0x000074, "Member 'FEndBikeAITruckParameter::GunFire_ValidAngleRange' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_ValidSlideRange) == 0x00007C, "Member 'FEndBikeAITruckParameter::GunFire_ValidSlideRange' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_BeginShootTime) == 0x000084, "Member 'FEndBikeAITruckParameter::GunFire_BeginShootTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_EnableSlideMoveDistance) == 0x000088, "Member 'FEndBikeAITruckParameter::GunFire_EnableSlideMoveDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_AimClampRange) == 0x00008C, "Member 'FEndBikeAITruckParameter::GunFire_AimClampRange' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_ConstantArrivalTime) == 0x000094, "Member 'FEndBikeAITruckParameter::GunFire_ConstantArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_MaxSpeed) == 0x000098, "Member 'FEndBikeAITruckParameter::GunFire_MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_Acceleration) == 0x00009C, "Member 'FEndBikeAITruckParameter::GunFire_Acceleration' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_Count) == 0x0000A0, "Member 'FEndBikeAITruckParameter::GunFire_Count' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_LaserEffectName) == 0x0000A4, "Member 'FEndBikeAITruckParameter::GunFire_LaserEffectName' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_LaserTargetHeightOffset) == 0x0000AC, "Member 'FEndBikeAITruckParameter::GunFire_LaserTargetHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_BeginLaserEffectTime) == 0x0000B0, "Member 'FEndBikeAITruckParameter::GunFire_BeginLaserEffectTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_LockOnSocketName) == 0x0000B4, "Member 'FEndBikeAITruckParameter::GunFire_LockOnSocketName' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_ThresholdDamagePoint) == 0x0000BC, "Member 'FEndBikeAITruckParameter::GunFire_ThresholdDamagePoint' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_DamageTalkTriggerSetID) == 0x0000C0, "Member 'FEndBikeAITruckParameter::GunFire_DamageTalkTriggerSetID' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_DamageSourceInfo) == 0x0000C8, "Member 'FEndBikeAITruckParameter::GunFire_DamageSourceInfo' has a wrong offset!");

// ScriptStruct EndGame.EndFieldSimpleInteractStateSetting
// 0x0028 (0x0028 - 0x0000)
struct FEndFieldSimpleInteractStateSetting final
{
public:
	class FName                                   StateName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEndFieldSimpleInteractPluginBase*> FieldActorPluginArray;                             // 0x0008(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UEndFieldSimpleInteractPluginBase*> PlayerPluginArray;                                 // 0x0018(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldSimpleInteractStateSetting) == 0x000008, "Wrong alignment on FEndFieldSimpleInteractStateSetting");
static_assert(sizeof(FEndFieldSimpleInteractStateSetting) == 0x000028, "Wrong size on FEndFieldSimpleInteractStateSetting");
static_assert(offsetof(FEndFieldSimpleInteractStateSetting, StateName) == 0x000000, "Member 'FEndFieldSimpleInteractStateSetting::StateName' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractStateSetting, FieldActorPluginArray) == 0x000008, "Member 'FEndFieldSimpleInteractStateSetting::FieldActorPluginArray' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractStateSetting, PlayerPluginArray) == 0x000018, "Member 'FEndFieldSimpleInteractStateSetting::PlayerPluginArray' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChocoboRaceDamageExtraAction
// 0x0010 (0x0410 - 0x0400)
struct FEndBehaviorChocoboRaceDamageExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x10];                                     // 0x0400(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboRaceDamageExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboRaceDamageExtraAction");
static_assert(sizeof(FEndBehaviorChocoboRaceDamageExtraAction) == 0x000410, "Wrong size on FEndBehaviorChocoboRaceDamageExtraAction");

// ScriptStruct EndGame.EndFeelerTornadeDeformContext
// 0x0014 (0x0014 - 0x0000)
struct FEndFeelerTornadeDeformContext final
{
public:
	float                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x10];                                       // 0x0004(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerTornadeDeformContext) == 0x000004, "Wrong alignment on FEndFeelerTornadeDeformContext");
static_assert(sizeof(FEndFeelerTornadeDeformContext) == 0x000014, "Wrong size on FEndFeelerTornadeDeformContext");
static_assert(offsetof(FEndFeelerTornadeDeformContext, StartFrame) == 0x000000, "Member 'FEndFeelerTornadeDeformContext::StartFrame' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChocoboRaceGateOpenExtraAction
// 0x0050 (0x0450 - 0x0400)
struct FEndBehaviorChocoboRaceGateOpenExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x50];                                     // 0x0400(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboRaceGateOpenExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboRaceGateOpenExtraAction");
static_assert(sizeof(FEndBehaviorChocoboRaceGateOpenExtraAction) == 0x000450, "Wrong size on FEndBehaviorChocoboRaceGateOpenExtraAction");

// ScriptStruct EndGame.EndFeelerLaserEmissiveContext
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndFeelerLaserEmissiveContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerLaserEmissiveContext) == 0x000008, "Wrong alignment on FEndFeelerLaserEmissiveContext");
static_assert(sizeof(FEndFeelerLaserEmissiveContext) == 0x000020, "Wrong size on FEndFeelerLaserEmissiveContext");

// ScriptStruct EndGame.EndBehaviorChocoboRaceSmallJumpExtraAction
// 0x0010 (0x0410 - 0x0400)
struct FEndBehaviorChocoboRaceSmallJumpExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x10];                                     // 0x0400(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboRaceSmallJumpExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboRaceSmallJumpExtraAction");
static_assert(sizeof(FEndBehaviorChocoboRaceSmallJumpExtraAction) == 0x000410, "Wrong size on FEndBehaviorChocoboRaceSmallJumpExtraAction");

// ScriptStruct EndGame.EndVaultCameraModule
// 0x0050 (0x0440 - 0x03F0)
struct FEndVaultCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x50];                                     // 0x03F0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndVaultCameraModule) == 0x000008, "Wrong alignment on FEndVaultCameraModule");
static_assert(sizeof(FEndVaultCameraModule) == 0x000440, "Wrong size on FEndVaultCameraModule");

// ScriptStruct EndGame.EndBikeAIHelicopterParameter
// 0x00AC (0x00AC - 0x0000)
struct FEndBikeAIHelicopterParameter final
{
public:
	float                                         Move_DefaultYow;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_DefaultPitch;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_BaseHeight;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_WithinRoadSlide;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Move_ArrivalTime;                                  // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Move_ErrorRange;                                   // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_MaxPitchAngle;                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_MaxPitchSpeed;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_PitchDefaultSpeed;                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_MaxSlideRollAngle;                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Move_SpeedLimit;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_WallHeight;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_CenterObstacleHeight;                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_SplineOffsetForCalcCurvature;                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_CurvatureMaxDeltaYaw;                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Move_OffsetOnNotAttack;                            // 0x0050(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_MaxSlideOnNotAttack;                          // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Atk_SelectPlayerAsTargetRate;                      // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Atk_HitPointOfCancelAttack;                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAt_RecoveryDelayTime;                          // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAt_YawSpeed;                                   // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAt_YawAccel;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAt_YawArrivalTime;                             // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_SpeedForFirstStep;                         // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_DistanceForFirstStep;                      // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_MaxTimeOfFitstStep;                        // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_CorrectionRate;                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_YawLimit;                                  // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_Interval;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Obstacle_BeginAvoidLength;                         // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopToExit_SlideInterpSpeed;                       // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopToExit_HeightSpeed;                            // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopToExit_RelativeDistance;                       // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopToExit_RemoveTimer;                            // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionNoAttack_DamageValue;                    // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionNoAttack_TimeValue;                      // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterParameter) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterParameter");
static_assert(sizeof(FEndBikeAIHelicopterParameter) == 0x0000AC, "Wrong size on FEndBikeAIHelicopterParameter");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_DefaultYow) == 0x000000, "Member 'FEndBikeAIHelicopterParameter::Move_DefaultYow' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_DefaultPitch) == 0x000004, "Member 'FEndBikeAIHelicopterParameter::Move_DefaultPitch' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_BaseHeight) == 0x000008, "Member 'FEndBikeAIHelicopterParameter::Move_BaseHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_WithinRoadSlide) == 0x00000C, "Member 'FEndBikeAIHelicopterParameter::Move_WithinRoadSlide' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_ArrivalTime) == 0x000010, "Member 'FEndBikeAIHelicopterParameter::Move_ArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_ErrorRange) == 0x00001C, "Member 'FEndBikeAIHelicopterParameter::Move_ErrorRange' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_MaxPitchAngle) == 0x000028, "Member 'FEndBikeAIHelicopterParameter::Move_MaxPitchAngle' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_MaxPitchSpeed) == 0x00002C, "Member 'FEndBikeAIHelicopterParameter::Move_MaxPitchSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_PitchDefaultSpeed) == 0x000030, "Member 'FEndBikeAIHelicopterParameter::Move_PitchDefaultSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_MaxSlideRollAngle) == 0x000034, "Member 'FEndBikeAIHelicopterParameter::Move_MaxSlideRollAngle' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_SpeedLimit) == 0x000038, "Member 'FEndBikeAIHelicopterParameter::Move_SpeedLimit' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_WallHeight) == 0x000040, "Member 'FEndBikeAIHelicopterParameter::Move_WallHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_CenterObstacleHeight) == 0x000044, "Member 'FEndBikeAIHelicopterParameter::Move_CenterObstacleHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_SplineOffsetForCalcCurvature) == 0x000048, "Member 'FEndBikeAIHelicopterParameter::Move_SplineOffsetForCalcCurvature' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_CurvatureMaxDeltaYaw) == 0x00004C, "Member 'FEndBikeAIHelicopterParameter::Move_CurvatureMaxDeltaYaw' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_OffsetOnNotAttack) == 0x000050, "Member 'FEndBikeAIHelicopterParameter::Move_OffsetOnNotAttack' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_MaxSlideOnNotAttack) == 0x00005C, "Member 'FEndBikeAIHelicopterParameter::Move_MaxSlideOnNotAttack' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Atk_SelectPlayerAsTargetRate) == 0x000060, "Member 'FEndBikeAIHelicopterParameter::Atk_SelectPlayerAsTargetRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Atk_HitPointOfCancelAttack) == 0x000064, "Member 'FEndBikeAIHelicopterParameter::Atk_HitPointOfCancelAttack' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, LookAt_RecoveryDelayTime) == 0x000068, "Member 'FEndBikeAIHelicopterParameter::LookAt_RecoveryDelayTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, LookAt_YawSpeed) == 0x00006C, "Member 'FEndBikeAIHelicopterParameter::LookAt_YawSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, LookAt_YawAccel) == 0x000070, "Member 'FEndBikeAIHelicopterParameter::LookAt_YawAccel' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, LookAt_YawArrivalTime) == 0x000074, "Member 'FEndBikeAIHelicopterParameter::LookAt_YawArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_SpeedForFirstStep) == 0x000078, "Member 'FEndBikeAIHelicopterParameter::GunFire_SpeedForFirstStep' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_DistanceForFirstStep) == 0x00007C, "Member 'FEndBikeAIHelicopterParameter::GunFire_DistanceForFirstStep' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_MaxTimeOfFitstStep) == 0x000080, "Member 'FEndBikeAIHelicopterParameter::GunFire_MaxTimeOfFitstStep' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_CorrectionRate) == 0x000084, "Member 'FEndBikeAIHelicopterParameter::GunFire_CorrectionRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_YawLimit) == 0x000088, "Member 'FEndBikeAIHelicopterParameter::GunFire_YawLimit' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_Interval) == 0x00008C, "Member 'FEndBikeAIHelicopterParameter::GunFire_Interval' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Obstacle_BeginAvoidLength) == 0x000090, "Member 'FEndBikeAIHelicopterParameter::Obstacle_BeginAvoidLength' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, StopToExit_SlideInterpSpeed) == 0x000094, "Member 'FEndBikeAIHelicopterParameter::StopToExit_SlideInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, StopToExit_HeightSpeed) == 0x000098, "Member 'FEndBikeAIHelicopterParameter::StopToExit_HeightSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, StopToExit_RelativeDistance) == 0x00009C, "Member 'FEndBikeAIHelicopterParameter::StopToExit_RelativeDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, StopToExit_RemoveTimer) == 0x0000A0, "Member 'FEndBikeAIHelicopterParameter::StopToExit_RemoveTimer' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, TransitionNoAttack_DamageValue) == 0x0000A4, "Member 'FEndBikeAIHelicopterParameter::TransitionNoAttack_DamageValue' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, TransitionNoAttack_TimeValue) == 0x0000A8, "Member 'FEndBikeAIHelicopterParameter::TransitionNoAttack_TimeValue' has a wrong offset!");

// ScriptStruct EndGame.EndFrogGuysMiniGame
// 0x0370 (0x0370 - 0x0000)
struct alignas(0x10) FEndFrogGuysMiniGame final
{
public:
	uint8                                         Pad_0[0x370];                                      // 0x0000(0x0370)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFrogGuysMiniGame) == 0x000010, "Wrong alignment on FEndFrogGuysMiniGame");
static_assert(sizeof(FEndFrogGuysMiniGame) == 0x000370, "Wrong size on FEndFrogGuysMiniGame");

// ScriptStruct EndGame.EndBehaviorChocoboRideOnExtraAction
// 0x0000 (0x0470 - 0x0470)
struct FEndBehaviorChocoboRideOnExtraAction final : public FEndBehaviorVehicleRideOnExtraActionBase
{
};
static_assert(alignof(FEndBehaviorChocoboRideOnExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboRideOnExtraAction");
static_assert(sizeof(FEndBehaviorChocoboRideOnExtraAction) == 0x000470, "Wrong size on FEndBehaviorChocoboRideOnExtraAction");

// ScriptStruct EndGame.EndFeelerSplineBaseAndRandomBias
// 0x000C (0x000C - 0x0000)
struct FEndFeelerSplineBaseAndRandomBias final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomBiasRange;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerSplineBaseAndRandomBias) == 0x000004, "Wrong alignment on FEndFeelerSplineBaseAndRandomBias");
static_assert(sizeof(FEndFeelerSplineBaseAndRandomBias) == 0x00000C, "Wrong size on FEndFeelerSplineBaseAndRandomBias");
static_assert(offsetof(FEndFeelerSplineBaseAndRandomBias, Base) == 0x000000, "Member 'FEndFeelerSplineBaseAndRandomBias::Base' has a wrong offset!");
static_assert(offsetof(FEndFeelerSplineBaseAndRandomBias, RandomBiasRange) == 0x000004, "Member 'FEndFeelerSplineBaseAndRandomBias::RandomBiasRange' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChocoboRiderStateExtraAction
// 0x0080 (0x0480 - 0x0400)
struct FEndBehaviorChocoboRiderStateExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x80];                                     // 0x0400(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboRiderStateExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboRiderStateExtraAction");
static_assert(sizeof(FEndBehaviorChocoboRiderStateExtraAction) == 0x000480, "Wrong size on FEndBehaviorChocoboRiderStateExtraAction");

// ScriptStruct EndGame.EndBehaviorJumpExtraActionInput
// 0x0050 (0x0050 - 0x0000)
struct FEndBehaviorJumpExtraActionInput
{
public:
	class FName                                   OverrideBeginSequenceName;                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      OverrideBeginSequence;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideLoopSequenceName;                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      OverrideLoopSequence;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideEndSequenceName;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      OverrideEndSequence;                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideRunEndSequenceName;                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      OverrideRunEndSequence;                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRunEndSequence;                                // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbstractSequence;                                 // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideGravityScale;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginSequenceStartTime;                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceJump;                                        // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipRunEndSequence;                               // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorJumpExtraActionInput) == 0x000008, "Wrong alignment on FEndBehaviorJumpExtraActionInput");
static_assert(sizeof(FEndBehaviorJumpExtraActionInput) == 0x000050, "Wrong size on FEndBehaviorJumpExtraActionInput");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, OverrideBeginSequenceName) == 0x000000, "Member 'FEndBehaviorJumpExtraActionInput::OverrideBeginSequenceName' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, OverrideBeginSequence) == 0x000008, "Member 'FEndBehaviorJumpExtraActionInput::OverrideBeginSequence' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, OverrideLoopSequenceName) == 0x000010, "Member 'FEndBehaviorJumpExtraActionInput::OverrideLoopSequenceName' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, OverrideLoopSequence) == 0x000018, "Member 'FEndBehaviorJumpExtraActionInput::OverrideLoopSequence' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, OverrideEndSequenceName) == 0x000020, "Member 'FEndBehaviorJumpExtraActionInput::OverrideEndSequenceName' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, OverrideEndSequence) == 0x000028, "Member 'FEndBehaviorJumpExtraActionInput::OverrideEndSequence' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, OverrideRunEndSequenceName) == 0x000030, "Member 'FEndBehaviorJumpExtraActionInput::OverrideRunEndSequenceName' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, OverrideRunEndSequence) == 0x000038, "Member 'FEndBehaviorJumpExtraActionInput::OverrideRunEndSequence' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, bUseRunEndSequence) == 0x000040, "Member 'FEndBehaviorJumpExtraActionInput::bUseRunEndSequence' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, bAbstractSequence) == 0x000041, "Member 'FEndBehaviorJumpExtraActionInput::bAbstractSequence' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, OverrideGravityScale) == 0x000044, "Member 'FEndBehaviorJumpExtraActionInput::OverrideGravityScale' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, BeginSequenceStartTime) == 0x000048, "Member 'FEndBehaviorJumpExtraActionInput::BeginSequenceStartTime' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, bForceJump) == 0x00004C, "Member 'FEndBehaviorJumpExtraActionInput::bForceJump' has a wrong offset!");
static_assert(offsetof(FEndBehaviorJumpExtraActionInput, bSkipRunEndSequence) == 0x00004D, "Member 'FEndBehaviorJumpExtraActionInput::bSkipRunEndSequence' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorNormalJumpExtraActionInput
// 0x0018 (0x0068 - 0x0050)
struct FEndBehaviorNormalJumpExtraActionInput final : public FEndBehaviorJumpExtraActionInput
{
public:
	bool                                          bAutoSetVelocity;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpZVelocity;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorNormalJumpExtraActionInput) == 0x000008, "Wrong alignment on FEndBehaviorNormalJumpExtraActionInput");
static_assert(sizeof(FEndBehaviorNormalJumpExtraActionInput) == 0x000068, "Wrong size on FEndBehaviorNormalJumpExtraActionInput");
static_assert(offsetof(FEndBehaviorNormalJumpExtraActionInput, bAutoSetVelocity) == 0x000050, "Member 'FEndBehaviorNormalJumpExtraActionInput::bAutoSetVelocity' has a wrong offset!");
static_assert(offsetof(FEndBehaviorNormalJumpExtraActionInput, Velocity) == 0x000054, "Member 'FEndBehaviorNormalJumpExtraActionInput::Velocity' has a wrong offset!");
static_assert(offsetof(FEndBehaviorNormalJumpExtraActionInput, JumpZVelocity) == 0x000060, "Member 'FEndBehaviorNormalJumpExtraActionInput::JumpZVelocity' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChocoboSliderExtraAction
// 0x0090 (0x04A0 - 0x0410)
struct FEndBehaviorChocoboSliderExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x90];                                     // 0x0410(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboSliderExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboSliderExtraAction");
static_assert(sizeof(FEndBehaviorChocoboSliderExtraAction) == 0x0004A0, "Wrong size on FEndBehaviorChocoboSliderExtraAction");

// ScriptStruct EndGame.EndStealCameraModule
// 0x0058 (0x0448 - 0x03F0)
struct FEndStealCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x58];                                     // 0x03F0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndStealCameraModule) == 0x000008, "Wrong alignment on FEndStealCameraModule");
static_assert(sizeof(FEndStealCameraModule) == 0x000448, "Wrong size on FEndStealCameraModule");

// ScriptStruct EndGame.EndChocoboSliderSpeedSetting
// 0x000C (0x000C - 0x0000)
struct FEndChocoboSliderSpeedSetting final
{
public:
	float                                         PitchAngle;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChocoboSliderSpeedSetting) == 0x000004, "Wrong alignment on FEndChocoboSliderSpeedSetting");
static_assert(sizeof(FEndChocoboSliderSpeedSetting) == 0x00000C, "Wrong size on FEndChocoboSliderSpeedSetting");
static_assert(offsetof(FEndChocoboSliderSpeedSetting, PitchAngle) == 0x000000, "Member 'FEndChocoboSliderSpeedSetting::PitchAngle' has a wrong offset!");
static_assert(offsetof(FEndChocoboSliderSpeedSetting, MaxSpeed) == 0x000004, "Member 'FEndChocoboSliderSpeedSetting::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndChocoboSliderSpeedSetting, Acceleration) == 0x000008, "Member 'FEndChocoboSliderSpeedSetting::Acceleration' has a wrong offset!");

// ScriptStruct EndGame.EndBikeExpressionMufflerParameters
// 0x0024 (0x0024 - 0x0000)
struct FEndBikeExpressionMufflerParameters final
{
public:
	bool                                          bEnableMufflerVibration;                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBikeBones                                 MufflerBoneName;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VibrationRate;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x1C];                                       // 0x0008(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeExpressionMufflerParameters) == 0x000004, "Wrong alignment on FEndBikeExpressionMufflerParameters");
static_assert(sizeof(FEndBikeExpressionMufflerParameters) == 0x000024, "Wrong size on FEndBikeExpressionMufflerParameters");
static_assert(offsetof(FEndBikeExpressionMufflerParameters, bEnableMufflerVibration) == 0x000000, "Member 'FEndBikeExpressionMufflerParameters::bEnableMufflerVibration' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionMufflerParameters, MufflerBoneName) == 0x000001, "Member 'FEndBikeExpressionMufflerParameters::MufflerBoneName' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionMufflerParameters, VibrationRate) == 0x000004, "Member 'FEndBikeExpressionMufflerParameters::VibrationRate' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChocoboSmellExtraAction
// 0x0070 (0x0470 - 0x0400)
struct FEndBehaviorChocoboSmellExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x70];                                     // 0x0400(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboSmellExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboSmellExtraAction");
static_assert(sizeof(FEndBehaviorChocoboSmellExtraAction) == 0x000470, "Wrong size on FEndBehaviorChocoboSmellExtraAction");

// ScriptStruct EndGame.EndBehaviorChocoboStopExtraAction
// 0x0370 (0x07F0 - 0x0480)
struct FEndBehaviorChocoboStopExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x370];                                    // 0x0480(0x0370)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorChocoboStopExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorChocoboStopExtraAction");
static_assert(sizeof(FEndBehaviorChocoboStopExtraAction) == 0x0007F0, "Wrong size on FEndBehaviorChocoboStopExtraAction");

// ScriptStruct EndGame.EndBehaviorLaunchExtraAction
// 0x0360 (0x0760 - 0x0400)
struct FEndBehaviorLaunchExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x360];                                    // 0x0400(0x0360)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorLaunchExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorLaunchExtraAction");
static_assert(sizeof(FEndBehaviorLaunchExtraAction) == 0x000760, "Wrong size on FEndBehaviorLaunchExtraAction");

// ScriptStruct EndGame.EndBehaviorClimbingExtraAction
// 0x0BF0 (0x1070 - 0x0480)
struct FEndBehaviorClimbingExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0xBF0];                                    // 0x0480(0x0BF0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorClimbingExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorClimbingExtraAction");
static_assert(sizeof(FEndBehaviorClimbingExtraAction) == 0x001070, "Wrong size on FEndBehaviorClimbingExtraAction");

// ScriptStruct EndGame.RigUnit_EndBoneControl_ControllerCache
// 0x00E0 (0x00E0 - 0x0000)
struct FRigUnit_EndBoneControl_ControllerCache final
{
public:
	struct FCachedRigElement                      CachedControlItem;                                 // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedDeltaTime0;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedTranslation0;                                // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedTranslation1;                                // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CachedRotation0;                                   // 0x0040(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  CachedRotation1;                                   // 0x0050(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x80];                                      // 0x0060(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndBoneControl_ControllerCache) == 0x000010, "Wrong alignment on FRigUnit_EndBoneControl_ControllerCache");
static_assert(sizeof(FRigUnit_EndBoneControl_ControllerCache) == 0x0000E0, "Wrong size on FRigUnit_EndBoneControl_ControllerCache");
static_assert(offsetof(FRigUnit_EndBoneControl_ControllerCache, CachedControlItem) == 0x000000, "Member 'FRigUnit_EndBoneControl_ControllerCache::CachedControlItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_ControllerCache, bActive) == 0x000014, "Member 'FRigUnit_EndBoneControl_ControllerCache::bActive' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_ControllerCache, CachedDeltaTime0) == 0x000018, "Member 'FRigUnit_EndBoneControl_ControllerCache::CachedDeltaTime0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_ControllerCache, CachedTranslation0) == 0x00001C, "Member 'FRigUnit_EndBoneControl_ControllerCache::CachedTranslation0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_ControllerCache, CachedTranslation1) == 0x000028, "Member 'FRigUnit_EndBoneControl_ControllerCache::CachedTranslation1' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_ControllerCache, CachedRotation0) == 0x000040, "Member 'FRigUnit_EndBoneControl_ControllerCache::CachedRotation0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_ControllerCache, CachedRotation1) == 0x000050, "Member 'FRigUnit_EndBoneControl_ControllerCache::CachedRotation1' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBoneControl_Cache
// 0x0018 (0x0018 - 0x0000)
struct FRigUnit_EndBoneControl_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitializeCounter;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndBoneControl_ControllerCache> ControllerCaches;                                  // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndBoneControl_Cache) == 0x000008, "Wrong alignment on FRigUnit_EndBoneControl_Cache");
static_assert(sizeof(FRigUnit_EndBoneControl_Cache) == 0x000018, "Wrong size on FRigUnit_EndBoneControl_Cache");
static_assert(offsetof(FRigUnit_EndBoneControl_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndBoneControl_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Cache, InitializeCounter) == 0x000004, "Member 'FRigUnit_EndBoneControl_Cache::InitializeCounter' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_Cache, ControllerCaches) == 0x000008, "Member 'FRigUnit_EndBoneControl_Cache::ControllerCaches' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorCloudSuppressExtraAction
// 0x03B0 (0x0830 - 0x0480)
struct FEndBehaviorCloudSuppressExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x3B0];                                    // 0x0480(0x03B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorCloudSuppressExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorCloudSuppressExtraAction");
static_assert(sizeof(FEndBehaviorCloudSuppressExtraAction) == 0x000830, "Wrong size on FEndBehaviorCloudSuppressExtraAction");

// ScriptStruct EndGame.EndBehaviorTargetJumpExtraActionInput
// 0x0048 (0x0098 - 0x0050)
struct FEndBehaviorTargetJumpExtraActionInput final : public FEndBehaviorJumpExtraActionInput
{
public:
	struct FVector                                RootLocation;                                      // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RootLocationTargetActor;                           // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetRotation;                                      // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RootRotation;                                      // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 RootRotationTargetActor;                           // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationInterpSpeed;                               // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpAngle;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpHeightMax;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpTimeMin;                                       // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandingWithTimer;                                 // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableHitEnvResponse;                            // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetMovementJumpTimeMax;                           // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLoopSequenceAsOneShot;                         // 0x0093(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorTargetJumpExtraActionInput) == 0x000008, "Wrong alignment on FEndBehaviorTargetJumpExtraActionInput");
static_assert(sizeof(FEndBehaviorTargetJumpExtraActionInput) == 0x000098, "Wrong size on FEndBehaviorTargetJumpExtraActionInput");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, RootLocation) == 0x000050, "Member 'FEndBehaviorTargetJumpExtraActionInput::RootLocation' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, RootLocationTargetActor) == 0x000060, "Member 'FEndBehaviorTargetJumpExtraActionInput::RootLocationTargetActor' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, bSetRotation) == 0x000068, "Member 'FEndBehaviorTargetJumpExtraActionInput::bSetRotation' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, RootRotation) == 0x00006C, "Member 'FEndBehaviorTargetJumpExtraActionInput::RootRotation' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, RootRotationTargetActor) == 0x000078, "Member 'FEndBehaviorTargetJumpExtraActionInput::RootRotationTargetActor' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, RotationInterpSpeed) == 0x000080, "Member 'FEndBehaviorTargetJumpExtraActionInput::RotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, JumpAngle) == 0x000084, "Member 'FEndBehaviorTargetJumpExtraActionInput::JumpAngle' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, JumpHeightMax) == 0x000088, "Member 'FEndBehaviorTargetJumpExtraActionInput::JumpHeightMax' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, JumpTimeMin) == 0x00008C, "Member 'FEndBehaviorTargetJumpExtraActionInput::JumpTimeMin' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, bLandingWithTimer) == 0x000090, "Member 'FEndBehaviorTargetJumpExtraActionInput::bLandingWithTimer' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, bDisableHitEnvResponse) == 0x000091, "Member 'FEndBehaviorTargetJumpExtraActionInput::bDisableHitEnvResponse' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, bSetMovementJumpTimeMax) == 0x000092, "Member 'FEndBehaviorTargetJumpExtraActionInput::bSetMovementJumpTimeMax' has a wrong offset!");
static_assert(offsetof(FEndBehaviorTargetJumpExtraActionInput, bUseLoopSequenceAsOneShot) == 0x000093, "Member 'FEndBehaviorTargetJumpExtraActionInput::bUseLoopSequenceAsOneShot' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorContactExtraAction
// 0x0040 (0x0500 - 0x04C0)
struct FEndBehaviorContactExtraAction : public FEndBehaviorSequentialExtraAction
{
public:
	uint8                                         Pad_4C0[0x40];                                     // 0x04C0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorContactExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorContactExtraAction");
static_assert(sizeof(FEndBehaviorContactExtraAction) == 0x000500, "Wrong size on FEndBehaviorContactExtraAction");

// ScriptStruct EndGame.EndBikeExpressionWheelAxleParameters
// 0x0028 (0x0028 - 0x0000)
struct FEndBikeExpressionWheelAxleParameters final
{
public:
	bool                                          bEnableWheelAxleExpression;                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBikeBones                                 LeftWheelBoneName;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBikeBones                                 RightWheelBoneName;                                // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TiltRate;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeExpressionWheelAxleParameters) == 0x000004, "Wrong alignment on FEndBikeExpressionWheelAxleParameters");
static_assert(sizeof(FEndBikeExpressionWheelAxleParameters) == 0x000028, "Wrong size on FEndBikeExpressionWheelAxleParameters");
static_assert(offsetof(FEndBikeExpressionWheelAxleParameters, bEnableWheelAxleExpression) == 0x000000, "Member 'FEndBikeExpressionWheelAxleParameters::bEnableWheelAxleExpression' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionWheelAxleParameters, LeftWheelBoneName) == 0x000001, "Member 'FEndBikeExpressionWheelAxleParameters::LeftWheelBoneName' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionWheelAxleParameters, RightWheelBoneName) == 0x000002, "Member 'FEndBikeExpressionWheelAxleParameters::RightWheelBoneName' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionWheelAxleParameters, TiltRate) == 0x000004, "Member 'FEndBikeExpressionWheelAxleParameters::TiltRate' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorRunContactExtraAction
// 0x0010 (0x0510 - 0x0500)
struct FEndBehaviorRunContactExtraAction : public FEndBehaviorContactExtraAction
{
public:
	uint8                                         Pad_500[0x10];                                     // 0x0500(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorRunContactExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorRunContactExtraAction");
static_assert(sizeof(FEndBehaviorRunContactExtraAction) == 0x000510, "Wrong size on FEndBehaviorRunContactExtraAction");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioAttackBrowAnimation
// 0x0014 (0x0014 - 0x0000)
struct FRigUnit_EndLipSyncAudioAttackBrowAnimation final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioAttackBrowAnimation) == 0x000004, "Wrong alignment on FRigUnit_EndLipSyncAudioAttackBrowAnimation");
static_assert(sizeof(FRigUnit_EndLipSyncAudioAttackBrowAnimation) == 0x000014, "Wrong size on FRigUnit_EndLipSyncAudioAttackBrowAnimation");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBrowAnimation, Offset) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioAttackBrowAnimation::Offset' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBrowAnimation, Weight) == 0x000008, "Member 'FRigUnit_EndLipSyncAudioAttackBrowAnimation::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBrowAnimation, BlendInTime) == 0x00000C, "Member 'FRigUnit_EndLipSyncAudioAttackBrowAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBrowAnimation, BlendOutTime) == 0x000010, "Member 'FRigUnit_EndLipSyncAudioAttackBrowAnimation::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorDashContactExtraAction
// 0x0000 (0x0510 - 0x0510)
struct FEndBehaviorDashContactExtraAction final : public FEndBehaviorRunContactExtraAction
{
};
static_assert(alignof(FEndBehaviorDashContactExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorDashContactExtraAction");
static_assert(sizeof(FEndBehaviorDashContactExtraAction) == 0x000510, "Wrong size on FEndBehaviorDashContactExtraAction");

// ScriptStruct EndGame.EndBikePlayerEnemyDamageRatio
// 0x0050 (0x0050 - 0x0000)
struct FEndBikePlayerEnemyDamageRatio final
{
public:
	TMap<class FName, float>                      EnemyDamageRatio;                                  // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikePlayerEnemyDamageRatio) == 0x000008, "Wrong alignment on FEndBikePlayerEnemyDamageRatio");
static_assert(sizeof(FEndBikePlayerEnemyDamageRatio) == 0x000050, "Wrong size on FEndBikePlayerEnemyDamageRatio");
static_assert(offsetof(FEndBikePlayerEnemyDamageRatio, EnemyDamageRatio) == 0x000000, "Member 'FEndBikePlayerEnemyDamageRatio::EnemyDamageRatio' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorWalkContactExtraAction
// 0x0010 (0x0510 - 0x0500)
struct FEndBehaviorWalkContactExtraAction final : public FEndBehaviorContactExtraAction
{
public:
	uint8                                         Pad_500[0x10];                                     // 0x0500(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorWalkContactExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorWalkContactExtraAction");
static_assert(sizeof(FEndBehaviorWalkContactExtraAction) == 0x000510, "Wrong size on FEndBehaviorWalkContactExtraAction");

// ScriptStruct EndGame.EndBehaviorIdleContactExtraAction
// 0x0020 (0x0520 - 0x0500)
struct FEndBehaviorIdleContactExtraAction final : public FEndBehaviorContactExtraAction
{
public:
	uint8                                         Pad_500[0x20];                                     // 0x0500(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorIdleContactExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorIdleContactExtraAction");
static_assert(sizeof(FEndBehaviorIdleContactExtraAction) == 0x000520, "Wrong size on FEndBehaviorIdleContactExtraAction");

// ScriptStruct EndGame.EndBikeEnemyWithdrawalParam
// 0x0014 (0x0014 - 0x0000)
struct FEndBikeEnemyWithdrawalParam final
{
public:
	struct FFloatInterval                         AliveTimeRange;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         AliveForwardDistanceRange;                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AliveRightDirDistance;                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeEnemyWithdrawalParam) == 0x000004, "Wrong alignment on FEndBikeEnemyWithdrawalParam");
static_assert(sizeof(FEndBikeEnemyWithdrawalParam) == 0x000014, "Wrong size on FEndBikeEnemyWithdrawalParam");
static_assert(offsetof(FEndBikeEnemyWithdrawalParam, AliveTimeRange) == 0x000000, "Member 'FEndBikeEnemyWithdrawalParam::AliveTimeRange' has a wrong offset!");
static_assert(offsetof(FEndBikeEnemyWithdrawalParam, AliveForwardDistanceRange) == 0x000008, "Member 'FEndBikeEnemyWithdrawalParam::AliveForwardDistanceRange' has a wrong offset!");
static_assert(offsetof(FEndBikeEnemyWithdrawalParam, AliveRightDirDistance) == 0x000010, "Member 'FEndBikeEnemyWithdrawalParam::AliveRightDirDistance' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorCrackExtraAction
// 0x0350 (0x0760 - 0x0410)
struct FEndBehaviorCrackExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x350];                                    // 0x0410(0x0350)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorCrackExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorCrackExtraAction");
static_assert(sizeof(FEndBehaviorCrackExtraAction) == 0x000760, "Wrong size on FEndBehaviorCrackExtraAction");

// ScriptStruct EndGame.EndBehaviorCrashBoxElectricExtraAction
// 0x0030 (0x0430 - 0x0400)
struct FEndBehaviorCrashBoxElectricExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x30];                                     // 0x0400(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorCrashBoxElectricExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorCrashBoxElectricExtraAction");
static_assert(sizeof(FEndBehaviorCrashBoxElectricExtraAction) == 0x000430, "Wrong size on FEndBehaviorCrashBoxElectricExtraAction");

// ScriptStruct EndGame.EndBikeExpressionWindParameters
// 0x0008 (0x0008 - 0x0000)
struct FEndBikeExpressionWindParameters final
{
public:
	bool                                          bEnableWindExpression;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindSpeedRate;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeExpressionWindParameters) == 0x000004, "Wrong alignment on FEndBikeExpressionWindParameters");
static_assert(sizeof(FEndBikeExpressionWindParameters) == 0x000008, "Wrong size on FEndBikeExpressionWindParameters");
static_assert(offsetof(FEndBikeExpressionWindParameters, bEnableWindExpression) == 0x000000, "Member 'FEndBikeExpressionWindParameters::bEnableWindExpression' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionWindParameters, WindSpeedRate) == 0x000004, "Member 'FEndBikeExpressionWindParameters::WindSpeedRate' has a wrong offset!");

// ScriptStruct EndGame.EndFieldMonkeyBarGameInfo
// 0x001C (0x001C - 0x0000)
struct FEndFieldMonkeyBarGameInfo final
{
public:
	struct FVector                                From;                                              // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Index;                                             // 0x0018(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         BarHeightIndex;                                    // 0x001A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldMonkeyBarGameInfo) == 0x000004, "Wrong alignment on FEndFieldMonkeyBarGameInfo");
static_assert(sizeof(FEndFieldMonkeyBarGameInfo) == 0x00001C, "Wrong size on FEndFieldMonkeyBarGameInfo");
static_assert(offsetof(FEndFieldMonkeyBarGameInfo, From) == 0x000000, "Member 'FEndFieldMonkeyBarGameInfo::From' has a wrong offset!");
static_assert(offsetof(FEndFieldMonkeyBarGameInfo, To) == 0x00000C, "Member 'FEndFieldMonkeyBarGameInfo::To' has a wrong offset!");
static_assert(offsetof(FEndFieldMonkeyBarGameInfo, Index) == 0x000018, "Member 'FEndFieldMonkeyBarGameInfo::Index' has a wrong offset!");
static_assert(offsetof(FEndFieldMonkeyBarGameInfo, BarHeightIndex) == 0x00001A, "Member 'FEndFieldMonkeyBarGameInfo::BarHeightIndex' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorCrouchedExtraAction
// 0x0120 (0x0530 - 0x0410)
struct FEndBehaviorCrouchedExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x120];                                    // 0x0410(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorCrouchedExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorCrouchedExtraAction");
static_assert(sizeof(FEndBehaviorCrouchedExtraAction) == 0x000530, "Wrong size on FEndBehaviorCrouchedExtraAction");

// ScriptStruct EndGame.EndFieldClimbingJumpPointSetting
// 0x0020 (0x0070 - 0x0050)
struct FEndFieldClimbingJumpPointSetting final : public FEndFieldJumpPointSettingBase
{
public:
	EClimbingJumpPointType                        JumpPointType;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndFieldActionHookRopeActor*           HookRopeActor;                                     // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndFieldActionClimbingActor*           ClimbingActor;                                     // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClimbingPointIndex;                                // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldClimbingJumpPointSetting) == 0x000010, "Wrong alignment on FEndFieldClimbingJumpPointSetting");
static_assert(sizeof(FEndFieldClimbingJumpPointSetting) == 0x000070, "Wrong size on FEndFieldClimbingJumpPointSetting");
static_assert(offsetof(FEndFieldClimbingJumpPointSetting, JumpPointType) == 0x000048, "Member 'FEndFieldClimbingJumpPointSetting::JumpPointType' has a wrong offset!");
static_assert(offsetof(FEndFieldClimbingJumpPointSetting, HookRopeActor) == 0x000050, "Member 'FEndFieldClimbingJumpPointSetting::HookRopeActor' has a wrong offset!");
static_assert(offsetof(FEndFieldClimbingJumpPointSetting, ClimbingActor) == 0x000058, "Member 'FEndFieldClimbingJumpPointSetting::ClimbingActor' has a wrong offset!");
static_assert(offsetof(FEndFieldClimbingJumpPointSetting, ClimbingPointIndex) == 0x000060, "Member 'FEndFieldClimbingJumpPointSetting::ClimbingPointIndex' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorCutSeamlessInExtraAction
// 0x0100 (0x0500 - 0x0400)
struct FEndBehaviorCutSeamlessInExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x100];                                    // 0x0400(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorCutSeamlessInExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorCutSeamlessInExtraAction");
static_assert(sizeof(FEndBehaviorCutSeamlessInExtraAction) == 0x000500, "Wrong size on FEndBehaviorCutSeamlessInExtraAction");

// ScriptStruct EndGame.EndFeelerFollowingEmissiveContext
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndFeelerFollowingEmissiveContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerFollowingEmissiveContext) == 0x000008, "Wrong alignment on FEndFeelerFollowingEmissiveContext");
static_assert(sizeof(FEndFeelerFollowingEmissiveContext) == 0x000020, "Wrong size on FEndFeelerFollowingEmissiveContext");

// ScriptStruct EndGame.EndBikeForceBrakeParam
// 0x000C (0x000C - 0x0000)
struct FEndBikeForceBrakeParam final
{
public:
	float                                         BrakePower;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakeTime;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeForceBrakeParam) == 0x000004, "Wrong alignment on FEndBikeForceBrakeParam");
static_assert(sizeof(FEndBikeForceBrakeParam) == 0x00000C, "Wrong size on FEndBikeForceBrakeParam");
static_assert(offsetof(FEndBikeForceBrakeParam, BrakePower) == 0x000000, "Member 'FEndBikeForceBrakeParam::BrakePower' has a wrong offset!");
static_assert(offsetof(FEndBikeForceBrakeParam, BrakeTime) == 0x000004, "Member 'FEndBikeForceBrakeParam::BrakeTime' has a wrong offset!");
static_assert(offsetof(FEndBikeForceBrakeParam, MinSpeed) == 0x000008, "Member 'FEndBikeForceBrakeParam::MinSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorCutSeamlessOutExtraAction
// 0x0110 (0x0510 - 0x0400)
struct FEndBehaviorCutSeamlessOutExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x110];                                    // 0x0400(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorCutSeamlessOutExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorCutSeamlessOutExtraAction");
static_assert(sizeof(FEndBehaviorCutSeamlessOutExtraAction) == 0x000510, "Wrong size on FEndBehaviorCutSeamlessOutExtraAction");

// ScriptStruct EndGame.EndTinyBroncoDolphinActionLotteryData
// 0x000C (0x000C - 0x0000)
struct FEndTinyBroncoDolphinActionLotteryData final
{
public:
	uint32                                        SelectWeight;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionDefinitionName;                              // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndTinyBroncoDolphinActionLotteryData) == 0x000004, "Wrong alignment on FEndTinyBroncoDolphinActionLotteryData");
static_assert(sizeof(FEndTinyBroncoDolphinActionLotteryData) == 0x00000C, "Wrong size on FEndTinyBroncoDolphinActionLotteryData");
static_assert(offsetof(FEndTinyBroncoDolphinActionLotteryData, SelectWeight) == 0x000000, "Member 'FEndTinyBroncoDolphinActionLotteryData::SelectWeight' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoDolphinActionLotteryData, ActionDefinitionName) == 0x000004, "Member 'FEndTinyBroncoDolphinActionLotteryData::ActionDefinitionName' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorDamageExtraAction
// 0x0010 (0x0410 - 0x0400)
struct FEndBehaviorDamageExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x10];                                     // 0x0400(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorDamageExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorDamageExtraAction");
static_assert(sizeof(FEndBehaviorDamageExtraAction) == 0x000410, "Wrong size on FEndBehaviorDamageExtraAction");

// ScriptStruct EndGame.EndBodyControlRigFootEffectorFoot
// 0x000C (0x000C - 0x0000)
struct FEndBodyControlRigFootEffectorFoot final
{
public:
	class FName                                   FootBoneName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         FootBoneForwardAxis;                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBodyControlRigFootEffectorFoot) == 0x000004, "Wrong alignment on FEndBodyControlRigFootEffectorFoot");
static_assert(sizeof(FEndBodyControlRigFootEffectorFoot) == 0x00000C, "Wrong size on FEndBodyControlRigFootEffectorFoot");
static_assert(offsetof(FEndBodyControlRigFootEffectorFoot, FootBoneName) == 0x000000, "Member 'FEndBodyControlRigFootEffectorFoot::FootBoneName' has a wrong offset!");
static_assert(offsetof(FEndBodyControlRigFootEffectorFoot, FootBoneForwardAxis) == 0x000008, "Member 'FEndBodyControlRigFootEffectorFoot::FootBoneForwardAxis' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorDamageExtraActionInput
// 0x0010 (0x0010 - 0x0000)
struct FEndBehaviorDamageExtraActionInput final
{
public:
	EEndBattleDamageSourceHitReactionType         DamageReactionType;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateToDamageVector;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DamageVector;                                      // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBehaviorDamageExtraActionInput) == 0x000004, "Wrong alignment on FEndBehaviorDamageExtraActionInput");
static_assert(sizeof(FEndBehaviorDamageExtraActionInput) == 0x000010, "Wrong size on FEndBehaviorDamageExtraActionInput");
static_assert(offsetof(FEndBehaviorDamageExtraActionInput, DamageReactionType) == 0x000000, "Member 'FEndBehaviorDamageExtraActionInput::DamageReactionType' has a wrong offset!");
static_assert(offsetof(FEndBehaviorDamageExtraActionInput, bRotateToDamageVector) == 0x000001, "Member 'FEndBehaviorDamageExtraActionInput::bRotateToDamageVector' has a wrong offset!");
static_assert(offsetof(FEndBehaviorDamageExtraActionInput, DamageVector) == 0x000004, "Member 'FEndBehaviorDamageExtraActionInput::DamageVector' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorDeadExtraAction
// 0x0010 (0x06A0 - 0x0690)
struct FEndBehaviorDeadExtraAction final : public FEndBehaviorSimpleFsmExtraAction
{
public:
	uint8                                         Pad_690[0x10];                                     // 0x0690(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorDeadExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorDeadExtraAction");
static_assert(sizeof(FEndBehaviorDeadExtraAction) == 0x0006A0, "Wrong size on FEndBehaviorDeadExtraAction");

// ScriptStruct EndGame.EndBikeSplineMetaData
// 0x0010 (0x0010 - 0x0000)
struct FEndBikeSplineMetaData final
{
public:
	struct FFloatInterval                         AppliedRange;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MetaDataTableID;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeSplineMetaData) == 0x000004, "Wrong alignment on FEndBikeSplineMetaData");
static_assert(sizeof(FEndBikeSplineMetaData) == 0x000010, "Wrong size on FEndBikeSplineMetaData");
static_assert(offsetof(FEndBikeSplineMetaData, AppliedRange) == 0x000000, "Member 'FEndBikeSplineMetaData::AppliedRange' has a wrong offset!");
static_assert(offsetof(FEndBikeSplineMetaData, MetaDataTableID) == 0x000008, "Member 'FEndBikeSplineMetaData::MetaDataTableID' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorDolphinSwimmingDolphinExtraAction
// 0x0210 (0x0610 - 0x0400)
struct FEndBehaviorDolphinSwimmingDolphinExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x210];                                    // 0x0400(0x0210)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorDolphinSwimmingDolphinExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorDolphinSwimmingDolphinExtraAction");
static_assert(sizeof(FEndBehaviorDolphinSwimmingDolphinExtraAction) == 0x000610, "Wrong size on FEndBehaviorDolphinSwimmingDolphinExtraAction");

// ScriptStruct EndGame.EndWheeledVehicleCameraLocationData
// 0x0024 (0x0024 - 0x0000)
struct FEndWheeledVehicleCameraLocationData final
{
public:
	struct FVector                                AimLocation;                                       // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AimDistance;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleCameraLocationData) == 0x000004, "Wrong alignment on FEndWheeledVehicleCameraLocationData");
static_assert(sizeof(FEndWheeledVehicleCameraLocationData) == 0x000024, "Wrong size on FEndWheeledVehicleCameraLocationData");
static_assert(offsetof(FEndWheeledVehicleCameraLocationData, AimLocation) == 0x000000, "Member 'FEndWheeledVehicleCameraLocationData::AimLocation' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraLocationData, Rotation) == 0x00000C, "Member 'FEndWheeledVehicleCameraLocationData::Rotation' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraLocationData, AimDistance) == 0x000018, "Member 'FEndWheeledVehicleCameraLocationData::AimDistance' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraLocationData, Height) == 0x00001C, "Member 'FEndWheeledVehicleCameraLocationData::Height' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraLocationData, FOV) == 0x000020, "Member 'FEndWheeledVehicleCameraLocationData::FOV' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleCameraFocusVehicleData
// 0x0028 (0x0028 - 0x0000)
struct FEndWheeledVehicleCameraFocusVehicleData final
{
public:
	float                                         HeightFromPlayer;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYawOffset;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateOffsetLength;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateOffsetRate;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDistanceFromPlayer;                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VehicleOffset;                                     // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleCameraFocusVehicleData) == 0x000004, "Wrong alignment on FEndWheeledVehicleCameraFocusVehicleData");
static_assert(sizeof(FEndWheeledVehicleCameraFocusVehicleData) == 0x000028, "Wrong size on FEndWheeledVehicleCameraFocusVehicleData");
static_assert(offsetof(FEndWheeledVehicleCameraFocusVehicleData, HeightFromPlayer) == 0x000000, "Member 'FEndWheeledVehicleCameraFocusVehicleData::HeightFromPlayer' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraFocusVehicleData, AimYawOffset) == 0x000004, "Member 'FEndWheeledVehicleCameraFocusVehicleData::AimYawOffset' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraFocusVehicleData, RotateOffsetLength) == 0x000008, "Member 'FEndWheeledVehicleCameraFocusVehicleData::RotateOffsetLength' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraFocusVehicleData, RotateOffsetRate) == 0x00000C, "Member 'FEndWheeledVehicleCameraFocusVehicleData::RotateOffsetRate' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraFocusVehicleData, AdditionalDistanceFromPlayer) == 0x000010, "Member 'FEndWheeledVehicleCameraFocusVehicleData::AdditionalDistanceFromPlayer' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraFocusVehicleData, FOV) == 0x000014, "Member 'FEndWheeledVehicleCameraFocusVehicleData::FOV' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraFocusVehicleData, Height) == 0x000018, "Member 'FEndWheeledVehicleCameraFocusVehicleData::Height' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleCameraFocusVehicleData, VehicleOffset) == 0x00001C, "Member 'FEndWheeledVehicleCameraFocusVehicleData::VehicleOffset' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleActionAppearCameraParam
// 0x004C (0x004C - 0x0000)
struct FEndWheeledVehicleActionAppearCameraParam final
{
public:
	struct FEndWheeledVehicleCameraLocationData   FocusPlayerHand;                                   // 0x0000(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndWheeledVehicleCameraFocusVehicleData FocusVehicle;                                      // 0x0024(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleActionAppearCameraParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleActionAppearCameraParam");
static_assert(sizeof(FEndWheeledVehicleActionAppearCameraParam) == 0x00004C, "Wrong size on FEndWheeledVehicleActionAppearCameraParam");
static_assert(offsetof(FEndWheeledVehicleActionAppearCameraParam, FocusPlayerHand) == 0x000000, "Member 'FEndWheeledVehicleActionAppearCameraParam::FocusPlayerHand' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleActionAppearCameraParam, FocusVehicle) == 0x000024, "Member 'FEndWheeledVehicleActionAppearCameraParam::FocusVehicle' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorDolphinSwimmingMobExtraAction
// 0x00B0 (0x04B0 - 0x0400)
struct FEndBehaviorDolphinSwimmingMobExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0xB0];                                     // 0x0400(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorDolphinSwimmingMobExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorDolphinSwimmingMobExtraAction");
static_assert(sizeof(FEndBehaviorDolphinSwimmingMobExtraAction) == 0x0004B0, "Wrong size on FEndBehaviorDolphinSwimmingMobExtraAction");

// ScriptStruct EndGame.EndVehicleSmoothingParam
// 0x000C (0x000C - 0x0000)
struct FEndVehicleSmoothingParam
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantArrivalTime;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleSmoothingParam) == 0x000004, "Wrong alignment on FEndVehicleSmoothingParam");
static_assert(sizeof(FEndVehicleSmoothingParam) == 0x00000C, "Wrong size on FEndVehicleSmoothingParam");
static_assert(offsetof(FEndVehicleSmoothingParam, MaxSpeed) == 0x000000, "Member 'FEndVehicleSmoothingParam::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndVehicleSmoothingParam, Acceleration) == 0x000004, "Member 'FEndVehicleSmoothingParam::Acceleration' has a wrong offset!");
static_assert(offsetof(FEndVehicleSmoothingParam, ConstantArrivalTime) == 0x000008, "Member 'FEndVehicleSmoothingParam::ConstantArrivalTime' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorDuctMoveExtraAction
// 0x0150 (0x0550 - 0x0400)
struct FEndBehaviorDuctMoveExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x150];                                    // 0x0400(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorDuctMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorDuctMoveExtraAction");
static_assert(sizeof(FEndBehaviorDuctMoveExtraAction) == 0x000550, "Wrong size on FEndBehaviorDuctMoveExtraAction");

// ScriptStruct EndGame.EndBehaviorEndBranchFsmExtraAction
// 0x0320 (0x0720 - 0x0400)
struct FEndBehaviorEndBranchFsmExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x320];                                    // 0x0400(0x0320)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorEndBranchFsmExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorEndBranchFsmExtraAction");
static_assert(sizeof(FEndBehaviorEndBranchFsmExtraAction) == 0x000720, "Wrong size on FEndBehaviorEndBranchFsmExtraAction");

// ScriptStruct EndGame.BlackCloakFootprintEffectInfo
// 0x0040 (0x0040 - 0x0000)
struct FBlackCloakFootprintEffectInfo final
{
public:
	EBlackCloakFootprintEffectType                Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Trans;                                             // 0x0010(0x0030)(Edit, DisableEditOnTemplate, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlackCloakFootprintEffectInfo) == 0x000010, "Wrong alignment on FBlackCloakFootprintEffectInfo");
static_assert(sizeof(FBlackCloakFootprintEffectInfo) == 0x000040, "Wrong size on FBlackCloakFootprintEffectInfo");
static_assert(offsetof(FBlackCloakFootprintEffectInfo, Type) == 0x000000, "Member 'FBlackCloakFootprintEffectInfo::Type' has a wrong offset!");
static_assert(offsetof(FBlackCloakFootprintEffectInfo, Trans) == 0x000010, "Member 'FBlackCloakFootprintEffectInfo::Trans' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorEnvironmentCraneExtraAction
// 0x0030 (0x0430 - 0x0400)
struct FEndBehaviorEnvironmentCraneExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x30];                                     // 0x0400(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorEnvironmentCraneExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorEnvironmentCraneExtraAction");
static_assert(sizeof(FEndBehaviorEnvironmentCraneExtraAction) == 0x000430, "Wrong size on FEndBehaviorEnvironmentCraneExtraAction");

// ScriptStruct EndGame.RigUnit_EndLookAt_ItemCache
// 0x0080 (0x0080 - 0x0000)
struct FRigUnit_EndLookAt_ItemCache final
{
public:
	struct FCachedRigElement                      CachedItem;                                        // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentWeight;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreWeight;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualWeight;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpRate;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CachedQuat0;                                       // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  CachedQuat1;                                       // 0x0040(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         X0;                                                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V0;                                                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A0;                                                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T1;                                                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         C;                                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         S;                                                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AxisX0;                                            // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendDelayTime;                                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLookAt_ItemCache) == 0x000010, "Wrong alignment on FRigUnit_EndLookAt_ItemCache");
static_assert(sizeof(FRigUnit_EndLookAt_ItemCache) == 0x000080, "Wrong size on FRigUnit_EndLookAt_ItemCache");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, CachedItem) == 0x000000, "Member 'FRigUnit_EndLookAt_ItemCache::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, CurrentWeight) == 0x000014, "Member 'FRigUnit_EndLookAt_ItemCache::CurrentWeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, IgnoreWeight) == 0x000018, "Member 'FRigUnit_EndLookAt_ItemCache::IgnoreWeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, ActualWeight) == 0x00001C, "Member 'FRigUnit_EndLookAt_ItemCache::ActualWeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, UpRate) == 0x000020, "Member 'FRigUnit_EndLookAt_ItemCache::UpRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, CachedQuat0) == 0x000030, "Member 'FRigUnit_EndLookAt_ItemCache::CachedQuat0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, CachedQuat1) == 0x000040, "Member 'FRigUnit_EndLookAt_ItemCache::CachedQuat1' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, X0) == 0x000050, "Member 'FRigUnit_EndLookAt_ItemCache::X0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, V0) == 0x000054, "Member 'FRigUnit_EndLookAt_ItemCache::V0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, A0) == 0x000058, "Member 'FRigUnit_EndLookAt_ItemCache::A0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, T1) == 0x00005C, "Member 'FRigUnit_EndLookAt_ItemCache::T1' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, A) == 0x000060, "Member 'FRigUnit_EndLookAt_ItemCache::A' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, B) == 0x000064, "Member 'FRigUnit_EndLookAt_ItemCache::B' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, C) == 0x000068, "Member 'FRigUnit_EndLookAt_ItemCache::C' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, S) == 0x00006C, "Member 'FRigUnit_EndLookAt_ItemCache::S' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, AxisX0) == 0x000070, "Member 'FRigUnit_EndLookAt_ItemCache::AxisX0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_ItemCache, BlendDelayTime) == 0x00007C, "Member 'FRigUnit_EndLookAt_ItemCache::BlendDelayTime' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorEnvironmentCrashBoxExtraAction
// 0x0050 (0x0450 - 0x0400)
struct FEndBehaviorEnvironmentCrashBoxExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x50];                                     // 0x0400(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorEnvironmentCrashBoxExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorEnvironmentCrashBoxExtraAction");
static_assert(sizeof(FEndBehaviorEnvironmentCrashBoxExtraAction) == 0x000450, "Wrong size on FEndBehaviorEnvironmentCrashBoxExtraAction");

// ScriptStruct EndGame.EndBoneControlBoneSetting
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x10) FEndBoneControlBoneSetting final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBoneControlBoneSetting) == 0x000010, "Wrong alignment on FEndBoneControlBoneSetting");
static_assert(sizeof(FEndBoneControlBoneSetting) == 0x000030, "Wrong size on FEndBoneControlBoneSetting");

// ScriptStruct EndGame.EndBehaviorEnvironmentCrashBoxGearBoxExtraAction
// 0x0070 (0x0470 - 0x0400)
struct FEndBehaviorEnvironmentCrashBoxGearBoxExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x70];                                     // 0x0400(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorEnvironmentCrashBoxGearBoxExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorEnvironmentCrashBoxGearBoxExtraAction");
static_assert(sizeof(FEndBehaviorEnvironmentCrashBoxGearBoxExtraAction) == 0x000470, "Wrong size on FEndBehaviorEnvironmentCrashBoxGearBoxExtraAction");

// ScriptStruct EndGame.EndBehaviorPianoExtraActionBase
// 0x0000 (0x0400 - 0x0400)
struct FEndBehaviorPianoExtraActionBase : public FEndBehaviorExtraAction
{
};
static_assert(alignof(FEndBehaviorPianoExtraActionBase) == 0x000010, "Wrong alignment on FEndBehaviorPianoExtraActionBase");
static_assert(sizeof(FEndBehaviorPianoExtraActionBase) == 0x000400, "Wrong size on FEndBehaviorPianoExtraActionBase");

// ScriptStruct EndGame.EndBodyControlRigHandEffectorHand
// 0x000C (0x000C - 0x0000)
struct FEndBodyControlRigHandEffectorHand final
{
public:
	class FName                                   HandBoneName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         HandBoneForwardAxis;                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBodyControlRigHandEffectorHand) == 0x000004, "Wrong alignment on FEndBodyControlRigHandEffectorHand");
static_assert(sizeof(FEndBodyControlRigHandEffectorHand) == 0x00000C, "Wrong size on FEndBodyControlRigHandEffectorHand");
static_assert(offsetof(FEndBodyControlRigHandEffectorHand, HandBoneName) == 0x000000, "Member 'FEndBodyControlRigHandEffectorHand::HandBoneName' has a wrong offset!");
static_assert(offsetof(FEndBodyControlRigHandEffectorHand, HandBoneForwardAxis) == 0x000008, "Member 'FEndBodyControlRigHandEffectorHand::HandBoneForwardAxis' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorEnvironmentPianoExtraAction
// 0x0070 (0x0470 - 0x0400)
struct FEndBehaviorEnvironmentPianoExtraAction final : public FEndBehaviorPianoExtraActionBase
{
public:
	uint8                                         Pad_400[0x70];                                     // 0x0400(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorEnvironmentPianoExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorEnvironmentPianoExtraAction");
static_assert(sizeof(FEndBehaviorEnvironmentPianoExtraAction) == 0x000470, "Wrong size on FEndBehaviorEnvironmentPianoExtraAction");

// ScriptStruct EndGame.EndWheeledVehicleStuckCheckParam
// 0x0040 (0x0040 - 0x0000)
struct FEndWheeledVehicleStuckCheckParam final
{
public:
	float                                         ForceForStuckWithTireInAir;                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraAccelScale;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginStuckSpeedKph;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndStuckSpeedKph;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelDummyBeginSpeedOnStuck;                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelDummySpeedForwardOnStuck;                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelDummySpeedBackwardOnStuck;                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClimbingSlideDownMaxUpVectorDeltaAngle;            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClimbingSlideDownTimer;                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClimbingSlideDownTireFliction;                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComOffsetOnJump;                                   // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CoverageTimeOnJump;                                // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleStuckCheckParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleStuckCheckParam");
static_assert(sizeof(FEndWheeledVehicleStuckCheckParam) == 0x000040, "Wrong size on FEndWheeledVehicleStuckCheckParam");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, ForceForStuckWithTireInAir) == 0x000000, "Member 'FEndWheeledVehicleStuckCheckParam::ForceForStuckWithTireInAir' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, ExtraAccelScale) == 0x000004, "Member 'FEndWheeledVehicleStuckCheckParam::ExtraAccelScale' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, BeginStuckSpeedKph) == 0x000008, "Member 'FEndWheeledVehicleStuckCheckParam::BeginStuckSpeedKph' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, EndStuckSpeedKph) == 0x00000C, "Member 'FEndWheeledVehicleStuckCheckParam::EndStuckSpeedKph' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, WheelDummyBeginSpeedOnStuck) == 0x000010, "Member 'FEndWheeledVehicleStuckCheckParam::WheelDummyBeginSpeedOnStuck' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, WheelDummySpeedForwardOnStuck) == 0x000014, "Member 'FEndWheeledVehicleStuckCheckParam::WheelDummySpeedForwardOnStuck' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, WheelDummySpeedBackwardOnStuck) == 0x000018, "Member 'FEndWheeledVehicleStuckCheckParam::WheelDummySpeedBackwardOnStuck' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, ClimbingSlideDownMaxUpVectorDeltaAngle) == 0x00001C, "Member 'FEndWheeledVehicleStuckCheckParam::ClimbingSlideDownMaxUpVectorDeltaAngle' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, ClimbingSlideDownTimer) == 0x000020, "Member 'FEndWheeledVehicleStuckCheckParam::ClimbingSlideDownTimer' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, ClimbingSlideDownTireFliction) == 0x000024, "Member 'FEndWheeledVehicleStuckCheckParam::ClimbingSlideDownTireFliction' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, ComOffsetOnJump) == 0x000028, "Member 'FEndWheeledVehicleStuckCheckParam::ComOffsetOnJump' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleStuckCheckParam, CoverageTimeOnJump) == 0x000034, "Member 'FEndWheeledVehicleStuckCheckParam::CoverageTimeOnJump' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFA0222ControlPanelExtraAction
// 0x0130 (0x0530 - 0x0400)
struct FEndBehaviorFA0222ControlPanelExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x130];                                    // 0x0400(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFA0222ControlPanelExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFA0222ControlPanelExtraAction");
static_assert(sizeof(FEndBehaviorFA0222ControlPanelExtraAction) == 0x000530, "Wrong size on FEndBehaviorFA0222ControlPanelExtraAction");

// ScriptStruct EndGame.BikeSeAsset
// 0x0048 (0x0048 - 0x0000)
struct FBikeSeAsset final
{
public:
	struct FSQEXSEADSoundKey                      Key;                                               // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBikeSeAsset) == 0x000008, "Wrong alignment on FBikeSeAsset");
static_assert(sizeof(FBikeSeAsset) == 0x000048, "Wrong size on FBikeSeAsset");
static_assert(offsetof(FBikeSeAsset, Key) == 0x000000, "Member 'FBikeSeAsset::Key' has a wrong offset!");
static_assert(offsetof(FBikeSeAsset, FadeInTime) == 0x000038, "Member 'FBikeSeAsset::FadeInTime' has a wrong offset!");
static_assert(offsetof(FBikeSeAsset, FadeOutTime) == 0x00003C, "Member 'FBikeSeAsset::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FBikeSeAsset, AttachPointName) == 0x000040, "Member 'FBikeSeAsset::AttachPointName' has a wrong offset!");

// ScriptStruct EndGame.EndDolphinJumpSplinePhaseData
// 0x000C (0x000C - 0x0000)
struct FEndDolphinJumpSplinePhaseData final
{
public:
	float                                         StartDistance;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwimmingDistance;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableUserControll;                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveToCenterLine;                                  // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDolphinJumpSplinePhaseData) == 0x000004, "Wrong alignment on FEndDolphinJumpSplinePhaseData");
static_assert(sizeof(FEndDolphinJumpSplinePhaseData) == 0x00000C, "Wrong size on FEndDolphinJumpSplinePhaseData");
static_assert(offsetof(FEndDolphinJumpSplinePhaseData, StartDistance) == 0x000000, "Member 'FEndDolphinJumpSplinePhaseData::StartDistance' has a wrong offset!");
static_assert(offsetof(FEndDolphinJumpSplinePhaseData, SwimmingDistance) == 0x000004, "Member 'FEndDolphinJumpSplinePhaseData::SwimmingDistance' has a wrong offset!");
static_assert(offsetof(FEndDolphinJumpSplinePhaseData, DisableUserControll) == 0x000008, "Member 'FEndDolphinJumpSplinePhaseData::DisableUserControll' has a wrong offset!");
static_assert(offsetof(FEndDolphinJumpSplinePhaseData, MoveToCenterLine) == 0x000009, "Member 'FEndDolphinJumpSplinePhaseData::MoveToCenterLine' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFA2405DroneRingGimmickExtraAction
// 0x0060 (0x0470 - 0x0410)
struct FEndBehaviorFA2405DroneRingGimmickExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x60];                                     // 0x0410(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFA2405DroneRingGimmickExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFA2405DroneRingGimmickExtraAction");
static_assert(sizeof(FEndBehaviorFA2405DroneRingGimmickExtraAction) == 0x000470, "Wrong size on FEndBehaviorFA2405DroneRingGimmickExtraAction");

// ScriptStruct EndGame.EndBehaviorFanExtraAction
// 0x0110 (0x0510 - 0x0400)
struct FEndBehaviorFanExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x110];                                    // 0x0400(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFanExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFanExtraAction");
static_assert(sizeof(FEndBehaviorFanExtraAction) == 0x000510, "Wrong size on FEndBehaviorFanExtraAction");

// ScriptStruct EndGame.EndFieldOneShotAccessAnimUnit
// 0x0014 (0x0014 - 0x0000)
struct FEndFieldOneShotAccessAnimUnit final
{
public:
	class FName                                   PlayAnimationName;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartSequenceRate;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldOneShotAccessAnimUnit) == 0x000004, "Wrong alignment on FEndFieldOneShotAccessAnimUnit");
static_assert(sizeof(FEndFieldOneShotAccessAnimUnit) == 0x000014, "Wrong size on FEndFieldOneShotAccessAnimUnit");
static_assert(offsetof(FEndFieldOneShotAccessAnimUnit, PlayAnimationName) == 0x000000, "Member 'FEndFieldOneShotAccessAnimUnit::PlayAnimationName' has a wrong offset!");
static_assert(offsetof(FEndFieldOneShotAccessAnimUnit, BlendInTime) == 0x000008, "Member 'FEndFieldOneShotAccessAnimUnit::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndFieldOneShotAccessAnimUnit, BlendOutTime) == 0x00000C, "Member 'FEndFieldOneShotAccessAnimUnit::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndFieldOneShotAccessAnimUnit, StartSequenceRate) == 0x000010, "Member 'FEndFieldOneShotAccessAnimUnit::StartSequenceRate' has a wrong offset!");

// ScriptStruct EndGame.EndFieldOneShotAccessSetting
// 0x0018 (0x0018 - 0x0000)
struct FEndFieldOneShotAccessSetting final
{
public:
	TArray<struct FEndFieldOneShotAccessAnimUnit> AnimationUnits;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsLoop;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsKeep;                                   // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldOneShotAccessSetting) == 0x000008, "Wrong alignment on FEndFieldOneShotAccessSetting");
static_assert(sizeof(FEndFieldOneShotAccessSetting) == 0x000018, "Wrong size on FEndFieldOneShotAccessSetting");
static_assert(offsetof(FEndFieldOneShotAccessSetting, AnimationUnits) == 0x000000, "Member 'FEndFieldOneShotAccessSetting::AnimationUnits' has a wrong offset!");
static_assert(offsetof(FEndFieldOneShotAccessSetting, bLastAnimIsLoop) == 0x000010, "Member 'FEndFieldOneShotAccessSetting::bLastAnimIsLoop' has a wrong offset!");
static_assert(offsetof(FEndFieldOneShotAccessSetting, bLastAnimIsKeep) == 0x000011, "Member 'FEndFieldOneShotAccessSetting::bLastAnimIsKeep' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFieldAttackExtraAction
// 0x0020 (0x04A0 - 0x0480)
struct FEndBehaviorFieldAttackExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x20];                                     // 0x0480(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldAttackExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldAttackExtraAction");
static_assert(sizeof(FEndBehaviorFieldAttackExtraAction) == 0x0004A0, "Wrong size on FEndBehaviorFieldAttackExtraAction");

// ScriptStruct EndGame.EndBehaviorFieldCableCatchExtraAction
// 0x0330 (0x0740 - 0x0410)
struct FEndBehaviorFieldCableCatchExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x330];                                    // 0x0410(0x0330)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldCableCatchExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldCableCatchExtraAction");
static_assert(sizeof(FEndBehaviorFieldCableCatchExtraAction) == 0x000740, "Wrong size on FEndBehaviorFieldCableCatchExtraAction");

// ScriptStruct EndGame.EndMovementSettingsBodyCollision
// 0x0001 (0x0001 - 0x0000)
struct FEndMovementSettingsBodyCollision final
{
public:
	bool                                          bEnableBodySubCollision;                           // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMovementSettingsBodyCollision) == 0x000001, "Wrong alignment on FEndMovementSettingsBodyCollision");
static_assert(sizeof(FEndMovementSettingsBodyCollision) == 0x000001, "Wrong size on FEndMovementSettingsBodyCollision");
static_assert(offsetof(FEndMovementSettingsBodyCollision, bEnableBodySubCollision) == 0x000000, "Member 'FEndMovementSettingsBodyCollision::bEnableBodySubCollision' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFieldDodgeExtraAction
// 0x0040 (0x04C0 - 0x0480)
struct FEndBehaviorFieldDodgeExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x40];                                     // 0x0480(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldDodgeExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldDodgeExtraAction");
static_assert(sizeof(FEndBehaviorFieldDodgeExtraAction) == 0x0004C0, "Wrong size on FEndBehaviorFieldDodgeExtraAction");

// ScriptStruct EndGame.EndPhysicsSeSetting
// 0x00C0 (0x00C0 - 0x0000)
struct FEndPhysicsSeSetting final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEXSEADSoundKey                      HitSEKey;                                          // 0x0008(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         HitImpulseThreshold;                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistanceThreshold;                              // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitImpulseSizeMax;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      HitAttenuationSetting;                             // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      HitConcurrencySetting;                             // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEXSEADSoundKey                      FractureSEKey;                                     // 0x0060(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         FractureImpulseSizeMax;                            // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      FractureAttenuationSetting;                        // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bWantsFragmentHit : 1;                             // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHitSensitive : 1;                                 // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitSensitiveScalingValue;                          // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADSound*                         HitSoundAsset;                                     // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADSound*                         FractureSoundAsset;                                // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicsSeSetting) == 0x000008, "Wrong alignment on FEndPhysicsSeSetting");
static_assert(sizeof(FEndPhysicsSeSetting) == 0x0000C0, "Wrong size on FEndPhysicsSeSetting");
static_assert(offsetof(FEndPhysicsSeSetting, HitSEKey) == 0x000008, "Member 'FEndPhysicsSeSetting::HitSEKey' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitImpulseThreshold) == 0x000040, "Member 'FEndPhysicsSeSetting::HitImpulseThreshold' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitDistanceThreshold) == 0x000044, "Member 'FEndPhysicsSeSetting::HitDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitImpulseSizeMax) == 0x000048, "Member 'FEndPhysicsSeSetting::HitImpulseSizeMax' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitAttenuationSetting) == 0x000050, "Member 'FEndPhysicsSeSetting::HitAttenuationSetting' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitConcurrencySetting) == 0x000058, "Member 'FEndPhysicsSeSetting::HitConcurrencySetting' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, FractureSEKey) == 0x000060, "Member 'FEndPhysicsSeSetting::FractureSEKey' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, FractureImpulseSizeMax) == 0x000098, "Member 'FEndPhysicsSeSetting::FractureImpulseSizeMax' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, FractureAttenuationSetting) == 0x0000A0, "Member 'FEndPhysicsSeSetting::FractureAttenuationSetting' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitSensitiveScalingValue) == 0x0000AC, "Member 'FEndPhysicsSeSetting::HitSensitiveScalingValue' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitSoundAsset) == 0x0000B0, "Member 'FEndPhysicsSeSetting::HitSoundAsset' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, FractureSoundAsset) == 0x0000B8, "Member 'FEndPhysicsSeSetting::FractureSoundAsset' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFieldRedHoldPullExtraAction
// 0x0290 (0x0720 - 0x0490)
struct FEndBehaviorFieldRedHoldPullExtraAction final : public FEndBehaviorNewFieldUpperExtraAction
{
public:
	uint8                                         Pad_490[0x290];                                    // 0x0490(0x0290)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldRedHoldPullExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldRedHoldPullExtraAction");
static_assert(sizeof(FEndBehaviorFieldRedHoldPullExtraAction) == 0x000720, "Wrong size on FEndBehaviorFieldRedHoldPullExtraAction");

// ScriptStruct EndGame.EndBehaviorFrogJumpExtraAction
// 0x00B0 (0x04B0 - 0x0400)
struct FEndBehaviorFrogJumpExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0xB0];                                     // 0x0400(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFrogJumpExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFrogJumpExtraAction");
static_assert(sizeof(FEndBehaviorFrogJumpExtraAction) == 0x0004B0, "Wrong size on FEndBehaviorFrogJumpExtraAction");

// ScriptStruct EndGame.EndNaviMapVolumePoly
// 0x0044 (0x0044 - 0x0000)
struct FEndNaviMapVolumePoly final
{
public:
	struct FVector                                Vert0;                                             // 0x0000(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vert1;                                             // 0x000C(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vert2;                                             // 0x0018(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV0;                                               // 0x0024(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV1;                                               // 0x002C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV2;                                               // 0x0034(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureName;                                       // 0x003C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapVolumePoly) == 0x000004, "Wrong alignment on FEndNaviMapVolumePoly");
static_assert(sizeof(FEndNaviMapVolumePoly) == 0x000044, "Wrong size on FEndNaviMapVolumePoly");
static_assert(offsetof(FEndNaviMapVolumePoly, Vert0) == 0x000000, "Member 'FEndNaviMapVolumePoly::Vert0' has a wrong offset!");
static_assert(offsetof(FEndNaviMapVolumePoly, Vert1) == 0x00000C, "Member 'FEndNaviMapVolumePoly::Vert1' has a wrong offset!");
static_assert(offsetof(FEndNaviMapVolumePoly, Vert2) == 0x000018, "Member 'FEndNaviMapVolumePoly::Vert2' has a wrong offset!");
static_assert(offsetof(FEndNaviMapVolumePoly, UV0) == 0x000024, "Member 'FEndNaviMapVolumePoly::UV0' has a wrong offset!");
static_assert(offsetof(FEndNaviMapVolumePoly, UV1) == 0x00002C, "Member 'FEndNaviMapVolumePoly::UV1' has a wrong offset!");
static_assert(offsetof(FEndNaviMapVolumePoly, UV2) == 0x000034, "Member 'FEndNaviMapVolumePoly::UV2' has a wrong offset!");
static_assert(offsetof(FEndNaviMapVolumePoly, TextureName) == 0x00003C, "Member 'FEndNaviMapVolumePoly::TextureName' has a wrong offset!");

// ScriptStruct EndGame.EndSceneNaviMapVolumeLodInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndSceneNaviMapVolumeLodInfo final
{
public:
	TArray<struct FEndNaviMapVolumePoly>          VolumePolysWithWorldOffset;                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndSceneNaviMapVolumeLodInfo) == 0x000008, "Wrong alignment on FEndSceneNaviMapVolumeLodInfo");
static_assert(sizeof(FEndSceneNaviMapVolumeLodInfo) == 0x000010, "Wrong size on FEndSceneNaviMapVolumeLodInfo");
static_assert(offsetof(FEndSceneNaviMapVolumeLodInfo, VolumePolysWithWorldOffset) == 0x000000, "Member 'FEndSceneNaviMapVolumeLodInfo::VolumePolysWithWorldOffset' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorHandlePuzzleEnvironmentExtraAction
// 0x0010 (0x0410 - 0x0400)
struct FEndBehaviorHandlePuzzleEnvironmentExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x10];                                     // 0x0400(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorHandlePuzzleEnvironmentExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorHandlePuzzleEnvironmentExtraAction");
static_assert(sizeof(FEndBehaviorHandlePuzzleEnvironmentExtraAction) == 0x000410, "Wrong size on FEndBehaviorHandlePuzzleEnvironmentExtraAction");

// ScriptStruct EndGame.EndBehaviorHangMoveExtraAction
// 0x00D0 (0x04D0 - 0x0400)
struct FEndBehaviorHangMoveExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0xD0];                                     // 0x0400(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorHangMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorHangMoveExtraAction");
static_assert(sizeof(FEndBehaviorHangMoveExtraAction) == 0x0004D0, "Wrong size on FEndBehaviorHangMoveExtraAction");

// ScriptStruct EndGame.EndFieldBarretShootingCameraModule
// 0x0038 (0x0428 - 0x03F0)
struct FEndFieldBarretShootingCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x38];                                     // 0x03F0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldBarretShootingCameraModule) == 0x000008, "Wrong alignment on FEndFieldBarretShootingCameraModule");
static_assert(sizeof(FEndFieldBarretShootingCameraModule) == 0x000428, "Wrong size on FEndFieldBarretShootingCameraModule");

// ScriptStruct EndGame.EndBehaviorHoldObjectExtraAction
// 0x01C0 (0x05C0 - 0x0400)
struct FEndBehaviorHoldObjectExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x1C0];                                    // 0x0400(0x01C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorHoldObjectExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorHoldObjectExtraAction");
static_assert(sizeof(FEndBehaviorHoldObjectExtraAction) == 0x0005C0, "Wrong size on FEndBehaviorHoldObjectExtraAction");

// ScriptStruct EndGame.EndBehaviorHookRopeExtraAction
// 0x0B60 (0x0FE0 - 0x0480)
struct FEndBehaviorHookRopeExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0xB60];                                    // 0x0480(0x0B60)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorHookRopeExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorHookRopeExtraAction");
static_assert(sizeof(FEndBehaviorHookRopeExtraAction) == 0x000FE0, "Wrong size on FEndBehaviorHookRopeExtraAction");

// ScriptStruct EndGame.EndBehaviorHookShotExtraAction
// 0x0800 (0x0C80 - 0x0480)
struct FEndBehaviorHookShotExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x800];                                    // 0x0480(0x0800)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorHookShotExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorHookShotExtraAction");
static_assert(sizeof(FEndBehaviorHookShotExtraAction) == 0x000C80, "Wrong size on FEndBehaviorHookShotExtraAction");

// ScriptStruct EndGame.EndLightAnimationParameter
// 0x000C (0x000C - 0x0000)
struct FEndLightAnimationParameter
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLightAnimationParameter) == 0x000004, "Wrong alignment on FEndLightAnimationParameter");
static_assert(sizeof(FEndLightAnimationParameter) == 0x00000C, "Wrong size on FEndLightAnimationParameter");
static_assert(offsetof(FEndLightAnimationParameter, Intensity) == 0x000000, "Member 'FEndLightAnimationParameter::Intensity' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationParameter, LightColor) == 0x000004, "Member 'FEndLightAnimationParameter::LightColor' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationParameter, Temperature) == 0x000008, "Member 'FEndLightAnimationParameter::Temperature' has a wrong offset!");

// ScriptStruct EndGame.EndLightAnimationDefaultOnlyComponentSettings
// 0x001C (0x0028 - 0x000C)
struct FEndLightAnimationDefaultOnlyComponentSettings final : public FEndLightAnimationParameter
{
public:
	EEndAnimationCurveType                        Curve;                                             // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveEvaluateInLogarithmicSpace;                  // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveDuration;                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomOffset;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLightAnimationDefaultOnlyComponentSettings) == 0x000008, "Wrong alignment on FEndLightAnimationDefaultOnlyComponentSettings");
static_assert(sizeof(FEndLightAnimationDefaultOnlyComponentSettings) == 0x000028, "Wrong size on FEndLightAnimationDefaultOnlyComponentSettings");
static_assert(offsetof(FEndLightAnimationDefaultOnlyComponentSettings, Curve) == 0x00000C, "Member 'FEndLightAnimationDefaultOnlyComponentSettings::Curve' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationDefaultOnlyComponentSettings, CurveAsset) == 0x000010, "Member 'FEndLightAnimationDefaultOnlyComponentSettings::CurveAsset' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationDefaultOnlyComponentSettings, bCurveEvaluateInLogarithmicSpace) == 0x000018, "Member 'FEndLightAnimationDefaultOnlyComponentSettings::bCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationDefaultOnlyComponentSettings, Duration) == 0x00001C, "Member 'FEndLightAnimationDefaultOnlyComponentSettings::Duration' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationDefaultOnlyComponentSettings, RandomAdditiveDuration) == 0x000020, "Member 'FEndLightAnimationDefaultOnlyComponentSettings::RandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationDefaultOnlyComponentSettings, RandomOffset) == 0x000024, "Member 'FEndLightAnimationDefaultOnlyComponentSettings::RandomOffset' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFallJumpExtraActionInput
// 0x0018 (0x0068 - 0x0050)
struct FEndBehaviorFallJumpExtraActionInput final : public FEndBehaviorJumpExtraActionInput
{
public:
	bool                                          bSetRotation;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RootRotation;                                      // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotationInterpSpeed;                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFallJumpExtraActionInput) == 0x000008, "Wrong alignment on FEndBehaviorFallJumpExtraActionInput");
static_assert(sizeof(FEndBehaviorFallJumpExtraActionInput) == 0x000068, "Wrong size on FEndBehaviorFallJumpExtraActionInput");
static_assert(offsetof(FEndBehaviorFallJumpExtraActionInput, bSetRotation) == 0x000050, "Member 'FEndBehaviorFallJumpExtraActionInput::bSetRotation' has a wrong offset!");
static_assert(offsetof(FEndBehaviorFallJumpExtraActionInput, RootRotation) == 0x000054, "Member 'FEndBehaviorFallJumpExtraActionInput::RootRotation' has a wrong offset!");
static_assert(offsetof(FEndBehaviorFallJumpExtraActionInput, RotationInterpSpeed) == 0x000060, "Member 'FEndBehaviorFallJumpExtraActionInput::RotationInterpSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndRailCameraOperator
// 0x00E8 (0x01D0 - 0x00E8)
struct FEndRailCameraOperator final : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0xE8];                                      // 0x00E8(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndRailCameraOperator) == 0x000008, "Wrong alignment on FEndRailCameraOperator");
static_assert(sizeof(FEndRailCameraOperator) == 0x0001D0, "Wrong size on FEndRailCameraOperator");

// ScriptStruct EndGame.EndBehaviorKnockBackExtraAction
// 0x0070 (0x0470 - 0x0400)
struct FEndBehaviorKnockBackExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x70];                                     // 0x0400(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorKnockBackExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorKnockBackExtraAction");
static_assert(sizeof(FEndBehaviorKnockBackExtraAction) == 0x000470, "Wrong size on FEndBehaviorKnockBackExtraAction");

// ScriptStruct EndGame.EndBehaviorLadderExtraAction
// 0x0400 (0x0810 - 0x0410)
struct FEndBehaviorLadderExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x400];                                    // 0x0410(0x0400)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorLadderExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorLadderExtraAction");
static_assert(sizeof(FEndBehaviorLadderExtraAction) == 0x000810, "Wrong size on FEndBehaviorLadderExtraAction");

// ScriptStruct EndGame.EndWeaponUpgradeCircle
// 0x01D0 (0x01D0 - 0x0000)
struct FEndWeaponUpgradeCircle final
{
public:
	struct FRawDistributionFloat                  m_Radius;                                          // 0x0000(0x0038)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  m_RadiusStep;                                      // 0x0038(0x0038)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 m_RadiusScale;                                     // 0x0070(0x0058)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 m_Angle;                                           // 0x00C8(0x0058)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 m_AngleStep;                                       // 0x0120(0x0058)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 m_AngleSpeed;                                      // 0x0178(0x0058)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWeaponUpgradeCircle) == 0x000008, "Wrong alignment on FEndWeaponUpgradeCircle");
static_assert(sizeof(FEndWeaponUpgradeCircle) == 0x0001D0, "Wrong size on FEndWeaponUpgradeCircle");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_Radius) == 0x000000, "Member 'FEndWeaponUpgradeCircle::m_Radius' has a wrong offset!");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_RadiusStep) == 0x000038, "Member 'FEndWeaponUpgradeCircle::m_RadiusStep' has a wrong offset!");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_RadiusScale) == 0x000070, "Member 'FEndWeaponUpgradeCircle::m_RadiusScale' has a wrong offset!");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_Angle) == 0x0000C8, "Member 'FEndWeaponUpgradeCircle::m_Angle' has a wrong offset!");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_AngleStep) == 0x000120, "Member 'FEndWeaponUpgradeCircle::m_AngleStep' has a wrong offset!");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_AngleSpeed) == 0x000178, "Member 'FEndWeaponUpgradeCircle::m_AngleSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorLaunchExtraActionInput
// 0x002C (0x002C - 0x0000)
struct FEndBehaviorLaunchExtraActionInput final
{
public:
	EEndBattleDamageSourceHitReactionType         DamageReactionType;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Impulse;                                           // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchWaitTime;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WakeUpTime;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipLaunch;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateToLaunchVector;                             // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RiseGravityScale;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallGravityScale;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirRecoveryWaitTime;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceForward;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorLaunchExtraActionInput) == 0x000004, "Wrong alignment on FEndBehaviorLaunchExtraActionInput");
static_assert(sizeof(FEndBehaviorLaunchExtraActionInput) == 0x00002C, "Wrong size on FEndBehaviorLaunchExtraActionInput");
static_assert(offsetof(FEndBehaviorLaunchExtraActionInput, DamageReactionType) == 0x000000, "Member 'FEndBehaviorLaunchExtraActionInput::DamageReactionType' has a wrong offset!");
static_assert(offsetof(FEndBehaviorLaunchExtraActionInput, Impulse) == 0x000004, "Member 'FEndBehaviorLaunchExtraActionInput::Impulse' has a wrong offset!");
static_assert(offsetof(FEndBehaviorLaunchExtraActionInput, LaunchWaitTime) == 0x000010, "Member 'FEndBehaviorLaunchExtraActionInput::LaunchWaitTime' has a wrong offset!");
static_assert(offsetof(FEndBehaviorLaunchExtraActionInput, WakeUpTime) == 0x000014, "Member 'FEndBehaviorLaunchExtraActionInput::WakeUpTime' has a wrong offset!");
static_assert(offsetof(FEndBehaviorLaunchExtraActionInput, bSkipLaunch) == 0x000018, "Member 'FEndBehaviorLaunchExtraActionInput::bSkipLaunch' has a wrong offset!");
static_assert(offsetof(FEndBehaviorLaunchExtraActionInput, bRotateToLaunchVector) == 0x000019, "Member 'FEndBehaviorLaunchExtraActionInput::bRotateToLaunchVector' has a wrong offset!");
static_assert(offsetof(FEndBehaviorLaunchExtraActionInput, RiseGravityScale) == 0x00001C, "Member 'FEndBehaviorLaunchExtraActionInput::RiseGravityScale' has a wrong offset!");
static_assert(offsetof(FEndBehaviorLaunchExtraActionInput, FallGravityScale) == 0x000020, "Member 'FEndBehaviorLaunchExtraActionInput::FallGravityScale' has a wrong offset!");
static_assert(offsetof(FEndBehaviorLaunchExtraActionInput, AirRecoveryWaitTime) == 0x000024, "Member 'FEndBehaviorLaunchExtraActionInput::AirRecoveryWaitTime' has a wrong offset!");
static_assert(offsetof(FEndBehaviorLaunchExtraActionInput, bForceForward) == 0x000028, "Member 'FEndBehaviorLaunchExtraActionInput::bForceForward' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorMineCartExtraAction
// 0x00E0 (0x0560 - 0x0480)
struct FEndBehaviorMineCartExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0xE0];                                     // 0x0480(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorMineCartExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorMineCartExtraAction");
static_assert(sizeof(FEndBehaviorMineCartExtraAction) == 0x000560, "Wrong size on FEndBehaviorMineCartExtraAction");

// ScriptStruct EndGame.EndGridLayoutLevelInfo
// 0x0030 (0x0030 - 0x0000)
struct FEndGridLayoutLevelInfo final
{
public:
	TSoftObjectPtr<class UWorld>                  GridLayoutLevel;                                   // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridX;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridY;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndGridLayoutLevelInfo) == 0x000008, "Wrong alignment on FEndGridLayoutLevelInfo");
static_assert(sizeof(FEndGridLayoutLevelInfo) == 0x000030, "Wrong size on FEndGridLayoutLevelInfo");
static_assert(offsetof(FEndGridLayoutLevelInfo, GridLayoutLevel) == 0x000000, "Member 'FEndGridLayoutLevelInfo::GridLayoutLevel' has a wrong offset!");
static_assert(offsetof(FEndGridLayoutLevelInfo, GridX) == 0x000028, "Member 'FEndGridLayoutLevelInfo::GridX' has a wrong offset!");
static_assert(offsetof(FEndGridLayoutLevelInfo, GridY) == 0x00002C, "Member 'FEndGridLayoutLevelInfo::GridY' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorMonkeyBarsExtraAction
// 0x08C0 (0x0D40 - 0x0480)
struct FEndBehaviorMonkeyBarsExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x8C0];                                    // 0x0480(0x08C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorMonkeyBarsExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorMonkeyBarsExtraAction");
static_assert(sizeof(FEndBehaviorMonkeyBarsExtraAction) == 0x000D40, "Wrong size on FEndBehaviorMonkeyBarsExtraAction");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioAttackBoneAnimationCache
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FRigUnit_EndLipSyncAudioAttackBoneAnimationCache final
{
public:
	struct FCachedRigElement                      CachedItem;                                        // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x34];                                      // 0x002C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndLipSyncAudioAttackBoneAnimationCache) == 0x000008, "Wrong alignment on FRigUnit_EndLipSyncAudioAttackBoneAnimationCache");
static_assert(sizeof(FRigUnit_EndLipSyncAudioAttackBoneAnimationCache) == 0x000060, "Wrong size on FRigUnit_EndLipSyncAudioAttackBoneAnimationCache");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBoneAnimationCache, CachedItem) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioAttackBoneAnimationCache::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBoneAnimationCache, Timer) == 0x000014, "Member 'FRigUnit_EndLipSyncAudioAttackBoneAnimationCache::Timer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBoneAnimationCache, BlendInTime) == 0x000018, "Member 'FRigUnit_EndLipSyncAudioAttackBoneAnimationCache::BlendInTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBoneAnimationCache, BlendOutTime) == 0x00001C, "Member 'FRigUnit_EndLipSyncAudioAttackBoneAnimationCache::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBoneAnimationCache, OffsetRotation) == 0x000020, "Member 'FRigUnit_EndLipSyncAudioAttackBoneAnimationCache::OffsetRotation' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioAttackBrowAnimationCache
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_EndLipSyncAudioAttackBrowAnimationCache final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetValue;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioAttackBrowAnimationCache) == 0x000004, "Wrong alignment on FRigUnit_EndLipSyncAudioAttackBrowAnimationCache");
static_assert(sizeof(FRigUnit_EndLipSyncAudioAttackBrowAnimationCache) == 0x000010, "Wrong size on FRigUnit_EndLipSyncAudioAttackBrowAnimationCache");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBrowAnimationCache, Timer) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioAttackBrowAnimationCache::Timer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBrowAnimationCache, BlendInTime) == 0x000004, "Member 'FRigUnit_EndLipSyncAudioAttackBrowAnimationCache::BlendInTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBrowAnimationCache, BlendOutTime) == 0x000008, "Member 'FRigUnit_EndLipSyncAudioAttackBrowAnimationCache::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBrowAnimationCache, OffsetValue) == 0x00000C, "Member 'FRigUnit_EndLipSyncAudioAttackBrowAnimationCache::OffsetValue' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioAttack_Cache
// 0x00C8 (0x00C8 - 0x0000)
struct FRigUnit_EndLipSyncAudioAttack_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentEvaluateFrame;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastEvaluateFrame;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0xC];                                        // 0x000C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UBlendSpaceBase>         EyebrowMoveBlendSpace;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAudioPower;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastAudioPower;                                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackAnimationBlendRate;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrowAnimationBlendRate;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndLipSyncAudioAttackBoneAnimationCache> AudioAttackAnimationCaches;                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndLipSyncAudioAttackBrowAnimationCache> AudioAttackBrowAnimationCaches;                    // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedRootItem;                                    // 0x0050(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedBrowAnimationItems;                          // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTransform>          CachedBrowAnimationBaseInverseTransforms;          // 0x0078(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioAttack_Cache) == 0x000008, "Wrong alignment on FRigUnit_EndLipSyncAudioAttack_Cache");
static_assert(sizeof(FRigUnit_EndLipSyncAudioAttack_Cache) == 0x0000C8, "Wrong size on FRigUnit_EndLipSyncAudioAttack_Cache");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, CurrentEvaluateFrame) == 0x000004, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::CurrentEvaluateFrame' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, LastEvaluateFrame) == 0x000008, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::LastEvaluateFrame' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, EyebrowMoveBlendSpace) == 0x000018, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::EyebrowMoveBlendSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, CurrentAudioPower) == 0x000020, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::CurrentAudioPower' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, LastAudioPower) == 0x000024, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::LastAudioPower' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, AttackAnimationBlendRate) == 0x000028, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::AttackAnimationBlendRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, BrowAnimationBlendRate) == 0x00002C, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::BrowAnimationBlendRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, AudioAttackAnimationCaches) == 0x000030, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::AudioAttackAnimationCaches' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, AudioAttackBrowAnimationCaches) == 0x000040, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::AudioAttackBrowAnimationCaches' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, CachedRootItem) == 0x000050, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::CachedRootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, CachedBrowAnimationItems) == 0x000068, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::CachedBrowAnimationItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Cache, CachedBrowAnimationBaseInverseTransforms) == 0x000078, "Member 'FRigUnit_EndLipSyncAudioAttack_Cache::CachedBrowAnimationBaseInverseTransforms' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorMushroomPickingExtraAction
// 0x0050 (0x0450 - 0x0400)
struct FEndBehaviorMushroomPickingExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x50];                                     // 0x0400(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorMushroomPickingExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorMushroomPickingExtraAction");
static_assert(sizeof(FEndBehaviorMushroomPickingExtraAction) == 0x000450, "Wrong size on FEndBehaviorMushroomPickingExtraAction");

// ScriptStruct EndGame.EndFieldActionTinyBroncoSplineMoveActionData
// 0x0054 (0x0054 - 0x0000)
struct FEndFieldActionTinyBroncoSplineMoveActionData final
{
public:
	float                                         InputKey;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndFieldActionTinyBroncoSplineMoveActionType ActionType;                                        // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableResetPeriodicMove;                         // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         UpwardMaxOffsetRange;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         UpwardMoveTimeRange;                               // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         SidewayMaxOffsetRange;                             // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         SidewayMoveTimeRange;                              // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         CameraScaleRange;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         CameraScaleTimeRange;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         CameraScaleTimePauseRange;                         // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpwardOffset;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvalidInputTime;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedScale;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PropellerSpeedScale;                               // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldActionTinyBroncoSplineMoveActionData) == 0x000004, "Wrong alignment on FEndFieldActionTinyBroncoSplineMoveActionData");
static_assert(sizeof(FEndFieldActionTinyBroncoSplineMoveActionData) == 0x000054, "Wrong size on FEndFieldActionTinyBroncoSplineMoveActionData");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, InputKey) == 0x000000, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::InputKey' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, ActionType) == 0x000004, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::ActionType' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, bDisableResetPeriodicMove) == 0x000005, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::bDisableResetPeriodicMove' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, UpwardMaxOffsetRange) == 0x000008, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::UpwardMaxOffsetRange' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, UpwardMoveTimeRange) == 0x000010, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::UpwardMoveTimeRange' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, SidewayMaxOffsetRange) == 0x000018, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::SidewayMaxOffsetRange' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, SidewayMoveTimeRange) == 0x000020, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::SidewayMoveTimeRange' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, CameraScaleRange) == 0x000028, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::CameraScaleRange' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, CameraScaleTimeRange) == 0x000030, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::CameraScaleTimeRange' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, CameraScaleTimePauseRange) == 0x000038, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::CameraScaleTimePauseRange' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, UpwardOffset) == 0x000040, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::UpwardOffset' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, InvalidInputTime) == 0x000044, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::InvalidInputTime' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, MaxSpeedScale) == 0x000048, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::MaxSpeedScale' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveActionData, PropellerSpeedScale) == 0x00004C, "Member 'FEndFieldActionTinyBroncoSplineMoveActionData::PropellerSpeedScale' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorOneShotWalkRunExtraAction
// 0x0020 (0x04E0 - 0x04C0)
struct FEndBehaviorOneShotWalkRunExtraAction final : public FEndBehaviorSequentialExtraAction
{
public:
	uint8                                         Pad_4C0[0x20];                                     // 0x04C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorOneShotWalkRunExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorOneShotWalkRunExtraAction");
static_assert(sizeof(FEndBehaviorOneShotWalkRunExtraAction) == 0x0004E0, "Wrong size on FEndBehaviorOneShotWalkRunExtraAction");

// ScriptStruct EndGame.RigUnit_EndSaccade_Settings
// 0x00B8 (0x00B8 - 0x0000)
struct FRigUnit_EndSaccade_Settings final
{
public:
	struct FRigElementKey                         HeadItem;                                          // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndSaccade_EyeSettings> EyeSettings;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 EyelidsItems;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   EyeMoveBlendSpaceName;                             // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeMoveBlendInterpSpeed;                           // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtWeightBias;                                  // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtUpWeightBias;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaccadeBlendSpeed;                                 // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SaccadeFrequencyRange;                             // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaccadeMoveAngleMax;                               // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaccadeMoveAngleSoftLimitRate;                     // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixationVelocityThreshold;                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaccadeDiffAngleMax;                               // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MicroSaccadeFrequencyRange;                        // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MicroSaccadeMoveAngle;                             // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomAdditiveSaccadeFrequencyRange;               // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveSaccadeMoveAngle;                    // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomAdditiveSaccadeMoveRollRange;                // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveSaccadeTimeDuration;                 // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BlinkPoseName;                                     // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlinkThreshold;                                    // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullBlinkThreshold;                                // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PeriodicBlinkBiasRange;                            // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RefrectiveBlinkSaccadeMoveAngleThreshold;          // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RefrectiveBlinkIntervalMin;                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NeutralBlinkFrequencyRange;                        // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CautionBlinkFrequencyRange;                        // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndSaccade_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndSaccade_Settings");
static_assert(sizeof(FRigUnit_EndSaccade_Settings) == 0x0000B8, "Wrong size on FRigUnit_EndSaccade_Settings");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, HeadItem) == 0x000000, "Member 'FRigUnit_EndSaccade_Settings::HeadItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, EyeSettings) == 0x000010, "Member 'FRigUnit_EndSaccade_Settings::EyeSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, EyelidsItems) == 0x000020, "Member 'FRigUnit_EndSaccade_Settings::EyelidsItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, EyeMoveBlendSpaceName) == 0x000030, "Member 'FRigUnit_EndSaccade_Settings::EyeMoveBlendSpaceName' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, EyeMoveBlendInterpSpeed) == 0x000038, "Member 'FRigUnit_EndSaccade_Settings::EyeMoveBlendInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, LookAtWeightBias) == 0x00003C, "Member 'FRigUnit_EndSaccade_Settings::LookAtWeightBias' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, LookAtUpWeightBias) == 0x000040, "Member 'FRigUnit_EndSaccade_Settings::LookAtUpWeightBias' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, SaccadeBlendSpeed) == 0x000044, "Member 'FRigUnit_EndSaccade_Settings::SaccadeBlendSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, SaccadeFrequencyRange) == 0x000048, "Member 'FRigUnit_EndSaccade_Settings::SaccadeFrequencyRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, SaccadeMoveAngleMax) == 0x000050, "Member 'FRigUnit_EndSaccade_Settings::SaccadeMoveAngleMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, SaccadeMoveAngleSoftLimitRate) == 0x000054, "Member 'FRigUnit_EndSaccade_Settings::SaccadeMoveAngleSoftLimitRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, FixationVelocityThreshold) == 0x000058, "Member 'FRigUnit_EndSaccade_Settings::FixationVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, SaccadeDiffAngleMax) == 0x00005C, "Member 'FRigUnit_EndSaccade_Settings::SaccadeDiffAngleMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, MicroSaccadeFrequencyRange) == 0x000060, "Member 'FRigUnit_EndSaccade_Settings::MicroSaccadeFrequencyRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, MicroSaccadeMoveAngle) == 0x000068, "Member 'FRigUnit_EndSaccade_Settings::MicroSaccadeMoveAngle' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, RandomAdditiveSaccadeFrequencyRange) == 0x00006C, "Member 'FRigUnit_EndSaccade_Settings::RandomAdditiveSaccadeFrequencyRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, RandomAdditiveSaccadeMoveAngle) == 0x000074, "Member 'FRigUnit_EndSaccade_Settings::RandomAdditiveSaccadeMoveAngle' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, RandomAdditiveSaccadeMoveRollRange) == 0x000078, "Member 'FRigUnit_EndSaccade_Settings::RandomAdditiveSaccadeMoveRollRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, RandomAdditiveSaccadeTimeDuration) == 0x000080, "Member 'FRigUnit_EndSaccade_Settings::RandomAdditiveSaccadeTimeDuration' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, BlinkPoseName) == 0x000084, "Member 'FRigUnit_EndSaccade_Settings::BlinkPoseName' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, BlinkThreshold) == 0x00008C, "Member 'FRigUnit_EndSaccade_Settings::BlinkThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, FullBlinkThreshold) == 0x000090, "Member 'FRigUnit_EndSaccade_Settings::FullBlinkThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, PeriodicBlinkBiasRange) == 0x000094, "Member 'FRigUnit_EndSaccade_Settings::PeriodicBlinkBiasRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, RefrectiveBlinkSaccadeMoveAngleThreshold) == 0x00009C, "Member 'FRigUnit_EndSaccade_Settings::RefrectiveBlinkSaccadeMoveAngleThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, RefrectiveBlinkIntervalMin) == 0x0000A0, "Member 'FRigUnit_EndSaccade_Settings::RefrectiveBlinkIntervalMin' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, NeutralBlinkFrequencyRange) == 0x0000A4, "Member 'FRigUnit_EndSaccade_Settings::NeutralBlinkFrequencyRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Settings, CautionBlinkFrequencyRange) == 0x0000AC, "Member 'FRigUnit_EndSaccade_Settings::CautionBlinkFrequencyRange' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorPickupExtraAction
// 0x0030 (0x0430 - 0x0400)
struct FEndBehaviorPickupExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x30];                                     // 0x0400(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorPickupExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorPickupExtraAction");
static_assert(sizeof(FEndBehaviorPickupExtraAction) == 0x000430, "Wrong size on FEndBehaviorPickupExtraAction");

// ScriptStruct EndGame.EndLeaderChangeCameraModule
// 0x0078 (0x0468 - 0x03F0)
struct FEndLeaderChangeCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x78];                                     // 0x03F0(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLeaderChangeCameraModule) == 0x000008, "Wrong alignment on FEndLeaderChangeCameraModule");
static_assert(sizeof(FEndLeaderChangeCameraModule) == 0x000468, "Wrong size on FEndLeaderChangeCameraModule");

// ScriptStruct EndGame.EndBehaviorPlayerPianoExtraAction
// 0x01B0 (0x05B0 - 0x0400)
struct FEndBehaviorPlayerPianoExtraAction final : public FEndBehaviorPianoExtraActionBase
{
public:
	uint8                                         Pad_400[0x1B0];                                    // 0x0400(0x01B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorPlayerPianoExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorPlayerPianoExtraAction");
static_assert(sizeof(FEndBehaviorPlayerPianoExtraAction) == 0x0005B0, "Wrong size on FEndBehaviorPlayerPianoExtraAction");

// ScriptStruct EndGame.EndBehaviorPushContainerExtraAction
// 0x01B0 (0x05B0 - 0x0400)
struct FEndBehaviorPushContainerExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x1B0];                                    // 0x0400(0x01B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorPushContainerExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorPushContainerExtraAction");
static_assert(sizeof(FEndBehaviorPushContainerExtraAction) == 0x0005B0, "Wrong size on FEndBehaviorPushContainerExtraAction");

// ScriptStruct EndGame.EndStealCameraParam
// 0x0080 (0x0080 - 0x0000)
struct FEndStealCameraParam final
{
public:
	struct FEndCameraOverrideParam                OverrideParam;                                     // 0x0000(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsToStayBetweenLeaderAndSelf;                     // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeaderToSelfCameraCenterRatio;                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          Character;                                         // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargetStateActive;                              // 0x004C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlphaBlend                            BlendAlpha;                                        // 0x0050(0x0030)(Transient, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndStealCameraParam) == 0x000008, "Wrong alignment on FEndStealCameraParam");
static_assert(sizeof(FEndStealCameraParam) == 0x000080, "Wrong size on FEndStealCameraParam");
static_assert(offsetof(FEndStealCameraParam, OverrideParam) == 0x000000, "Member 'FEndStealCameraParam::OverrideParam' has a wrong offset!");
static_assert(offsetof(FEndStealCameraParam, bIsToStayBetweenLeaderAndSelf) == 0x000038, "Member 'FEndStealCameraParam::bIsToStayBetweenLeaderAndSelf' has a wrong offset!");
static_assert(offsetof(FEndStealCameraParam, LeaderToSelfCameraCenterRatio) == 0x00003C, "Member 'FEndStealCameraParam::LeaderToSelfCameraCenterRatio' has a wrong offset!");
static_assert(offsetof(FEndStealCameraParam, Character) == 0x000040, "Member 'FEndStealCameraParam::Character' has a wrong offset!");
static_assert(offsetof(FEndStealCameraParam, Alpha) == 0x000048, "Member 'FEndStealCameraParam::Alpha' has a wrong offset!");
static_assert(offsetof(FEndStealCameraParam, bIsTargetStateActive) == 0x00004C, "Member 'FEndStealCameraParam::bIsTargetStateActive' has a wrong offset!");
static_assert(offsetof(FEndStealCameraParam, BlendAlpha) == 0x000050, "Member 'FEndStealCameraParam::BlendAlpha' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorResidentBlendAction
// 0x0028 (0x02E0 - 0x02B8)
struct FEndBehaviorResidentBlendAction final : public FEndBehaviorSequencePlayAction
{
public:
	uint8                                         Pad_2B8[0x28];                                     // 0x02B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorResidentBlendAction) == 0x000008, "Wrong alignment on FEndBehaviorResidentBlendAction");
static_assert(sizeof(FEndBehaviorResidentBlendAction) == 0x0002E0, "Wrong size on FEndBehaviorResidentBlendAction");

// ScriptStruct EndGame.EndBehaviorSBScooterGetOffExtraAction
// 0x0020 (0x0420 - 0x0400)
struct FEndBehaviorSBScooterGetOffExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x20];                                     // 0x0400(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSBScooterGetOffExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSBScooterGetOffExtraAction");
static_assert(sizeof(FEndBehaviorSBScooterGetOffExtraAction) == 0x000420, "Wrong size on FEndBehaviorSBScooterGetOffExtraAction");

// ScriptStruct EndGame.EndJenovaPulseWallEmissiveContext
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndJenovaPulseWallEmissiveContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndJenovaPulseWallEmissiveContext) == 0x000008, "Wrong alignment on FEndJenovaPulseWallEmissiveContext");
static_assert(sizeof(FEndJenovaPulseWallEmissiveContext) == 0x000020, "Wrong size on FEndJenovaPulseWallEmissiveContext");

// ScriptStruct EndGame.EndBehaviorSimpleInteractExtraAction
// 0x0020 (0x0420 - 0x0400)
struct FEndBehaviorSimpleInteractExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x20];                                     // 0x0400(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSimpleInteractExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSimpleInteractExtraAction");
static_assert(sizeof(FEndBehaviorSimpleInteractExtraAction) == 0x000420, "Wrong size on FEndBehaviorSimpleInteractExtraAction");

// ScriptStruct EndGame.EndBehaviorSlaveAction
// 0x0018 (0x02D0 - 0x02B8)
struct FEndBehaviorSlaveAction final : public FEndBehaviorSequencePlayAction
{
public:
	uint8                                         Pad_2B8[0x18];                                     // 0x02B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSlaveAction) == 0x000008, "Wrong alignment on FEndBehaviorSlaveAction");
static_assert(sizeof(FEndBehaviorSlaveAction) == 0x0002D0, "Wrong size on FEndBehaviorSlaveAction");

// ScriptStruct EndGame.EndMiniGameCameraOperator
// 0x0028 (0x0110 - 0x00E8)
struct FEndMiniGameCameraOperator final : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0x28];                                      // 0x00E8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMiniGameCameraOperator) == 0x000008, "Wrong alignment on FEndMiniGameCameraOperator");
static_assert(sizeof(FEndMiniGameCameraOperator) == 0x000110, "Wrong size on FEndMiniGameCameraOperator");

// ScriptStruct EndGame.EndBehaviorSlum7DartsExtraAction
// 0x0050 (0x0450 - 0x0400)
struct FEndBehaviorSlum7DartsExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x50];                                     // 0x0400(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSlum7DartsExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSlum7DartsExtraAction");
static_assert(sizeof(FEndBehaviorSlum7DartsExtraAction) == 0x000450, "Wrong size on FEndBehaviorSlum7DartsExtraAction");

// ScriptStruct EndGame.EndBehaviorSplineMoveExtraAction
// 0x00A0 (0x04A0 - 0x0400)
struct FEndBehaviorSplineMoveExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0xA0];                                     // 0x0400(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSplineMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSplineMoveExtraAction");
static_assert(sizeof(FEndBehaviorSplineMoveExtraAction) == 0x0004A0, "Wrong size on FEndBehaviorSplineMoveExtraAction");

// ScriptStruct EndGame.EndLovelessPlayTemplate
// 0x0000 (0x0020 - 0x0020)
struct FEndLovelessPlayTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FEndLovelessPlayTemplate) == 0x000008, "Wrong alignment on FEndLovelessPlayTemplate");
static_assert(sizeof(FEndLovelessPlayTemplate) == 0x000020, "Wrong size on FEndLovelessPlayTemplate");

// ScriptStruct EndGame.EndBehaviorSwimmingSnapExtraAction
// 0x0050 (0x0460 - 0x0410)
struct FEndBehaviorSwimmingSnapExtraAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x50];                                     // 0x0410(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSwimmingSnapExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSwimmingSnapExtraAction");
static_assert(sizeof(FEndBehaviorSwimmingSnapExtraAction) == 0x000460, "Wrong size on FEndBehaviorSwimmingSnapExtraAction");

// ScriptStruct EndGame.EndBehaviorSwitchWalkRunExtraAction
// 0x0020 (0x04E0 - 0x04C0)
struct FEndBehaviorSwitchWalkRunExtraAction final : public FEndBehaviorSequentialExtraAction
{
public:
	uint8                                         Pad_4C0[0x20];                                     // 0x04C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSwitchWalkRunExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSwitchWalkRunExtraAction");
static_assert(sizeof(FEndBehaviorSwitchWalkRunExtraAction) == 0x0004E0, "Wrong size on FEndBehaviorSwitchWalkRunExtraAction");

// ScriptStruct EndGame.LiftCondition
// 0x0014 (0x0014 - 0x0000)
struct FLiftCondition final
{
public:
	class FName                                   ConditionName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndConditionName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConditionValue;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiftCondition) == 0x000004, "Wrong alignment on FLiftCondition");
static_assert(sizeof(FLiftCondition) == 0x000014, "Wrong size on FLiftCondition");
static_assert(offsetof(FLiftCondition, ConditionName) == 0x000000, "Member 'FLiftCondition::ConditionName' has a wrong offset!");
static_assert(offsetof(FLiftCondition, EndConditionName) == 0x000008, "Member 'FLiftCondition::EndConditionName' has a wrong offset!");
static_assert(offsetof(FLiftCondition, ConditionValue) == 0x000010, "Member 'FLiftCondition::ConditionValue' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorTinyBroncoExpressionAction
// 0x0330 (0x0740 - 0x0410)
struct FEndBehaviorTinyBroncoExpressionAction final : public FEndBehaviorFieldActionBase
{
public:
	uint8                                         Pad_410[0x330];                                    // 0x0410(0x0330)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorTinyBroncoExpressionAction) == 0x000010, "Wrong alignment on FEndBehaviorTinyBroncoExpressionAction");
static_assert(sizeof(FEndBehaviorTinyBroncoExpressionAction) == 0x000740, "Wrong size on FEndBehaviorTinyBroncoExpressionAction");

// ScriptStruct EndGame.EndBehaviorTurnGearExtraAction
// 0x0290 (0x0710 - 0x0480)
struct FEndBehaviorTurnGearExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x290];                                    // 0x0480(0x0290)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorTurnGearExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorTurnGearExtraAction");
static_assert(sizeof(FEndBehaviorTurnGearExtraAction) == 0x000710, "Wrong size on FEndBehaviorTurnGearExtraAction");

// ScriptStruct EndGame.EndLockOnCameraModule
// 0x0828 (0x0C18 - 0x03F0)
struct FEndLockOnCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x828];                                    // 0x03F0(0x0828)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLockOnCameraModule) == 0x000008, "Wrong alignment on FEndLockOnCameraModule");
static_assert(sizeof(FEndLockOnCameraModule) == 0x000C18, "Wrong size on FEndLockOnCameraModule");

// ScriptStruct EndGame.EndBehaviorUpperBodyExtraActionInput
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x10) FEndBehaviorUpperBodyExtraActionInput final
{
public:
	class FName                                   BeginSequenceName;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopSequenceName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndSequenceName;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneFilter;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  AttachActor;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   AttachSlot;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSetAttachActorDrawPause;                      // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFullBodyBlendOnIdle;                           // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldStopOnCompleted;                            // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableSelfReactToBump;                           // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableOtherReactToBump;                          // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnMovable;                                        // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableLookAt;                                    // 0x002F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x140];                                     // 0x0030(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorUpperBodyExtraActionInput) == 0x000010, "Wrong alignment on FEndBehaviorUpperBodyExtraActionInput");
static_assert(sizeof(FEndBehaviorUpperBodyExtraActionInput) == 0x000170, "Wrong size on FEndBehaviorUpperBodyExtraActionInput");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, BeginSequenceName) == 0x000000, "Member 'FEndBehaviorUpperBodyExtraActionInput::BeginSequenceName' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, LoopSequenceName) == 0x000008, "Member 'FEndBehaviorUpperBodyExtraActionInput::LoopSequenceName' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, EndSequenceName) == 0x000010, "Member 'FEndBehaviorUpperBodyExtraActionInput::EndSequenceName' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, BoneFilter) == 0x000018, "Member 'FEndBehaviorUpperBodyExtraActionInput::BoneFilter' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, AttachActor) == 0x000020, "Member 'FEndBehaviorUpperBodyExtraActionInput::AttachActor' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, AttachSlot) == 0x000028, "Member 'FEndBehaviorUpperBodyExtraActionInput::AttachSlot' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, bAutoSetAttachActorDrawPause) == 0x000029, "Member 'FEndBehaviorUpperBodyExtraActionInput::bAutoSetAttachActorDrawPause' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, bUseFullBodyBlendOnIdle) == 0x00002A, "Member 'FEndBehaviorUpperBodyExtraActionInput::bUseFullBodyBlendOnIdle' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, bShouldStopOnCompleted) == 0x00002B, "Member 'FEndBehaviorUpperBodyExtraActionInput::bShouldStopOnCompleted' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, bDisableSelfReactToBump) == 0x00002C, "Member 'FEndBehaviorUpperBodyExtraActionInput::bDisableSelfReactToBump' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, bDisableOtherReactToBump) == 0x00002D, "Member 'FEndBehaviorUpperBodyExtraActionInput::bDisableOtherReactToBump' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, bUnMovable) == 0x00002E, "Member 'FEndBehaviorUpperBodyExtraActionInput::bUnMovable' has a wrong offset!");
static_assert(offsetof(FEndBehaviorUpperBodyExtraActionInput, bDisableLookAt) == 0x00002F, "Member 'FEndBehaviorUpperBodyExtraActionInput::bDisableLookAt' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorValveExtraAction
// 0x0300 (0x0780 - 0x0480)
struct FEndBehaviorValveExtraAction final : public FEndBehaviorNewFieldExtraAction
{
public:
	uint8                                         Pad_480[0x300];                                    // 0x0480(0x0300)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorValveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorValveExtraAction");
static_assert(sizeof(FEndBehaviorValveExtraAction) == 0x000780, "Wrong size on FEndBehaviorValveExtraAction");

// ScriptStruct EndGame.EndRopeAutoConstraint
// 0x0028 (0x0028 - 0x0000)
struct FEndRopeAutoConstraint final
{
public:
	class FName                                   ConstraintName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLocation;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndRopeAutoConstraint) == 0x000004, "Wrong alignment on FEndRopeAutoConstraint");
static_assert(sizeof(FEndRopeAutoConstraint) == 0x000028, "Wrong size on FEndRopeAutoConstraint");
static_assert(offsetof(FEndRopeAutoConstraint, ConstraintName) == 0x000000, "Member 'FEndRopeAutoConstraint::ConstraintName' has a wrong offset!");
static_assert(offsetof(FEndRopeAutoConstraint, SocketName) == 0x000008, "Member 'FEndRopeAutoConstraint::SocketName' has a wrong offset!");
static_assert(offsetof(FEndRopeAutoConstraint, OffsetLocation) == 0x000010, "Member 'FEndRopeAutoConstraint::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FEndRopeAutoConstraint, OffsetRotation) == 0x00001C, "Member 'FEndRopeAutoConstraint::OffsetRotation' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorVaultLockExtraAction
// 0x0040 (0x0440 - 0x0400)
struct FEndBehaviorVaultLockExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x40];                                     // 0x0400(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorVaultLockExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorVaultLockExtraAction");
static_assert(sizeof(FEndBehaviorVaultLockExtraAction) == 0x000440, "Wrong size on FEndBehaviorVaultLockExtraAction");

// ScriptStruct EndGame.EndBehaviorWheeledVehicleDriverExtraAction
// 0x0010 (0x0410 - 0x0400)
struct FEndBehaviorWheeledVehicleDriverExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_400[0x10];                                     // 0x0400(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorWheeledVehicleDriverExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorWheeledVehicleDriverExtraAction");
static_assert(sizeof(FEndBehaviorWheeledVehicleDriverExtraAction) == 0x000410, "Wrong size on FEndBehaviorWheeledVehicleDriverExtraAction");

// ScriptStruct EndGame.EndBikeAIEffectInfo
// 0x0018 (0x0018 - 0x0000)
struct FEndBikeAIEffectInfo final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HpAmount;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeAIEffectInfo) == 0x000004, "Wrong alignment on FEndBikeAIEffectInfo");
static_assert(sizeof(FEndBikeAIEffectInfo) == 0x000018, "Wrong size on FEndBikeAIEffectInfo");
static_assert(offsetof(FEndBikeAIEffectInfo, EffectName) == 0x000000, "Member 'FEndBikeAIEffectInfo::EffectName' has a wrong offset!");
static_assert(offsetof(FEndBikeAIEffectInfo, SocketName) == 0x000008, "Member 'FEndBikeAIEffectInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FEndBikeAIEffectInfo, HpAmount) == 0x000010, "Member 'FEndBikeAIEffectInfo::HpAmount' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterFallEffectInfo
// 0x0014 (0x0014 - 0x0000)
struct FEndBikeAIHelicopterFallEffectInfo final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalOffset;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalOffset;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterFallEffectInfo) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterFallEffectInfo");
static_assert(sizeof(FEndBikeAIHelicopterFallEffectInfo) == 0x000014, "Wrong size on FEndBikeAIHelicopterFallEffectInfo");
static_assert(offsetof(FEndBikeAIHelicopterFallEffectInfo, EffectName) == 0x000000, "Member 'FEndBikeAIHelicopterFallEffectInfo::EffectName' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterFallEffectInfo, HorizontalOffset) == 0x000008, "Member 'FEndBikeAIHelicopterFallEffectInfo::HorizontalOffset' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterFallEffectInfo, VerticalOffset) == 0x00000C, "Member 'FEndBikeAIHelicopterFallEffectInfo::VerticalOffset' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterFallEffectInfo, Rotation) == 0x000010, "Member 'FEndBikeAIHelicopterFallEffectInfo::Rotation' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterMoveParam_MoveBackward
// 0x001C (0x001C - 0x0000)
struct FEndBikeAIHelicopterMoveParam_MoveBackward final
{
public:
	float                                         StartHeight;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartHeightArrivalTime;                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardStartTime;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardTime;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardDistance;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardHeight;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardHeightArrivalTime;                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterMoveParam_MoveBackward) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterMoveParam_MoveBackward");
static_assert(sizeof(FEndBikeAIHelicopterMoveParam_MoveBackward) == 0x00001C, "Wrong size on FEndBikeAIHelicopterMoveParam_MoveBackward");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, StartHeight) == 0x000000, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::StartHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, StartHeightArrivalTime) == 0x000004, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::StartHeightArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, MoveBackwardStartTime) == 0x000008, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::MoveBackwardStartTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, MoveBackwardTime) == 0x00000C, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::MoveBackwardTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, MoveBackwardDistance) == 0x000010, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::MoveBackwardDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, MoveBackwardHeight) == 0x000014, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::MoveBackwardHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, MoveBackwardHeightArrivalTime) == 0x000018, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::MoveBackwardHeightArrivalTime' has a wrong offset!");

// ScriptStruct EndGame.EndMenuImage
// 0x00B0 (0x00B0 - 0x0000)
struct FEndMenuImage final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FWidgetTransform                       RenderTransform;                                   // 0x0088(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              RenderTransformPivot;                              // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMenuImage) == 0x000008, "Wrong alignment on FEndMenuImage");
static_assert(sizeof(FEndMenuImage) == 0x0000B0, "Wrong size on FEndMenuImage");
static_assert(offsetof(FEndMenuImage, Brush) == 0x000000, "Member 'FEndMenuImage::Brush' has a wrong offset!");
static_assert(offsetof(FEndMenuImage, RenderTransform) == 0x000088, "Member 'FEndMenuImage::RenderTransform' has a wrong offset!");
static_assert(offsetof(FEndMenuImage, RenderTransformPivot) == 0x0000A4, "Member 'FEndMenuImage::RenderTransformPivot' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterMoveParam_MoveAround
// 0x0030 (0x0030 - 0x0000)
struct FEndBikeAIHelicopterMoveParam_MoveAround final
{
public:
	float                                         TargetOppositeSlide;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideInterpSpeed;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeForwardMileage;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeBackwardMileage;                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeForwardMileageSecond;                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardArrivalTime;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchYawSlide;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOnForward;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightArrivalTime;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveBackwardRate;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveBackwardLimitCount;                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterMoveParam_MoveAround) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterMoveParam_MoveAround");
static_assert(sizeof(FEndBikeAIHelicopterMoveParam_MoveAround) == 0x000030, "Wrong size on FEndBikeAIHelicopterMoveParam_MoveAround");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, TargetOppositeSlide) == 0x000000, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::TargetOppositeSlide' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, SlideInterpSpeed) == 0x000004, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::SlideInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, RelativeForwardMileage) == 0x000008, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::RelativeForwardMileage' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, RelativeBackwardMileage) == 0x00000C, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::RelativeBackwardMileage' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, RelativeForwardMileageSecond) == 0x000010, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::RelativeForwardMileageSecond' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, ForwardArrivalTime) == 0x000014, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::ForwardArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, SwitchYawSlide) == 0x000018, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::SwitchYawSlide' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, Height) == 0x00001C, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::Height' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, HeightOnForward) == 0x000020, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::HeightOnForward' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, HeightArrivalTime) == 0x000024, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::HeightArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, MoveBackwardRate) == 0x000028, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::MoveBackwardRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, MoveBackwardLimitCount) == 0x00002C, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::MoveBackwardLimitCount' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapSilhouettePolygon
// 0x0028 (0x0028 - 0x0000)
struct FEndNaviMapSilhouettePolygon final
{
public:
	int32                                         Group;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vertices[0x3];                                     // 0x0004(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapSilhouettePolygon) == 0x000004, "Wrong alignment on FEndNaviMapSilhouettePolygon");
static_assert(sizeof(FEndNaviMapSilhouettePolygon) == 0x000028, "Wrong size on FEndNaviMapSilhouettePolygon");
static_assert(offsetof(FEndNaviMapSilhouettePolygon, Group) == 0x000000, "Member 'FEndNaviMapSilhouettePolygon::Group' has a wrong offset!");
static_assert(offsetof(FEndNaviMapSilhouettePolygon, Vertices) == 0x000004, "Member 'FEndNaviMapSilhouettePolygon::Vertices' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterSpecificRoadArea
// 0x0010 (0x0010 - 0x0000)
struct FEndBikeAIHelicopterSpecificRoadArea final
{
public:
	class FName                                   SplineID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         AppliedRange;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterSpecificRoadArea) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterSpecificRoadArea");
static_assert(sizeof(FEndBikeAIHelicopterSpecificRoadArea) == 0x000010, "Wrong size on FEndBikeAIHelicopterSpecificRoadArea");
static_assert(offsetof(FEndBikeAIHelicopterSpecificRoadArea, SplineID) == 0x000000, "Member 'FEndBikeAIHelicopterSpecificRoadArea::SplineID' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterSpecificRoadArea, AppliedRange) == 0x000008, "Member 'FEndBikeAIHelicopterSpecificRoadArea::AppliedRange' has a wrong offset!");

// ScriptStruct EndGame.BikeCutterStormAbilitySetting
// 0x0040 (0x0040 - 0x0000)
struct FBikeCutterStormAbilitySetting final
{
public:
	float                                         LoopTime;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFloatInterval>                 AttackTimings;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   BeginMotion;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndMotion;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AddMotion_Attack;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRange;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          FirstMoveDirectionSign;                            // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeed;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBikeCutterStormAbilitySetting) == 0x000008, "Wrong alignment on FBikeCutterStormAbilitySetting");
static_assert(sizeof(FBikeCutterStormAbilitySetting) == 0x000040, "Wrong size on FBikeCutterStormAbilitySetting");
static_assert(offsetof(FBikeCutterStormAbilitySetting, LoopTime) == 0x000000, "Member 'FBikeCutterStormAbilitySetting::LoopTime' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, AttackTimings) == 0x000008, "Member 'FBikeCutterStormAbilitySetting::AttackTimings' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, BeginMotion) == 0x000018, "Member 'FBikeCutterStormAbilitySetting::BeginMotion' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, EndMotion) == 0x000020, "Member 'FBikeCutterStormAbilitySetting::EndMotion' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, AddMotion_Attack) == 0x000028, "Member 'FBikeCutterStormAbilitySetting::AddMotion_Attack' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, MoveRange) == 0x000030, "Member 'FBikeCutterStormAbilitySetting::MoveRange' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, FirstMoveDirectionSign) == 0x000034, "Member 'FBikeCutterStormAbilitySetting::FirstMoveDirectionSign' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, MoveSpeed) == 0x000038, "Member 'FBikeCutterStormAbilitySetting::MoveSpeed' has a wrong offset!");

// ScriptStruct EndGame.BikeLongShotInfo
// 0x0010 (0x0010 - 0x0000)
struct FBikeLongShotInfo final
{
public:
	TArray<ELineType>                             LongShotOrder;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBikeLongShotInfo) == 0x000008, "Wrong alignment on FBikeLongShotInfo");
static_assert(sizeof(FBikeLongShotInfo) == 0x000010, "Wrong size on FBikeLongShotInfo");
static_assert(offsetof(FBikeLongShotInfo, LongShotOrder) == 0x000000, "Member 'FBikeLongShotInfo::LongShotOrder' has a wrong offset!");

// ScriptStruct EndGame.EndSkillCameraDitherFadeRelatedActorData
// 0x0010 (0x0010 - 0x0000)
struct FEndSkillCameraDitherFadeRelatedActorData final
{
public:
	class FName                                   LevelID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndSkillCameraDitherFadeRelatedActorData) == 0x000004, "Wrong alignment on FEndSkillCameraDitherFadeRelatedActorData");
static_assert(sizeof(FEndSkillCameraDitherFadeRelatedActorData) == 0x000010, "Wrong size on FEndSkillCameraDitherFadeRelatedActorData");
static_assert(offsetof(FEndSkillCameraDitherFadeRelatedActorData, LevelID) == 0x000000, "Member 'FEndSkillCameraDitherFadeRelatedActorData::LevelID' has a wrong offset!");
static_assert(offsetof(FEndSkillCameraDitherFadeRelatedActorData, ActorName) == 0x000008, "Member 'FEndSkillCameraDitherFadeRelatedActorData::ActorName' has a wrong offset!");

// ScriptStruct EndGame.BikeEffectInfo
// 0x0014 (0x0014 - 0x0000)
struct FBikeEffectInfo final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBikeEffectInfo) == 0x000004, "Wrong alignment on FBikeEffectInfo");
static_assert(sizeof(FBikeEffectInfo) == 0x000014, "Wrong size on FBikeEffectInfo");
static_assert(offsetof(FBikeEffectInfo, EffectName) == 0x000000, "Member 'FBikeEffectInfo::EffectName' has a wrong offset!");
static_assert(offsetof(FBikeEffectInfo, SocketName) == 0x000008, "Member 'FBikeEffectInfo::SocketName' has a wrong offset!");

// ScriptStruct EndGame.BikeBreakablePartInfo
// 0x0098 (0x0098 - 0x0000)
struct FBikeBreakablePartInfo final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   HPGaugeSocketName;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeakSocketName;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitPoint;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BreakMotionID;                                     // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBikeEffectInfo                        Effect_Break;                                      // 0x002C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBikeEffectInfo                        Effect_Broken;                                     // 0x0040(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BreakAbilityIDList;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x30];                                      // 0x0068(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBikeBreakablePartInfo) == 0x000008, "Wrong alignment on FBikeBreakablePartInfo");
static_assert(sizeof(FBikeBreakablePartInfo) == 0x000098, "Wrong size on FBikeBreakablePartInfo");
static_assert(offsetof(FBikeBreakablePartInfo, BoneNames) == 0x000000, "Member 'FBikeBreakablePartInfo::BoneNames' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, HPGaugeSocketName) == 0x000010, "Member 'FBikeBreakablePartInfo::HPGaugeSocketName' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, WeakSocketName) == 0x000018, "Member 'FBikeBreakablePartInfo::WeakSocketName' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, HitPoint) == 0x000020, "Member 'FBikeBreakablePartInfo::HitPoint' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, BreakMotionID) == 0x000024, "Member 'FBikeBreakablePartInfo::BreakMotionID' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, Effect_Break) == 0x00002C, "Member 'FBikeBreakablePartInfo::Effect_Break' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, Effect_Broken) == 0x000040, "Member 'FBikeBreakablePartInfo::Effect_Broken' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, BreakAbilityIDList) == 0x000058, "Member 'FBikeBreakablePartInfo::BreakAbilityIDList' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAITruckDamageLoopEffectParam
// 0x002C (0x002C - 0x0000)
struct FEndBikeAITruckDamageLoopEffectParam final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectOffset;                                      // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitPointRate;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AddMotionName;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x4];                                       // 0x0028(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeAITruckDamageLoopEffectParam) == 0x000004, "Wrong alignment on FEndBikeAITruckDamageLoopEffectParam");
static_assert(sizeof(FEndBikeAITruckDamageLoopEffectParam) == 0x00002C, "Wrong size on FEndBikeAITruckDamageLoopEffectParam");
static_assert(offsetof(FEndBikeAITruckDamageLoopEffectParam, EffectName) == 0x000000, "Member 'FEndBikeAITruckDamageLoopEffectParam::EffectName' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckDamageLoopEffectParam, AttachName) == 0x000008, "Member 'FEndBikeAITruckDamageLoopEffectParam::AttachName' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckDamageLoopEffectParam, EffectOffset) == 0x000010, "Member 'FEndBikeAITruckDamageLoopEffectParam::EffectOffset' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckDamageLoopEffectParam, HitPointRate) == 0x00001C, "Member 'FEndBikeAITruckDamageLoopEffectParam::HitPointRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckDamageLoopEffectParam, AddMotionName) == 0x000020, "Member 'FEndBikeAITruckDamageLoopEffectParam::AddMotionName' has a wrong offset!");

// ScriptStruct EndGame.EndBikeModelInfo
// 0x000C (0x000C - 0x0000)
struct FEndBikeModelInfo final
{
public:
	float                                         FrontLength;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearLength;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WidthLength;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeModelInfo) == 0x000004, "Wrong alignment on FEndBikeModelInfo");
static_assert(sizeof(FEndBikeModelInfo) == 0x00000C, "Wrong size on FEndBikeModelInfo");
static_assert(offsetof(FEndBikeModelInfo, FrontLength) == 0x000000, "Member 'FEndBikeModelInfo::FrontLength' has a wrong offset!");
static_assert(offsetof(FEndBikeModelInfo, RearLength) == 0x000004, "Member 'FEndBikeModelInfo::RearLength' has a wrong offset!");
static_assert(offsetof(FEndBikeModelInfo, WidthLength) == 0x000008, "Member 'FEndBikeModelInfo::WidthLength' has a wrong offset!");

// ScriptStruct EndGame.EndBikeExpressionSuspensionParameters
// 0x0024 (0x0024 - 0x0000)
struct FEndBikeExpressionSuspensionParameters final
{
public:
	bool                                          bEnableSuspensionExpression;                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBikeBones                                 SuspensionBoneName;                                // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SuspensionRate;                                    // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionTime;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x10];                                      // 0x0014(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeExpressionSuspensionParameters) == 0x000004, "Wrong alignment on FEndBikeExpressionSuspensionParameters");
static_assert(sizeof(FEndBikeExpressionSuspensionParameters) == 0x000024, "Wrong size on FEndBikeExpressionSuspensionParameters");
static_assert(offsetof(FEndBikeExpressionSuspensionParameters, bEnableSuspensionExpression) == 0x000000, "Member 'FEndBikeExpressionSuspensionParameters::bEnableSuspensionExpression' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionSuspensionParameters, SuspensionBoneName) == 0x000001, "Member 'FEndBikeExpressionSuspensionParameters::SuspensionBoneName' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionSuspensionParameters, SuspensionRate) == 0x000004, "Member 'FEndBikeExpressionSuspensionParameters::SuspensionRate' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionSuspensionParameters, SuspensionTime) == 0x000010, "Member 'FEndBikeExpressionSuspensionParameters::SuspensionTime' has a wrong offset!");

// ScriptStruct EndGame.EndMobCrowdAttachment
// 0x0010 (0x0010 - 0x0000)
struct FEndMobCrowdAttachment final
{
public:
	class UStaticMesh*                            AttachMesh;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMobCrowdAttachment) == 0x000008, "Wrong alignment on FEndMobCrowdAttachment");
static_assert(sizeof(FEndMobCrowdAttachment) == 0x000010, "Wrong size on FEndMobCrowdAttachment");
static_assert(offsetof(FEndMobCrowdAttachment, AttachMesh) == 0x000000, "Member 'FEndMobCrowdAttachment::AttachMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdAttachment, AttachSocketName) == 0x000008, "Member 'FEndMobCrowdAttachment::AttachSocketName' has a wrong offset!");

// ScriptStruct EndGame.EndBikeExpressionSteeringParameters
// 0x0020 (0x0020 - 0x0000)
struct FEndBikeExpressionSteeringParameters final
{
public:
	bool                                          bEnableSteeringExpression;                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBikeBones                                 SteeringBoneName;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteeringRate;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeExpressionSteeringParameters) == 0x000004, "Wrong alignment on FEndBikeExpressionSteeringParameters");
static_assert(sizeof(FEndBikeExpressionSteeringParameters) == 0x000020, "Wrong size on FEndBikeExpressionSteeringParameters");
static_assert(offsetof(FEndBikeExpressionSteeringParameters, bEnableSteeringExpression) == 0x000000, "Member 'FEndBikeExpressionSteeringParameters::bEnableSteeringExpression' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionSteeringParameters, SteeringBoneName) == 0x000001, "Member 'FEndBikeExpressionSteeringParameters::SteeringBoneName' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionSteeringParameters, SteeringRate) == 0x000004, "Member 'FEndBikeExpressionSteeringParameters::SteeringRate' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionSteeringParameters, MaxAngle) == 0x000008, "Member 'FEndBikeExpressionSteeringParameters::MaxAngle' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionSteeringParameters, InterpSpeed) == 0x00000C, "Member 'FEndBikeExpressionSteeringParameters::InterpSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndBikeExpressionWheelSpinParameters
// 0x0020 (0x0020 - 0x0000)
struct FEndBikeExpressionWheelSpinParameters final
{
public:
	bool                                          bEnableWheelSpin;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBikeBones                                 WheelBoneName;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotationRate;                                      // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeExpressionWheelSpinParameters) == 0x000004, "Wrong alignment on FEndBikeExpressionWheelSpinParameters");
static_assert(sizeof(FEndBikeExpressionWheelSpinParameters) == 0x000020, "Wrong size on FEndBikeExpressionWheelSpinParameters");
static_assert(offsetof(FEndBikeExpressionWheelSpinParameters, bEnableWheelSpin) == 0x000000, "Member 'FEndBikeExpressionWheelSpinParameters::bEnableWheelSpin' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionWheelSpinParameters, WheelBoneName) == 0x000001, "Member 'FEndBikeExpressionWheelSpinParameters::WheelBoneName' has a wrong offset!");
static_assert(offsetof(FEndBikeExpressionWheelSpinParameters, RotationRate) == 0x000004, "Member 'FEndBikeExpressionWheelSpinParameters::RotationRate' has a wrong offset!");

// ScriptStruct EndGame.OptionSelectInfo
// 0x0030 (0x0030 - 0x0000)
struct FOptionSelectInfo final
{
public:
	TArray<class FString>                         ValueTexts;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ValueHelps;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OpenFlags;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionSelectInfo) == 0x000008, "Wrong alignment on FOptionSelectInfo");
static_assert(sizeof(FOptionSelectInfo) == 0x000030, "Wrong size on FOptionSelectInfo");
static_assert(offsetof(FOptionSelectInfo, ValueTexts) == 0x000000, "Member 'FOptionSelectInfo::ValueTexts' has a wrong offset!");
static_assert(offsetof(FOptionSelectInfo, ValueHelps) == 0x000010, "Member 'FOptionSelectInfo::ValueHelps' has a wrong offset!");
static_assert(offsetof(FOptionSelectInfo, OpenFlags) == 0x000020, "Member 'FOptionSelectInfo::OpenFlags' has a wrong offset!");

// ScriptStruct EndGame.EndBikeSettingSmootingParam
// 0x0000 (0x000C - 0x000C)
struct FEndBikeSettingSmootingParam final : public FEndVehicleSmoothingParam
{
};
static_assert(alignof(FEndBikeSettingSmootingParam) == 0x000004, "Wrong alignment on FEndBikeSettingSmootingParam");
static_assert(sizeof(FEndBikeSettingSmootingParam) == 0x00000C, "Wrong size on FEndBikeSettingSmootingParam");

// ScriptStruct EndGame.EndBikeSettingSmoothingPairParam
// 0x00A0 (0x00A0 - 0x0000)
struct FEndBikeSettingSmoothingPairParam final
{
public:
	struct FRuntimeFloatCurve                     InputCurve;                                        // 0x0000(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FEndBikeSettingSmootingParam           SmoothingParamMin;                                 // 0x0088(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBikeSettingSmootingParam           SmoothingParamMax;                                 // 0x0094(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeSettingSmoothingPairParam) == 0x000008, "Wrong alignment on FEndBikeSettingSmoothingPairParam");
static_assert(sizeof(FEndBikeSettingSmoothingPairParam) == 0x0000A0, "Wrong size on FEndBikeSettingSmoothingPairParam");
static_assert(offsetof(FEndBikeSettingSmoothingPairParam, InputCurve) == 0x000000, "Member 'FEndBikeSettingSmoothingPairParam::InputCurve' has a wrong offset!");
static_assert(offsetof(FEndBikeSettingSmoothingPairParam, SmoothingParamMin) == 0x000088, "Member 'FEndBikeSettingSmoothingPairParam::SmoothingParamMin' has a wrong offset!");
static_assert(offsetof(FEndBikeSettingSmoothingPairParam, SmoothingParamMax) == 0x000094, "Member 'FEndBikeSettingSmoothingPairParam::SmoothingParamMax' has a wrong offset!");

// ScriptStruct EndGame.EndBikeSettingCurveRateParam
// 0x0090 (0x0090 - 0x0000)
struct FEndBikeSettingCurveRateParam final
{
public:
	float                                         MaxValue;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     ValueRateCurve;                                    // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeSettingCurveRateParam) == 0x000008, "Wrong alignment on FEndBikeSettingCurveRateParam");
static_assert(sizeof(FEndBikeSettingCurveRateParam) == 0x000090, "Wrong size on FEndBikeSettingCurveRateParam");
static_assert(offsetof(FEndBikeSettingCurveRateParam, MaxValue) == 0x000000, "Member 'FEndBikeSettingCurveRateParam::MaxValue' has a wrong offset!");
static_assert(offsetof(FEndBikeSettingCurveRateParam, ValueRateCurve) == 0x000008, "Member 'FEndBikeSettingCurveRateParam::ValueRateCurve' has a wrong offset!");

// ScriptStruct EndGame.EndBikeSplineJumpAreaData
// 0x0014 (0x0014 - 0x0000)
struct FEndBikeSplineJumpAreaData final
{
public:
	float                                         JumpPointInputKey;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpBoardLength;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpBoardHeight;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         JumpBoardWidth;                                    // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeSplineJumpAreaData) == 0x000004, "Wrong alignment on FEndBikeSplineJumpAreaData");
static_assert(sizeof(FEndBikeSplineJumpAreaData) == 0x000014, "Wrong size on FEndBikeSplineJumpAreaData");
static_assert(offsetof(FEndBikeSplineJumpAreaData, JumpPointInputKey) == 0x000000, "Member 'FEndBikeSplineJumpAreaData::JumpPointInputKey' has a wrong offset!");
static_assert(offsetof(FEndBikeSplineJumpAreaData, JumpBoardLength) == 0x000004, "Member 'FEndBikeSplineJumpAreaData::JumpBoardLength' has a wrong offset!");
static_assert(offsetof(FEndBikeSplineJumpAreaData, JumpBoardHeight) == 0x000008, "Member 'FEndBikeSplineJumpAreaData::JumpBoardHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeSplineJumpAreaData, JumpBoardWidth) == 0x00000C, "Member 'FEndBikeSplineJumpAreaData::JumpBoardWidth' has a wrong offset!");

// ScriptStruct EndGame.AccelModifier
// 0x0060 (0x0060 - 0x0000)
struct FAccelModifier final
{
public:
	float                                         MinVelocity;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVelocity;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   AccelEasingFunc;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   DecelEasingFunc;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModifyDuration;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   JumpEasingFunc;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModifyJumpDuration;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CutSceneMinVelocity;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CutSceneMaxVelocity;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NpcMinVelocity;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NpcMaxVelocity;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelBlendExp;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AccelSteps;                                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DecelBlendExp;                                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DecelSteps;                                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ElapsedModifyTime;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentModifyAccelVelocity;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RemainDuration;                                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CachedVelocity;                                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CachedElapsedModifyTime;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         JumpBlendExp;                                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         JumpSteps;                                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ElapsedModifyJumpTime;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CachedBeforeJumpVelocity;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CachedBeforeCutSceneVelocity;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAccelModifier) == 0x000004, "Wrong alignment on FAccelModifier");
static_assert(sizeof(FAccelModifier) == 0x000060, "Wrong size on FAccelModifier");
static_assert(offsetof(FAccelModifier, MinVelocity) == 0x000000, "Member 'FAccelModifier::MinVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, MaxVelocity) == 0x000004, "Member 'FAccelModifier::MaxVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, AccelEasingFunc) == 0x000008, "Member 'FAccelModifier::AccelEasingFunc' has a wrong offset!");
static_assert(offsetof(FAccelModifier, DecelEasingFunc) == 0x000009, "Member 'FAccelModifier::DecelEasingFunc' has a wrong offset!");
static_assert(offsetof(FAccelModifier, ModifyDuration) == 0x00000C, "Member 'FAccelModifier::ModifyDuration' has a wrong offset!");
static_assert(offsetof(FAccelModifier, JumpEasingFunc) == 0x000010, "Member 'FAccelModifier::JumpEasingFunc' has a wrong offset!");
static_assert(offsetof(FAccelModifier, ModifyJumpDuration) == 0x000014, "Member 'FAccelModifier::ModifyJumpDuration' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CutSceneMinVelocity) == 0x000018, "Member 'FAccelModifier::CutSceneMinVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CutSceneMaxVelocity) == 0x00001C, "Member 'FAccelModifier::CutSceneMaxVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, NpcMinVelocity) == 0x000020, "Member 'FAccelModifier::NpcMinVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, NpcMaxVelocity) == 0x000024, "Member 'FAccelModifier::NpcMaxVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, AccelBlendExp) == 0x000028, "Member 'FAccelModifier::AccelBlendExp' has a wrong offset!");
static_assert(offsetof(FAccelModifier, AccelSteps) == 0x00002C, "Member 'FAccelModifier::AccelSteps' has a wrong offset!");
static_assert(offsetof(FAccelModifier, DecelBlendExp) == 0x000030, "Member 'FAccelModifier::DecelBlendExp' has a wrong offset!");
static_assert(offsetof(FAccelModifier, DecelSteps) == 0x000034, "Member 'FAccelModifier::DecelSteps' has a wrong offset!");
static_assert(offsetof(FAccelModifier, ElapsedModifyTime) == 0x000038, "Member 'FAccelModifier::ElapsedModifyTime' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CurrentModifyAccelVelocity) == 0x00003C, "Member 'FAccelModifier::CurrentModifyAccelVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, RemainDuration) == 0x000040, "Member 'FAccelModifier::RemainDuration' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CachedVelocity) == 0x000044, "Member 'FAccelModifier::CachedVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CachedElapsedModifyTime) == 0x000048, "Member 'FAccelModifier::CachedElapsedModifyTime' has a wrong offset!");
static_assert(offsetof(FAccelModifier, JumpBlendExp) == 0x00004C, "Member 'FAccelModifier::JumpBlendExp' has a wrong offset!");
static_assert(offsetof(FAccelModifier, JumpSteps) == 0x000050, "Member 'FAccelModifier::JumpSteps' has a wrong offset!");
static_assert(offsetof(FAccelModifier, ElapsedModifyJumpTime) == 0x000054, "Member 'FAccelModifier::ElapsedModifyJumpTime' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CachedBeforeJumpVelocity) == 0x000058, "Member 'FAccelModifier::CachedBeforeJumpVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CachedBeforeCutSceneVelocity) == 0x00005C, "Member 'FAccelModifier::CachedBeforeCutSceneVelocity' has a wrong offset!");

// ScriptStruct EndGame.BlackCloakFootprintBPInfo
// 0x0008 (0x0008 - 0x0000)
struct FBlackCloakFootprintBPInfo final
{
public:
	class UBlueprint*                             BPInfo;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlackCloakFootprintBPInfo) == 0x000008, "Wrong alignment on FBlackCloakFootprintBPInfo");
static_assert(sizeof(FBlackCloakFootprintBPInfo) == 0x000008, "Wrong size on FBlackCloakFootprintBPInfo");
static_assert(offsetof(FBlackCloakFootprintBPInfo, BPInfo) == 0x000000, "Member 'FBlackCloakFootprintBPInfo::BPInfo' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapMetaDataVertex
// 0x000C (0x000C - 0x0000)
struct FEndNaviMapMetaDataVertex final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapMetaDataVertex) == 0x000004, "Wrong alignment on FEndNaviMapMetaDataVertex");
static_assert(sizeof(FEndNaviMapMetaDataVertex) == 0x00000C, "Wrong size on FEndNaviMapMetaDataVertex");
static_assert(offsetof(FEndNaviMapMetaDataVertex, X) == 0x000000, "Member 'FEndNaviMapMetaDataVertex::X' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataVertex, Y) == 0x000004, "Member 'FEndNaviMapMetaDataVertex::Y' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataVertex, Z) == 0x000008, "Member 'FEndNaviMapMetaDataVertex::Z' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapMetaDataPolygon
// 0x0010 (0x0010 - 0x0000)
struct FEndNaviMapMetaDataPolygon final
{
public:
	TArray<struct FEndNaviMapMetaDataVertex>      verts;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapMetaDataPolygon) == 0x000008, "Wrong alignment on FEndNaviMapMetaDataPolygon");
static_assert(sizeof(FEndNaviMapMetaDataPolygon) == 0x000010, "Wrong size on FEndNaviMapMetaDataPolygon");
static_assert(offsetof(FEndNaviMapMetaDataPolygon, verts) == 0x000000, "Member 'FEndNaviMapMetaDataPolygon::verts' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapMetaDataActor
// 0x00A0 (0x00A0 - 0x0000)
struct FEndNaviMapMetaDataActor final
{
public:
	class FString                                 actor_name;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 class_name;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 level_name;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 location_id;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         location_x;                                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         location_y;                                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         location_z;                                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 env_memo;                                          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 level_memo;                                        // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 layers;                                            // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEndNaviMapMetaDataPolygon>     Polys;                                             // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapMetaDataActor) == 0x000008, "Wrong alignment on FEndNaviMapMetaDataActor");
static_assert(sizeof(FEndNaviMapMetaDataActor) == 0x0000A0, "Wrong size on FEndNaviMapMetaDataActor");
static_assert(offsetof(FEndNaviMapMetaDataActor, actor_name) == 0x000000, "Member 'FEndNaviMapMetaDataActor::actor_name' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, class_name) == 0x000010, "Member 'FEndNaviMapMetaDataActor::class_name' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, level_name) == 0x000020, "Member 'FEndNaviMapMetaDataActor::level_name' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, location_id) == 0x000030, "Member 'FEndNaviMapMetaDataActor::location_id' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, location_x) == 0x000040, "Member 'FEndNaviMapMetaDataActor::location_x' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, location_y) == 0x000044, "Member 'FEndNaviMapMetaDataActor::location_y' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, location_z) == 0x000048, "Member 'FEndNaviMapMetaDataActor::location_z' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, env_memo) == 0x000050, "Member 'FEndNaviMapMetaDataActor::env_memo' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, level_memo) == 0x000060, "Member 'FEndNaviMapMetaDataActor::level_memo' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, Text) == 0x000070, "Member 'FEndNaviMapMetaDataActor::Text' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, layers) == 0x000080, "Member 'FEndNaviMapMetaDataActor::layers' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataActor, Polys) == 0x000090, "Member 'FEndNaviMapMetaDataActor::Polys' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapMetaDataLayerBounds
// 0x0018 (0x0018 - 0x0000)
struct FEndNaviMapMetaDataLayerBounds final
{
public:
	float                                         MinX;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinY;                                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinZ;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxX;                                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxY;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZ;                                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapMetaDataLayerBounds) == 0x000004, "Wrong alignment on FEndNaviMapMetaDataLayerBounds");
static_assert(sizeof(FEndNaviMapMetaDataLayerBounds) == 0x000018, "Wrong size on FEndNaviMapMetaDataLayerBounds");
static_assert(offsetof(FEndNaviMapMetaDataLayerBounds, MinX) == 0x000000, "Member 'FEndNaviMapMetaDataLayerBounds::MinX' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataLayerBounds, MinY) == 0x000004, "Member 'FEndNaviMapMetaDataLayerBounds::MinY' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataLayerBounds, MinZ) == 0x000008, "Member 'FEndNaviMapMetaDataLayerBounds::MinZ' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataLayerBounds, MaxX) == 0x00000C, "Member 'FEndNaviMapMetaDataLayerBounds::MaxX' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataLayerBounds, MaxY) == 0x000010, "Member 'FEndNaviMapMetaDataLayerBounds::MaxY' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataLayerBounds, MaxZ) == 0x000014, "Member 'FEndNaviMapMetaDataLayerBounds::MaxZ' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapMetaDataLayer
// 0x0048 (0x0048 - 0x0000)
struct FEndNaviMapMetaDataLayer final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sort_order;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndNaviMapMetaDataLayerBounds         bounds;                                            // 0x0014(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	struct FEndNaviMapMetaDataLayerBounds         volume_bounds;                                     // 0x002C(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndNaviMapMetaDataLayer) == 0x000008, "Wrong alignment on FEndNaviMapMetaDataLayer");
static_assert(sizeof(FEndNaviMapMetaDataLayer) == 0x000048, "Wrong size on FEndNaviMapMetaDataLayer");
static_assert(offsetof(FEndNaviMapMetaDataLayer, Name) == 0x000000, "Member 'FEndNaviMapMetaDataLayer::Name' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataLayer, sort_order) == 0x000010, "Member 'FEndNaviMapMetaDataLayer::sort_order' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataLayer, bounds) == 0x000014, "Member 'FEndNaviMapMetaDataLayer::bounds' has a wrong offset!");
static_assert(offsetof(FEndNaviMapMetaDataLayer, volume_bounds) == 0x00002C, "Member 'FEndNaviMapMetaDataLayer::volume_bounds' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapLocationMetaData
// 0x0038 (0x0038 - 0x0000)
struct FEndNaviMapLocationMetaData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         scene_layer;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndNaviMapMetaDataActor>       Actors;                                            // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEndNaviMapMetaDataLayer>       layers;                                            // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapLocationMetaData) == 0x000008, "Wrong alignment on FEndNaviMapLocationMetaData");
static_assert(sizeof(FEndNaviMapLocationMetaData) == 0x000038, "Wrong size on FEndNaviMapLocationMetaData");
static_assert(offsetof(FEndNaviMapLocationMetaData, Name) == 0x000000, "Member 'FEndNaviMapLocationMetaData::Name' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationMetaData, scene_layer) == 0x000010, "Member 'FEndNaviMapLocationMetaData::scene_layer' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationMetaData, Actors) == 0x000018, "Member 'FEndNaviMapLocationMetaData::Actors' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationMetaData, layers) == 0x000028, "Member 'FEndNaviMapLocationMetaData::layers' has a wrong offset!");

// ScriptStruct EndGame.EndBodyControlRigFootEffectorSetting
// 0x0010 (0x0010 - 0x0000)
struct FEndBodyControlRigFootEffectorSetting final
{
public:
	TArray<struct FEndBodyControlRigFootEffectorFoot> Foots;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBodyControlRigFootEffectorSetting) == 0x000008, "Wrong alignment on FEndBodyControlRigFootEffectorSetting");
static_assert(sizeof(FEndBodyControlRigFootEffectorSetting) == 0x000010, "Wrong size on FEndBodyControlRigFootEffectorSetting");
static_assert(offsetof(FEndBodyControlRigFootEffectorSetting, Foots) == 0x000000, "Member 'FEndBodyControlRigFootEffectorSetting::Foots' has a wrong offset!");

// ScriptStruct EndGame.EndBodyControlRigHandEffectorSetting
// 0x0010 (0x0010 - 0x0000)
struct FEndBodyControlRigHandEffectorSetting final
{
public:
	TArray<struct FEndBodyControlRigHandEffectorHand> Hands;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBodyControlRigHandEffectorSetting) == 0x000008, "Wrong alignment on FEndBodyControlRigHandEffectorSetting");
static_assert(sizeof(FEndBodyControlRigHandEffectorSetting) == 0x000010, "Wrong size on FEndBodyControlRigHandEffectorSetting");
static_assert(offsetof(FEndBodyControlRigHandEffectorSetting, Hands) == 0x000000, "Member 'FEndBodyControlRigHandEffectorSetting::Hands' has a wrong offset!");

// ScriptStruct EndGame.EndPipeSlideCameraModule
// 0x00A0 (0x0490 - 0x03F0)
struct FEndPipeSlideCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0xA0];                                     // 0x03F0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPipeSlideCameraModule) == 0x000008, "Wrong alignment on FEndPipeSlideCameraModule");
static_assert(sizeof(FEndPipeSlideCameraModule) == 0x000490, "Wrong size on FEndPipeSlideCameraModule");

// ScriptStruct EndGame.EndBodySubCollisionSetting
// 0x0020 (0x0020 - 0x0000)
struct FEndBodySubCollisionSetting final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LabelName;                                         // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndBodySubCollisionData>       Shapes;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBodySubCollisionSetting) == 0x000008, "Wrong alignment on FEndBodySubCollisionSetting");
static_assert(sizeof(FEndBodySubCollisionSetting) == 0x000020, "Wrong size on FEndBodySubCollisionSetting");
static_assert(offsetof(FEndBodySubCollisionSetting, bEnable) == 0x000000, "Member 'FEndBodySubCollisionSetting::bEnable' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionSetting, LabelName) == 0x000004, "Member 'FEndBodySubCollisionSetting::LabelName' has a wrong offset!");
static_assert(offsetof(FEndBodySubCollisionSetting, Shapes) == 0x000010, "Member 'FEndBodySubCollisionSetting::Shapes' has a wrong offset!");

// ScriptStruct EndGame.EndBoneBlendRateGroup
// 0x0010 (0x0010 - 0x0000)
struct FEndBoneBlendRateGroup final
{
public:
	TArray<struct FEndBoneBlendRate>              BoneBlendRates;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBoneBlendRateGroup) == 0x000008, "Wrong alignment on FEndBoneBlendRateGroup");
static_assert(sizeof(FEndBoneBlendRateGroup) == 0x000010, "Wrong size on FEndBoneBlendRateGroup");
static_assert(offsetof(FEndBoneBlendRateGroup, BoneBlendRates) == 0x000000, "Member 'FEndBoneBlendRateGroup::BoneBlendRates' has a wrong offset!");

// ScriptStruct EndGame.CoverUiInfo
// 0x0024 (0x0024 - 0x0000)
struct alignas(0x04) FCoverUiInfo final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCoverUiInfo) == 0x000004, "Wrong alignment on FCoverUiInfo");
static_assert(sizeof(FCoverUiInfo) == 0x000024, "Wrong size on FCoverUiInfo");

// ScriptStruct EndGame.EndBoneControlRuntimeSetting
// 0x0238 (0x0238 - 0x0000)
struct alignas(0x08) FEndBoneControlRuntimeSetting final
{
public:
	uint8                                         Pad_0[0x238];                                      // 0x0000(0x0238)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBoneControlRuntimeSetting) == 0x000008, "Wrong alignment on FEndBoneControlRuntimeSetting");
static_assert(sizeof(FEndBoneControlRuntimeSetting) == 0x000238, "Wrong size on FEndBoneControlRuntimeSetting");

// ScriptStruct EndGame.EndBoneMovementSeSetting
// 0x0010 (0x0010 - 0x0000)
struct FEndBoneMovementSeSetting final
{
public:
	TArray<struct FEndGroupBoneSetting>           GroupBoneSettings;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBoneMovementSeSetting) == 0x000008, "Wrong alignment on FEndBoneMovementSeSetting");
static_assert(sizeof(FEndBoneMovementSeSetting) == 0x000010, "Wrong size on FEndBoneMovementSeSetting");
static_assert(offsetof(FEndBoneMovementSeSetting, GroupBoneSettings) == 0x000000, "Member 'FEndBoneMovementSeSetting::GroupBoneSettings' has a wrong offset!");

// ScriptStruct EndGame.EndBuggyAppearCameraModule
// 0x0018 (0x0408 - 0x03F0)
struct FEndBuggyAppearCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x18];                                     // 0x03F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBuggyAppearCameraModule) == 0x000008, "Wrong alignment on FEndBuggyAppearCameraModule");
static_assert(sizeof(FEndBuggyAppearCameraModule) == 0x000408, "Wrong size on FEndBuggyAppearCameraModule");

// ScriptStruct EndGame.EndBuggySpawnPointData
// 0x0010 (0x0010 - 0x0000)
struct FEndBuggySpawnPointData final
{
public:
	class FName                                   PlayerSpawnPointName;                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuggySpawnPointName;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBuggySpawnPointData) == 0x000004, "Wrong alignment on FEndBuggySpawnPointData");
static_assert(sizeof(FEndBuggySpawnPointData) == 0x000010, "Wrong size on FEndBuggySpawnPointData");
static_assert(offsetof(FEndBuggySpawnPointData, PlayerSpawnPointName) == 0x000000, "Member 'FEndBuggySpawnPointData::PlayerSpawnPointName' has a wrong offset!");
static_assert(offsetof(FEndBuggySpawnPointData, BuggySpawnPointName) == 0x000008, "Member 'FEndBuggySpawnPointData::BuggySpawnPointName' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerAttendantEmissiveContext
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndFeelerAttendantEmissiveContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerAttendantEmissiveContext) == 0x000008, "Wrong alignment on FEndFeelerAttendantEmissiveContext");
static_assert(sizeof(FEndFeelerAttendantEmissiveContext) == 0x000020, "Wrong size on FEndFeelerAttendantEmissiveContext");

// ScriptStruct EndGame.EndCameraDebug
// 0x0001 (0x0001 - 0x0000)
struct FEndCameraDebug final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCameraDebug) == 0x000001, "Wrong alignment on FEndCameraDebug");
static_assert(sizeof(FEndCameraDebug) == 0x000001, "Wrong size on FEndCameraDebug");

// ScriptStruct EndGame.EndCameraFollowHeightDeadzoneCameraModule
// 0x0090 (0x0480 - 0x03F0)
struct FEndCameraFollowHeightDeadzoneCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x90];                                     // 0x03F0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCameraFollowHeightDeadzoneCameraModule) == 0x000008, "Wrong alignment on FEndCameraFollowHeightDeadzoneCameraModule");
static_assert(sizeof(FEndCameraFollowHeightDeadzoneCameraModule) == 0x000480, "Wrong size on FEndCameraFollowHeightDeadzoneCameraModule");

// ScriptStruct EndGame.EndMenuCameraModeFrameSelection
// 0x0038 (0x0038 - 0x0000)
struct FEndMenuCameraModeFrameSelection final
{
public:
	struct FSoftObjectPath                        ImagePath;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameTextID;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResidentWorkName;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageIndex;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMenuCameraModeFrameSelection) == 0x000008, "Wrong alignment on FEndMenuCameraModeFrameSelection");
static_assert(sizeof(FEndMenuCameraModeFrameSelection) == 0x000038, "Wrong size on FEndMenuCameraModeFrameSelection");
static_assert(offsetof(FEndMenuCameraModeFrameSelection, ImagePath) == 0x000000, "Member 'FEndMenuCameraModeFrameSelection::ImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuCameraModeFrameSelection, NameTextID) == 0x000018, "Member 'FEndMenuCameraModeFrameSelection::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndMenuCameraModeFrameSelection, ResidentWorkName) == 0x000028, "Member 'FEndMenuCameraModeFrameSelection::ResidentWorkName' has a wrong offset!");
static_assert(offsetof(FEndMenuCameraModeFrameSelection, ImageIndex) == 0x000030, "Member 'FEndMenuCameraModeFrameSelection::ImageIndex' has a wrong offset!");

// ScriptStruct EndGame.EndFieldHookRopeSwingToMoveTarget
// 0x0028 (0x0028 - 0x0000)
struct FEndFieldHookRopeSwingToMoveTarget final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotSpeedRate;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotFriction;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldHookRopeSwingToMoveTarget) == 0x000008, "Wrong alignment on FEndFieldHookRopeSwingToMoveTarget");
static_assert(sizeof(FEndFieldHookRopeSwingToMoveTarget) == 0x000028, "Wrong size on FEndFieldHookRopeSwingToMoveTarget");
static_assert(offsetof(FEndFieldHookRopeSwingToMoveTarget, TargetActor) == 0x000000, "Member 'FEndFieldHookRopeSwingToMoveTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeSwingToMoveTarget, StartAngle) == 0x000008, "Member 'FEndFieldHookRopeSwingToMoveTarget::StartAngle' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeSwingToMoveTarget, EndAngle) == 0x00000C, "Member 'FEndFieldHookRopeSwingToMoveTarget::EndAngle' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeSwingToMoveTarget, RotSpeedRate) == 0x000010, "Member 'FEndFieldHookRopeSwingToMoveTarget::RotSpeedRate' has a wrong offset!");
static_assert(offsetof(FEndFieldHookRopeSwingToMoveTarget, RotFriction) == 0x000014, "Member 'FEndFieldHookRopeSwingToMoveTarget::RotFriction' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColorCorrectionSelection
// 0x0020 (0x0020 - 0x0000)
struct FEndMenuColorCorrectionSelection final
{
public:
	class UVolumeTexture*                         LookUpTable;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameTextID;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResidentWorkName;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColorCorrectionSelection) == 0x000008, "Wrong alignment on FEndMenuColorCorrectionSelection");
static_assert(sizeof(FEndMenuColorCorrectionSelection) == 0x000020, "Wrong size on FEndMenuColorCorrectionSelection");
static_assert(offsetof(FEndMenuColorCorrectionSelection, LookUpTable) == 0x000000, "Member 'FEndMenuColorCorrectionSelection::LookUpTable' has a wrong offset!");
static_assert(offsetof(FEndMenuColorCorrectionSelection, NameTextID) == 0x000008, "Member 'FEndMenuColorCorrectionSelection::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndMenuColorCorrectionSelection, ResidentWorkName) == 0x000018, "Member 'FEndMenuColorCorrectionSelection::ResidentWorkName' has a wrong offset!");

// ScriptStruct EndGame.EndCameraSequenceObjectPath
// 0x0018 (0x0018 - 0x0000)
struct FEndCameraSequenceObjectPath final
{
public:
	class FName                                   AssetPathName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubStringPath;                                     // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCameraSequenceObjectPath) == 0x000008, "Wrong alignment on FEndCameraSequenceObjectPath");
static_assert(sizeof(FEndCameraSequenceObjectPath) == 0x000018, "Wrong size on FEndCameraSequenceObjectPath");
static_assert(offsetof(FEndCameraSequenceObjectPath, AssetPathName) == 0x000000, "Member 'FEndCameraSequenceObjectPath::AssetPathName' has a wrong offset!");
static_assert(offsetof(FEndCameraSequenceObjectPath, SubStringPath) == 0x000008, "Member 'FEndCameraSequenceObjectPath::SubStringPath' has a wrong offset!");

// ScriptStruct EndGame.EndCameraShakeParam
// 0x0064 (0x0064 - 0x0000)
struct FEndCameraShakeParam final
{
public:
	float                                         ShakeScale;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationRange;                                     // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationRange;                                     // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0xC];                                       // 0x0028(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationAmplitude;                                 // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationAmplitude;                                 // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0xC];                                       // 0x0058(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCameraShakeParam) == 0x000004, "Wrong alignment on FEndCameraShakeParam");
static_assert(sizeof(FEndCameraShakeParam) == 0x000064, "Wrong size on FEndCameraShakeParam");
static_assert(offsetof(FEndCameraShakeParam, ShakeScale) == 0x000000, "Member 'FEndCameraShakeParam::ShakeScale' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, Duration) == 0x000004, "Member 'FEndCameraShakeParam::Duration' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, BlendInTime) == 0x000008, "Member 'FEndCameraShakeParam::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, BlendOutTime) == 0x00000C, "Member 'FEndCameraShakeParam::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, LocationRange) == 0x000010, "Member 'FEndCameraShakeParam::LocationRange' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, RotationRange) == 0x00001C, "Member 'FEndCameraShakeParam::RotationRange' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, LocationAmplitude) == 0x000034, "Member 'FEndCameraShakeParam::LocationAmplitude' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, RotationAmplitude) == 0x000040, "Member 'FEndCameraShakeParam::RotationAmplitude' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, InnerRadius) == 0x00004C, "Member 'FEndCameraShakeParam::InnerRadius' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, OuterRadius) == 0x000050, "Member 'FEndCameraShakeParam::OuterRadius' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, Falloff) == 0x000054, "Member 'FEndCameraShakeParam::Falloff' has a wrong offset!");

// ScriptStruct EndGame.EndCardGame3DTokenSpawnInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndCardGame3DTokenSpawnInfo final
{
public:
	TArray<float>                                 Timers;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCardGame3DTokenSpawnInfo) == 0x000008, "Wrong alignment on FEndCardGame3DTokenSpawnInfo");
static_assert(sizeof(FEndCardGame3DTokenSpawnInfo) == 0x000010, "Wrong size on FEndCardGame3DTokenSpawnInfo");
static_assert(offsetof(FEndCardGame3DTokenSpawnInfo, Timers) == 0x000000, "Member 'FEndCardGame3DTokenSpawnInfo::Timers' has a wrong offset!");

// ScriptStruct EndGame.EndFieldSimpleInteractTargetTransSetting
// 0x0090 (0x0090 - 0x0000)
struct FEndFieldSimpleInteractTargetTransSetting final
{
public:
	ESimpleInteractTarget                         MoveTargetType;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetWorldTransform;                              // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   TargetBoneName;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransformOffset;                             // 0x0050(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         ModifyMaskTransformParams;                         // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldSimpleInteractTargetTransSetting) == 0x000010, "Wrong alignment on FEndFieldSimpleInteractTargetTransSetting");
static_assert(sizeof(FEndFieldSimpleInteractTargetTransSetting) == 0x000090, "Wrong size on FEndFieldSimpleInteractTargetTransSetting");
static_assert(offsetof(FEndFieldSimpleInteractTargetTransSetting, MoveTargetType) == 0x000000, "Member 'FEndFieldSimpleInteractTargetTransSetting::MoveTargetType' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractTargetTransSetting, TargetWorldTransform) == 0x000010, "Member 'FEndFieldSimpleInteractTargetTransSetting::TargetWorldTransform' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractTargetTransSetting, TargetBoneName) == 0x000040, "Member 'FEndFieldSimpleInteractTargetTransSetting::TargetBoneName' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractTargetTransSetting, TargetTransformOffset) == 0x000050, "Member 'FEndFieldSimpleInteractTargetTransSetting::TargetTransformOffset' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractTargetTransSetting, ModifyMaskTransformParams) == 0x000080, "Member 'FEndFieldSimpleInteractTargetTransSetting::ModifyMaskTransformParams' has a wrong offset!");

// ScriptStruct EndGame.EndChangeAppearanceSetting
// 0x0068 (0x0068 - 0x0000)
struct FEndChangeAppearanceSetting final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndMaterialPack*                       MaterialPack;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              AnimInstance;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEndAnimSet*>                    AnimSets;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UEndBodyControlRig*                     BodyControlRig;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADSound*                         SoundSE;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADSound*                         SoundAutoSE;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndAssetPack*                          EffectPack;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RootCapsuleSize;                                   // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableChangeCapsuleSize;                         // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndChangeAppearanceBodyPrimitiveSettings> CustomEndChangeAppearanceBodyPrimitiveSettings;    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChangeAppearanceSetting) == 0x000008, "Wrong alignment on FEndChangeAppearanceSetting");
static_assert(sizeof(FEndChangeAppearanceSetting) == 0x000068, "Wrong size on FEndChangeAppearanceSetting");
static_assert(offsetof(FEndChangeAppearanceSetting, SkeletalMesh) == 0x000000, "Member 'FEndChangeAppearanceSetting::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceSetting, MaterialPack) == 0x000008, "Member 'FEndChangeAppearanceSetting::MaterialPack' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceSetting, AnimInstance) == 0x000010, "Member 'FEndChangeAppearanceSetting::AnimInstance' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceSetting, AnimSets) == 0x000018, "Member 'FEndChangeAppearanceSetting::AnimSets' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceSetting, BodyControlRig) == 0x000028, "Member 'FEndChangeAppearanceSetting::BodyControlRig' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceSetting, SoundSE) == 0x000030, "Member 'FEndChangeAppearanceSetting::SoundSE' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceSetting, SoundAutoSE) == 0x000038, "Member 'FEndChangeAppearanceSetting::SoundAutoSE' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceSetting, EffectPack) == 0x000040, "Member 'FEndChangeAppearanceSetting::EffectPack' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceSetting, RootCapsuleSize) == 0x000048, "Member 'FEndChangeAppearanceSetting::RootCapsuleSize' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceSetting, bDisableChangeCapsuleSize) == 0x000054, "Member 'FEndChangeAppearanceSetting::bDisableChangeCapsuleSize' has a wrong offset!");
static_assert(offsetof(FEndChangeAppearanceSetting, CustomEndChangeAppearanceBodyPrimitiveSettings) == 0x000058, "Member 'FEndChangeAppearanceSetting::CustomEndChangeAppearanceBodyPrimitiveSettings' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterAbilityCancelStartParameter
// 0x0008 (0x0008 - 0x0000)
struct FEndCharacterAbilityCancelStartParameter final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timing;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCharacterAbilityCancelStartParameter) == 0x000004, "Wrong alignment on FEndCharacterAbilityCancelStartParameter");
static_assert(sizeof(FEndCharacterAbilityCancelStartParameter) == 0x000008, "Wrong size on FEndCharacterAbilityCancelStartParameter");
static_assert(offsetof(FEndCharacterAbilityCancelStartParameter, Number) == 0x000000, "Member 'FEndCharacterAbilityCancelStartParameter::Number' has a wrong offset!");
static_assert(offsetof(FEndCharacterAbilityCancelStartParameter, Timing) == 0x000004, "Member 'FEndCharacterAbilityCancelStartParameter::Timing' has a wrong offset!");

// ScriptStruct EndGame.GameStateChange
// 0x0002 (0x0002 - 0x0000)
struct FGameStateChange final
{
public:
	EGameState                                    State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeIn;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStateChange) == 0x000001, "Wrong alignment on FGameStateChange");
static_assert(sizeof(FGameStateChange) == 0x000002, "Wrong size on FGameStateChange");
static_assert(offsetof(FGameStateChange, State) == 0x000000, "Member 'FGameStateChange::State' has a wrong offset!");
static_assert(offsetof(FGameStateChange, ChangeIn) == 0x000001, "Member 'FGameStateChange::ChangeIn' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterAdjustCameraModule
// 0x0098 (0x0488 - 0x03F0)
struct FEndCharacterAdjustCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x98];                                     // 0x03F0(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCharacterAdjustCameraModule) == 0x000008, "Wrong alignment on FEndCharacterAdjustCameraModule");
static_assert(sizeof(FEndCharacterAdjustCameraModule) == 0x000488, "Wrong size on FEndCharacterAdjustCameraModule");

// ScriptStruct EndGame.EndCharacterLocomotionAssetCache
// 0x0030 (0x0030 - 0x0000)
struct FEndCharacterLocomotionAssetCache final
{
public:
	class UAnimationAsset*                        Asset;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionAnimGroup                       AnimGroup;                                         // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionAnimGroup                       SubAnimGroup;                                      // 0x0009(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastTime;                                          // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BlendInput;                                        // 0x001C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLooping;                                  // 0x0029(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirty;                                            // 0x002A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCharacterLocomotionAssetCache) == 0x000008, "Wrong alignment on FEndCharacterLocomotionAssetCache");
static_assert(sizeof(FEndCharacterLocomotionAssetCache) == 0x000030, "Wrong size on FEndCharacterLocomotionAssetCache");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, Asset) == 0x000000, "Member 'FEndCharacterLocomotionAssetCache::Asset' has a wrong offset!");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, AnimGroup) == 0x000008, "Member 'FEndCharacterLocomotionAssetCache::AnimGroup' has a wrong offset!");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, SubAnimGroup) == 0x000009, "Member 'FEndCharacterLocomotionAssetCache::SubAnimGroup' has a wrong offset!");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, StartTime) == 0x00000C, "Member 'FEndCharacterLocomotionAssetCache::StartTime' has a wrong offset!");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, CurrentTime) == 0x000010, "Member 'FEndCharacterLocomotionAssetCache::CurrentTime' has a wrong offset!");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, LastTime) == 0x000014, "Member 'FEndCharacterLocomotionAssetCache::LastTime' has a wrong offset!");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, BlendTime) == 0x000018, "Member 'FEndCharacterLocomotionAssetCache::BlendTime' has a wrong offset!");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, BlendInput) == 0x00001C, "Member 'FEndCharacterLocomotionAssetCache::BlendInput' has a wrong offset!");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, bLooping) == 0x000028, "Member 'FEndCharacterLocomotionAssetCache::bLooping' has a wrong offset!");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, bOverrideLooping) == 0x000029, "Member 'FEndCharacterLocomotionAssetCache::bOverrideLooping' has a wrong offset!");
static_assert(offsetof(FEndCharacterLocomotionAssetCache, bDirty) == 0x00002A, "Member 'FEndCharacterLocomotionAssetCache::bDirty' has a wrong offset!");

// ScriptStruct EndGame.EndFieldRedPullChallengeSetting
// 0x0070 (0x0070 - 0x0000)
struct FEndFieldRedPullChallengeSetting final
{
public:
	EEndFieldRedPullChallengeSettingType          Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChallengeTime;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChallengeDistance;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnemyLeftPullButton;                              // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnemyRightPullButton;                             // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnemyLeftPullButtonRandomPerRate;                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyLeftPullRandomChangeMinTime;                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyLeftPullRandomChangeMaxTime;                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyRightPullButtonRandomPerRate;                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyRightPullRandomChangeMinTime;                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyRightPullRandomChangeMaxTime;                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyLeftMotionRate;                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyRightMotionRate;                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerMotionRate;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputEnemyLeftMotionRate;                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputEnemyRightMotionRate;                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputPlayerMotionRate;                             // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FailedEnemyLeftMotionRate;                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FailedEnemyRightMotionRate;                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FailedPlayerMotionRate;                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartTriggerName;                                  // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuccessTriggerName;                                // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FailedTriggerName;                                 // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuccessIdleTimeMax;                                // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuccessToNextIntervalTime;                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FaildToNextIntervalTime;                           // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldRedPullChallengeSetting) == 0x000004, "Wrong alignment on FEndFieldRedPullChallengeSetting");
static_assert(sizeof(FEndFieldRedPullChallengeSetting) == 0x000070, "Wrong size on FEndFieldRedPullChallengeSetting");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, Type) == 0x000000, "Member 'FEndFieldRedPullChallengeSetting::Type' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, ChallengeTime) == 0x000004, "Member 'FEndFieldRedPullChallengeSetting::ChallengeTime' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, ChallengeDistance) == 0x000008, "Member 'FEndFieldRedPullChallengeSetting::ChallengeDistance' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, bEnemyLeftPullButton) == 0x00000C, "Member 'FEndFieldRedPullChallengeSetting::bEnemyLeftPullButton' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, bEnemyRightPullButton) == 0x00000D, "Member 'FEndFieldRedPullChallengeSetting::bEnemyRightPullButton' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, EnemyLeftPullButtonRandomPerRate) == 0x000010, "Member 'FEndFieldRedPullChallengeSetting::EnemyLeftPullButtonRandomPerRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, EnemyLeftPullRandomChangeMinTime) == 0x000014, "Member 'FEndFieldRedPullChallengeSetting::EnemyLeftPullRandomChangeMinTime' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, EnemyLeftPullRandomChangeMaxTime) == 0x000018, "Member 'FEndFieldRedPullChallengeSetting::EnemyLeftPullRandomChangeMaxTime' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, EnemyRightPullButtonRandomPerRate) == 0x00001C, "Member 'FEndFieldRedPullChallengeSetting::EnemyRightPullButtonRandomPerRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, EnemyRightPullRandomChangeMinTime) == 0x000020, "Member 'FEndFieldRedPullChallengeSetting::EnemyRightPullRandomChangeMinTime' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, EnemyRightPullRandomChangeMaxTime) == 0x000024, "Member 'FEndFieldRedPullChallengeSetting::EnemyRightPullRandomChangeMaxTime' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, EnemyLeftMotionRate) == 0x000028, "Member 'FEndFieldRedPullChallengeSetting::EnemyLeftMotionRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, EnemyRightMotionRate) == 0x00002C, "Member 'FEndFieldRedPullChallengeSetting::EnemyRightMotionRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, PlayerMotionRate) == 0x000030, "Member 'FEndFieldRedPullChallengeSetting::PlayerMotionRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, InputEnemyLeftMotionRate) == 0x000034, "Member 'FEndFieldRedPullChallengeSetting::InputEnemyLeftMotionRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, InputEnemyRightMotionRate) == 0x000038, "Member 'FEndFieldRedPullChallengeSetting::InputEnemyRightMotionRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, InputPlayerMotionRate) == 0x00003C, "Member 'FEndFieldRedPullChallengeSetting::InputPlayerMotionRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, FailedEnemyLeftMotionRate) == 0x000040, "Member 'FEndFieldRedPullChallengeSetting::FailedEnemyLeftMotionRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, FailedEnemyRightMotionRate) == 0x000044, "Member 'FEndFieldRedPullChallengeSetting::FailedEnemyRightMotionRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, FailedPlayerMotionRate) == 0x000048, "Member 'FEndFieldRedPullChallengeSetting::FailedPlayerMotionRate' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, StartTriggerName) == 0x00004C, "Member 'FEndFieldRedPullChallengeSetting::StartTriggerName' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, SuccessTriggerName) == 0x000054, "Member 'FEndFieldRedPullChallengeSetting::SuccessTriggerName' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, FailedTriggerName) == 0x00005C, "Member 'FEndFieldRedPullChallengeSetting::FailedTriggerName' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, SuccessIdleTimeMax) == 0x000064, "Member 'FEndFieldRedPullChallengeSetting::SuccessIdleTimeMax' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, SuccessToNextIntervalTime) == 0x000068, "Member 'FEndFieldRedPullChallengeSetting::SuccessToNextIntervalTime' has a wrong offset!");
static_assert(offsetof(FEndFieldRedPullChallengeSetting, FaildToNextIntervalTime) == 0x00006C, "Member 'FEndFieldRedPullChallengeSetting::FaildToNextIntervalTime' has a wrong offset!");

// ScriptStruct EndGame.EndOverrideBasedMovementInfo
// 0x0030 (0x0030 - 0x0000)
struct FEndOverrideBasedMovementInfo final
{
public:
	class UPrimitiveComponent*                    MovementBase;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRelativeRotation;                                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndOverrideBasedMovementInfo) == 0x000008, "Wrong alignment on FEndOverrideBasedMovementInfo");
static_assert(sizeof(FEndOverrideBasedMovementInfo) == 0x000030, "Wrong size on FEndOverrideBasedMovementInfo");
static_assert(offsetof(FEndOverrideBasedMovementInfo, MovementBase) == 0x000000, "Member 'FEndOverrideBasedMovementInfo::MovementBase' has a wrong offset!");
static_assert(offsetof(FEndOverrideBasedMovementInfo, BoneName) == 0x000008, "Member 'FEndOverrideBasedMovementInfo::BoneName' has a wrong offset!");
static_assert(offsetof(FEndOverrideBasedMovementInfo, Location) == 0x000010, "Member 'FEndOverrideBasedMovementInfo::Location' has a wrong offset!");
static_assert(offsetof(FEndOverrideBasedMovementInfo, Rotation) == 0x00001C, "Member 'FEndOverrideBasedMovementInfo::Rotation' has a wrong offset!");
static_assert(offsetof(FEndOverrideBasedMovementInfo, bRelativeRotation) == 0x000028, "Member 'FEndOverrideBasedMovementInfo::bRelativeRotation' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterWeaponSlot
// 0x0050 (0x0050 - 0x0000)
struct FEndCharacterWeaponSlot final
{
public:
	TWeakObjectPtr<class AActor>                  WeaponActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultVisibilityOnNeutral;                       // 0x0008(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultVisibilityOnBattle;                        // 0x0009(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideVisibility;                               // 0x000A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                OverrideVisibilityFrom;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultSocketNameOnNeutral;                        // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultSocketNameOnBattle;                         // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideSocketName;                                // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OverrideSocketNameFrom;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetTranslation;                                 // 0x0038(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0044(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCharacterWeaponSlot) == 0x000008, "Wrong alignment on FEndCharacterWeaponSlot");
static_assert(sizeof(FEndCharacterWeaponSlot) == 0x000050, "Wrong size on FEndCharacterWeaponSlot");
static_assert(offsetof(FEndCharacterWeaponSlot, WeaponActor) == 0x000000, "Member 'FEndCharacterWeaponSlot::WeaponActor' has a wrong offset!");
static_assert(offsetof(FEndCharacterWeaponSlot, bDefaultVisibilityOnNeutral) == 0x000008, "Member 'FEndCharacterWeaponSlot::bDefaultVisibilityOnNeutral' has a wrong offset!");
static_assert(offsetof(FEndCharacterWeaponSlot, bDefaultVisibilityOnBattle) == 0x000009, "Member 'FEndCharacterWeaponSlot::bDefaultVisibilityOnBattle' has a wrong offset!");
static_assert(offsetof(FEndCharacterWeaponSlot, bOverrideVisibility) == 0x00000A, "Member 'FEndCharacterWeaponSlot::bOverrideVisibility' has a wrong offset!");
static_assert(offsetof(FEndCharacterWeaponSlot, OverrideVisibilityFrom) == 0x000010, "Member 'FEndCharacterWeaponSlot::OverrideVisibilityFrom' has a wrong offset!");
static_assert(offsetof(FEndCharacterWeaponSlot, DefaultSocketNameOnNeutral) == 0x000018, "Member 'FEndCharacterWeaponSlot::DefaultSocketNameOnNeutral' has a wrong offset!");
static_assert(offsetof(FEndCharacterWeaponSlot, DefaultSocketNameOnBattle) == 0x000020, "Member 'FEndCharacterWeaponSlot::DefaultSocketNameOnBattle' has a wrong offset!");
static_assert(offsetof(FEndCharacterWeaponSlot, OverrideSocketName) == 0x000028, "Member 'FEndCharacterWeaponSlot::OverrideSocketName' has a wrong offset!");
static_assert(offsetof(FEndCharacterWeaponSlot, OverrideSocketNameFrom) == 0x000030, "Member 'FEndCharacterWeaponSlot::OverrideSocketNameFrom' has a wrong offset!");
static_assert(offsetof(FEndCharacterWeaponSlot, OffsetTranslation) == 0x000038, "Member 'FEndCharacterWeaponSlot::OffsetTranslation' has a wrong offset!");
static_assert(offsetof(FEndCharacterWeaponSlot, OffsetRotation) == 0x000044, "Member 'FEndCharacterWeaponSlot::OffsetRotation' has a wrong offset!");

// ScriptStruct EndGame.EndChickenLureCameraModule
// 0x0040 (0x0430 - 0x03F0)
struct FEndChickenLureCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x40];                                     // 0x03F0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndChickenLureCameraModule) == 0x000008, "Wrong alignment on FEndChickenLureCameraModule");
static_assert(sizeof(FEndChickenLureCameraModule) == 0x000430, "Wrong size on FEndChickenLureCameraModule");

// ScriptStruct EndGame.EndChocoboCameraModule
// 0x07D0 (0x0BC0 - 0x03F0)
struct alignas(0x10) FEndChocoboCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x7D0];                                    // 0x03F0(0x07D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndChocoboCameraModule) == 0x000010, "Wrong alignment on FEndChocoboCameraModule");
static_assert(sizeof(FEndChocoboCameraModule) == 0x000BC0, "Wrong size on FEndChocoboCameraModule");

// ScriptStruct EndGame.ChocoboCaptureStopPoint
// 0x0008 (0x0008 - 0x0000)
struct FChocoboCaptureStopPoint final
{
public:
	int32                                         _StopIndex;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _StopCount;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChocoboCaptureStopPoint) == 0x000004, "Wrong alignment on FChocoboCaptureStopPoint");
static_assert(sizeof(FChocoboCaptureStopPoint) == 0x000008, "Wrong size on FChocoboCaptureStopPoint");
static_assert(offsetof(FChocoboCaptureStopPoint, _StopIndex) == 0x000000, "Member 'FChocoboCaptureStopPoint::_StopIndex' has a wrong offset!");
static_assert(offsetof(FChocoboCaptureStopPoint, _StopCount) == 0x000004, "Member 'FChocoboCaptureStopPoint::_StopCount' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboPartsData
// 0x0018 (0x0018 - 0x0000)
struct FEndChocoboPartsData final
{
public:
	class USkeletalMesh*                          PartsMesh_Head;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          PartsMesh_Body;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          PartsMesh_Legs;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChocoboPartsData) == 0x000008, "Wrong alignment on FEndChocoboPartsData");
static_assert(sizeof(FEndChocoboPartsData) == 0x000018, "Wrong size on FEndChocoboPartsData");
static_assert(offsetof(FEndChocoboPartsData, PartsMesh_Head) == 0x000000, "Member 'FEndChocoboPartsData::PartsMesh_Head' has a wrong offset!");
static_assert(offsetof(FEndChocoboPartsData, PartsMesh_Body) == 0x000008, "Member 'FEndChocoboPartsData::PartsMesh_Body' has a wrong offset!");
static_assert(offsetof(FEndChocoboPartsData, PartsMesh_Legs) == 0x000010, "Member 'FEndChocoboPartsData::PartsMesh_Legs' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboPartsDataSet
// 0x0030 (0x0030 - 0x0000)
struct FEndChocoboPartsDataSet final
{
public:
	struct FEndChocoboPartsData                   DefaultBody;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndChocoboPartsData                   EquippedBody;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChocoboPartsDataSet) == 0x000008, "Wrong alignment on FEndChocoboPartsDataSet");
static_assert(sizeof(FEndChocoboPartsDataSet) == 0x000030, "Wrong size on FEndChocoboPartsDataSet");
static_assert(offsetof(FEndChocoboPartsDataSet, DefaultBody) == 0x000000, "Member 'FEndChocoboPartsDataSet::DefaultBody' has a wrong offset!");
static_assert(offsetof(FEndChocoboPartsDataSet, EquippedBody) == 0x000018, "Member 'FEndChocoboPartsDataSet::EquippedBody' has a wrong offset!");

// ScriptStruct EndGame.EndFieldSimpleInteractNameMatching
// 0x0010 (0x0010 - 0x0000)
struct FEndFieldSimpleInteractNameMatching final
{
public:
	class FName                                   MatchingName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldSimpleInteractNameMatching) == 0x000004, "Wrong alignment on FEndFieldSimpleInteractNameMatching");
static_assert(sizeof(FEndFieldSimpleInteractNameMatching) == 0x000010, "Wrong size on FEndFieldSimpleInteractNameMatching");
static_assert(offsetof(FEndFieldSimpleInteractNameMatching, MatchingName) == 0x000000, "Member 'FEndFieldSimpleInteractNameMatching::MatchingName' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractNameMatching, Name) == 0x000008, "Member 'FEndFieldSimpleInteractNameMatching::Name' has a wrong offset!");

// ScriptStruct EndGame.EndNiblCrawlCameraModule
// 0x00E0 (0x04D0 - 0x03F0)
struct FEndNiblCrawlCameraModule : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0xE0];                                     // 0x03F0(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndNiblCrawlCameraModule) == 0x000008, "Wrong alignment on FEndNiblCrawlCameraModule");
static_assert(sizeof(FEndNiblCrawlCameraModule) == 0x0004D0, "Wrong size on FEndNiblCrawlCameraModule");

// ScriptStruct EndGame.EndChocoboFieldGridMovementModifierParam
// 0x0008 (0x0008 - 0x0000)
struct FEndChocoboFieldGridMovementModifierParam final
{
public:
	int32                                         OverrideAffectLevel;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationPowerScale;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChocoboFieldGridMovementModifierParam) == 0x000004, "Wrong alignment on FEndChocoboFieldGridMovementModifierParam");
static_assert(sizeof(FEndChocoboFieldGridMovementModifierParam) == 0x000008, "Wrong size on FEndChocoboFieldGridMovementModifierParam");
static_assert(offsetof(FEndChocoboFieldGridMovementModifierParam, OverrideAffectLevel) == 0x000000, "Member 'FEndChocoboFieldGridMovementModifierParam::OverrideAffectLevel' has a wrong offset!");
static_assert(offsetof(FEndChocoboFieldGridMovementModifierParam, RotationPowerScale) == 0x000004, "Member 'FEndChocoboFieldGridMovementModifierParam::RotationPowerScale' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboFieldGridParam
// 0x0030 (0x0030 - 0x0000)
struct FEndChocoboFieldGridParam final
{
public:
	float                                         CheckForwardOffset;                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              YawSmoothingParam;                                 // 0x0004(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxAffectLevel;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeepHeight;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              KeepHeightSmoothing;                               // 0x0018(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinInputPower;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndChocoboFieldGridMovementModifierParam ModifireParam;                                     // 0x0028(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChocoboFieldGridParam) == 0x000004, "Wrong alignment on FEndChocoboFieldGridParam");
static_assert(sizeof(FEndChocoboFieldGridParam) == 0x000030, "Wrong size on FEndChocoboFieldGridParam");
static_assert(offsetof(FEndChocoboFieldGridParam, CheckForwardOffset) == 0x000000, "Member 'FEndChocoboFieldGridParam::CheckForwardOffset' has a wrong offset!");
static_assert(offsetof(FEndChocoboFieldGridParam, YawSmoothingParam) == 0x000004, "Member 'FEndChocoboFieldGridParam::YawSmoothingParam' has a wrong offset!");
static_assert(offsetof(FEndChocoboFieldGridParam, MaxAffectLevel) == 0x000010, "Member 'FEndChocoboFieldGridParam::MaxAffectLevel' has a wrong offset!");
static_assert(offsetof(FEndChocoboFieldGridParam, KeepHeight) == 0x000014, "Member 'FEndChocoboFieldGridParam::KeepHeight' has a wrong offset!");
static_assert(offsetof(FEndChocoboFieldGridParam, KeepHeightSmoothing) == 0x000018, "Member 'FEndChocoboFieldGridParam::KeepHeightSmoothing' has a wrong offset!");
static_assert(offsetof(FEndChocoboFieldGridParam, MinInputPower) == 0x000024, "Member 'FEndChocoboFieldGridParam::MinInputPower' has a wrong offset!");
static_assert(offsetof(FEndChocoboFieldGridParam, ModifireParam) == 0x000028, "Member 'FEndChocoboFieldGridParam::ModifireParam' has a wrong offset!");

// ScriptStruct EndGame.EndFormatArgumentData
// 0x0020 (0x0020 - 0x0000)
struct FEndFormatArgumentData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFormatArgumentData) == 0x000008, "Wrong alignment on FEndFormatArgumentData");
static_assert(sizeof(FEndFormatArgumentData) == 0x000020, "Wrong size on FEndFormatArgumentData");
static_assert(offsetof(FEndFormatArgumentData, Name) == 0x000000, "Member 'FEndFormatArgumentData::Name' has a wrong offset!");
static_assert(offsetof(FEndFormatArgumentData, Count) == 0x000010, "Member 'FEndFormatArgumentData::Count' has a wrong offset!");
static_assert(offsetof(FEndFormatArgumentData, Index) == 0x000014, "Member 'FEndFormatArgumentData::Index' has a wrong offset!");
static_assert(offsetof(FEndFormatArgumentData, Rank) == 0x000018, "Member 'FEndFormatArgumentData::Rank' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboParkourModifierParam
// 0x0010 (0x0010 - 0x0000)
struct FEndChocoboParkourModifierParam final
{
public:
	float                                         EnableAutoSkipUpStepHeight;                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableAutoSkipDownStepHeight;                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxJumpDistanceXY;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDistanceXYRate;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndChocoboParkourModifierParam) == 0x000004, "Wrong alignment on FEndChocoboParkourModifierParam");
static_assert(sizeof(FEndChocoboParkourModifierParam) == 0x000010, "Wrong size on FEndChocoboParkourModifierParam");
static_assert(offsetof(FEndChocoboParkourModifierParam, EnableAutoSkipUpStepHeight) == 0x000000, "Member 'FEndChocoboParkourModifierParam::EnableAutoSkipUpStepHeight' has a wrong offset!");
static_assert(offsetof(FEndChocoboParkourModifierParam, EnableAutoSkipDownStepHeight) == 0x000004, "Member 'FEndChocoboParkourModifierParam::EnableAutoSkipDownStepHeight' has a wrong offset!");
static_assert(offsetof(FEndChocoboParkourModifierParam, MaxJumpDistanceXY) == 0x000008, "Member 'FEndChocoboParkourModifierParam::MaxJumpDistanceXY' has a wrong offset!");
static_assert(offsetof(FEndChocoboParkourModifierParam, JumpDistanceXYRate) == 0x00000C, "Member 'FEndChocoboParkourModifierParam::JumpDistanceXYRate' has a wrong offset!");

// ScriptStruct EndGame.ChocoboCraftQuestWave
// 0x0024 (0x0024 - 0x0000)
struct FChocoboCraftQuestWave final
{
public:
	float                                         SineTimer;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SineAmplitude;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SineFrequency;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x18];                                       // 0x000C(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChocoboCraftQuestWave) == 0x000004, "Wrong alignment on FChocoboCraftQuestWave");
static_assert(sizeof(FChocoboCraftQuestWave) == 0x000024, "Wrong size on FChocoboCraftQuestWave");
static_assert(offsetof(FChocoboCraftQuestWave, SineTimer) == 0x000000, "Member 'FChocoboCraftQuestWave::SineTimer' has a wrong offset!");
static_assert(offsetof(FChocoboCraftQuestWave, SineAmplitude) == 0x000004, "Member 'FChocoboCraftQuestWave::SineAmplitude' has a wrong offset!");
static_assert(offsetof(FChocoboCraftQuestWave, SineFrequency) == 0x000008, "Member 'FChocoboCraftQuestWave::SineFrequency' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboGlideGimmickSplineMoveParam
// 0x0024 (0x0024 - 0x0000)
struct FEndChocoboGlideGimmickSplineMoveParam final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantArrivalTime;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationPitchOffset;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationYawOffset;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TiltAngleOnMaxSpeed;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementGoalOffsetDistance;                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPointRate;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartMoveAscending;                               // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndChocoboGlideGimmickSplineMoveParam) == 0x000004, "Wrong alignment on FEndChocoboGlideGimmickSplineMoveParam");
static_assert(sizeof(FEndChocoboGlideGimmickSplineMoveParam) == 0x000024, "Wrong size on FEndChocoboGlideGimmickSplineMoveParam");
static_assert(offsetof(FEndChocoboGlideGimmickSplineMoveParam, MaxSpeed) == 0x000000, "Member 'FEndChocoboGlideGimmickSplineMoveParam::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndChocoboGlideGimmickSplineMoveParam, Acceleration) == 0x000004, "Member 'FEndChocoboGlideGimmickSplineMoveParam::Acceleration' has a wrong offset!");
static_assert(offsetof(FEndChocoboGlideGimmickSplineMoveParam, ConstantArrivalTime) == 0x000008, "Member 'FEndChocoboGlideGimmickSplineMoveParam::ConstantArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndChocoboGlideGimmickSplineMoveParam, RotationPitchOffset) == 0x00000C, "Member 'FEndChocoboGlideGimmickSplineMoveParam::RotationPitchOffset' has a wrong offset!");
static_assert(offsetof(FEndChocoboGlideGimmickSplineMoveParam, RotationYawOffset) == 0x000010, "Member 'FEndChocoboGlideGimmickSplineMoveParam::RotationYawOffset' has a wrong offset!");
static_assert(offsetof(FEndChocoboGlideGimmickSplineMoveParam, TiltAngleOnMaxSpeed) == 0x000014, "Member 'FEndChocoboGlideGimmickSplineMoveParam::TiltAngleOnMaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndChocoboGlideGimmickSplineMoveParam, MovementGoalOffsetDistance) == 0x000018, "Member 'FEndChocoboGlideGimmickSplineMoveParam::MovementGoalOffsetDistance' has a wrong offset!");
static_assert(offsetof(FEndChocoboGlideGimmickSplineMoveParam, StartPointRate) == 0x00001C, "Member 'FEndChocoboGlideGimmickSplineMoveParam::StartPointRate' has a wrong offset!");
static_assert(offsetof(FEndChocoboGlideGimmickSplineMoveParam, bStartMoveAscending) == 0x000020, "Member 'FEndChocoboGlideGimmickSplineMoveParam::bStartMoveAscending' has a wrong offset!");

// ScriptStruct EndGame.EndChocoboRaceCameraModule
// 0x0050 (0x0530 - 0x04E0)
struct FEndChocoboRaceCameraModule final : public FEndVehicleCameraModule
{
public:
	uint8                                         Pad_4E0[0x50];                                     // 0x04E0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndChocoboRaceCameraModule) == 0x000010, "Wrong alignment on FEndChocoboRaceCameraModule");
static_assert(sizeof(FEndChocoboRaceCameraModule) == 0x000530, "Wrong size on FEndChocoboRaceCameraModule");

// ScriptStruct EndGame.EndChocoboRaceCharacterEnemy
// 0x0180 (0x0A90 - 0x0910)
struct FEndChocoboRaceCharacterEnemy final : public FEndChocoboRaceCharacterBase
{
public:
	uint8                                         Pad_910[0x180];                                    // 0x0910(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndChocoboRaceCharacterEnemy) == 0x000010, "Wrong alignment on FEndChocoboRaceCharacterEnemy");
static_assert(sizeof(FEndChocoboRaceCharacterEnemy) == 0x000A90, "Wrong size on FEndChocoboRaceCharacterEnemy");

// ScriptStruct EndGame.EndCinemaAttachParameters
// 0x0018 (0x0018 - 0x0000)
struct FEndCinemaAttachParameters final
{
public:
	class FName                                   AttachActorName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachComponentName;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCinemaAttachParameters) == 0x000004, "Wrong alignment on FEndCinemaAttachParameters");
static_assert(sizeof(FEndCinemaAttachParameters) == 0x000018, "Wrong size on FEndCinemaAttachParameters");
static_assert(offsetof(FEndCinemaAttachParameters, AttachActorName) == 0x000000, "Member 'FEndCinemaAttachParameters::AttachActorName' has a wrong offset!");
static_assert(offsetof(FEndCinemaAttachParameters, AttachSocketName) == 0x000008, "Member 'FEndCinemaAttachParameters::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndCinemaAttachParameters, AttachComponentName) == 0x000010, "Member 'FEndCinemaAttachParameters::AttachComponentName' has a wrong offset!");

// ScriptStruct EndGame.EndDoorCameraModule
// 0x0150 (0x0540 - 0x03F0)
struct FEndDoorCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x150];                                    // 0x03F0(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDoorCameraModule) == 0x000008, "Wrong alignment on FEndDoorCameraModule");
static_assert(sizeof(FEndDoorCameraModule) == 0x000540, "Wrong size on FEndDoorCameraModule");

// ScriptStruct EndGame.EndCinemaCoordinateAnimParams
// 0x002C (0x002C - 0x0000)
struct FEndCinemaCoordinateAnimParams final
{
public:
	class FName                                   MeshPlacedLevel;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshAccessorID;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateAnimationSettingsId;                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        Curve;                                             // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallStopOnEnd;                                    // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCinemaCoordinateAnimParams) == 0x000004, "Wrong alignment on FEndCinemaCoordinateAnimParams");
static_assert(sizeof(FEndCinemaCoordinateAnimParams) == 0x00002C, "Wrong size on FEndCinemaCoordinateAnimParams");
static_assert(offsetof(FEndCinemaCoordinateAnimParams, MeshPlacedLevel) == 0x000000, "Member 'FEndCinemaCoordinateAnimParams::MeshPlacedLevel' has a wrong offset!");
static_assert(offsetof(FEndCinemaCoordinateAnimParams, MeshAccessorID) == 0x000008, "Member 'FEndCinemaCoordinateAnimParams::MeshAccessorID' has a wrong offset!");
static_assert(offsetof(FEndCinemaCoordinateAnimParams, ActorName) == 0x000010, "Member 'FEndCinemaCoordinateAnimParams::ActorName' has a wrong offset!");
static_assert(offsetof(FEndCinemaCoordinateAnimParams, CoordinateAnimationSettingsId) == 0x000018, "Member 'FEndCinemaCoordinateAnimParams::CoordinateAnimationSettingsId' has a wrong offset!");
static_assert(offsetof(FEndCinemaCoordinateAnimParams, Curve) == 0x000020, "Member 'FEndCinemaCoordinateAnimParams::Curve' has a wrong offset!");
static_assert(offsetof(FEndCinemaCoordinateAnimParams, Duration) == 0x000024, "Member 'FEndCinemaCoordinateAnimParams::Duration' has a wrong offset!");
static_assert(offsetof(FEndCinemaCoordinateAnimParams, bCallStopOnEnd) == 0x000028, "Member 'FEndCinemaCoordinateAnimParams::bCallStopOnEnd' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaCoordinateAnimSectionTemplate
// 0x0030 (0x0050 - 0x0020)
struct FEndCinemaCoordinateAnimSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FEndCinemaCoordinateAnimParams         Params;                                            // 0x0020(0x002C)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCinemaCoordinateAnimSectionTemplate) == 0x000008, "Wrong alignment on FEndCinemaCoordinateAnimSectionTemplate");
static_assert(sizeof(FEndCinemaCoordinateAnimSectionTemplate) == 0x000050, "Wrong size on FEndCinemaCoordinateAnimSectionTemplate");
static_assert(offsetof(FEndCinemaCoordinateAnimSectionTemplate, Params) == 0x000020, "Member 'FEndCinemaCoordinateAnimSectionTemplate::Params' has a wrong offset!");

// ScriptStruct EndGame.EndIdleHeightStabilizerCameraModule
// 0x0058 (0x0448 - 0x03F0)
struct FEndIdleHeightStabilizerCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x58];                                     // 0x03F0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndIdleHeightStabilizerCameraModule) == 0x000008, "Wrong alignment on FEndIdleHeightStabilizerCameraModule");
static_assert(sizeof(FEndIdleHeightStabilizerCameraModule) == 0x000448, "Wrong size on FEndIdleHeightStabilizerCameraModule");

// ScriptStruct EndGame.EndCinemaDeformAnimSectionTemplate
// 0x00B0 (0x00D0 - 0x0020)
struct FEndCinemaDeformAnimSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FEndCinemaDeformAnimParams             Params;                                            // 0x0020(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                FloatChannel;                                      // 0x0030(0x00A0)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndCinemaDeformAnimSectionTemplate) == 0x000008, "Wrong alignment on FEndCinemaDeformAnimSectionTemplate");
static_assert(sizeof(FEndCinemaDeformAnimSectionTemplate) == 0x0000D0, "Wrong size on FEndCinemaDeformAnimSectionTemplate");
static_assert(offsetof(FEndCinemaDeformAnimSectionTemplate, Params) == 0x000020, "Member 'FEndCinemaDeformAnimSectionTemplate::Params' has a wrong offset!");
static_assert(offsetof(FEndCinemaDeformAnimSectionTemplate, FloatChannel) == 0x000030, "Member 'FEndCinemaDeformAnimSectionTemplate::FloatChannel' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaEmissiveAnimParameters
// 0x0008 (0x0008 - 0x0000)
struct FEndCinemaEmissiveAnimParameters final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCinemaEmissiveAnimParameters) == 0x000004, "Wrong alignment on FEndCinemaEmissiveAnimParameters");
static_assert(sizeof(FEndCinemaEmissiveAnimParameters) == 0x000008, "Wrong size on FEndCinemaEmissiveAnimParameters");
static_assert(offsetof(FEndCinemaEmissiveAnimParameters, ActorName) == 0x000000, "Member 'FEndCinemaEmissiveAnimParameters::ActorName' has a wrong offset!");

// ScriptStruct EndGame.EndPumpFilteringString
// 0x0018 (0x0018 - 0x0000)
struct FEndPumpFilteringString final
{
public:
	bool                                          bFilteringTypeTexture;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilteringTypeStaticMesh;                          // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilteringTypeSkeletalMesh;                        // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilteringTypeMassiveEnvironment;                  // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilteringString;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPumpFilteringString) == 0x000008, "Wrong alignment on FEndPumpFilteringString");
static_assert(sizeof(FEndPumpFilteringString) == 0x000018, "Wrong size on FEndPumpFilteringString");
static_assert(offsetof(FEndPumpFilteringString, bFilteringTypeTexture) == 0x000000, "Member 'FEndPumpFilteringString::bFilteringTypeTexture' has a wrong offset!");
static_assert(offsetof(FEndPumpFilteringString, bFilteringTypeStaticMesh) == 0x000001, "Member 'FEndPumpFilteringString::bFilteringTypeStaticMesh' has a wrong offset!");
static_assert(offsetof(FEndPumpFilteringString, bFilteringTypeSkeletalMesh) == 0x000002, "Member 'FEndPumpFilteringString::bFilteringTypeSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FEndPumpFilteringString, bFilteringTypeMassiveEnvironment) == 0x000003, "Member 'FEndPumpFilteringString::bFilteringTypeMassiveEnvironment' has a wrong offset!");
static_assert(offsetof(FEndPumpFilteringString, FilteringString) == 0x000008, "Member 'FEndPumpFilteringString::FilteringString' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaPropertyColorCurveSectionTemplate
// 0x0298 (0x02D0 - 0x0038)
struct FEndCinemaPropertyColorCurveSectionTemplate final : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneFloatChannel                Curves[0x4];                                       // 0x0038(0x00A0)(NativeAccessSpecifierPublic)
	EMovieSceneBlendType                          BlendType;                                         // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEndCinemaPropertyColorCurveSection*    CurveSection;                                      // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameRate                             FramePerTick;                                      // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndCinemaPropertyColorCurveSectionTemplate) == 0x000008, "Wrong alignment on FEndCinemaPropertyColorCurveSectionTemplate");
static_assert(sizeof(FEndCinemaPropertyColorCurveSectionTemplate) == 0x0002D0, "Wrong size on FEndCinemaPropertyColorCurveSectionTemplate");
static_assert(offsetof(FEndCinemaPropertyColorCurveSectionTemplate, Curves) == 0x000038, "Member 'FEndCinemaPropertyColorCurveSectionTemplate::Curves' has a wrong offset!");
static_assert(offsetof(FEndCinemaPropertyColorCurveSectionTemplate, BlendType) == 0x0002B8, "Member 'FEndCinemaPropertyColorCurveSectionTemplate::BlendType' has a wrong offset!");
static_assert(offsetof(FEndCinemaPropertyColorCurveSectionTemplate, CurveSection) == 0x0002C0, "Member 'FEndCinemaPropertyColorCurveSectionTemplate::CurveSection' has a wrong offset!");
static_assert(offsetof(FEndCinemaPropertyColorCurveSectionTemplate, FramePerTick) == 0x0002C8, "Member 'FEndCinemaPropertyColorCurveSectionTemplate::FramePerTick' has a wrong offset!");

// ScriptStruct EndGame.EndGroundFillMesh
// 0x0010 (0x0010 - 0x0000)
struct FEndGroundFillMesh final
{
public:
	float                                         FillRateLimit;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradientLimit;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndGroundFillMesh) == 0x000008, "Wrong alignment on FEndGroundFillMesh");
static_assert(sizeof(FEndGroundFillMesh) == 0x000010, "Wrong size on FEndGroundFillMesh");
static_assert(offsetof(FEndGroundFillMesh, FillRateLimit) == 0x000000, "Member 'FEndGroundFillMesh::FillRateLimit' has a wrong offset!");
static_assert(offsetof(FEndGroundFillMesh, GradientLimit) == 0x000004, "Member 'FEndGroundFillMesh::GradientLimit' has a wrong offset!");
static_assert(offsetof(FEndGroundFillMesh, StaticMesh) == 0x000008, "Member 'FEndGroundFillMesh::StaticMesh' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaPropertyFloatCurveSectionTemplate
// 0x00B8 (0x00F0 - 0x0038)
struct FEndCinemaPropertyFloatCurveSectionTemplate final : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneFloatChannel                FloatCurve;                                        // 0x0038(0x00A0)(NativeAccessSpecifierPublic)
	EMovieSceneBlendType                          BlendType;                                         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEndCinemaPropertyFloatCurveSection*    CurveSection;                                      // 0x00E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameRate                             FramePerTick;                                      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndCinemaPropertyFloatCurveSectionTemplate) == 0x000008, "Wrong alignment on FEndCinemaPropertyFloatCurveSectionTemplate");
static_assert(sizeof(FEndCinemaPropertyFloatCurveSectionTemplate) == 0x0000F0, "Wrong size on FEndCinemaPropertyFloatCurveSectionTemplate");
static_assert(offsetof(FEndCinemaPropertyFloatCurveSectionTemplate, FloatCurve) == 0x000038, "Member 'FEndCinemaPropertyFloatCurveSectionTemplate::FloatCurve' has a wrong offset!");
static_assert(offsetof(FEndCinemaPropertyFloatCurveSectionTemplate, BlendType) == 0x0000D8, "Member 'FEndCinemaPropertyFloatCurveSectionTemplate::BlendType' has a wrong offset!");
static_assert(offsetof(FEndCinemaPropertyFloatCurveSectionTemplate, CurveSection) == 0x0000E0, "Member 'FEndCinemaPropertyFloatCurveSectionTemplate::CurveSection' has a wrong offset!");
static_assert(offsetof(FEndCinemaPropertyFloatCurveSectionTemplate, FramePerTick) == 0x0000E8, "Member 'FEndCinemaPropertyFloatCurveSectionTemplate::FramePerTick' has a wrong offset!");

// ScriptStruct EndGame.EndCinemaLightCurveParameters
// 0x0008 (0x0008 - 0x0000)
struct FEndCinemaLightCurveParameters final
{
public:
	class FName                                   TargetPropertyName;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCinemaLightCurveParameters) == 0x000004, "Wrong alignment on FEndCinemaLightCurveParameters");
static_assert(sizeof(FEndCinemaLightCurveParameters) == 0x000008, "Wrong size on FEndCinemaLightCurveParameters");
static_assert(offsetof(FEndCinemaLightCurveParameters, TargetPropertyName) == 0x000000, "Member 'FEndCinemaLightCurveParameters::TargetPropertyName' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActionTinyBroncoSplineMoveEffectData
// 0x0034 (0x0034 - 0x0000)
struct FEndFieldActionTinyBroncoSplineMoveEffectData final
{
public:
	float                                         InputKey;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectName;                                        // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLocation;                                    // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AttachSocket;                                      // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAttach;                                     // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopDeactivateTimer;                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldActionTinyBroncoSplineMoveEffectData) == 0x000004, "Wrong alignment on FEndFieldActionTinyBroncoSplineMoveEffectData");
static_assert(sizeof(FEndFieldActionTinyBroncoSplineMoveEffectData) == 0x000034, "Wrong size on FEndFieldActionTinyBroncoSplineMoveEffectData");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveEffectData, InputKey) == 0x000000, "Member 'FEndFieldActionTinyBroncoSplineMoveEffectData::InputKey' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveEffectData, EffectName) == 0x000004, "Member 'FEndFieldActionTinyBroncoSplineMoveEffectData::EffectName' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveEffectData, OffsetLocation) == 0x00000C, "Member 'FEndFieldActionTinyBroncoSplineMoveEffectData::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveEffectData, OffsetRotation) == 0x000018, "Member 'FEndFieldActionTinyBroncoSplineMoveEffectData::OffsetRotation' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveEffectData, AttachSocket) == 0x000024, "Member 'FEndFieldActionTinyBroncoSplineMoveEffectData::AttachSocket' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveEffectData, bEnableAttach) == 0x00002C, "Member 'FEndFieldActionTinyBroncoSplineMoveEffectData::bEnableAttach' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveEffectData, LoopDeactivateTimer) == 0x000030, "Member 'FEndFieldActionTinyBroncoSplineMoveEffectData::LoopDeactivateTimer' has a wrong offset!");

// ScriptStruct EndGame.EndCliffMoveCameraModule
// 0x0020 (0x0410 - 0x03F0)
struct FEndCliffMoveCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x20];                                     // 0x03F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCliffMoveCameraModule) == 0x000008, "Wrong alignment on FEndCliffMoveCameraModule");
static_assert(sizeof(FEndCliffMoveCameraModule) == 0x000410, "Wrong size on FEndCliffMoveCameraModule");

// ScriptStruct EndGame.EndLifeSpotInputCameraModule
// 0x0060 (0x0450 - 0x03F0)
struct FEndLifeSpotInputCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x60];                                     // 0x03F0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLifeSpotInputCameraModule) == 0x000008, "Wrong alignment on FEndLifeSpotInputCameraModule");
static_assert(sizeof(FEndLifeSpotInputCameraModule) == 0x000450, "Wrong size on FEndLifeSpotInputCameraModule");

// ScriptStruct EndGame.EndCollisionDrawParams
// 0x000C (0x000C - 0x0000)
struct FEndCollisionDrawParams final
{
public:
	bool                                          bDrawShape;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawBBox;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 ShapeColor;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BBoxColor;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCollisionDrawParams) == 0x000004, "Wrong alignment on FEndCollisionDrawParams");
static_assert(sizeof(FEndCollisionDrawParams) == 0x00000C, "Wrong size on FEndCollisionDrawParams");
static_assert(offsetof(FEndCollisionDrawParams, bDrawShape) == 0x000000, "Member 'FEndCollisionDrawParams::bDrawShape' has a wrong offset!");
static_assert(offsetof(FEndCollisionDrawParams, bDrawBBox) == 0x000001, "Member 'FEndCollisionDrawParams::bDrawBBox' has a wrong offset!");
static_assert(offsetof(FEndCollisionDrawParams, ShapeColor) == 0x000004, "Member 'FEndCollisionDrawParams::ShapeColor' has a wrong offset!");
static_assert(offsetof(FEndCollisionDrawParams, BBoxColor) == 0x000008, "Member 'FEndCollisionDrawParams::BBoxColor' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleSmoothingPairParam
// 0x00A0 (0x00A0 - 0x0000)
struct FEndVehicleSmoothingPairParam final
{
public:
	struct FRuntimeFloatCurve                     RateCurve;                                         // 0x0000(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              SmoothingParamMin;                                 // 0x0088(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              SmoothingParamMax;                                 // 0x0094(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleSmoothingPairParam) == 0x000008, "Wrong alignment on FEndVehicleSmoothingPairParam");
static_assert(sizeof(FEndVehicleSmoothingPairParam) == 0x0000A0, "Wrong size on FEndVehicleSmoothingPairParam");
static_assert(offsetof(FEndVehicleSmoothingPairParam, RateCurve) == 0x000000, "Member 'FEndVehicleSmoothingPairParam::RateCurve' has a wrong offset!");
static_assert(offsetof(FEndVehicleSmoothingPairParam, SmoothingParamMin) == 0x000088, "Member 'FEndVehicleSmoothingPairParam::SmoothingParamMin' has a wrong offset!");
static_assert(offsetof(FEndVehicleSmoothingPairParam, SmoothingParamMax) == 0x000094, "Member 'FEndVehicleSmoothingPairParam::SmoothingParamMax' has a wrong offset!");

// ScriptStruct EndGame.EndCommandCameraModule
// 0x0830 (0x0C20 - 0x03F0)
struct FEndCommandCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x830];                                    // 0x03F0(0x0830)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCommandCameraModule) == 0x000008, "Wrong alignment on FEndCommandCameraModule");
static_assert(sizeof(FEndCommandCameraModule) == 0x000C20, "Wrong size on FEndCommandCameraModule");

// ScriptStruct EndGame.EndEmissiveColorDefaultOnlyMaterialSettings
// 0x0048 (0x0060 - 0x0018)
struct FEndEmissiveColorDefaultOnlyMaterialSettings final : public FEndEmissiveColorParameter
{
public:
	TArray<class FName>                           MaterialNames;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LightNames;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        Curve;                                             // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveEvaluateInLogarithmicSpace;                  // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveDuration;                            // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomOffset;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndEmissiveColorDefaultOnlyMaterialSettings) == 0x000008, "Wrong alignment on FEndEmissiveColorDefaultOnlyMaterialSettings");
static_assert(sizeof(FEndEmissiveColorDefaultOnlyMaterialSettings) == 0x000060, "Wrong size on FEndEmissiveColorDefaultOnlyMaterialSettings");
static_assert(offsetof(FEndEmissiveColorDefaultOnlyMaterialSettings, MaterialNames) == 0x000018, "Member 'FEndEmissiveColorDefaultOnlyMaterialSettings::MaterialNames' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorDefaultOnlyMaterialSettings, LayerIndex) == 0x000028, "Member 'FEndEmissiveColorDefaultOnlyMaterialSettings::LayerIndex' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorDefaultOnlyMaterialSettings, LightNames) == 0x000030, "Member 'FEndEmissiveColorDefaultOnlyMaterialSettings::LightNames' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorDefaultOnlyMaterialSettings, Curve) == 0x000040, "Member 'FEndEmissiveColorDefaultOnlyMaterialSettings::Curve' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorDefaultOnlyMaterialSettings, CurveAsset) == 0x000048, "Member 'FEndEmissiveColorDefaultOnlyMaterialSettings::CurveAsset' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorDefaultOnlyMaterialSettings, bCurveEvaluateInLogarithmicSpace) == 0x000050, "Member 'FEndEmissiveColorDefaultOnlyMaterialSettings::bCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorDefaultOnlyMaterialSettings, Duration) == 0x000054, "Member 'FEndEmissiveColorDefaultOnlyMaterialSettings::Duration' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorDefaultOnlyMaterialSettings, RandomAdditiveDuration) == 0x000058, "Member 'FEndEmissiveColorDefaultOnlyMaterialSettings::RandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorDefaultOnlyMaterialSettings, RandomOffset) == 0x00005C, "Member 'FEndEmissiveColorDefaultOnlyMaterialSettings::RandomOffset' has a wrong offset!");

// ScriptStruct EndGame.EndCoordinateAnimationPreviewSettings
// 0x0010 (0x0010 - 0x0000)
struct FEndCoordinateAnimationPreviewSettings final
{
public:
	class FName                                   OverrideId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimelineScale;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCoordinateAnimationPreviewSettings) == 0x000004, "Wrong alignment on FEndCoordinateAnimationPreviewSettings");
static_assert(sizeof(FEndCoordinateAnimationPreviewSettings) == 0x000010, "Wrong size on FEndCoordinateAnimationPreviewSettings");
static_assert(offsetof(FEndCoordinateAnimationPreviewSettings, OverrideId) == 0x000000, "Member 'FEndCoordinateAnimationPreviewSettings::OverrideId' has a wrong offset!");
static_assert(offsetof(FEndCoordinateAnimationPreviewSettings, CurveType) == 0x000008, "Member 'FEndCoordinateAnimationPreviewSettings::CurveType' has a wrong offset!");
static_assert(offsetof(FEndCoordinateAnimationPreviewSettings, bLoop) == 0x000009, "Member 'FEndCoordinateAnimationPreviewSettings::bLoop' has a wrong offset!");
static_assert(offsetof(FEndCoordinateAnimationPreviewSettings, TimelineScale) == 0x00000C, "Member 'FEndCoordinateAnimationPreviewSettings::TimelineScale' has a wrong offset!");

// ScriptStruct EndGame.EndToroccoTemplate
// 0x0000 (0x0020 - 0x0020)
struct FEndToroccoTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FEndToroccoTemplate) == 0x000008, "Wrong alignment on FEndToroccoTemplate");
static_assert(sizeof(FEndToroccoTemplate) == 0x000020, "Wrong size on FEndToroccoTemplate");

// ScriptStruct EndGame.EndCraneMiniGameCameraModule
// 0x0020 (0x0410 - 0x03F0)
struct FEndCraneMiniGameCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x20];                                     // 0x03F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCraneMiniGameCameraModule) == 0x000008, "Wrong alignment on FEndCraneMiniGameCameraModule");
static_assert(sizeof(FEndCraneMiniGameCameraModule) == 0x000410, "Wrong size on FEndCraneMiniGameCameraModule");

// ScriptStruct EndGame.EndJenovaSplineWallInstanceContext
// 0x0050 (0x0050 - 0x0000)
struct FEndJenovaSplineWallInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalRate;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseScale;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentTransform;                                  // 0x0010(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndJenovaSplineWallInstanceContext) == 0x000010, "Wrong alignment on FEndJenovaSplineWallInstanceContext");
static_assert(sizeof(FEndJenovaSplineWallInstanceContext) == 0x000050, "Wrong size on FEndJenovaSplineWallInstanceContext");
static_assert(offsetof(FEndJenovaSplineWallInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndJenovaSplineWallInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndJenovaSplineWallInstanceContext, HorizontalRate) == 0x000004, "Member 'FEndJenovaSplineWallInstanceContext::HorizontalRate' has a wrong offset!");
static_assert(offsetof(FEndJenovaSplineWallInstanceContext, BaseScale) == 0x000008, "Member 'FEndJenovaSplineWallInstanceContext::BaseScale' has a wrong offset!");
static_assert(offsetof(FEndJenovaSplineWallInstanceContext, CurrentTransform) == 0x000010, "Member 'FEndJenovaSplineWallInstanceContext::CurrentTransform' has a wrong offset!");

// ScriptStruct EndGame.EndCustomizableActionCameraModule
// 0x0090 (0x0480 - 0x03F0)
struct FEndCustomizableActionCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x90];                                     // 0x03F0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCustomizableActionCameraModule) == 0x000008, "Wrong alignment on FEndCustomizableActionCameraModule");
static_assert(sizeof(FEndCustomizableActionCameraModule) == 0x000480, "Wrong size on FEndCustomizableActionCameraModule");

// ScriptStruct EndGame.EndCutChangePartsItem
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEndCutChangePartsItem final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MeshName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshLabel;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCutChangePartsItem) == 0x000008, "Wrong alignment on FEndCutChangePartsItem");
static_assert(sizeof(FEndCutChangePartsItem) == 0x000018, "Wrong size on FEndCutChangePartsItem");
static_assert(offsetof(FEndCutChangePartsItem, MeshName) == 0x000008, "Member 'FEndCutChangePartsItem::MeshName' has a wrong offset!");
static_assert(offsetof(FEndCutChangePartsItem, MeshLabel) == 0x000010, "Member 'FEndCutChangePartsItem::MeshLabel' has a wrong offset!");

// ScriptStruct EndGame.EndMiniGameCardOperator
// 0x0018 (0x0100 - 0x00E8)
struct FEndMiniGameCardOperator final : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0x18];                                      // 0x00E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMiniGameCardOperator) == 0x000008, "Wrong alignment on FEndMiniGameCardOperator");
static_assert(sizeof(FEndMiniGameCardOperator) == 0x000100, "Wrong size on FEndMiniGameCardOperator");

// ScriptStruct EndGame.EndCutSelectWidgetItem
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FEndCutSelectWidgetItem final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChoicesLabel;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Destination;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndCutSelectWidgetOption                     Option;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LocationWork;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RankValueWork;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCutSelectWidgetItem) == 0x000008, "Wrong alignment on FEndCutSelectWidgetItem");
static_assert(sizeof(FEndCutSelectWidgetItem) == 0x000030, "Wrong size on FEndCutSelectWidgetItem");
static_assert(offsetof(FEndCutSelectWidgetItem, ChoicesLabel) == 0x000008, "Member 'FEndCutSelectWidgetItem::ChoicesLabel' has a wrong offset!");
static_assert(offsetof(FEndCutSelectWidgetItem, Destination) == 0x000010, "Member 'FEndCutSelectWidgetItem::Destination' has a wrong offset!");
static_assert(offsetof(FEndCutSelectWidgetItem, Option) == 0x000018, "Member 'FEndCutSelectWidgetItem::Option' has a wrong offset!");
static_assert(offsetof(FEndCutSelectWidgetItem, LocationWork) == 0x00001C, "Member 'FEndCutSelectWidgetItem::LocationWork' has a wrong offset!");
static_assert(offsetof(FEndCutSelectWidgetItem, Rank) == 0x000024, "Member 'FEndCutSelectWidgetItem::Rank' has a wrong offset!");
static_assert(offsetof(FEndCutSelectWidgetItem, RankValueWork) == 0x000028, "Member 'FEndCutSelectWidgetItem::RankValueWork' has a wrong offset!");

// ScriptStruct EndGame.EndCutSummonerJumpItem
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEndCutSummonerJumpItem final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Destination;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCutSummonerJumpItem) == 0x000008, "Wrong alignment on FEndCutSummonerJumpItem");
static_assert(sizeof(FEndCutSummonerJumpItem) == 0x000018, "Wrong size on FEndCutSummonerJumpItem");
static_assert(offsetof(FEndCutSummonerJumpItem, ActorName) == 0x000008, "Member 'FEndCutSummonerJumpItem::ActorName' has a wrong offset!");
static_assert(offsetof(FEndCutSummonerJumpItem, Destination) == 0x000010, "Member 'FEndCutSummonerJumpItem::Destination' has a wrong offset!");

// ScriptStruct EndGame.OptionBaseInfo
// 0x0028 (0x0028 - 0x0000)
struct FOptionBaseInfo final
{
public:
	EOptionSelectionKind                          Kind;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionCategory                               OptionCategory;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HelpText;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionBaseInfo) == 0x000008, "Wrong alignment on FOptionBaseInfo");
static_assert(sizeof(FOptionBaseInfo) == 0x000028, "Wrong size on FOptionBaseInfo");
static_assert(offsetof(FOptionBaseInfo, Kind) == 0x000000, "Member 'FOptionBaseInfo::Kind' has a wrong offset!");
static_assert(offsetof(FOptionBaseInfo, OptionCategory) == 0x000001, "Member 'FOptionBaseInfo::OptionCategory' has a wrong offset!");
static_assert(offsetof(FOptionBaseInfo, Text) == 0x000008, "Member 'FOptionBaseInfo::Text' has a wrong offset!");
static_assert(offsetof(FOptionBaseInfo, HelpText) == 0x000018, "Member 'FOptionBaseInfo::HelpText' has a wrong offset!");

// ScriptStruct EndGame.OptionRangeInfo
// 0x0010 (0x0010 - 0x0000)
struct FOptionRangeInfo final
{
public:
	int32                                         MinValue;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenFlag;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionRangeInfo) == 0x000004, "Wrong alignment on FOptionRangeInfo");
static_assert(sizeof(FOptionRangeInfo) == 0x000010, "Wrong size on FOptionRangeInfo");
static_assert(offsetof(FOptionRangeInfo, MinValue) == 0x000000, "Member 'FOptionRangeInfo::MinValue' has a wrong offset!");
static_assert(offsetof(FOptionRangeInfo, MaxValue) == 0x000004, "Member 'FOptionRangeInfo::MaxValue' has a wrong offset!");
static_assert(offsetof(FOptionRangeInfo, OpenFlag) == 0x000008, "Member 'FOptionRangeInfo::OpenFlag' has a wrong offset!");

// ScriptStruct EndGame.OptionInfo
// 0x0068 (0x0068 - 0x0000)
struct FOptionInfo final
{
public:
	struct FOptionBaseInfo                        BaseInfo;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FOptionSelectInfo                      SelectInfo;                                        // 0x0028(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FOptionRangeInfo                       RangeInfo;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionInfo) == 0x000008, "Wrong alignment on FOptionInfo");
static_assert(sizeof(FOptionInfo) == 0x000068, "Wrong size on FOptionInfo");
static_assert(offsetof(FOptionInfo, BaseInfo) == 0x000000, "Member 'FOptionInfo::BaseInfo' has a wrong offset!");
static_assert(offsetof(FOptionInfo, SelectInfo) == 0x000028, "Member 'FOptionInfo::SelectInfo' has a wrong offset!");
static_assert(offsetof(FOptionInfo, RangeInfo) == 0x000058, "Member 'FOptionInfo::RangeInfo' has a wrong offset!");

// ScriptStruct EndGame.OptionInfos
// 0x0020 (0x0020 - 0x0000)
struct FOptionInfos final
{
public:
	class FString                                 HelpText;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOptionInfo>                    Infos;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionInfos) == 0x000008, "Wrong alignment on FOptionInfos");
static_assert(sizeof(FOptionInfos) == 0x000020, "Wrong size on FOptionInfos");
static_assert(offsetof(FOptionInfos, HelpText) == 0x000000, "Member 'FOptionInfos::HelpText' has a wrong offset!");
static_assert(offsetof(FOptionInfos, Infos) == 0x000010, "Member 'FOptionInfos::Infos' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableConfig
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableConfig final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommentEN;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableConfig) == 0x000008, "Wrong alignment on FEndDataTableConfig");
static_assert(sizeof(FEndDataTableConfig) == 0x000038, "Wrong size on FEndDataTableConfig");
static_assert(offsetof(FEndDataTableConfig, Comment) == 0x000008, "Member 'FEndDataTableConfig::Comment' has a wrong offset!");
static_assert(offsetof(FEndDataTableConfig, CommentEN) == 0x000018, "Member 'FEndDataTableConfig::CommentEN' has a wrong offset!");
static_assert(offsetof(FEndDataTableConfig, Status) == 0x000028, "Member 'FEndDataTableConfig::Status' has a wrong offset!");

// ScriptStruct EndGame.EndWallModule
// 0x0130 (0x0130 - 0x0000)
struct alignas(0x10) FEndWallModule final
{
public:
	TArray<class FName>                           territoryID;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	int32                                         CM_SPACE_MAX;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EDGE_OFFSET;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PointMaxNum;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x114];                                     // 0x001C(0x0114)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndWallModule) == 0x000010, "Wrong alignment on FEndWallModule");
static_assert(sizeof(FEndWallModule) == 0x000130, "Wrong size on FEndWallModule");
static_assert(offsetof(FEndWallModule, territoryID) == 0x000000, "Member 'FEndWallModule::territoryID' has a wrong offset!");
static_assert(offsetof(FEndWallModule, CM_SPACE_MAX) == 0x000010, "Member 'FEndWallModule::CM_SPACE_MAX' has a wrong offset!");
static_assert(offsetof(FEndWallModule, EDGE_OFFSET) == 0x000014, "Member 'FEndWallModule::EDGE_OFFSET' has a wrong offset!");
static_assert(offsetof(FEndWallModule, PointMaxNum) == 0x000018, "Member 'FEndWallModule::PointMaxNum' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableDebugMessage
// 0x0078 (0x0080 - 0x0008)
struct FEndDataTableDebugMessage final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugMessageShowType                         ShowType;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            UserExpandVariables;                               // 0x0030(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableDebugMessage) == 0x000008, "Wrong alignment on FEndDataTableDebugMessage");
static_assert(sizeof(FEndDataTableDebugMessage) == 0x000080, "Wrong size on FEndDataTableDebugMessage");
static_assert(offsetof(FEndDataTableDebugMessage, Comment) == 0x000008, "Member 'FEndDataTableDebugMessage::Comment' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugMessage, ShowType) == 0x000018, "Member 'FEndDataTableDebugMessage::ShowType' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugMessage, Message) == 0x000020, "Member 'FEndDataTableDebugMessage::Message' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugMessage, UserExpandVariables) == 0x000030, "Member 'FEndDataTableDebugMessage::UserExpandVariables' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerConflictEmissiveContext
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndFeelerConflictEmissiveContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerConflictEmissiveContext) == 0x000008, "Wrong alignment on FEndFeelerConflictEmissiveContext");
static_assert(sizeof(FEndFeelerConflictEmissiveContext) == 0x000020, "Wrong size on FEndFeelerConflictEmissiveContext");

// ScriptStruct EndGame.EndDebugCameraOperator
// 0x0008 (0x00F0 - 0x00E8)
struct FEndDebugCameraOperator final : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDebugCameraOperator) == 0x000008, "Wrong alignment on FEndDebugCameraOperator");
static_assert(sizeof(FEndDebugCameraOperator) == 0x0000F0, "Wrong size on FEndDebugCameraOperator");

// ScriptStruct EndGame.EndDebugCameraOperatorCommandShortcutKeys
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEndDebugCameraOperatorCommandShortcutKeys final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDebugCameraOperatorCommandShortcutKeys) == 0x000008, "Wrong alignment on FEndDebugCameraOperatorCommandShortcutKeys");
static_assert(sizeof(FEndDebugCameraOperatorCommandShortcutKeys) == 0x000010, "Wrong size on FEndDebugCameraOperatorCommandShortcutKeys");

// ScriptStruct EndGame.EndSoundHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEndSoundHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSoundHandle) == 0x000008, "Wrong alignment on FEndSoundHandle");
static_assert(sizeof(FEndSoundHandle) == 0x000010, "Wrong size on FEndSoundHandle");

// ScriptStruct EndGame.EndDeformAnimationSettings
// 0x0098 (0x0098 - 0x0000)
struct FEndDeformAnimationSettings final
{
public:
	int32                                         NumberOfContext;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfKey;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayLoopAnimationOnSpawn;                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LoopAnimationStartFrameRange;                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePhysicsAssetBounds;                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OptionalBoundsScale;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StartMesh;                                         // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             DeformMesh;                                        // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             EndMesh;                                           // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDeformAnimationSettings) == 0x000008, "Wrong alignment on FEndDeformAnimationSettings");
static_assert(sizeof(FEndDeformAnimationSettings) == 0x000098, "Wrong size on FEndDeformAnimationSettings");
static_assert(offsetof(FEndDeformAnimationSettings, NumberOfContext) == 0x000000, "Member 'FEndDeformAnimationSettings::NumberOfContext' has a wrong offset!");
static_assert(offsetof(FEndDeformAnimationSettings, NumberOfKey) == 0x000004, "Member 'FEndDeformAnimationSettings::NumberOfKey' has a wrong offset!");
static_assert(offsetof(FEndDeformAnimationSettings, PlayRate) == 0x000008, "Member 'FEndDeformAnimationSettings::PlayRate' has a wrong offset!");
static_assert(offsetof(FEndDeformAnimationSettings, bPlayLoopAnimationOnSpawn) == 0x00000C, "Member 'FEndDeformAnimationSettings::bPlayLoopAnimationOnSpawn' has a wrong offset!");
static_assert(offsetof(FEndDeformAnimationSettings, LoopAnimationStartFrameRange) == 0x000010, "Member 'FEndDeformAnimationSettings::LoopAnimationStartFrameRange' has a wrong offset!");
static_assert(offsetof(FEndDeformAnimationSettings, bUsePhysicsAssetBounds) == 0x000018, "Member 'FEndDeformAnimationSettings::bUsePhysicsAssetBounds' has a wrong offset!");
static_assert(offsetof(FEndDeformAnimationSettings, OptionalBoundsScale) == 0x00001C, "Member 'FEndDeformAnimationSettings::OptionalBoundsScale' has a wrong offset!");
static_assert(offsetof(FEndDeformAnimationSettings, StartMesh) == 0x000020, "Member 'FEndDeformAnimationSettings::StartMesh' has a wrong offset!");
static_assert(offsetof(FEndDeformAnimationSettings, DeformMesh) == 0x000048, "Member 'FEndDeformAnimationSettings::DeformMesh' has a wrong offset!");
static_assert(offsetof(FEndDeformAnimationSettings, EndMesh) == 0x000070, "Member 'FEndDeformAnimationSettings::EndMesh' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueCameraOperator
// 0x00F8 (0x01E0 - 0x00E8)
struct FEndDialogueCameraOperator final : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0xF8];                                      // 0x00E8(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueCameraOperator) == 0x000008, "Wrong alignment on FEndDialogueCameraOperator");
static_assert(sizeof(FEndDialogueCameraOperator) == 0x0001E0, "Wrong size on FEndDialogueCameraOperator");

// ScriptStruct EndGame.EndItemDropSetting
// 0x000C (0x000C - 0x0000)
struct FEndItemDropSetting final
{
public:
	class FName                                   MakoStoneDamageSourceOwnerName;                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableMakoStoneEffect;                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndItemDropSetting) == 0x000004, "Wrong alignment on FEndItemDropSetting");
static_assert(sizeof(FEndItemDropSetting) == 0x00000C, "Wrong size on FEndItemDropSetting");
static_assert(offsetof(FEndItemDropSetting, MakoStoneDamageSourceOwnerName) == 0x000000, "Member 'FEndItemDropSetting::MakoStoneDamageSourceOwnerName' has a wrong offset!");
static_assert(offsetof(FEndItemDropSetting, bDisableMakoStoneEffect) == 0x000008, "Member 'FEndItemDropSetting::bDisableMakoStoneEffect' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueConstraintSectionTemplate
// 0x0038 (0x0058 - 0x0020)
struct FEndDialogueConstraintSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneObjectBindingID             Binding;                                           // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OwnerBindName;                                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParentBindName;                                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SocketName;                                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EWeaponSlot                                   Slot;                                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueConstraintSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueConstraintSectionTemplate");
static_assert(sizeof(FEndDialogueConstraintSectionTemplate) == 0x000058, "Wrong size on FEndDialogueConstraintSectionTemplate");
static_assert(offsetof(FEndDialogueConstraintSectionTemplate, Binding) == 0x000020, "Member 'FEndDialogueConstraintSectionTemplate::Binding' has a wrong offset!");
static_assert(offsetof(FEndDialogueConstraintSectionTemplate, OwnerBindName) == 0x000038, "Member 'FEndDialogueConstraintSectionTemplate::OwnerBindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueConstraintSectionTemplate, ParentBindName) == 0x000040, "Member 'FEndDialogueConstraintSectionTemplate::ParentBindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueConstraintSectionTemplate, SocketName) == 0x000048, "Member 'FEndDialogueConstraintSectionTemplate::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDialogueConstraintSectionTemplate, Slot) == 0x000050, "Member 'FEndDialogueConstraintSectionTemplate::Slot' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueEffectSectionTemplate
// 0x0030 (0x0050 - 0x0020)
struct FEndDialogueEffectSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	class FName                                   OwnerBindName;                                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFXSystemAsset*                         Template;                                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AttachSocketName;                                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                LocationOffset;                                    // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               RotationOffset;                                    // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDialogueEffectSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueEffectSectionTemplate");
static_assert(sizeof(FEndDialogueEffectSectionTemplate) == 0x000050, "Wrong size on FEndDialogueEffectSectionTemplate");
static_assert(offsetof(FEndDialogueEffectSectionTemplate, OwnerBindName) == 0x000020, "Member 'FEndDialogueEffectSectionTemplate::OwnerBindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueEffectSectionTemplate, Template) == 0x000028, "Member 'FEndDialogueEffectSectionTemplate::Template' has a wrong offset!");
static_assert(offsetof(FEndDialogueEffectSectionTemplate, AttachSocketName) == 0x000030, "Member 'FEndDialogueEffectSectionTemplate::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndDialogueEffectSectionTemplate, LocationOffset) == 0x000038, "Member 'FEndDialogueEffectSectionTemplate::LocationOffset' has a wrong offset!");
static_assert(offsetof(FEndDialogueEffectSectionTemplate, RotationOffset) == 0x000044, "Member 'FEndDialogueEffectSectionTemplate::RotationOffset' has a wrong offset!");

// ScriptStruct EndGame.EndStatusMenuHPColors
// 0x0020 (0x0020 - 0x0000)
struct FEndStatusMenuHPColors final
{
public:
	struct FLinearColor                           ChildColor;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParentColor;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndStatusMenuHPColors) == 0x000004, "Wrong alignment on FEndStatusMenuHPColors");
static_assert(sizeof(FEndStatusMenuHPColors) == 0x000020, "Wrong size on FEndStatusMenuHPColors");
static_assert(offsetof(FEndStatusMenuHPColors, ChildColor) == 0x000000, "Member 'FEndStatusMenuHPColors::ChildColor' has a wrong offset!");
static_assert(offsetof(FEndStatusMenuHPColors, ParentColor) == 0x000010, "Member 'FEndStatusMenuHPColors::ParentColor' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerTornadeInstanceContext
// 0x00D0 (0x00D0 - 0x0000)
struct FEndFeelerTornadeInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerTornadeTimeRateAndSize       Horizontal;                                        // 0x0004(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VerticalHeightOffset;                              // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerTornadeTimeRateAndSize       PrimaryVertical;                                   // 0x0014(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerTornadeTimeRateAndSize       SecondaryVertical;                                 // 0x0020(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerTornadeTimeRateAndSize       PrimaryRoll;                                       // 0x002C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerTornadeTimeRateAndSize       SecondaryRoll;                                     // 0x0038(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetExtrusionDistance;                           // 0x0044(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentExtrusionDistance;                          // 0x0048(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtrusionWaitTimer;                                // 0x004C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             CurrentTransform;                                  // 0x0050(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ComponentToWorld;                                  // 0x0080(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x00B0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstancedStaticMeshComponentIndex;                 // 0x00B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstancedStaticMeshInstanceIndex;                  // 0x00BC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x00C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0xF];                                       // 0x00C1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerTornadeInstanceContext) == 0x000010, "Wrong alignment on FEndFeelerTornadeInstanceContext");
static_assert(sizeof(FEndFeelerTornadeInstanceContext) == 0x0000D0, "Wrong size on FEndFeelerTornadeInstanceContext");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndFeelerTornadeInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, Horizontal) == 0x000004, "Member 'FEndFeelerTornadeInstanceContext::Horizontal' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, VerticalHeightOffset) == 0x000010, "Member 'FEndFeelerTornadeInstanceContext::VerticalHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, PrimaryVertical) == 0x000014, "Member 'FEndFeelerTornadeInstanceContext::PrimaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, SecondaryVertical) == 0x000020, "Member 'FEndFeelerTornadeInstanceContext::SecondaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, PrimaryRoll) == 0x00002C, "Member 'FEndFeelerTornadeInstanceContext::PrimaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, SecondaryRoll) == 0x000038, "Member 'FEndFeelerTornadeInstanceContext::SecondaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, TargetExtrusionDistance) == 0x000044, "Member 'FEndFeelerTornadeInstanceContext::TargetExtrusionDistance' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, CurrentExtrusionDistance) == 0x000048, "Member 'FEndFeelerTornadeInstanceContext::CurrentExtrusionDistance' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, ExtrusionWaitTimer) == 0x00004C, "Member 'FEndFeelerTornadeInstanceContext::ExtrusionWaitTimer' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, CurrentTransform) == 0x000050, "Member 'FEndFeelerTornadeInstanceContext::CurrentTransform' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, ComponentToWorld) == 0x000080, "Member 'FEndFeelerTornadeInstanceContext::ComponentToWorld' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, SkeletalMeshComponent) == 0x0000B0, "Member 'FEndFeelerTornadeInstanceContext::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, InstancedStaticMeshComponentIndex) == 0x0000B8, "Member 'FEndFeelerTornadeInstanceContext::InstancedStaticMeshComponentIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, InstancedStaticMeshInstanceIndex) == 0x0000BC, "Member 'FEndFeelerTornadeInstanceContext::InstancedStaticMeshInstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerTornadeInstanceContext, bVisibility) == 0x0000C0, "Member 'FEndFeelerTornadeInstanceContext::bVisibility' has a wrong offset!");

// ScriptStruct EndGame.EndEnvironmentPhysImpulseParam
// 0x003C (0x003C - 0x0000)
struct FEndEnvironmentPhysImpulseParam final
{
public:
	bool                                          bIsRadialImpulse;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1F];                                       // 0x0001(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERadialImpulseFalloff                         Falloff;                                           // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Magnitude;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelChange;                                        // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMakeShrapnelDestroyPhysics;                       // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0xE];                                       // 0x002E(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndEnvironmentPhysImpulseParam) == 0x000004, "Wrong alignment on FEndEnvironmentPhysImpulseParam");
static_assert(sizeof(FEndEnvironmentPhysImpulseParam) == 0x00003C, "Wrong size on FEndEnvironmentPhysImpulseParam");
static_assert(offsetof(FEndEnvironmentPhysImpulseParam, bIsRadialImpulse) == 0x000000, "Member 'FEndEnvironmentPhysImpulseParam::bIsRadialImpulse' has a wrong offset!");
static_assert(offsetof(FEndEnvironmentPhysImpulseParam, Radius) == 0x000020, "Member 'FEndEnvironmentPhysImpulseParam::Radius' has a wrong offset!");
static_assert(offsetof(FEndEnvironmentPhysImpulseParam, Falloff) == 0x000024, "Member 'FEndEnvironmentPhysImpulseParam::Falloff' has a wrong offset!");
static_assert(offsetof(FEndEnvironmentPhysImpulseParam, Magnitude) == 0x000028, "Member 'FEndEnvironmentPhysImpulseParam::Magnitude' has a wrong offset!");
static_assert(offsetof(FEndEnvironmentPhysImpulseParam, bVelChange) == 0x00002C, "Member 'FEndEnvironmentPhysImpulseParam::bVelChange' has a wrong offset!");
static_assert(offsetof(FEndEnvironmentPhysImpulseParam, bMakeShrapnelDestroyPhysics) == 0x00002D, "Member 'FEndEnvironmentPhysImpulseParam::bMakeShrapnelDestroyPhysics' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleAttackParam
// 0x0040 (0x0040 - 0x0000)
struct FEndWheeledVehicleAttackParam final
{
public:
	float                                         EnablePhysicsBreakSpeedKph;                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndEnvironmentPhysImpulseParam        ImpulseParam;                                      // 0x0004(0x003C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleAttackParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleAttackParam");
static_assert(sizeof(FEndWheeledVehicleAttackParam) == 0x000040, "Wrong size on FEndWheeledVehicleAttackParam");
static_assert(offsetof(FEndWheeledVehicleAttackParam, EnablePhysicsBreakSpeedKph) == 0x000000, "Member 'FEndWheeledVehicleAttackParam::EnablePhysicsBreakSpeedKph' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleAttackParam, ImpulseParam) == 0x000004, "Member 'FEndWheeledVehicleAttackParam::ImpulseParam' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerBarrierDeformContext
// 0x0014 (0x0014 - 0x0000)
struct FEndFeelerBarrierDeformContext final
{
public:
	float                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x10];                                       // 0x0004(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerBarrierDeformContext) == 0x000004, "Wrong alignment on FEndFeelerBarrierDeformContext");
static_assert(sizeof(FEndFeelerBarrierDeformContext) == 0x000014, "Wrong size on FEndFeelerBarrierDeformContext");
static_assert(offsetof(FEndFeelerBarrierDeformContext, StartFrame) == 0x000000, "Member 'FEndFeelerBarrierDeformContext::StartFrame' has a wrong offset!");

// ScriptStruct EndGame.EndFieldNiblCrawlMoveSetting
// 0x0018 (0x0018 - 0x0000)
struct FEndFieldNiblCrawlMoveSetting final
{
public:
	TArray<struct FEndFieldNiblCrawlMoveAnimUnit> AnimationUnits;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsLoop;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsKeep;                                   // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldNiblCrawlMoveSetting) == 0x000008, "Wrong alignment on FEndFieldNiblCrawlMoveSetting");
static_assert(sizeof(FEndFieldNiblCrawlMoveSetting) == 0x000018, "Wrong size on FEndFieldNiblCrawlMoveSetting");
static_assert(offsetof(FEndFieldNiblCrawlMoveSetting, AnimationUnits) == 0x000000, "Member 'FEndFieldNiblCrawlMoveSetting::AnimationUnits' has a wrong offset!");
static_assert(offsetof(FEndFieldNiblCrawlMoveSetting, bLastAnimIsLoop) == 0x000010, "Member 'FEndFieldNiblCrawlMoveSetting::bLastAnimIsLoop' has a wrong offset!");
static_assert(offsetof(FEndFieldNiblCrawlMoveSetting, bLastAnimIsKeep) == 0x000011, "Member 'FEndFieldNiblCrawlMoveSetting::bLastAnimIsKeep' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueLookAtSectionTemplate
// 0x0040 (0x0060 - 0x0020)
struct FEndDialogueLookAtSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneObjectBindingID             Binding;                                           // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OwnerBindName;                                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TargetBindName;                                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnabled;                                          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeedScale;                                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlendInTime;                                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlendWeight;                                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bNextFrameRevaluation;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueLookAtSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueLookAtSectionTemplate");
static_assert(sizeof(FEndDialogueLookAtSectionTemplate) == 0x000060, "Wrong size on FEndDialogueLookAtSectionTemplate");
static_assert(offsetof(FEndDialogueLookAtSectionTemplate, Binding) == 0x000020, "Member 'FEndDialogueLookAtSectionTemplate::Binding' has a wrong offset!");
static_assert(offsetof(FEndDialogueLookAtSectionTemplate, OwnerBindName) == 0x000038, "Member 'FEndDialogueLookAtSectionTemplate::OwnerBindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueLookAtSectionTemplate, TargetBindName) == 0x000040, "Member 'FEndDialogueLookAtSectionTemplate::TargetBindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueLookAtSectionTemplate, bEnabled) == 0x000048, "Member 'FEndDialogueLookAtSectionTemplate::bEnabled' has a wrong offset!");
static_assert(offsetof(FEndDialogueLookAtSectionTemplate, InterpSpeedScale) == 0x00004C, "Member 'FEndDialogueLookAtSectionTemplate::InterpSpeedScale' has a wrong offset!");
static_assert(offsetof(FEndDialogueLookAtSectionTemplate, BlendInTime) == 0x000050, "Member 'FEndDialogueLookAtSectionTemplate::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueLookAtSectionTemplate, BlendWeight) == 0x000054, "Member 'FEndDialogueLookAtSectionTemplate::BlendWeight' has a wrong offset!");
static_assert(offsetof(FEndDialogueLookAtSectionTemplate, bNextFrameRevaluation) == 0x000058, "Member 'FEndDialogueLookAtSectionTemplate::bNextFrameRevaluation' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueLoopAnimationSectionTemplate
// 0x0040 (0x0060 - 0x0020)
struct FEndDialogueLoopAnimationSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneObjectBindingID             Binding;                                           // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OwnerBindName;                                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimSequenceBase*                      ResetToIdleAnimSequence;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlendTime;                                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RangeLower;                                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RangeUpper;                                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueLoopAnimationSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueLoopAnimationSectionTemplate");
static_assert(sizeof(FEndDialogueLoopAnimationSectionTemplate) == 0x000060, "Wrong size on FEndDialogueLoopAnimationSectionTemplate");
static_assert(offsetof(FEndDialogueLoopAnimationSectionTemplate, Binding) == 0x000020, "Member 'FEndDialogueLoopAnimationSectionTemplate::Binding' has a wrong offset!");
static_assert(offsetof(FEndDialogueLoopAnimationSectionTemplate, OwnerBindName) == 0x000038, "Member 'FEndDialogueLoopAnimationSectionTemplate::OwnerBindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueLoopAnimationSectionTemplate, AnimSequence) == 0x000040, "Member 'FEndDialogueLoopAnimationSectionTemplate::AnimSequence' has a wrong offset!");
static_assert(offsetof(FEndDialogueLoopAnimationSectionTemplate, ResetToIdleAnimSequence) == 0x000048, "Member 'FEndDialogueLoopAnimationSectionTemplate::ResetToIdleAnimSequence' has a wrong offset!");
static_assert(offsetof(FEndDialogueLoopAnimationSectionTemplate, BlendTime) == 0x000050, "Member 'FEndDialogueLoopAnimationSectionTemplate::BlendTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueLoopAnimationSectionTemplate, RangeLower) == 0x000054, "Member 'FEndDialogueLoopAnimationSectionTemplate::RangeLower' has a wrong offset!");
static_assert(offsetof(FEndDialogueLoopAnimationSectionTemplate, RangeUpper) == 0x000058, "Member 'FEndDialogueLoopAnimationSectionTemplate::RangeUpper' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueOneShotAnimationSectionTemplate
// 0x0048 (0x0068 - 0x0020)
struct FEndDialogueOneShotAnimationSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneObjectBindingID             Binding;                                           // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   OwnerBindName;                                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlendTime;                                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartTime;                                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimSequenceBase*                      UpperBodyAnimSequence;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UpperBodyBlendTime;                                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UpperBodyDelayTime;                                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RangeLower;                                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RangeUpper;                                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDialogueOneShotAnimationSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueOneShotAnimationSectionTemplate");
static_assert(sizeof(FEndDialogueOneShotAnimationSectionTemplate) == 0x000068, "Wrong size on FEndDialogueOneShotAnimationSectionTemplate");
static_assert(offsetof(FEndDialogueOneShotAnimationSectionTemplate, Binding) == 0x000020, "Member 'FEndDialogueOneShotAnimationSectionTemplate::Binding' has a wrong offset!");
static_assert(offsetof(FEndDialogueOneShotAnimationSectionTemplate, OwnerBindName) == 0x000038, "Member 'FEndDialogueOneShotAnimationSectionTemplate::OwnerBindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueOneShotAnimationSectionTemplate, AnimSequence) == 0x000040, "Member 'FEndDialogueOneShotAnimationSectionTemplate::AnimSequence' has a wrong offset!");
static_assert(offsetof(FEndDialogueOneShotAnimationSectionTemplate, BlendTime) == 0x000048, "Member 'FEndDialogueOneShotAnimationSectionTemplate::BlendTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueOneShotAnimationSectionTemplate, StartTime) == 0x00004C, "Member 'FEndDialogueOneShotAnimationSectionTemplate::StartTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueOneShotAnimationSectionTemplate, UpperBodyAnimSequence) == 0x000050, "Member 'FEndDialogueOneShotAnimationSectionTemplate::UpperBodyAnimSequence' has a wrong offset!");
static_assert(offsetof(FEndDialogueOneShotAnimationSectionTemplate, UpperBodyBlendTime) == 0x000058, "Member 'FEndDialogueOneShotAnimationSectionTemplate::UpperBodyBlendTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueOneShotAnimationSectionTemplate, UpperBodyDelayTime) == 0x00005C, "Member 'FEndDialogueOneShotAnimationSectionTemplate::UpperBodyDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueOneShotAnimationSectionTemplate, RangeLower) == 0x000060, "Member 'FEndDialogueOneShotAnimationSectionTemplate::RangeLower' has a wrong offset!");
static_assert(offsetof(FEndDialogueOneShotAnimationSectionTemplate, RangeUpper) == 0x000064, "Member 'FEndDialogueOneShotAnimationSectionTemplate::RangeUpper' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueOptionalVoiceSectionTemplate
// 0x0000 (0x0020 - 0x0020)
struct FEndDialogueOptionalVoiceSectionTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FEndDialogueOptionalVoiceSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueOptionalVoiceSectionTemplate");
static_assert(sizeof(FEndDialogueOptionalVoiceSectionTemplate) == 0x000020, "Wrong size on FEndDialogueOptionalVoiceSectionTemplate");

// ScriptStruct EndGame.EndMobPrefabTimeLinkAnimationSlaveSettings
// 0x0020 (0x0020 - 0x0000)
struct FEndMobPrefabTimeLinkAnimationSlaveSettings final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMobPrefabTimeLinkAnimationSlaveSettings) == 0x000004, "Wrong alignment on FEndMobPrefabTimeLinkAnimationSlaveSettings");
static_assert(sizeof(FEndMobPrefabTimeLinkAnimationSlaveSettings) == 0x000020, "Wrong size on FEndMobPrefabTimeLinkAnimationSlaveSettings");
static_assert(offsetof(FEndMobPrefabTimeLinkAnimationSlaveSettings, MobId) == 0x000000, "Member 'FEndMobPrefabTimeLinkAnimationSlaveSettings::MobId' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabTimeLinkAnimationSlaveSettings, Motion) == 0x000008, "Member 'FEndMobPrefabTimeLinkAnimationSlaveSettings::Motion' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabTimeLinkAnimationSlaveSettings, ReplaceBaseMotion) == 0x000010, "Member 'FEndMobPrefabTimeLinkAnimationSlaveSettings::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabTimeLinkAnimationSlaveSettings, ReplaceBaseLookAtTarget) == 0x000018, "Member 'FEndMobPrefabTimeLinkAnimationSlaveSettings::ReplaceBaseLookAtTarget' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueSequenceAdditionalAsset
// 0x0050 (0x0050 - 0x0000)
struct FEndDialogueSequenceAdditionalAsset final
{
public:
	TMap<class FName, class UObject*>             Assets;                                            // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueSequenceAdditionalAsset) == 0x000008, "Wrong alignment on FEndDialogueSequenceAdditionalAsset");
static_assert(sizeof(FEndDialogueSequenceAdditionalAsset) == 0x000050, "Wrong size on FEndDialogueSequenceAdditionalAsset");
static_assert(offsetof(FEndDialogueSequenceAdditionalAsset, Assets) == 0x000000, "Member 'FEndDialogueSequenceAdditionalAsset::Assets' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueSequenceInitialCommand
// 0x0030 (0x0030 - 0x0000)
struct FEndDialogueSequenceInitialCommand final
{
public:
	class FName                                   GenerateId;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommandType;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         StringArguments;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntegerArguments;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueSequenceInitialCommand) == 0x000008, "Wrong alignment on FEndDialogueSequenceInitialCommand");
static_assert(sizeof(FEndDialogueSequenceInitialCommand) == 0x000030, "Wrong size on FEndDialogueSequenceInitialCommand");
static_assert(offsetof(FEndDialogueSequenceInitialCommand, GenerateId) == 0x000000, "Member 'FEndDialogueSequenceInitialCommand::GenerateId' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceInitialCommand, CommandType) == 0x000008, "Member 'FEndDialogueSequenceInitialCommand::CommandType' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceInitialCommand, StringArguments) == 0x000010, "Member 'FEndDialogueSequenceInitialCommand::StringArguments' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceInitialCommand, IntegerArguments) == 0x000020, "Member 'FEndDialogueSequenceInitialCommand::IntegerArguments' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueSequenceShotSetting
// 0x0050 (0x0050 - 0x0000)
struct FEndDialogueSequenceShotSetting final
{
public:
	TArray<class FName>                           GenerateIds;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLoopShot;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndShot;                                          // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableShotSkip;                                   // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableShotSkipOnSkipCinema;                      // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnbindCamera;                                     // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraShake;                                // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FocusCharacterName;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCameraInCharacterNames;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CameraInCharacterNames;                            // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NoFitGroundCharacterNames;                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ShotAssetName;                                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueSequenceShotSetting) == 0x000008, "Wrong alignment on FEndDialogueSequenceShotSetting");
static_assert(sizeof(FEndDialogueSequenceShotSetting) == 0x000050, "Wrong size on FEndDialogueSequenceShotSetting");
static_assert(offsetof(FEndDialogueSequenceShotSetting, GenerateIds) == 0x000000, "Member 'FEndDialogueSequenceShotSetting::GenerateIds' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, bLoopShot) == 0x000010, "Member 'FEndDialogueSequenceShotSetting::bLoopShot' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, bEndShot) == 0x000011, "Member 'FEndDialogueSequenceShotSetting::bEndShot' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, bEnableShotSkip) == 0x000012, "Member 'FEndDialogueSequenceShotSetting::bEnableShotSkip' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, bDisableShotSkipOnSkipCinema) == 0x000013, "Member 'FEndDialogueSequenceShotSetting::bDisableShotSkipOnSkipCinema' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, bUnbindCamera) == 0x000014, "Member 'FEndDialogueSequenceShotSetting::bUnbindCamera' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, bEnableCameraShake) == 0x000015, "Member 'FEndDialogueSequenceShotSetting::bEnableCameraShake' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, FocusCharacterName) == 0x000018, "Member 'FEndDialogueSequenceShotSetting::FocusCharacterName' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, bOverrideCameraInCharacterNames) == 0x000020, "Member 'FEndDialogueSequenceShotSetting::bOverrideCameraInCharacterNames' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, CameraInCharacterNames) == 0x000028, "Member 'FEndDialogueSequenceShotSetting::CameraInCharacterNames' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, NoFitGroundCharacterNames) == 0x000038, "Member 'FEndDialogueSequenceShotSetting::NoFitGroundCharacterNames' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceShotSetting, ShotAssetName) == 0x000048, "Member 'FEndDialogueSequenceShotSetting::ShotAssetName' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueSequenceBlendOutSetting
// 0x000C (0x000C - 0x0000)
struct FEndDialogueSequenceBlendOutSetting final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendStartTime;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetFieldCameraDirection;                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueSequenceBlendOutSetting) == 0x000004, "Wrong alignment on FEndDialogueSequenceBlendOutSetting");
static_assert(sizeof(FEndDialogueSequenceBlendOutSetting) == 0x00000C, "Wrong size on FEndDialogueSequenceBlendOutSetting");
static_assert(offsetof(FEndDialogueSequenceBlendOutSetting, BlendTime) == 0x000000, "Member 'FEndDialogueSequenceBlendOutSetting::BlendTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceBlendOutSetting, BlendStartTime) == 0x000004, "Member 'FEndDialogueSequenceBlendOutSetting::BlendStartTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceBlendOutSetting, BlendOption) == 0x000008, "Member 'FEndDialogueSequenceBlendOutSetting::BlendOption' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceBlendOutSetting, bSetFieldCameraDirection) == 0x000009, "Member 'FEndDialogueSequenceBlendOutSetting::bSetFieldCameraDirection' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActionDamageReciveInfo
// 0x0030 (0x0030 - 0x0000)
struct FEndFieldActionDamageReciveInfo final
{
public:
	class FName                                   HitTriggerName;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OnlyReciveDamageSourceIdArray;                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OnlyReciveAttackerActorNameArray;                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ActiveControlByStoryFlag;                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldActionDamageReciveInfo) == 0x000008, "Wrong alignment on FEndFieldActionDamageReciveInfo");
static_assert(sizeof(FEndFieldActionDamageReciveInfo) == 0x000030, "Wrong size on FEndFieldActionDamageReciveInfo");
static_assert(offsetof(FEndFieldActionDamageReciveInfo, HitTriggerName) == 0x000000, "Member 'FEndFieldActionDamageReciveInfo::HitTriggerName' has a wrong offset!");
static_assert(offsetof(FEndFieldActionDamageReciveInfo, OnlyReciveDamageSourceIdArray) == 0x000008, "Member 'FEndFieldActionDamageReciveInfo::OnlyReciveDamageSourceIdArray' has a wrong offset!");
static_assert(offsetof(FEndFieldActionDamageReciveInfo, OnlyReciveAttackerActorNameArray) == 0x000018, "Member 'FEndFieldActionDamageReciveInfo::OnlyReciveAttackerActorNameArray' has a wrong offset!");
static_assert(offsetof(FEndFieldActionDamageReciveInfo, ActiveControlByStoryFlag) == 0x000028, "Member 'FEndFieldActionDamageReciveInfo::ActiveControlByStoryFlag' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueSequenceBlendInSetting
// 0x0014 (0x0014 - 0x0000)
struct FEndDialogueSequenceBlendInSetting final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendingWaitTime;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CharacterSmoothingBlendTime;                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             CharacterSmoothingBlendOption;                     // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueSequenceBlendInSetting) == 0x000004, "Wrong alignment on FEndDialogueSequenceBlendInSetting");
static_assert(sizeof(FEndDialogueSequenceBlendInSetting) == 0x000014, "Wrong size on FEndDialogueSequenceBlendInSetting");
static_assert(offsetof(FEndDialogueSequenceBlendInSetting, BlendTime) == 0x000000, "Member 'FEndDialogueSequenceBlendInSetting::BlendTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceBlendInSetting, BlendingWaitTime) == 0x000004, "Member 'FEndDialogueSequenceBlendInSetting::BlendingWaitTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceBlendInSetting, BlendOption) == 0x000008, "Member 'FEndDialogueSequenceBlendInSetting::BlendOption' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceBlendInSetting, CharacterSmoothingBlendTime) == 0x00000C, "Member 'FEndDialogueSequenceBlendInSetting::CharacterSmoothingBlendTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceBlendInSetting, CharacterSmoothingBlendOption) == 0x000010, "Member 'FEndDialogueSequenceBlendInSetting::CharacterSmoothingBlendOption' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueSequenceRow
// 0x0028 (0x0028 - 0x0000)
struct FEndDialogueSequenceRow final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSubtitleTime;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeAfterVoice;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextId;                                            // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutputType;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CanSkip;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceType;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundID;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDialogueSequenceRow) == 0x000004, "Wrong alignment on FEndDialogueSequenceRow");
static_assert(sizeof(FEndDialogueSequenceRow) == 0x000028, "Wrong size on FEndDialogueSequenceRow");
static_assert(offsetof(FEndDialogueSequenceRow, Time) == 0x000000, "Member 'FEndDialogueSequenceRow::Time' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceRow, MinSubtitleTime) == 0x000004, "Member 'FEndDialogueSequenceRow::MinSubtitleTime' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceRow, TimeAfterVoice) == 0x000008, "Member 'FEndDialogueSequenceRow::TimeAfterVoice' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceRow, TextId) == 0x00000C, "Member 'FEndDialogueSequenceRow::TextId' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceRow, OutputType) == 0x000014, "Member 'FEndDialogueSequenceRow::OutputType' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceRow, CanSkip) == 0x000018, "Member 'FEndDialogueSequenceRow::CanSkip' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceRow, VoiceType) == 0x00001C, "Member 'FEndDialogueSequenceRow::VoiceType' has a wrong offset!");
static_assert(offsetof(FEndDialogueSequenceRow, SoundID) == 0x000020, "Member 'FEndDialogueSequenceRow::SoundID' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueShotSkipSectionTemplate
// 0x0000 (0x0020 - 0x0020)
struct FEndDialogueShotSkipSectionTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FEndDialogueShotSkipSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueShotSkipSectionTemplate");
static_assert(sizeof(FEndDialogueShotSkipSectionTemplate) == 0x000020, "Wrong size on FEndDialogueShotSkipSectionTemplate");

// ScriptStruct EndGame.EndDialogueSoundSectionTemplate
// 0x0020 (0x0040 - 0x0020)
struct FEndDialogueSoundSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	class FName                                   OwnerBindName;                                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USQEXSEADSound*                         Sound;                                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Label;                                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundAttenuation*                      Attenuation;                                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEndDialogueSoundSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueSoundSectionTemplate");
static_assert(sizeof(FEndDialogueSoundSectionTemplate) == 0x000040, "Wrong size on FEndDialogueSoundSectionTemplate");
static_assert(offsetof(FEndDialogueSoundSectionTemplate, OwnerBindName) == 0x000020, "Member 'FEndDialogueSoundSectionTemplate::OwnerBindName' has a wrong offset!");
static_assert(offsetof(FEndDialogueSoundSectionTemplate, Sound) == 0x000028, "Member 'FEndDialogueSoundSectionTemplate::Sound' has a wrong offset!");
static_assert(offsetof(FEndDialogueSoundSectionTemplate, Label) == 0x000030, "Member 'FEndDialogueSoundSectionTemplate::Label' has a wrong offset!");
static_assert(offsetof(FEndDialogueSoundSectionTemplate, Attenuation) == 0x000038, "Member 'FEndDialogueSoundSectionTemplate::Attenuation' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueSoundVolumeSectionTemplate
// 0x0018 (0x0038 - 0x0020)
struct FEndDialogueSoundVolumeSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	class FName                                   CategoryName;                                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Volume;                                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FadeStart;                                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FadeEnd;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDialogueSoundVolumeSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueSoundVolumeSectionTemplate");
static_assert(sizeof(FEndDialogueSoundVolumeSectionTemplate) == 0x000038, "Wrong size on FEndDialogueSoundVolumeSectionTemplate");
static_assert(offsetof(FEndDialogueSoundVolumeSectionTemplate, CategoryName) == 0x000020, "Member 'FEndDialogueSoundVolumeSectionTemplate::CategoryName' has a wrong offset!");
static_assert(offsetof(FEndDialogueSoundVolumeSectionTemplate, Volume) == 0x000028, "Member 'FEndDialogueSoundVolumeSectionTemplate::Volume' has a wrong offset!");
static_assert(offsetof(FEndDialogueSoundVolumeSectionTemplate, FadeStart) == 0x00002C, "Member 'FEndDialogueSoundVolumeSectionTemplate::FadeStart' has a wrong offset!");
static_assert(offsetof(FEndDialogueSoundVolumeSectionTemplate, FadeEnd) == 0x000030, "Member 'FEndDialogueSoundVolumeSectionTemplate::FadeEnd' has a wrong offset!");

// ScriptStruct EndGame.EndDialogueVoiceSectionTemplate
// 0x0000 (0x0020 - 0x0020)
struct FEndDialogueVoiceSectionTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FEndDialogueVoiceSectionTemplate) == 0x000008, "Wrong alignment on FEndDialogueVoiceSectionTemplate");
static_assert(sizeof(FEndDialogueVoiceSectionTemplate) == 0x000020, "Wrong size on FEndDialogueVoiceSectionTemplate");

// ScriptStruct EndGame.EndDolphinSwimCameraModule
// 0x0000 (0x04E0 - 0x04E0)
struct FEndDolphinSwimCameraModule final : public FEndVehicleCameraModule
{
};
static_assert(alignof(FEndDolphinSwimCameraModule) == 0x000010, "Wrong alignment on FEndDolphinSwimCameraModule");
static_assert(sizeof(FEndDolphinSwimCameraModule) == 0x0004E0, "Wrong size on FEndDolphinSwimCameraModule");

// ScriptStruct EndGame.EndEffectAttachInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FEndEffectAttachInfo final
{
public:
	EAttachmentRule                               m_LocationRule;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               m_RotationRule;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               m_ScaleRule;                                       // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         m_bInWeldSimulatedBodies : 1;                      // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndEffectAttachInfo) == 0x000004, "Wrong alignment on FEndEffectAttachInfo");
static_assert(sizeof(FEndEffectAttachInfo) == 0x000008, "Wrong size on FEndEffectAttachInfo");
static_assert(offsetof(FEndEffectAttachInfo, m_LocationRule) == 0x000000, "Member 'FEndEffectAttachInfo::m_LocationRule' has a wrong offset!");
static_assert(offsetof(FEndEffectAttachInfo, m_RotationRule) == 0x000001, "Member 'FEndEffectAttachInfo::m_RotationRule' has a wrong offset!");
static_assert(offsetof(FEndEffectAttachInfo, m_ScaleRule) == 0x000002, "Member 'FEndEffectAttachInfo::m_ScaleRule' has a wrong offset!");

// ScriptStruct EndGame.VfxNonUniformRandom
// 0x000C (0x000C - 0x0000)
struct FVfxNonUniformRandom final
{
public:
	EVfxNonUniformKind                            m_Kind;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Param;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_bReverse : 1;                                    // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVfxNonUniformRandom) == 0x000004, "Wrong alignment on FVfxNonUniformRandom");
static_assert(sizeof(FVfxNonUniformRandom) == 0x00000C, "Wrong size on FVfxNonUniformRandom");
static_assert(offsetof(FVfxNonUniformRandom, m_Kind) == 0x000000, "Member 'FVfxNonUniformRandom::m_Kind' has a wrong offset!");
static_assert(offsetof(FVfxNonUniformRandom, m_Param) == 0x000004, "Member 'FVfxNonUniformRandom::m_Param' has a wrong offset!");

// ScriptStruct EndGame.VFXSoundElement
// 0x0038 (0x0038 - 0x0000)
struct FVFXSoundElement final
{
public:
	struct FEndSoundHandle                        m_SoundHandles[0x3];                               // 0x0000(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVFXSoundElement) == 0x000008, "Wrong alignment on FVFXSoundElement");
static_assert(sizeof(FVFXSoundElement) == 0x000038, "Wrong size on FVFXSoundElement");
static_assert(offsetof(FVFXSoundElement, m_SoundHandles) == 0x000000, "Member 'FVFXSoundElement::m_SoundHandles' has a wrong offset!");

// ScriptStruct EndGame.EndEmissiveColorMaterial
// 0x00D0 (0x00D0 - 0x0000)
struct FEndEmissiveColorMaterial final
{
public:
	TArray<class FName>                           MaterialNames;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LightNames;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEndEmissiveColorParameter             Default;                                           // 0x0028(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FEndEmissiveColorParameter> Override;                                          // 0x0040(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIntensityBlendInLogarithmicSpace;                 // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        DefaultCurve;                                      // 0x0091(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DefaultCurveAsset;                                 // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultCurveEvaluateInLogarithmicSpace;           // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultDuration;                                   // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultRandomAdditiveDuration;                     // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultRandomOffset;                               // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGenericVector;                                 // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               GenericVector0;                                    // 0x00C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndEmissiveColorMaterial) == 0x000010, "Wrong alignment on FEndEmissiveColorMaterial");
static_assert(sizeof(FEndEmissiveColorMaterial) == 0x0000D0, "Wrong size on FEndEmissiveColorMaterial");
static_assert(offsetof(FEndEmissiveColorMaterial, MaterialNames) == 0x000000, "Member 'FEndEmissiveColorMaterial::MaterialNames' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, LayerIndex) == 0x000010, "Member 'FEndEmissiveColorMaterial::LayerIndex' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, LightNames) == 0x000018, "Member 'FEndEmissiveColorMaterial::LightNames' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, Default) == 0x000028, "Member 'FEndEmissiveColorMaterial::Default' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, Override) == 0x000040, "Member 'FEndEmissiveColorMaterial::Override' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, bIntensityBlendInLogarithmicSpace) == 0x000090, "Member 'FEndEmissiveColorMaterial::bIntensityBlendInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, DefaultCurve) == 0x000091, "Member 'FEndEmissiveColorMaterial::DefaultCurve' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, DefaultCurveAsset) == 0x000098, "Member 'FEndEmissiveColorMaterial::DefaultCurveAsset' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, bDefaultCurveEvaluateInLogarithmicSpace) == 0x0000A0, "Member 'FEndEmissiveColorMaterial::bDefaultCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, DefaultDuration) == 0x0000A4, "Member 'FEndEmissiveColorMaterial::DefaultDuration' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, DefaultRandomAdditiveDuration) == 0x0000A8, "Member 'FEndEmissiveColorMaterial::DefaultRandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, DefaultRandomOffset) == 0x0000AC, "Member 'FEndEmissiveColorMaterial::DefaultRandomOffset' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, bUseGenericVector) == 0x0000B0, "Member 'FEndEmissiveColorMaterial::bUseGenericVector' has a wrong offset!");
static_assert(offsetof(FEndEmissiveColorMaterial, GenericVector0) == 0x0000C0, "Member 'FEndEmissiveColorMaterial::GenericVector0' has a wrong offset!");

// ScriptStruct EndGame.EndEnvironmentPhysicsSpawnPointData
// 0x0020 (0x0020 - 0x0000)
struct FEndEnvironmentPhysicsSpawnPointData final
{
public:
	class FName                                   TargetPoint;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnClassName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnConditionStoryFlag;                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndEnvironmentPhysicsSpawnPointData) == 0x000004, "Wrong alignment on FEndEnvironmentPhysicsSpawnPointData");
static_assert(sizeof(FEndEnvironmentPhysicsSpawnPointData) == 0x000020, "Wrong size on FEndEnvironmentPhysicsSpawnPointData");
static_assert(offsetof(FEndEnvironmentPhysicsSpawnPointData, TargetPoint) == 0x000000, "Member 'FEndEnvironmentPhysicsSpawnPointData::TargetPoint' has a wrong offset!");
static_assert(offsetof(FEndEnvironmentPhysicsSpawnPointData, SpawnClassName) == 0x000008, "Member 'FEndEnvironmentPhysicsSpawnPointData::SpawnClassName' has a wrong offset!");
static_assert(offsetof(FEndEnvironmentPhysicsSpawnPointData, ItemId) == 0x000010, "Member 'FEndEnvironmentPhysicsSpawnPointData::ItemId' has a wrong offset!");
static_assert(offsetof(FEndEnvironmentPhysicsSpawnPointData, SpawnConditionStoryFlag) == 0x000018, "Member 'FEndEnvironmentPhysicsSpawnPointData::SpawnConditionStoryFlag' has a wrong offset!");

// ScriptStruct EndGame.EndEnvironmentWaterVolumeAssetUserData_Speed
// 0x0010 (0x0010 - 0x0000)
struct FEndEnvironmentWaterVolumeAssetUserData_Speed final
{
public:
	TArray<float>                                 Flows;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndEnvironmentWaterVolumeAssetUserData_Speed) == 0x000008, "Wrong alignment on FEndEnvironmentWaterVolumeAssetUserData_Speed");
static_assert(sizeof(FEndEnvironmentWaterVolumeAssetUserData_Speed) == 0x000010, "Wrong size on FEndEnvironmentWaterVolumeAssetUserData_Speed");
static_assert(offsetof(FEndEnvironmentWaterVolumeAssetUserData_Speed, Flows) == 0x000000, "Member 'FEndEnvironmentWaterVolumeAssetUserData_Speed::Flows' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerBarrierTimeRateAndSize
// 0x000C (0x000C - 0x0000)
struct FEndFeelerBarrierTimeRateAndSize final
{
public:
	float                                         TimeRate;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRateSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerBarrierTimeRateAndSize) == 0x000004, "Wrong alignment on FEndFeelerBarrierTimeRateAndSize");
static_assert(sizeof(FEndFeelerBarrierTimeRateAndSize) == 0x00000C, "Wrong size on FEndFeelerBarrierTimeRateAndSize");
static_assert(offsetof(FEndFeelerBarrierTimeRateAndSize, TimeRate) == 0x000000, "Member 'FEndFeelerBarrierTimeRateAndSize::TimeRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierTimeRateAndSize, TimeRateSpeed) == 0x000004, "Member 'FEndFeelerBarrierTimeRateAndSize::TimeRateSpeed' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierTimeRateAndSize, Size) == 0x000008, "Member 'FEndFeelerBarrierTimeRateAndSize::Size' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerBarrierInstanceContext
// 0x00C0 (0x00C0 - 0x0000)
struct FEndFeelerBarrierInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerBarrierTimeRateAndSize       Horizontal;                                        // 0x0004(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VerticalHeightOffset;                              // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerBarrierTimeRateAndSize       PrimaryVertical;                                   // 0x0014(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerBarrierTimeRateAndSize       SecondaryVertical;                                 // 0x0020(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerBarrierTimeRateAndSize       PrimaryRoll;                                       // 0x002C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerBarrierTimeRateAndSize       SecondaryRoll;                                     // 0x0038(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetExtrusionDistance;                           // 0x0044(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentExtrusionDistance;                          // 0x0048(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtrusionWaitTimer;                                // 0x004C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeactiveUpSpeed;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentTransform;                                  // 0x0060(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CurrentVelocity;                                   // 0x0090(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x00A0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstancedStaticMeshComponentIndex;                 // 0x00A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstancedStaticMeshInstanceIndex;                  // 0x00AC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x00B0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerBarrierInstanceContext) == 0x000010, "Wrong alignment on FEndFeelerBarrierInstanceContext");
static_assert(sizeof(FEndFeelerBarrierInstanceContext) == 0x0000C0, "Wrong size on FEndFeelerBarrierInstanceContext");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndFeelerBarrierInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, Horizontal) == 0x000004, "Member 'FEndFeelerBarrierInstanceContext::Horizontal' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, VerticalHeightOffset) == 0x000010, "Member 'FEndFeelerBarrierInstanceContext::VerticalHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, PrimaryVertical) == 0x000014, "Member 'FEndFeelerBarrierInstanceContext::PrimaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, SecondaryVertical) == 0x000020, "Member 'FEndFeelerBarrierInstanceContext::SecondaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, PrimaryRoll) == 0x00002C, "Member 'FEndFeelerBarrierInstanceContext::PrimaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, SecondaryRoll) == 0x000038, "Member 'FEndFeelerBarrierInstanceContext::SecondaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, TargetExtrusionDistance) == 0x000044, "Member 'FEndFeelerBarrierInstanceContext::TargetExtrusionDistance' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, CurrentExtrusionDistance) == 0x000048, "Member 'FEndFeelerBarrierInstanceContext::CurrentExtrusionDistance' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, ExtrusionWaitTimer) == 0x00004C, "Member 'FEndFeelerBarrierInstanceContext::ExtrusionWaitTimer' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, DeactiveUpSpeed) == 0x000050, "Member 'FEndFeelerBarrierInstanceContext::DeactiveUpSpeed' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, CurrentTransform) == 0x000060, "Member 'FEndFeelerBarrierInstanceContext::CurrentTransform' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, CurrentVelocity) == 0x000090, "Member 'FEndFeelerBarrierInstanceContext::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, SkeletalMeshComponent) == 0x0000A0, "Member 'FEndFeelerBarrierInstanceContext::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, InstancedStaticMeshComponentIndex) == 0x0000A8, "Member 'FEndFeelerBarrierInstanceContext::InstancedStaticMeshComponentIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, InstancedStaticMeshInstanceIndex) == 0x0000AC, "Member 'FEndFeelerBarrierInstanceContext::InstancedStaticMeshInstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, bVisibility) == 0x0000B0, "Member 'FEndFeelerBarrierInstanceContext::bVisibility' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerBarrierEmissiveContext
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndFeelerBarrierEmissiveContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerBarrierEmissiveContext) == 0x000008, "Wrong alignment on FEndFeelerBarrierEmissiveContext");
static_assert(sizeof(FEndFeelerBarrierEmissiveContext) == 0x000020, "Wrong size on FEndFeelerBarrierEmissiveContext");

// ScriptStruct EndGame.EndFeelerBarrierBaseAndRandomBias
// 0x000C (0x000C - 0x0000)
struct FEndFeelerBarrierBaseAndRandomBias final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomBiasRange;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerBarrierBaseAndRandomBias) == 0x000004, "Wrong alignment on FEndFeelerBarrierBaseAndRandomBias");
static_assert(sizeof(FEndFeelerBarrierBaseAndRandomBias) == 0x00000C, "Wrong size on FEndFeelerBarrierBaseAndRandomBias");
static_assert(offsetof(FEndFeelerBarrierBaseAndRandomBias, Base) == 0x000000, "Member 'FEndFeelerBarrierBaseAndRandomBias::Base' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierBaseAndRandomBias, RandomBiasRange) == 0x000004, "Member 'FEndFeelerBarrierBaseAndRandomBias::RandomBiasRange' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerConflictInstanceContext
// 0x00E0 (0x00E0 - 0x0000)
struct FEndFeelerConflictInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSideB;                                          // 0x0004(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLose;                                             // 0x0005(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastLose;                                         // 0x0006(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoseFadeWaitTime;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoseFadeAlpha;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoseVelocityAlpha;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinRate;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerConflictTimeRateAndSize      Horizontal;                                        // 0x0018(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LastHorizontalTimeRate;                            // 0x0024(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerConflictTimeRateAndSize      PrimaryVertical;                                   // 0x0028(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerConflictTimeRateAndSize      SecondaryVertical;                                 // 0x0034(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerConflictTimeRateAndSize      PrimaryRoll;                                       // 0x0040(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerConflictTimeRateAndSize      SecondaryRoll;                                     // 0x004C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentTransform;                                  // 0x0060(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LastLocation;                                      // 0x0090(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentVelocity;                                   // 0x009C(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentOffsetYZ;                                   // 0x00A8(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x00B8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x00C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x1F];                                      // 0x00C1(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerConflictInstanceContext) == 0x000010, "Wrong alignment on FEndFeelerConflictInstanceContext");
static_assert(sizeof(FEndFeelerConflictInstanceContext) == 0x0000E0, "Wrong size on FEndFeelerConflictInstanceContext");
static_assert(offsetof(FEndFeelerConflictInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndFeelerConflictInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, bIsSideB) == 0x000004, "Member 'FEndFeelerConflictInstanceContext::bIsSideB' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, bLose) == 0x000005, "Member 'FEndFeelerConflictInstanceContext::bLose' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, bLastLose) == 0x000006, "Member 'FEndFeelerConflictInstanceContext::bLastLose' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, LoseFadeWaitTime) == 0x000008, "Member 'FEndFeelerConflictInstanceContext::LoseFadeWaitTime' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, LoseFadeAlpha) == 0x00000C, "Member 'FEndFeelerConflictInstanceContext::LoseFadeAlpha' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, LoseVelocityAlpha) == 0x000010, "Member 'FEndFeelerConflictInstanceContext::LoseVelocityAlpha' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, WinRate) == 0x000014, "Member 'FEndFeelerConflictInstanceContext::WinRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, Horizontal) == 0x000018, "Member 'FEndFeelerConflictInstanceContext::Horizontal' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, LastHorizontalTimeRate) == 0x000024, "Member 'FEndFeelerConflictInstanceContext::LastHorizontalTimeRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, PrimaryVertical) == 0x000028, "Member 'FEndFeelerConflictInstanceContext::PrimaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, SecondaryVertical) == 0x000034, "Member 'FEndFeelerConflictInstanceContext::SecondaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, PrimaryRoll) == 0x000040, "Member 'FEndFeelerConflictInstanceContext::PrimaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, SecondaryRoll) == 0x00004C, "Member 'FEndFeelerConflictInstanceContext::SecondaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, CurrentTransform) == 0x000060, "Member 'FEndFeelerConflictInstanceContext::CurrentTransform' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, LastLocation) == 0x000090, "Member 'FEndFeelerConflictInstanceContext::LastLocation' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, CurrentVelocity) == 0x00009C, "Member 'FEndFeelerConflictInstanceContext::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, CurrentOffsetYZ) == 0x0000A8, "Member 'FEndFeelerConflictInstanceContext::CurrentOffsetYZ' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, SkeletalMeshComponent) == 0x0000B8, "Member 'FEndFeelerConflictInstanceContext::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictInstanceContext, bVisibility) == 0x0000C0, "Member 'FEndFeelerConflictInstanceContext::bVisibility' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerConflictBaseAndRandomBias
// 0x000C (0x000C - 0x0000)
struct FEndFeelerConflictBaseAndRandomBias final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomBiasRange;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerConflictBaseAndRandomBias) == 0x000004, "Wrong alignment on FEndFeelerConflictBaseAndRandomBias");
static_assert(sizeof(FEndFeelerConflictBaseAndRandomBias) == 0x00000C, "Wrong size on FEndFeelerConflictBaseAndRandomBias");
static_assert(offsetof(FEndFeelerConflictBaseAndRandomBias, Base) == 0x000000, "Member 'FEndFeelerConflictBaseAndRandomBias::Base' has a wrong offset!");
static_assert(offsetof(FEndFeelerConflictBaseAndRandomBias, RandomBiasRange) == 0x000004, "Member 'FEndFeelerConflictBaseAndRandomBias::RandomBiasRange' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerFollowingInstanceContext
// 0x00F0 (0x00F0 - 0x0000)
struct FEndFeelerFollowingInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerFollowingTimeRateAndSize     PrimaryRoll;                                       // 0x0004(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerFollowingTimeRateAndSize     SecondaryRoll;                                     // 0x0010(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentTransform;                                  // 0x0020(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ComponentToWorld;                                  // 0x0050(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CurrentVelocity;                                   // 0x0080(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentVelocityBias;                               // 0x008C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x10];                                      // 0x0090(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CurrentRotation;                                   // 0x00A0(0x0010)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x00B0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSideA;                                            // 0x00B8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x37];                                      // 0x00B9(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerFollowingInstanceContext) == 0x000010, "Wrong alignment on FEndFeelerFollowingInstanceContext");
static_assert(sizeof(FEndFeelerFollowingInstanceContext) == 0x0000F0, "Wrong size on FEndFeelerFollowingInstanceContext");
static_assert(offsetof(FEndFeelerFollowingInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndFeelerFollowingInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingInstanceContext, PrimaryRoll) == 0x000004, "Member 'FEndFeelerFollowingInstanceContext::PrimaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingInstanceContext, SecondaryRoll) == 0x000010, "Member 'FEndFeelerFollowingInstanceContext::SecondaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingInstanceContext, CurrentTransform) == 0x000020, "Member 'FEndFeelerFollowingInstanceContext::CurrentTransform' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingInstanceContext, ComponentToWorld) == 0x000050, "Member 'FEndFeelerFollowingInstanceContext::ComponentToWorld' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingInstanceContext, CurrentVelocity) == 0x000080, "Member 'FEndFeelerFollowingInstanceContext::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingInstanceContext, CurrentVelocityBias) == 0x00008C, "Member 'FEndFeelerFollowingInstanceContext::CurrentVelocityBias' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingInstanceContext, CurrentRotation) == 0x0000A0, "Member 'FEndFeelerFollowingInstanceContext::CurrentRotation' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingInstanceContext, SkeletalMeshComponent) == 0x0000B0, "Member 'FEndFeelerFollowingInstanceContext::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingInstanceContext, bSideA) == 0x0000B8, "Member 'FEndFeelerFollowingInstanceContext::bSideA' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerFollowingBaseAndRandomBias
// 0x000C (0x000C - 0x0000)
struct FEndFeelerFollowingBaseAndRandomBias final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomBiasRange;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerFollowingBaseAndRandomBias) == 0x000004, "Wrong alignment on FEndFeelerFollowingBaseAndRandomBias");
static_assert(sizeof(FEndFeelerFollowingBaseAndRandomBias) == 0x00000C, "Wrong size on FEndFeelerFollowingBaseAndRandomBias");
static_assert(offsetof(FEndFeelerFollowingBaseAndRandomBias, Base) == 0x000000, "Member 'FEndFeelerFollowingBaseAndRandomBias::Base' has a wrong offset!");
static_assert(offsetof(FEndFeelerFollowingBaseAndRandomBias, RandomBiasRange) == 0x000004, "Member 'FEndFeelerFollowingBaseAndRandomBias::RandomBiasRange' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerLaserDeformContext
// 0x0014 (0x0014 - 0x0000)
struct FEndFeelerLaserDeformContext final
{
public:
	float                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x10];                                       // 0x0004(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerLaserDeformContext) == 0x000004, "Wrong alignment on FEndFeelerLaserDeformContext");
static_assert(sizeof(FEndFeelerLaserDeformContext) == 0x000014, "Wrong size on FEndFeelerLaserDeformContext");
static_assert(offsetof(FEndFeelerLaserDeformContext, StartFrame) == 0x000000, "Member 'FEndFeelerLaserDeformContext::StartFrame' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerSplineEmissiveContext
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndFeelerSplineEmissiveContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerSplineEmissiveContext) == 0x000008, "Wrong alignment on FEndFeelerSplineEmissiveContext");
static_assert(sizeof(FEndFeelerSplineEmissiveContext) == 0x000020, "Wrong size on FEndFeelerSplineEmissiveContext");

// ScriptStruct EndGame.EndFeelerSplineDeformContext
// 0x0014 (0x0014 - 0x0000)
struct FEndFeelerSplineDeformContext final
{
public:
	float                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x10];                                       // 0x0004(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerSplineDeformContext) == 0x000004, "Wrong alignment on FEndFeelerSplineDeformContext");
static_assert(sizeof(FEndFeelerSplineDeformContext) == 0x000014, "Wrong size on FEndFeelerSplineDeformContext");
static_assert(offsetof(FEndFeelerSplineDeformContext, StartFrame) == 0x000000, "Member 'FEndFeelerSplineDeformContext::StartFrame' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerTornadeEmissiveContext
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndFeelerTornadeEmissiveContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerTornadeEmissiveContext) == 0x000008, "Wrong alignment on FEndFeelerTornadeEmissiveContext");
static_assert(sizeof(FEndFeelerTornadeEmissiveContext) == 0x000020, "Wrong size on FEndFeelerTornadeEmissiveContext");

// ScriptStruct EndGame.EndFieldMonkeyBarEntryPoint
// 0x0028 (0x0028 - 0x0000)
struct FEndFieldMonkeyBarEntryPoint final
{
public:
	uint16                                        Index;                                             // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PointRate;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirLeft;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartAreaOffset;                                   // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFallFinishType;                                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndFieldActionActorMonkeyBars*         LinkActor;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldMonkeyBarEntryPoint) == 0x000008, "Wrong alignment on FEndFieldMonkeyBarEntryPoint");
static_assert(sizeof(FEndFieldMonkeyBarEntryPoint) == 0x000028, "Wrong size on FEndFieldMonkeyBarEntryPoint");
static_assert(offsetof(FEndFieldMonkeyBarEntryPoint, Index) == 0x000000, "Member 'FEndFieldMonkeyBarEntryPoint::Index' has a wrong offset!");
static_assert(offsetof(FEndFieldMonkeyBarEntryPoint, PointRate) == 0x000004, "Member 'FEndFieldMonkeyBarEntryPoint::PointRate' has a wrong offset!");
static_assert(offsetof(FEndFieldMonkeyBarEntryPoint, bDirLeft) == 0x000008, "Member 'FEndFieldMonkeyBarEntryPoint::bDirLeft' has a wrong offset!");
static_assert(offsetof(FEndFieldMonkeyBarEntryPoint, StartAreaOffset) == 0x00000C, "Member 'FEndFieldMonkeyBarEntryPoint::StartAreaOffset' has a wrong offset!");
static_assert(offsetof(FEndFieldMonkeyBarEntryPoint, bFallFinishType) == 0x000018, "Member 'FEndFieldMonkeyBarEntryPoint::bFallFinishType' has a wrong offset!");
static_assert(offsetof(FEndFieldMonkeyBarEntryPoint, LinkActor) == 0x000020, "Member 'FEndFieldMonkeyBarEntryPoint::LinkActor' has a wrong offset!");

// ScriptStruct EndGame.EndFieldSimpleInteractTransformMatching
// 0x0040 (0x0040 - 0x0000)
struct FEndFieldSimpleInteractTransformMatching final
{
public:
	class FName                                   MatchingName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldSimpleInteractTransformMatching) == 0x000010, "Wrong alignment on FEndFieldSimpleInteractTransformMatching");
static_assert(sizeof(FEndFieldSimpleInteractTransformMatching) == 0x000040, "Wrong size on FEndFieldSimpleInteractTransformMatching");
static_assert(offsetof(FEndFieldSimpleInteractTransformMatching, MatchingName) == 0x000000, "Member 'FEndFieldSimpleInteractTransformMatching::MatchingName' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractTransformMatching, TargetTransform) == 0x000010, "Member 'FEndFieldSimpleInteractTransformMatching::TargetTransform' has a wrong offset!");

// ScriptStruct EndGame.EndFieldSimpleInteractNameMatchingEditOnly
// 0x0010 (0x0010 - 0x0000)
struct FEndFieldSimpleInteractNameMatchingEditOnly final
{
public:
	class FName                                   MatchingName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldSimpleInteractNameMatchingEditOnly) == 0x000004, "Wrong alignment on FEndFieldSimpleInteractNameMatchingEditOnly");
static_assert(sizeof(FEndFieldSimpleInteractNameMatchingEditOnly) == 0x000010, "Wrong size on FEndFieldSimpleInteractNameMatchingEditOnly");
static_assert(offsetof(FEndFieldSimpleInteractNameMatchingEditOnly, MatchingName) == 0x000000, "Member 'FEndFieldSimpleInteractNameMatchingEditOnly::MatchingName' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractNameMatchingEditOnly, Name) == 0x000008, "Member 'FEndFieldSimpleInteractNameMatchingEditOnly::Name' has a wrong offset!");

// ScriptStruct EndGame.EndFieldSimpleInteractAnimSetting
// 0x0024 (0x0024 - 0x0000)
struct FEndFieldSimpleInteractAnimSetting final
{
public:
	class FName                                   PlayAnimationName;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisalbePlayAnimationNameMatching;                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartAnimationTime;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAnimationTimeRate;                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinishRemainingTime;                               // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinishElapsedTime;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldSimpleInteractAnimSetting) == 0x000004, "Wrong alignment on FEndFieldSimpleInteractAnimSetting");
static_assert(sizeof(FEndFieldSimpleInteractAnimSetting) == 0x000024, "Wrong size on FEndFieldSimpleInteractAnimSetting");
static_assert(offsetof(FEndFieldSimpleInteractAnimSetting, PlayAnimationName) == 0x000000, "Member 'FEndFieldSimpleInteractAnimSetting::PlayAnimationName' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractAnimSetting, bDisalbePlayAnimationNameMatching) == 0x000008, "Member 'FEndFieldSimpleInteractAnimSetting::bDisalbePlayAnimationNameMatching' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractAnimSetting, StartAnimationTime) == 0x00000C, "Member 'FEndFieldSimpleInteractAnimSetting::StartAnimationTime' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractAnimSetting, StartAnimationTimeRate) == 0x000010, "Member 'FEndFieldSimpleInteractAnimSetting::StartAnimationTimeRate' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractAnimSetting, bLoop) == 0x000014, "Member 'FEndFieldSimpleInteractAnimSetting::bLoop' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractAnimSetting, BlendInTime) == 0x000018, "Member 'FEndFieldSimpleInteractAnimSetting::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractAnimSetting, FinishRemainingTime) == 0x00001C, "Member 'FEndFieldSimpleInteractAnimSetting::FinishRemainingTime' has a wrong offset!");
static_assert(offsetof(FEndFieldSimpleInteractAnimSetting, FinishElapsedTime) == 0x000020, "Member 'FEndFieldSimpleInteractAnimSetting::FinishElapsedTime' has a wrong offset!");

// ScriptStruct EndGame.EndFieldBarretComboSettingBase
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FEndFieldBarretComboSettingBase final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EEndFieldBarretComboMotionType                MotionName;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartTriggerName;                                  // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndTriggerName;                                    // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitTriggerName;                                    // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitTriggerPlayMotionSec;                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitToComboWaitSec;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TriggerEffectName;                                 // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldBarretComboSettingBase) == 0x000008, "Wrong alignment on FEndFieldBarretComboSettingBase");
static_assert(sizeof(FEndFieldBarretComboSettingBase) == 0x000038, "Wrong size on FEndFieldBarretComboSettingBase");
static_assert(offsetof(FEndFieldBarretComboSettingBase, MotionName) == 0x000008, "Member 'FEndFieldBarretComboSettingBase::MotionName' has a wrong offset!");
static_assert(offsetof(FEndFieldBarretComboSettingBase, StartTriggerName) == 0x00000C, "Member 'FEndFieldBarretComboSettingBase::StartTriggerName' has a wrong offset!");
static_assert(offsetof(FEndFieldBarretComboSettingBase, EndTriggerName) == 0x000014, "Member 'FEndFieldBarretComboSettingBase::EndTriggerName' has a wrong offset!");
static_assert(offsetof(FEndFieldBarretComboSettingBase, HitTriggerName) == 0x00001C, "Member 'FEndFieldBarretComboSettingBase::HitTriggerName' has a wrong offset!");
static_assert(offsetof(FEndFieldBarretComboSettingBase, HitTriggerPlayMotionSec) == 0x000024, "Member 'FEndFieldBarretComboSettingBase::HitTriggerPlayMotionSec' has a wrong offset!");
static_assert(offsetof(FEndFieldBarretComboSettingBase, HitToComboWaitSec) == 0x000028, "Member 'FEndFieldBarretComboSettingBase::HitToComboWaitSec' has a wrong offset!");
static_assert(offsetof(FEndFieldBarretComboSettingBase, TriggerEffectName) == 0x00002C, "Member 'FEndFieldBarretComboSettingBase::TriggerEffectName' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActionChocoboUpdraftParam
// 0x0034 (0x0034 - 0x0000)
struct FEndFieldActionChocoboUpdraftParam final
{
public:
	float                                         MaxUpstreamSpeed;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpstreamAcceleration;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpstreamGravityScale;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalSpeed;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHorizontalSpeed;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalAcceleration;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalDeceleration;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceGlideMode;                                   // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceBrake;                                       // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyCeilLimit;                                   // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbsoluteUpperHeight;                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeForEnableApplyWithoutVolume;                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdraftTimeOut;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldActionChocoboUpdraftParam) == 0x000004, "Wrong alignment on FEndFieldActionChocoboUpdraftParam");
static_assert(sizeof(FEndFieldActionChocoboUpdraftParam) == 0x000034, "Wrong size on FEndFieldActionChocoboUpdraftParam");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, MaxUpstreamSpeed) == 0x000000, "Member 'FEndFieldActionChocoboUpdraftParam::MaxUpstreamSpeed' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, UpstreamAcceleration) == 0x000004, "Member 'FEndFieldActionChocoboUpdraftParam::UpstreamAcceleration' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, UpstreamGravityScale) == 0x000008, "Member 'FEndFieldActionChocoboUpdraftParam::UpstreamGravityScale' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, MaxHorizontalSpeed) == 0x00000C, "Member 'FEndFieldActionChocoboUpdraftParam::MaxHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, MinHorizontalSpeed) == 0x000010, "Member 'FEndFieldActionChocoboUpdraftParam::MinHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, HorizontalAcceleration) == 0x000014, "Member 'FEndFieldActionChocoboUpdraftParam::HorizontalAcceleration' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, HorizontalDeceleration) == 0x000018, "Member 'FEndFieldActionChocoboUpdraftParam::HorizontalDeceleration' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, bForceGlideMode) == 0x00001C, "Member 'FEndFieldActionChocoboUpdraftParam::bForceGlideMode' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, bForceBrake) == 0x00001D, "Member 'FEndFieldActionChocoboUpdraftParam::bForceBrake' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, Priority) == 0x000020, "Member 'FEndFieldActionChocoboUpdraftParam::Priority' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, bApplyCeilLimit) == 0x000024, "Member 'FEndFieldActionChocoboUpdraftParam::bApplyCeilLimit' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, AbsoluteUpperHeight) == 0x000028, "Member 'FEndFieldActionChocoboUpdraftParam::AbsoluteUpperHeight' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, MinTimeForEnableApplyWithoutVolume) == 0x00002C, "Member 'FEndFieldActionChocoboUpdraftParam::MinTimeForEnableApplyWithoutVolume' has a wrong offset!");
static_assert(offsetof(FEndFieldActionChocoboUpdraftParam, UpdraftTimeOut) == 0x000030, "Member 'FEndFieldActionChocoboUpdraftParam::UpdraftTimeOut' has a wrong offset!");

// ScriptStruct EndGame.EndFieldForceParkourCustomGuidEffectInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x10) FEndFieldForceParkourCustomGuidEffectInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldForceParkourCustomGuidEffectInfo) == 0x000010, "Wrong alignment on FEndFieldForceParkourCustomGuidEffectInfo");
static_assert(sizeof(FEndFieldForceParkourCustomGuidEffectInfo) == 0x000030, "Wrong size on FEndFieldForceParkourCustomGuidEffectInfo");

// ScriptStruct EndGame.EndFieldForceParkourSetting
// 0x0080 (0x0080 - 0x0000)
struct FEndFieldForceParkourSetting final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EForceParkourSetType                          SetType;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EForceParkourJumpType                         JumpType;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EForceParkourCheckType                        CheckType;                                         // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Lines;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 LineNums;                                          // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           AttachParkourNames;                                // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FEndFieldForceParkourCustomGuidEffectInfo> GuidEffectInfo;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FEndFieldActionRuntimeNavWorldLinkAttrIgnoreBoxInfo> IgnoreBoxInfo;                                     // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         AddtiveJumpHeight;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandFaildToSafeTeleport;                          // 0x0064(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CsParkourBoundBoxMin;                              // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CsParkourBoundBoxMax;                              // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldForceParkourSetting) == 0x000008, "Wrong alignment on FEndFieldForceParkourSetting");
static_assert(sizeof(FEndFieldForceParkourSetting) == 0x000080, "Wrong size on FEndFieldForceParkourSetting");
static_assert(offsetof(FEndFieldForceParkourSetting, SetType) == 0x000008, "Member 'FEndFieldForceParkourSetting::SetType' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, JumpType) == 0x000009, "Member 'FEndFieldForceParkourSetting::JumpType' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, CheckType) == 0x00000A, "Member 'FEndFieldForceParkourSetting::CheckType' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, Lines) == 0x000010, "Member 'FEndFieldForceParkourSetting::Lines' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, LineNums) == 0x000020, "Member 'FEndFieldForceParkourSetting::LineNums' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, AttachParkourNames) == 0x000030, "Member 'FEndFieldForceParkourSetting::AttachParkourNames' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, GuidEffectInfo) == 0x000040, "Member 'FEndFieldForceParkourSetting::GuidEffectInfo' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, IgnoreBoxInfo) == 0x000050, "Member 'FEndFieldForceParkourSetting::IgnoreBoxInfo' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, AddtiveJumpHeight) == 0x000060, "Member 'FEndFieldForceParkourSetting::AddtiveJumpHeight' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, bLandFaildToSafeTeleport) == 0x000064, "Member 'FEndFieldForceParkourSetting::bLandFaildToSafeTeleport' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, CsParkourBoundBoxMin) == 0x000068, "Member 'FEndFieldForceParkourSetting::CsParkourBoundBoxMin' has a wrong offset!");
static_assert(offsetof(FEndFieldForceParkourSetting, CsParkourBoundBoxMax) == 0x000074, "Member 'FEndFieldForceParkourSetting::CsParkourBoundBoxMax' has a wrong offset!");

// ScriptStruct EndGame.EndFieldLiftingRopeAnimSetting
// 0x0000 (0x0020 - 0x0020)
struct FEndFieldLiftingRopeAnimSetting final : public FEndFieldAnimSettingBase
{
};
static_assert(alignof(FEndFieldLiftingRopeAnimSetting) == 0x000008, "Wrong alignment on FEndFieldLiftingRopeAnimSetting");
static_assert(sizeof(FEndFieldLiftingRopeAnimSetting) == 0x000020, "Wrong size on FEndFieldLiftingRopeAnimSetting");

// ScriptStruct EndGame.EndFieldMineCartNextRailSetting
// 0x001C (0x001C - 0x0000)
struct FEndFieldMineCartNextRailSetting final
{
public:
	class FName                                   TargetRailName;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseTarget;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SwitchStoryFlag;                                   // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisableStoryFlag;                                  // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldMineCartNextRailSetting) == 0x000004, "Wrong alignment on FEndFieldMineCartNextRailSetting");
static_assert(sizeof(FEndFieldMineCartNextRailSetting) == 0x00001C, "Wrong size on FEndFieldMineCartNextRailSetting");
static_assert(offsetof(FEndFieldMineCartNextRailSetting, TargetRailName) == 0x000000, "Member 'FEndFieldMineCartNextRailSetting::TargetRailName' has a wrong offset!");
static_assert(offsetof(FEndFieldMineCartNextRailSetting, bReverseTarget) == 0x000008, "Member 'FEndFieldMineCartNextRailSetting::bReverseTarget' has a wrong offset!");
static_assert(offsetof(FEndFieldMineCartNextRailSetting, SwitchStoryFlag) == 0x00000C, "Member 'FEndFieldMineCartNextRailSetting::SwitchStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndFieldMineCartNextRailSetting, DisableStoryFlag) == 0x000014, "Member 'FEndFieldMineCartNextRailSetting::DisableStoryFlag' has a wrong offset!");

// ScriptStruct EndGame.EndFieldNiblCrawlStandupSetting
// 0x0010 (0x0010 - 0x0000)
struct FEndFieldNiblCrawlStandupSetting final
{
public:
	TArray<struct FEndFieldNiblCrawlMoveSetting>  AnimationUnits;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldNiblCrawlStandupSetting) == 0x000008, "Wrong alignment on FEndFieldNiblCrawlStandupSetting");
static_assert(sizeof(FEndFieldNiblCrawlStandupSetting) == 0x000010, "Wrong size on FEndFieldNiblCrawlStandupSetting");
static_assert(offsetof(FEndFieldNiblCrawlStandupSetting, AnimationUnits) == 0x000000, "Member 'FEndFieldNiblCrawlStandupSetting::AnimationUnits' has a wrong offset!");

// ScriptStruct EndGame.EndFieldNiblCrawlMoveStepSetting
// 0x0050 (0x0050 - 0x0000)
struct FEndFieldNiblCrawlMoveStepSetting final
{
public:
	struct FEndFieldNiblCrawlMoveSetting          IdleSetting;                                       // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FEndFieldNiblCrawlMoveSetting          MoveSetting;                                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FEndFieldNiblCrawlMoveSetting          CancelSetting;                                     // 0x0030(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FName                                   StepSuccessTrigger;                                // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldNiblCrawlMoveStepSetting) == 0x000008, "Wrong alignment on FEndFieldNiblCrawlMoveStepSetting");
static_assert(sizeof(FEndFieldNiblCrawlMoveStepSetting) == 0x000050, "Wrong size on FEndFieldNiblCrawlMoveStepSetting");
static_assert(offsetof(FEndFieldNiblCrawlMoveStepSetting, IdleSetting) == 0x000000, "Member 'FEndFieldNiblCrawlMoveStepSetting::IdleSetting' has a wrong offset!");
static_assert(offsetof(FEndFieldNiblCrawlMoveStepSetting, MoveSetting) == 0x000018, "Member 'FEndFieldNiblCrawlMoveStepSetting::MoveSetting' has a wrong offset!");
static_assert(offsetof(FEndFieldNiblCrawlMoveStepSetting, CancelSetting) == 0x000030, "Member 'FEndFieldNiblCrawlMoveStepSetting::CancelSetting' has a wrong offset!");
static_assert(offsetof(FEndFieldNiblCrawlMoveStepSetting, StepSuccessTrigger) == 0x000048, "Member 'FEndFieldNiblCrawlMoveStepSetting::StepSuccessTrigger' has a wrong offset!");

// ScriptStruct EndGame.EndFieldOneShotMoveAnimUnit
// 0x0020 (0x0020 - 0x0000)
struct FEndFieldOneShotMoveAnimUnit final
{
public:
	class FName                                   PlayAnimationName;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MotionMatchAnimationNames;                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldOneShotMoveAnimUnit) == 0x000008, "Wrong alignment on FEndFieldOneShotMoveAnimUnit");
static_assert(sizeof(FEndFieldOneShotMoveAnimUnit) == 0x000020, "Wrong size on FEndFieldOneShotMoveAnimUnit");
static_assert(offsetof(FEndFieldOneShotMoveAnimUnit, PlayAnimationName) == 0x000000, "Member 'FEndFieldOneShotMoveAnimUnit::PlayAnimationName' has a wrong offset!");
static_assert(offsetof(FEndFieldOneShotMoveAnimUnit, MotionMatchAnimationNames) == 0x000008, "Member 'FEndFieldOneShotMoveAnimUnit::MotionMatchAnimationNames' has a wrong offset!");
static_assert(offsetof(FEndFieldOneShotMoveAnimUnit, BlendInTime) == 0x000018, "Member 'FEndFieldOneShotMoveAnimUnit::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndFieldOneShotMoveAnimUnit, BlendOutTime) == 0x00001C, "Member 'FEndFieldOneShotMoveAnimUnit::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndFieldOneShotMoveSetting
// 0x0018 (0x0018 - 0x0000)
struct FEndFieldOneShotMoveSetting final
{
public:
	TArray<struct FEndFieldOneShotMoveAnimUnit>   AnimationUnits;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsLoop;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsKeep;                                   // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldOneShotMoveSetting) == 0x000008, "Wrong alignment on FEndFieldOneShotMoveSetting");
static_assert(sizeof(FEndFieldOneShotMoveSetting) == 0x000018, "Wrong size on FEndFieldOneShotMoveSetting");
static_assert(offsetof(FEndFieldOneShotMoveSetting, AnimationUnits) == 0x000000, "Member 'FEndFieldOneShotMoveSetting::AnimationUnits' has a wrong offset!");
static_assert(offsetof(FEndFieldOneShotMoveSetting, bLastAnimIsLoop) == 0x000010, "Member 'FEndFieldOneShotMoveSetting::bLastAnimIsLoop' has a wrong offset!");
static_assert(offsetof(FEndFieldOneShotMoveSetting, bLastAnimIsKeep) == 0x000011, "Member 'FEndFieldOneShotMoveSetting::bLastAnimIsKeep' has a wrong offset!");

// ScriptStruct EndGame.EndFieldRedChainDoorRemoveDistanceInfo
// 0x0018 (0x0018 - 0x0000)
struct FEndFieldRedChainDoorRemoveDistanceInfo final
{
public:
	float                                         TargetRemoveDistance;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RemovedTriggerName;                                // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AfterRemovedDropTriggerName;                       // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldRedChainDoorRemoveDistanceInfo) == 0x000004, "Wrong alignment on FEndFieldRedChainDoorRemoveDistanceInfo");
static_assert(sizeof(FEndFieldRedChainDoorRemoveDistanceInfo) == 0x000018, "Wrong size on FEndFieldRedChainDoorRemoveDistanceInfo");
static_assert(offsetof(FEndFieldRedChainDoorRemoveDistanceInfo, TargetRemoveDistance) == 0x000000, "Member 'FEndFieldRedChainDoorRemoveDistanceInfo::TargetRemoveDistance' has a wrong offset!");
static_assert(offsetof(FEndFieldRedChainDoorRemoveDistanceInfo, RemovedTriggerName) == 0x000004, "Member 'FEndFieldRedChainDoorRemoveDistanceInfo::RemovedTriggerName' has a wrong offset!");
static_assert(offsetof(FEndFieldRedChainDoorRemoveDistanceInfo, AfterRemovedDropTriggerName) == 0x00000C, "Member 'FEndFieldRedChainDoorRemoveDistanceInfo::AfterRemovedDropTriggerName' has a wrong offset!");

// ScriptStruct EndGame.EndFieldRedHoldDeliverySetting
// 0x0060 (0x0060 - 0x0000)
struct FEndFieldRedHoldDeliverySetting final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DamageSourceID;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TargetTransform;                                   // 0x0020(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldRedHoldDeliverySetting) == 0x000010, "Wrong alignment on FEndFieldRedHoldDeliverySetting");
static_assert(sizeof(FEndFieldRedHoldDeliverySetting) == 0x000060, "Wrong size on FEndFieldRedHoldDeliverySetting");
static_assert(offsetof(FEndFieldRedHoldDeliverySetting, DamageSourceID) == 0x000010, "Member 'FEndFieldRedHoldDeliverySetting::DamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldDeliverySetting, TargetTransform) == 0x000020, "Member 'FEndFieldRedHoldDeliverySetting::TargetTransform' has a wrong offset!");

// ScriptStruct EndGame.EndFieldRedHoldMoveFakeGoal
// 0x0070 (0x0070 - 0x0000)
struct FEndFieldRedHoldMoveFakeGoal final
{
public:
	struct FTransform                             GoalPoint;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         GoalPointVibrationRadius;                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoalPointFixPutDir;                               // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GoalPointFixPutDirOffset;                          // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DeliverySuccessTrigger;                            // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToPickupTrigger;                                   // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToDeActiveStoryFlag;                               // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GoalIconName;                                      // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x14];                                      // 0x005C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldRedHoldMoveFakeGoal) == 0x000010, "Wrong alignment on FEndFieldRedHoldMoveFakeGoal");
static_assert(sizeof(FEndFieldRedHoldMoveFakeGoal) == 0x000070, "Wrong size on FEndFieldRedHoldMoveFakeGoal");
static_assert(offsetof(FEndFieldRedHoldMoveFakeGoal, GoalPoint) == 0x000000, "Member 'FEndFieldRedHoldMoveFakeGoal::GoalPoint' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveFakeGoal, GoalPointVibrationRadius) == 0x000030, "Member 'FEndFieldRedHoldMoveFakeGoal::GoalPointVibrationRadius' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveFakeGoal, bGoalPointFixPutDir) == 0x000034, "Member 'FEndFieldRedHoldMoveFakeGoal::bGoalPointFixPutDir' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveFakeGoal, GoalPointFixPutDirOffset) == 0x000038, "Member 'FEndFieldRedHoldMoveFakeGoal::GoalPointFixPutDirOffset' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveFakeGoal, DeliverySuccessTrigger) == 0x00003C, "Member 'FEndFieldRedHoldMoveFakeGoal::DeliverySuccessTrigger' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveFakeGoal, ToPickupTrigger) == 0x000044, "Member 'FEndFieldRedHoldMoveFakeGoal::ToPickupTrigger' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveFakeGoal, ToDeActiveStoryFlag) == 0x00004C, "Member 'FEndFieldRedHoldMoveFakeGoal::ToDeActiveStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveFakeGoal, GoalIconName) == 0x000054, "Member 'FEndFieldRedHoldMoveFakeGoal::GoalIconName' has a wrong offset!");

// ScriptStruct EndGame.EndFieldRedHoldMoveDeliveryTriggerVolume
// 0x0070 (0x0070 - 0x0000)
struct FEndFieldRedHoldMoveDeliveryTriggerVolume final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   DisableStoryFlag;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VolumeInTrigger;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VolumeOutTrigger;                                  // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVolumeHoldOnTrigger;                             // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVolumeHoldOffTrigger;                            // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldRedHoldMoveDeliveryTriggerVolume) == 0x000010, "Wrong alignment on FEndFieldRedHoldMoveDeliveryTriggerVolume");
static_assert(sizeof(FEndFieldRedHoldMoveDeliveryTriggerVolume) == 0x000070, "Wrong size on FEndFieldRedHoldMoveDeliveryTriggerVolume");
static_assert(offsetof(FEndFieldRedHoldMoveDeliveryTriggerVolume, TargetTransform) == 0x000010, "Member 'FEndFieldRedHoldMoveDeliveryTriggerVolume::TargetTransform' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliveryTriggerVolume, DisableStoryFlag) == 0x000040, "Member 'FEndFieldRedHoldMoveDeliveryTriggerVolume::DisableStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliveryTriggerVolume, VolumeInTrigger) == 0x000048, "Member 'FEndFieldRedHoldMoveDeliveryTriggerVolume::VolumeInTrigger' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliveryTriggerVolume, VolumeOutTrigger) == 0x000050, "Member 'FEndFieldRedHoldMoveDeliveryTriggerVolume::VolumeOutTrigger' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliveryTriggerVolume, InVolumeHoldOnTrigger) == 0x000058, "Member 'FEndFieldRedHoldMoveDeliveryTriggerVolume::InVolumeHoldOnTrigger' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliveryTriggerVolume, InVolumeHoldOffTrigger) == 0x000060, "Member 'FEndFieldRedHoldMoveDeliveryTriggerVolume::InVolumeHoldOffTrigger' has a wrong offset!");

// ScriptStruct EndGame.EndFieldRedHoldMoveDeliverySetting
// 0x0090 (0x0090 - 0x0000)
struct FEndFieldRedHoldMoveDeliverySetting final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AEndTargetPoint*                        MapIconControlPoint;                               // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapIconControlPointName;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapIconVisibleStoryFlag;                           // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapIconFirstInStoryFlag;                           // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapIconFirstInRadius;                              // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableHoldWasHideItems;                          // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PVResetTargetPointName;                            // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeginOnStand;                                     // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeginPickupFixDir;                                // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BeginPickupFixDirOffset;                           // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         LoopEffectAsset;                                   // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldRedHoldMoveDeliverySetting) == 0x000010, "Wrong alignment on FEndFieldRedHoldMoveDeliverySetting");
static_assert(sizeof(FEndFieldRedHoldMoveDeliverySetting) == 0x000090, "Wrong size on FEndFieldRedHoldMoveDeliverySetting");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, TargetTransform) == 0x000010, "Member 'FEndFieldRedHoldMoveDeliverySetting::TargetTransform' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, MapIconControlPoint) == 0x000040, "Member 'FEndFieldRedHoldMoveDeliverySetting::MapIconControlPoint' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, MapIconControlPointName) == 0x000048, "Member 'FEndFieldRedHoldMoveDeliverySetting::MapIconControlPointName' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, MapIconVisibleStoryFlag) == 0x000050, "Member 'FEndFieldRedHoldMoveDeliverySetting::MapIconVisibleStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, MapIconFirstInStoryFlag) == 0x000058, "Member 'FEndFieldRedHoldMoveDeliverySetting::MapIconFirstInStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, MapIconFirstInRadius) == 0x000060, "Member 'FEndFieldRedHoldMoveDeliverySetting::MapIconFirstInRadius' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, bDisableHoldWasHideItems) == 0x000064, "Member 'FEndFieldRedHoldMoveDeliverySetting::bDisableHoldWasHideItems' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, PVResetTargetPointName) == 0x000068, "Member 'FEndFieldRedHoldMoveDeliverySetting::PVResetTargetPointName' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, bBeginOnStand) == 0x000070, "Member 'FEndFieldRedHoldMoveDeliverySetting::bBeginOnStand' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, bBeginPickupFixDir) == 0x000071, "Member 'FEndFieldRedHoldMoveDeliverySetting::bBeginPickupFixDir' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, BeginPickupFixDirOffset) == 0x000074, "Member 'FEndFieldRedHoldMoveDeliverySetting::BeginPickupFixDirOffset' has a wrong offset!");
static_assert(offsetof(FEndFieldRedHoldMoveDeliverySetting, LoopEffectAsset) == 0x000078, "Member 'FEndFieldRedHoldMoveDeliverySetting::LoopEffectAsset' has a wrong offset!");

// ScriptStruct EndGame.EndFieldSwitchAccessAnimUnit
// 0x0024 (0x0024 - 0x0000)
struct FEndFieldSwitchAccessAnimUnit final
{
public:
	class FName                                   PlayAnimationName;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackupPlayAnimationName;                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CustomPlayAnimationName;                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaySpeedRate;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldSwitchAccessAnimUnit) == 0x000004, "Wrong alignment on FEndFieldSwitchAccessAnimUnit");
static_assert(sizeof(FEndFieldSwitchAccessAnimUnit) == 0x000024, "Wrong size on FEndFieldSwitchAccessAnimUnit");
static_assert(offsetof(FEndFieldSwitchAccessAnimUnit, PlayAnimationName) == 0x000000, "Member 'FEndFieldSwitchAccessAnimUnit::PlayAnimationName' has a wrong offset!");
static_assert(offsetof(FEndFieldSwitchAccessAnimUnit, BackupPlayAnimationName) == 0x000008, "Member 'FEndFieldSwitchAccessAnimUnit::BackupPlayAnimationName' has a wrong offset!");
static_assert(offsetof(FEndFieldSwitchAccessAnimUnit, CustomPlayAnimationName) == 0x000010, "Member 'FEndFieldSwitchAccessAnimUnit::CustomPlayAnimationName' has a wrong offset!");
static_assert(offsetof(FEndFieldSwitchAccessAnimUnit, BlendInTime) == 0x000018, "Member 'FEndFieldSwitchAccessAnimUnit::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndFieldSwitchAccessAnimUnit, BlendOutTime) == 0x00001C, "Member 'FEndFieldSwitchAccessAnimUnit::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndFieldSwitchAccessAnimUnit, PlaySpeedRate) == 0x000020, "Member 'FEndFieldSwitchAccessAnimUnit::PlaySpeedRate' has a wrong offset!");

// ScriptStruct EndGame.EndFieldSwitchAccessSetting
// 0x0018 (0x0018 - 0x0000)
struct FEndFieldSwitchAccessSetting final
{
public:
	TArray<struct FEndFieldSwitchAccessAnimUnit>  AnimationUnits;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FirstStartAnimationTimeRate;                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsLoop;                                   // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastAnimIsKeep;                                   // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldSwitchAccessSetting) == 0x000008, "Wrong alignment on FEndFieldSwitchAccessSetting");
static_assert(sizeof(FEndFieldSwitchAccessSetting) == 0x000018, "Wrong size on FEndFieldSwitchAccessSetting");
static_assert(offsetof(FEndFieldSwitchAccessSetting, AnimationUnits) == 0x000000, "Member 'FEndFieldSwitchAccessSetting::AnimationUnits' has a wrong offset!");
static_assert(offsetof(FEndFieldSwitchAccessSetting, FirstStartAnimationTimeRate) == 0x000010, "Member 'FEndFieldSwitchAccessSetting::FirstStartAnimationTimeRate' has a wrong offset!");
static_assert(offsetof(FEndFieldSwitchAccessSetting, bLastAnimIsLoop) == 0x000014, "Member 'FEndFieldSwitchAccessSetting::bLastAnimIsLoop' has a wrong offset!");
static_assert(offsetof(FEndFieldSwitchAccessSetting, bLastAnimIsKeep) == 0x000015, "Member 'FEndFieldSwitchAccessSetting::bLastAnimIsKeep' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActionTinyBroncoSplineMoveInputScaleData
// 0x0008 (0x0008 - 0x0000)
struct FEndFieldActionTinyBroncoSplineMoveInputScaleData final
{
public:
	float                                         InputKey;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputScale;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldActionTinyBroncoSplineMoveInputScaleData) == 0x000004, "Wrong alignment on FEndFieldActionTinyBroncoSplineMoveInputScaleData");
static_assert(sizeof(FEndFieldActionTinyBroncoSplineMoveInputScaleData) == 0x000008, "Wrong size on FEndFieldActionTinyBroncoSplineMoveInputScaleData");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveInputScaleData, InputKey) == 0x000000, "Member 'FEndFieldActionTinyBroncoSplineMoveInputScaleData::InputKey' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveInputScaleData, InputScale) == 0x000004, "Member 'FEndFieldActionTinyBroncoSplineMoveInputScaleData::InputScale' has a wrong offset!");

// ScriptStruct EndGame.EndFieldActionTinyBroncoSplineMoveEventData
// 0x000C (0x000C - 0x0000)
struct FEndFieldActionTinyBroncoSplineMoveEventData final
{
public:
	float                                         InputKey;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TriggerName;                                       // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldActionTinyBroncoSplineMoveEventData) == 0x000004, "Wrong alignment on FEndFieldActionTinyBroncoSplineMoveEventData");
static_assert(sizeof(FEndFieldActionTinyBroncoSplineMoveEventData) == 0x00000C, "Wrong size on FEndFieldActionTinyBroncoSplineMoveEventData");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveEventData, InputKey) == 0x000000, "Member 'FEndFieldActionTinyBroncoSplineMoveEventData::InputKey' has a wrong offset!");
static_assert(offsetof(FEndFieldActionTinyBroncoSplineMoveEventData, TriggerName) == 0x000004, "Member 'FEndFieldActionTinyBroncoSplineMoveEventData::TriggerName' has a wrong offset!");

// ScriptStruct EndGame.EndFieldCameraOperator
// 0x0000 (0x0770 - 0x0770)
struct FEndFieldCameraOperator final : public FEndModularCameraOperator
{
};
static_assert(alignof(FEndFieldCameraOperator) == 0x000008, "Wrong alignment on FEndFieldCameraOperator");
static_assert(sizeof(FEndFieldCameraOperator) == 0x000770, "Wrong size on FEndFieldCameraOperator");

// ScriptStruct EndGame.EndFieldActionRuntimeCustomRuleVolumeInfo
// 0x0090 (0x0090 - 0x0000)
struct FEndFieldActionRuntimeCustomRuleVolumeInfo final
{
public:
	struct FTransform                             InvComponentTransform;                             // 0x0000(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFallHeightMax;                              // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnableFallHeightMax;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFallPlaneDistanceMax;                       // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnableFallPlaneDistanceMax;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableJumpUpHeightMax;                            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnableJumpUpHeightMax;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableJumpUpPlaneDistanceMax;                     // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnableJumpUpPlaneDistanceMax;                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFenceFallHeightMax;                         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnableFenceFallHeightMax;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVaultStartHeight;                           // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnableVaultStartHeight;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bUseNavHeavySearch;                                // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseNavHeavySearch2;                               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLifeStreamEdge;                                   // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownTargetIsLookAt;                               // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLookDownFrontDistance;                      // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookDownFrontDistance;                             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParkourOnlyChocoboSwampArea;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStairToFenceParkour;                        // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableToSlopePlaneJump;                           // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFenceBumpyBlock;                            // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFenceToNarrowArea;                                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreJumpFootAreaCheck;                          // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSwimToSwimJump;                             // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRuntimeBlockCharaCollisionCheck;                  // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VolumeInfoVersion;                                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldActionRuntimeCustomRuleVolumeInfo) == 0x000010, "Wrong alignment on FEndFieldActionRuntimeCustomRuleVolumeInfo");
static_assert(sizeof(FEndFieldActionRuntimeCustomRuleVolumeInfo) == 0x000090, "Wrong size on FEndFieldActionRuntimeCustomRuleVolumeInfo");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, InvComponentTransform) == 0x000000, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::InvComponentTransform' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, BoxExtent) == 0x000030, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::BoxExtent' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bActive) == 0x00003C, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bActive' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bEnableFallHeightMax) == 0x00003D, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bEnableFallHeightMax' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, EnableFallHeightMax) == 0x000040, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::EnableFallHeightMax' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bEnableFallPlaneDistanceMax) == 0x000044, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bEnableFallPlaneDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, EnableFallPlaneDistanceMax) == 0x000048, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::EnableFallPlaneDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bEnableJumpUpHeightMax) == 0x00004C, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bEnableJumpUpHeightMax' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, EnableJumpUpHeightMax) == 0x000050, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::EnableJumpUpHeightMax' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bEnableJumpUpPlaneDistanceMax) == 0x000054, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bEnableJumpUpPlaneDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, EnableJumpUpPlaneDistanceMax) == 0x000058, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::EnableJumpUpPlaneDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bEnableFenceFallHeightMax) == 0x00005C, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bEnableFenceFallHeightMax' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, EnableFenceFallHeightMax) == 0x000060, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::EnableFenceFallHeightMax' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bEnableVaultStartHeight) == 0x000064, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bEnableVaultStartHeight' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, EnableVaultStartHeight) == 0x000068, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::EnableVaultStartHeight' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bUseNavHeavySearch) == 0x00006C, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bUseNavHeavySearch' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bUseNavHeavySearch2) == 0x000070, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bUseNavHeavySearch2' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bLifeStreamEdge) == 0x000071, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bLifeStreamEdge' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bDownTargetIsLookAt) == 0x000072, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bDownTargetIsLookAt' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bEnableLookDownFrontDistance) == 0x000073, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bEnableLookDownFrontDistance' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, LookDownFrontDistance) == 0x000074, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::LookDownFrontDistance' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bParkourOnlyChocoboSwampArea) == 0x000078, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bParkourOnlyChocoboSwampArea' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bEnableStairToFenceParkour) == 0x000079, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bEnableStairToFenceParkour' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bEnableToSlopePlaneJump) == 0x00007A, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bEnableToSlopePlaneJump' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bIgnoreFenceBumpyBlock) == 0x00007B, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bIgnoreFenceBumpyBlock' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bFenceToNarrowArea) == 0x00007C, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bFenceToNarrowArea' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bIgnoreJumpFootAreaCheck) == 0x00007D, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bIgnoreJumpFootAreaCheck' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bEnableSwimToSwimJump) == 0x00007E, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bEnableSwimToSwimJump' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, bRuntimeBlockCharaCollisionCheck) == 0x00007F, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::bRuntimeBlockCharaCollisionCheck' has a wrong offset!");
static_assert(offsetof(FEndFieldActionRuntimeCustomRuleVolumeInfo, VolumeInfoVersion) == 0x000080, "Member 'FEndFieldActionRuntimeCustomRuleVolumeInfo::VolumeInfoVersion' has a wrong offset!");

// ScriptStruct EndGame.EndFieldRawGridInfo
// 0x002C (0x002C - 0x0000)
struct FEndFieldRawGridInfo final
{
public:
	int32                                         SurfaceLevel_;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal_;                                           // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Flow_;                                             // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x10];                                      // 0x001C(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFieldRawGridInfo) == 0x000004, "Wrong alignment on FEndFieldRawGridInfo");
static_assert(sizeof(FEndFieldRawGridInfo) == 0x00002C, "Wrong size on FEndFieldRawGridInfo");
static_assert(offsetof(FEndFieldRawGridInfo, SurfaceLevel_) == 0x000000, "Member 'FEndFieldRawGridInfo::SurfaceLevel_' has a wrong offset!");
static_assert(offsetof(FEndFieldRawGridInfo, Normal_) == 0x000004, "Member 'FEndFieldRawGridInfo::Normal_' has a wrong offset!");
static_assert(offsetof(FEndFieldRawGridInfo, Flow_) == 0x000010, "Member 'FEndFieldRawGridInfo::Flow_' has a wrong offset!");

// ScriptStruct EndGame.AffectedActorGroup
// 0x0034 (0x0034 - 0x0000)
struct FAffectedActorGroup final
{
public:
	class FName                                   StartStateTrigger;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndStateTrigger;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftStartStateTrigger;                             // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftEndStateTrigger;                               // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightStartStateTrigger;                            // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightEndStateTrigger;                              // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoneNameTriggerIsDefault;                         // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAffectedActorGroup) == 0x000004, "Wrong alignment on FAffectedActorGroup");
static_assert(sizeof(FAffectedActorGroup) == 0x000034, "Wrong size on FAffectedActorGroup");
static_assert(offsetof(FAffectedActorGroup, StartStateTrigger) == 0x000000, "Member 'FAffectedActorGroup::StartStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, EndStateTrigger) == 0x000008, "Member 'FAffectedActorGroup::EndStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, LeftStartStateTrigger) == 0x000010, "Member 'FAffectedActorGroup::LeftStartStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, LeftEndStateTrigger) == 0x000018, "Member 'FAffectedActorGroup::LeftEndStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, RightStartStateTrigger) == 0x000020, "Member 'FAffectedActorGroup::RightStartStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, RightEndStateTrigger) == 0x000028, "Member 'FAffectedActorGroup::RightEndStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, bNoneNameTriggerIsDefault) == 0x000030, "Member 'FAffectedActorGroup::bNoneNameTriggerIsDefault' has a wrong offset!");

// ScriptStruct EndGame.EndFlowMapAnimationPreviewSettings
// 0x0020 (0x0020 - 0x0000)
struct FEndFlowMapAnimationPreviewSettings final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideConstantParameter;                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ConstantParameter0;                                // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstantParameter1;                                // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFlowMapAnimationPreviewSettings) == 0x000004, "Wrong alignment on FEndFlowMapAnimationPreviewSettings");
static_assert(sizeof(FEndFlowMapAnimationPreviewSettings) == 0x000020, "Wrong size on FEndFlowMapAnimationPreviewSettings");
static_assert(offsetof(FEndFlowMapAnimationPreviewSettings, PlayRate) == 0x000000, "Member 'FEndFlowMapAnimationPreviewSettings::PlayRate' has a wrong offset!");
static_assert(offsetof(FEndFlowMapAnimationPreviewSettings, bOverrideConstantParameter) == 0x000004, "Member 'FEndFlowMapAnimationPreviewSettings::bOverrideConstantParameter' has a wrong offset!");
static_assert(offsetof(FEndFlowMapAnimationPreviewSettings, ConstantParameter0) == 0x000008, "Member 'FEndFlowMapAnimationPreviewSettings::ConstantParameter0' has a wrong offset!");
static_assert(offsetof(FEndFlowMapAnimationPreviewSettings, ConstantParameter1) == 0x000014, "Member 'FEndFlowMapAnimationPreviewSettings::ConstantParameter1' has a wrong offset!");

// ScriptStruct EndGame.EndFlowMapAnimationSettings
// 0x0038 (0x0038 - 0x0000)
struct FEndFlowMapAnimationSettings final
{
public:
	TArray<class FName>                           MaterialNames;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstantParameter0;                                // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstantParameter1;                                // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfContext;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfKey;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeformAnimationPlayRate;                           // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFlowMapAnimationSettings) == 0x000008, "Wrong alignment on FEndFlowMapAnimationSettings");
static_assert(sizeof(FEndFlowMapAnimationSettings) == 0x000038, "Wrong size on FEndFlowMapAnimationSettings");
static_assert(offsetof(FEndFlowMapAnimationSettings, MaterialNames) == 0x000000, "Member 'FEndFlowMapAnimationSettings::MaterialNames' has a wrong offset!");
static_assert(offsetof(FEndFlowMapAnimationSettings, LayerIndex) == 0x000010, "Member 'FEndFlowMapAnimationSettings::LayerIndex' has a wrong offset!");
static_assert(offsetof(FEndFlowMapAnimationSettings, ConstantParameter0) == 0x000014, "Member 'FEndFlowMapAnimationSettings::ConstantParameter0' has a wrong offset!");
static_assert(offsetof(FEndFlowMapAnimationSettings, ConstantParameter1) == 0x000020, "Member 'FEndFlowMapAnimationSettings::ConstantParameter1' has a wrong offset!");
static_assert(offsetof(FEndFlowMapAnimationSettings, NumberOfContext) == 0x00002C, "Member 'FEndFlowMapAnimationSettings::NumberOfContext' has a wrong offset!");
static_assert(offsetof(FEndFlowMapAnimationSettings, NumberOfKey) == 0x000030, "Member 'FEndFlowMapAnimationSettings::NumberOfKey' has a wrong offset!");
static_assert(offsetof(FEndFlowMapAnimationSettings, DeformAnimationPlayRate) == 0x000034, "Member 'FEndFlowMapAnimationSettings::DeformAnimationPlayRate' has a wrong offset!");

// ScriptStruct EndGame.EndGlyphInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndGlyphInfo final
{
public:
	uint16                                        TextureIndex;                                      // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TextureX;                                          // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TextureY;                                          // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SizeX;                                             // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SizeY;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         HorizontalOffset;                                  // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         VerticalOffset;                                    // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         XAdvance;                                          // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndGlyphInfo) == 0x000002, "Wrong alignment on FEndGlyphInfo");
static_assert(sizeof(FEndGlyphInfo) == 0x000010, "Wrong size on FEndGlyphInfo");
static_assert(offsetof(FEndGlyphInfo, TextureIndex) == 0x000000, "Member 'FEndGlyphInfo::TextureIndex' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, TextureX) == 0x000002, "Member 'FEndGlyphInfo::TextureX' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, TextureY) == 0x000004, "Member 'FEndGlyphInfo::TextureY' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, SizeX) == 0x000006, "Member 'FEndGlyphInfo::SizeX' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, SizeY) == 0x000008, "Member 'FEndGlyphInfo::SizeY' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, HorizontalOffset) == 0x00000A, "Member 'FEndGlyphInfo::HorizontalOffset' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, VerticalOffset) == 0x00000C, "Member 'FEndGlyphInfo::VerticalOffset' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, XAdvance) == 0x00000E, "Member 'FEndGlyphInfo::XAdvance' has a wrong offset!");

// ScriptStruct EndGame.EndFootEffectorRuntimeSetting
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FEndFootEffectorRuntimeSetting final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFootEffectorRuntimeSetting) == 0x000008, "Wrong alignment on FEndFootEffectorRuntimeSetting");
static_assert(sizeof(FEndFootEffectorRuntimeSetting) == 0x000058, "Wrong size on FEndFootEffectorRuntimeSetting");

// ScriptStruct EndGame.EndFrogGuysCameraModule
// 0x0050 (0x0440 - 0x03F0)
struct FEndFrogGuysCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x50];                                     // 0x03F0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFrogGuysCameraModule) == 0x000008, "Wrong alignment on FEndFrogGuysCameraModule");
static_assert(sizeof(FEndFrogGuysCameraModule) == 0x000440, "Wrong size on FEndFrogGuysCameraModule");

// ScriptStruct EndGame.EndGatherableLife
// 0x0098 (0x0098 - 0x0000)
struct FEndGatherableLife final
{
public:
	int32                                         m_LifeAmount;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                m_VFXAssetUserData;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_GatheredEvent;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AEndSelectTargetPoint>   m_ShareSelectItem;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x78];                                      // 0x0020(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndGatherableLife) == 0x000008, "Wrong alignment on FEndGatherableLife");
static_assert(sizeof(FEndGatherableLife) == 0x000098, "Wrong size on FEndGatherableLife");
static_assert(offsetof(FEndGatherableLife, m_LifeAmount) == 0x000000, "Member 'FEndGatherableLife::m_LifeAmount' has a wrong offset!");
static_assert(offsetof(FEndGatherableLife, m_VFXAssetUserData) == 0x000008, "Member 'FEndGatherableLife::m_VFXAssetUserData' has a wrong offset!");
static_assert(offsetof(FEndGatherableLife, m_GatheredEvent) == 0x000010, "Member 'FEndGatherableLife::m_GatheredEvent' has a wrong offset!");
static_assert(offsetof(FEndGatherableLife, m_ShareSelectItem) == 0x000018, "Member 'FEndGatherableLife::m_ShareSelectItem' has a wrong offset!");

// ScriptStruct EndGame.GrassGridOctTreeNode
// 0x0018 (0x0018 - 0x0000)
struct FGrassGridOctTreeNode final
{
public:
	int8                                          Value_;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint32>                                ChildIndicies_;                                    // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrassGridOctTreeNode) == 0x000008, "Wrong alignment on FGrassGridOctTreeNode");
static_assert(sizeof(FGrassGridOctTreeNode) == 0x000018, "Wrong size on FGrassGridOctTreeNode");
static_assert(offsetof(FGrassGridOctTreeNode, Value_) == 0x000000, "Member 'FGrassGridOctTreeNode::Value_' has a wrong offset!");
static_assert(offsetof(FGrassGridOctTreeNode, ChildIndicies_) == 0x000008, "Member 'FGrassGridOctTreeNode::ChildIndicies_' has a wrong offset!");

// ScriptStruct EndGame.EndHandEffectorRuntimeSetting
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FEndHandEffectorRuntimeSetting final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndHandEffectorRuntimeSetting) == 0x000008, "Wrong alignment on FEndHandEffectorRuntimeSetting");
static_assert(sizeof(FEndHandEffectorRuntimeSetting) == 0x000060, "Wrong size on FEndHandEffectorRuntimeSetting");

// ScriptStruct EndGame.EndHandConstraintSetting
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FEndHandConstraintSetting final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndHandConstraintSetting) == 0x000010, "Wrong alignment on FEndHandConstraintSetting");
static_assert(sizeof(FEndHandConstraintSetting) == 0x000050, "Wrong size on FEndHandConstraintSetting");

// ScriptStruct EndGame.EndHandlePuzzleCameraModule
// 0x0018 (0x0408 - 0x03F0)
struct FEndHandlePuzzleCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x18];                                     // 0x03F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndHandlePuzzleCameraModule) == 0x000008, "Wrong alignment on FEndHandlePuzzleCameraModule");
static_assert(sizeof(FEndHandlePuzzleCameraModule) == 0x000408, "Wrong size on FEndHandlePuzzleCameraModule");

// ScriptStruct EndGame.HeliSpline
// 0x0028 (0x0028 - 0x0000)
struct FHeliSpline final
{
public:
	class FName                                   StateChange;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateTrigger;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineComponent*>               SplineMoveComponent;                               // 0x0010(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ULevelSequence*                         SplineMoveComponentSequencer;                      // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeliSpline) == 0x000008, "Wrong alignment on FHeliSpline");
static_assert(sizeof(FHeliSpline) == 0x000028, "Wrong size on FHeliSpline");
static_assert(offsetof(FHeliSpline, StateChange) == 0x000000, "Member 'FHeliSpline::StateChange' has a wrong offset!");
static_assert(offsetof(FHeliSpline, StateTrigger) == 0x000008, "Member 'FHeliSpline::StateTrigger' has a wrong offset!");
static_assert(offsetof(FHeliSpline, SplineMoveComponent) == 0x000010, "Member 'FHeliSpline::SplineMoveComponent' has a wrong offset!");
static_assert(offsetof(FHeliSpline, SplineMoveComponentSequencer) == 0x000020, "Member 'FHeliSpline::SplineMoveComponentSequencer' has a wrong offset!");

// ScriptStruct EndGame.EndHoldObjectCameraModule
// 0x0080 (0x0470 - 0x03F0)
struct FEndHoldObjectCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x80];                                     // 0x03F0(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndHoldObjectCameraModule) == 0x000008, "Wrong alignment on FEndHoldObjectCameraModule");
static_assert(sizeof(FEndHoldObjectCameraModule) == 0x000470, "Wrong size on FEndHoldObjectCameraModule");

// ScriptStruct EndGame.EndHookRopeCameraModule
// 0x0038 (0x0428 - 0x03F0)
struct FEndHookRopeCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x38];                                     // 0x03F0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndHookRopeCameraModule) == 0x000008, "Wrong alignment on FEndHookRopeCameraModule");
static_assert(sizeof(FEndHookRopeCameraModule) == 0x000428, "Wrong size on FEndHookRopeCameraModule");

// ScriptStruct EndGame.EndInterSetting
// 0x0038 (0x0038 - 0x0000)
struct FEndInterSetting final
{
public:
	TArray<bool>                                  Sense;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Presence;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Intimidation;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InterestRadius;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndInterSetting) == 0x000008, "Wrong alignment on FEndInterSetting");
static_assert(sizeof(FEndInterSetting) == 0x000038, "Wrong size on FEndInterSetting");
static_assert(offsetof(FEndInterSetting, Sense) == 0x000000, "Member 'FEndInterSetting::Sense' has a wrong offset!");
static_assert(offsetof(FEndInterSetting, Presence) == 0x000010, "Member 'FEndInterSetting::Presence' has a wrong offset!");
static_assert(offsetof(FEndInterSetting, Intimidation) == 0x000020, "Member 'FEndInterSetting::Intimidation' has a wrong offset!");
static_assert(offsetof(FEndInterSetting, InterestRadius) == 0x000030, "Member 'FEndInterSetting::InterestRadius' has a wrong offset!");

// ScriptStruct EndGame.InterestPointRequestInfo
// 0x001C (0x001C - 0x0000)
struct FInterestPointRequestInfo final
{
public:
	EEndInterestPointReactionActorType            Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TemplateId;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideId;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForcedRecognition;                               // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInterestPointRequestInfo) == 0x000004, "Wrong alignment on FInterestPointRequestInfo");
static_assert(sizeof(FInterestPointRequestInfo) == 0x00001C, "Wrong size on FInterestPointRequestInfo");
static_assert(offsetof(FInterestPointRequestInfo, Type) == 0x000000, "Member 'FInterestPointRequestInfo::Type' has a wrong offset!");
static_assert(offsetof(FInterestPointRequestInfo, Radius) == 0x000004, "Member 'FInterestPointRequestInfo::Radius' has a wrong offset!");
static_assert(offsetof(FInterestPointRequestInfo, TemplateId) == 0x000008, "Member 'FInterestPointRequestInfo::TemplateId' has a wrong offset!");
static_assert(offsetof(FInterestPointRequestInfo, OverrideId) == 0x000010, "Member 'FInterestPointRequestInfo::OverrideId' has a wrong offset!");
static_assert(offsetof(FInterestPointRequestInfo, IsForcedRecognition) == 0x000018, "Member 'FInterestPointRequestInfo::IsForcedRecognition' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionInfo
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FEndAIInterestActionInfo final
{
public:
	class FName                                   commandID;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIInterestActionCommand                   Command;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PollingID;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x24];                                      // 0x0014(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestActionInfo) == 0x000008, "Wrong alignment on FEndAIInterestActionInfo");
static_assert(sizeof(FEndAIInterestActionInfo) == 0x000038, "Wrong size on FEndAIInterestActionInfo");
static_assert(offsetof(FEndAIInterestActionInfo, commandID) == 0x000000, "Member 'FEndAIInterestActionInfo::commandID' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, Command) == 0x000008, "Member 'FEndAIInterestActionInfo::Command' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, PollingID) == 0x00000C, "Member 'FEndAIInterestActionInfo::PollingID' has a wrong offset!");

// ScriptStruct EndGame.EndJenovaPulseWallInstanceContext
// 0x0060 (0x0060 - 0x0000)
struct FEndJenovaPulseWallInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalRate;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalOffset;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtractOffset;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseScale;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentTransform;                                  // 0x0020(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ActivateTimer;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PulseGroupIndex;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseScale;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndJenovaPulseWallInstanceContext) == 0x000010, "Wrong alignment on FEndJenovaPulseWallInstanceContext");
static_assert(sizeof(FEndJenovaPulseWallInstanceContext) == 0x000060, "Wrong size on FEndJenovaPulseWallInstanceContext");
static_assert(offsetof(FEndJenovaPulseWallInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndJenovaPulseWallInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallInstanceContext, HorizontalRate) == 0x000004, "Member 'FEndJenovaPulseWallInstanceContext::HorizontalRate' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallInstanceContext, VerticalOffset) == 0x000008, "Member 'FEndJenovaPulseWallInstanceContext::VerticalOffset' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallInstanceContext, ExtractOffset) == 0x00000C, "Member 'FEndJenovaPulseWallInstanceContext::ExtractOffset' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallInstanceContext, BaseScale) == 0x000010, "Member 'FEndJenovaPulseWallInstanceContext::BaseScale' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallInstanceContext, CurrentTransform) == 0x000020, "Member 'FEndJenovaPulseWallInstanceContext::CurrentTransform' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallInstanceContext, ActivateTimer) == 0x000050, "Member 'FEndJenovaPulseWallInstanceContext::ActivateTimer' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallInstanceContext, PulseGroupIndex) == 0x000054, "Member 'FEndJenovaPulseWallInstanceContext::PulseGroupIndex' has a wrong offset!");
static_assert(offsetof(FEndJenovaPulseWallInstanceContext, PulseScale) == 0x000058, "Member 'FEndJenovaPulseWallInstanceContext::PulseScale' has a wrong offset!");

// ScriptStruct EndGame.EndJenovaSplineWallEmissiveContext
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndJenovaSplineWallEmissiveContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndJenovaSplineWallEmissiveContext) == 0x000008, "Wrong alignment on FEndJenovaSplineWallEmissiveContext");
static_assert(sizeof(FEndJenovaSplineWallEmissiveContext) == 0x000020, "Wrong size on FEndJenovaSplineWallEmissiveContext");

// ScriptStruct EndGame.EndLadderCameraModule
// 0x0148 (0x0538 - 0x03F0)
struct FEndLadderCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x148];                                    // 0x03F0(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLadderCameraModule) == 0x000008, "Wrong alignment on FEndLadderCameraModule");
static_assert(sizeof(FEndLadderCameraModule) == 0x000538, "Wrong size on FEndLadderCameraModule");

// ScriptStruct EndGame.EndTargetPointParameters
// 0x0001 (0x0001 - 0x0000)
struct FEndTargetPointParameters final
{
public:
	bool                                          bWarpPoint;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndTargetPointParameters) == 0x000001, "Wrong alignment on FEndTargetPointParameters");
static_assert(sizeof(FEndTargetPointParameters) == 0x000001, "Wrong size on FEndTargetPointParameters");
static_assert(offsetof(FEndTargetPointParameters, bWarpPoint) == 0x000000, "Member 'FEndTargetPointParameters::bWarpPoint' has a wrong offset!");

// ScriptStruct EndGame.EndWorldItemParameters
// 0x0028 (0x0028 - 0x0000)
struct FEndWorldItemParameters final
{
public:
	class FName                                   WorldItemSpecID;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupId;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LotteryTableID;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PickUpStoryFlagID;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldActorInfoID;                                  // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWorldItemParameters) == 0x000004, "Wrong alignment on FEndWorldItemParameters");
static_assert(sizeof(FEndWorldItemParameters) == 0x000028, "Wrong size on FEndWorldItemParameters");
static_assert(offsetof(FEndWorldItemParameters, WorldItemSpecID) == 0x000000, "Member 'FEndWorldItemParameters::WorldItemSpecID' has a wrong offset!");
static_assert(offsetof(FEndWorldItemParameters, GroupId) == 0x000008, "Member 'FEndWorldItemParameters::GroupId' has a wrong offset!");
static_assert(offsetof(FEndWorldItemParameters, LotteryTableID) == 0x000010, "Member 'FEndWorldItemParameters::LotteryTableID' has a wrong offset!");
static_assert(offsetof(FEndWorldItemParameters, PickUpStoryFlagID) == 0x000018, "Member 'FEndWorldItemParameters::PickUpStoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndWorldItemParameters, WorldActorInfoID) == 0x000020, "Member 'FEndWorldItemParameters::WorldActorInfoID' has a wrong offset!");

// ScriptStruct EndGame.EndTreasurePointParameters
// 0x0008 (0x0008 - 0x0000)
struct FEndTreasurePointParameters final
{
public:
	class FName                                   TreasureID;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndTreasurePointParameters) == 0x000004, "Wrong alignment on FEndTreasurePointParameters");
static_assert(sizeof(FEndTreasurePointParameters) == 0x000008, "Wrong size on FEndTreasurePointParameters");
static_assert(offsetof(FEndTreasurePointParameters, TreasureID) == 0x000000, "Member 'FEndTreasurePointParameters::TreasureID' has a wrong offset!");

// ScriptStruct EndGame.EndLayoutObjectAppendParameter
// 0x0040 (0x0040 - 0x0000)
struct FEndLayoutObjectAppendParameter final
{
public:
	TArray<struct FEndTargetPointParameters>      EndTargetPointParamArray;                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FEndWorldItemParameters>        WorldItemParamArray;                               // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FEndTreasurePointParameters>    TreasureParamArray;                                // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FEndChadleyPointParameters>     ChadleyParamArray;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLayoutObjectAppendParameter) == 0x000008, "Wrong alignment on FEndLayoutObjectAppendParameter");
static_assert(sizeof(FEndLayoutObjectAppendParameter) == 0x000040, "Wrong size on FEndLayoutObjectAppendParameter");
static_assert(offsetof(FEndLayoutObjectAppendParameter, EndTargetPointParamArray) == 0x000000, "Member 'FEndLayoutObjectAppendParameter::EndTargetPointParamArray' has a wrong offset!");
static_assert(offsetof(FEndLayoutObjectAppendParameter, WorldItemParamArray) == 0x000010, "Member 'FEndLayoutObjectAppendParameter::WorldItemParamArray' has a wrong offset!");
static_assert(offsetof(FEndLayoutObjectAppendParameter, TreasureParamArray) == 0x000020, "Member 'FEndLayoutObjectAppendParameter::TreasureParamArray' has a wrong offset!");
static_assert(offsetof(FEndLayoutObjectAppendParameter, ChadleyParamArray) == 0x000030, "Member 'FEndLayoutObjectAppendParameter::ChadleyParamArray' has a wrong offset!");

// ScriptStruct EndGame.EndLightAnimationPreviewSettings
// 0x0030 (0x0030 - 0x0000)
struct FEndLightAnimationPreviewSettings final
{
public:
	class FName                                   OverrideId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationModifierType                     ModifierType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveEvaluateInLogarithmicSpace;                  // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveDuration;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomOffset;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLightAnimationPreviewSettings) == 0x000008, "Wrong alignment on FEndLightAnimationPreviewSettings");
static_assert(sizeof(FEndLightAnimationPreviewSettings) == 0x000030, "Wrong size on FEndLightAnimationPreviewSettings");
static_assert(offsetof(FEndLightAnimationPreviewSettings, OverrideId) == 0x000000, "Member 'FEndLightAnimationPreviewSettings::OverrideId' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationPreviewSettings, ModifierType) == 0x000008, "Member 'FEndLightAnimationPreviewSettings::ModifierType' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationPreviewSettings, CurveType) == 0x000009, "Member 'FEndLightAnimationPreviewSettings::CurveType' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationPreviewSettings, CurveAsset) == 0x000010, "Member 'FEndLightAnimationPreviewSettings::CurveAsset' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationPreviewSettings, bCurveEvaluateInLogarithmicSpace) == 0x000018, "Member 'FEndLightAnimationPreviewSettings::bCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationPreviewSettings, bLoop) == 0x000019, "Member 'FEndLightAnimationPreviewSettings::bLoop' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationPreviewSettings, Duration) == 0x00001C, "Member 'FEndLightAnimationPreviewSettings::Duration' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationPreviewSettings, RandomAdditiveDuration) == 0x000020, "Member 'FEndLightAnimationPreviewSettings::RandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationPreviewSettings, RandomOffset) == 0x000024, "Member 'FEndLightAnimationPreviewSettings::RandomOffset' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationPreviewSettings, BlendInTime) == 0x000028, "Member 'FEndLightAnimationPreviewSettings::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationPreviewSettings, BlendOutTime) == 0x00002C, "Member 'FEndLightAnimationPreviewSettings::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndLightAnimationComponentSettings
// 0x0090 (0x0090 - 0x0000)
struct FEndLightAnimationComponentSettings final
{
public:
	TArray<class FName>                           ComponentNames;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEndLightAnimationParameter            Default;                                           // 0x0010(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FEndLightAnimationParameter> Override;                                          // 0x0020(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIntensityBlendInLogarithmicSpace;                 // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        DefaultCurve;                                      // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DefaultCurveAsset;                                 // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultCurveEvaluateInLogarithmicSpace;           // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultDuration;                                   // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultRandomAdditiveDuration;                     // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultRandomOffset;                               // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLightAnimationComponentSettings) == 0x000008, "Wrong alignment on FEndLightAnimationComponentSettings");
static_assert(sizeof(FEndLightAnimationComponentSettings) == 0x000090, "Wrong size on FEndLightAnimationComponentSettings");
static_assert(offsetof(FEndLightAnimationComponentSettings, ComponentNames) == 0x000000, "Member 'FEndLightAnimationComponentSettings::ComponentNames' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationComponentSettings, Default) == 0x000010, "Member 'FEndLightAnimationComponentSettings::Default' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationComponentSettings, Override) == 0x000020, "Member 'FEndLightAnimationComponentSettings::Override' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationComponentSettings, bIntensityBlendInLogarithmicSpace) == 0x000070, "Member 'FEndLightAnimationComponentSettings::bIntensityBlendInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationComponentSettings, DefaultCurve) == 0x000071, "Member 'FEndLightAnimationComponentSettings::DefaultCurve' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationComponentSettings, DefaultCurveAsset) == 0x000078, "Member 'FEndLightAnimationComponentSettings::DefaultCurveAsset' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationComponentSettings, bDefaultCurveEvaluateInLogarithmicSpace) == 0x000080, "Member 'FEndLightAnimationComponentSettings::bDefaultCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationComponentSettings, DefaultDuration) == 0x000084, "Member 'FEndLightAnimationComponentSettings::DefaultDuration' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationComponentSettings, DefaultRandomAdditiveDuration) == 0x000088, "Member 'FEndLightAnimationComponentSettings::DefaultRandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(FEndLightAnimationComponentSettings, DefaultRandomOffset) == 0x00008C, "Member 'FEndLightAnimationComponentSettings::DefaultRandomOffset' has a wrong offset!");

// ScriptStruct EndGame.EndLocationInfo
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FEndLocationInfo final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLocationInfo) == 0x000008, "Wrong alignment on FEndLocationInfo");
static_assert(sizeof(FEndLocationInfo) == 0x000048, "Wrong size on FEndLocationInfo");

// ScriptStruct EndGame.EndLocationOverwriteNameInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FEndLocationOverwriteNameInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLocationOverwriteNameInfo) == 0x000004, "Wrong alignment on FEndLocationOverwriteNameInfo");
static_assert(sizeof(FEndLocationOverwriteNameInfo) == 0x00000C, "Wrong size on FEndLocationOverwriteNameInfo");

// ScriptStruct EndGame.EndLockOnCameraParams
// 0x06E0 (0x06E0 - 0x0000)
struct alignas(0x08) FEndLockOnCameraParams final
{
public:
	uint8                                         Pad_0[0x6E0];                                      // 0x0000(0x06E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLockOnCameraParams) == 0x000008, "Wrong alignment on FEndLockOnCameraParams");
static_assert(sizeof(FEndLockOnCameraParams) == 0x0006E0, "Wrong size on FEndLockOnCameraParams");

// ScriptStruct EndGame.EndLocomotionRevaluationSetting
// 0x0028 (0x0028 - 0x0000)
struct FEndLocomotionRevaluationSetting
{
public:
	float                                         RevaluationTime;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PoseMatchingTimings;                               // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      AllowedCurrentTimeRatioRanges;                     // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLocomotionRevaluationSetting) == 0x000008, "Wrong alignment on FEndLocomotionRevaluationSetting");
static_assert(sizeof(FEndLocomotionRevaluationSetting) == 0x000028, "Wrong size on FEndLocomotionRevaluationSetting");
static_assert(offsetof(FEndLocomotionRevaluationSetting, RevaluationTime) == 0x000000, "Member 'FEndLocomotionRevaluationSetting::RevaluationTime' has a wrong offset!");
static_assert(offsetof(FEndLocomotionRevaluationSetting, PoseMatchingTimings) == 0x000008, "Member 'FEndLocomotionRevaluationSetting::PoseMatchingTimings' has a wrong offset!");
static_assert(offsetof(FEndLocomotionRevaluationSetting, AllowedCurrentTimeRatioRanges) == 0x000018, "Member 'FEndLocomotionRevaluationSetting::AllowedCurrentTimeRatioRanges' has a wrong offset!");

// ScriptStruct EndGame.EndLocomotionStrafingRevaluationSetting
// 0x0008 (0x0030 - 0x0028)
struct FEndLocomotionStrafingRevaluationSetting final : public FEndLocomotionRevaluationSetting
{
public:
	bool                                          bDisableDirectChangeDirection;                     // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideNeutral;                                  // 0x0029(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableDirectChangeDirectionForNeutral;           // 0x002A(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLocomotionStrafingRevaluationSetting) == 0x000008, "Wrong alignment on FEndLocomotionStrafingRevaluationSetting");
static_assert(sizeof(FEndLocomotionStrafingRevaluationSetting) == 0x000030, "Wrong size on FEndLocomotionStrafingRevaluationSetting");
static_assert(offsetof(FEndLocomotionStrafingRevaluationSetting, bDisableDirectChangeDirection) == 0x000028, "Member 'FEndLocomotionStrafingRevaluationSetting::bDisableDirectChangeDirection' has a wrong offset!");
static_assert(offsetof(FEndLocomotionStrafingRevaluationSetting, bOverrideNeutral) == 0x000029, "Member 'FEndLocomotionStrafingRevaluationSetting::bOverrideNeutral' has a wrong offset!");
static_assert(offsetof(FEndLocomotionStrafingRevaluationSetting, bDisableDirectChangeDirectionForNeutral) == 0x00002A, "Member 'FEndLocomotionStrafingRevaluationSetting::bDisableDirectChangeDirectionForNeutral' has a wrong offset!");

// ScriptStruct EndGame.EndLocomotionAnimGroupSetting
// 0x0028 (0x0028 - 0x0000)
struct FEndLocomotionAnimGroupSetting final
{
public:
	TArray<class FName>                           Animations;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 PoseMatchingTimings;                               // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bOverride;                                         // 0x0020(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLocomotionAnimGroupSetting) == 0x000008, "Wrong alignment on FEndLocomotionAnimGroupSetting");
static_assert(sizeof(FEndLocomotionAnimGroupSetting) == 0x000028, "Wrong size on FEndLocomotionAnimGroupSetting");
static_assert(offsetof(FEndLocomotionAnimGroupSetting, Animations) == 0x000000, "Member 'FEndLocomotionAnimGroupSetting::Animations' has a wrong offset!");
static_assert(offsetof(FEndLocomotionAnimGroupSetting, PoseMatchingTimings) == 0x000010, "Member 'FEndLocomotionAnimGroupSetting::PoseMatchingTimings' has a wrong offset!");
static_assert(offsetof(FEndLocomotionAnimGroupSetting, bOverride) == 0x000020, "Member 'FEndLocomotionAnimGroupSetting::bOverride' has a wrong offset!");

// ScriptStruct EndGame.EndLookAtCameraModule
// 0x00D8 (0x04C8 - 0x03F0)
struct FEndLookAtCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0xD8];                                     // 0x03F0(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLookAtCameraModule) == 0x000008, "Wrong alignment on FEndLookAtCameraModule");
static_assert(sizeof(FEndLookAtCameraModule) == 0x0004C8, "Wrong size on FEndLookAtCameraModule");

// ScriptStruct EndGame.EndLookAtRuntimeSetting
// 0x0348 (0x0348 - 0x0000)
struct alignas(0x08) FEndLookAtRuntimeSetting final
{
public:
	uint8                                         Pad_0[0x348];                                      // 0x0000(0x0348)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLookAtRuntimeSetting) == 0x000008, "Wrong alignment on FEndLookAtRuntimeSetting");
static_assert(sizeof(FEndLookAtRuntimeSetting) == 0x000348, "Wrong size on FEndLookAtRuntimeSetting");

// ScriptStruct EndGame.EndLookAtTargetSetting
// 0x004C (0x004C - 0x0000)
struct alignas(0x04) FEndLookAtTargetSetting final
{
public:
	uint8                                         Pad_0[0x4C];                                       // 0x0000(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLookAtTargetSetting) == 0x000004, "Wrong alignment on FEndLookAtTargetSetting");
static_assert(sizeof(FEndLookAtTargetSetting) == 0x00004C, "Wrong size on FEndLookAtTargetSetting");

// ScriptStruct EndGame.EndMenuCameraOperator
// 0x0020 (0x0108 - 0x00E8)
struct FEndMenuCameraOperator final : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0x20];                                      // 0x00E8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMenuCameraOperator) == 0x000008, "Wrong alignment on FEndMenuCameraOperator");
static_assert(sizeof(FEndMenuCameraOperator) == 0x000108, "Wrong size on FEndMenuCameraOperator");

// ScriptStruct EndGame.EndMenuDamageInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FEndMenuDamageInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMenuDamageInfo) == 0x000004, "Wrong alignment on FEndMenuDamageInfo");
static_assert(sizeof(FEndMenuDamageInfo) == 0x000020, "Wrong size on FEndMenuDamageInfo");

// ScriptStruct EndGame.EndMenuPlayerImageSetting
// 0x00A8 (0x00A8 - 0x0000)
struct FEndMenuPlayerImageSetting final
{
public:
	struct FSoftObjectPath                        AngleImagePath;                                    // 0x0000(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        BustupImagePath;                                   // 0x0018(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        TopImagePath;                                      // 0x0030(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        FaceImagePath;                                     // 0x0048(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        JoinImagePath;                                     // 0x0060(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReJoinImagePath;                                   // 0x0078(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CommandMenuImagePath;                              // 0x0090(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuPlayerImageSetting) == 0x000008, "Wrong alignment on FEndMenuPlayerImageSetting");
static_assert(sizeof(FEndMenuPlayerImageSetting) == 0x0000A8, "Wrong size on FEndMenuPlayerImageSetting");
static_assert(offsetof(FEndMenuPlayerImageSetting, AngleImagePath) == 0x000000, "Member 'FEndMenuPlayerImageSetting::AngleImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerImageSetting, BustupImagePath) == 0x000018, "Member 'FEndMenuPlayerImageSetting::BustupImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerImageSetting, TopImagePath) == 0x000030, "Member 'FEndMenuPlayerImageSetting::TopImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerImageSetting, FaceImagePath) == 0x000048, "Member 'FEndMenuPlayerImageSetting::FaceImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerImageSetting, JoinImagePath) == 0x000060, "Member 'FEndMenuPlayerImageSetting::JoinImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerImageSetting, ReJoinImagePath) == 0x000078, "Member 'FEndMenuPlayerImageSetting::ReJoinImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerImageSetting, CommandMenuImagePath) == 0x000090, "Member 'FEndMenuPlayerImageSetting::CommandMenuImagePath' has a wrong offset!");

// ScriptStruct EndGame.EndMenuPlayerOverrideImageSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FEndMenuPlayerOverrideImageSetting final
{
public:
	class FName                                   StoryFlag;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndMenuPlayerImageSetting             Images;                                            // 0x0008(0x00A8)(Edit, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuPlayerOverrideImageSetting) == 0x000008, "Wrong alignment on FEndMenuPlayerOverrideImageSetting");
static_assert(sizeof(FEndMenuPlayerOverrideImageSetting) == 0x0000B0, "Wrong size on FEndMenuPlayerOverrideImageSetting");
static_assert(offsetof(FEndMenuPlayerOverrideImageSetting, StoryFlag) == 0x000000, "Member 'FEndMenuPlayerOverrideImageSetting::StoryFlag' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerOverrideImageSetting, Images) == 0x000008, "Member 'FEndMenuPlayerOverrideImageSetting::Images' has a wrong offset!");

// ScriptStruct EndGame.EndMenuPlayerSetting
// 0x0140 (0x0140 - 0x0000)
struct FEndMenuPlayerSetting final
{
public:
	class FString                                 FirstName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnFirstName;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnLastName;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullName;                                          // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EquipReleaseStoryFlag;                             // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndMenuPlayerImageSetting             DefaultImages;                                     // 0x0058(0x00A8)(Edit, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SkillTreeBgImagePath;                              // 0x0100(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SkillTreeOverlayImagePath;                         // 0x0118(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndMenuPlayerOverrideImageSetting> OverrideImages;                                    // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuPlayerSetting) == 0x000008, "Wrong alignment on FEndMenuPlayerSetting");
static_assert(sizeof(FEndMenuPlayerSetting) == 0x000140, "Wrong size on FEndMenuPlayerSetting");
static_assert(offsetof(FEndMenuPlayerSetting, FirstName) == 0x000000, "Member 'FEndMenuPlayerSetting::FirstName' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerSetting, LastName) == 0x000010, "Member 'FEndMenuPlayerSetting::LastName' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerSetting, EnFirstName) == 0x000020, "Member 'FEndMenuPlayerSetting::EnFirstName' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerSetting, EnLastName) == 0x000030, "Member 'FEndMenuPlayerSetting::EnLastName' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerSetting, FullName) == 0x000040, "Member 'FEndMenuPlayerSetting::FullName' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerSetting, EquipReleaseStoryFlag) == 0x000050, "Member 'FEndMenuPlayerSetting::EquipReleaseStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerSetting, DefaultImages) == 0x000058, "Member 'FEndMenuPlayerSetting::DefaultImages' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerSetting, SkillTreeBgImagePath) == 0x000100, "Member 'FEndMenuPlayerSetting::SkillTreeBgImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerSetting, SkillTreeOverlayImagePath) == 0x000118, "Member 'FEndMenuPlayerSetting::SkillTreeOverlayImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuPlayerSetting, OverrideImages) == 0x000130, "Member 'FEndMenuPlayerSetting::OverrideImages' has a wrong offset!");

// ScriptStruct EndGame.EndMenuPolygonVertex
// 0x0014 (0x0014 - 0x0000)
struct FEndMenuPolygonVertex final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TexCoords;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuPolygonVertex) == 0x000004, "Wrong alignment on FEndMenuPolygonVertex");
static_assert(sizeof(FEndMenuPolygonVertex) == 0x000014, "Wrong size on FEndMenuPolygonVertex");
static_assert(offsetof(FEndMenuPolygonVertex, Position) == 0x000000, "Member 'FEndMenuPolygonVertex::Position' has a wrong offset!");
static_assert(offsetof(FEndMenuPolygonVertex, TexCoords) == 0x000008, "Member 'FEndMenuPolygonVertex::TexCoords' has a wrong offset!");
static_assert(offsetof(FEndMenuPolygonVertex, Color) == 0x000010, "Member 'FEndMenuPolygonVertex::Color' has a wrong offset!");

// ScriptStruct EndGame.EndMenuResidentImageMapping
// 0x0090 (0x0090 - 0x0000)
struct FEndMenuResidentImageMapping final
{
public:
	class FName                                   MappingName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuResidentImageMapping) == 0x000008, "Wrong alignment on FEndMenuResidentImageMapping");
static_assert(sizeof(FEndMenuResidentImageMapping) == 0x000090, "Wrong size on FEndMenuResidentImageMapping");
static_assert(offsetof(FEndMenuResidentImageMapping, MappingName) == 0x000000, "Member 'FEndMenuResidentImageMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FEndMenuResidentImageMapping, Brush) == 0x000008, "Member 'FEndMenuResidentImageMapping::Brush' has a wrong offset!");

// ScriptStruct EndGame.EndMenuImageMapping
// 0x00C8 (0x00C8 - 0x0000)
struct FEndMenuImageMapping final
{
public:
	class FName                                   MappingName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ImagePath;                                         // 0x0090(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SubFrameImagePath;                                 // 0x00A8(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChangeFlag;                                        // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuImageMapping) == 0x000008, "Wrong alignment on FEndMenuImageMapping");
static_assert(sizeof(FEndMenuImageMapping) == 0x0000C8, "Wrong size on FEndMenuImageMapping");
static_assert(offsetof(FEndMenuImageMapping, MappingName) == 0x000000, "Member 'FEndMenuImageMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FEndMenuImageMapping, Brush) == 0x000008, "Member 'FEndMenuImageMapping::Brush' has a wrong offset!");
static_assert(offsetof(FEndMenuImageMapping, ImagePath) == 0x000090, "Member 'FEndMenuImageMapping::ImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuImageMapping, SubFrameImagePath) == 0x0000A8, "Member 'FEndMenuImageMapping::SubFrameImagePath' has a wrong offset!");
static_assert(offsetof(FEndMenuImageMapping, ChangeFlag) == 0x0000C0, "Member 'FEndMenuImageMapping::ChangeFlag' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColorMapping
// 0x0018 (0x0018 - 0x0000)
struct FEndMenuColorMapping final
{
public:
	class FName                                   MappingName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColorMapping) == 0x000004, "Wrong alignment on FEndMenuColorMapping");
static_assert(sizeof(FEndMenuColorMapping) == 0x000018, "Wrong size on FEndMenuColorMapping");
static_assert(offsetof(FEndMenuColorMapping, MappingName) == 0x000000, "Member 'FEndMenuColorMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FEndMenuColorMapping, Color) == 0x000008, "Member 'FEndMenuColorMapping::Color' has a wrong offset!");

// ScriptStruct EndGame.EndMenuJoin
// 0x0002 (0x0002 - 0x0000)
struct FEndMenuJoin final
{
public:
	EPlayerType                                   member;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuJoinMode                              Mode;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuJoin) == 0x000001, "Wrong alignment on FEndMenuJoin");
static_assert(sizeof(FEndMenuJoin) == 0x000002, "Wrong size on FEndMenuJoin");
static_assert(offsetof(FEndMenuJoin, member) == 0x000000, "Member 'FEndMenuJoin::member' has a wrong offset!");
static_assert(offsetof(FEndMenuJoin, Mode) == 0x000001, "Member 'FEndMenuJoin::Mode' has a wrong offset!");

// ScriptStruct EndGame.EndMiniGameBuggyCameraModule
// 0x0040 (0x0430 - 0x03F0)
struct alignas(0x10) FEndMiniGameBuggyCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x40];                                     // 0x03F0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMiniGameBuggyCameraModule) == 0x000010, "Wrong alignment on FEndMiniGameBuggyCameraModule");
static_assert(sizeof(FEndMiniGameBuggyCameraModule) == 0x000430, "Wrong size on FEndMiniGameBuggyCameraModule");

// ScriptStruct EndGame.EndMinigameInputRotationCameraModule
// 0x0038 (0x0428 - 0x03F0)
struct FEndMinigameInputRotationCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x38];                                     // 0x03F0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMinigameInputRotationCameraModule) == 0x000008, "Wrong alignment on FEndMinigameInputRotationCameraModule");
static_assert(sizeof(FEndMinigameInputRotationCameraModule) == 0x000428, "Wrong size on FEndMinigameInputRotationCameraModule");

// ScriptStruct EndGame.EndMobCrowdAttachmentGroup
// 0x0020 (0x0020 - 0x0000)
struct FEndMobCrowdAttachmentGroup final
{
public:
	class FName                                   AttachSocketName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInstancedStaticMeshComponent*          InstancedStaticMeshComponent;                      // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     DefaultTransforms;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMobCrowdAttachmentGroup) == 0x000008, "Wrong alignment on FEndMobCrowdAttachmentGroup");
static_assert(sizeof(FEndMobCrowdAttachmentGroup) == 0x000020, "Wrong size on FEndMobCrowdAttachmentGroup");
static_assert(offsetof(FEndMobCrowdAttachmentGroup, AttachSocketName) == 0x000000, "Member 'FEndMobCrowdAttachmentGroup::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdAttachmentGroup, InstancedStaticMeshComponent) == 0x000008, "Member 'FEndMobCrowdAttachmentGroup::InstancedStaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdAttachmentGroup, DefaultTransforms) == 0x000010, "Member 'FEndMobCrowdAttachmentGroup::DefaultTransforms' has a wrong offset!");

// ScriptStruct EndGame.EndMobCrowdMeshOverride
// 0x0028 (0x0028 - 0x0000)
struct FEndMobCrowdMeshOverride final
{
public:
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          AttachMesh;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCastShadow;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMobCrowdMeshOverride) == 0x000008, "Wrong alignment on FEndMobCrowdMeshOverride");
static_assert(sizeof(FEndMobCrowdMeshOverride) == 0x000028, "Wrong size on FEndMobCrowdMeshOverride");
static_assert(offsetof(FEndMobCrowdMeshOverride, AnimSequence) == 0x000000, "Member 'FEndMobCrowdMeshOverride::AnimSequence' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdMeshOverride, AttachMesh) == 0x000008, "Member 'FEndMobCrowdMeshOverride::AttachMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdMeshOverride, AttachSocketName) == 0x000010, "Member 'FEndMobCrowdMeshOverride::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdMeshOverride, StaticMesh) == 0x000018, "Member 'FEndMobCrowdMeshOverride::StaticMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdMeshOverride, bForceCastShadow) == 0x000020, "Member 'FEndMobCrowdMeshOverride::bForceCastShadow' has a wrong offset!");

// ScriptStruct EndGame.EndMobCrowdGroup
// 0x0138 (0x0138 - 0x0000)
struct FEndMobCrowdGroup final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimStartTimeRate;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          AttachMesh;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            AttachStaticMesh;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FEndMobCrowdMeshOverride> Override;                                          // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MasterComponent;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MasterAttachComponent;                             // 0x0090(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         SlaveComponents;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USkeletalMeshComponent*>         SlaveAttachComponents;                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x10];                                      // 0x00C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UInstancedStaticMeshComponent*          InstancedStaticMeshComponent;                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInstancedStaticMeshComponent*          InstancedAttachStaticMeshComponent;                // 0x00D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x58];                                      // 0x00E0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMobCrowdGroup) == 0x000008, "Wrong alignment on FEndMobCrowdGroup");
static_assert(sizeof(FEndMobCrowdGroup) == 0x000138, "Wrong size on FEndMobCrowdGroup");
static_assert(offsetof(FEndMobCrowdGroup, SkeletalMesh) == 0x000000, "Member 'FEndMobCrowdGroup::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, AnimSequence) == 0x000008, "Member 'FEndMobCrowdGroup::AnimSequence' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, AnimStartTimeRate) == 0x000010, "Member 'FEndMobCrowdGroup::AnimStartTimeRate' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, AttachMesh) == 0x000018, "Member 'FEndMobCrowdGroup::AttachMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, AttachSocketName) == 0x000020, "Member 'FEndMobCrowdGroup::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, StaticMesh) == 0x000028, "Member 'FEndMobCrowdGroup::StaticMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, AttachStaticMesh) == 0x000030, "Member 'FEndMobCrowdGroup::AttachStaticMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, Override) == 0x000038, "Member 'FEndMobCrowdGroup::Override' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, MasterComponent) == 0x000088, "Member 'FEndMobCrowdGroup::MasterComponent' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, MasterAttachComponent) == 0x000090, "Member 'FEndMobCrowdGroup::MasterAttachComponent' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, SlaveComponents) == 0x0000A0, "Member 'FEndMobCrowdGroup::SlaveComponents' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, SlaveAttachComponents) == 0x0000B0, "Member 'FEndMobCrowdGroup::SlaveAttachComponents' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, InstancedStaticMeshComponent) == 0x0000D0, "Member 'FEndMobCrowdGroup::InstancedStaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdGroup, InstancedAttachStaticMeshComponent) == 0x0000D8, "Member 'FEndMobCrowdGroup::InstancedAttachStaticMeshComponent' has a wrong offset!");

// ScriptStruct EndGame.EndMobCrowdMesh
// 0x0080 (0x0080 - 0x0000)
struct FEndMobCrowdMesh final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          AttachMesh;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            AttachStaticMesh;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FEndMobCrowdMeshOverride> Override;                                          // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMobCrowdMesh) == 0x000008, "Wrong alignment on FEndMobCrowdMesh");
static_assert(sizeof(FEndMobCrowdMesh) == 0x000080, "Wrong size on FEndMobCrowdMesh");
static_assert(offsetof(FEndMobCrowdMesh, SkeletalMesh) == 0x000000, "Member 'FEndMobCrowdMesh::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdMesh, AnimSequence) == 0x000008, "Member 'FEndMobCrowdMesh::AnimSequence' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdMesh, AttachMesh) == 0x000010, "Member 'FEndMobCrowdMesh::AttachMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdMesh, AttachSocketName) == 0x000018, "Member 'FEndMobCrowdMesh::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdMesh, StaticMesh) == 0x000020, "Member 'FEndMobCrowdMesh::StaticMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdMesh, AttachStaticMesh) == 0x000028, "Member 'FEndMobCrowdMesh::AttachStaticMesh' has a wrong offset!");
static_assert(offsetof(FEndMobCrowdMesh, Override) == 0x000030, "Member 'FEndMobCrowdMesh::Override' has a wrong offset!");

// ScriptStruct EndGame.EndMobPrefabWeaponRegistry
// 0x00A0 (0x00A0 - 0x0000)
struct FEndMobPrefabWeaponRegistry final
{
public:
	TSoftClassPtr<class UClass>                   WeaponClass;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AEndSkeletalMeshActorBase>  TargetWeaponClass;                                 // 0x0028(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachOffsetLocation;                              // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AttachOffsetRotation;                              // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, class UAnimSequenceBase*>   MotionTable;                                       // 0x0050(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMobPrefabWeaponRegistry) == 0x000008, "Wrong alignment on FEndMobPrefabWeaponRegistry");
static_assert(sizeof(FEndMobPrefabWeaponRegistry) == 0x0000A0, "Wrong size on FEndMobPrefabWeaponRegistry");
static_assert(offsetof(FEndMobPrefabWeaponRegistry, WeaponClass) == 0x000000, "Member 'FEndMobPrefabWeaponRegistry::WeaponClass' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabWeaponRegistry, TargetWeaponClass) == 0x000028, "Member 'FEndMobPrefabWeaponRegistry::TargetWeaponClass' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabWeaponRegistry, AttachSocketName) == 0x000030, "Member 'FEndMobPrefabWeaponRegistry::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabWeaponRegistry, AttachOffsetLocation) == 0x000038, "Member 'FEndMobPrefabWeaponRegistry::AttachOffsetLocation' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabWeaponRegistry, AttachOffsetRotation) == 0x000044, "Member 'FEndMobPrefabWeaponRegistry::AttachOffsetRotation' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabWeaponRegistry, MotionTable) == 0x000050, "Member 'FEndMobPrefabWeaponRegistry::MotionTable' has a wrong offset!");

// ScriptStruct EndGame.EndMobAnimParam
// 0x0010 (0x0010 - 0x0000)
struct FEndMobAnimParam final
{
public:
	class UAnimationAsset*                        Anim;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotAvoid;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotLookAt;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotDistReaction;                                  // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMobAnimParam) == 0x000008, "Wrong alignment on FEndMobAnimParam");
static_assert(sizeof(FEndMobAnimParam) == 0x000010, "Wrong size on FEndMobAnimParam");
static_assert(offsetof(FEndMobAnimParam, Anim) == 0x000000, "Member 'FEndMobAnimParam::Anim' has a wrong offset!");
static_assert(offsetof(FEndMobAnimParam, bNotAvoid) == 0x000008, "Member 'FEndMobAnimParam::bNotAvoid' has a wrong offset!");
static_assert(offsetof(FEndMobAnimParam, bNotLookAt) == 0x000009, "Member 'FEndMobAnimParam::bNotLookAt' has a wrong offset!");
static_assert(offsetof(FEndMobAnimParam, bNotDistReaction) == 0x00000A, "Member 'FEndMobAnimParam::bNotDistReaction' has a wrong offset!");

// ScriptStruct EndGame.EndMobPrefabRegistry
// 0x02A0 (0x02A0 - 0x0000)
struct FEndMobPrefabRegistry final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaSpecID;                                       // 0x0008(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActualCharacterClass;                              // 0x0038(0x0028)(Deprecated, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EWeaponSlot, struct FEndMobPrefabWeaponRegistry> Weapons;                                           // 0x0060(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x00B0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OffsetTranslation;                                 // 0x00E0(0x000C)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x00EC(0x000C)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNoGroundDefault;                                  // 0x00F8(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoGroundInstance;                                 // 0x00F9(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachParentMobId;                                 // 0x00FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMobPrefabFitGroundType                    FitGroundType;                                     // 0x0104(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InitialLoopMotionName;                             // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InitialLoopMotionTimeLinkParentMobId;              // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InitialLookAtTargetMobId;                          // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialLookAtBlendRate;                            // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      InitialLoopMotion;                                 // 0x0128(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndMobAnimParam                       BaseAnimParam;                                     // 0x0130(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                PartialLoopMotionTable;                            // 0x0140(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, class UAnimSequenceBase*>   MotionTable;                                       // 0x0190(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                MotionLookupTable;                                 // 0x01E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                BoneFilterTableWhenMoving;                         // 0x0230(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   AnimSetName;                                       // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndAnimSet*                            AnimSet;                                           // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndMobPrefabBoneControlRegistryOverride> BoneControls;                                      // 0x0290(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMobPrefabRegistry) == 0x000010, "Wrong alignment on FEndMobPrefabRegistry");
static_assert(sizeof(FEndMobPrefabRegistry) == 0x0002A0, "Wrong size on FEndMobPrefabRegistry");
static_assert(offsetof(FEndMobPrefabRegistry, MobId) == 0x000000, "Member 'FEndMobPrefabRegistry::MobId' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, CharaSpecID) == 0x000008, "Member 'FEndMobPrefabRegistry::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, CharacterClass) == 0x000010, "Member 'FEndMobPrefabRegistry::CharacterClass' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, ActualCharacterClass) == 0x000038, "Member 'FEndMobPrefabRegistry::ActualCharacterClass' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, Weapons) == 0x000060, "Member 'FEndMobPrefabRegistry::Weapons' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, Transform) == 0x0000B0, "Member 'FEndMobPrefabRegistry::Transform' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, OffsetTranslation) == 0x0000E0, "Member 'FEndMobPrefabRegistry::OffsetTranslation' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, OffsetRotation) == 0x0000EC, "Member 'FEndMobPrefabRegistry::OffsetRotation' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, bNoGroundDefault) == 0x0000F8, "Member 'FEndMobPrefabRegistry::bNoGroundDefault' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, bNoGroundInstance) == 0x0000F9, "Member 'FEndMobPrefabRegistry::bNoGroundInstance' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, AttachParentMobId) == 0x0000FC, "Member 'FEndMobPrefabRegistry::AttachParentMobId' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, FitGroundType) == 0x000104, "Member 'FEndMobPrefabRegistry::FitGroundType' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, InitialLoopMotionName) == 0x000108, "Member 'FEndMobPrefabRegistry::InitialLoopMotionName' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, InitialLoopMotionTimeLinkParentMobId) == 0x000110, "Member 'FEndMobPrefabRegistry::InitialLoopMotionTimeLinkParentMobId' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, InitialLookAtTargetMobId) == 0x000118, "Member 'FEndMobPrefabRegistry::InitialLookAtTargetMobId' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, InitialLookAtBlendRate) == 0x000120, "Member 'FEndMobPrefabRegistry::InitialLookAtBlendRate' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, InitialLoopMotion) == 0x000128, "Member 'FEndMobPrefabRegistry::InitialLoopMotion' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, BaseAnimParam) == 0x000130, "Member 'FEndMobPrefabRegistry::BaseAnimParam' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, PartialLoopMotionTable) == 0x000140, "Member 'FEndMobPrefabRegistry::PartialLoopMotionTable' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, MotionTable) == 0x000190, "Member 'FEndMobPrefabRegistry::MotionTable' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, MotionLookupTable) == 0x0001E0, "Member 'FEndMobPrefabRegistry::MotionLookupTable' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, BoneFilterTableWhenMoving) == 0x000230, "Member 'FEndMobPrefabRegistry::BoneFilterTableWhenMoving' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, AnimSetName) == 0x000280, "Member 'FEndMobPrefabRegistry::AnimSetName' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, AnimSet) == 0x000288, "Member 'FEndMobPrefabRegistry::AnimSet' has a wrong offset!");
static_assert(offsetof(FEndMobPrefabRegistry, BoneControls) == 0x000290, "Member 'FEndMobPrefabRegistry::BoneControls' has a wrong offset!");

// ScriptStruct EndGame.EndMobRouteSplineCurveDefaults
// 0x0004 (0x0004 - 0x0000)
struct FEndMobRouteSplineCurveDefaults final
{
public:
	float                                         DefaultWidth;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMobRouteSplineCurveDefaults) == 0x000004, "Wrong alignment on FEndMobRouteSplineCurveDefaults");
static_assert(sizeof(FEndMobRouteSplineCurveDefaults) == 0x000004, "Wrong size on FEndMobRouteSplineCurveDefaults");
static_assert(offsetof(FEndMobRouteSplineCurveDefaults, DefaultWidth) == 0x000000, "Member 'FEndMobRouteSplineCurveDefaults::DefaultWidth' has a wrong offset!");

// ScriptStruct EndGame.EndMovementSettingsGravity
// 0x0008 (0x0008 - 0x0000)
struct FEndMovementSettingsGravity final
{
public:
	float                                         AutoFitUpVectorRotationSpeed;                      // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoFitUpVectorWalkableFloorAngle;                 // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMovementSettingsGravity) == 0x000004, "Wrong alignment on FEndMovementSettingsGravity");
static_assert(sizeof(FEndMovementSettingsGravity) == 0x000008, "Wrong size on FEndMovementSettingsGravity");
static_assert(offsetof(FEndMovementSettingsGravity, AutoFitUpVectorRotationSpeed) == 0x000000, "Member 'FEndMovementSettingsGravity::AutoFitUpVectorRotationSpeed' has a wrong offset!");
static_assert(offsetof(FEndMovementSettingsGravity, AutoFitUpVectorWalkableFloorAngle) == 0x000004, "Member 'FEndMovementSettingsGravity::AutoFitUpVectorWalkableFloorAngle' has a wrong offset!");

// ScriptStruct EndGame.EndCollisionShapeUnit
// 0x0040 (0x0040 - 0x0000)
struct FEndCollisionShapeUnit final
{
public:
	EEndCollision                                 ShapeType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            ShapeMesh;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShapeSize;                                         // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ShapeScale;                                        // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCollisionShapeUnit) == 0x000008, "Wrong alignment on FEndCollisionShapeUnit");
static_assert(sizeof(FEndCollisionShapeUnit) == 0x000040, "Wrong size on FEndCollisionShapeUnit");
static_assert(offsetof(FEndCollisionShapeUnit, ShapeType) == 0x000000, "Member 'FEndCollisionShapeUnit::ShapeType' has a wrong offset!");
static_assert(offsetof(FEndCollisionShapeUnit, ShapeMesh) == 0x000008, "Member 'FEndCollisionShapeUnit::ShapeMesh' has a wrong offset!");
static_assert(offsetof(FEndCollisionShapeUnit, ShapeSize) == 0x000010, "Member 'FEndCollisionShapeUnit::ShapeSize' has a wrong offset!");
static_assert(offsetof(FEndCollisionShapeUnit, RelativeLocation) == 0x00001C, "Member 'FEndCollisionShapeUnit::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FEndCollisionShapeUnit, RelativeRotation) == 0x000028, "Member 'FEndCollisionShapeUnit::RelativeRotation' has a wrong offset!");
static_assert(offsetof(FEndCollisionShapeUnit, ShapeScale) == 0x000034, "Member 'FEndCollisionShapeUnit::ShapeScale' has a wrong offset!");

// ScriptStruct EndGame.EndNavGridData
// 0x0024 (0x0024 - 0x0000)
struct FEndNavGridData final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridX;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridY;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerID;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0014(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNavGridData) == 0x000004, "Wrong alignment on FEndNavGridData");
static_assert(sizeof(FEndNavGridData) == 0x000024, "Wrong size on FEndNavGridData");
static_assert(offsetof(FEndNavGridData, AssetName) == 0x000000, "Member 'FEndNavGridData::AssetName' has a wrong offset!");
static_assert(offsetof(FEndNavGridData, GridX) == 0x000008, "Member 'FEndNavGridData::GridX' has a wrong offset!");
static_assert(offsetof(FEndNavGridData, GridY) == 0x00000C, "Member 'FEndNavGridData::GridY' has a wrong offset!");
static_assert(offsetof(FEndNavGridData, LayerID) == 0x000010, "Member 'FEndNavGridData::LayerID' has a wrong offset!");
static_assert(offsetof(FEndNavGridData, Center) == 0x000014, "Member 'FEndNavGridData::Center' has a wrong offset!");
static_assert(offsetof(FEndNavGridData, HalfHeight) == 0x000020, "Member 'FEndNavGridData::HalfHeight' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapLayerPrototypeDataV2
// 0x0068 (0x0068 - 0x0000)
struct FEndNaviMapLayerPrototypeDataV2 final
{
public:
	class FString                                 LocationName;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PseudoLocationID;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LongName;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortName;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AreaNames;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x004C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewPriority;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InitialPoint;                                      // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndNaviMapLayerPrototypeDataV2) == 0x000008, "Wrong alignment on FEndNaviMapLayerPrototypeDataV2");
static_assert(sizeof(FEndNaviMapLayerPrototypeDataV2) == 0x000068, "Wrong size on FEndNaviMapLayerPrototypeDataV2");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, LocationName) == 0x000000, "Member 'FEndNaviMapLayerPrototypeDataV2::LocationName' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, PseudoLocationID) == 0x000010, "Member 'FEndNaviMapLayerPrototypeDataV2::PseudoLocationID' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, LongName) == 0x000018, "Member 'FEndNaviMapLayerPrototypeDataV2::LongName' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, ShortName) == 0x000028, "Member 'FEndNaviMapLayerPrototypeDataV2::ShortName' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, AreaNames) == 0x000038, "Member 'FEndNaviMapLayerPrototypeDataV2::AreaNames' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, SortOrder) == 0x000048, "Member 'FEndNaviMapLayerPrototypeDataV2::SortOrder' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, Offset) == 0x00004C, "Member 'FEndNaviMapLayerPrototypeDataV2::Offset' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, ViewPriority) == 0x000058, "Member 'FEndNaviMapLayerPrototypeDataV2::ViewPriority' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, InitialPoint) == 0x00005C, "Member 'FEndNaviMapLayerPrototypeDataV2::InitialPoint' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapLocationPrototypeDataV2
// 0x0050 (0x0050 - 0x0000)
struct FEndNaviMapLocationPrototypeDataV2 final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnName;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndNaviMapLayerPrototypeDataV2> layers;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MinPixelPerCm;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidPixelPerCm;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPixelPerCm;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                CursorAreaMargin;                                  // 0x003C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EEndMenuAreaMapLOD                            ZoomMiddleLOD;                                     // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndNaviMapLocationPrototypeDataV2) == 0x000008, "Wrong alignment on FEndNaviMapLocationPrototypeDataV2");
static_assert(sizeof(FEndNaviMapLocationPrototypeDataV2) == 0x000050, "Wrong size on FEndNaviMapLocationPrototypeDataV2");
static_assert(offsetof(FEndNaviMapLocationPrototypeDataV2, Name) == 0x000000, "Member 'FEndNaviMapLocationPrototypeDataV2::Name' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationPrototypeDataV2, EnName) == 0x000010, "Member 'FEndNaviMapLocationPrototypeDataV2::EnName' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationPrototypeDataV2, layers) == 0x000020, "Member 'FEndNaviMapLocationPrototypeDataV2::layers' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationPrototypeDataV2, MinPixelPerCm) == 0x000030, "Member 'FEndNaviMapLocationPrototypeDataV2::MinPixelPerCm' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationPrototypeDataV2, MidPixelPerCm) == 0x000034, "Member 'FEndNaviMapLocationPrototypeDataV2::MidPixelPerCm' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationPrototypeDataV2, MaxPixelPerCm) == 0x000038, "Member 'FEndNaviMapLocationPrototypeDataV2::MaxPixelPerCm' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationPrototypeDataV2, CursorAreaMargin) == 0x00003C, "Member 'FEndNaviMapLocationPrototypeDataV2::CursorAreaMargin' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationPrototypeDataV2, ZoomMiddleLOD) == 0x00004C, "Member 'FEndNaviMapLocationPrototypeDataV2::ZoomMiddleLOD' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapTexturePatternInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndNaviMapTexturePatternInfo final
{
public:
	class FName                                   PatternName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NavMeshDirName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapTexturePatternInfo) == 0x000004, "Wrong alignment on FEndNaviMapTexturePatternInfo");
static_assert(sizeof(FEndNaviMapTexturePatternInfo) == 0x000010, "Wrong size on FEndNaviMapTexturePatternInfo");
static_assert(offsetof(FEndNaviMapTexturePatternInfo, PatternName) == 0x000000, "Member 'FEndNaviMapTexturePatternInfo::PatternName' has a wrong offset!");
static_assert(offsetof(FEndNaviMapTexturePatternInfo, NavMeshDirName) == 0x000008, "Member 'FEndNaviMapTexturePatternInfo::NavMeshDirName' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapSilhouetteEdge
// 0x0010 (0x0010 - 0x0000)
struct FEndNaviMapSilhouetteEdge final
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapSilhouetteEdge) == 0x000008, "Wrong alignment on FEndNaviMapSilhouetteEdge");
static_assert(sizeof(FEndNaviMapSilhouetteEdge) == 0x000010, "Wrong size on FEndNaviMapSilhouetteEdge");
static_assert(offsetof(FEndNaviMapSilhouetteEdge, Vertices) == 0x000000, "Member 'FEndNaviMapSilhouetteEdge::Vertices' has a wrong offset!");

// ScriptStruct EndGame.EndSceneNaviMapRegionVolumeInfo
// 0x0050 (0x0050 - 0x0000)
struct FEndSceneNaviMapRegionVolumeInfo final
{
public:
	class FName                                   LocationId;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NaviMapId;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RegionName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VolumeName;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   VolumeBoundsWithWorldOffset;                       // 0x0020(0x001C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndNaviMapVolumePoly>          VolumePolysWithWorldOffset;                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndSceneNaviMapRegionVolumeInfo) == 0x000008, "Wrong alignment on FEndSceneNaviMapRegionVolumeInfo");
static_assert(sizeof(FEndSceneNaviMapRegionVolumeInfo) == 0x000050, "Wrong size on FEndSceneNaviMapRegionVolumeInfo");
static_assert(offsetof(FEndSceneNaviMapRegionVolumeInfo, LocationId) == 0x000000, "Member 'FEndSceneNaviMapRegionVolumeInfo::LocationId' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapRegionVolumeInfo, NaviMapId) == 0x000008, "Member 'FEndSceneNaviMapRegionVolumeInfo::NaviMapId' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapRegionVolumeInfo, RegionName) == 0x000010, "Member 'FEndSceneNaviMapRegionVolumeInfo::RegionName' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapRegionVolumeInfo, VolumeName) == 0x000018, "Member 'FEndSceneNaviMapRegionVolumeInfo::VolumeName' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapRegionVolumeInfo, VolumeBoundsWithWorldOffset) == 0x000020, "Member 'FEndSceneNaviMapRegionVolumeInfo::VolumeBoundsWithWorldOffset' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapRegionVolumeInfo, VolumePolysWithWorldOffset) == 0x000040, "Member 'FEndSceneNaviMapRegionVolumeInfo::VolumePolysWithWorldOffset' has a wrong offset!");

// ScriptStruct EndGame.EndSceneNaviMapVolumeInfo
// 0x0050 (0x0050 - 0x0000)
struct FEndSceneNaviMapVolumeInfo final
{
public:
	EEndNaviMapLayer                              LayerNumber;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndNaviMapOpenGroup                          OpenGroupNumber;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndNaviMapVisitGroup                         VisitGroupNumber;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueIndex;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VolumeName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   VolumeBoundsWithWorldOffset;                       // 0x0018(0x001C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndSceneNaviMapVolumeLodInfo>  VolumeLods;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSceneNaviMapVolumeInfo) == 0x000008, "Wrong alignment on FEndSceneNaviMapVolumeInfo");
static_assert(sizeof(FEndSceneNaviMapVolumeInfo) == 0x000050, "Wrong size on FEndSceneNaviMapVolumeInfo");
static_assert(offsetof(FEndSceneNaviMapVolumeInfo, LayerNumber) == 0x000000, "Member 'FEndSceneNaviMapVolumeInfo::LayerNumber' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapVolumeInfo, OpenGroupNumber) == 0x000004, "Member 'FEndSceneNaviMapVolumeInfo::OpenGroupNumber' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapVolumeInfo, VisitGroupNumber) == 0x000008, "Member 'FEndSceneNaviMapVolumeInfo::VisitGroupNumber' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapVolumeInfo, UniqueIndex) == 0x00000C, "Member 'FEndSceneNaviMapVolumeInfo::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapVolumeInfo, VolumeName) == 0x000010, "Member 'FEndSceneNaviMapVolumeInfo::VolumeName' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapVolumeInfo, VolumeBoundsWithWorldOffset) == 0x000018, "Member 'FEndSceneNaviMapVolumeInfo::VolumeBoundsWithWorldOffset' has a wrong offset!");
static_assert(offsetof(FEndSceneNaviMapVolumeInfo, VolumeLods) == 0x000038, "Member 'FEndSceneNaviMapVolumeInfo::VolumeLods' has a wrong offset!");

// ScriptStruct EndGame.WallManageParam
// 0x0008 (0x0008 - 0x0000)
struct FWallManageParam final
{
public:
	int32                                         WallID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWallManageParam) == 0x000004, "Wrong alignment on FWallManageParam");
static_assert(sizeof(FWallManageParam) == 0x000008, "Wrong size on FWallManageParam");
static_assert(offsetof(FWallManageParam, WallID) == 0x000000, "Member 'FWallManageParam::WallID' has a wrong offset!");
static_assert(offsetof(FWallManageParam, GroupId) == 0x000004, "Member 'FWallManageParam::GroupId' has a wrong offset!");

// ScriptStruct EndGame.IconInfo
// 0x0020 (0x0020 - 0x0000)
struct FIconInfo final
{
public:
	int32                                         iconIndex;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 textName;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          notDispel;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIconInfo) == 0x000008, "Wrong alignment on FIconInfo");
static_assert(sizeof(FIconInfo) == 0x000020, "Wrong size on FIconInfo");
static_assert(offsetof(FIconInfo, iconIndex) == 0x000000, "Member 'FIconInfo::iconIndex' has a wrong offset!");
static_assert(offsetof(FIconInfo, textName) == 0x000008, "Member 'FIconInfo::textName' has a wrong offset!");
static_assert(offsetof(FIconInfo, notDispel) == 0x000018, "Member 'FIconInfo::notDispel' has a wrong offset!");

// ScriptStruct EndGame.EndMenuSkillTreeColorSetting
// 0x0090 (0x0090 - 0x0000)
struct FEndMenuSkillTreeColorSetting final
{
public:
	struct FLinearColor                           BtnLight2Color;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Effect00Color;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Ring2Color;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Ring3Color;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ImgCursor2Light1Color;                             // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ImgCursor2Light2Color;                             // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ImgCursor1LightColor;                              // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Line02Color;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Line00Color;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuSkillTreeColorSetting) == 0x000004, "Wrong alignment on FEndMenuSkillTreeColorSetting");
static_assert(sizeof(FEndMenuSkillTreeColorSetting) == 0x000090, "Wrong size on FEndMenuSkillTreeColorSetting");
static_assert(offsetof(FEndMenuSkillTreeColorSetting, BtnLight2Color) == 0x000000, "Member 'FEndMenuSkillTreeColorSetting::BtnLight2Color' has a wrong offset!");
static_assert(offsetof(FEndMenuSkillTreeColorSetting, Effect00Color) == 0x000010, "Member 'FEndMenuSkillTreeColorSetting::Effect00Color' has a wrong offset!");
static_assert(offsetof(FEndMenuSkillTreeColorSetting, Ring2Color) == 0x000020, "Member 'FEndMenuSkillTreeColorSetting::Ring2Color' has a wrong offset!");
static_assert(offsetof(FEndMenuSkillTreeColorSetting, Ring3Color) == 0x000030, "Member 'FEndMenuSkillTreeColorSetting::Ring3Color' has a wrong offset!");
static_assert(offsetof(FEndMenuSkillTreeColorSetting, ImgCursor2Light1Color) == 0x000040, "Member 'FEndMenuSkillTreeColorSetting::ImgCursor2Light1Color' has a wrong offset!");
static_assert(offsetof(FEndMenuSkillTreeColorSetting, ImgCursor2Light2Color) == 0x000050, "Member 'FEndMenuSkillTreeColorSetting::ImgCursor2Light2Color' has a wrong offset!");
static_assert(offsetof(FEndMenuSkillTreeColorSetting, ImgCursor1LightColor) == 0x000060, "Member 'FEndMenuSkillTreeColorSetting::ImgCursor1LightColor' has a wrong offset!");
static_assert(offsetof(FEndMenuSkillTreeColorSetting, Line02Color) == 0x000070, "Member 'FEndMenuSkillTreeColorSetting::Line02Color' has a wrong offset!");
static_assert(offsetof(FEndMenuSkillTreeColorSetting, Line00Color) == 0x000080, "Member 'FEndMenuSkillTreeColorSetting::Line00Color' has a wrong offset!");

// ScriptStruct EndGame.VFXShaderResourceBufferInfo
// 0x0010 (0x0010 - 0x0000)
struct FVFXShaderResourceBufferInfo final
{
public:
	class UShaderResourceBuffer*                  m_ShaderResourceBuffer;                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NumberOfContext;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NumberOfKey;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVFXShaderResourceBufferInfo) == 0x000008, "Wrong alignment on FVFXShaderResourceBufferInfo");
static_assert(sizeof(FVFXShaderResourceBufferInfo) == 0x000010, "Wrong size on FVFXShaderResourceBufferInfo");
static_assert(offsetof(FVFXShaderResourceBufferInfo, m_ShaderResourceBuffer) == 0x000000, "Member 'FVFXShaderResourceBufferInfo::m_ShaderResourceBuffer' has a wrong offset!");
static_assert(offsetof(FVFXShaderResourceBufferInfo, m_NumberOfContext) == 0x000008, "Member 'FVFXShaderResourceBufferInfo::m_NumberOfContext' has a wrong offset!");
static_assert(offsetof(FVFXShaderResourceBufferInfo, m_NumberOfKey) == 0x00000C, "Member 'FVFXShaderResourceBufferInfo::m_NumberOfKey' has a wrong offset!");

// ScriptStruct EndGame.EndPackObjectBaseParams
// 0x0040 (0x0040 - 0x0000)
struct FEndPackObjectBaseParams final
{
public:
	uint32                                        TypeHash;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexToAppendParam;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Edit, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPackObjectBaseParams) == 0x000010, "Wrong alignment on FEndPackObjectBaseParams");
static_assert(sizeof(FEndPackObjectBaseParams) == 0x000040, "Wrong size on FEndPackObjectBaseParams");
static_assert(offsetof(FEndPackObjectBaseParams, TypeHash) == 0x000000, "Member 'FEndPackObjectBaseParams::TypeHash' has a wrong offset!");
static_assert(offsetof(FEndPackObjectBaseParams, IndexToAppendParam) == 0x000004, "Member 'FEndPackObjectBaseParams::IndexToAppendParam' has a wrong offset!");
static_assert(offsetof(FEndPackObjectBaseParams, Transform) == 0x000010, "Member 'FEndPackObjectBaseParams::Transform' has a wrong offset!");

// ScriptStruct EndGame.EndPhotoGameCameraModule
// 0x00B8 (0x04A8 - 0x03F0)
struct FEndPhotoGameCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0xB8];                                     // 0x03F0(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPhotoGameCameraModule) == 0x000008, "Wrong alignment on FEndPhotoGameCameraModule");
static_assert(sizeof(FEndPhotoGameCameraModule) == 0x0004A8, "Wrong size on FEndPhotoGameCameraModule");

// ScriptStruct EndGame.EndPhysicsVehicleMeasureBrakeParam
// 0x002C (0x002C - 0x0000)
struct FEndPhysicsVehicleMeasureBrakeParam final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPos;                                          // 0x0008(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinumumHeight;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalLength;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartYaw;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPitch;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepPitchAngle;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IterateNum;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicsVehicleMeasureBrakeParam) == 0x000004, "Wrong alignment on FEndPhysicsVehicleMeasureBrakeParam");
static_assert(sizeof(FEndPhysicsVehicleMeasureBrakeParam) == 0x00002C, "Wrong size on FEndPhysicsVehicleMeasureBrakeParam");
static_assert(offsetof(FEndPhysicsVehicleMeasureBrakeParam, Tag) == 0x000000, "Member 'FEndPhysicsVehicleMeasureBrakeParam::Tag' has a wrong offset!");
static_assert(offsetof(FEndPhysicsVehicleMeasureBrakeParam, StartPos) == 0x000008, "Member 'FEndPhysicsVehicleMeasureBrakeParam::StartPos' has a wrong offset!");
static_assert(offsetof(FEndPhysicsVehicleMeasureBrakeParam, MinumumHeight) == 0x000014, "Member 'FEndPhysicsVehicleMeasureBrakeParam::MinumumHeight' has a wrong offset!");
static_assert(offsetof(FEndPhysicsVehicleMeasureBrakeParam, HorizontalLength) == 0x000018, "Member 'FEndPhysicsVehicleMeasureBrakeParam::HorizontalLength' has a wrong offset!");
static_assert(offsetof(FEndPhysicsVehicleMeasureBrakeParam, StartYaw) == 0x00001C, "Member 'FEndPhysicsVehicleMeasureBrakeParam::StartYaw' has a wrong offset!");
static_assert(offsetof(FEndPhysicsVehicleMeasureBrakeParam, StartPitch) == 0x000020, "Member 'FEndPhysicsVehicleMeasureBrakeParam::StartPitch' has a wrong offset!");
static_assert(offsetof(FEndPhysicsVehicleMeasureBrakeParam, StepPitchAngle) == 0x000024, "Member 'FEndPhysicsVehicleMeasureBrakeParam::StepPitchAngle' has a wrong offset!");
static_assert(offsetof(FEndPhysicsVehicleMeasureBrakeParam, IterateNum) == 0x000028, "Member 'FEndPhysicsVehicleMeasureBrakeParam::IterateNum' has a wrong offset!");

// ScriptStruct EndGame.EndCollisionDefaultSettings
// 0x0004 (0x0004 - 0x0000)
struct FEndCollisionDefaultSettings final
{
public:
	float                                         EnvironmentMeshDefaultNearFadeDistance;            // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndCollisionDefaultSettings) == 0x000004, "Wrong alignment on FEndCollisionDefaultSettings");
static_assert(sizeof(FEndCollisionDefaultSettings) == 0x000004, "Wrong size on FEndCollisionDefaultSettings");
static_assert(offsetof(FEndCollisionDefaultSettings, EnvironmentMeshDefaultNearFadeDistance) == 0x000000, "Member 'FEndCollisionDefaultSettings::EnvironmentMeshDefaultNearFadeDistance' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicsObjectsSettings
// 0x0054 (0x0054 - 0x0000)
struct FEndPhysicsObjectsSettings final
{
public:
	float                                         WeakImpulseStrength;                               // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MediumImpulseStrength;                             // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrongImpulseStrength;                             // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLaunchSmallPitch;                               // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLaunchLargePitch;                               // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBlowSmallPitch;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBlowLargePitch;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStrikePitch;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStrikePitch;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterForwardDirectionLerpAlpha;                // 0x0024(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMeleeRandomExtraAngle;                          // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPieceRandomExtraAngle;                          // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPieceRandomExtraTorque;                         // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinShrapnelDestroyHitImpulse;                      // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructiveShrapnelDuration;                       // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TarzanPhysicsObjectHitExtraImpulse;                // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTarzanPhysicsObjectHitImpulse;                  // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterBuoyancyResistent;                            // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterBuoyancyResistentInAir;                       // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterBuoyancyResistentMaxDepth;                    // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDragCoefficientXY;                            // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicsObjectsSettings) == 0x000004, "Wrong alignment on FEndPhysicsObjectsSettings");
static_assert(sizeof(FEndPhysicsObjectsSettings) == 0x000054, "Wrong size on FEndPhysicsObjectsSettings");
static_assert(offsetof(FEndPhysicsObjectsSettings, WeakImpulseStrength) == 0x000000, "Member 'FEndPhysicsObjectsSettings::WeakImpulseStrength' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MediumImpulseStrength) == 0x000004, "Member 'FEndPhysicsObjectsSettings::MediumImpulseStrength' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, StrongImpulseStrength) == 0x000008, "Member 'FEndPhysicsObjectsSettings::StrongImpulseStrength' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MinLaunchSmallPitch) == 0x00000C, "Member 'FEndPhysicsObjectsSettings::MinLaunchSmallPitch' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MinLaunchLargePitch) == 0x000010, "Member 'FEndPhysicsObjectsSettings::MinLaunchLargePitch' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MinBlowSmallPitch) == 0x000014, "Member 'FEndPhysicsObjectsSettings::MinBlowSmallPitch' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MinBlowLargePitch) == 0x000018, "Member 'FEndPhysicsObjectsSettings::MinBlowLargePitch' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MinStrikePitch) == 0x00001C, "Member 'FEndPhysicsObjectsSettings::MinStrikePitch' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MaxStrikePitch) == 0x000020, "Member 'FEndPhysicsObjectsSettings::MaxStrikePitch' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, CharacterForwardDirectionLerpAlpha) == 0x000024, "Member 'FEndPhysicsObjectsSettings::CharacterForwardDirectionLerpAlpha' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MaxMeleeRandomExtraAngle) == 0x000028, "Member 'FEndPhysicsObjectsSettings::MaxMeleeRandomExtraAngle' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MaxPieceRandomExtraAngle) == 0x00002C, "Member 'FEndPhysicsObjectsSettings::MaxPieceRandomExtraAngle' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MaxPieceRandomExtraTorque) == 0x000030, "Member 'FEndPhysicsObjectsSettings::MaxPieceRandomExtraTorque' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MinShrapnelDestroyHitImpulse) == 0x000034, "Member 'FEndPhysicsObjectsSettings::MinShrapnelDestroyHitImpulse' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, DestructiveShrapnelDuration) == 0x000038, "Member 'FEndPhysicsObjectsSettings::DestructiveShrapnelDuration' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, TarzanPhysicsObjectHitExtraImpulse) == 0x00003C, "Member 'FEndPhysicsObjectsSettings::TarzanPhysicsObjectHitExtraImpulse' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, MinTarzanPhysicsObjectHitImpulse) == 0x000040, "Member 'FEndPhysicsObjectsSettings::MinTarzanPhysicsObjectHitImpulse' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, WaterBuoyancyResistent) == 0x000044, "Member 'FEndPhysicsObjectsSettings::WaterBuoyancyResistent' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, WaterBuoyancyResistentInAir) == 0x000048, "Member 'FEndPhysicsObjectsSettings::WaterBuoyancyResistentInAir' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, WaterBuoyancyResistentMaxDepth) == 0x00004C, "Member 'FEndPhysicsObjectsSettings::WaterBuoyancyResistentMaxDepth' has a wrong offset!");
static_assert(offsetof(FEndPhysicsObjectsSettings, WaterDragCoefficientXY) == 0x000050, "Member 'FEndPhysicsObjectsSettings::WaterDragCoefficientXY' has a wrong offset!");

// ScriptStruct EndGame.EndPixelCoordinateAnimationMaterial
// 0x00B0 (0x00B0 - 0x0000)
struct FEndPixelCoordinateAnimationMaterial final
{
public:
	TArray<class FName>                           MaterialNames;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           MeshNames;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEndPixelCoordinateAnimationParameter  Default;                                           // 0x0020(0x0038)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FEndPixelCoordinateAnimationParameter> Override;                                          // 0x0058(0x0050)(Edit, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        DefaultCurve;                                      // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultDuration;                                   // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPixelCoordinateAnimationMaterial) == 0x000008, "Wrong alignment on FEndPixelCoordinateAnimationMaterial");
static_assert(sizeof(FEndPixelCoordinateAnimationMaterial) == 0x0000B0, "Wrong size on FEndPixelCoordinateAnimationMaterial");
static_assert(offsetof(FEndPixelCoordinateAnimationMaterial, MaterialNames) == 0x000000, "Member 'FEndPixelCoordinateAnimationMaterial::MaterialNames' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationMaterial, MeshNames) == 0x000010, "Member 'FEndPixelCoordinateAnimationMaterial::MeshNames' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationMaterial, Default) == 0x000020, "Member 'FEndPixelCoordinateAnimationMaterial::Default' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationMaterial, Override) == 0x000058, "Member 'FEndPixelCoordinateAnimationMaterial::Override' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationMaterial, DefaultCurve) == 0x0000A8, "Member 'FEndPixelCoordinateAnimationMaterial::DefaultCurve' has a wrong offset!");
static_assert(offsetof(FEndPixelCoordinateAnimationMaterial, DefaultDuration) == 0x0000AC, "Member 'FEndPixelCoordinateAnimationMaterial::DefaultDuration' has a wrong offset!");

// ScriptStruct EndGame.EndPlannerEventCameraOperator
// 0x0068 (0x0150 - 0x00E8)
struct FEndPlannerEventCameraOperator final : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0x68];                                      // 0x00E8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPlannerEventCameraOperator) == 0x000008, "Wrong alignment on FEndPlannerEventCameraOperator");
static_assert(sizeof(FEndPlannerEventCameraOperator) == 0x000150, "Wrong size on FEndPlannerEventCameraOperator");

// ScriptStruct EndGame.EndPlannerEventTalkModifier
// 0x0108 (0x0108 - 0x0000)
struct alignas(0x08) FEndPlannerEventTalkModifier final
{
public:
	uint8                                         Pad_0[0x108];                                      // 0x0000(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPlannerEventTalkModifier) == 0x000008, "Wrong alignment on FEndPlannerEventTalkModifier");
static_assert(sizeof(FEndPlannerEventTalkModifier) == 0x000108, "Wrong size on FEndPlannerEventTalkModifier");

// ScriptStruct EndGame.EndRagdollSEData
// 0x0060 (0x0060 - 0x0000)
struct FEndRagdollSEData final
{
public:
	struct FSQEXSEADSoundKey                      HitSEKey;                                          // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         HitImpulseThreshold;                               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistanceThreshold;                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitImpulseSizeMax;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      HitAttenuationSetting;                             // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      HitConcurrencySetting;                             // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndRagdollSEData) == 0x000008, "Wrong alignment on FEndRagdollSEData");
static_assert(sizeof(FEndRagdollSEData) == 0x000060, "Wrong size on FEndRagdollSEData");
static_assert(offsetof(FEndRagdollSEData, HitSEKey) == 0x000000, "Member 'FEndRagdollSEData::HitSEKey' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, HitImpulseThreshold) == 0x000038, "Member 'FEndRagdollSEData::HitImpulseThreshold' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, HitDistanceThreshold) == 0x00003C, "Member 'FEndRagdollSEData::HitDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, HitImpulseSizeMax) == 0x000040, "Member 'FEndRagdollSEData::HitImpulseSizeMax' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, HitAttenuationSetting) == 0x000048, "Member 'FEndRagdollSEData::HitAttenuationSetting' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, HitConcurrencySetting) == 0x000050, "Member 'FEndRagdollSEData::HitConcurrencySetting' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, BoneName) == 0x000058, "Member 'FEndRagdollSEData::BoneName' has a wrong offset!");

// ScriptStruct EndGame.EndRedChainDoorActionCameraModule
// 0x0020 (0x0410 - 0x03F0)
struct FEndRedChainDoorActionCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x20];                                     // 0x03F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndRedChainDoorActionCameraModule) == 0x000008, "Wrong alignment on FEndRedChainDoorActionCameraModule");
static_assert(sizeof(FEndRedChainDoorActionCameraModule) == 0x000410, "Wrong size on FEndRedChainDoorActionCameraModule");

// ScriptStruct EndGame.EndRedPullCameraModule
// 0x0000 (0x04D0 - 0x04D0)
struct FEndRedPullCameraModule final : public FEndNiblCrawlCameraModule
{
};
static_assert(alignof(FEndRedPullCameraModule) == 0x000008, "Wrong alignment on FEndRedPullCameraModule");
static_assert(sizeof(FEndRedPullCameraModule) == 0x0004D0, "Wrong size on FEndRedPullCameraModule");

// ScriptStruct EndGame.EndResetCameraModule
// 0x0020 (0x0410 - 0x03F0)
struct FEndResetCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x20];                                     // 0x03F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndResetCameraModule) == 0x000008, "Wrong alignment on FEndResetCameraModule");
static_assert(sizeof(FEndResetCameraModule) == 0x000410, "Wrong size on FEndResetCameraModule");

// ScriptStruct EndGame.EndRopeCameraModule
// 0x0120 (0x0510 - 0x03F0)
struct FEndRopeCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x120];                                    // 0x03F0(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndRopeCameraModule) == 0x000008, "Wrong alignment on FEndRopeCameraModule");
static_assert(sizeof(FEndRopeCameraModule) == 0x000510, "Wrong size on FEndRopeCameraModule");

// ScriptStruct EndGame.EndRythmGameTemplate
// 0x0000 (0x0020 - 0x0020)
struct FEndRythmGameTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FEndRythmGameTemplate) == 0x000008, "Wrong alignment on FEndRythmGameTemplate");
static_assert(sizeof(FEndRythmGameTemplate) == 0x000020, "Wrong size on FEndRythmGameTemplate");

// ScriptStruct EndGame.EndSBScooterExpressionParameter
// 0x001C (0x001C - 0x0000)
struct FEndSBScooterExpressionParameter final
{
public:
	struct FFloatInterval                         SuspensionRange;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         SlopeAngleRange;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSlopeAngleRate;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorNormalInterpSpeedOnRiding;                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorNormalInterpSpeed;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndSBScooterExpressionParameter) == 0x000004, "Wrong alignment on FEndSBScooterExpressionParameter");
static_assert(sizeof(FEndSBScooterExpressionParameter) == 0x00001C, "Wrong size on FEndSBScooterExpressionParameter");
static_assert(offsetof(FEndSBScooterExpressionParameter, SuspensionRange) == 0x000000, "Member 'FEndSBScooterExpressionParameter::SuspensionRange' has a wrong offset!");
static_assert(offsetof(FEndSBScooterExpressionParameter, SlopeAngleRange) == 0x000008, "Member 'FEndSBScooterExpressionParameter::SlopeAngleRange' has a wrong offset!");
static_assert(offsetof(FEndSBScooterExpressionParameter, MinSlopeAngleRate) == 0x000010, "Member 'FEndSBScooterExpressionParameter::MinSlopeAngleRate' has a wrong offset!");
static_assert(offsetof(FEndSBScooterExpressionParameter, FloorNormalInterpSpeedOnRiding) == 0x000014, "Member 'FEndSBScooterExpressionParameter::FloorNormalInterpSpeedOnRiding' has a wrong offset!");
static_assert(offsetof(FEndSBScooterExpressionParameter, FloorNormalInterpSpeed) == 0x000018, "Member 'FEndSBScooterExpressionParameter::FloorNormalInterpSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndSecondaryCharacterCameraModule
// 0x0018 (0x0408 - 0x03F0)
struct FEndSecondaryCharacterCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x18];                                     // 0x03F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSecondaryCharacterCameraModule) == 0x000008, "Wrong alignment on FEndSecondaryCharacterCameraModule");
static_assert(sizeof(FEndSecondaryCharacterCameraModule) == 0x000408, "Wrong size on FEndSecondaryCharacterCameraModule");

// ScriptStruct EndGame.EndSelectTargetSyncInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndSelectTargetSyncInfo final
{
public:
	class FName                                   SyncVFXPackName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SyncMaxVFXName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndSelectTargetSyncInfo) == 0x000004, "Wrong alignment on FEndSelectTargetSyncInfo");
static_assert(sizeof(FEndSelectTargetSyncInfo) == 0x000010, "Wrong size on FEndSelectTargetSyncInfo");
static_assert(offsetof(FEndSelectTargetSyncInfo, SyncVFXPackName) == 0x000000, "Member 'FEndSelectTargetSyncInfo::SyncVFXPackName' has a wrong offset!");
static_assert(offsetof(FEndSelectTargetSyncInfo, SyncMaxVFXName) == 0x000008, "Member 'FEndSelectTargetSyncInfo::SyncMaxVFXName' has a wrong offset!");

// ScriptStruct EndGame.EndSequenceCameraOperator
// 0x0020 (0x0108 - 0x00E8)
struct FEndSequenceCameraOperator final : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0x20];                                      // 0x00E8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSequenceCameraOperator) == 0x000008, "Wrong alignment on FEndSequenceCameraOperator");
static_assert(sizeof(FEndSequenceCameraOperator) == 0x000108, "Wrong size on FEndSequenceCameraOperator");

// ScriptStruct EndGame.ShootingCoasterShot
// 0x00F0 (0x00F0 - 0x0000)
struct FShootingCoasterShot final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AActor>>          ActorsToIgnore;                                    // 0x0060(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x80];                                      // 0x0070(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShootingCoasterShot) == 0x000008, "Wrong alignment on FShootingCoasterShot");
static_assert(sizeof(FShootingCoasterShot) == 0x0000F0, "Wrong size on FShootingCoasterShot");
static_assert(offsetof(FShootingCoasterShot, ActorsToIgnore) == 0x000060, "Member 'FShootingCoasterShot::ActorsToIgnore' has a wrong offset!");

// ScriptStruct EndGame.ShootingCoasterEnemyEntry
// 0x0090 (0x0090 - 0x0000)
struct FShootingCoasterEnemyEntry final
{
public:
	bool                                          bIsTypeA;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTypeB;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTypeC;                                          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTypeD;                                          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTypeE;                                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GroupId;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyTypeID;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EnemyTypeName;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyNameID;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndSplineActorBase*                    AttachSpline;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FinalBossSocketAttachment;                         // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDistance;                                     // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0048(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Local_LocationOffset;                              // 0x0054(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Cached_LocalRotation;                              // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArrowComponent*                        Arrow;                                             // 0x0070(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShootStartDistance;                                // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShootEndDistance;                                  // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopAtDistance;                                    // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndSplineActorBase*                    AttachSplinePhase2;                                // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShootingCoasterEnemyEntry) == 0x000008, "Wrong alignment on FShootingCoasterEnemyEntry");
static_assert(sizeof(FShootingCoasterEnemyEntry) == 0x000090, "Wrong size on FShootingCoasterEnemyEntry");
static_assert(offsetof(FShootingCoasterEnemyEntry, bIsTypeA) == 0x000000, "Member 'FShootingCoasterEnemyEntry::bIsTypeA' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, bIsTypeB) == 0x000001, "Member 'FShootingCoasterEnemyEntry::bIsTypeB' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, bIsTypeC) == 0x000002, "Member 'FShootingCoasterEnemyEntry::bIsTypeC' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, bIsTypeD) == 0x000003, "Member 'FShootingCoasterEnemyEntry::bIsTypeD' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, bIsTypeE) == 0x000004, "Member 'FShootingCoasterEnemyEntry::bIsTypeE' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, GroupId) == 0x000008, "Member 'FShootingCoasterEnemyEntry::GroupId' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, EnemyTypeID) == 0x000010, "Member 'FShootingCoasterEnemyEntry::EnemyTypeID' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, EnemyTypeName) == 0x000018, "Member 'FShootingCoasterEnemyEntry::EnemyTypeName' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, EnemyNameID) == 0x000028, "Member 'FShootingCoasterEnemyEntry::EnemyNameID' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, AttachSpline) == 0x000030, "Member 'FShootingCoasterEnemyEntry::AttachSpline' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, FinalBossSocketAttachment) == 0x000038, "Member 'FShootingCoasterEnemyEntry::FinalBossSocketAttachment' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, SpawnDistance) == 0x000040, "Member 'FShootingCoasterEnemyEntry::SpawnDistance' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, LocationOffset) == 0x000048, "Member 'FShootingCoasterEnemyEntry::LocationOffset' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, Local_LocationOffset) == 0x000054, "Member 'FShootingCoasterEnemyEntry::Local_LocationOffset' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, Cached_LocalRotation) == 0x000060, "Member 'FShootingCoasterEnemyEntry::Cached_LocalRotation' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, Arrow) == 0x000070, "Member 'FShootingCoasterEnemyEntry::Arrow' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, ShootStartDistance) == 0x000078, "Member 'FShootingCoasterEnemyEntry::ShootStartDistance' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, ShootEndDistance) == 0x00007C, "Member 'FShootingCoasterEnemyEntry::ShootEndDistance' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, StopAtDistance) == 0x000080, "Member 'FShootingCoasterEnemyEntry::StopAtDistance' has a wrong offset!");
static_assert(offsetof(FShootingCoasterEnemyEntry, AttachSplinePhase2) == 0x000088, "Member 'FShootingCoasterEnemyEntry::AttachSplinePhase2' has a wrong offset!");

// ScriptStruct EndGame.EndShootingGameTemplate
// 0x0000 (0x0020 - 0x0020)
struct FEndShootingGameTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FEndShootingGameTemplate) == 0x000008, "Wrong alignment on FEndShootingGameTemplate");
static_assert(sizeof(FEndShootingGameTemplate) == 0x000020, "Wrong size on FEndShootingGameTemplate");

// ScriptStruct EndGame.EndShopCameraOperator
// 0x0108 (0x01F0 - 0x00E8)
struct alignas(0x10) FEndShopCameraOperator final : public FEndCameraOperator
{
public:
	uint8                                         Pad_E8[0x108];                                     // 0x00E8(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndShopCameraOperator) == 0x000010, "Wrong alignment on FEndShopCameraOperator");
static_assert(sizeof(FEndShopCameraOperator) == 0x0001F0, "Wrong size on FEndShopCameraOperator");

// ScriptStruct EndGame.EndSimpleLeaderChangeCameraModule
// 0x0010 (0x0400 - 0x03F0)
struct FEndSimpleLeaderChangeCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x10];                                     // 0x03F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSimpleLeaderChangeCameraModule) == 0x000008, "Wrong alignment on FEndSimpleLeaderChangeCameraModule");
static_assert(sizeof(FEndSimpleLeaderChangeCameraModule) == 0x000400, "Wrong size on FEndSimpleLeaderChangeCameraModule");

// ScriptStruct EndGame.EndSmoothTerrainCollisionDebugDrawInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FEndSmoothTerrainCollisionDebugDrawInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSmoothTerrainCollisionDebugDrawInfo) == 0x000004, "Wrong alignment on FEndSmoothTerrainCollisionDebugDrawInfo");
static_assert(sizeof(FEndSmoothTerrainCollisionDebugDrawInfo) == 0x000020, "Wrong size on FEndSmoothTerrainCollisionDebugDrawInfo");

// ScriptStruct EndGame.EndSpaceOffsetCameraModule
// 0x0030 (0x0420 - 0x03F0)
struct FEndSpaceOffsetCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x30];                                     // 0x03F0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSpaceOffsetCameraModule) == 0x000008, "Wrong alignment on FEndSpaceOffsetCameraModule");
static_assert(sizeof(FEndSpaceOffsetCameraModule) == 0x000420, "Wrong size on FEndSpaceOffsetCameraModule");

// ScriptStruct EndGame.EndSplineMoveCameraModule
// 0x00D8 (0x04C8 - 0x03F0)
struct FEndSplineMoveCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0xD8];                                     // 0x03F0(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSplineMoveCameraModule) == 0x000008, "Wrong alignment on FEndSplineMoveCameraModule");
static_assert(sizeof(FEndSplineMoveCameraModule) == 0x0004C8, "Wrong size on FEndSplineMoveCameraModule");

// ScriptStruct EndGame.EndManualPumpAssetData
// 0x0018 (0x0018 - 0x0000)
struct FEndManualPumpAssetData final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LODs;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndManualPumpAssetData) == 0x000008, "Wrong alignment on FEndManualPumpAssetData");
static_assert(sizeof(FEndManualPumpAssetData) == 0x000018, "Wrong size on FEndManualPumpAssetData");
static_assert(offsetof(FEndManualPumpAssetData, AssetPath) == 0x000000, "Member 'FEndManualPumpAssetData::AssetPath' has a wrong offset!");
static_assert(offsetof(FEndManualPumpAssetData, LODs) == 0x000010, "Member 'FEndManualPumpAssetData::LODs' has a wrong offset!");

// ScriptStruct EndGame.EndManualPumpData
// 0x0018 (0x0018 - 0x0000)
struct FEndManualPumpData final
{
public:
	int32                                         ManualCutIndex;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndManualPumpAssetData>        ManualAssetInfos;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndManualPumpData) == 0x000008, "Wrong alignment on FEndManualPumpData");
static_assert(sizeof(FEndManualPumpData) == 0x000018, "Wrong size on FEndManualPumpData");
static_assert(offsetof(FEndManualPumpData, ManualCutIndex) == 0x000000, "Member 'FEndManualPumpData::ManualCutIndex' has a wrong offset!");
static_assert(offsetof(FEndManualPumpData, ManualAssetInfos) == 0x000008, "Member 'FEndManualPumpData::ManualAssetInfos' has a wrong offset!");

// ScriptStruct EndGame.EndMassiveEnvironmentFrameData
// 0x0020 (0x0020 - 0x0000)
struct FEndMassiveEnvironmentFrameData final
{
public:
	uint64                                        FrameCounter;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndMassiveEnvironmentComponent> Components;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMassiveEnvironmentFrameData) == 0x000008, "Wrong alignment on FEndMassiveEnvironmentFrameData");
static_assert(sizeof(FEndMassiveEnvironmentFrameData) == 0x000020, "Wrong size on FEndMassiveEnvironmentFrameData");
static_assert(offsetof(FEndMassiveEnvironmentFrameData, FrameCounter) == 0x000000, "Member 'FEndMassiveEnvironmentFrameData::FrameCounter' has a wrong offset!");
static_assert(offsetof(FEndMassiveEnvironmentFrameData, Timestamp) == 0x000008, "Member 'FEndMassiveEnvironmentFrameData::Timestamp' has a wrong offset!");
static_assert(offsetof(FEndMassiveEnvironmentFrameData, Components) == 0x000010, "Member 'FEndMassiveEnvironmentFrameData::Components' has a wrong offset!");

// ScriptStruct EndGame.EndStreamingSwitchSet
// 0x0020 (0x0020 - 0x0000)
struct FEndStreamingSwitchSet final
{
public:
	class FName                                   SwitchLabel;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          StreamingLevels;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EEndStreamingVolumeTargetType                 StreamingTarget;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndStreamingSwitchSet) == 0x000008, "Wrong alignment on FEndStreamingSwitchSet");
static_assert(sizeof(FEndStreamingSwitchSet) == 0x000020, "Wrong size on FEndStreamingSwitchSet");
static_assert(offsetof(FEndStreamingSwitchSet, SwitchLabel) == 0x000000, "Member 'FEndStreamingSwitchSet::SwitchLabel' has a wrong offset!");
static_assert(offsetof(FEndStreamingSwitchSet, StreamingLevels) == 0x000008, "Member 'FEndStreamingSwitchSet::StreamingLevels' has a wrong offset!");
static_assert(offsetof(FEndStreamingSwitchSet, StreamingTarget) == 0x000018, "Member 'FEndStreamingSwitchSet::StreamingTarget' has a wrong offset!");

// ScriptStruct EndGame.EndSwimCameraModule
// 0x0028 (0x0418 - 0x03F0)
struct FEndSwimCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x28];                                     // 0x03F0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSwimCameraModule) == 0x000008, "Wrong alignment on FEndSwimCameraModule");
static_assert(sizeof(FEndSwimCameraModule) == 0x000418, "Wrong size on FEndSwimCameraModule");

// ScriptStruct EndGame.EndSwitchableSkeletalMeshPair
// 0x0010 (0x0010 - 0x0000)
struct FEndSwitchableSkeletalMeshPair final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndSwitchableSkeletalMeshPair) == 0x000008, "Wrong alignment on FEndSwitchableSkeletalMeshPair");
static_assert(sizeof(FEndSwitchableSkeletalMeshPair) == 0x000010, "Wrong size on FEndSwitchableSkeletalMeshPair");
static_assert(offsetof(FEndSwitchableSkeletalMeshPair, Label) == 0x000000, "Member 'FEndSwitchableSkeletalMeshPair::Label' has a wrong offset!");
static_assert(offsetof(FEndSwitchableSkeletalMeshPair, Mesh) == 0x000008, "Member 'FEndSwitchableSkeletalMeshPair::Mesh' has a wrong offset!");

// ScriptStruct EndGame.EndTinyBroncoDolphinActionLotteryListPerSpeed
// 0x0018 (0x0018 - 0x0000)
struct FEndTinyBroncoDolphinActionLotteryListPerSpeed final
{
public:
	struct FFloatInterval                         SpeedRange;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndTinyBroncoDolphinActionLotteryData> LotteryList;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndTinyBroncoDolphinActionLotteryListPerSpeed) == 0x000008, "Wrong alignment on FEndTinyBroncoDolphinActionLotteryListPerSpeed");
static_assert(sizeof(FEndTinyBroncoDolphinActionLotteryListPerSpeed) == 0x000018, "Wrong size on FEndTinyBroncoDolphinActionLotteryListPerSpeed");
static_assert(offsetof(FEndTinyBroncoDolphinActionLotteryListPerSpeed, SpeedRange) == 0x000000, "Member 'FEndTinyBroncoDolphinActionLotteryListPerSpeed::SpeedRange' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoDolphinActionLotteryListPerSpeed, LotteryList) == 0x000008, "Member 'FEndTinyBroncoDolphinActionLotteryListPerSpeed::LotteryList' has a wrong offset!");

// ScriptStruct EndGame.EndTinyBroncoDolphinActionDefinition
// 0x0024 (0x0024 - 0x0000)
struct FEndTinyBroncoDolphinActionDefinition final
{
public:
	EEndTinyBroncoDolphinActionType               ActionType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt32Interval                         SpawnRange;                                        // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EntryMotion;                                       // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExitMotion;                                        // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseLifeTime;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddLifeTimeRandom;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndTinyBroncoDolphinActionDefinition) == 0x000004, "Wrong alignment on FEndTinyBroncoDolphinActionDefinition");
static_assert(sizeof(FEndTinyBroncoDolphinActionDefinition) == 0x000024, "Wrong size on FEndTinyBroncoDolphinActionDefinition");
static_assert(offsetof(FEndTinyBroncoDolphinActionDefinition, ActionType) == 0x000000, "Member 'FEndTinyBroncoDolphinActionDefinition::ActionType' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoDolphinActionDefinition, SpawnRange) == 0x000004, "Member 'FEndTinyBroncoDolphinActionDefinition::SpawnRange' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoDolphinActionDefinition, EntryMotion) == 0x00000C, "Member 'FEndTinyBroncoDolphinActionDefinition::EntryMotion' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoDolphinActionDefinition, ExitMotion) == 0x000014, "Member 'FEndTinyBroncoDolphinActionDefinition::ExitMotion' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoDolphinActionDefinition, BaseLifeTime) == 0x00001C, "Member 'FEndTinyBroncoDolphinActionDefinition::BaseLifeTime' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoDolphinActionDefinition, AddLifeTimeRandom) == 0x000020, "Member 'FEndTinyBroncoDolphinActionDefinition::AddLifeTimeRandom' has a wrong offset!");

// ScriptStruct EndGame.EndTinyBroncoExpressionParameter
// 0x00D0 (0x00D0 - 0x0000)
struct FEndTinyBroncoExpressionParameter final
{
public:
	float                                         PropellerRotationSpeed;                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         InnerFlapRange;                                    // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         OuterFlapRange;                                    // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         TailFlapRange;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         RudderRange;                                       // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYawSpeed;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitchSpeed;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitchAngleForFlap;                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              PitchAngleForFlapSmoothing;                        // 0x0030(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              OceanRotSmoothingPitchLow;                         // 0x003C(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              OceanRotSmoothingRollLow;                          // 0x0048(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              OceanRotSmoothingPitchHi;                          // 0x0054(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              OceanRotSmoothingRollHi;                           // 0x0060(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OceanRotMaxPitch;                                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OceanRotMaxRoll;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OceanSampleFrontOffset;                            // 0x0074(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OceanSampleSideOffset;                             // 0x0080(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSteeringPitch;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSteeringRoll;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitch;                                          // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRoll;                                           // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         RearPropellerRotationRateRange;                    // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearPropellerRotationRateBoost;                    // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterBodyPitchRateBoost;                          // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              RollSmoothing;                                     // 0x00AC(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              RudderSmoothingMax;                                // 0x00B8(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndVehicleSmoothingParam              RudderSmoothingMin;                                // 0x00C4(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndTinyBroncoExpressionParameter) == 0x000004, "Wrong alignment on FEndTinyBroncoExpressionParameter");
static_assert(sizeof(FEndTinyBroncoExpressionParameter) == 0x0000D0, "Wrong size on FEndTinyBroncoExpressionParameter");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, PropellerRotationSpeed) == 0x000000, "Member 'FEndTinyBroncoExpressionParameter::PropellerRotationSpeed' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, InnerFlapRange) == 0x000004, "Member 'FEndTinyBroncoExpressionParameter::InnerFlapRange' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, OuterFlapRange) == 0x00000C, "Member 'FEndTinyBroncoExpressionParameter::OuterFlapRange' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, TailFlapRange) == 0x000014, "Member 'FEndTinyBroncoExpressionParameter::TailFlapRange' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, RudderRange) == 0x00001C, "Member 'FEndTinyBroncoExpressionParameter::RudderRange' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, MaxYawSpeed) == 0x000024, "Member 'FEndTinyBroncoExpressionParameter::MaxYawSpeed' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, MaxPitchSpeed) == 0x000028, "Member 'FEndTinyBroncoExpressionParameter::MaxPitchSpeed' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, MaxPitchAngleForFlap) == 0x00002C, "Member 'FEndTinyBroncoExpressionParameter::MaxPitchAngleForFlap' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, PitchAngleForFlapSmoothing) == 0x000030, "Member 'FEndTinyBroncoExpressionParameter::PitchAngleForFlapSmoothing' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, OceanRotSmoothingPitchLow) == 0x00003C, "Member 'FEndTinyBroncoExpressionParameter::OceanRotSmoothingPitchLow' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, OceanRotSmoothingRollLow) == 0x000048, "Member 'FEndTinyBroncoExpressionParameter::OceanRotSmoothingRollLow' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, OceanRotSmoothingPitchHi) == 0x000054, "Member 'FEndTinyBroncoExpressionParameter::OceanRotSmoothingPitchHi' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, OceanRotSmoothingRollHi) == 0x000060, "Member 'FEndTinyBroncoExpressionParameter::OceanRotSmoothingRollHi' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, OceanRotMaxPitch) == 0x00006C, "Member 'FEndTinyBroncoExpressionParameter::OceanRotMaxPitch' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, OceanRotMaxRoll) == 0x000070, "Member 'FEndTinyBroncoExpressionParameter::OceanRotMaxRoll' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, OceanSampleFrontOffset) == 0x000074, "Member 'FEndTinyBroncoExpressionParameter::OceanSampleFrontOffset' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, OceanSampleSideOffset) == 0x000080, "Member 'FEndTinyBroncoExpressionParameter::OceanSampleSideOffset' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, MaxSteeringPitch) == 0x00008C, "Member 'FEndTinyBroncoExpressionParameter::MaxSteeringPitch' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, MaxSteeringRoll) == 0x000090, "Member 'FEndTinyBroncoExpressionParameter::MaxSteeringRoll' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, MaxPitch) == 0x000094, "Member 'FEndTinyBroncoExpressionParameter::MaxPitch' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, MaxRoll) == 0x000098, "Member 'FEndTinyBroncoExpressionParameter::MaxRoll' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, RearPropellerRotationRateRange) == 0x00009C, "Member 'FEndTinyBroncoExpressionParameter::RearPropellerRotationRateRange' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, RearPropellerRotationRateBoost) == 0x0000A4, "Member 'FEndTinyBroncoExpressionParameter::RearPropellerRotationRateBoost' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, CenterBodyPitchRateBoost) == 0x0000A8, "Member 'FEndTinyBroncoExpressionParameter::CenterBodyPitchRateBoost' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, RollSmoothing) == 0x0000AC, "Member 'FEndTinyBroncoExpressionParameter::RollSmoothing' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, RudderSmoothingMax) == 0x0000B8, "Member 'FEndTinyBroncoExpressionParameter::RudderSmoothingMax' has a wrong offset!");
static_assert(offsetof(FEndTinyBroncoExpressionParameter, RudderSmoothingMin) == 0x0000C4, "Member 'FEndTinyBroncoExpressionParameter::RudderSmoothingMin' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleAutoRideParam
// 0x0018 (0x0018 - 0x0000)
struct FEndVehicleAutoRideParam final
{
public:
	bool                                          bEnableDirectRide;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectRideWithInputDistance;                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectRideWithInputMaxYaw;                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectRideWithInputMinPower;                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValidAngleRange;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvalideAutoRideTimer;                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleAutoRideParam) == 0x000004, "Wrong alignment on FEndVehicleAutoRideParam");
static_assert(sizeof(FEndVehicleAutoRideParam) == 0x000018, "Wrong size on FEndVehicleAutoRideParam");
static_assert(offsetof(FEndVehicleAutoRideParam, bEnableDirectRide) == 0x000000, "Member 'FEndVehicleAutoRideParam::bEnableDirectRide' has a wrong offset!");
static_assert(offsetof(FEndVehicleAutoRideParam, DirectRideWithInputDistance) == 0x000004, "Member 'FEndVehicleAutoRideParam::DirectRideWithInputDistance' has a wrong offset!");
static_assert(offsetof(FEndVehicleAutoRideParam, DirectRideWithInputMaxYaw) == 0x000008, "Member 'FEndVehicleAutoRideParam::DirectRideWithInputMaxYaw' has a wrong offset!");
static_assert(offsetof(FEndVehicleAutoRideParam, DirectRideWithInputMinPower) == 0x00000C, "Member 'FEndVehicleAutoRideParam::DirectRideWithInputMinPower' has a wrong offset!");
static_assert(offsetof(FEndVehicleAutoRideParam, ValidAngleRange) == 0x000010, "Member 'FEndVehicleAutoRideParam::ValidAngleRange' has a wrong offset!");
static_assert(offsetof(FEndVehicleAutoRideParam, InvalideAutoRideTimer) == 0x000014, "Member 'FEndVehicleAutoRideParam::InvalideAutoRideTimer' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleCurveRateParam
// 0x0090 (0x0090 - 0x0000)
struct FEndVehicleCurveRateParam final
{
public:
	struct FFloatInterval                         Interval;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     RateCurve;                                         // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleCurveRateParam) == 0x000008, "Wrong alignment on FEndVehicleCurveRateParam");
static_assert(sizeof(FEndVehicleCurveRateParam) == 0x000090, "Wrong size on FEndVehicleCurveRateParam");
static_assert(offsetof(FEndVehicleCurveRateParam, Interval) == 0x000000, "Member 'FEndVehicleCurveRateParam::Interval' has a wrong offset!");
static_assert(offsetof(FEndVehicleCurveRateParam, RateCurve) == 0x000008, "Member 'FEndVehicleCurveRateParam::RateCurve' has a wrong offset!");

// ScriptStruct EndGame.EndRestrictedAreaWallCollisionBuildParameter
// 0x0010 (0x0010 - 0x0000)
struct FEndRestrictedAreaWallCollisionBuildParameter final
{
public:
	float                                         RightOffset;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallThickness;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperHeight;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerHeight;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndRestrictedAreaWallCollisionBuildParameter) == 0x000004, "Wrong alignment on FEndRestrictedAreaWallCollisionBuildParameter");
static_assert(sizeof(FEndRestrictedAreaWallCollisionBuildParameter) == 0x000010, "Wrong size on FEndRestrictedAreaWallCollisionBuildParameter");
static_assert(offsetof(FEndRestrictedAreaWallCollisionBuildParameter, RightOffset) == 0x000000, "Member 'FEndRestrictedAreaWallCollisionBuildParameter::RightOffset' has a wrong offset!");
static_assert(offsetof(FEndRestrictedAreaWallCollisionBuildParameter, WallThickness) == 0x000004, "Member 'FEndRestrictedAreaWallCollisionBuildParameter::WallThickness' has a wrong offset!");
static_assert(offsetof(FEndRestrictedAreaWallCollisionBuildParameter, UpperHeight) == 0x000008, "Member 'FEndRestrictedAreaWallCollisionBuildParameter::UpperHeight' has a wrong offset!");
static_assert(offsetof(FEndRestrictedAreaWallCollisionBuildParameter, LowerHeight) == 0x00000C, "Member 'FEndRestrictedAreaWallCollisionBuildParameter::LowerHeight' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleWindNoiseSeSetting
// 0x0108 (0x0108 - 0x0000)
struct FEndVehicleWindNoiseSeSetting final
{
public:
	struct FSQEXSEADSoundKey                      Sound;                                             // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      OverrideAttenuation[0x4];                          // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndVehicleZeroOneSetting              ZeroOneSlot0;                                      // 0x0060(0x0054)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndVehicleZeroOneSetting              ZeroOneSlot1;                                      // 0x00B4(0x0054)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndVehicleWindNoiseSeSetting) == 0x000008, "Wrong alignment on FEndVehicleWindNoiseSeSetting");
static_assert(sizeof(FEndVehicleWindNoiseSeSetting) == 0x000108, "Wrong size on FEndVehicleWindNoiseSeSetting");
static_assert(offsetof(FEndVehicleWindNoiseSeSetting, Sound) == 0x000000, "Member 'FEndVehicleWindNoiseSeSetting::Sound' has a wrong offset!");
static_assert(offsetof(FEndVehicleWindNoiseSeSetting, AttachPointName) == 0x000038, "Member 'FEndVehicleWindNoiseSeSetting::AttachPointName' has a wrong offset!");
static_assert(offsetof(FEndVehicleWindNoiseSeSetting, OverrideAttenuation) == 0x000040, "Member 'FEndVehicleWindNoiseSeSetting::OverrideAttenuation' has a wrong offset!");
static_assert(offsetof(FEndVehicleWindNoiseSeSetting, ZeroOneSlot0) == 0x000060, "Member 'FEndVehicleWindNoiseSeSetting::ZeroOneSlot0' has a wrong offset!");
static_assert(offsetof(FEndVehicleWindNoiseSeSetting, ZeroOneSlot1) == 0x0000B4, "Member 'FEndVehicleWindNoiseSeSetting::ZeroOneSlot1' has a wrong offset!");

// ScriptStruct EndGame.EndVehicleSplineMoveCameraModule
// 0x0078 (0x0468 - 0x03F0)
struct FEndVehicleSplineMoveCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x78];                                     // 0x03F0(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndVehicleSplineMoveCameraModule) == 0x000008, "Wrong alignment on FEndVehicleSplineMoveCameraModule");
static_assert(sizeof(FEndVehicleSplineMoveCameraModule) == 0x000468, "Wrong size on FEndVehicleSplineMoveCameraModule");

// ScriptStruct EndGame.EndWaterSurfaceCameraModule
// 0x0040 (0x0430 - 0x03F0)
struct FEndWaterSurfaceCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x40];                                     // 0x03F0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndWaterSurfaceCameraModule) == 0x000008, "Wrong alignment on FEndWaterSurfaceCameraModule");
static_assert(sizeof(FEndWaterSurfaceCameraModule) == 0x000430, "Wrong size on FEndWaterSurfaceCameraModule");

// ScriptStruct EndGame.EndWeaponMateriaPreviewSettings
// 0x0008 (0x0008 - 0x0000)
struct FEndWeaponMateriaPreviewSettings final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMateriaType                                  MateriaType;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndWeaponMateriaPreviewSettings) == 0x000004, "Wrong alignment on FEndWeaponMateriaPreviewSettings");
static_assert(sizeof(FEndWeaponMateriaPreviewSettings) == 0x000008, "Wrong size on FEndWeaponMateriaPreviewSettings");
static_assert(offsetof(FEndWeaponMateriaPreviewSettings, Slot) == 0x000000, "Member 'FEndWeaponMateriaPreviewSettings::Slot' has a wrong offset!");
static_assert(offsetof(FEndWeaponMateriaPreviewSettings, MateriaType) == 0x000004, "Member 'FEndWeaponMateriaPreviewSettings::MateriaType' has a wrong offset!");

// ScriptStruct EndGame.EndWeaponSwimTemplate
// 0x0000 (0x0020 - 0x0020)
struct FEndWeaponSwimTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FEndWeaponSwimTemplate) == 0x000008, "Wrong alignment on FEndWeaponSwimTemplate");
static_assert(sizeof(FEndWeaponSwimTemplate) == 0x000020, "Wrong size on FEndWeaponSwimTemplate");

// ScriptStruct EndGame.EndWheeledVehicleAnimInstanceProxy
// 0x0020 (0x0A40 - 0x0A20)
struct FEndWheeledVehicleAnimInstanceProxy final : public FEndSkeletalMeshActorAnimInstanceProxy
{
public:
	uint8                                         Pad_A20[0x20];                                     // 0x0A20(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndWheeledVehicleAnimInstanceProxy) == 0x000010, "Wrong alignment on FEndWheeledVehicleAnimInstanceProxy");
static_assert(sizeof(FEndWheeledVehicleAnimInstanceProxy) == 0x000A40, "Wrong size on FEndWheeledVehicleAnimInstanceProxy");

// ScriptStruct EndGame.EndWheelAnimSetup
// 0x0014 (0x0014 - 0x0000)
struct FEndWheelAnimSetup final
{
public:
	class FName                                   RollBoneName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SusBoneName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAngleRate;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheelAnimSetup) == 0x000004, "Wrong alignment on FEndWheelAnimSetup");
static_assert(sizeof(FEndWheelAnimSetup) == 0x000014, "Wrong size on FEndWheelAnimSetup");
static_assert(offsetof(FEndWheelAnimSetup, RollBoneName) == 0x000000, "Member 'FEndWheelAnimSetup::RollBoneName' has a wrong offset!");
static_assert(offsetof(FEndWheelAnimSetup, SusBoneName) == 0x000008, "Member 'FEndWheelAnimSetup::SusBoneName' has a wrong offset!");
static_assert(offsetof(FEndWheelAnimSetup, SteerAngleRate) == 0x000010, "Member 'FEndWheelAnimSetup::SteerAngleRate' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleSpeedGearParam
// 0x0008 (0x0008 - 0x0000)
struct FEndWheeledVehicleSpeedGearParam final
{
public:
	float                                         SpeedKph;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GearNum;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleSpeedGearParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleSpeedGearParam");
static_assert(sizeof(FEndWheeledVehicleSpeedGearParam) == 0x000008, "Wrong size on FEndWheeledVehicleSpeedGearParam");
static_assert(offsetof(FEndWheeledVehicleSpeedGearParam, SpeedKph) == 0x000000, "Member 'FEndWheeledVehicleSpeedGearParam::SpeedKph' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleSpeedGearParam, GearNum) == 0x000004, "Member 'FEndWheeledVehicleSpeedGearParam::GearNum' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleBattleEscapeParam
// 0x0018 (0x0018 - 0x0000)
struct FEndWheeledVehicleBattleEscapeParam final
{
public:
	float                                         MaxAreaRadius;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAreaRadius;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DivNums;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetDistance;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginDisappearTime;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemoveNavPointIfWithinThis;                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleBattleEscapeParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleBattleEscapeParam");
static_assert(sizeof(FEndWheeledVehicleBattleEscapeParam) == 0x000018, "Wrong size on FEndWheeledVehicleBattleEscapeParam");
static_assert(offsetof(FEndWheeledVehicleBattleEscapeParam, MaxAreaRadius) == 0x000000, "Member 'FEndWheeledVehicleBattleEscapeParam::MaxAreaRadius' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleBattleEscapeParam, MinAreaRadius) == 0x000004, "Member 'FEndWheeledVehicleBattleEscapeParam::MinAreaRadius' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleBattleEscapeParam, DivNums) == 0x000008, "Member 'FEndWheeledVehicleBattleEscapeParam::DivNums' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleBattleEscapeParam, OffsetDistance) == 0x00000C, "Member 'FEndWheeledVehicleBattleEscapeParam::OffsetDistance' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleBattleEscapeParam, BeginDisappearTime) == 0x000010, "Member 'FEndWheeledVehicleBattleEscapeParam::BeginDisappearTime' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleBattleEscapeParam, RemoveNavPointIfWithinThis) == 0x000014, "Member 'FEndWheeledVehicleBattleEscapeParam::RemoveNavPointIfWithinThis' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleAISteeringObstacleData
// 0x0014 (0x0014 - 0x0000)
struct FEndWheeledVehicleAISteeringObstacleData final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleAISteeringObstacleData) == 0x000004, "Wrong alignment on FEndWheeledVehicleAISteeringObstacleData");
static_assert(sizeof(FEndWheeledVehicleAISteeringObstacleData) == 0x000014, "Wrong size on FEndWheeledVehicleAISteeringObstacleData");
static_assert(offsetof(FEndWheeledVehicleAISteeringObstacleData, Center) == 0x000000, "Member 'FEndWheeledVehicleAISteeringObstacleData::Center' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleAISteeringObstacleData, Radius) == 0x00000C, "Member 'FEndWheeledVehicleAISteeringObstacleData::Radius' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleAISteeringObstacleData, HalfHeight) == 0x000010, "Member 'FEndWheeledVehicleAISteeringObstacleData::HalfHeight' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleMovementWaterRestrictionParam
// 0x0008 (0x0008 - 0x0000)
struct FEndWheeledVehicleMovementWaterRestrictionParam final
{
public:
	float                                         StartLimitWaterDepth;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedInWater;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleMovementWaterRestrictionParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleMovementWaterRestrictionParam");
static_assert(sizeof(FEndWheeledVehicleMovementWaterRestrictionParam) == 0x000008, "Wrong size on FEndWheeledVehicleMovementWaterRestrictionParam");
static_assert(offsetof(FEndWheeledVehicleMovementWaterRestrictionParam, StartLimitWaterDepth) == 0x000000, "Member 'FEndWheeledVehicleMovementWaterRestrictionParam::StartLimitWaterDepth' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleMovementWaterRestrictionParam, SpeedInWater) == 0x000004, "Member 'FEndWheeledVehicleMovementWaterRestrictionParam::SpeedInWater' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleWorldItemCollectParam
// 0x0018 (0x0018 - 0x0000)
struct FEndWheeledVehicleWorldItemCollectParam final
{
public:
	struct FVector                                BoxCenter;                                         // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleWorldItemCollectParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleWorldItemCollectParam");
static_assert(sizeof(FEndWheeledVehicleWorldItemCollectParam) == 0x000018, "Wrong size on FEndWheeledVehicleWorldItemCollectParam");
static_assert(offsetof(FEndWheeledVehicleWorldItemCollectParam, BoxCenter) == 0x000000, "Member 'FEndWheeledVehicleWorldItemCollectParam::BoxCenter' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleWorldItemCollectParam, BoxExtent) == 0x00000C, "Member 'FEndWheeledVehicleWorldItemCollectParam::BoxExtent' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleRespawnAfterBattleParam
// 0x0028 (0x0028 - 0x0000)
struct FEndWheeledVehicleRespawnAfterBattleParam final
{
public:
	struct FFloatInterval                         RadiusRangeBehindCamera;                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         RadiusRangeFrontCamera;                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxSize;                                           // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetVehicleSpawnLocation;                        // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleRespawnAfterBattleParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleRespawnAfterBattleParam");
static_assert(sizeof(FEndWheeledVehicleRespawnAfterBattleParam) == 0x000028, "Wrong size on FEndWheeledVehicleRespawnAfterBattleParam");
static_assert(offsetof(FEndWheeledVehicleRespawnAfterBattleParam, RadiusRangeBehindCamera) == 0x000000, "Member 'FEndWheeledVehicleRespawnAfterBattleParam::RadiusRangeBehindCamera' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleRespawnAfterBattleParam, RadiusRangeFrontCamera) == 0x000008, "Member 'FEndWheeledVehicleRespawnAfterBattleParam::RadiusRangeFrontCamera' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleRespawnAfterBattleParam, BoxSize) == 0x000010, "Member 'FEndWheeledVehicleRespawnAfterBattleParam::BoxSize' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleRespawnAfterBattleParam, OffsetVehicleSpawnLocation) == 0x00001C, "Member 'FEndWheeledVehicleRespawnAfterBattleParam::OffsetVehicleSpawnLocation' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleSpawnableAreaData
// 0x0030 (0x0030 - 0x0000)
struct FEndWheeledVehicleSpawnableAreaData final
{
public:
	struct FVector                                BoxSize;                                           // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoxQueryHeightOffset;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        FloorCheckSamplingPoints;                          // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TraceBaseFloorLength;                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceGroundLength;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TolelanceGroundPitchAngle;                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndWheeledVehicleSpawnableAreaData) == 0x000008, "Wrong alignment on FEndWheeledVehicleSpawnableAreaData");
static_assert(sizeof(FEndWheeledVehicleSpawnableAreaData) == 0x000030, "Wrong size on FEndWheeledVehicleSpawnableAreaData");
static_assert(offsetof(FEndWheeledVehicleSpawnableAreaData, BoxSize) == 0x000000, "Member 'FEndWheeledVehicleSpawnableAreaData::BoxSize' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleSpawnableAreaData, BoxQueryHeightOffset) == 0x00000C, "Member 'FEndWheeledVehicleSpawnableAreaData::BoxQueryHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleSpawnableAreaData, FloorCheckSamplingPoints) == 0x000010, "Member 'FEndWheeledVehicleSpawnableAreaData::FloorCheckSamplingPoints' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleSpawnableAreaData, TraceBaseFloorLength) == 0x000020, "Member 'FEndWheeledVehicleSpawnableAreaData::TraceBaseFloorLength' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleSpawnableAreaData, TraceGroundLength) == 0x000024, "Member 'FEndWheeledVehicleSpawnableAreaData::TraceGroundLength' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleSpawnableAreaData, TolelanceGroundPitchAngle) == 0x000028, "Member 'FEndWheeledVehicleSpawnableAreaData::TolelanceGroundPitchAngle' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledSafeAreaCheckerParam
// 0x002C (0x002C - 0x0000)
struct FEndWheeledSafeAreaCheckerParam final
{
public:
	struct FVector                                GetOffBeginRelativeLocation;                       // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GetOffForwardPosOffset;                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GetOffBackwardPosOffset;                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRange;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchOffsetSpeed;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSearchOffset;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RequestEscapeVehicleRotation;                      // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledSafeAreaCheckerParam) == 0x000004, "Wrong alignment on FEndWheeledSafeAreaCheckerParam");
static_assert(sizeof(FEndWheeledSafeAreaCheckerParam) == 0x00002C, "Wrong size on FEndWheeledSafeAreaCheckerParam");
static_assert(offsetof(FEndWheeledSafeAreaCheckerParam, GetOffBeginRelativeLocation) == 0x000000, "Member 'FEndWheeledSafeAreaCheckerParam::GetOffBeginRelativeLocation' has a wrong offset!");
static_assert(offsetof(FEndWheeledSafeAreaCheckerParam, GetOffForwardPosOffset) == 0x00000C, "Member 'FEndWheeledSafeAreaCheckerParam::GetOffForwardPosOffset' has a wrong offset!");
static_assert(offsetof(FEndWheeledSafeAreaCheckerParam, GetOffBackwardPosOffset) == 0x000010, "Member 'FEndWheeledSafeAreaCheckerParam::GetOffBackwardPosOffset' has a wrong offset!");
static_assert(offsetof(FEndWheeledSafeAreaCheckerParam, SearchRange) == 0x000014, "Member 'FEndWheeledSafeAreaCheckerParam::SearchRange' has a wrong offset!");
static_assert(offsetof(FEndWheeledSafeAreaCheckerParam, SearchOffsetSpeed) == 0x000018, "Member 'FEndWheeledSafeAreaCheckerParam::SearchOffsetSpeed' has a wrong offset!");
static_assert(offsetof(FEndWheeledSafeAreaCheckerParam, MaxSearchOffset) == 0x00001C, "Member 'FEndWheeledSafeAreaCheckerParam::MaxSearchOffset' has a wrong offset!");
static_assert(offsetof(FEndWheeledSafeAreaCheckerParam, RequestEscapeVehicleRotation) == 0x000020, "Member 'FEndWheeledSafeAreaCheckerParam::RequestEscapeVehicleRotation' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleRiderReactionParam
// 0x0018 (0x0018 - 0x0000)
struct FEndWheeledVehicleRiderReactionParam final
{
public:
	float                                         DeltaSpeedKphForHitWall;                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSpeedKphForBigJump;                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinInAirTimeForBigJump;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               VehicleRotationOnPlayGrab;                         // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleRiderReactionParam) == 0x000004, "Wrong alignment on FEndWheeledVehicleRiderReactionParam");
static_assert(sizeof(FEndWheeledVehicleRiderReactionParam) == 0x000018, "Wrong size on FEndWheeledVehicleRiderReactionParam");
static_assert(offsetof(FEndWheeledVehicleRiderReactionParam, DeltaSpeedKphForHitWall) == 0x000000, "Member 'FEndWheeledVehicleRiderReactionParam::DeltaSpeedKphForHitWall' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleRiderReactionParam, DeltaSpeedKphForBigJump) == 0x000004, "Member 'FEndWheeledVehicleRiderReactionParam::DeltaSpeedKphForBigJump' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleRiderReactionParam, MinInAirTimeForBigJump) == 0x000008, "Member 'FEndWheeledVehicleRiderReactionParam::MinInAirTimeForBigJump' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleRiderReactionParam, VehicleRotationOnPlayGrab) == 0x00000C, "Member 'FEndWheeledVehicleRiderReactionParam::VehicleRotationOnPlayGrab' has a wrong offset!");

// ScriptStruct EndGame.EndWheeledVehicleSplineMoveMetaData
// 0x0008 (0x0008 - 0x0000)
struct FEndWheeledVehicleSplineMoveMetaData final
{
public:
	float                                         InputKey;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWheeledVehicleSplineMoveMetaData) == 0x000004, "Wrong alignment on FEndWheeledVehicleSplineMoveMetaData");
static_assert(sizeof(FEndWheeledVehicleSplineMoveMetaData) == 0x000008, "Wrong size on FEndWheeledVehicleSplineMoveMetaData");
static_assert(offsetof(FEndWheeledVehicleSplineMoveMetaData, InputKey) == 0x000000, "Member 'FEndWheeledVehicleSplineMoveMetaData::InputKey' has a wrong offset!");
static_assert(offsetof(FEndWheeledVehicleSplineMoveMetaData, MaxSpeed) == 0x000004, "Member 'FEndWheeledVehicleSplineMoveMetaData::MaxSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndMenuWorldMapAreaSetting
// 0x0028 (0x0028 - 0x0000)
struct FEndMenuWorldMapAreaSetting final
{
public:
	struct FSoftObjectPath                        ThumbnailImage;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FlavorText;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuWorldMapAreaSetting) == 0x000008, "Wrong alignment on FEndMenuWorldMapAreaSetting");
static_assert(sizeof(FEndMenuWorldMapAreaSetting) == 0x000028, "Wrong size on FEndMenuWorldMapAreaSetting");
static_assert(offsetof(FEndMenuWorldMapAreaSetting, ThumbnailImage) == 0x000000, "Member 'FEndMenuWorldMapAreaSetting::ThumbnailImage' has a wrong offset!");
static_assert(offsetof(FEndMenuWorldMapAreaSetting, FlavorText) == 0x000018, "Member 'FEndMenuWorldMapAreaSetting::FlavorText' has a wrong offset!");

// ScriptStruct EndGame.EndZiplineCameraModule
// 0x0038 (0x0428 - 0x03F0)
struct FEndZiplineCameraModule final : public FEndCameraModule
{
public:
	uint8                                         Pad_3F0[0x38];                                     // 0x03F0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndZiplineCameraModule) == 0x000008, "Wrong alignment on FEndZiplineCameraModule");
static_assert(sizeof(FEndZiplineCameraModule) == 0x000428, "Wrong size on FEndZiplineCameraModule");

// ScriptStruct EndGame.MovieSceneEndEventParameters
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMovieSceneEndEventParameters final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEndEventParameters) == 0x000008, "Wrong alignment on FMovieSceneEndEventParameters");
static_assert(sizeof(FMovieSceneEndEventParameters) == 0x000028, "Wrong size on FMovieSceneEndEventParameters");

// ScriptStruct EndGame.EndEventPayload
// 0x0030 (0x0030 - 0x0000)
struct FEndEventPayload final
{
public:
	uint8                                         Priority;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEndEventParameters          Parameters;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndEventPayload) == 0x000008, "Wrong alignment on FEndEventPayload");
static_assert(sizeof(FEndEventPayload) == 0x000030, "Wrong size on FEndEventPayload");
static_assert(offsetof(FEndEventPayload, Priority) == 0x000000, "Member 'FEndEventPayload::Priority' has a wrong offset!");
static_assert(offsetof(FEndEventPayload, Parameters) == 0x000008, "Member 'FEndEventPayload::Parameters' has a wrong offset!");

// ScriptStruct EndGame.MovieSceneEndEventSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEndEventSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEndEventPayload>               KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEndEventSectionData) == 0x000008, "Wrong alignment on FMovieSceneEndEventSectionData");
static_assert(sizeof(FMovieSceneEndEventSectionData) == 0x000088, "Wrong size on FMovieSceneEndEventSectionData");
static_assert(offsetof(FMovieSceneEndEventSectionData, Times) == 0x000008, "Member 'FMovieSceneEndEventSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEndEventSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEndEventSectionData::KeyValues' has a wrong offset!");

// ScriptStruct EndGame.MovieSceneEndEventSectionTemplate
// 0x0088 (0x00C0 - 0x0038)
struct FMovieSceneEndEventSectionTemplate final : public FMovieSceneEndEventTemplateBase
{
public:
	struct FMovieSceneEndEventSectionData         EventData;                                         // 0x0038(0x0088)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEndEventSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEndEventSectionTemplate");
static_assert(sizeof(FMovieSceneEndEventSectionTemplate) == 0x0000C0, "Wrong size on FMovieSceneEndEventSectionTemplate");
static_assert(offsetof(FMovieSceneEndEventSectionTemplate, EventData) == 0x000038, "Member 'FMovieSceneEndEventSectionTemplate::EventData' has a wrong offset!");

// ScriptStruct EndGame.MovieSceneEndShootingGameSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEndShootingGameSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEndShootingGamePayload>        KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEndShootingGameSectionData) == 0x000008, "Wrong alignment on FMovieSceneEndShootingGameSectionData");
static_assert(sizeof(FMovieSceneEndShootingGameSectionData) == 0x000088, "Wrong size on FMovieSceneEndShootingGameSectionData");
static_assert(offsetof(FMovieSceneEndShootingGameSectionData, Times) == 0x000008, "Member 'FMovieSceneEndShootingGameSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEndShootingGameSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEndShootingGameSectionData::KeyValues' has a wrong offset!");

// ScriptStruct EndGame.EndToroccoPayload
// 0x0038 (0x0038 - 0x0000)
struct FEndToroccoPayload final
{
public:
	uint8                                         Priority;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowReticle;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowResultScreen;                                 // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RouteEndName;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEndToroccoParameters        Parameters;                                        // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndToroccoPayload) == 0x000008, "Wrong alignment on FEndToroccoPayload");
static_assert(sizeof(FEndToroccoPayload) == 0x000038, "Wrong size on FEndToroccoPayload");
static_assert(offsetof(FEndToroccoPayload, Priority) == 0x000000, "Member 'FEndToroccoPayload::Priority' has a wrong offset!");
static_assert(offsetof(FEndToroccoPayload, bShowReticle) == 0x000001, "Member 'FEndToroccoPayload::bShowReticle' has a wrong offset!");
static_assert(offsetof(FEndToroccoPayload, bShowResultScreen) == 0x000002, "Member 'FEndToroccoPayload::bShowResultScreen' has a wrong offset!");
static_assert(offsetof(FEndToroccoPayload, RouteEndName) == 0x000004, "Member 'FEndToroccoPayload::RouteEndName' has a wrong offset!");
static_assert(offsetof(FEndToroccoPayload, Parameters) == 0x000010, "Member 'FEndToroccoPayload::Parameters' has a wrong offset!");

// ScriptStruct EndGame.MovieSceneEndToroccoSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEndToroccoSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEndToroccoPayload>             KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEndToroccoSectionData) == 0x000008, "Wrong alignment on FMovieSceneEndToroccoSectionData");
static_assert(sizeof(FMovieSceneEndToroccoSectionData) == 0x000088, "Wrong size on FMovieSceneEndToroccoSectionData");
static_assert(offsetof(FMovieSceneEndToroccoSectionData, Times) == 0x000008, "Member 'FMovieSceneEndToroccoSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEndToroccoSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEndToroccoSectionData::KeyValues' has a wrong offset!");

// ScriptStruct EndGame.MovieSceneEndWeaponSwimParameters
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMovieSceneEndWeaponSwimParameters final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEndWeaponSwimParameters) == 0x000008, "Wrong alignment on FMovieSceneEndWeaponSwimParameters");
static_assert(sizeof(FMovieSceneEndWeaponSwimParameters) == 0x000028, "Wrong size on FMovieSceneEndWeaponSwimParameters");

// ScriptStruct EndGame.EndWeaponSwimPayload
// 0x0038 (0x0038 - 0x0000)
struct FEndWeaponSwimPayload final
{
public:
	uint8                                         Priority;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RouteName;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEndWeaponSwimParameters     Parameters;                                        // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWeaponSwimPayload) == 0x000008, "Wrong alignment on FEndWeaponSwimPayload");
static_assert(sizeof(FEndWeaponSwimPayload) == 0x000038, "Wrong size on FEndWeaponSwimPayload");
static_assert(offsetof(FEndWeaponSwimPayload, Priority) == 0x000000, "Member 'FEndWeaponSwimPayload::Priority' has a wrong offset!");
static_assert(offsetof(FEndWeaponSwimPayload, RouteName) == 0x000004, "Member 'FEndWeaponSwimPayload::RouteName' has a wrong offset!");
static_assert(offsetof(FEndWeaponSwimPayload, Parameters) == 0x000010, "Member 'FEndWeaponSwimPayload::Parameters' has a wrong offset!");

// ScriptStruct EndGame.MovieSceneEndWeaponSwimSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEndWeaponSwimSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEndWeaponSwimPayload>          KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEndWeaponSwimSectionData) == 0x000008, "Wrong alignment on FMovieSceneEndWeaponSwimSectionData");
static_assert(sizeof(FMovieSceneEndWeaponSwimSectionData) == 0x000088, "Wrong size on FMovieSceneEndWeaponSwimSectionData");
static_assert(offsetof(FMovieSceneEndWeaponSwimSectionData, Times) == 0x000008, "Member 'FMovieSceneEndWeaponSwimSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEndWeaponSwimSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEndWeaponSwimSectionData::KeyValues' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAdditiveDamage_DebugSettings
// 0x0014 (0x0014 - 0x0000)
struct FRigUnit_EndAdditiveDamage_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         HitLocationItem;                                   // 0x0004(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionState                           LocomotionState;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndAdditiveDamage_DebugSettings) == 0x000004, "Wrong alignment on FRigUnit_EndAdditiveDamage_DebugSettings");
static_assert(sizeof(FRigUnit_EndAdditiveDamage_DebugSettings) == 0x000014, "Wrong size on FRigUnit_EndAdditiveDamage_DebugSettings");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndAdditiveDamage_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_DebugSettings, HitLocationItem) == 0x000004, "Member 'FRigUnit_EndAdditiveDamage_DebugSettings::HitLocationItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_DebugSettings, LocomotionState) == 0x000010, "Member 'FRigUnit_EndAdditiveDamage_DebugSettings::LocomotionState' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAdditiveDamage_HitBoneSettingCache
// 0x0060 (0x0060 - 0x0000)
struct FRigUnit_EndAdditiveDamage_HitBoneSettingCache final
{
public:
	struct FCachedRigElement                      CachedItem;                                        // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedParentItem;                                  // 0x0014(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRate;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeed;                                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             DeltaTransform;                                    // 0x0030(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAdditiveDamage_HitBoneSettingCache) == 0x000010, "Wrong alignment on FRigUnit_EndAdditiveDamage_HitBoneSettingCache");
static_assert(sizeof(FRigUnit_EndAdditiveDamage_HitBoneSettingCache) == 0x000060, "Wrong size on FRigUnit_EndAdditiveDamage_HitBoneSettingCache");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitBoneSettingCache, CachedItem) == 0x000000, "Member 'FRigUnit_EndAdditiveDamage_HitBoneSettingCache::CachedItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitBoneSettingCache, CachedParentItem) == 0x000014, "Member 'FRigUnit_EndAdditiveDamage_HitBoneSettingCache::CachedParentItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitBoneSettingCache, BlendRate) == 0x000028, "Member 'FRigUnit_EndAdditiveDamage_HitBoneSettingCache::BlendRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitBoneSettingCache, BlendSpeed) == 0x00002C, "Member 'FRigUnit_EndAdditiveDamage_HitBoneSettingCache::BlendSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitBoneSettingCache, DeltaTransform) == 0x000030, "Member 'FRigUnit_EndAdditiveDamage_HitBoneSettingCache::DeltaTransform' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAdditiveDamage_HitSettingCache
// 0x0070 (0x0070 - 0x0000)
struct FRigUnit_EndAdditiveDamage_HitSettingCache final
{
public:
	struct FRigUnit_EndAdditiveDamage_HitBoneSettingCache BaseSettingCache;                                  // 0x0000(0x0060)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndAdditiveDamage_HitBoneSettingCache> AdditiveSettingCaches;                             // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAdditiveDamage_HitSettingCache) == 0x000010, "Wrong alignment on FRigUnit_EndAdditiveDamage_HitSettingCache");
static_assert(sizeof(FRigUnit_EndAdditiveDamage_HitSettingCache) == 0x000070, "Wrong size on FRigUnit_EndAdditiveDamage_HitSettingCache");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitSettingCache, BaseSettingCache) == 0x000000, "Member 'FRigUnit_EndAdditiveDamage_HitSettingCache::BaseSettingCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_HitSettingCache, AdditiveSettingCaches) == 0x000060, "Member 'FRigUnit_EndAdditiveDamage_HitSettingCache::AdditiveSettingCaches' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAdditiveDamage_Cache
// 0x0038 (0x0038 - 0x0000)
struct FRigUnit_EndAdditiveDamage_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndAdditiveDamage_HitSettingCache> HitSettingCaches;                                  // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirection;                                      // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndAdditiveDamage_Cache) == 0x000008, "Wrong alignment on FRigUnit_EndAdditiveDamage_Cache");
static_assert(sizeof(FRigUnit_EndAdditiveDamage_Cache) == 0x000038, "Wrong size on FRigUnit_EndAdditiveDamage_Cache");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndAdditiveDamage_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_Cache, HitSettingCaches) == 0x000008, "Member 'FRigUnit_EndAdditiveDamage_Cache::HitSettingCaches' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_Cache, bHit) == 0x000018, "Member 'FRigUnit_EndAdditiveDamage_Cache::bHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_Cache, HitLocation) == 0x00001C, "Member 'FRigUnit_EndAdditiveDamage_Cache::HitLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage_Cache, HitDirection) == 0x000028, "Member 'FRigUnit_EndAdditiveDamage_Cache::HitDirection' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAdditiveDamage
// 0x0060 (0x00C8 - 0x0068)
struct FRigUnit_EndAdditiveDamage final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndAdditiveDamage_Settings    Settings;                                          // 0x0068(0x0010)(NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_EndAdditiveDamage_DebugSettings DebugSettings;                                     // 0x007C(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndAdditiveDamage_Cache       Cache;                                             // 0x0090(0x0038)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAdditiveDamage) == 0x000008, "Wrong alignment on FRigUnit_EndAdditiveDamage");
static_assert(sizeof(FRigUnit_EndAdditiveDamage) == 0x0000C8, "Wrong size on FRigUnit_EndAdditiveDamage");
static_assert(offsetof(FRigUnit_EndAdditiveDamage, Settings) == 0x000068, "Member 'FRigUnit_EndAdditiveDamage::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage, Weight) == 0x000078, "Member 'FRigUnit_EndAdditiveDamage::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage, DebugSettings) == 0x00007C, "Member 'FRigUnit_EndAdditiveDamage::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAdditiveDamage, Cache) == 0x000090, "Member 'FRigUnit_EndAdditiveDamage::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndAim
// 0x0108 (0x0170 - 0x0068)
struct FRigUnit_EndAim final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndAim_Settings               Settings;                                          // 0x0068(0x0040)(NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndAim_DebugSettings          DebugSettings;                                     // 0x00B0(0x0070)(NativeAccessSpecifierPublic)
	struct FRigUnit_EndAim_Cache                  Cache;                                             // 0x0120(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAim) == 0x000010, "Wrong alignment on FRigUnit_EndAim");
static_assert(sizeof(FRigUnit_EndAim) == 0x000170, "Wrong size on FRigUnit_EndAim");
static_assert(offsetof(FRigUnit_EndAim, Settings) == 0x000068, "Member 'FRigUnit_EndAim::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim, Weight) == 0x0000A8, "Member 'FRigUnit_EndAim::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim, DebugSettings) == 0x0000B0, "Member 'FRigUnit_EndAim::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAim, Cache) == 0x000120, "Member 'FRigUnit_EndAim::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndApplyAdditiveAnimation
// 0x0000 (0x0068 - 0x0068)
struct FRigUnit_EndApplyAdditiveAnimation final : public FRigUnit_HighlevelBaseMutable
{
};
static_assert(alignof(FRigUnit_EndApplyAdditiveAnimation) == 0x000008, "Wrong alignment on FRigUnit_EndApplyAdditiveAnimation");
static_assert(sizeof(FRigUnit_EndApplyAdditiveAnimation) == 0x000068, "Wrong size on FRigUnit_EndApplyAdditiveAnimation");

// ScriptStruct EndGame.RigUnit_EndAttachTransform
// 0x0028 (0x0090 - 0x0068)
struct FRigUnit_EndAttachTransform final : public FRigUnitMutable
{
public:
	class FName                                   SourceSocketName;                                  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         DestItem;                                          // 0x0070(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedDestIndex;                                   // 0x007C(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndAttachTransform) == 0x000008, "Wrong alignment on FRigUnit_EndAttachTransform");
static_assert(sizeof(FRigUnit_EndAttachTransform) == 0x000090, "Wrong size on FRigUnit_EndAttachTransform");
static_assert(offsetof(FRigUnit_EndAttachTransform, SourceSocketName) == 0x000068, "Member 'FRigUnit_EndAttachTransform::SourceSocketName' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAttachTransform, DestItem) == 0x000070, "Member 'FRigUnit_EndAttachTransform::DestItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndAttachTransform, CachedDestIndex) == 0x00007C, "Member 'FRigUnit_EndAttachTransform::CachedDestIndex' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBodySpline_Settings
// 0x0054 (0x0054 - 0x0000)
struct FRigUnit_EndBodySpline_Settings final
{
public:
	struct FRigElementKey                         RootItem;                                          // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         HipItem;                                           // 0x000C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         HeadEndItem;                                       // 0x0018(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         TailEndItem;                                       // 0x0024(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointHistoryLifeTime;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointPredictionDistanceStep;                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PredictionForwardBlendRange;                       // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInSpeed;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutSpeed;                                     // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationInterpSpeed;                               // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoDesiredMovementContinuationTime;                 // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreWalkRunStart;                               // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndBodySpline_Settings) == 0x000004, "Wrong alignment on FRigUnit_EndBodySpline_Settings");
static_assert(sizeof(FRigUnit_EndBodySpline_Settings) == 0x000054, "Wrong size on FRigUnit_EndBodySpline_Settings");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, RootItem) == 0x000000, "Member 'FRigUnit_EndBodySpline_Settings::RootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, HipItem) == 0x00000C, "Member 'FRigUnit_EndBodySpline_Settings::HipItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, HeadEndItem) == 0x000018, "Member 'FRigUnit_EndBodySpline_Settings::HeadEndItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, TailEndItem) == 0x000024, "Member 'FRigUnit_EndBodySpline_Settings::TailEndItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, PointHistoryLifeTime) == 0x000030, "Member 'FRigUnit_EndBodySpline_Settings::PointHistoryLifeTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, PointPredictionDistanceStep) == 0x000034, "Member 'FRigUnit_EndBodySpline_Settings::PointPredictionDistanceStep' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, PredictionForwardBlendRange) == 0x000038, "Member 'FRigUnit_EndBodySpline_Settings::PredictionForwardBlendRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, BlendInSpeed) == 0x000040, "Member 'FRigUnit_EndBodySpline_Settings::BlendInSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, BlendOutSpeed) == 0x000044, "Member 'FRigUnit_EndBodySpline_Settings::BlendOutSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, RotationInterpSpeed) == 0x000048, "Member 'FRigUnit_EndBodySpline_Settings::RotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, NoDesiredMovementContinuationTime) == 0x00004C, "Member 'FRigUnit_EndBodySpline_Settings::NoDesiredMovementContinuationTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Settings, bIgnoreWalkRunStart) == 0x000050, "Member 'FRigUnit_EndBodySpline_Settings::bIgnoreWalkRunStart' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBodySpline_DebugSettings
// 0x0002 (0x0002 - 0x0000)
struct FRigUnit_EndBodySpline_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndBodySpline_DebugSettings) == 0x000001, "Wrong alignment on FRigUnit_EndBodySpline_DebugSettings");
static_assert(sizeof(FRigUnit_EndBodySpline_DebugSettings) == 0x000002, "Wrong size on FRigUnit_EndBodySpline_DebugSettings");
static_assert(offsetof(FRigUnit_EndBodySpline_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndBodySpline_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_DebugSettings, bDebugDraw) == 0x000001, "Member 'FRigUnit_EndBodySpline_DebugSettings::bDebugDraw' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBodySpline_Cache
// 0x0050 (0x0050 - 0x0000)
struct FRigUnit_EndBodySpline_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedRootItem;                                    // 0x0004(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedHipItem;                                     // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndBodySpline_BoneCache> HeadItemCaches;                                    // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndBodySpline_BoneCache> TailItemCaches;                                    // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndBodySpline_Cache) == 0x000008, "Wrong alignment on FRigUnit_EndBodySpline_Cache");
static_assert(sizeof(FRigUnit_EndBodySpline_Cache) == 0x000050, "Wrong size on FRigUnit_EndBodySpline_Cache");
static_assert(offsetof(FRigUnit_EndBodySpline_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndBodySpline_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Cache, CachedRootItem) == 0x000004, "Member 'FRigUnit_EndBodySpline_Cache::CachedRootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Cache, CachedHipItem) == 0x000018, "Member 'FRigUnit_EndBodySpline_Cache::CachedHipItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Cache, HeadItemCaches) == 0x000030, "Member 'FRigUnit_EndBodySpline_Cache::HeadItemCaches' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline_Cache, TailItemCaches) == 0x000040, "Member 'FRigUnit_EndBodySpline_Cache::TailItemCaches' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBodySpline
// 0x00B0 (0x0118 - 0x0068)
struct FRigUnit_EndBodySpline final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndBodySpline_Settings        Settings;                                          // 0x0068(0x0054)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_EndBodySpline_DebugSettings   DebugSettings;                                     // 0x00C0(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndBodySpline_Cache           Cache;                                             // 0x00C8(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndBodySpline) == 0x000008, "Wrong alignment on FRigUnit_EndBodySpline");
static_assert(sizeof(FRigUnit_EndBodySpline) == 0x000118, "Wrong size on FRigUnit_EndBodySpline");
static_assert(offsetof(FRigUnit_EndBodySpline, Settings) == 0x000068, "Member 'FRigUnit_EndBodySpline::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline, Weight) == 0x0000BC, "Member 'FRigUnit_EndBodySpline::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline, DebugSettings) == 0x0000C0, "Member 'FRigUnit_EndBodySpline::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBodySpline, Cache) == 0x0000C8, "Member 'FRigUnit_EndBodySpline::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBoneControl_DebugSettings
// 0x0058 (0x0058 - 0x0000)
struct FRigUnit_EndBoneControl_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableInterp;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         HipControlItem;                                    // 0x0004(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         SpineControlItem;                                  // 0x0010(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         HandLeftControlItem;                               // 0x001C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         HandRightControlItem;                              // 0x0028(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         FootLeftControlItem;                               // 0x0034(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         FootRightControlItem;                              // 0x0040(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         HeadControlItem;                                   // 0x004C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndBoneControl_DebugSettings) == 0x000004, "Wrong alignment on FRigUnit_EndBoneControl_DebugSettings");
static_assert(sizeof(FRigUnit_EndBoneControl_DebugSettings) == 0x000058, "Wrong size on FRigUnit_EndBoneControl_DebugSettings");
static_assert(offsetof(FRigUnit_EndBoneControl_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndBoneControl_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_DebugSettings, bDisableInterp) == 0x000001, "Member 'FRigUnit_EndBoneControl_DebugSettings::bDisableInterp' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_DebugSettings, HipControlItem) == 0x000004, "Member 'FRigUnit_EndBoneControl_DebugSettings::HipControlItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_DebugSettings, SpineControlItem) == 0x000010, "Member 'FRigUnit_EndBoneControl_DebugSettings::SpineControlItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_DebugSettings, HandLeftControlItem) == 0x00001C, "Member 'FRigUnit_EndBoneControl_DebugSettings::HandLeftControlItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_DebugSettings, HandRightControlItem) == 0x000028, "Member 'FRigUnit_EndBoneControl_DebugSettings::HandRightControlItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_DebugSettings, FootLeftControlItem) == 0x000034, "Member 'FRigUnit_EndBoneControl_DebugSettings::FootLeftControlItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_DebugSettings, FootRightControlItem) == 0x000040, "Member 'FRigUnit_EndBoneControl_DebugSettings::FootRightControlItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl_DebugSettings, HeadControlItem) == 0x00004C, "Member 'FRigUnit_EndBoneControl_DebugSettings::HeadControlItem' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBoneControl
// 0x00E8 (0x0150 - 0x0068)
struct FRigUnit_EndBoneControl final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndBoneControl_Settings       Settings;                                          // 0x0068(0x0070)(NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_EndBoneControl_DebugSettings  DebugSettings;                                     // 0x00DC(0x0058)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndBoneControl_Cache          Cache;                                             // 0x0138(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndBoneControl) == 0x000008, "Wrong alignment on FRigUnit_EndBoneControl");
static_assert(sizeof(FRigUnit_EndBoneControl) == 0x000150, "Wrong size on FRigUnit_EndBoneControl");
static_assert(offsetof(FRigUnit_EndBoneControl, Settings) == 0x000068, "Member 'FRigUnit_EndBoneControl::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl, Weight) == 0x0000D8, "Member 'FRigUnit_EndBoneControl::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl, DebugSettings) == 0x0000DC, "Member 'FRigUnit_EndBoneControl::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoneControl, Cache) == 0x000138, "Member 'FRigUnit_EndBoneControl::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBoxTraceMulti
// 0x0058 (0x0060 - 0x0008)
struct FRigUnit_EndBoxTraceMulti final : public FRigUnit
{
public:
	struct FVector                                START;                                             // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rotation;                                          // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                HalfExtent;                                        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSimpleCollision;                               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsyncTrace;                                       // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        HitLocations;                                      // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        HitNormals;                                        // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndBoxTraceMulti) == 0x000010, "Wrong alignment on FRigUnit_EndBoxTraceMulti");
static_assert(sizeof(FRigUnit_EndBoxTraceMulti) == 0x000060, "Wrong size on FRigUnit_EndBoxTraceMulti");
static_assert(offsetof(FRigUnit_EndBoxTraceMulti, START) == 0x000008, "Member 'FRigUnit_EndBoxTraceMulti::START' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTraceMulti, End) == 0x000014, "Member 'FRigUnit_EndBoxTraceMulti::End' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTraceMulti, Rotation) == 0x000020, "Member 'FRigUnit_EndBoxTraceMulti::Rotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTraceMulti, HalfExtent) == 0x000030, "Member 'FRigUnit_EndBoxTraceMulti::HalfExtent' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTraceMulti, bUseSimpleCollision) == 0x00003C, "Member 'FRigUnit_EndBoxTraceMulti::bUseSimpleCollision' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTraceMulti, bAsyncTrace) == 0x00003D, "Member 'FRigUnit_EndBoxTraceMulti::bAsyncTrace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTraceMulti, bDebugDraw) == 0x00003E, "Member 'FRigUnit_EndBoxTraceMulti::bDebugDraw' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTraceMulti, bHit) == 0x00003F, "Member 'FRigUnit_EndBoxTraceMulti::bHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTraceMulti, HitLocations) == 0x000040, "Member 'FRigUnit_EndBoxTraceMulti::HitLocations' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTraceMulti, HitNormals) == 0x000050, "Member 'FRigUnit_EndBoxTraceMulti::HitNormals' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndBoxTrace
// 0x0058 (0x0060 - 0x0008)
struct FRigUnit_EndBoxTrace final : public FRigUnit
{
public:
	struct FVector                                START;                                             // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rotation;                                          // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                HalfExtent;                                        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSimpleCollision;                               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsyncTrace;                                       // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndBoxTrace) == 0x000010, "Wrong alignment on FRigUnit_EndBoxTrace");
static_assert(sizeof(FRigUnit_EndBoxTrace) == 0x000060, "Wrong size on FRigUnit_EndBoxTrace");
static_assert(offsetof(FRigUnit_EndBoxTrace, START) == 0x000008, "Member 'FRigUnit_EndBoxTrace::START' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTrace, End) == 0x000014, "Member 'FRigUnit_EndBoxTrace::End' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTrace, Rotation) == 0x000020, "Member 'FRigUnit_EndBoxTrace::Rotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTrace, HalfExtent) == 0x000030, "Member 'FRigUnit_EndBoxTrace::HalfExtent' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTrace, bUseSimpleCollision) == 0x00003C, "Member 'FRigUnit_EndBoxTrace::bUseSimpleCollision' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTrace, bAsyncTrace) == 0x00003D, "Member 'FRigUnit_EndBoxTrace::bAsyncTrace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTrace, bDebugDraw) == 0x00003E, "Member 'FRigUnit_EndBoxTrace::bDebugDraw' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTrace, bHit) == 0x00003F, "Member 'FRigUnit_EndBoxTrace::bHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTrace, HitLocation) == 0x000040, "Member 'FRigUnit_EndBoxTrace::HitLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndBoxTrace, HitNormal) == 0x00004C, "Member 'FRigUnit_EndBoxTrace::HitNormal' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndSphereTraceMulti
// 0x0040 (0x0048 - 0x0008)
struct FRigUnit_EndSphereTraceMulti final : public FRigUnit
{
public:
	struct FVector                                START;                                             // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSimpleCollision;                               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsyncTrace;                                       // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        HitLocations;                                      // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        HitNormals;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndSphereTraceMulti) == 0x000008, "Wrong alignment on FRigUnit_EndSphereTraceMulti");
static_assert(sizeof(FRigUnit_EndSphereTraceMulti) == 0x000048, "Wrong size on FRigUnit_EndSphereTraceMulti");
static_assert(offsetof(FRigUnit_EndSphereTraceMulti, START) == 0x000008, "Member 'FRigUnit_EndSphereTraceMulti::START' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTraceMulti, End) == 0x000014, "Member 'FRigUnit_EndSphereTraceMulti::End' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTraceMulti, Radius) == 0x000020, "Member 'FRigUnit_EndSphereTraceMulti::Radius' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTraceMulti, bUseSimpleCollision) == 0x000024, "Member 'FRigUnit_EndSphereTraceMulti::bUseSimpleCollision' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTraceMulti, bAsyncTrace) == 0x000025, "Member 'FRigUnit_EndSphereTraceMulti::bAsyncTrace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTraceMulti, bDebugDraw) == 0x000026, "Member 'FRigUnit_EndSphereTraceMulti::bDebugDraw' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTraceMulti, bHit) == 0x000027, "Member 'FRigUnit_EndSphereTraceMulti::bHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTraceMulti, HitLocations) == 0x000028, "Member 'FRigUnit_EndSphereTraceMulti::HitLocations' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTraceMulti, HitNormals) == 0x000038, "Member 'FRigUnit_EndSphereTraceMulti::HitNormals' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndSphereTrace
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_EndSphereTrace final : public FRigUnit
{
public:
	struct FVector                                START;                                             // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSimpleCollision;                               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsyncTrace;                                       // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndSphereTrace) == 0x000008, "Wrong alignment on FRigUnit_EndSphereTrace");
static_assert(sizeof(FRigUnit_EndSphereTrace) == 0x000040, "Wrong size on FRigUnit_EndSphereTrace");
static_assert(offsetof(FRigUnit_EndSphereTrace, START) == 0x000008, "Member 'FRigUnit_EndSphereTrace::START' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTrace, End) == 0x000014, "Member 'FRigUnit_EndSphereTrace::End' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTrace, Radius) == 0x000020, "Member 'FRigUnit_EndSphereTrace::Radius' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTrace, bUseSimpleCollision) == 0x000024, "Member 'FRigUnit_EndSphereTrace::bUseSimpleCollision' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTrace, bAsyncTrace) == 0x000025, "Member 'FRigUnit_EndSphereTrace::bAsyncTrace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTrace, bDebugDraw) == 0x000026, "Member 'FRigUnit_EndSphereTrace::bDebugDraw' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTrace, bHit) == 0x000027, "Member 'FRigUnit_EndSphereTrace::bHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTrace, HitLocation) == 0x000028, "Member 'FRigUnit_EndSphereTrace::HitLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSphereTrace, HitNormal) == 0x000034, "Member 'FRigUnit_EndSphereTrace::HitNormal' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndContactShake_Item
// 0x0038 (0x0038 - 0x0000)
struct FRigUnit_EndContactShake_Item final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ContactRadiusRange;                                // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ContactOffset;                                     // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShakeVector;                                       // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInSpeed;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutSpeed;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndContactShake_Item) == 0x000004, "Wrong alignment on FRigUnit_EndContactShake_Item");
static_assert(sizeof(FRigUnit_EndContactShake_Item) == 0x000038, "Wrong size on FRigUnit_EndContactShake_Item");
static_assert(offsetof(FRigUnit_EndContactShake_Item, Item) == 0x000000, "Member 'FRigUnit_EndContactShake_Item::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_Item, ContactRadiusRange) == 0x00000C, "Member 'FRigUnit_EndContactShake_Item::ContactRadiusRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_Item, ContactOffset) == 0x000014, "Member 'FRigUnit_EndContactShake_Item::ContactOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_Item, ShakeVector) == 0x000020, "Member 'FRigUnit_EndContactShake_Item::ShakeVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_Item, Frequency) == 0x00002C, "Member 'FRigUnit_EndContactShake_Item::Frequency' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_Item, BlendInSpeed) == 0x000030, "Member 'FRigUnit_EndContactShake_Item::BlendInSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_Item, BlendOutSpeed) == 0x000034, "Member 'FRigUnit_EndContactShake_Item::BlendOutSpeed' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndContactShake_Settings
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_EndContactShake_Settings final
{
public:
	TArray<struct FRigUnit_EndContactShake_Item>  Items;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndContactShake_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndContactShake_Settings");
static_assert(sizeof(FRigUnit_EndContactShake_Settings) == 0x000010, "Wrong size on FRigUnit_EndContactShake_Settings");
static_assert(offsetof(FRigUnit_EndContactShake_Settings, Items) == 0x000000, "Member 'FRigUnit_EndContactShake_Settings::Items' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndContactShake_Cache
// 0x0030 (0x0030 - 0x0000)
struct FRigUnit_EndContactShake_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndContactShake_ItemCache> ItemCaches;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedDebugTarget;                                 // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndContactShake_Cache) == 0x000008, "Wrong alignment on FRigUnit_EndContactShake_Cache");
static_assert(sizeof(FRigUnit_EndContactShake_Cache) == 0x000030, "Wrong size on FRigUnit_EndContactShake_Cache");
static_assert(offsetof(FRigUnit_EndContactShake_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndContactShake_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_Cache, ItemCaches) == 0x000008, "Member 'FRigUnit_EndContactShake_Cache::ItemCaches' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake_Cache, CachedDebugTarget) == 0x000018, "Member 'FRigUnit_EndContactShake_Cache::CachedDebugTarget' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndContactShake
// 0x0050 (0x00B8 - 0x0068)
struct FRigUnit_EndContactShake final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndContactShake_Settings      Settings;                                          // 0x0068(0x0010)(NativeAccessSpecifierPublic)
	struct FRigUnit_EndContactShake_DebugSettings DebugSettings;                                     // 0x0078(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndContactShake_Cache         Cache;                                             // 0x0088(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndContactShake) == 0x000008, "Wrong alignment on FRigUnit_EndContactShake");
static_assert(sizeof(FRigUnit_EndContactShake) == 0x0000B8, "Wrong size on FRigUnit_EndContactShake");
static_assert(offsetof(FRigUnit_EndContactShake, Settings) == 0x000068, "Member 'FRigUnit_EndContactShake::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake, DebugSettings) == 0x000078, "Member 'FRigUnit_EndContactShake::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndContactShake, Cache) == 0x000088, "Member 'FRigUnit_EndContactShake::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFootControl_DebugSettings
// 0x0006 (0x0006 - 0x0000)
struct FRigUnit_EndFootControl_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawTrace;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableInterp;                                    // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseImmediateTrace;                                // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMovementFloor;                                 // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawFootLock;                                     // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFootControl_DebugSettings) == 0x000001, "Wrong alignment on FRigUnit_EndFootControl_DebugSettings");
static_assert(sizeof(FRigUnit_EndFootControl_DebugSettings) == 0x000006, "Wrong size on FRigUnit_EndFootControl_DebugSettings");
static_assert(offsetof(FRigUnit_EndFootControl_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndFootControl_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_DebugSettings, bDrawTrace) == 0x000001, "Member 'FRigUnit_EndFootControl_DebugSettings::bDrawTrace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_DebugSettings, bDisableInterp) == 0x000002, "Member 'FRigUnit_EndFootControl_DebugSettings::bDisableInterp' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_DebugSettings, bUseImmediateTrace) == 0x000003, "Member 'FRigUnit_EndFootControl_DebugSettings::bUseImmediateTrace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_DebugSettings, bUseMovementFloor) == 0x000004, "Member 'FRigUnit_EndFootControl_DebugSettings::bUseMovementFloor' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_DebugSettings, bDrawFootLock) == 0x000005, "Member 'FRigUnit_EndFootControl_DebugSettings::bDrawFootLock' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFootControl_BalanceCache
// 0x0014 (0x0014 - 0x0000)
struct FRigUnit_EndFootControl_BalanceCache final
{
public:
	struct FCachedRigElement                      CachedItem;                                        // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFootControl_BalanceCache) == 0x000004, "Wrong alignment on FRigUnit_EndFootControl_BalanceCache");
static_assert(sizeof(FRigUnit_EndFootControl_BalanceCache) == 0x000014, "Wrong size on FRigUnit_EndFootControl_BalanceCache");
static_assert(offsetof(FRigUnit_EndFootControl_BalanceCache, CachedItem) == 0x000000, "Member 'FRigUnit_EndFootControl_BalanceCache::CachedItem' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFootControl_FootCache
// 0x0120 (0x0120 - 0x0000)
struct FRigUnit_EndFootControl_FootCache final
{
public:
	struct FCachedRigElement                      CachedFootRootBoneItem;                            // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedFootBoneItem;                                // 0x0014(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedToeBoneItem;                                 // 0x0028(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedFootItem;                                    // 0x003C(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedToeItem;                                     // 0x0050(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedTargetItem;                                  // 0x0064(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialFootHeight;                                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialToeHeight;                                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalFootLength;                                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeltaTranslation;                                  // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  DeltaRotation;                                     // 0x0090(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WorldTraceStart;                                   // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldHitLocation;                                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldHitNormal;                                    // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldImpactLocation;                               // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidWorldTransformCache;                         // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLanding;                                          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledFootLockCache;                             // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootLockRate;                                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLockRateIncludingLandingRate;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FootLockWorldTranslation;                          // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  FootLockWorldRotation;                             // 0x00F0(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                FootLockDeltaTranslation;                          // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  FootLockDeltaRotation;                             // 0x0110(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFootControl_FootCache) == 0x000010, "Wrong alignment on FRigUnit_EndFootControl_FootCache");
static_assert(sizeof(FRigUnit_EndFootControl_FootCache) == 0x000120, "Wrong size on FRigUnit_EndFootControl_FootCache");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, CachedFootRootBoneItem) == 0x000000, "Member 'FRigUnit_EndFootControl_FootCache::CachedFootRootBoneItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, CachedFootBoneItem) == 0x000014, "Member 'FRigUnit_EndFootControl_FootCache::CachedFootBoneItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, CachedToeBoneItem) == 0x000028, "Member 'FRigUnit_EndFootControl_FootCache::CachedToeBoneItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, CachedFootItem) == 0x00003C, "Member 'FRigUnit_EndFootControl_FootCache::CachedFootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, CachedToeItem) == 0x000050, "Member 'FRigUnit_EndFootControl_FootCache::CachedToeItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, CachedTargetItem) == 0x000064, "Member 'FRigUnit_EndFootControl_FootCache::CachedTargetItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, InitialFootHeight) == 0x000078, "Member 'FRigUnit_EndFootControl_FootCache::InitialFootHeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, InitialToeHeight) == 0x00007C, "Member 'FRigUnit_EndFootControl_FootCache::InitialToeHeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, TotalFootLength) == 0x000080, "Member 'FRigUnit_EndFootControl_FootCache::TotalFootLength' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, DeltaTranslation) == 0x000084, "Member 'FRigUnit_EndFootControl_FootCache::DeltaTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, DeltaRotation) == 0x000090, "Member 'FRigUnit_EndFootControl_FootCache::DeltaRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, WorldTraceStart) == 0x0000A0, "Member 'FRigUnit_EndFootControl_FootCache::WorldTraceStart' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, WorldHitLocation) == 0x0000AC, "Member 'FRigUnit_EndFootControl_FootCache::WorldHitLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, WorldHitNormal) == 0x0000B8, "Member 'FRigUnit_EndFootControl_FootCache::WorldHitNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, WorldImpactLocation) == 0x0000C4, "Member 'FRigUnit_EndFootControl_FootCache::WorldImpactLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, bValidWorldTransformCache) == 0x0000D0, "Member 'FRigUnit_EndFootControl_FootCache::bValidWorldTransformCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, bLanding) == 0x0000D1, "Member 'FRigUnit_EndFootControl_FootCache::bLanding' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, bEnabledFootLockCache) == 0x0000D2, "Member 'FRigUnit_EndFootControl_FootCache::bEnabledFootLockCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, FootLockRate) == 0x0000D4, "Member 'FRigUnit_EndFootControl_FootCache::FootLockRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, FootLockRateIncludingLandingRate) == 0x0000D8, "Member 'FRigUnit_EndFootControl_FootCache::FootLockRateIncludingLandingRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, FootLockWorldTranslation) == 0x0000DC, "Member 'FRigUnit_EndFootControl_FootCache::FootLockWorldTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, FootLockWorldRotation) == 0x0000F0, "Member 'FRigUnit_EndFootControl_FootCache::FootLockWorldRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, FootLockDeltaTranslation) == 0x000100, "Member 'FRigUnit_EndFootControl_FootCache::FootLockDeltaTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_FootCache, FootLockDeltaRotation) == 0x000110, "Member 'FRigUnit_EndFootControl_FootCache::FootLockDeltaRotation' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFootControl_Cache
// 0x0160 (0x0160 - 0x0000)
struct FRigUnit_EndFootControl_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastSetSeamlessOutSnapShotLocation;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HipOffsetTranslation;                              // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkRunAlpha;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeFitRate;                                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSpaceGroundHeightBlendRate;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundDeltaHeight;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  GroundUpDeltaRotation;                             // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  GroundUpDeltaRotationStairs;                       // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             WorldTransform;                                    // 0x0040(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             FloorHitResult;                                    // 0x0070(0x0090)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                FloorLocation;                                     // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoHitTransformRatePitch;                           // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoHitTransformRateRoll;                            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLockDeactivateWithExtraActionWaitTimer;        // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedRootItem;                                    // 0x0118(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedHipItem;                                     // 0x012C(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndFootControl_FootCache> FootCaches;                                        // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndFootControl_BalanceCache> BalanceCaches;                                     // 0x0150(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFootControl_Cache) == 0x000010, "Wrong alignment on FRigUnit_EndFootControl_Cache");
static_assert(sizeof(FRigUnit_EndFootControl_Cache) == 0x000160, "Wrong size on FRigUnit_EndFootControl_Cache");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndFootControl_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, bLastSetSeamlessOutSnapShotLocation) == 0x000001, "Member 'FRigUnit_EndFootControl_Cache::bLastSetSeamlessOutSnapShotLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, HipOffsetTranslation) == 0x000004, "Member 'FRigUnit_EndFootControl_Cache::HipOffsetTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, WalkRunAlpha) == 0x000010, "Member 'FRigUnit_EndFootControl_Cache::WalkRunAlpha' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, SlopeFitRate) == 0x000014, "Member 'FRigUnit_EndFootControl_Cache::SlopeFitRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, WorldSpaceGroundHeightBlendRate) == 0x000018, "Member 'FRigUnit_EndFootControl_Cache::WorldSpaceGroundHeightBlendRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, GroundDeltaHeight) == 0x00001C, "Member 'FRigUnit_EndFootControl_Cache::GroundDeltaHeight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, GroundUpDeltaRotation) == 0x000020, "Member 'FRigUnit_EndFootControl_Cache::GroundUpDeltaRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, GroundUpDeltaRotationStairs) == 0x000030, "Member 'FRigUnit_EndFootControl_Cache::GroundUpDeltaRotationStairs' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, WorldTransform) == 0x000040, "Member 'FRigUnit_EndFootControl_Cache::WorldTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, FloorHitResult) == 0x000070, "Member 'FRigUnit_EndFootControl_Cache::FloorHitResult' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, FloorLocation) == 0x000100, "Member 'FRigUnit_EndFootControl_Cache::FloorLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, NoHitTransformRatePitch) == 0x00010C, "Member 'FRigUnit_EndFootControl_Cache::NoHitTransformRatePitch' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, NoHitTransformRateRoll) == 0x000110, "Member 'FRigUnit_EndFootControl_Cache::NoHitTransformRateRoll' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, FootLockDeactivateWithExtraActionWaitTimer) == 0x000114, "Member 'FRigUnit_EndFootControl_Cache::FootLockDeactivateWithExtraActionWaitTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, CachedRootItem) == 0x000118, "Member 'FRigUnit_EndFootControl_Cache::CachedRootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, CachedHipItem) == 0x00012C, "Member 'FRigUnit_EndFootControl_Cache::CachedHipItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, FootCaches) == 0x000140, "Member 'FRigUnit_EndFootControl_Cache::FootCaches' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControl_Cache, BalanceCaches) == 0x000150, "Member 'FRigUnit_EndFootControl_Cache::BalanceCaches' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndFootControlDefault
// 0x0248 (0x02B0 - 0x0068)
struct FRigUnit_EndFootControlDefault final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndFootControl_Settings       Settings;                                          // 0x0068(0x00D8)(NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_EndFootControl_DebugSettings  DebugSettings;                                     // 0x0144(0x0006)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndFootControl_Cache          Cache;                                             // 0x0150(0x0160)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndFootControlDefault) == 0x000010, "Wrong alignment on FRigUnit_EndFootControlDefault");
static_assert(sizeof(FRigUnit_EndFootControlDefault) == 0x0002B0, "Wrong size on FRigUnit_EndFootControlDefault");
static_assert(offsetof(FRigUnit_EndFootControlDefault, Settings) == 0x000068, "Member 'FRigUnit_EndFootControlDefault::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControlDefault, Weight) == 0x000140, "Member 'FRigUnit_EndFootControlDefault::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControlDefault, DebugSettings) == 0x000144, "Member 'FRigUnit_EndFootControlDefault::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndFootControlDefault, Cache) == 0x000150, "Member 'FRigUnit_EndFootControlDefault::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndHandControl_Hand
// 0x0028 (0x0028 - 0x0000)
struct FRigUnit_EndHandControl_Hand final
{
public:
	struct FRigElementKey                         HandBoneItem;                                      // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         HandControlItem;                                   // 0x000C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndHandType                                  HandType;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HandTraceOffset;                                   // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndHandControl_Hand) == 0x000004, "Wrong alignment on FRigUnit_EndHandControl_Hand");
static_assert(sizeof(FRigUnit_EndHandControl_Hand) == 0x000028, "Wrong size on FRigUnit_EndHandControl_Hand");
static_assert(offsetof(FRigUnit_EndHandControl_Hand, HandBoneItem) == 0x000000, "Member 'FRigUnit_EndHandControl_Hand::HandBoneItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Hand, HandControlItem) == 0x00000C, "Member 'FRigUnit_EndHandControl_Hand::HandControlItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Hand, HandType) == 0x000018, "Member 'FRigUnit_EndHandControl_Hand::HandType' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Hand, HandTraceOffset) == 0x00001C, "Member 'FRigUnit_EndHandControl_Hand::HandTraceOffset' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndHandControl_Settings
// 0x0048 (0x0048 - 0x0000)
struct FRigUnit_EndHandControl_Settings final
{
public:
	struct FRigElementKey                         HipItem;                                           // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndHandControl_Hand>   Hands;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandTraceHalfExtent;                               // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandTraceFitAngleMax;                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandTraceTranslationInterpSpeed;                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandTraceRotationInterpSpeed;                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandTraceHipTranslationInterpSpeed;                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndHandControl_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndHandControl_Settings");
static_assert(sizeof(FRigUnit_EndHandControl_Settings) == 0x000048, "Wrong size on FRigUnit_EndHandControl_Settings");
static_assert(offsetof(FRigUnit_EndHandControl_Settings, HipItem) == 0x000000, "Member 'FRigUnit_EndHandControl_Settings::HipItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Settings, Hands) == 0x000010, "Member 'FRigUnit_EndHandControl_Settings::Hands' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Settings, BlendInTime) == 0x000020, "Member 'FRigUnit_EndHandControl_Settings::BlendInTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Settings, BlendOutTime) == 0x000024, "Member 'FRigUnit_EndHandControl_Settings::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Settings, HandTraceHalfExtent) == 0x000028, "Member 'FRigUnit_EndHandControl_Settings::HandTraceHalfExtent' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Settings, HandTraceFitAngleMax) == 0x000034, "Member 'FRigUnit_EndHandControl_Settings::HandTraceFitAngleMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Settings, HandTraceTranslationInterpSpeed) == 0x000038, "Member 'FRigUnit_EndHandControl_Settings::HandTraceTranslationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Settings, HandTraceRotationInterpSpeed) == 0x00003C, "Member 'FRigUnit_EndHandControl_Settings::HandTraceRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Settings, HandTraceHipTranslationInterpSpeed) == 0x000040, "Member 'FRigUnit_EndHandControl_Settings::HandTraceHipTranslationInterpSpeed' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndHandControl_HandCache
// 0x0110 (0x0110 - 0x0000)
struct FRigUnit_EndHandControl_HandCache final
{
public:
	struct FCachedRigElement                      CachedHandBoneItem;                                // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedHandControlItem;                             // 0x0014(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitDeltaTranslation;                               // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  HitDeltaRotation;                                  // 0x0040(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CachedDeltaTime0;                                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedTranslation0;                                // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedTranslation1;                                // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CachedRotation0;                                   // 0x0070(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  CachedRotation1;                                   // 0x0080(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x80];                                      // 0x0090(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndHandControl_HandCache) == 0x000010, "Wrong alignment on FRigUnit_EndHandControl_HandCache");
static_assert(sizeof(FRigUnit_EndHandControl_HandCache) == 0x000110, "Wrong size on FRigUnit_EndHandControl_HandCache");
static_assert(offsetof(FRigUnit_EndHandControl_HandCache, CachedHandBoneItem) == 0x000000, "Member 'FRigUnit_EndHandControl_HandCache::CachedHandBoneItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_HandCache, CachedHandControlItem) == 0x000014, "Member 'FRigUnit_EndHandControl_HandCache::CachedHandControlItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_HandCache, bActive) == 0x000028, "Member 'FRigUnit_EndHandControl_HandCache::bActive' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_HandCache, HitDeltaTranslation) == 0x00002C, "Member 'FRigUnit_EndHandControl_HandCache::HitDeltaTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_HandCache, HitDeltaRotation) == 0x000040, "Member 'FRigUnit_EndHandControl_HandCache::HitDeltaRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_HandCache, CachedDeltaTime0) == 0x000050, "Member 'FRigUnit_EndHandControl_HandCache::CachedDeltaTime0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_HandCache, CachedTranslation0) == 0x000054, "Member 'FRigUnit_EndHandControl_HandCache::CachedTranslation0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_HandCache, CachedTranslation1) == 0x000060, "Member 'FRigUnit_EndHandControl_HandCache::CachedTranslation1' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_HandCache, CachedRotation0) == 0x000070, "Member 'FRigUnit_EndHandControl_HandCache::CachedRotation0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_HandCache, CachedRotation1) == 0x000080, "Member 'FRigUnit_EndHandControl_HandCache::CachedRotation1' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndHandControl_Cache
// 0x0038 (0x0038 - 0x0000)
struct FRigUnit_EndHandControl_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitializeCounter;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HipHitDeltaTranslation;                            // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedHipItem;                                     // 0x0014(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndHandControl_HandCache> HandCaches;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndHandControl_Cache) == 0x000008, "Wrong alignment on FRigUnit_EndHandControl_Cache");
static_assert(sizeof(FRigUnit_EndHandControl_Cache) == 0x000038, "Wrong size on FRigUnit_EndHandControl_Cache");
static_assert(offsetof(FRigUnit_EndHandControl_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndHandControl_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Cache, InitializeCounter) == 0x000004, "Member 'FRigUnit_EndHandControl_Cache::InitializeCounter' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Cache, HipHitDeltaTranslation) == 0x000008, "Member 'FRigUnit_EndHandControl_Cache::HipHitDeltaTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Cache, CachedHipItem) == 0x000014, "Member 'FRigUnit_EndHandControl_Cache::CachedHipItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControl_Cache, HandCaches) == 0x000028, "Member 'FRigUnit_EndHandControl_Cache::HandCaches' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndHandControlDefault
// 0x00A8 (0x0110 - 0x0068)
struct FRigUnit_EndHandControlDefault final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndHandControl_Settings       Settings;                                          // 0x0068(0x0048)(NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndHandControl_DebugSettings  DebugSettings;                                     // 0x00B8(0x0018)(NativeAccessSpecifierPublic)
	bool                                          bActiveHandControl;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndHandControl_Cache          Cache;                                             // 0x00D8(0x0038)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndHandControlDefault) == 0x000008, "Wrong alignment on FRigUnit_EndHandControlDefault");
static_assert(sizeof(FRigUnit_EndHandControlDefault) == 0x000110, "Wrong size on FRigUnit_EndHandControlDefault");
static_assert(offsetof(FRigUnit_EndHandControlDefault, Settings) == 0x000068, "Member 'FRigUnit_EndHandControlDefault::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControlDefault, Weight) == 0x0000B0, "Member 'FRigUnit_EndHandControlDefault::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControlDefault, DebugSettings) == 0x0000B8, "Member 'FRigUnit_EndHandControlDefault::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControlDefault, bActiveHandControl) == 0x0000D0, "Member 'FRigUnit_EndHandControlDefault::bActiveHandControl' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndHandControlDefault, Cache) == 0x0000D8, "Member 'FRigUnit_EndHandControlDefault::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioAttackAdditiveAnimation
// 0x0024 (0x0024 - 0x0000)
struct FRigUnit_EndLipSyncAudioAttackAdditiveAnimation final
{
public:
	struct FRotator                               OffsetMin;                                         // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetMax;                                         // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioAttackAdditiveAnimation) == 0x000004, "Wrong alignment on FRigUnit_EndLipSyncAudioAttackAdditiveAnimation");
static_assert(sizeof(FRigUnit_EndLipSyncAudioAttackAdditiveAnimation) == 0x000024, "Wrong size on FRigUnit_EndLipSyncAudioAttackAdditiveAnimation");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackAdditiveAnimation, OffsetMin) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioAttackAdditiveAnimation::OffsetMin' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackAdditiveAnimation, OffsetMax) == 0x00000C, "Member 'FRigUnit_EndLipSyncAudioAttackAdditiveAnimation::OffsetMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackAdditiveAnimation, Weight) == 0x000018, "Member 'FRigUnit_EndLipSyncAudioAttackAdditiveAnimation::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackAdditiveAnimation, BlendInTime) == 0x00001C, "Member 'FRigUnit_EndLipSyncAudioAttackAdditiveAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackAdditiveAnimation, BlendOutTime) == 0x000020, "Member 'FRigUnit_EndLipSyncAudioAttackAdditiveAnimation::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioAttackBoneAnimation
// 0x0020 (0x0020 - 0x0000)
struct FRigUnit_EndLipSyncAudioAttackBoneAnimation final
{
public:
	struct FRigElementKey                         Item;                                              // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndLipSyncAudioAttackAdditiveAnimation> Animations;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioAttackBoneAnimation) == 0x000008, "Wrong alignment on FRigUnit_EndLipSyncAudioAttackBoneAnimation");
static_assert(sizeof(FRigUnit_EndLipSyncAudioAttackBoneAnimation) == 0x000020, "Wrong size on FRigUnit_EndLipSyncAudioAttackBoneAnimation");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBoneAnimation, Item) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioAttackBoneAnimation::Item' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttackBoneAnimation, Animations) == 0x000010, "Member 'FRigUnit_EndLipSyncAudioAttackBoneAnimation::Animations' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioAttack_Settings
// 0x0078 (0x0078 - 0x0000)
struct FRigUnit_EndLipSyncAudioAttack_Settings final
{
public:
	struct FRigElementKey                         RootItem;                                          // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipSyncBrowMoveBlendSpaceName;                     // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipSyncBrowMoveBlendBaseName;                      // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioPowerTimeOffset;                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioPowerAttenuationSpeed;                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioLargeAttackThreshold;                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndLipSyncAudioAttackBoneAnimation> AudioLargeAttackAnimations;                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndLipSyncAudioAttackBrowAnimation> AudioLargeAttackBrowAnimations;                    // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AudioSmallAttackThreshold;                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndLipSyncAudioAttackBoneAnimation> AudioSmallAttackAnimations;                        // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndLipSyncAudioAttackBrowAnimation> AudioSmallAttackBrowAnimations;                    // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioAttack_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndLipSyncAudioAttack_Settings");
static_assert(sizeof(FRigUnit_EndLipSyncAudioAttack_Settings) == 0x000078, "Wrong size on FRigUnit_EndLipSyncAudioAttack_Settings");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, RootItem) == 0x000000, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::RootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, LipSyncBrowMoveBlendSpaceName) == 0x00000C, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::LipSyncBrowMoveBlendSpaceName' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, LipSyncBrowMoveBlendBaseName) == 0x000014, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::LipSyncBrowMoveBlendBaseName' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, AudioPowerTimeOffset) == 0x00001C, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::AudioPowerTimeOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, AudioPowerAttenuationSpeed) == 0x000020, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::AudioPowerAttenuationSpeed' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, AudioLargeAttackThreshold) == 0x000024, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::AudioLargeAttackThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, AudioLargeAttackAnimations) == 0x000028, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::AudioLargeAttackAnimations' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, AudioLargeAttackBrowAnimations) == 0x000038, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::AudioLargeAttackBrowAnimations' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, AudioSmallAttackThreshold) == 0x000048, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::AudioSmallAttackThreshold' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, AudioSmallAttackAnimations) == 0x000050, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::AudioSmallAttackAnimations' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, AudioSmallAttackBrowAnimations) == 0x000060, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::AudioSmallAttackBrowAnimations' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, BlendInTime) == 0x000070, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::BlendInTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack_Settings, BlendOutTime) == 0x000074, "Member 'FRigUnit_EndLipSyncAudioAttack_Settings::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLipSyncAudioAttack
// 0x0148 (0x01B0 - 0x0068)
struct FRigUnit_EndLipSyncAudioAttack final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndLipSyncAudioAttack_Settings Settings;                                          // 0x0068(0x0078)(NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndLipSyncAudioAttack_Cache   Cache;                                             // 0x00E8(0x00C8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLipSyncAudioAttack) == 0x000008, "Wrong alignment on FRigUnit_EndLipSyncAudioAttack");
static_assert(sizeof(FRigUnit_EndLipSyncAudioAttack) == 0x0001B0, "Wrong size on FRigUnit_EndLipSyncAudioAttack");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack, Settings) == 0x000068, "Member 'FRigUnit_EndLipSyncAudioAttack::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack, Weight) == 0x0000E0, "Member 'FRigUnit_EndLipSyncAudioAttack::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLipSyncAudioAttack, Cache) == 0x0000E8, "Member 'FRigUnit_EndLipSyncAudioAttack::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAround_SituationSettings
// 0x0038 (0x0038 - 0x0000)
struct FRigUnit_EndLookAround_SituationSettings final
{
public:
	struct FVector2D                              WaitTimeRange;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LargeLookAroundTimeRange;                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SmallLookAroundTimeRange;                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MicroLookAroundTimeRange;                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LookAroundYawRange;                                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LookAroundPitchRange;                              // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MicroLookAroundDeltaYawMax;                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MicroLookAroundDeltaPitchMax;                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLookAround_SituationSettings) == 0x000004, "Wrong alignment on FRigUnit_EndLookAround_SituationSettings");
static_assert(sizeof(FRigUnit_EndLookAround_SituationSettings) == 0x000038, "Wrong size on FRigUnit_EndLookAround_SituationSettings");
static_assert(offsetof(FRigUnit_EndLookAround_SituationSettings, WaitTimeRange) == 0x000000, "Member 'FRigUnit_EndLookAround_SituationSettings::WaitTimeRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_SituationSettings, LargeLookAroundTimeRange) == 0x000008, "Member 'FRigUnit_EndLookAround_SituationSettings::LargeLookAroundTimeRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_SituationSettings, SmallLookAroundTimeRange) == 0x000010, "Member 'FRigUnit_EndLookAround_SituationSettings::SmallLookAroundTimeRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_SituationSettings, MicroLookAroundTimeRange) == 0x000018, "Member 'FRigUnit_EndLookAround_SituationSettings::MicroLookAroundTimeRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_SituationSettings, LookAroundYawRange) == 0x000020, "Member 'FRigUnit_EndLookAround_SituationSettings::LookAroundYawRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_SituationSettings, LookAroundPitchRange) == 0x000028, "Member 'FRigUnit_EndLookAround_SituationSettings::LookAroundPitchRange' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_SituationSettings, MicroLookAroundDeltaYawMax) == 0x000030, "Member 'FRigUnit_EndLookAround_SituationSettings::MicroLookAroundDeltaYawMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_SituationSettings, MicroLookAroundDeltaPitchMax) == 0x000034, "Member 'FRigUnit_EndLookAround_SituationSettings::MicroLookAroundDeltaPitchMax' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAround_Settings
// 0x00B8 (0x00B8 - 0x0000)
struct FRigUnit_EndLookAround_Settings final
{
public:
	struct FRigElementKey                         HeadItem;                                          // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_EndLookAround_SituationSettings DefaultSettings;                                   // 0x000C(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndLookAround_SituationSettings LookAroundSettings;                                // 0x0044(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndLookAround_SituationSettings WarningSettings;                                   // 0x007C(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WarningContinuationTime;                           // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLookAround_Settings) == 0x000004, "Wrong alignment on FRigUnit_EndLookAround_Settings");
static_assert(sizeof(FRigUnit_EndLookAround_Settings) == 0x0000B8, "Wrong size on FRigUnit_EndLookAround_Settings");
static_assert(offsetof(FRigUnit_EndLookAround_Settings, HeadItem) == 0x000000, "Member 'FRigUnit_EndLookAround_Settings::HeadItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Settings, DefaultSettings) == 0x00000C, "Member 'FRigUnit_EndLookAround_Settings::DefaultSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Settings, LookAroundSettings) == 0x000044, "Member 'FRigUnit_EndLookAround_Settings::LookAroundSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Settings, WarningSettings) == 0x00007C, "Member 'FRigUnit_EndLookAround_Settings::WarningSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Settings, WarningContinuationTime) == 0x0000B4, "Member 'FRigUnit_EndLookAround_Settings::WarningContinuationTime' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAround_DebugSettings
// 0x0010 (0x0010 - 0x0000)
struct FRigUnit_EndLookAround_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEmotionalGesture                          EmotionalGesture;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         EffectorTargetItem;                                // 0x0004(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLookAround_DebugSettings) == 0x000004, "Wrong alignment on FRigUnit_EndLookAround_DebugSettings");
static_assert(sizeof(FRigUnit_EndLookAround_DebugSettings) == 0x000010, "Wrong size on FRigUnit_EndLookAround_DebugSettings");
static_assert(offsetof(FRigUnit_EndLookAround_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndLookAround_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_DebugSettings, EmotionalGesture) == 0x000001, "Member 'FRigUnit_EndLookAround_DebugSettings::EmotionalGesture' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_DebugSettings, EffectorTargetItem) == 0x000004, "Member 'FRigUnit_EndLookAround_DebugSettings::EffectorTargetItem' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAround_Cache
// 0x0078 (0x0078 - 0x0000)
struct FRigUnit_EndLookAround_Cache final
{
public:
	EEndLookAroundState                           State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEmotionalGesture                          CurrentEmotionalGesture;                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEmotionalGesture                          LastEmotionalGesture;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlySaccade;                                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmotionalGestureTimer;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAroundWaitTimer;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAroundWaitTimeMax;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LargeLookAroundWaitTimer;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LargeLookAroundWaitTimeMax;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallLookAroundWaitTimer;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallLookAroundWaitTimeMax;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MicroLookAroundWaitTimer;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MicroLookAroundWaitTimeMax;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtTargetYaw;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtTargetPitch;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookAtTargetLocation;                              // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaccadeOffsetYaw;                                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaccadeOffsetPitch;                                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SaccadeOffsetLocation;                             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedHeadItem;                                    // 0x0050(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedDebugEffectorTarget;                         // 0x0064(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLookAround_Cache) == 0x000004, "Wrong alignment on FRigUnit_EndLookAround_Cache");
static_assert(sizeof(FRigUnit_EndLookAround_Cache) == 0x000078, "Wrong size on FRigUnit_EndLookAround_Cache");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, State) == 0x000000, "Member 'FRigUnit_EndLookAround_Cache::State' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, CurrentEmotionalGesture) == 0x000001, "Member 'FRigUnit_EndLookAround_Cache::CurrentEmotionalGesture' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, LastEmotionalGesture) == 0x000002, "Member 'FRigUnit_EndLookAround_Cache::LastEmotionalGesture' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, bOnlySaccade) == 0x000003, "Member 'FRigUnit_EndLookAround_Cache::bOnlySaccade' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, EmotionalGestureTimer) == 0x000004, "Member 'FRigUnit_EndLookAround_Cache::EmotionalGestureTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, LookAroundWaitTimer) == 0x000008, "Member 'FRigUnit_EndLookAround_Cache::LookAroundWaitTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, LookAroundWaitTimeMax) == 0x00000C, "Member 'FRigUnit_EndLookAround_Cache::LookAroundWaitTimeMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, LargeLookAroundWaitTimer) == 0x000010, "Member 'FRigUnit_EndLookAround_Cache::LargeLookAroundWaitTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, LargeLookAroundWaitTimeMax) == 0x000014, "Member 'FRigUnit_EndLookAround_Cache::LargeLookAroundWaitTimeMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, SmallLookAroundWaitTimer) == 0x000018, "Member 'FRigUnit_EndLookAround_Cache::SmallLookAroundWaitTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, SmallLookAroundWaitTimeMax) == 0x00001C, "Member 'FRigUnit_EndLookAround_Cache::SmallLookAroundWaitTimeMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, MicroLookAroundWaitTimer) == 0x000020, "Member 'FRigUnit_EndLookAround_Cache::MicroLookAroundWaitTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, MicroLookAroundWaitTimeMax) == 0x000024, "Member 'FRigUnit_EndLookAround_Cache::MicroLookAroundWaitTimeMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, LookAtTargetYaw) == 0x000028, "Member 'FRigUnit_EndLookAround_Cache::LookAtTargetYaw' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, LookAtTargetPitch) == 0x00002C, "Member 'FRigUnit_EndLookAround_Cache::LookAtTargetPitch' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, LookAtTargetLocation) == 0x000030, "Member 'FRigUnit_EndLookAround_Cache::LookAtTargetLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, SaccadeOffsetYaw) == 0x00003C, "Member 'FRigUnit_EndLookAround_Cache::SaccadeOffsetYaw' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, SaccadeOffsetPitch) == 0x000040, "Member 'FRigUnit_EndLookAround_Cache::SaccadeOffsetPitch' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, SaccadeOffsetLocation) == 0x000044, "Member 'FRigUnit_EndLookAround_Cache::SaccadeOffsetLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, CachedHeadItem) == 0x000050, "Member 'FRigUnit_EndLookAround_Cache::CachedHeadItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround_Cache, CachedDebugEffectorTarget) == 0x000064, "Member 'FRigUnit_EndLookAround_Cache::CachedDebugEffectorTarget' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAround
// 0x0148 (0x01B0 - 0x0068)
struct FRigUnit_EndLookAround final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndLookAround_Settings        Settings;                                          // 0x0068(0x00B8)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_EndLookAround_DebugSettings   DebugSettings;                                     // 0x0124(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndLookAround_Cache           Cache;                                             // 0x0134(0x0078)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndLookAround) == 0x000008, "Wrong alignment on FRigUnit_EndLookAround");
static_assert(sizeof(FRigUnit_EndLookAround) == 0x0001B0, "Wrong size on FRigUnit_EndLookAround");
static_assert(offsetof(FRigUnit_EndLookAround, Settings) == 0x000068, "Member 'FRigUnit_EndLookAround::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround, Weight) == 0x000120, "Member 'FRigUnit_EndLookAround::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround, DebugSettings) == 0x000124, "Member 'FRigUnit_EndLookAround::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAround, Cache) == 0x000134, "Member 'FRigUnit_EndLookAround::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAt_DebugSettings
// 0x0070 (0x0070 - 0x0000)
struct FRigUnit_EndLookAt_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigElementKey                         EffectorTargetItem;                                // 0x0040(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimBehaviorMode                          BehaviorMode;                                      // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EEndLookAtLayer>                       IgnoreLookAtLayers;                                // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bForceComponentSpace;                              // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpAxisLookAt;                               // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0xE];                                       // 0x0062(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndLookAt_DebugSettings) == 0x000010, "Wrong alignment on FRigUnit_EndLookAt_DebugSettings");
static_assert(sizeof(FRigUnit_EndLookAt_DebugSettings) == 0x000070, "Wrong size on FRigUnit_EndLookAt_DebugSettings");
static_assert(offsetof(FRigUnit_EndLookAt_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndLookAt_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_DebugSettings, Scale) == 0x000004, "Member 'FRigUnit_EndLookAt_DebugSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_DebugSettings, WorldOffset) == 0x000010, "Member 'FRigUnit_EndLookAt_DebugSettings::WorldOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_DebugSettings, EffectorTargetItem) == 0x000040, "Member 'FRigUnit_EndLookAt_DebugSettings::EffectorTargetItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_DebugSettings, BehaviorMode) == 0x00004C, "Member 'FRigUnit_EndLookAt_DebugSettings::BehaviorMode' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_DebugSettings, IgnoreLookAtLayers) == 0x000050, "Member 'FRigUnit_EndLookAt_DebugSettings::IgnoreLookAtLayers' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_DebugSettings, bForceComponentSpace) == 0x000060, "Member 'FRigUnit_EndLookAt_DebugSettings::bForceComponentSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_DebugSettings, bEnableUpAxisLookAt) == 0x000061, "Member 'FRigUnit_EndLookAt_DebugSettings::bEnableUpAxisLookAt' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAt_Effector
// 0x0050 (0x0050 - 0x0000)
struct FRigUnit_EndLookAt_Effector final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLookAtRequestType                         TargetType;                                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveSaccade;                                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlySaccade;                                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SaccadeTargetLocation;                             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UnClampedTargetWorldLocation;                      // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiffAngle;                                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAimBaseNormal;                                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchDirectionKeeping;                           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LookAwayDirectionType;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideDeactiveBlendTime;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLookAt_Effector) == 0x000004, "Wrong alignment on FRigUnit_EndLookAt_Effector");
static_assert(sizeof(FRigUnit_EndLookAt_Effector) == 0x000050, "Wrong size on FRigUnit_EndLookAt_Effector");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, bActive) == 0x000000, "Member 'FRigUnit_EndLookAt_Effector::bActive' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, TargetLocation) == 0x000004, "Member 'FRigUnit_EndLookAt_Effector::TargetLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, TargetName) == 0x000010, "Member 'FRigUnit_EndLookAt_Effector::TargetName' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, TargetActor) == 0x000018, "Member 'FRigUnit_EndLookAt_Effector::TargetActor' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, TargetType) == 0x000020, "Member 'FRigUnit_EndLookAt_Effector::TargetType' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, Weight) == 0x000024, "Member 'FRigUnit_EndLookAt_Effector::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, bActiveSaccade) == 0x000028, "Member 'FRigUnit_EndLookAt_Effector::bActiveSaccade' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, bOnlySaccade) == 0x000029, "Member 'FRigUnit_EndLookAt_Effector::bOnlySaccade' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, SaccadeTargetLocation) == 0x00002C, "Member 'FRigUnit_EndLookAt_Effector::SaccadeTargetLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, UnClampedTargetWorldLocation) == 0x000038, "Member 'FRigUnit_EndLookAt_Effector::UnClampedTargetWorldLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, DiffAngle) == 0x000044, "Member 'FRigUnit_EndLookAt_Effector::DiffAngle' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, bUseAimBaseNormal) == 0x000048, "Member 'FRigUnit_EndLookAt_Effector::bUseAimBaseNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, bSwitchDirectionKeeping) == 0x000049, "Member 'FRigUnit_EndLookAt_Effector::bSwitchDirectionKeeping' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, LookAwayDirectionType) == 0x00004A, "Member 'FRigUnit_EndLookAt_Effector::LookAwayDirectionType' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Effector, OverrideDeactiveBlendTime) == 0x00004C, "Member 'FRigUnit_EndLookAt_Effector::OverrideDeactiveBlendTime' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAt_Cache
// 0x00D0 (0x00D0 - 0x0000)
struct FRigUnit_EndLookAt_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndLookAt_Effector            Effector;                                          // 0x0004(0x0050)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ActiveTimer;                                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComponentSpaceOriginNormalRate;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionState                           LocomotionState;                                   // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreLookAtLayerCount;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeepDirectionTimer;                                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceComponentSpace;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpAxisLookAt;                               // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledTransitionCache0;                          // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledTransitionCache1;                          // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionCurrentTime;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeMax;                                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionCachedDeltaTime0;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndLookAt_ItemCache>   CachedItems;                                       // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedAimBaseItem;                                 // 0x0088(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedEffectorItem;                                // 0x009C(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedDebugEffectorTarget;                         // 0x00B0(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectorAxis;                                      // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLookAt_Cache) == 0x000008, "Wrong alignment on FRigUnit_EndLookAt_Cache");
static_assert(sizeof(FRigUnit_EndLookAt_Cache) == 0x0000D0, "Wrong size on FRigUnit_EndLookAt_Cache");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndLookAt_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, Effector) == 0x000004, "Member 'FRigUnit_EndLookAt_Cache::Effector' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, ActiveTimer) == 0x000054, "Member 'FRigUnit_EndLookAt_Cache::ActiveTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, ComponentSpaceOriginNormalRate) == 0x000058, "Member 'FRigUnit_EndLookAt_Cache::ComponentSpaceOriginNormalRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, LocomotionState) == 0x00005C, "Member 'FRigUnit_EndLookAt_Cache::LocomotionState' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, IgnoreLookAtLayerCount) == 0x000060, "Member 'FRigUnit_EndLookAt_Cache::IgnoreLookAtLayerCount' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, KeepDirectionTimer) == 0x000064, "Member 'FRigUnit_EndLookAt_Cache::KeepDirectionTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, bForceComponentSpace) == 0x000068, "Member 'FRigUnit_EndLookAt_Cache::bForceComponentSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, bEnableUpAxisLookAt) == 0x000069, "Member 'FRigUnit_EndLookAt_Cache::bEnableUpAxisLookAt' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, bEnabledTransitionCache0) == 0x00006A, "Member 'FRigUnit_EndLookAt_Cache::bEnabledTransitionCache0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, bEnabledTransitionCache1) == 0x00006B, "Member 'FRigUnit_EndLookAt_Cache::bEnabledTransitionCache1' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, TransitionCurrentTime) == 0x00006C, "Member 'FRigUnit_EndLookAt_Cache::TransitionCurrentTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, TransitionTimeMax) == 0x000070, "Member 'FRigUnit_EndLookAt_Cache::TransitionTimeMax' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, TransitionCachedDeltaTime0) == 0x000074, "Member 'FRigUnit_EndLookAt_Cache::TransitionCachedDeltaTime0' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, CachedItems) == 0x000078, "Member 'FRigUnit_EndLookAt_Cache::CachedItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, CachedAimBaseItem) == 0x000088, "Member 'FRigUnit_EndLookAt_Cache::CachedAimBaseItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, CachedEffectorItem) == 0x00009C, "Member 'FRigUnit_EndLookAt_Cache::CachedEffectorItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, CachedDebugEffectorTarget) == 0x0000B0, "Member 'FRigUnit_EndLookAt_Cache::CachedDebugEffectorTarget' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt_Cache, EffectorAxis) == 0x0000C4, "Member 'FRigUnit_EndLookAt_Cache::EffectorAxis' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndLookAt
// 0x01D8 (0x0240 - 0x0068)
struct FRigUnit_EndLookAt final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndLookAt_Settings            Settings;                                          // 0x0068(0x0080)(NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndLookAt_DebugSettings       DebugSettings;                                     // 0x00F0(0x0070)(NativeAccessSpecifierPublic)
	bool                                          bActiveSaccade;                                    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SaccadeTargetLocation;                             // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigUnit_EndLookAt_Cache               Cache;                                             // 0x0170(0x00D0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndLookAt) == 0x000010, "Wrong alignment on FRigUnit_EndLookAt");
static_assert(sizeof(FRigUnit_EndLookAt) == 0x000240, "Wrong size on FRigUnit_EndLookAt");
static_assert(offsetof(FRigUnit_EndLookAt, Settings) == 0x000068, "Member 'FRigUnit_EndLookAt::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt, Weight) == 0x0000E8, "Member 'FRigUnit_EndLookAt::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt, DebugSettings) == 0x0000F0, "Member 'FRigUnit_EndLookAt::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt, bActiveSaccade) == 0x000160, "Member 'FRigUnit_EndLookAt::bActiveSaccade' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt, SaccadeTargetLocation) == 0x000164, "Member 'FRigUnit_EndLookAt::SaccadeTargetLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndLookAt, Cache) == 0x000170, "Member 'FRigUnit_EndLookAt::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_ChainParticle
// 0x002C (0x002C - 0x0000)
struct FRigUnit_EndPBD_ChainParticle final
{
public:
	struct FRigElementKey                         RootItem;                                          // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         EndItem;                                           // 0x000C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetectCollision;                                  // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedRootItem;                                    // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedEndItem;                                     // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndPBD_ChainParticle) == 0x000004, "Wrong alignment on FRigUnit_EndPBD_ChainParticle");
static_assert(sizeof(FRigUnit_EndPBD_ChainParticle) == 0x00002C, "Wrong size on FRigUnit_EndPBD_ChainParticle");
static_assert(offsetof(FRigUnit_EndPBD_ChainParticle, RootItem) == 0x000000, "Member 'FRigUnit_EndPBD_ChainParticle::RootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_ChainParticle, EndItem) == 0x00000C, "Member 'FRigUnit_EndPBD_ChainParticle::EndItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_ChainParticle, bDetectCollision) == 0x000018, "Member 'FRigUnit_EndPBD_ChainParticle::bDetectCollision' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_ChainParticle, Mass) == 0x00001C, "Member 'FRigUnit_EndPBD_ChainParticle::Mass' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_ChainParticle, Radius) == 0x000020, "Member 'FRigUnit_EndPBD_ChainParticle::Radius' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_ChainParticle, GravityScale) == 0x000024, "Member 'FRigUnit_EndPBD_ChainParticle::GravityScale' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_ChainParticle, bFixedRootItem) == 0x000028, "Member 'FRigUnit_EndPBD_ChainParticle::bFixedRootItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_ChainParticle, bFixedEndItem) == 0x000029, "Member 'FRigUnit_EndPBD_ChainParticle::bFixedEndItem' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndChainPBD_Settings
// 0x0088 (0x0088 - 0x0000)
struct FRigUnit_EndChainPBD_Settings final
{
public:
	TArray<struct FRigUnit_EndPBD_ChainParticle>  ChainParticles;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ParticleReserveCount;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_EndPBD_DistanceConstraint> DistanceConstraints;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndPBD_BendConstraint> BendConstraints;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndPBD_CharacterWeightConstraint> CharacterWeightConstraints;                        // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndPBD_AnimConstraint> AnimConstraints;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigUnit_EndPBD_LastPositionConstraint> LastPositionConstraints;                           // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PositionIterationCount;                            // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VelocityIterationCount;                            // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledXPBD;                                      // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledSubStep;                                   // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledHighFpsEvaluation;                         // 0x0072(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopSimulationOnWorldShift;                       // 0x0073(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantVelocityDumping;                           // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpRate;                                        // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollBias;                                          // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StraightLineRemapRate;                             // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepTimer;                                        // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndChainPBD_Settings) == 0x000008, "Wrong alignment on FRigUnit_EndChainPBD_Settings");
static_assert(sizeof(FRigUnit_EndChainPBD_Settings) == 0x000088, "Wrong size on FRigUnit_EndChainPBD_Settings");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, ChainParticles) == 0x000000, "Member 'FRigUnit_EndChainPBD_Settings::ChainParticles' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, ParticleReserveCount) == 0x000010, "Member 'FRigUnit_EndChainPBD_Settings::ParticleReserveCount' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, DistanceConstraints) == 0x000018, "Member 'FRigUnit_EndChainPBD_Settings::DistanceConstraints' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, BendConstraints) == 0x000028, "Member 'FRigUnit_EndChainPBD_Settings::BendConstraints' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, CharacterWeightConstraints) == 0x000038, "Member 'FRigUnit_EndChainPBD_Settings::CharacterWeightConstraints' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, AnimConstraints) == 0x000048, "Member 'FRigUnit_EndChainPBD_Settings::AnimConstraints' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, LastPositionConstraints) == 0x000058, "Member 'FRigUnit_EndChainPBD_Settings::LastPositionConstraints' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, PositionIterationCount) == 0x000068, "Member 'FRigUnit_EndChainPBD_Settings::PositionIterationCount' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, VelocityIterationCount) == 0x00006C, "Member 'FRigUnit_EndChainPBD_Settings::VelocityIterationCount' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, bEnabledXPBD) == 0x000070, "Member 'FRigUnit_EndChainPBD_Settings::bEnabledXPBD' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, bEnabledSubStep) == 0x000071, "Member 'FRigUnit_EndChainPBD_Settings::bEnabledSubStep' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, bEnabledHighFpsEvaluation) == 0x000072, "Member 'FRigUnit_EndChainPBD_Settings::bEnabledHighFpsEvaluation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, bStopSimulationOnWorldShift) == 0x000073, "Member 'FRigUnit_EndChainPBD_Settings::bStopSimulationOnWorldShift' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, ConstantVelocityDumping) == 0x000074, "Member 'FRigUnit_EndChainPBD_Settings::ConstantVelocityDumping' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, InterpRate) == 0x000078, "Member 'FRigUnit_EndChainPBD_Settings::InterpRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, RollBias) == 0x00007C, "Member 'FRigUnit_EndChainPBD_Settings::RollBias' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, StraightLineRemapRate) == 0x000080, "Member 'FRigUnit_EndChainPBD_Settings::StraightLineRemapRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD_Settings, SleepTimer) == 0x000084, "Member 'FRigUnit_EndChainPBD_Settings::SleepTimer' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD_DebugSettings
// 0x0040 (0x0040 - 0x0000)
struct FRigUnit_EndPBD_DebugSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedFrameRate;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldOffset;                                       // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndPBD_DebugSettings) == 0x000010, "Wrong alignment on FRigUnit_EndPBD_DebugSettings");
static_assert(sizeof(FRigUnit_EndPBD_DebugSettings) == 0x000040, "Wrong size on FRigUnit_EndPBD_DebugSettings");
static_assert(offsetof(FRigUnit_EndPBD_DebugSettings, bEnabled) == 0x000000, "Member 'FRigUnit_EndPBD_DebugSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_DebugSettings, bFixedFrameRate) == 0x000001, "Member 'FRigUnit_EndPBD_DebugSettings::bFixedFrameRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_DebugSettings, bDebugDraw) == 0x000002, "Member 'FRigUnit_EndPBD_DebugSettings::bDebugDraw' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_DebugSettings, Scale) == 0x000004, "Member 'FRigUnit_EndPBD_DebugSettings::Scale' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD_DebugSettings, WorldOffset) == 0x000010, "Member 'FRigUnit_EndPBD_DebugSettings::WorldOffset' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndChainPBD
// 0x0398 (0x0400 - 0x0068)
struct FRigUnit_EndChainPBD final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndChainPBD_Settings          Settings;                                          // 0x0068(0x0088)(NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndPBD_DebugSettings          DebugSettings;                                     // 0x0100(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndPBD_Cache                  Cache;                                             // 0x0140(0x02C0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndChainPBD) == 0x000010, "Wrong alignment on FRigUnit_EndChainPBD");
static_assert(sizeof(FRigUnit_EndChainPBD) == 0x000400, "Wrong size on FRigUnit_EndChainPBD");
static_assert(offsetof(FRigUnit_EndChainPBD, Settings) == 0x000068, "Member 'FRigUnit_EndChainPBD::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD, Weight) == 0x0000F0, "Member 'FRigUnit_EndChainPBD::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD, DebugSettings) == 0x000100, "Member 'FRigUnit_EndChainPBD::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndChainPBD, Cache) == 0x000140, "Member 'FRigUnit_EndChainPBD::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndPBD
// 0x0388 (0x03F0 - 0x0068)
struct FRigUnit_EndPBD final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndPBD_Settings               Settings;                                          // 0x0068(0x0078)(NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndPBD_DebugSettings          DebugSettings;                                     // 0x00F0(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndPBD_Cache                  Cache;                                             // 0x0130(0x02C0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndPBD) == 0x000010, "Wrong alignment on FRigUnit_EndPBD");
static_assert(sizeof(FRigUnit_EndPBD) == 0x0003F0, "Wrong size on FRigUnit_EndPBD");
static_assert(offsetof(FRigUnit_EndPBD, Settings) == 0x000068, "Member 'FRigUnit_EndPBD::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD, Weight) == 0x0000E0, "Member 'FRigUnit_EndPBD::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD, DebugSettings) == 0x0000F0, "Member 'FRigUnit_EndPBD::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndPBD, Cache) == 0x000130, "Member 'FRigUnit_EndPBD::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndSaccade_Cache
// 0x0150 (0x0150 - 0x0000)
struct FRigUnit_EndSaccade_Cache final
{
public:
	bool                                          bNeedInitialize;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastActiveSaccade;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendRate;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          EyeInitialRotations;                               // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                WSTargetingLocation;                               // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetingNormal;                                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaccadeWaitTimer;                                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  SaccadeDeltaRotation;                              // 0x0040(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  MicroSaccadeAdditiveRotation;                      // 0x0050(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MicroSaccadeWaitTimer;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveRandomOverrideSaccade;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0xB];                                       // 0x0065(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RandomOverrideSaccadeRotation;                     // 0x0070(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RandomOverrideSaccadeWaitTimer;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlinkTimer;                                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlinkRate;                                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlinkBias;                                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BlinkCurve;                                        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextBlinkTime;                                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EyeMoveBlendRate;                                  // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequestedRefrectiveBlink;                         // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReflectiveBlinkWaitTimer;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UBlendSpaceBase>         EyeMoveBlendSpace;                                 // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EyeMoveBlendInput;                                 // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAnimSequenceBase>       BlinkPose;                                         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTransform>          BlinkPoseCache;                                    // 0x00C8(0x0050)(NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedHeadItem;                                    // 0x0118(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedEyeItems;                                    // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedEyelidsItems;                                // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndSaccade_Cache) == 0x000010, "Wrong alignment on FRigUnit_EndSaccade_Cache");
static_assert(sizeof(FRigUnit_EndSaccade_Cache) == 0x000150, "Wrong size on FRigUnit_EndSaccade_Cache");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, bNeedInitialize) == 0x000000, "Member 'FRigUnit_EndSaccade_Cache::bNeedInitialize' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, bLastActiveSaccade) == 0x000001, "Member 'FRigUnit_EndSaccade_Cache::bLastActiveSaccade' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, BlendRate) == 0x000004, "Member 'FRigUnit_EndSaccade_Cache::BlendRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, EyeInitialRotations) == 0x000008, "Member 'FRigUnit_EndSaccade_Cache::EyeInitialRotations' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, WSTargetingLocation) == 0x000018, "Member 'FRigUnit_EndSaccade_Cache::WSTargetingLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, TargetingNormal) == 0x000024, "Member 'FRigUnit_EndSaccade_Cache::TargetingNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, SaccadeWaitTimer) == 0x000030, "Member 'FRigUnit_EndSaccade_Cache::SaccadeWaitTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, SaccadeDeltaRotation) == 0x000040, "Member 'FRigUnit_EndSaccade_Cache::SaccadeDeltaRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, MicroSaccadeAdditiveRotation) == 0x000050, "Member 'FRigUnit_EndSaccade_Cache::MicroSaccadeAdditiveRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, MicroSaccadeWaitTimer) == 0x000060, "Member 'FRigUnit_EndSaccade_Cache::MicroSaccadeWaitTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, bActiveRandomOverrideSaccade) == 0x000064, "Member 'FRigUnit_EndSaccade_Cache::bActiveRandomOverrideSaccade' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, RandomOverrideSaccadeRotation) == 0x000070, "Member 'FRigUnit_EndSaccade_Cache::RandomOverrideSaccadeRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, RandomOverrideSaccadeWaitTimer) == 0x000080, "Member 'FRigUnit_EndSaccade_Cache::RandomOverrideSaccadeWaitTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, BlinkTimer) == 0x000084, "Member 'FRigUnit_EndSaccade_Cache::BlinkTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, BlinkRate) == 0x000088, "Member 'FRigUnit_EndSaccade_Cache::BlinkRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, BlinkBias) == 0x00008C, "Member 'FRigUnit_EndSaccade_Cache::BlinkBias' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, BlinkCurve) == 0x000090, "Member 'FRigUnit_EndSaccade_Cache::BlinkCurve' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, NextBlinkTime) == 0x000098, "Member 'FRigUnit_EndSaccade_Cache::NextBlinkTime' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, EyeMoveBlendRate) == 0x00009C, "Member 'FRigUnit_EndSaccade_Cache::EyeMoveBlendRate' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, bRequestedRefrectiveBlink) == 0x0000A4, "Member 'FRigUnit_EndSaccade_Cache::bRequestedRefrectiveBlink' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, ReflectiveBlinkWaitTimer) == 0x0000A8, "Member 'FRigUnit_EndSaccade_Cache::ReflectiveBlinkWaitTimer' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, EyeMoveBlendSpace) == 0x0000AC, "Member 'FRigUnit_EndSaccade_Cache::EyeMoveBlendSpace' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, EyeMoveBlendInput) == 0x0000B4, "Member 'FRigUnit_EndSaccade_Cache::EyeMoveBlendInput' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, BlinkPose) == 0x0000C0, "Member 'FRigUnit_EndSaccade_Cache::BlinkPose' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, BlinkPoseCache) == 0x0000C8, "Member 'FRigUnit_EndSaccade_Cache::BlinkPoseCache' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, CachedHeadItem) == 0x000118, "Member 'FRigUnit_EndSaccade_Cache::CachedHeadItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, CachedEyeItems) == 0x000130, "Member 'FRigUnit_EndSaccade_Cache::CachedEyeItems' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade_Cache, CachedEyelidsItems) == 0x000140, "Member 'FRigUnit_EndSaccade_Cache::CachedEyelidsItems' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndSaccade
// 0x0268 (0x02D0 - 0x0068)
struct FRigUnit_EndSaccade final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FRigUnit_EndSaccade_Settings           Settings;                                          // 0x0068(0x00B8)(NativeAccessSpecifierPublic)
	bool                                          bActiveSaccade;                                    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SaccadeTargetLocation;                             // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0xC];                                      // 0x0134(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_EndSaccade_DebugSettings      DebugSettings;                                     // 0x0140(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRigUnit_EndSaccade_Cache              Cache;                                             // 0x0180(0x0150)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_EndSaccade) == 0x000010, "Wrong alignment on FRigUnit_EndSaccade");
static_assert(sizeof(FRigUnit_EndSaccade) == 0x0002D0, "Wrong size on FRigUnit_EndSaccade");
static_assert(offsetof(FRigUnit_EndSaccade, Settings) == 0x000068, "Member 'FRigUnit_EndSaccade::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade, bActiveSaccade) == 0x000120, "Member 'FRigUnit_EndSaccade::bActiveSaccade' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade, SaccadeTargetLocation) == 0x000124, "Member 'FRigUnit_EndSaccade::SaccadeTargetLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade, Weight) == 0x000130, "Member 'FRigUnit_EndSaccade::Weight' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade, DebugSettings) == 0x000140, "Member 'FRigUnit_EndSaccade::DebugSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSaccade, Cache) == 0x000180, "Member 'FRigUnit_EndSaccade::Cache' has a wrong offset!");

// ScriptStruct EndGame.RigUnit_EndSyncTransform
// 0x0048 (0x00B0 - 0x0068)
struct FRigUnit_EndSyncTransform final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         SourceItem;                                        // 0x0068(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         DestItem;                                          // 0x0074(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneGetterSetterMode                         Space;                                             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedSourceIndex;                                 // 0x0084(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      CachedDestIndex;                                   // 0x0098(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_EndSyncTransform) == 0x000008, "Wrong alignment on FRigUnit_EndSyncTransform");
static_assert(sizeof(FRigUnit_EndSyncTransform) == 0x0000B0, "Wrong size on FRigUnit_EndSyncTransform");
static_assert(offsetof(FRigUnit_EndSyncTransform, SourceItem) == 0x000068, "Member 'FRigUnit_EndSyncTransform::SourceItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSyncTransform, DestItem) == 0x000074, "Member 'FRigUnit_EndSyncTransform::DestItem' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSyncTransform, Space) == 0x000080, "Member 'FRigUnit_EndSyncTransform::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSyncTransform, bInitial) == 0x000081, "Member 'FRigUnit_EndSyncTransform::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSyncTransform, CachedSourceIndex) == 0x000084, "Member 'FRigUnit_EndSyncTransform::CachedSourceIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_EndSyncTransform, CachedDestIndex) == 0x000098, "Member 'FRigUnit_EndSyncTransform::CachedDestIndex' has a wrong offset!");

}

