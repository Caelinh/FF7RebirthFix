#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KineDriverRt

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum KineDriverRt.ESQEX_KD_MirrorAcrossType
// NumValues: 0x0004
enum class ESQEX_KD_MirrorAcrossType : uint8
{
	ESQEX_KD_MirrorAcrossType_X              = 0,
	ESQEX_KD_MirrorAcrossType_Y              = 1,
	ESQEX_KD_MirrorAcrossType_Z              = 2,
	ESQEX_KD_MirrorAcrossType_MAX            = 3,
};

// Enum KineDriverRt.ESQEX_KD_ConnectionType
// NumValues: 0x0004
enum class ESQEX_KD_ConnectionType : uint8
{
	ESQEX_KD_ConnectionType_Float            = 0,
	ESQEX_KD_ConnectionType_Vector3          = 1,
	ESQEX_KD_ConnectionType_Quaternion       = 2,
	ESQEX_KD_ConnectionType_MAX              = 3,
};

// Enum KineDriverRt.ESQEX_KD_BaseSpaceType
// NumValues: 0x0004
enum class ESQEX_KD_BaseSpaceType : uint8
{
	ESQEX_KD_BaseSpaceType_PARENT            = 0,
	ESQEX_KD_BaseSpaceType_GLOBAL            = 1,
	ESQEX_KD_BaseSpaceType_NODE              = 2,
	ESQEX_KD_BaseSpaceType_MAX               = 3,
};

// Enum KineDriverRt.ESQEX_KD_InterpolateType
// NumValues: 0x0004
enum class ESQEX_KD_InterpolateType : uint8
{
	ESQEX_KD_InterpolateType_Step            = 0,
	ESQEX_KD_InterpolateType_Linear          = 1,
	ESQEX_KD_InterpolateType_Spline          = 2,
	ESQEX_KD_InterpolateType_MAX             = 3,
};

// Enum KineDriverRt.ESQEX_KD_ExtrapolateType
// NumValues: 0x0007
enum class ESQEX_KD_ExtrapolateType : uint8
{
	ESQEX_KD_ExtrapolateType_Constant        = 0,
	ESQEX_KD_ExtrapolateType_Gradient        = 1,
	ESQEX_KD_ExtrapolateType_Cycle           = 2,
	ESQEX_KD_ExtrapolateType_RelativeCycle   = 3,
	ESQEX_KD_ExtrapolateType_Linear          = 4,
	ESQEX_KD_ExtrapolateType_Oscillate       = 5,
	ESQEX_KD_ExtrapolateType_MAX             = 6,
};

// Enum KineDriverRt.ESQEX_KD_ParameterType
// NumValues: 0x0022
enum class ESQEX_KD_ParameterType : uint8
{
	ESQEX_KD_ParameterType_Other             = 0,
	ESQEX_KD_ParameterType_TranslateX        = 1,
	ESQEX_KD_ParameterType_TranslateY        = 2,
	ESQEX_KD_ParameterType_TranslateZ        = 3,
	ESQEX_KD_ParameterType_Distance          = 4,
	ESQEX_KD_ParameterType_RotateQuatX_DEPLECATED = 5,
	ESQEX_KD_ParameterType_RotateQuatY_DEPLECATED = 6,
	ESQEX_KD_ParameterType_RotateQuatZ_DEPLECATED = 7,
	ESQEX_KD_ParameterType_RotateQuatW_DEPLECATED = 8,
	ESQEX_KD_ParameterType_RotateAngle       = 9,
	ESQEX_KD_ParameterType_BendingQuatX_DEPLECATED = 10,
	ESQEX_KD_ParameterType_BendingQuatY_DEPLECATED = 11,
	ESQEX_KD_ParameterType_BendingQuatZ_DEPLECATED = 12,
	ESQEX_KD_ParameterType_BendingQuatW_DEPLECATED = 13,
	ESQEX_KD_ParameterType_BendingAngle      = 14,
	ESQEX_KD_ParameterType_BendS             = 15,
	ESQEX_KD_ParameterType_BendT             = 16,
	ESQEX_KD_ParameterType_Roll              = 17,
	ESQEX_KD_ParameterType_QuatAngle         = 18,
	ESQEX_KD_ParameterType_ScaleX            = 19,
	ESQEX_KD_ParameterType_ScaleY            = 20,
	ESQEX_KD_ParameterType_ScaleZ            = 21,
	ESQEX_KD_ParameterType_Input             = 22,
	ESQEX_KD_ParameterType_Output            = 23,
	ESQEX_KD_ParameterType_Translate         = 24,
	ESQEX_KD_ParameterType_RollBend          = 25,
	ESQEX_KD_ParameterType_RotateQuat        = 26,
	ESQEX_KD_ParameterType_BendingQuat       = 27,
	ESQEX_KD_ParameterType_Expmap            = 28,
	ESQEX_KD_ParameterType_ExpmapX           = 29,
	ESQEX_KD_ParameterType_ExpmapY           = 30,
	ESQEX_KD_ParameterType_ExpmapZ           = 31,
	ESQEX_KD_ParameterType_Scale             = 32,
	ESQEX_KD_ParameterType_MAX               = 33,
};

// Enum KineDriverRt.ESQEX_KD_OperatorType
// NumValues: 0x0018
enum class ESQEX_KD_OperatorType : uint8
{
	ESQEX_KD_OperatorType_Unknown            = 0,
	ESQEX_KD_OperatorType_ComputeSpaceBases  = 1,
	ESQEX_KD_OperatorType_Source             = 2,
	ESQEX_KD_OperatorType_SourceTranslate    = 3,
	ESQEX_KD_OperatorType_SourceRotate       = 4,
	ESQEX_KD_OperatorType_SourceOther        = 5,
	ESQEX_KD_OperatorType_TargetTranslate    = 6,
	ESQEX_KD_OperatorType_TargetScale        = 7,
	ESQEX_KD_OperatorType_TargetRotate       = 8,
	ESQEX_KD_OperatorType_TargetBendRoll     = 9,
	ESQEX_KD_OperatorType_TargetBendSTRoll   = 10,
	ESQEX_KD_OperatorType_TargetExpmap       = 11,
	ESQEX_KD_OperatorType_TargetPoscns       = 12,
	ESQEX_KD_OperatorType_TargetOricns       = 13,
	ESQEX_KD_OperatorType_TargetDircns       = 14,
	ESQEX_KD_OperatorType_TargetOther        = 15,
	ESQEX_KD_OperatorType_EffectorInverse    = 16,
	ESQEX_KD_OperatorType_EffectorLinkWith   = 17,
	ESQEX_KD_OperatorType_EffectorEZParamLink = 18,
	ESQEX_KD_OperatorType_EffectorEZParamLinkLinear = 19,
	ESQEX_KD_OperatorType_EffectorRBFInterp  = 20,
	ESQEX_KD_OperatorType_EffectorExpr       = 21,
	ESQEX_KD_OperatorType_Connection         = 22,
	ESQEX_KD_OperatorType_MAX                = 23,
};

// ScriptStruct KineDriverRt.AnimNode_SQEX_KineDriver
// 0x0190 (0x0258 - 0x00C8)
struct FAnimNode_SQEX_KineDriver final : public FAnimNode_SkeletalControlBase
{
public:
	int32                                         KineDriverIndex;                                   // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQEX_KineDriverData*>           KineDriverData;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EnableScaleOpChildSSC;                             // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TargetNodeDisableScaleOpChildSSC;                  // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLOD;                                         // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinScreenSize;                                     // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCheckDrawn;                                  // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x157];                                    // 0x0101(0x0157)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SQEX_KineDriver) == 0x000008, "Wrong alignment on FAnimNode_SQEX_KineDriver");
static_assert(sizeof(FAnimNode_SQEX_KineDriver) == 0x000258, "Wrong size on FAnimNode_SQEX_KineDriver");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, KineDriverIndex) == 0x0000C8, "Member 'FAnimNode_SQEX_KineDriver::KineDriverIndex' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, KineDriverData) == 0x0000D0, "Member 'FAnimNode_SQEX_KineDriver::KineDriverData' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, EnableScaleOpChildSSC) == 0x0000E0, "Member 'FAnimNode_SQEX_KineDriver::EnableScaleOpChildSSC' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, TargetNodeDisableScaleOpChildSSC) == 0x0000E8, "Member 'FAnimNode_SQEX_KineDriver::TargetNodeDisableScaleOpChildSSC' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, Enabled) == 0x0000F8, "Member 'FAnimNode_SQEX_KineDriver::Enabled' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, EnableLOD) == 0x0000F9, "Member 'FAnimNode_SQEX_KineDriver::EnableLOD' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, MinScreenSize) == 0x0000FC, "Member 'FAnimNode_SQEX_KineDriver::MinScreenSize' has a wrong offset!");
static_assert(offsetof(FAnimNode_SQEX_KineDriver, EnableCheckDrawn) == 0x000100, "Member 'FAnimNode_SQEX_KineDriver::EnableCheckDrawn' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriver_AssetUserDataElement
// 0x0048 (0x0048 - 0x0000)
struct FSQEX_KineDriver_AssetUserDataElement final
{
public:
	int32                                         KineDriverIndex;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQEX_KineDriverData*>           KineDriverData;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EnableScaleOpChildSSC;                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LocalTargetNodeDisableScaleOpChildSSC;             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ETickingGroup                                 TickGroup;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentTag;                                      // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLOD;                                         // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinScreenSize;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFrustumCulling;                              // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCheckDrawn;                                  // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriver_AssetUserDataElement) == 0x000008, "Wrong alignment on FSQEX_KineDriver_AssetUserDataElement");
static_assert(sizeof(FSQEX_KineDriver_AssetUserDataElement) == 0x000048, "Wrong size on FSQEX_KineDriver_AssetUserDataElement");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, KineDriverIndex) == 0x000000, "Member 'FSQEX_KineDriver_AssetUserDataElement::KineDriverIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, KineDriverData) == 0x000008, "Member 'FSQEX_KineDriver_AssetUserDataElement::KineDriverData' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, EnableScaleOpChildSSC) == 0x000018, "Member 'FSQEX_KineDriver_AssetUserDataElement::EnableScaleOpChildSSC' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, LocalTargetNodeDisableScaleOpChildSSC) == 0x000020, "Member 'FSQEX_KineDriver_AssetUserDataElement::LocalTargetNodeDisableScaleOpChildSSC' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, TickGroup) == 0x000030, "Member 'FSQEX_KineDriver_AssetUserDataElement::TickGroup' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, ComponentTag) == 0x000034, "Member 'FSQEX_KineDriver_AssetUserDataElement::ComponentTag' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, EnableLOD) == 0x00003C, "Member 'FSQEX_KineDriver_AssetUserDataElement::EnableLOD' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, MinScreenSize) == 0x000040, "Member 'FSQEX_KineDriver_AssetUserDataElement::MinScreenSize' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, EnableFrustumCulling) == 0x000044, "Member 'FSQEX_KineDriver_AssetUserDataElement::EnableFrustumCulling' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriver_AssetUserDataElement, EnableCheckDrawn) == 0x000045, "Member 'FSQEX_KineDriver_AssetUserDataElement::EnableCheckDrawn' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverPortInfo
// 0x0020 (0x0020 - 0x0000)
struct FSQEX_KineDriverPortInfo final
{
public:
	class FString                                 NodeName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OperatorIndex;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_ParameterType                        ParameterType;                                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MultiIndex;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverPortInfo) == 0x000008, "Wrong alignment on FSQEX_KineDriverPortInfo");
static_assert(sizeof(FSQEX_KineDriverPortInfo) == 0x000020, "Wrong size on FSQEX_KineDriverPortInfo");
static_assert(offsetof(FSQEX_KineDriverPortInfo, NodeName) == 0x000000, "Member 'FSQEX_KineDriverPortInfo::NodeName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverPortInfo, OperatorIndex) == 0x000010, "Member 'FSQEX_KineDriverPortInfo::OperatorIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverPortInfo, ParameterType) == 0x000014, "Member 'FSQEX_KineDriverPortInfo::ParameterType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverPortInfo, MultiIndex) == 0x000018, "Member 'FSQEX_KineDriverPortInfo::MultiIndex' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverConnection
// 0x0058 (0x0058 - 0x0000)
struct FSQEX_KineDriverConnection final
{
public:
	ESQEX_KD_ConnectionType                       ConnectionType;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_KineDriverPortInfo               InPortInfo;                                        // 0x0008(0x0020)(NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverPortInfo               OutPortInfo;                                       // 0x0028(0x0020)(NativeAccessSpecifierPublic)
	int32                                         OtherSourceParamIndex;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherTargetParamIndex;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coef;                                              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverConnection) == 0x000008, "Wrong alignment on FSQEX_KineDriverConnection");
static_assert(sizeof(FSQEX_KineDriverConnection) == 0x000058, "Wrong size on FSQEX_KineDriverConnection");
static_assert(offsetof(FSQEX_KineDriverConnection, ConnectionType) == 0x000000, "Member 'FSQEX_KineDriverConnection::ConnectionType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnection, InPortInfo) == 0x000008, "Member 'FSQEX_KineDriverConnection::InPortInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnection, OutPortInfo) == 0x000028, "Member 'FSQEX_KineDriverConnection::OutPortInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnection, OtherSourceParamIndex) == 0x000048, "Member 'FSQEX_KineDriverConnection::OtherSourceParamIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnection, OtherTargetParamIndex) == 0x00004C, "Member 'FSQEX_KineDriverConnection::OtherTargetParamIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverConnection, Coef) == 0x000050, "Member 'FSQEX_KineDriverConnection::Coef' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverEffectorExpr
// 0x0020 (0x0020 - 0x0000)
struct FSQEX_KineDriverEffectorExpr final
{
public:
	TArray<struct FVector4>                       Inputs;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverEffectorExpr) == 0x000008, "Wrong alignment on FSQEX_KineDriverEffectorExpr");
static_assert(sizeof(FSQEX_KineDriverEffectorExpr) == 0x000020, "Wrong size on FSQEX_KineDriverEffectorExpr");
static_assert(offsetof(FSQEX_KineDriverEffectorExpr, Inputs) == 0x000000, "Member 'FSQEX_KineDriverEffectorExpr::Inputs' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorExpr, Code) == 0x000010, "Member 'FSQEX_KineDriverEffectorExpr::Code' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverEffectorRBFInterpKey
// 0x0028 (0x0028 - 0x0000)
struct FSQEX_KineDriverEffectorRBFInterpKey final
{
public:
	TArray<float>                                 inArray;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 OutArray;                                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverEffectorRBFInterpKey) == 0x000008, "Wrong alignment on FSQEX_KineDriverEffectorRBFInterpKey");
static_assert(sizeof(FSQEX_KineDriverEffectorRBFInterpKey) == 0x000028, "Wrong size on FSQEX_KineDriverEffectorRBFInterpKey");
static_assert(offsetof(FSQEX_KineDriverEffectorRBFInterpKey, inArray) == 0x000000, "Member 'FSQEX_KineDriverEffectorRBFInterpKey::inArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorRBFInterpKey, OutArray) == 0x000010, "Member 'FSQEX_KineDriverEffectorRBFInterpKey::OutArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorRBFInterpKey, Scale) == 0x000020, "Member 'FSQEX_KineDriverEffectorRBFInterpKey::Scale' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverEffectorRBFInterp
// 0x0048 (0x0048 - 0x0000)
struct FSQEX_KineDriverEffectorRBFInterp final
{
public:
	TArray<float>                                 InputArray;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 InCoeffArray;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Filter;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilterParameter;                                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Weights;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverEffectorRBFInterpKey> Keys;                                              // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverEffectorRBFInterp) == 0x000008, "Wrong alignment on FSQEX_KineDriverEffectorRBFInterp");
static_assert(sizeof(FSQEX_KineDriverEffectorRBFInterp) == 0x000048, "Wrong size on FSQEX_KineDriverEffectorRBFInterp");
static_assert(offsetof(FSQEX_KineDriverEffectorRBFInterp, InputArray) == 0x000000, "Member 'FSQEX_KineDriverEffectorRBFInterp::InputArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorRBFInterp, InCoeffArray) == 0x000010, "Member 'FSQEX_KineDriverEffectorRBFInterp::InCoeffArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorRBFInterp, Filter) == 0x000020, "Member 'FSQEX_KineDriverEffectorRBFInterp::Filter' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorRBFInterp, FilterParameter) == 0x000024, "Member 'FSQEX_KineDriverEffectorRBFInterp::FilterParameter' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorRBFInterp, Weights) == 0x000028, "Member 'FSQEX_KineDriverEffectorRBFInterp::Weights' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorRBFInterp, Keys) == 0x000038, "Member 'FSQEX_KineDriverEffectorRBFInterp::Keys' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverEffectorEZParamLinkLinear
// 0x0014 (0x0014 - 0x0000)
struct FSQEX_KineDriverEffectorEZParamLinkLinear final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampMin;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampMax;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableMin;                                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableMax;                                         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverEffectorEZParamLinkLinear) == 0x000004, "Wrong alignment on FSQEX_KineDriverEffectorEZParamLinkLinear");
static_assert(sizeof(FSQEX_KineDriverEffectorEZParamLinkLinear) == 0x000014, "Wrong size on FSQEX_KineDriverEffectorEZParamLinkLinear");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLinkLinear, Scale) == 0x000000, "Member 'FSQEX_KineDriverEffectorEZParamLinkLinear::Scale' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLinkLinear, Offset) == 0x000004, "Member 'FSQEX_KineDriverEffectorEZParamLinkLinear::Offset' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLinkLinear, ClampMin) == 0x000008, "Member 'FSQEX_KineDriverEffectorEZParamLinkLinear::ClampMin' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLinkLinear, ClampMax) == 0x00000C, "Member 'FSQEX_KineDriverEffectorEZParamLinkLinear::ClampMax' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLinkLinear, EnableMin) == 0x000010, "Member 'FSQEX_KineDriverEffectorEZParamLinkLinear::EnableMin' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLinkLinear, EnableMax) == 0x000011, "Member 'FSQEX_KineDriverEffectorEZParamLinkLinear::EnableMax' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverEffectorEZParamLink
// 0x0034 (0x0034 - 0x0000)
struct FSQEX_KineDriverEffectorEZParamLink final
{
public:
	float                                         PX0;                                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX1_0;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX2_1;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Grad0;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Grad1;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY0;                                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY0A;                                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY0B;                                              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY1;                                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY1A;                                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY1B;                                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PY2;                                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ByCoef;                                            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverEffectorEZParamLink) == 0x000004, "Wrong alignment on FSQEX_KineDriverEffectorEZParamLink");
static_assert(sizeof(FSQEX_KineDriverEffectorEZParamLink) == 0x000034, "Wrong size on FSQEX_KineDriverEffectorEZParamLink");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, PX0) == 0x000000, "Member 'FSQEX_KineDriverEffectorEZParamLink::PX0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, VX1_0) == 0x000004, "Member 'FSQEX_KineDriverEffectorEZParamLink::VX1_0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, VX2_1) == 0x000008, "Member 'FSQEX_KineDriverEffectorEZParamLink::VX2_1' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, Grad0) == 0x00000C, "Member 'FSQEX_KineDriverEffectorEZParamLink::Grad0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, Grad1) == 0x000010, "Member 'FSQEX_KineDriverEffectorEZParamLink::Grad1' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, PY0) == 0x000014, "Member 'FSQEX_KineDriverEffectorEZParamLink::PY0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, PY0A) == 0x000018, "Member 'FSQEX_KineDriverEffectorEZParamLink::PY0A' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, PY0B) == 0x00001C, "Member 'FSQEX_KineDriverEffectorEZParamLink::PY0B' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, PY1) == 0x000020, "Member 'FSQEX_KineDriverEffectorEZParamLink::PY1' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, PY1A) == 0x000024, "Member 'FSQEX_KineDriverEffectorEZParamLink::PY1A' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, PY1B) == 0x000028, "Member 'FSQEX_KineDriverEffectorEZParamLink::PY1B' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, PY2) == 0x00002C, "Member 'FSQEX_KineDriverEffectorEZParamLink::PY2' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorEZParamLink, ByCoef) == 0x000030, "Member 'FSQEX_KineDriverEffectorEZParamLink::ByCoef' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverCurveKey
// 0x001C (0x001C - 0x0000)
struct FSQEX_KineDriverCurveKey final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftTanX;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftTanY;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightTanX;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightTanY;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_InterpolateType                      InterpType;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverCurveKey) == 0x000004, "Wrong alignment on FSQEX_KineDriverCurveKey");
static_assert(sizeof(FSQEX_KineDriverCurveKey) == 0x00001C, "Wrong size on FSQEX_KineDriverCurveKey");
static_assert(offsetof(FSQEX_KineDriverCurveKey, X) == 0x000000, "Member 'FSQEX_KineDriverCurveKey::X' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, Y) == 0x000004, "Member 'FSQEX_KineDriverCurveKey::Y' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, LeftTanX) == 0x000008, "Member 'FSQEX_KineDriverCurveKey::LeftTanX' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, LeftTanY) == 0x00000C, "Member 'FSQEX_KineDriverCurveKey::LeftTanY' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, RightTanX) == 0x000010, "Member 'FSQEX_KineDriverCurveKey::RightTanX' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, RightTanY) == 0x000014, "Member 'FSQEX_KineDriverCurveKey::RightTanY' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverCurveKey, InterpType) == 0x000018, "Member 'FSQEX_KineDriverCurveKey::InterpType' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverEffectorLinkWith
// 0x0028 (0x0028 - 0x0000)
struct FSQEX_KineDriverEffectorLinkWith final
{
public:
	ESQEX_KD_ExtrapolateType                      ExtrapType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQEX_KineDriverCurveKey>       Keys;                                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector4>                       aSegmentVec;                                       // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverEffectorLinkWith) == 0x000008, "Wrong alignment on FSQEX_KineDriverEffectorLinkWith");
static_assert(sizeof(FSQEX_KineDriverEffectorLinkWith) == 0x000028, "Wrong size on FSQEX_KineDriverEffectorLinkWith");
static_assert(offsetof(FSQEX_KineDriverEffectorLinkWith, ExtrapType) == 0x000000, "Member 'FSQEX_KineDriverEffectorLinkWith::ExtrapType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorLinkWith, Keys) == 0x000008, "Member 'FSQEX_KineDriverEffectorLinkWith::Keys' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverEffectorLinkWith, aSegmentVec) == 0x000018, "Member 'FSQEX_KineDriverEffectorLinkWith::aSegmentVec' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverEffectorInverse
// 0x0001 (0x0001 - 0x0000)
struct FSQEX_KineDriverEffectorInverse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverEffectorInverse) == 0x000001, "Wrong alignment on FSQEX_KineDriverEffectorInverse");
static_assert(sizeof(FSQEX_KineDriverEffectorInverse) == 0x000001, "Wrong size on FSQEX_KineDriverEffectorInverse");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetOther
// 0x0030 (0x0030 - 0x0000)
struct FSQEX_KineDriverTargetOther final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetOtherParamNames;                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetOther) == 0x000008, "Wrong alignment on FSQEX_KineDriverTargetOther");
static_assert(sizeof(FSQEX_KineDriverTargetOther) == 0x000030, "Wrong size on FSQEX_KineDriverTargetOther");
static_assert(offsetof(FSQEX_KineDriverTargetOther, Name) == 0x000000, "Member 'FSQEX_KineDriverTargetOther::Name' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOther, SubType) == 0x000010, "Member 'FSQEX_KineDriverTargetOther::SubType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOther, TargetOtherParamNames) == 0x000020, "Member 'FSQEX_KineDriverTargetOther::TargetOtherParamNames' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetDircns
// 0x0070 (0x0070 - 0x0000)
struct FSQEX_KineDriverTargetDircns final
{
public:
	class FName                                   TargetObjectBoneName;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AimObject_DEPLECATED;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AimObjectBoneName;                                 // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpObject_DEPLECATED;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UpObjectBoneName;                                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  NeutralRotate;                                     // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimVector;                                         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrossVector;                                       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AimSrcOffset;                                      // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpSrcOffset;                                       // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AimTransformAffect;                                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpTransformAffect;                                 // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetSegmentScaleCompensate;                      // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreTSSC;                                        // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetDircns) == 0x000010, "Wrong alignment on FSQEX_KineDriverTargetDircns");
static_assert(sizeof(FSQEX_KineDriverTargetDircns) == 0x000070, "Wrong size on FSQEX_KineDriverTargetDircns");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, TargetObjectBoneName) == 0x000000, "Member 'FSQEX_KineDriverTargetDircns::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, AimObject_DEPLECATED) == 0x000008, "Member 'FSQEX_KineDriverTargetDircns::AimObject_DEPLECATED' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, AimObjectBoneName) == 0x00000C, "Member 'FSQEX_KineDriverTargetDircns::AimObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, UpObject_DEPLECATED) == 0x000014, "Member 'FSQEX_KineDriverTargetDircns::UpObject_DEPLECATED' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, UpObjectBoneName) == 0x000018, "Member 'FSQEX_KineDriverTargetDircns::UpObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, NeutralRotate) == 0x000020, "Member 'FSQEX_KineDriverTargetDircns::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, AimVector) == 0x000030, "Member 'FSQEX_KineDriverTargetDircns::AimVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, UpVector) == 0x00003C, "Member 'FSQEX_KineDriverTargetDircns::UpVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, CrossVector) == 0x000048, "Member 'FSQEX_KineDriverTargetDircns::CrossVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, AimSrcOffset) == 0x000054, "Member 'FSQEX_KineDriverTargetDircns::AimSrcOffset' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, UpSrcOffset) == 0x000060, "Member 'FSQEX_KineDriverTargetDircns::UpSrcOffset' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, AimTransformAffect) == 0x00006C, "Member 'FSQEX_KineDriverTargetDircns::AimTransformAffect' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, UpTransformAffect) == 0x00006D, "Member 'FSQEX_KineDriverTargetDircns::UpTransformAffect' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, TargetSegmentScaleCompensate) == 0x00006E, "Member 'FSQEX_KineDriverTargetDircns::TargetSegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetDircns, IgnoreTSSC) == 0x00006F, "Member 'FSQEX_KineDriverTargetDircns::IgnoreTSSC' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetOricns
// 0x0060 (0x0060 - 0x0000)
struct FSQEX_KineDriverTargetOricns final
{
public:
	class FName                                   TargetObjectBoneName;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  OffsetRotate;                                      // 0x0010(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SourceBoneNameArray;                               // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WeightArray;                                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          OffsetArray;                                       // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          TargetSegmentScaleCompensate;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreTSSC;                                        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverTargetOricns) == 0x000010, "Wrong alignment on FSQEX_KineDriverTargetOricns");
static_assert(sizeof(FSQEX_KineDriverTargetOricns) == 0x000060, "Wrong size on FSQEX_KineDriverTargetOricns");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, TargetObjectBoneName) == 0x000000, "Member 'FSQEX_KineDriverTargetOricns::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, OffsetRotate) == 0x000010, "Member 'FSQEX_KineDriverTargetOricns::OffsetRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, SourceBoneNameArray) == 0x000020, "Member 'FSQEX_KineDriverTargetOricns::SourceBoneNameArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, WeightArray) == 0x000030, "Member 'FSQEX_KineDriverTargetOricns::WeightArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, OffsetArray) == 0x000040, "Member 'FSQEX_KineDriverTargetOricns::OffsetArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, TargetSegmentScaleCompensate) == 0x000050, "Member 'FSQEX_KineDriverTargetOricns::TargetSegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetOricns, IgnoreTSSC) == 0x000051, "Member 'FSQEX_KineDriverTargetOricns::IgnoreTSSC' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetPoscns
// 0x0050 (0x0050 - 0x0000)
struct FSQEX_KineDriverTargetPoscns final
{
public:
	class FName                                   TargetObjectBoneName;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrientAffect;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScaleAffect;                                       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetTranslate;                                   // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SourceBoneNameArray;                               // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WeightArray;                                       // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OffsetArray;                                       // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          TargetSegmentScaleCompensate;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreTSSC;                                        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverTargetPoscns) == 0x000008, "Wrong alignment on FSQEX_KineDriverTargetPoscns");
static_assert(sizeof(FSQEX_KineDriverTargetPoscns) == 0x000050, "Wrong size on FSQEX_KineDriverTargetPoscns");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, TargetObjectBoneName) == 0x000000, "Member 'FSQEX_KineDriverTargetPoscns::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, OrientAffect) == 0x000008, "Member 'FSQEX_KineDriverTargetPoscns::OrientAffect' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, ScaleAffect) == 0x000009, "Member 'FSQEX_KineDriverTargetPoscns::ScaleAffect' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, OffsetTranslate) == 0x00000C, "Member 'FSQEX_KineDriverTargetPoscns::OffsetTranslate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, SourceBoneNameArray) == 0x000018, "Member 'FSQEX_KineDriverTargetPoscns::SourceBoneNameArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, WeightArray) == 0x000028, "Member 'FSQEX_KineDriverTargetPoscns::WeightArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, OffsetArray) == 0x000038, "Member 'FSQEX_KineDriverTargetPoscns::OffsetArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, TargetSegmentScaleCompensate) == 0x000048, "Member 'FSQEX_KineDriverTargetPoscns::TargetSegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetPoscns, IgnoreTSSC) == 0x000049, "Member 'FSQEX_KineDriverTargetPoscns::IgnoreTSSC' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverBaseSpaceInfo
// 0x000C (0x000C - 0x0000)
struct FSQEX_KineDriverBaseSpaceInfo final
{
public:
	ESQEX_KD_BaseSpaceType                        BaseSpaceType;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverBaseSpaceInfo) == 0x000004, "Wrong alignment on FSQEX_KineDriverBaseSpaceInfo");
static_assert(sizeof(FSQEX_KineDriverBaseSpaceInfo) == 0x00000C, "Wrong size on FSQEX_KineDriverBaseSpaceInfo");
static_assert(offsetof(FSQEX_KineDriverBaseSpaceInfo, BaseSpaceType) == 0x000000, "Member 'FSQEX_KineDriverBaseSpaceInfo::BaseSpaceType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverBaseSpaceInfo, BoneName) == 0x000004, "Member 'FSQEX_KineDriverBaseSpaceInfo::BoneName' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverMirrorParams
// 0x0040 (0x0040 - 0x0000)
struct FSQEX_KineDriverMirrorParams final
{
public:
	bool                                          EnableMirroring;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  MirrorSourceQuaternion;                            // 0x0010(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  MirrorDestinationQuaternion;                       // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESQEX_KD_MirrorAcrossType                     MirrorAcross;                                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverMirrorParams) == 0x000010, "Wrong alignment on FSQEX_KineDriverMirrorParams");
static_assert(sizeof(FSQEX_KineDriverMirrorParams) == 0x000040, "Wrong size on FSQEX_KineDriverMirrorParams");
static_assert(offsetof(FSQEX_KineDriverMirrorParams, EnableMirroring) == 0x000000, "Member 'FSQEX_KineDriverMirrorParams::EnableMirroring' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverMirrorParams, MirrorSourceQuaternion) == 0x000010, "Member 'FSQEX_KineDriverMirrorParams::MirrorSourceQuaternion' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverMirrorParams, MirrorDestinationQuaternion) == 0x000020, "Member 'FSQEX_KineDriverMirrorParams::MirrorDestinationQuaternion' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverMirrorParams, MirrorAcross) == 0x000030, "Member 'FSQEX_KineDriverMirrorParams::MirrorAcross' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetExpmap
// 0x0080 (0x0080 - 0x0000)
struct FSQEX_KineDriverTargetExpmap final
{
public:
	class FName                                   TargetObjectBoneName;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpmapX;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpmapY;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpmapZ;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverBaseSpaceInfo          BaseSpaceInfo;                                     // 0x0014(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverMirrorParams           MirrorParams;                                      // 0x0040(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetExpmap) == 0x000010, "Wrong alignment on FSQEX_KineDriverTargetExpmap");
static_assert(sizeof(FSQEX_KineDriverTargetExpmap) == 0x000080, "Wrong size on FSQEX_KineDriverTargetExpmap");
static_assert(offsetof(FSQEX_KineDriverTargetExpmap, TargetObjectBoneName) == 0x000000, "Member 'FSQEX_KineDriverTargetExpmap::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetExpmap, ExpmapX) == 0x000008, "Member 'FSQEX_KineDriverTargetExpmap::ExpmapX' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetExpmap, ExpmapY) == 0x00000C, "Member 'FSQEX_KineDriverTargetExpmap::ExpmapY' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetExpmap, ExpmapZ) == 0x000010, "Member 'FSQEX_KineDriverTargetExpmap::ExpmapZ' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetExpmap, BaseSpaceInfo) == 0x000014, "Member 'FSQEX_KineDriverTargetExpmap::BaseSpaceInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetExpmap, SegmentScaleCompensate) == 0x000020, "Member 'FSQEX_KineDriverTargetExpmap::SegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetExpmap, NeutralRotate) == 0x000030, "Member 'FSQEX_KineDriverTargetExpmap::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetExpmap, MirrorParams) == 0x000040, "Member 'FSQEX_KineDriverTargetExpmap::MirrorParams' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetBendSTRoll
// 0x00B0 (0x00B0 - 0x0000)
struct FSQEX_KineDriverTargetBendSTRoll final
{
public:
	class FName                                   TargetObjectBoneName;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendS;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendT;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverBaseSpaceInfo          BaseSpaceInfo;                                     // 0x0014(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimVector;                                         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrossVector;                                       // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseOrder;                                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0xB];                                       // 0x0065(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_KineDriverMirrorParams           MirrorParams;                                      // 0x0070(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetBendSTRoll) == 0x000010, "Wrong alignment on FSQEX_KineDriverTargetBendSTRoll");
static_assert(sizeof(FSQEX_KineDriverTargetBendSTRoll) == 0x0000B0, "Wrong size on FSQEX_KineDriverTargetBendSTRoll");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, TargetObjectBoneName) == 0x000000, "Member 'FSQEX_KineDriverTargetBendSTRoll::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, BendS) == 0x000008, "Member 'FSQEX_KineDriverTargetBendSTRoll::BendS' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, BendT) == 0x00000C, "Member 'FSQEX_KineDriverTargetBendSTRoll::BendT' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, Roll) == 0x000010, "Member 'FSQEX_KineDriverTargetBendSTRoll::Roll' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, BaseSpaceInfo) == 0x000014, "Member 'FSQEX_KineDriverTargetBendSTRoll::BaseSpaceInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, SegmentScaleCompensate) == 0x000020, "Member 'FSQEX_KineDriverTargetBendSTRoll::SegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, NeutralRotate) == 0x000030, "Member 'FSQEX_KineDriverTargetBendSTRoll::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, AimVector) == 0x000040, "Member 'FSQEX_KineDriverTargetBendSTRoll::AimVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, UpVector) == 0x00004C, "Member 'FSQEX_KineDriverTargetBendSTRoll::UpVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, CrossVector) == 0x000058, "Member 'FSQEX_KineDriverTargetBendSTRoll::CrossVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, ReverseOrder) == 0x000064, "Member 'FSQEX_KineDriverTargetBendSTRoll::ReverseOrder' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendSTRoll, MirrorParams) == 0x000070, "Member 'FSQEX_KineDriverTargetBendSTRoll::MirrorParams' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetBendRoll
// 0x0090 (0x0090 - 0x0000)
struct FSQEX_KineDriverTargetBendRoll final
{
public:
	class FName                                   TargetObjectBoneName;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceQuat;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuatWeight;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AsQuatAngle;                                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Roll;                                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverBaseSpaceInfo          BaseSpaceInfo;                                     // 0x0018(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0xB];                                       // 0x0025(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimVector;                                         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseOrder;                                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_KineDriverMirrorParams           MirrorParams;                                      // 0x0050(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetBendRoll) == 0x000010, "Wrong alignment on FSQEX_KineDriverTargetBendRoll");
static_assert(sizeof(FSQEX_KineDriverTargetBendRoll) == 0x000090, "Wrong size on FSQEX_KineDriverTargetBendRoll");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, TargetObjectBoneName) == 0x000000, "Member 'FSQEX_KineDriverTargetBendRoll::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, SourceQuat) == 0x000008, "Member 'FSQEX_KineDriverTargetBendRoll::SourceQuat' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, QuatWeight) == 0x00000C, "Member 'FSQEX_KineDriverTargetBendRoll::QuatWeight' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, AsQuatAngle) == 0x000010, "Member 'FSQEX_KineDriverTargetBendRoll::AsQuatAngle' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, Roll) == 0x000014, "Member 'FSQEX_KineDriverTargetBendRoll::Roll' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, BaseSpaceInfo) == 0x000018, "Member 'FSQEX_KineDriverTargetBendRoll::BaseSpaceInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, SegmentScaleCompensate) == 0x000024, "Member 'FSQEX_KineDriverTargetBendRoll::SegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, NeutralRotate) == 0x000030, "Member 'FSQEX_KineDriverTargetBendRoll::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, AimVector) == 0x000040, "Member 'FSQEX_KineDriverTargetBendRoll::AimVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, ReverseOrder) == 0x00004C, "Member 'FSQEX_KineDriverTargetBendRoll::ReverseOrder' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetBendRoll, MirrorParams) == 0x000050, "Member 'FSQEX_KineDriverTargetBendRoll::MirrorParams' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetRotate
// 0x0080 (0x0080 - 0x0000)
struct FSQEX_KineDriverTargetRotate final
{
public:
	class FName                                   TargetObjectBoneName;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceQuat;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuatWeight;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AsQuatAngle;                                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_KineDriverBaseSpaceInfo          BaseSpaceInfo;                                     // 0x0014(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverMirrorParams           MirrorParams;                                      // 0x0040(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetRotate) == 0x000010, "Wrong alignment on FSQEX_KineDriverTargetRotate");
static_assert(sizeof(FSQEX_KineDriverTargetRotate) == 0x000080, "Wrong size on FSQEX_KineDriverTargetRotate");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, TargetObjectBoneName) == 0x000000, "Member 'FSQEX_KineDriverTargetRotate::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, SourceQuat) == 0x000008, "Member 'FSQEX_KineDriverTargetRotate::SourceQuat' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, QuatWeight) == 0x00000C, "Member 'FSQEX_KineDriverTargetRotate::QuatWeight' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, AsQuatAngle) == 0x000010, "Member 'FSQEX_KineDriverTargetRotate::AsQuatAngle' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, BaseSpaceInfo) == 0x000014, "Member 'FSQEX_KineDriverTargetRotate::BaseSpaceInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, SegmentScaleCompensate) == 0x000020, "Member 'FSQEX_KineDriverTargetRotate::SegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, NeutralRotate) == 0x000030, "Member 'FSQEX_KineDriverTargetRotate::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetRotate, MirrorParams) == 0x000040, "Member 'FSQEX_KineDriverTargetRotate::MirrorParams' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetScale
// 0x0040 (0x0040 - 0x0000)
struct FSQEX_KineDriverTargetScale final
{
public:
	class FName                                   TargetObjectBoneName;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleZ;                                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClampZero;                                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BaseSpace_DEPLECATED;                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseSpaceBoneName_DEPLECATED;                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverBaseSpaceInfo          BaseSpaceInfo;                                     // 0x0030(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InputAsLogarithm;                                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverTargetScale) == 0x000004, "Wrong alignment on FSQEX_KineDriverTargetScale");
static_assert(sizeof(FSQEX_KineDriverTargetScale) == 0x000040, "Wrong size on FSQEX_KineDriverTargetScale");
static_assert(offsetof(FSQEX_KineDriverTargetScale, TargetObjectBoneName) == 0x000000, "Member 'FSQEX_KineDriverTargetScale::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, Scale) == 0x000008, "Member 'FSQEX_KineDriverTargetScale::Scale' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, ScaleX) == 0x000014, "Member 'FSQEX_KineDriverTargetScale::ScaleX' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, ScaleY) == 0x000018, "Member 'FSQEX_KineDriverTargetScale::ScaleY' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, ScaleZ) == 0x00001C, "Member 'FSQEX_KineDriverTargetScale::ScaleZ' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, ClampZero) == 0x000020, "Member 'FSQEX_KineDriverTargetScale::ClampZero' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, BaseSpace_DEPLECATED) == 0x000024, "Member 'FSQEX_KineDriverTargetScale::BaseSpace_DEPLECATED' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, BaseSpaceBoneName_DEPLECATED) == 0x000028, "Member 'FSQEX_KineDriverTargetScale::BaseSpaceBoneName_DEPLECATED' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, BaseSpaceInfo) == 0x000030, "Member 'FSQEX_KineDriverTargetScale::BaseSpaceInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, SegmentScaleCompensate) == 0x00003C, "Member 'FSQEX_KineDriverTargetScale::SegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetScale, InputAsLogarithm) == 0x00003D, "Member 'FSQEX_KineDriverTargetScale::InputAsLogarithm' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverTargetTranslate
// 0x0040 (0x0040 - 0x0000)
struct FSQEX_KineDriverTargetTranslate final
{
public:
	class FName                                   TargetObjectBoneName;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslateX;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslateY;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslateZ;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverBaseSpaceInfo          BaseSpaceInfo;                                     // 0x0014(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                NeutralTranslate;                                  // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverTargetTranslate) == 0x000010, "Wrong alignment on FSQEX_KineDriverTargetTranslate");
static_assert(sizeof(FSQEX_KineDriverTargetTranslate) == 0x000040, "Wrong size on FSQEX_KineDriverTargetTranslate");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, TargetObjectBoneName) == 0x000000, "Member 'FSQEX_KineDriverTargetTranslate::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, TranslateX) == 0x000008, "Member 'FSQEX_KineDriverTargetTranslate::TranslateX' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, TranslateY) == 0x00000C, "Member 'FSQEX_KineDriverTargetTranslate::TranslateY' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, TranslateZ) == 0x000010, "Member 'FSQEX_KineDriverTargetTranslate::TranslateZ' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, BaseSpaceInfo) == 0x000014, "Member 'FSQEX_KineDriverTargetTranslate::BaseSpaceInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, NeutralTranslate) == 0x000020, "Member 'FSQEX_KineDriverTargetTranslate::NeutralTranslate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverTargetTranslate, NeutralRotate) == 0x000030, "Member 'FSQEX_KineDriverTargetTranslate::NeutralRotate' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverSourceOther
// 0x0030 (0x0030 - 0x0000)
struct FSQEX_KineDriverSourceOther final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParamNames;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverSourceOther) == 0x000008, "Wrong alignment on FSQEX_KineDriverSourceOther");
static_assert(sizeof(FSQEX_KineDriverSourceOther) == 0x000030, "Wrong size on FSQEX_KineDriverSourceOther");
static_assert(offsetof(FSQEX_KineDriverSourceOther, Name) == 0x000000, "Member 'FSQEX_KineDriverSourceOther::Name' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceOther, SubType) == 0x000010, "Member 'FSQEX_KineDriverSourceOther::SubType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceOther, ParamNames) == 0x000020, "Member 'FSQEX_KineDriverSourceOther::ParamNames' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverSourceRotate
// 0x00C0 (0x00C0 - 0x0000)
struct FSQEX_KineDriverSourceRotate final
{
public:
	TArray<class FName>                           SourceBoneNameArray;                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WeightArray;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverBaseSpaceInfo          BaseSpaceInfo;                                     // 0x0020(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SegmentScaleCompensate;                            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimVector;                                         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrossVector;                                       // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseOrder;                                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0xB];                                       // 0x0065(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_KineDriverMirrorParams           MirrorParams;                                      // 0x0070(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          BoundExpmapAngles;                                 // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverSourceRotate) == 0x000010, "Wrong alignment on FSQEX_KineDriverSourceRotate");
static_assert(sizeof(FSQEX_KineDriverSourceRotate) == 0x0000C0, "Wrong size on FSQEX_KineDriverSourceRotate");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, SourceBoneNameArray) == 0x000000, "Member 'FSQEX_KineDriverSourceRotate::SourceBoneNameArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, WeightArray) == 0x000010, "Member 'FSQEX_KineDriverSourceRotate::WeightArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, BaseSpaceInfo) == 0x000020, "Member 'FSQEX_KineDriverSourceRotate::BaseSpaceInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, SegmentScaleCompensate) == 0x00002C, "Member 'FSQEX_KineDriverSourceRotate::SegmentScaleCompensate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, NeutralRotate) == 0x000030, "Member 'FSQEX_KineDriverSourceRotate::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, AimVector) == 0x000040, "Member 'FSQEX_KineDriverSourceRotate::AimVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, UpVector) == 0x00004C, "Member 'FSQEX_KineDriverSourceRotate::UpVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, CrossVector) == 0x000058, "Member 'FSQEX_KineDriverSourceRotate::CrossVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, ReverseOrder) == 0x000064, "Member 'FSQEX_KineDriverSourceRotate::ReverseOrder' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, MirrorParams) == 0x000070, "Member 'FSQEX_KineDriverSourceRotate::MirrorParams' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceRotate, BoundExpmapAngles) == 0x0000B0, "Member 'FSQEX_KineDriverSourceRotate::BoundExpmapAngles' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverSourceTranslate
// 0x0050 (0x0050 - 0x0000)
struct FSQEX_KineDriverSourceTranslate final
{
public:
	TArray<class FName>                           SourceBoneNameArray;                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WeightArray;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverBaseSpaceInfo          BaseSpaceInfo;                                     // 0x0020(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                NeutralTranslate;                                  // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0040(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverSourceTranslate) == 0x000010, "Wrong alignment on FSQEX_KineDriverSourceTranslate");
static_assert(sizeof(FSQEX_KineDriverSourceTranslate) == 0x000050, "Wrong size on FSQEX_KineDriverSourceTranslate");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, SourceBoneNameArray) == 0x000000, "Member 'FSQEX_KineDriverSourceTranslate::SourceBoneNameArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, WeightArray) == 0x000010, "Member 'FSQEX_KineDriverSourceTranslate::WeightArray' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, BaseSpaceInfo) == 0x000020, "Member 'FSQEX_KineDriverSourceTranslate::BaseSpaceInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, NeutralTranslate) == 0x00002C, "Member 'FSQEX_KineDriverSourceTranslate::NeutralTranslate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSourceTranslate, NeutralRotate) == 0x000040, "Member 'FSQEX_KineDriverSourceTranslate::NeutralRotate' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverSource
// 0x0070 (0x0070 - 0x0000)
struct FSQEX_KineDriverSource final
{
public:
	class FName                                   SourceBoneName0;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceBoneName1;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEX_KineDriverBaseSpaceInfo          BaseSpaceInfo;                                     // 0x0014(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                NeutralTranslate;                                  // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NeutralRotate;                                     // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimVector;                                         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrossVector;                                       // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverSource) == 0x000010, "Wrong alignment on FSQEX_KineDriverSource");
static_assert(sizeof(FSQEX_KineDriverSource) == 0x000070, "Wrong size on FSQEX_KineDriverSource");
static_assert(offsetof(FSQEX_KineDriverSource, SourceBoneName0) == 0x000000, "Member 'FSQEX_KineDriverSource::SourceBoneName0' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, SourceBoneName1) == 0x000008, "Member 'FSQEX_KineDriverSource::SourceBoneName1' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, BlendWeight) == 0x000010, "Member 'FSQEX_KineDriverSource::BlendWeight' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, BaseSpaceInfo) == 0x000014, "Member 'FSQEX_KineDriverSource::BaseSpaceInfo' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, NeutralTranslate) == 0x000020, "Member 'FSQEX_KineDriverSource::NeutralTranslate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, NeutralRotate) == 0x000030, "Member 'FSQEX_KineDriverSource::NeutralRotate' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, AimVector) == 0x000040, "Member 'FSQEX_KineDriverSource::AimVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, UpVector) == 0x00004C, "Member 'FSQEX_KineDriverSource::UpVector' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverSource, CrossVector) == 0x000058, "Member 'FSQEX_KineDriverSource::CrossVector' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverComputeSpaceBases
// 0x000C (0x000C - 0x0000)
struct FSQEX_KineDriverComputeSpaceBases final
{
public:
	class FName                                   TargetObjectBoneName;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsScaleOpChild;                                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_KineDriverComputeSpaceBases) == 0x000004, "Wrong alignment on FSQEX_KineDriverComputeSpaceBases");
static_assert(sizeof(FSQEX_KineDriverComputeSpaceBases) == 0x00000C, "Wrong size on FSQEX_KineDriverComputeSpaceBases");
static_assert(offsetof(FSQEX_KineDriverComputeSpaceBases, TargetObjectBoneName) == 0x000000, "Member 'FSQEX_KineDriverComputeSpaceBases::TargetObjectBoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverComputeSpaceBases, IsScaleOpChild) == 0x000008, "Member 'FSQEX_KineDriverComputeSpaceBases::IsScaleOpChild' has a wrong offset!");

// ScriptStruct KineDriverRt.SQEX_KineDriverOperatorHead
// 0x0014 (0x0014 - 0x0000)
struct FSQEX_KineDriverOperatorHead final
{
public:
	int32                                         WorkIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_KD_OperatorType                         OpType;                                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OperatorBody;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Label;                                             // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_KineDriverOperatorHead) == 0x000004, "Wrong alignment on FSQEX_KineDriverOperatorHead");
static_assert(sizeof(FSQEX_KineDriverOperatorHead) == 0x000014, "Wrong size on FSQEX_KineDriverOperatorHead");
static_assert(offsetof(FSQEX_KineDriverOperatorHead, WorkIndex) == 0x000000, "Member 'FSQEX_KineDriverOperatorHead::WorkIndex' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverOperatorHead, OpType) == 0x000004, "Member 'FSQEX_KineDriverOperatorHead::OpType' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverOperatorHead, OperatorBody) == 0x000008, "Member 'FSQEX_KineDriverOperatorHead::OperatorBody' has a wrong offset!");
static_assert(offsetof(FSQEX_KineDriverOperatorHead, Label) == 0x00000C, "Member 'FSQEX_KineDriverOperatorHead::Label' has a wrong offset!");

}

