#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: btsc_COMMON_VRTurks

#include "Basic.hpp"

#include "EndDataBase_structs.hpp"
#include "Engine_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass btsc_COMMON_VRTurks.btsc_COMMON_VRTurks_C
// 0x0020 (0x02E0 - 0x02C0)
class Abtsc_COMMON_VRTurks_C final : public AEndBattleSceneBlueprint
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          OnestTalk_Rude;                                    // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OnestTalk_Elena;                                   // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D2[0x2];                                      // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TalkPhaseNumber;                                   // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HPLimit_Phase1;                                    // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HPLimit_Phase2;                                    // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_btsc_COMMON_VRTurks(int32 EntryPoint);
	void OnEntryBattleScene(const class FName& battleScenenBPName, const class FName& territoryID);
	void OnBattleTalkEnded(class FName TalkID);
	void OnTakeDamage(int32 Damage, const class FName& CauserCharaName, const class FName& DamagedCharaName, const class FName& AbilityId, bool bBind, bool bGuard, const class FName& hitBoneName, bool bAttributeHit, bool bResistHit, const class FName& DamageSourceID, EEndBattleAttributeType appendAttribute, float justHitRotYaw, const struct FVector& hitPosition, bool bHeal, bool bBurst, bool bLock);
	void OnPostEntryBattleScene();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"btsc_COMMON_VRTurks_C">();
	}
	static class Abtsc_COMMON_VRTurks_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Abtsc_COMMON_VRTurks_C>();
	}
};
static_assert(alignof(Abtsc_COMMON_VRTurks_C) == 0x000008, "Wrong alignment on Abtsc_COMMON_VRTurks_C");
static_assert(sizeof(Abtsc_COMMON_VRTurks_C) == 0x0002E0, "Wrong size on Abtsc_COMMON_VRTurks_C");
static_assert(offsetof(Abtsc_COMMON_VRTurks_C, UberGraphFrame) == 0x0002C0, "Member 'Abtsc_COMMON_VRTurks_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Abtsc_COMMON_VRTurks_C, DefaultSceneRoot) == 0x0002C8, "Member 'Abtsc_COMMON_VRTurks_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(Abtsc_COMMON_VRTurks_C, OnestTalk_Rude) == 0x0002D0, "Member 'Abtsc_COMMON_VRTurks_C::OnestTalk_Rude' has a wrong offset!");
static_assert(offsetof(Abtsc_COMMON_VRTurks_C, OnestTalk_Elena) == 0x0002D1, "Member 'Abtsc_COMMON_VRTurks_C::OnestTalk_Elena' has a wrong offset!");
static_assert(offsetof(Abtsc_COMMON_VRTurks_C, TalkPhaseNumber) == 0x0002D4, "Member 'Abtsc_COMMON_VRTurks_C::TalkPhaseNumber' has a wrong offset!");
static_assert(offsetof(Abtsc_COMMON_VRTurks_C, HPLimit_Phase1) == 0x0002D8, "Member 'Abtsc_COMMON_VRTurks_C::HPLimit_Phase1' has a wrong offset!");
static_assert(offsetof(Abtsc_COMMON_VRTurks_C, HPLimit_Phase2) == 0x0002DC, "Member 'Abtsc_COMMON_VRTurks_C::HPLimit_Phase2' has a wrong offset!");

}

