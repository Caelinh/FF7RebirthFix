#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BonamikRt

#include "Basic.hpp"

#include "BonamikRt_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class BonamikRt.InterpTrackInstBonamikTeleport
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstBonamikTeleport final : public UInterpTrackInst
{
public:
	class USQEX_Bonamik_Component*                m_Comp;                                            // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BackupDistance;                                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LastKeyIndex;                                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackInstBonamikTeleport">();
	}
	static class UInterpTrackInstBonamikTeleport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackInstBonamikTeleport>();
	}
};
static_assert(alignof(UInterpTrackInstBonamikTeleport) == 0x000008, "Wrong alignment on UInterpTrackInstBonamikTeleport");
static_assert(sizeof(UInterpTrackInstBonamikTeleport) == 0x000038, "Wrong size on UInterpTrackInstBonamikTeleport");
static_assert(offsetof(UInterpTrackInstBonamikTeleport, m_Comp) == 0x000028, "Member 'UInterpTrackInstBonamikTeleport::m_Comp' has a wrong offset!");
static_assert(offsetof(UInterpTrackInstBonamikTeleport, m_BackupDistance) == 0x000030, "Member 'UInterpTrackInstBonamikTeleport::m_BackupDistance' has a wrong offset!");
static_assert(offsetof(UInterpTrackInstBonamikTeleport, m_LastKeyIndex) == 0x000034, "Member 'UInterpTrackInstBonamikTeleport::m_LastKeyIndex' has a wrong offset!");

// Class BonamikRt.InterpTrackBonamikCharaWind
// 0x0038 (0x00C8 - 0x0090)
class UInterpTrackBonamikCharaWind final : public UInterpTrackFloatBase
{
public:
	TArray<struct FInterpTrackBonamikCharaWindKey> m_Keys;                                            // 0x0090(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           m_Groups;                                          // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                m_DirectionVec;                                    // 0x00B0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BaseStrength;                                    // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaveAmplitude;                                   // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WavePeriod;                                      // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackBonamikCharaWind">();
	}
	static class UInterpTrackBonamikCharaWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackBonamikCharaWind>();
	}
};
static_assert(alignof(UInterpTrackBonamikCharaWind) == 0x000008, "Wrong alignment on UInterpTrackBonamikCharaWind");
static_assert(sizeof(UInterpTrackBonamikCharaWind) == 0x0000C8, "Wrong size on UInterpTrackBonamikCharaWind");
static_assert(offsetof(UInterpTrackBonamikCharaWind, m_Keys) == 0x000090, "Member 'UInterpTrackBonamikCharaWind::m_Keys' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikCharaWind, m_Groups) == 0x0000A0, "Member 'UInterpTrackBonamikCharaWind::m_Groups' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikCharaWind, m_DirectionVec) == 0x0000B0, "Member 'UInterpTrackBonamikCharaWind::m_DirectionVec' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikCharaWind, m_BaseStrength) == 0x0000BC, "Member 'UInterpTrackBonamikCharaWind::m_BaseStrength' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikCharaWind, m_WaveAmplitude) == 0x0000C0, "Member 'UInterpTrackBonamikCharaWind::m_WaveAmplitude' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikCharaWind, m_WavePeriod) == 0x0000C4, "Member 'UInterpTrackBonamikCharaWind::m_WavePeriod' has a wrong offset!");

// Class BonamikRt.InterpTrackBonamikControl
// 0x0020 (0x00B0 - 0x0090)
class UInterpTrackBonamikControl final : public UInterpTrackFloatBase
{
public:
	bool                                          m_Reset;                                           // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_PreRoll;                                         // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_PreRollForAttachment;                            // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bBlendedWeight;                                  // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInterpTrackBonamikControlKey>  m_Keys;                                            // 0x00A0(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackBonamikControl">();
	}
	static class UInterpTrackBonamikControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackBonamikControl>();
	}
};
static_assert(alignof(UInterpTrackBonamikControl) == 0x000008, "Wrong alignment on UInterpTrackBonamikControl");
static_assert(sizeof(UInterpTrackBonamikControl) == 0x0000B0, "Wrong size on UInterpTrackBonamikControl");
static_assert(offsetof(UInterpTrackBonamikControl, m_Reset) == 0x000090, "Member 'UInterpTrackBonamikControl::m_Reset' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikControl, m_PreRoll) == 0x000094, "Member 'UInterpTrackBonamikControl::m_PreRoll' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikControl, m_PreRollForAttachment) == 0x000098, "Member 'UInterpTrackBonamikControl::m_PreRollForAttachment' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikControl, m_bBlendedWeight) == 0x00009C, "Member 'UInterpTrackBonamikControl::m_bBlendedWeight' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikControl, m_Keys) == 0x0000A0, "Member 'UInterpTrackBonamikControl::m_Keys' has a wrong offset!");

// Class BonamikRt.InterpTrackBonamikTeleport
// 0x0010 (0x0080 - 0x0070)
class UInterpTrackBonamikTeleport final : public UInterpTrack
{
public:
	TArray<struct FInterpTrackBonamikTeleportKey> m_Keys;                                            // 0x0070(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackBonamikTeleport">();
	}
	static class UInterpTrackBonamikTeleport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackBonamikTeleport>();
	}
};
static_assert(alignof(UInterpTrackBonamikTeleport) == 0x000008, "Wrong alignment on UInterpTrackBonamikTeleport");
static_assert(sizeof(UInterpTrackBonamikTeleport) == 0x000080, "Wrong size on UInterpTrackBonamikTeleport");
static_assert(offsetof(UInterpTrackBonamikTeleport, m_Keys) == 0x000070, "Member 'UInterpTrackBonamikTeleport::m_Keys' has a wrong offset!");

// Class BonamikRt.InterpTrackBonamikWindControl
// 0x0010 (0x00A0 - 0x0090)
class UInterpTrackBonamikWindControl final : public UInterpTrackFloatBase
{
public:
	TArray<struct FInterpTrackBonamikWindControlKey> m_Keys;                                            // 0x0090(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackBonamikWindControl">();
	}
	static class UInterpTrackBonamikWindControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackBonamikWindControl>();
	}
};
static_assert(alignof(UInterpTrackBonamikWindControl) == 0x000008, "Wrong alignment on UInterpTrackBonamikWindControl");
static_assert(sizeof(UInterpTrackBonamikWindControl) == 0x0000A0, "Wrong size on UInterpTrackBonamikWindControl");
static_assert(offsetof(UInterpTrackBonamikWindControl, m_Keys) == 0x000090, "Member 'UInterpTrackBonamikWindControl::m_Keys' has a wrong offset!");

// Class BonamikRt.InterpTrackBonamikWorldWind
// 0x0068 (0x00F8 - 0x0090)
class UInterpTrackBonamikWorldWind final : public UInterpTrackFloatBase
{
public:
	TArray<struct FInterpTrackBonamikWorldWindKey> m_Keys;                                            // 0x0090(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_BonamikWindGlobalAddition;                       // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_ModelOffset;                                     // 0x00A4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SphereRadius;                                    // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_BoxSize;                                         // 0x00B4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AreaMargin;                                      // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WindForce;                                       // 0x00C4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_RandomRange;                                     // 0x00D0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RandomTime;                                      // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastStrength;                                   // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PeakInRange;                                     // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastRange;                                      // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastSpeed;                                      // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LoopNum;                                         // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_StartFrame;                                      // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackBonamikWorldWind">();
	}
	static class UInterpTrackBonamikWorldWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackBonamikWorldWind>();
	}
};
static_assert(alignof(UInterpTrackBonamikWorldWind) == 0x000008, "Wrong alignment on UInterpTrackBonamikWorldWind");
static_assert(sizeof(UInterpTrackBonamikWorldWind) == 0x0000F8, "Wrong size on UInterpTrackBonamikWorldWind");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_Keys) == 0x000090, "Member 'UInterpTrackBonamikWorldWind::m_Keys' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_BonamikWindGlobalAddition) == 0x0000A0, "Member 'UInterpTrackBonamikWorldWind::m_BonamikWindGlobalAddition' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_ModelOffset) == 0x0000A4, "Member 'UInterpTrackBonamikWorldWind::m_ModelOffset' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_SphereRadius) == 0x0000B0, "Member 'UInterpTrackBonamikWorldWind::m_SphereRadius' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_BoxSize) == 0x0000B4, "Member 'UInterpTrackBonamikWorldWind::m_BoxSize' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_AreaMargin) == 0x0000C0, "Member 'UInterpTrackBonamikWorldWind::m_AreaMargin' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_WindForce) == 0x0000C4, "Member 'UInterpTrackBonamikWorldWind::m_WindForce' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_RandomRange) == 0x0000D0, "Member 'UInterpTrackBonamikWorldWind::m_RandomRange' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_RandomTime) == 0x0000DC, "Member 'UInterpTrackBonamikWorldWind::m_RandomTime' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_BlastStrength) == 0x0000E0, "Member 'UInterpTrackBonamikWorldWind::m_BlastStrength' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_PeakInRange) == 0x0000E4, "Member 'UInterpTrackBonamikWorldWind::m_PeakInRange' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_BlastRange) == 0x0000E8, "Member 'UInterpTrackBonamikWorldWind::m_BlastRange' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_BlastSpeed) == 0x0000EC, "Member 'UInterpTrackBonamikWorldWind::m_BlastSpeed' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_LoopNum) == 0x0000F0, "Member 'UInterpTrackBonamikWorldWind::m_LoopNum' has a wrong offset!");
static_assert(offsetof(UInterpTrackBonamikWorldWind, m_StartFrame) == 0x0000F4, "Member 'UInterpTrackBonamikWorldWind::m_StartFrame' has a wrong offset!");

// Class BonamikRt.InterpTrackInstBonamikCharaWind
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstBonamikCharaWind final : public UInterpTrackInst
{
public:
	class USQEX_Bonamik_Component*                m_Comp;                                            // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LastKeyIndex;                                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackInstBonamikCharaWind">();
	}
	static class UInterpTrackInstBonamikCharaWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackInstBonamikCharaWind>();
	}
};
static_assert(alignof(UInterpTrackInstBonamikCharaWind) == 0x000008, "Wrong alignment on UInterpTrackInstBonamikCharaWind");
static_assert(sizeof(UInterpTrackInstBonamikCharaWind) == 0x000038, "Wrong size on UInterpTrackInstBonamikCharaWind");
static_assert(offsetof(UInterpTrackInstBonamikCharaWind, m_Comp) == 0x000028, "Member 'UInterpTrackInstBonamikCharaWind::m_Comp' has a wrong offset!");
static_assert(offsetof(UInterpTrackInstBonamikCharaWind, m_LastKeyIndex) == 0x000030, "Member 'UInterpTrackInstBonamikCharaWind::m_LastKeyIndex' has a wrong offset!");

// Class BonamikRt.InterpTrackInstBonamikControl
// 0x0138 (0x0160 - 0x0028)
class alignas(0x10) UInterpTrackInstBonamikControl final : public UInterpTrackInst
{
public:
	class USQEX_Bonamik_Component*                m_Comp;                                            // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_BackupAutoDisable;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_BackupWeight;                                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x11C];                                     // 0x0038(0x011C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_LastKeyIndex;                                    // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackInstBonamikControl">();
	}
	static class UInterpTrackInstBonamikControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackInstBonamikControl>();
	}
};
static_assert(alignof(UInterpTrackInstBonamikControl) == 0x000010, "Wrong alignment on UInterpTrackInstBonamikControl");
static_assert(sizeof(UInterpTrackInstBonamikControl) == 0x000160, "Wrong size on UInterpTrackInstBonamikControl");
static_assert(offsetof(UInterpTrackInstBonamikControl, m_Comp) == 0x000028, "Member 'UInterpTrackInstBonamikControl::m_Comp' has a wrong offset!");
static_assert(offsetof(UInterpTrackInstBonamikControl, m_BackupAutoDisable) == 0x000030, "Member 'UInterpTrackInstBonamikControl::m_BackupAutoDisable' has a wrong offset!");
static_assert(offsetof(UInterpTrackInstBonamikControl, m_BackupWeight) == 0x000034, "Member 'UInterpTrackInstBonamikControl::m_BackupWeight' has a wrong offset!");
static_assert(offsetof(UInterpTrackInstBonamikControl, m_LastKeyIndex) == 0x000154, "Member 'UInterpTrackInstBonamikControl::m_LastKeyIndex' has a wrong offset!");

// Class BonamikRt.InterpTrackInstBonamikWindControl
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstBonamikWindControl final : public UInterpTrackInst
{
public:
	int32                                         m_LastKeyIndex;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BackupWindScale;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackInstBonamikWindControl">();
	}
	static class UInterpTrackInstBonamikWindControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackInstBonamikWindControl>();
	}
};
static_assert(alignof(UInterpTrackInstBonamikWindControl) == 0x000008, "Wrong alignment on UInterpTrackInstBonamikWindControl");
static_assert(sizeof(UInterpTrackInstBonamikWindControl) == 0x000030, "Wrong size on UInterpTrackInstBonamikWindControl");
static_assert(offsetof(UInterpTrackInstBonamikWindControl, m_LastKeyIndex) == 0x000028, "Member 'UInterpTrackInstBonamikWindControl::m_LastKeyIndex' has a wrong offset!");
static_assert(offsetof(UInterpTrackInstBonamikWindControl, m_BackupWindScale) == 0x00002C, "Member 'UInterpTrackInstBonamikWindControl::m_BackupWindScale' has a wrong offset!");

// Class BonamikRt.InterpTrackInstBonamikWorldWind
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstBonamikWorldWind final : public UInterpTrackInst
{
public:
	class USQEX_Bonamik_Component*                m_Comp;                                            // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LastKeyIndex;                                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackInstBonamikWorldWind">();
	}
	static class UInterpTrackInstBonamikWorldWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackInstBonamikWorldWind>();
	}
};
static_assert(alignof(UInterpTrackInstBonamikWorldWind) == 0x000008, "Wrong alignment on UInterpTrackInstBonamikWorldWind");
static_assert(sizeof(UInterpTrackInstBonamikWorldWind) == 0x000038, "Wrong size on UInterpTrackInstBonamikWorldWind");
static_assert(offsetof(UInterpTrackInstBonamikWorldWind, m_Comp) == 0x000028, "Member 'UInterpTrackInstBonamikWorldWind::m_Comp' has a wrong offset!");
static_assert(offsetof(UInterpTrackInstBonamikWorldWind, m_LastKeyIndex) == 0x000030, "Member 'UInterpTrackInstBonamikWorldWind::m_LastKeyIndex' has a wrong offset!");

// Class BonamikRt.SQEX_Bonamik_Component
// 0x01F0 (0x03F0 - 0x0200)
class USQEX_Bonamik_Component final : public USceneComponent
{
public:
	uint8                                         Pad_1F8[0xD8];                                     // 0x01F8(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fDeltaTime;                                        // 0x02D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEX_BonamikAsset*                     m_BonamikAsset;                                    // 0x02D8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCharacterMovementComponent*            CharacterMovementComponent;                        // 0x02E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x58];                                     // 0x02E8(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableGameWind;                                   // 0x0340(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_BonamikEnable;                                   // 0x0341(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_BonamikAutoDisable;                              // 0x0342(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAccurateBoundsUpdate;                             // 0x0343(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPerJointWindSample;                               // 0x0344(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bForceFrontXAxis;                                  // 0x0345(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_346[0x2];                                      // 0x0346(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRollStepOnResume;                               // 0x0348(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConstraintDampingAdjustFactor;                     // 0x034C(0x0004)(ZeroConstructor, Transient, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevScreenSize;                                    // 0x0350(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         mTeleportDistance;                                 // 0x0354(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x98];                                     // 0x0358(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SQEX_Bonamik_AddReference(class USQEX_Bonamik_Component* OtherComponent, class FName ReferenceGroupName);
	void SQEX_Bonamik_AddReferenceCommon(class USQEX_Bonamik_Component* OtherComponent);
	void SQEX_Bonamik_AddReferenceDefault();
	void SQEX_Bonamik_Freeze(bool FreezeState, const TArray<class FName>& Groups, float BlendTime, float BlendWeight);
	float SQEX_Bonamik_GetTeleportDistance();
	float SQEX_Bonamik_GetWeight();
	bool SQEX_Bonamik_IsAutoDisable();
	bool SQEX_Bonamik_IsEnable();
	bool SQEX_Bonamik_IsSetup();
	void SQEX_Bonamik_ReinitializeSimulationPose();
	void SQEX_Bonamik_RemoveReference(class USQEX_Bonamik_Component* OtherComponent, class FName ReferenceGroupName);
	void SQEX_Bonamik_RemoveReferenceAll();
	void SQEX_Bonamik_RemoveReferenceCommon(class USQEX_Bonamik_Component* OtherComponent);
	void SQEX_Bonamik_RemoveReferenceDefault();
	void SQEX_Bonamik_ReplaceAsset(class USQEX_BonamikAsset* originalAsset, class USQEX_BonamikAsset* NewAsset);
	void SQEX_Bonamik_Reset(bool bResetPose, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_ResetGravity();
	void SQEX_Bonamik_RestoreDefaultParameters();
	void SQEX_Bonamik_SetAccurateGroundCollisionAll(bool V);
	void SQEX_Bonamik_SetActorCentrifugalScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetActorImpulseScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetActorRotDragScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetActorTransDragScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetAnimPos(int32 BoneIndex, bool bForceSet);
	void SQEX_Bonamik_SetAutoDisable(bool AutoDisable);
	void SQEX_Bonamik_SetBodyDragScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetBodyLiftScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetChainRootCentrifugalScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetChainRootImpulseScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetChainRootRotDragScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetChainRootTransDragScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetEnable(bool NewEnable);
	void SQEX_Bonamik_SetEnableExternalColliders(const TArray<class FName>& Groups, bool V);
	void SQEX_Bonamik_SetEnableGameWind(bool Enable);
	void SQEX_Bonamik_SetEnableGroundCollision(const TArray<class FName>& Groups, bool bNewEnable);
	void SQEX_Bonamik_SetEnableGroundCollisionAll(bool bNewEnable);
	void SQEX_Bonamik_SetEnableTimestepSmoother(bool V);
	void SQEX_Bonamik_SetEnsemble(class FName NewEnsemble);
	void SQEX_Bonamik_SetFrozenState(bool IsFrozen);
	void SQEX_Bonamik_SetGravity(const struct FVector& Gravity);
	void SQEX_Bonamik_SetGroupFrozenState(const TArray<class FName>& Groups, bool IsFrozen);
	void SQEX_Bonamik_SetGroupWeight(const TArray<class FName>& Groups, float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight);
	void SQEX_Bonamik_SetInnerConeScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetLocalForceScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetMassScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetOuterConeScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetParkRateScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetPreRoll(int32 Step, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetSpeedRate(float SpeedRate, float SpeedRateChangeTime, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetTeleportDistance(float Distance, int32 TeleportPreRollStep, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetWeight(float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetWorldWindScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_TurnOff(bool preserveLatestResult, const TArray<class FName>& Groups, float BlendTime);
	void SQEX_Bonamik_TurnOn(const TArray<class FName>& Groups, float BlendTime);

	class FName SQEX_Bonamik_GetEnsemble() const;
	struct FVector SQEX_Bonamik_GetGravity() const;
	class FName SQEX_Bonamik_GetGroupName(int32 idx) const;
	int32 SQEX_Bonamik_GetNumGroups() const;
	int32 SQEX_Bonamik_GetNumReferences() const;
	float SQEX_Bonamik_GetSpeedRate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_Bonamik_Component">();
	}
	static class USQEX_Bonamik_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_Bonamik_Component>();
	}
};
static_assert(alignof(USQEX_Bonamik_Component) == 0x000010, "Wrong alignment on USQEX_Bonamik_Component");
static_assert(sizeof(USQEX_Bonamik_Component) == 0x0003F0, "Wrong size on USQEX_Bonamik_Component");
static_assert(offsetof(USQEX_Bonamik_Component, fDeltaTime) == 0x0002D0, "Member 'USQEX_Bonamik_Component::fDeltaTime' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, m_BonamikAsset) == 0x0002D8, "Member 'USQEX_Bonamik_Component::m_BonamikAsset' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, CharacterMovementComponent) == 0x0002E0, "Member 'USQEX_Bonamik_Component::CharacterMovementComponent' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, bEnableGameWind) == 0x000340, "Member 'USQEX_Bonamik_Component::bEnableGameWind' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, m_BonamikEnable) == 0x000341, "Member 'USQEX_Bonamik_Component::m_BonamikEnable' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, m_BonamikAutoDisable) == 0x000342, "Member 'USQEX_Bonamik_Component::m_BonamikAutoDisable' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, bAccurateBoundsUpdate) == 0x000343, "Member 'USQEX_Bonamik_Component::bAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, bPerJointWindSample) == 0x000344, "Member 'USQEX_Bonamik_Component::bPerJointWindSample' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, bForceFrontXAxis) == 0x000345, "Member 'USQEX_Bonamik_Component::bForceFrontXAxis' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, PreRollStepOnResume) == 0x000348, "Member 'USQEX_Bonamik_Component::PreRollStepOnResume' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, ConstraintDampingAdjustFactor) == 0x00034C, "Member 'USQEX_Bonamik_Component::ConstraintDampingAdjustFactor' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, PrevScreenSize) == 0x000350, "Member 'USQEX_Bonamik_Component::PrevScreenSize' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, mTeleportDistance) == 0x000354, "Member 'USQEX_Bonamik_Component::mTeleportDistance' has a wrong offset!");

// Class BonamikRt.SQEX_Bonamik_Component_v2
// 0x00D0 (0x02D0 - 0x0200)
class USQEX_Bonamik_Component_v2 final : public USceneComponent
{
public:
	uint8                                         Pad_1F8[0x18];                                     // 0x01F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasSkeletalMeshSkippedTransforms;                 // 0x0210(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEX_BonamikAsset_v2*                  m_BonamikAsset;                                    // 0x0218(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0220(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterMovementComponent*            CharacterMovementComponent;                        // 0x0228(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_230[0x8];                                      // 0x0230(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          m_BonamikEnable;                                   // 0x0238(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_BonamikAutoDisable;                              // 0x0239(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAccurateBoundsUpdate;                             // 0x023A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23B[0x1];                                      // 0x023B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRollStepOnResume;                               // 0x023C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevScreenSize;                                    // 0x0240(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_244[0x8C];                                     // 0x0244(0x008C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_Bonamik_Component_v2">();
	}
	static class USQEX_Bonamik_Component_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_Bonamik_Component_v2>();
	}
};
static_assert(alignof(USQEX_Bonamik_Component_v2) == 0x000010, "Wrong alignment on USQEX_Bonamik_Component_v2");
static_assert(sizeof(USQEX_Bonamik_Component_v2) == 0x0002D0, "Wrong size on USQEX_Bonamik_Component_v2");
static_assert(offsetof(USQEX_Bonamik_Component_v2, bHasSkeletalMeshSkippedTransforms) == 0x000210, "Member 'USQEX_Bonamik_Component_v2::bHasSkeletalMeshSkippedTransforms' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component_v2, m_BonamikAsset) == 0x000218, "Member 'USQEX_Bonamik_Component_v2::m_BonamikAsset' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component_v2, SkeletalMeshComponent) == 0x000220, "Member 'USQEX_Bonamik_Component_v2::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component_v2, CharacterMovementComponent) == 0x000228, "Member 'USQEX_Bonamik_Component_v2::CharacterMovementComponent' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component_v2, m_BonamikEnable) == 0x000238, "Member 'USQEX_Bonamik_Component_v2::m_BonamikEnable' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component_v2, m_BonamikAutoDisable) == 0x000239, "Member 'USQEX_Bonamik_Component_v2::m_BonamikAutoDisable' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component_v2, bAccurateBoundsUpdate) == 0x00023A, "Member 'USQEX_Bonamik_Component_v2::bAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component_v2, PreRollStepOnResume) == 0x00023C, "Member 'USQEX_Bonamik_Component_v2::PreRollStepOnResume' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component_v2, PrevScreenSize) == 0x000240, "Member 'USQEX_Bonamik_Component_v2::PrevScreenSize' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikAsset
// 0x0B38 (0x0B68 - 0x0030)
class USQEX_BonamikAsset final : public UDataAsset
{
public:
	TArray<class USQEX_BonamikAsset*>             mRelatedBonamiks;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        m_VersionNo;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_BonamikSceneManagerDesc          mSceneManager;                                     // 0x0048(0x04C0)(Edit, NativeAccessSpecifierPublic)
	struct FSQEX_BonamikSceneManagerDesc          m_SceneManager;                                    // 0x0508(0x04C0)(Deprecated, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikSolverDesc>        mGroups;                                           // 0x09C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikSolverDesc>        m_Solvers;                                         // 0x09D8(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikBodyDesc>          mBodies;                                           // 0x09E8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikBodyDesc>          m_Bodies;                                          // 0x09F8(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikCollisionCliqueDesc> mCollisionCliques;                                 // 0x0A08(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikLongRangeAttachmentDesc> mLRAs;                                             // 0x0A18(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikKDIDesc>           mKDIs;                                             // 0x0A28(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikSimpleLinkDesc>    mLinks;                                            // 0x0A38(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikConeLinkDesc>      mCones;                                            // 0x0A48(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikPlaneDesc>         m_Planes;                                          // 0x0A58(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikShapeDesc>         mShapes;                                           // 0x0A68(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikShapeMatchingDesc> m_ShapeMatchings;                                  // 0x0A78(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikPossessionDesc>    mPossessions;                                      // 0x0A88(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikPossessionDesc>    m_Possessions;                                     // 0x0A98(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	float                                         m_TeleportDistance;                                // 0x0AA8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AAC[0x4];                                      // 0x0AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_ReferenceGroups;                                 // 0x0AB0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           m_CheckGroundBodyPosGroups;                        // 0x0AC0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikGroupLOD>          m_BonamikGroupLODs;                                // 0x0AD0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_BonamikAccurateBoundsUpdate;                     // 0x0AE0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_BonamikPerJointWindSample;                       // 0x0AE1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE2[0x2];                                      // 0x0AE2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_PreRollStepOnResume;                             // 0x0AE4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikLinkDesc>          m_Links;                                           // 0x0AE8(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          m_SkeletalMesh;                                    // 0x0AF8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalKinematics;                                 // 0x0B00(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalConstraints;                                // 0x0B04(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalCones;                                      // 0x0B08(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalLinks;                                      // 0x0B0C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalCollisions;                                 // 0x0B10(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalSelfCollisions;                             // 0x0B14(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalChainRootParticles;                         // 0x0B18(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalPCLinkCones;                                // 0x0B1C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalLateralLinkCones;                           // 0x0B20(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAlwaysUse60FPSsetting;                          // 0x0B24(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B25[0x3];                                      // 0x0B25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_IgnoreEffectors;                                 // 0x0B28(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	class FString                                 m_BonamikReferenceGroup;                           // 0x0B38(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         m_BonamikCheckGroundBodyPosGroups;                 // 0x0B48(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	class USQEX_BonamikAsset_v2*                  v2;                                                // 0x0B58(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B60[0x8];                                      // 0x0B60(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikAsset">();
	}
	static class USQEX_BonamikAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikAsset>();
	}
};
static_assert(alignof(USQEX_BonamikAsset) == 0x000008, "Wrong alignment on USQEX_BonamikAsset");
static_assert(sizeof(USQEX_BonamikAsset) == 0x000B68, "Wrong size on USQEX_BonamikAsset");
static_assert(offsetof(USQEX_BonamikAsset, mRelatedBonamiks) == 0x000030, "Member 'USQEX_BonamikAsset::mRelatedBonamiks' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_VersionNo) == 0x000040, "Member 'USQEX_BonamikAsset::m_VersionNo' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, mSceneManager) == 0x000048, "Member 'USQEX_BonamikAsset::mSceneManager' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_SceneManager) == 0x000508, "Member 'USQEX_BonamikAsset::m_SceneManager' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, mGroups) == 0x0009C8, "Member 'USQEX_BonamikAsset::mGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_Solvers) == 0x0009D8, "Member 'USQEX_BonamikAsset::m_Solvers' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, mBodies) == 0x0009E8, "Member 'USQEX_BonamikAsset::mBodies' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_Bodies) == 0x0009F8, "Member 'USQEX_BonamikAsset::m_Bodies' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, mCollisionCliques) == 0x000A08, "Member 'USQEX_BonamikAsset::mCollisionCliques' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, mLRAs) == 0x000A18, "Member 'USQEX_BonamikAsset::mLRAs' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, mKDIs) == 0x000A28, "Member 'USQEX_BonamikAsset::mKDIs' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, mLinks) == 0x000A38, "Member 'USQEX_BonamikAsset::mLinks' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, mCones) == 0x000A48, "Member 'USQEX_BonamikAsset::mCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_Planes) == 0x000A58, "Member 'USQEX_BonamikAsset::m_Planes' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, mShapes) == 0x000A68, "Member 'USQEX_BonamikAsset::mShapes' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_ShapeMatchings) == 0x000A78, "Member 'USQEX_BonamikAsset::m_ShapeMatchings' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, mPossessions) == 0x000A88, "Member 'USQEX_BonamikAsset::mPossessions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_Possessions) == 0x000A98, "Member 'USQEX_BonamikAsset::m_Possessions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TeleportDistance) == 0x000AA8, "Member 'USQEX_BonamikAsset::m_TeleportDistance' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_ReferenceGroups) == 0x000AB0, "Member 'USQEX_BonamikAsset::m_ReferenceGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_CheckGroundBodyPosGroups) == 0x000AC0, "Member 'USQEX_BonamikAsset::m_CheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_BonamikGroupLODs) == 0x000AD0, "Member 'USQEX_BonamikAsset::m_BonamikGroupLODs' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_BonamikAccurateBoundsUpdate) == 0x000AE0, "Member 'USQEX_BonamikAsset::m_BonamikAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_BonamikPerJointWindSample) == 0x000AE1, "Member 'USQEX_BonamikAsset::m_BonamikPerJointWindSample' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_PreRollStepOnResume) == 0x000AE4, "Member 'USQEX_BonamikAsset::m_PreRollStepOnResume' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_Links) == 0x000AE8, "Member 'USQEX_BonamikAsset::m_Links' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_SkeletalMesh) == 0x000AF8, "Member 'USQEX_BonamikAsset::m_SkeletalMesh' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalKinematics) == 0x000B00, "Member 'USQEX_BonamikAsset::m_TotalKinematics' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalConstraints) == 0x000B04, "Member 'USQEX_BonamikAsset::m_TotalConstraints' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalCones) == 0x000B08, "Member 'USQEX_BonamikAsset::m_TotalCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalLinks) == 0x000B0C, "Member 'USQEX_BonamikAsset::m_TotalLinks' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalCollisions) == 0x000B10, "Member 'USQEX_BonamikAsset::m_TotalCollisions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalSelfCollisions) == 0x000B14, "Member 'USQEX_BonamikAsset::m_TotalSelfCollisions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalChainRootParticles) == 0x000B18, "Member 'USQEX_BonamikAsset::m_TotalChainRootParticles' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalPCLinkCones) == 0x000B1C, "Member 'USQEX_BonamikAsset::m_TotalPCLinkCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalLateralLinkCones) == 0x000B20, "Member 'USQEX_BonamikAsset::m_TotalLateralLinkCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_bAlwaysUse60FPSsetting) == 0x000B24, "Member 'USQEX_BonamikAsset::m_bAlwaysUse60FPSsetting' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_IgnoreEffectors) == 0x000B28, "Member 'USQEX_BonamikAsset::m_IgnoreEffectors' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_BonamikReferenceGroup) == 0x000B38, "Member 'USQEX_BonamikAsset::m_BonamikReferenceGroup' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_BonamikCheckGroundBodyPosGroups) == 0x000B48, "Member 'USQEX_BonamikAsset::m_BonamikCheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, v2) == 0x000B58, "Member 'USQEX_BonamikAsset::v2' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikAsset_v2
// 0x0580 (0x05A8 - 0x0028)
class USQEX_BonamikAsset_v2 final : public UObject
{
public:
	class USkeletalMesh*                          m_SkeletalMesh;                                    // 0x0028(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_VersionNo;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_BonamikSceneManagerDesc_v2       m_SceneManager;                                    // 0x0038(0x0470)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikSolverDesc_v2>     m_Solvers;                                         // 0x04A8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikBodyDesc_v2>       m_Bodies;                                          // 0x04B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikLinkDesc_v2>       m_Links;                                           // 0x04C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikPlaneDesc_v2>      m_Planes;                                          // 0x04D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikShapeMatchingDesc_v2> m_ShapeMatchings;                                  // 0x04E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikPossessionDesc_v2> m_Possessions;                                     // 0x04F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        m_TotalKinematics;                                 // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalConstraints;                                // 0x050C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalCones;                                      // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalLinks;                                      // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalCollisions;                                 // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalSelfCollisions;                             // 0x051C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalChainRootParticles;                         // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalPCLinkCones;                                // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalLateralLinkCones;                           // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAlwaysUse60FPSsetting;                          // 0x052C(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52D[0x3];                                      // 0x052D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_IgnoreEffectors;                                 // 0x0530(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_TeleportDistance;                                // 0x0540(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_BonamikReferenceGroup;                           // 0x0548(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           m_ReferenceGroups;                                 // 0x0558(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         m_BonamikCheckGroundBodyPosGroups;                 // 0x0568(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	TArray<class FName>                           m_CheckGroundBodyPosGroups;                        // 0x0578(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikGroupLOD_v2>       m_BonamikGroupLODs;                                // 0x0588(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_BonamikAccurateBoundsUpdate;                     // 0x0598(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_599[0x3];                                      // 0x0599(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_PreRollStepOnResume;                             // 0x059C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A0[0x8];                                      // 0x05A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikAsset_v2">();
	}
	static class USQEX_BonamikAsset_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikAsset_v2>();
	}
};
static_assert(alignof(USQEX_BonamikAsset_v2) == 0x000008, "Wrong alignment on USQEX_BonamikAsset_v2");
static_assert(sizeof(USQEX_BonamikAsset_v2) == 0x0005A8, "Wrong size on USQEX_BonamikAsset_v2");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_SkeletalMesh) == 0x000028, "Member 'USQEX_BonamikAsset_v2::m_SkeletalMesh' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_VersionNo) == 0x000030, "Member 'USQEX_BonamikAsset_v2::m_VersionNo' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_SceneManager) == 0x000038, "Member 'USQEX_BonamikAsset_v2::m_SceneManager' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_Solvers) == 0x0004A8, "Member 'USQEX_BonamikAsset_v2::m_Solvers' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_Bodies) == 0x0004B8, "Member 'USQEX_BonamikAsset_v2::m_Bodies' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_Links) == 0x0004C8, "Member 'USQEX_BonamikAsset_v2::m_Links' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_Planes) == 0x0004D8, "Member 'USQEX_BonamikAsset_v2::m_Planes' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_ShapeMatchings) == 0x0004E8, "Member 'USQEX_BonamikAsset_v2::m_ShapeMatchings' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_Possessions) == 0x0004F8, "Member 'USQEX_BonamikAsset_v2::m_Possessions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_TotalKinematics) == 0x000508, "Member 'USQEX_BonamikAsset_v2::m_TotalKinematics' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_TotalConstraints) == 0x00050C, "Member 'USQEX_BonamikAsset_v2::m_TotalConstraints' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_TotalCones) == 0x000510, "Member 'USQEX_BonamikAsset_v2::m_TotalCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_TotalLinks) == 0x000514, "Member 'USQEX_BonamikAsset_v2::m_TotalLinks' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_TotalCollisions) == 0x000518, "Member 'USQEX_BonamikAsset_v2::m_TotalCollisions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_TotalSelfCollisions) == 0x00051C, "Member 'USQEX_BonamikAsset_v2::m_TotalSelfCollisions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_TotalChainRootParticles) == 0x000520, "Member 'USQEX_BonamikAsset_v2::m_TotalChainRootParticles' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_TotalPCLinkCones) == 0x000524, "Member 'USQEX_BonamikAsset_v2::m_TotalPCLinkCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_TotalLateralLinkCones) == 0x000528, "Member 'USQEX_BonamikAsset_v2::m_TotalLateralLinkCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_bAlwaysUse60FPSsetting) == 0x00052C, "Member 'USQEX_BonamikAsset_v2::m_bAlwaysUse60FPSsetting' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_IgnoreEffectors) == 0x000530, "Member 'USQEX_BonamikAsset_v2::m_IgnoreEffectors' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_TeleportDistance) == 0x000540, "Member 'USQEX_BonamikAsset_v2::m_TeleportDistance' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_BonamikReferenceGroup) == 0x000548, "Member 'USQEX_BonamikAsset_v2::m_BonamikReferenceGroup' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_ReferenceGroups) == 0x000558, "Member 'USQEX_BonamikAsset_v2::m_ReferenceGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_BonamikCheckGroundBodyPosGroups) == 0x000568, "Member 'USQEX_BonamikAsset_v2::m_BonamikCheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_CheckGroundBodyPosGroups) == 0x000578, "Member 'USQEX_BonamikAsset_v2::m_CheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_BonamikGroupLODs) == 0x000588, "Member 'USQEX_BonamikAsset_v2::m_BonamikGroupLODs' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_BonamikAccurateBoundsUpdate) == 0x000598, "Member 'USQEX_BonamikAsset_v2::m_BonamikAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset_v2, m_PreRollStepOnResume) == 0x00059C, "Member 'USQEX_BonamikAsset_v2::m_PreRollStepOnResume' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikAssetUserData
// 0x0078 (0x00A0 - 0x0028)
class USQEX_BonamikAssetUserData final : public UAssetUserData
{
public:
	TArray<class USQEX_BonamikAsset*>             BonamikAssets;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_bAlwaysUse60FPSsetting;                          // 0x0038(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IgnoreEffectors;                                   // 0x0040(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	class FName                                   EnsembleName;                                      // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReferenceGroups;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CheckGroundBodyPosGroups;                          // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikGroupLOD>          BonamikGroupLODs;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TeleportDistance;                                  // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccurateBoundsUpdate;                             // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerJointWindSample;                               // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceFrontXAxis;                                  // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRollStepOnResume;                               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstraintDampingAdjustFactor;                     // 0x0094(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikAssetUserData">();
	}
	static class USQEX_BonamikAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikAssetUserData>();
	}
};
static_assert(alignof(USQEX_BonamikAssetUserData) == 0x000008, "Wrong alignment on USQEX_BonamikAssetUserData");
static_assert(sizeof(USQEX_BonamikAssetUserData) == 0x0000A0, "Wrong size on USQEX_BonamikAssetUserData");
static_assert(offsetof(USQEX_BonamikAssetUserData, BonamikAssets) == 0x000028, "Member 'USQEX_BonamikAssetUserData::BonamikAssets' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, m_bAlwaysUse60FPSsetting) == 0x000038, "Member 'USQEX_BonamikAssetUserData::m_bAlwaysUse60FPSsetting' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, IgnoreEffectors) == 0x000040, "Member 'USQEX_BonamikAssetUserData::IgnoreEffectors' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, EnsembleName) == 0x000050, "Member 'USQEX_BonamikAssetUserData::EnsembleName' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, ReferenceGroups) == 0x000058, "Member 'USQEX_BonamikAssetUserData::ReferenceGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, CheckGroundBodyPosGroups) == 0x000068, "Member 'USQEX_BonamikAssetUserData::CheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, BonamikGroupLODs) == 0x000078, "Member 'USQEX_BonamikAssetUserData::BonamikGroupLODs' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, TeleportDistance) == 0x000088, "Member 'USQEX_BonamikAssetUserData::TeleportDistance' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, bAccurateBoundsUpdate) == 0x00008C, "Member 'USQEX_BonamikAssetUserData::bAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, bPerJointWindSample) == 0x00008D, "Member 'USQEX_BonamikAssetUserData::bPerJointWindSample' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, bForceFrontXAxis) == 0x00008E, "Member 'USQEX_BonamikAssetUserData::bForceFrontXAxis' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, PreRollStepOnResume) == 0x000090, "Member 'USQEX_BonamikAssetUserData::PreRollStepOnResume' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, ConstraintDampingAdjustFactor) == 0x000094, "Member 'USQEX_BonamikAssetUserData::ConstraintDampingAdjustFactor' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikAssetUserData_v2
// 0x0068 (0x0090 - 0x0028)
class USQEX_BonamikAssetUserData_v2 final : public UAssetUserData
{
public:
	TArray<class USQEX_BonamikAsset_v2*>          BonamikAssets;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_bAlwaysUse60FPSsetting;                          // 0x0038(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IgnoreEffectors;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReferenceGroups;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CheckGroundBodyPosGroups;                          // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikGroupLOD_v2>       BonamikGroupLODs;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TeleportDistance;                                  // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccurateBoundsUpdate;                             // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRollStepOnResume;                               // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOtherInstanceCollision;                     // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikAssetUserData_v2">();
	}
	static class USQEX_BonamikAssetUserData_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikAssetUserData_v2>();
	}
};
static_assert(alignof(USQEX_BonamikAssetUserData_v2) == 0x000008, "Wrong alignment on USQEX_BonamikAssetUserData_v2");
static_assert(sizeof(USQEX_BonamikAssetUserData_v2) == 0x000090, "Wrong size on USQEX_BonamikAssetUserData_v2");
static_assert(offsetof(USQEX_BonamikAssetUserData_v2, BonamikAssets) == 0x000028, "Member 'USQEX_BonamikAssetUserData_v2::BonamikAssets' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData_v2, m_bAlwaysUse60FPSsetting) == 0x000038, "Member 'USQEX_BonamikAssetUserData_v2::m_bAlwaysUse60FPSsetting' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData_v2, IgnoreEffectors) == 0x000040, "Member 'USQEX_BonamikAssetUserData_v2::IgnoreEffectors' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData_v2, ReferenceGroups) == 0x000050, "Member 'USQEX_BonamikAssetUserData_v2::ReferenceGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData_v2, CheckGroundBodyPosGroups) == 0x000060, "Member 'USQEX_BonamikAssetUserData_v2::CheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData_v2, BonamikGroupLODs) == 0x000070, "Member 'USQEX_BonamikAssetUserData_v2::BonamikGroupLODs' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData_v2, TeleportDistance) == 0x000080, "Member 'USQEX_BonamikAssetUserData_v2::TeleportDistance' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData_v2, bAccurateBoundsUpdate) == 0x000084, "Member 'USQEX_BonamikAssetUserData_v2::bAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData_v2, PreRollStepOnResume) == 0x000088, "Member 'USQEX_BonamikAssetUserData_v2::PreRollStepOnResume' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData_v2, bEnableOtherInstanceCollision) == 0x00008C, "Member 'USQEX_BonamikAssetUserData_v2::bEnableOtherInstanceCollision' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWind_Actor_v2
// 0x0008 (0x0230 - 0x0228)
class ASQEX_BonamikWind_Actor_v2 : public AInfo
{
public:
	class USQEX_BonamikWind_Component_v2*         m_BonamikWind_Component;                           // 0x0228(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Enable(bool Value);
	void SetWindScale(float Value);

	float GetWindScale() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind_Actor_v2">();
	}
	static class ASQEX_BonamikWind_Actor_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_BonamikWind_Actor_v2>();
	}
};
static_assert(alignof(ASQEX_BonamikWind_Actor_v2) == 0x000008, "Wrong alignment on ASQEX_BonamikWind_Actor_v2");
static_assert(sizeof(ASQEX_BonamikWind_Actor_v2) == 0x000230, "Wrong size on ASQEX_BonamikWind_Actor_v2");
static_assert(offsetof(ASQEX_BonamikWind_Actor_v2, m_BonamikWind_Component) == 0x000228, "Member 'ASQEX_BonamikWind_Actor_v2::m_BonamikWind_Component' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikCustomWind_Actor_v2
// 0x0070 (0x02A0 - 0x0230)
class ASQEX_BonamikCustomWind_Actor_v2 final : public ASQEX_BonamikWind_Actor_v2
{
public:
	struct FCustomWindSettings                    m_WindSetting;                                     // 0x0230(0x0070)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikCustomWind_Actor_v2">();
	}
	static class ASQEX_BonamikCustomWind_Actor_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_BonamikCustomWind_Actor_v2>();
	}
};
static_assert(alignof(ASQEX_BonamikCustomWind_Actor_v2) == 0x000008, "Wrong alignment on ASQEX_BonamikCustomWind_Actor_v2");
static_assert(sizeof(ASQEX_BonamikCustomWind_Actor_v2) == 0x0002A0, "Wrong size on ASQEX_BonamikCustomWind_Actor_v2");
static_assert(offsetof(ASQEX_BonamikCustomWind_Actor_v2, m_WindSetting) == 0x000230, "Member 'ASQEX_BonamikCustomWind_Actor_v2::m_WindSetting' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikGlobalConfig
// 0x0068 (0x0090 - 0x0028)
class USQEX_BonamikGlobalConfig final : public UObject
{
public:
	bool                                          bEnableTickComponent;                              // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawBonamik;                                 // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpdate;                                     // 0x002A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreadUpdate;                                // 0x002B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSimulation;                                 // 0x002C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpdateOverlaps;                             // 0x002D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeStep;                                          // 0x0030(0x0004)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedFrameRate;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MayaAnimationFrameRate;                            // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MayaSimulationFrameRate;                           // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0040(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSourceSpeedFactor;                             // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickWindWhenPaused;                               // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GameUnitsPerMeter;                                 // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmplifyLiftForEND2;                                // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmplifyDragForEND2;                                // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USQEX_BonamikWind_Asset> DefaultWorldWindModifier;                          // 0x0060(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultWorldWindScale;                             // 0x0088(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikGlobalConfig">();
	}
	static class USQEX_BonamikGlobalConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikGlobalConfig>();
	}
};
static_assert(alignof(USQEX_BonamikGlobalConfig) == 0x000008, "Wrong alignment on USQEX_BonamikGlobalConfig");
static_assert(sizeof(USQEX_BonamikGlobalConfig) == 0x000090, "Wrong size on USQEX_BonamikGlobalConfig");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableTickComponent) == 0x000028, "Member 'USQEX_BonamikGlobalConfig::bEnableTickComponent' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bDebugDrawBonamik) == 0x000029, "Member 'USQEX_BonamikGlobalConfig::bDebugDrawBonamik' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableUpdate) == 0x00002A, "Member 'USQEX_BonamikGlobalConfig::bEnableUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bMultiThreadUpdate) == 0x00002B, "Member 'USQEX_BonamikGlobalConfig::bMultiThreadUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableSimulation) == 0x00002C, "Member 'USQEX_BonamikGlobalConfig::bEnableSimulation' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableUpdateOverlaps) == 0x00002D, "Member 'USQEX_BonamikGlobalConfig::bEnableUpdateOverlaps' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, TimeStep) == 0x000030, "Member 'USQEX_BonamikGlobalConfig::TimeStep' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, ExpectedFrameRate) == 0x000034, "Member 'USQEX_BonamikGlobalConfig::ExpectedFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, MayaAnimationFrameRate) == 0x000038, "Member 'USQEX_BonamikGlobalConfig::MayaAnimationFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, MayaSimulationFrameRate) == 0x00003C, "Member 'USQEX_BonamikGlobalConfig::MayaSimulationFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, Gravity) == 0x000040, "Member 'USQEX_BonamikGlobalConfig::Gravity' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, WindSourceSpeedFactor) == 0x00004C, "Member 'USQEX_BonamikGlobalConfig::WindSourceSpeedFactor' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bTickWindWhenPaused) == 0x000050, "Member 'USQEX_BonamikGlobalConfig::bTickWindWhenPaused' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, GameUnitsPerMeter) == 0x000054, "Member 'USQEX_BonamikGlobalConfig::GameUnitsPerMeter' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, AmplifyLiftForEND2) == 0x000058, "Member 'USQEX_BonamikGlobalConfig::AmplifyLiftForEND2' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, AmplifyDragForEND2) == 0x00005C, "Member 'USQEX_BonamikGlobalConfig::AmplifyDragForEND2' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, DefaultWorldWindModifier) == 0x000060, "Member 'USQEX_BonamikGlobalConfig::DefaultWorldWindModifier' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, DefaultWorldWindScale) == 0x000088, "Member 'USQEX_BonamikGlobalConfig::DefaultWorldWindScale' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikGlobalConfig_v2
// 0x0058 (0x0080 - 0x0028)
class USQEX_BonamikGlobalConfig_v2 final : public UObject
{
public:
	bool                                          bEnableTickComponent;                              // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawBonamik;                                 // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawWind;                                    // 0x002A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpdate;                                     // 0x002B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreadUpdate;                                // 0x002C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSimulation;                                 // 0x002D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpdateOverlaps;                             // 0x002E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeStep;                                          // 0x0030(0x0004)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedFrameRate;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MayaAnimationFrameRate;                            // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MayaSimulationFrameRate;                           // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0040(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSourceSpeedFactor;                             // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickWindWhenPaused;                               // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceResetDeltaTimeDilationThreshold;              // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceResetDeltaTimeDilationPreRoll;                // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShouldPreRollDeltaTimeDilationThreshold;           // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShouldPreRollDeltaTimeDilationPreRoll;             // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreSimulationDeltaTimeDilationThreshold;        // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultTeleportDistance;                           // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultTeleportPreRoll;                            // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_GlobalOutOfCamera               OutOfCamera;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBDEnable;                                        // 0x0071(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBDEnableInitializaiton;                          // 0x0072(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBDEnableCreationOfBonamikComponent;              // 0x0073(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideCollisionIteration;                        // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideLinkIteration;                             // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideSolverIteration;                           // 0x007C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikGlobalConfig_v2">();
	}
	static class USQEX_BonamikGlobalConfig_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikGlobalConfig_v2>();
	}
};
static_assert(alignof(USQEX_BonamikGlobalConfig_v2) == 0x000008, "Wrong alignment on USQEX_BonamikGlobalConfig_v2");
static_assert(sizeof(USQEX_BonamikGlobalConfig_v2) == 0x000080, "Wrong size on USQEX_BonamikGlobalConfig_v2");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bEnableTickComponent) == 0x000028, "Member 'USQEX_BonamikGlobalConfig_v2::bEnableTickComponent' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bDebugDrawBonamik) == 0x000029, "Member 'USQEX_BonamikGlobalConfig_v2::bDebugDrawBonamik' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bDebugDrawWind) == 0x00002A, "Member 'USQEX_BonamikGlobalConfig_v2::bDebugDrawWind' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bEnableUpdate) == 0x00002B, "Member 'USQEX_BonamikGlobalConfig_v2::bEnableUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bMultiThreadUpdate) == 0x00002C, "Member 'USQEX_BonamikGlobalConfig_v2::bMultiThreadUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bEnableSimulation) == 0x00002D, "Member 'USQEX_BonamikGlobalConfig_v2::bEnableSimulation' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bEnableUpdateOverlaps) == 0x00002E, "Member 'USQEX_BonamikGlobalConfig_v2::bEnableUpdateOverlaps' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, TimeStep) == 0x000030, "Member 'USQEX_BonamikGlobalConfig_v2::TimeStep' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, ExpectedFrameRate) == 0x000034, "Member 'USQEX_BonamikGlobalConfig_v2::ExpectedFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, MayaAnimationFrameRate) == 0x000038, "Member 'USQEX_BonamikGlobalConfig_v2::MayaAnimationFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, MayaSimulationFrameRate) == 0x00003C, "Member 'USQEX_BonamikGlobalConfig_v2::MayaSimulationFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, Gravity) == 0x000040, "Member 'USQEX_BonamikGlobalConfig_v2::Gravity' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, WindSourceSpeedFactor) == 0x00004C, "Member 'USQEX_BonamikGlobalConfig_v2::WindSourceSpeedFactor' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bTickWindWhenPaused) == 0x000050, "Member 'USQEX_BonamikGlobalConfig_v2::bTickWindWhenPaused' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, ForceResetDeltaTimeDilationThreshold) == 0x000054, "Member 'USQEX_BonamikGlobalConfig_v2::ForceResetDeltaTimeDilationThreshold' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, ForceResetDeltaTimeDilationPreRoll) == 0x000058, "Member 'USQEX_BonamikGlobalConfig_v2::ForceResetDeltaTimeDilationPreRoll' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, ShouldPreRollDeltaTimeDilationThreshold) == 0x00005C, "Member 'USQEX_BonamikGlobalConfig_v2::ShouldPreRollDeltaTimeDilationThreshold' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, ShouldPreRollDeltaTimeDilationPreRoll) == 0x000060, "Member 'USQEX_BonamikGlobalConfig_v2::ShouldPreRollDeltaTimeDilationPreRoll' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, IgnoreSimulationDeltaTimeDilationThreshold) == 0x000064, "Member 'USQEX_BonamikGlobalConfig_v2::IgnoreSimulationDeltaTimeDilationThreshold' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, DefaultTeleportDistance) == 0x000068, "Member 'USQEX_BonamikGlobalConfig_v2::DefaultTeleportDistance' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, DefaultTeleportPreRoll) == 0x00006C, "Member 'USQEX_BonamikGlobalConfig_v2::DefaultTeleportPreRoll' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, OutOfCamera) == 0x000070, "Member 'USQEX_BonamikGlobalConfig_v2::OutOfCamera' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bKBDEnable) == 0x000071, "Member 'USQEX_BonamikGlobalConfig_v2::bKBDEnable' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bKBDEnableInitializaiton) == 0x000072, "Member 'USQEX_BonamikGlobalConfig_v2::bKBDEnableInitializaiton' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, bKBDEnableCreationOfBonamikComponent) == 0x000073, "Member 'USQEX_BonamikGlobalConfig_v2::bKBDEnableCreationOfBonamikComponent' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, OverrideCollisionIteration) == 0x000074, "Member 'USQEX_BonamikGlobalConfig_v2::OverrideCollisionIteration' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, OverrideLinkIteration) == 0x000078, "Member 'USQEX_BonamikGlobalConfig_v2::OverrideLinkIteration' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig_v2, OverrideSolverIteration) == 0x00007C, "Member 'USQEX_BonamikGlobalConfig_v2::OverrideSolverIteration' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWind_Asset
// 0x0010 (0x0040 - 0x0030)
class USQEX_BonamikWind_Asset final : public UDataAsset
{
public:
	TArray<struct FSQEX_BonamikWind_Desc>         mWinds;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind_Asset">();
	}
	static class USQEX_BonamikWind_Asset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWind_Asset>();
	}
};
static_assert(alignof(USQEX_BonamikWind_Asset) == 0x000008, "Wrong alignment on USQEX_BonamikWind_Asset");
static_assert(sizeof(USQEX_BonamikWind_Asset) == 0x000040, "Wrong size on USQEX_BonamikWind_Asset");
static_assert(offsetof(USQEX_BonamikWind_Asset, mWinds) == 0x000030, "Member 'USQEX_BonamikWind_Asset::mWinds' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWind_Component
// 0x0260 (0x0460 - 0x0200)
class USQEX_BonamikWind_Component final : public USceneComponent
{
public:
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_BonamikWind_Desc                 mProps;                                            // 0x0200(0x0260)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind_Component">();
	}
	static class USQEX_BonamikWind_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWind_Component>();
	}
};
static_assert(alignof(USQEX_BonamikWind_Component) == 0x000010, "Wrong alignment on USQEX_BonamikWind_Component");
static_assert(sizeof(USQEX_BonamikWind_Component) == 0x000460, "Wrong size on USQEX_BonamikWind_Component");
static_assert(offsetof(USQEX_BonamikWind_Component, mProps) == 0x000200, "Member 'USQEX_BonamikWind_Component::mProps' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWind_Component_v2
// 0x0040 (0x0240 - 0x0200)
class USQEX_BonamikWind_Component_v2 final : public USceneComponent
{
public:
	class USQEX_BonamikWindDesc_v2*               m_BonamikWindDesc;                                 // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_WindAreaType                    m_BonamikWindAreaType;                             // 0x0200(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_BonamikWindGlobalAddition;                       // 0x0201(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_BonamikWindBoxAreaSize;                          // 0x0204(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_BonamikWindBoxAreaHalfSize;                      // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BonamikWindSphereAreaRadius;                     // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BonamikWindAreaMargin;                           // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_BonamikWindAbsoluteDirection;                    // 0x0224(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_BonamikWindDirectionYaw;                         // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BonamikWindDirectionPitch;                       // 0x022C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_BonamikWind_v2*                   m_BonamikWind;                                     // 0x0230(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Enable(bool Value);
	void SetWindScale(float Value);

	float GetWindScale() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind_Component_v2">();
	}
	static class USQEX_BonamikWind_Component_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWind_Component_v2>();
	}
};
static_assert(alignof(USQEX_BonamikWind_Component_v2) == 0x000010, "Wrong alignment on USQEX_BonamikWind_Component_v2");
static_assert(sizeof(USQEX_BonamikWind_Component_v2) == 0x000240, "Wrong size on USQEX_BonamikWind_Component_v2");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWindDesc) == 0x0001F8, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWindDesc' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWindAreaType) == 0x000200, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWindAreaType' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWindGlobalAddition) == 0x000201, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWindGlobalAddition' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWindBoxAreaSize) == 0x000204, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWindBoxAreaSize' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWindBoxAreaHalfSize) == 0x000210, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWindBoxAreaHalfSize' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWindSphereAreaRadius) == 0x00021C, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWindSphereAreaRadius' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWindAreaMargin) == 0x000220, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWindAreaMargin' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWindAbsoluteDirection) == 0x000224, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWindAbsoluteDirection' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWindDirectionYaw) == 0x000228, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWindDirectionYaw' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWindDirectionPitch) == 0x00022C, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWindDirectionPitch' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component_v2, m_BonamikWind) == 0x000230, "Member 'USQEX_BonamikWind_Component_v2::m_BonamikWind' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWind_v2
// 0x05E8 (0x0610 - 0x0028)
class USQEX_BonamikWind_v2 final : public UObject
{
public:
	uint8                                         Pad_28[0x5E8];                                     // 0x0028(0x05E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void EnableByOwnerType(bool bEnable, ESQEX_Bonamik_WindOwnerType OwnerType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind_v2">();
	}
	static class USQEX_BonamikWind_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWind_v2>();
	}
};
static_assert(alignof(USQEX_BonamikWind_v2) == 0x000008, "Wrong alignment on USQEX_BonamikWind_v2");
static_assert(sizeof(USQEX_BonamikWind_v2) == 0x000610, "Wrong size on USQEX_BonamikWind_v2");

// Class BonamikRt.SQEX_BonamikWindAssetUserData
// 0x0010 (0x0038 - 0x0028)
class USQEX_BonamikWindAssetUserData final : public UAssetUserData
{
public:
	TArray<class USQEX_BonamikWind_Asset*>        Assets;                                            // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWindAssetUserData">();
	}
	static class USQEX_BonamikWindAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWindAssetUserData>();
	}
};
static_assert(alignof(USQEX_BonamikWindAssetUserData) == 0x000008, "Wrong alignment on USQEX_BonamikWindAssetUserData");
static_assert(sizeof(USQEX_BonamikWindAssetUserData) == 0x000038, "Wrong size on USQEX_BonamikWindAssetUserData");
static_assert(offsetof(USQEX_BonamikWindAssetUserData, Assets) == 0x000028, "Member 'USQEX_BonamikWindAssetUserData::Assets' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWindCollectionAsset_v2
// 0x0010 (0x0040 - 0x0030)
class USQEX_BonamikWindCollectionAsset_v2 final : public UDataAsset
{
public:
	TArray<struct FSQEX_BonamikPresetWindSettings_v2> m_BonamikPresetWindSettings;                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWindCollectionAsset_v2">();
	}
	static class USQEX_BonamikWindCollectionAsset_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWindCollectionAsset_v2>();
	}
};
static_assert(alignof(USQEX_BonamikWindCollectionAsset_v2) == 0x000008, "Wrong alignment on USQEX_BonamikWindCollectionAsset_v2");
static_assert(sizeof(USQEX_BonamikWindCollectionAsset_v2) == 0x000040, "Wrong size on USQEX_BonamikWindCollectionAsset_v2");
static_assert(offsetof(USQEX_BonamikWindCollectionAsset_v2, m_BonamikPresetWindSettings) == 0x000030, "Member 'USQEX_BonamikWindCollectionAsset_v2::m_BonamikPresetWindSettings' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWindDesc_v2
// 0x00C0 (0x00F0 - 0x0030)
class USQEX_BonamikWindDesc_v2 final : public UDataAsset
{
public:
	ESQEX_Bonamik_WindType                        m_WindType;                                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_WindForce;                                       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_RandomRange;                                     // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RandomTime;                                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveMagnitude;                                   // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveFrequency;                                   // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveMagOffset;                                   // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveFreqOffset;                                  // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaveTime;                                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_CustomWaveScale;                                 // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_CustomWaveOffset;                                // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CustomWaveTime;                                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 m_DataX;                                           // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 m_DataY;                                           // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 m_DataZ;                                           // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_PointStrength;                                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastRange;                                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastSpeed;                                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PointRadius;                                     // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PeakInRange;                                     // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_StartFrame;                                      // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LoopNum;                                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWindDesc_v2">();
	}
	static class USQEX_BonamikWindDesc_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWindDesc_v2>();
	}
};
static_assert(alignof(USQEX_BonamikWindDesc_v2) == 0x000008, "Wrong alignment on USQEX_BonamikWindDesc_v2");
static_assert(sizeof(USQEX_BonamikWindDesc_v2) == 0x0000F0, "Wrong size on USQEX_BonamikWindDesc_v2");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_WindType) == 0x000030, "Member 'USQEX_BonamikWindDesc_v2::m_WindType' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_WindForce) == 0x000034, "Member 'USQEX_BonamikWindDesc_v2::m_WindForce' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_RandomRange) == 0x000040, "Member 'USQEX_BonamikWindDesc_v2::m_RandomRange' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_RandomTime) == 0x00004C, "Member 'USQEX_BonamikWindDesc_v2::m_RandomTime' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_WaveMagnitude) == 0x000050, "Member 'USQEX_BonamikWindDesc_v2::m_WaveMagnitude' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_WaveFrequency) == 0x00005C, "Member 'USQEX_BonamikWindDesc_v2::m_WaveFrequency' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_WaveMagOffset) == 0x000068, "Member 'USQEX_BonamikWindDesc_v2::m_WaveMagOffset' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_WaveFreqOffset) == 0x000074, "Member 'USQEX_BonamikWindDesc_v2::m_WaveFreqOffset' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_WaveTime) == 0x000080, "Member 'USQEX_BonamikWindDesc_v2::m_WaveTime' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_CustomWaveScale) == 0x000084, "Member 'USQEX_BonamikWindDesc_v2::m_CustomWaveScale' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_CustomWaveOffset) == 0x000090, "Member 'USQEX_BonamikWindDesc_v2::m_CustomWaveOffset' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_CustomWaveTime) == 0x00009C, "Member 'USQEX_BonamikWindDesc_v2::m_CustomWaveTime' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_DataX) == 0x0000A0, "Member 'USQEX_BonamikWindDesc_v2::m_DataX' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_DataY) == 0x0000B0, "Member 'USQEX_BonamikWindDesc_v2::m_DataY' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_DataZ) == 0x0000C0, "Member 'USQEX_BonamikWindDesc_v2::m_DataZ' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_PointStrength) == 0x0000D0, "Member 'USQEX_BonamikWindDesc_v2::m_PointStrength' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_BlastRange) == 0x0000D4, "Member 'USQEX_BonamikWindDesc_v2::m_BlastRange' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_BlastSpeed) == 0x0000D8, "Member 'USQEX_BonamikWindDesc_v2::m_BlastSpeed' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_PointRadius) == 0x0000DC, "Member 'USQEX_BonamikWindDesc_v2::m_PointRadius' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_PeakInRange) == 0x0000E0, "Member 'USQEX_BonamikWindDesc_v2::m_PeakInRange' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_StartFrame) == 0x0000E4, "Member 'USQEX_BonamikWindDesc_v2::m_StartFrame' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc_v2, m_LoopNum) == 0x0000E8, "Member 'USQEX_BonamikWindDesc_v2::m_LoopNum' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWindPreset_Actor_v2
// 0x0008 (0x0230 - 0x0228)
class ASQEX_BonamikWindPreset_Actor_v2 final : public AActor
{
public:
	class USQEX_BonamikWindCollectionAsset_v2*    m_BonamikWindCollectionAsset;                      // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWindPreset_Actor_v2">();
	}
	static class ASQEX_BonamikWindPreset_Actor_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_BonamikWindPreset_Actor_v2>();
	}
};
static_assert(alignof(ASQEX_BonamikWindPreset_Actor_v2) == 0x000008, "Wrong alignment on ASQEX_BonamikWindPreset_Actor_v2");
static_assert(sizeof(ASQEX_BonamikWindPreset_Actor_v2) == 0x000230, "Wrong size on ASQEX_BonamikWindPreset_Actor_v2");
static_assert(offsetof(ASQEX_BonamikWindPreset_Actor_v2, m_BonamikWindCollectionAsset) == 0x000228, "Member 'ASQEX_BonamikWindPreset_Actor_v2::m_BonamikWindCollectionAsset' has a wrong offset!");

// Class BonamikRt.BonamikWorldInterface_v2
// 0x0000 (0x0028 - 0x0028)
class IBonamikWorldInterface_v2 final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BonamikWorldInterface_v2">();
	}
	static class IBonamikWorldInterface_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBonamikWorldInterface_v2>();
	}
};
static_assert(alignof(IBonamikWorldInterface_v2) == 0x000008, "Wrong alignment on IBonamikWorldInterface_v2");
static_assert(sizeof(IBonamikWorldInterface_v2) == 0x000028, "Wrong size on IBonamikWorldInterface_v2");

// Class BonamikRt.SQEX_WorldSettings_v2
// 0x0140 (0x0500 - 0x03C0)
class ASQEX_WorldSettings_v2 final : public AWorldSettings
{
public:
	struct FSQEX_BonamikPresetWindSettings_v2     m_BonamikPresetWindSettings[0xA];                  // 0x03C0(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_WorldSettings_v2">();
	}
	static class ASQEX_WorldSettings_v2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_WorldSettings_v2>();
	}
};
static_assert(alignof(ASQEX_WorldSettings_v2) == 0x000008, "Wrong alignment on ASQEX_WorldSettings_v2");
static_assert(sizeof(ASQEX_WorldSettings_v2) == 0x000500, "Wrong size on ASQEX_WorldSettings_v2");
static_assert(offsetof(ASQEX_WorldSettings_v2, m_BonamikPresetWindSettings) == 0x0003C0, "Member 'ASQEX_WorldSettings_v2::m_BonamikPresetWindSettings' has a wrong offset!");

}

