#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EN0000_00_SecuritySoldier_Common_AIBP

#include "Basic.hpp"

#include "EN_Base_AIBP_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EN0000_00_SecuritySoldier_Common_AIBP.EN0000_00_SecuritySoldier_Common_AIBP_C
// 0x0040 (0x0FE0 - 0x0FA0)
class AEN0000_00_SecuritySoldier_Common_AIBP_C : public AEN_Base_AIBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_EN0000_00_SecuritySoldier_Common_AIBP_C; // 0x0F98(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	bool                                          RightOfAttack;                                     // 0x0FA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FA1[0x3];                                      // 0x0FA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RightOfAttackEnemyMemberNumValue;                  // 0x0FA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RightOfAttackPriorityValue;                        // 0x0FA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightOfAttackEnableAssignment;                     // 0x0FAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FAD[0x3];                                      // 0x0FAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RightOfAttackDisableAttackEnemyMemberCount;        // 0x0FB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RightOfAttackCharacterPriority;                    // 0x0FB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightOfAttackCharacterDistance;                    // 0x0FB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FBC[0x4];                                      // 0x0FBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          RightOfAttackCharacter;                            // 0x0FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 RightOfAttackEnableAttackTargetPartyMemberNumArray; // 0x0FC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         RightOfAttackEnableAttackTargetPartyMemberNum;     // 0x0FD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_EN0000_00_SecuritySoldier_Common_AIBP(int32 EntryPoint);
	void RemoveRightOfAttack();
	void AddRightOfAttack();
	void RightOfAttackAssignment();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EN0000_00_SecuritySoldier_Common_AIBP_C">();
	}
	static class AEN0000_00_SecuritySoldier_Common_AIBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEN0000_00_SecuritySoldier_Common_AIBP_C>();
	}
};
static_assert(alignof(AEN0000_00_SecuritySoldier_Common_AIBP_C) == 0x000010, "Wrong alignment on AEN0000_00_SecuritySoldier_Common_AIBP_C");
static_assert(sizeof(AEN0000_00_SecuritySoldier_Common_AIBP_C) == 0x000FE0, "Wrong size on AEN0000_00_SecuritySoldier_Common_AIBP_C");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, UberGraphFrame_EN0000_00_SecuritySoldier_Common_AIBP_C) == 0x000F98, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::UberGraphFrame_EN0000_00_SecuritySoldier_Common_AIBP_C' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, RightOfAttack) == 0x000FA0, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::RightOfAttack' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, RightOfAttackEnemyMemberNumValue) == 0x000FA4, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::RightOfAttackEnemyMemberNumValue' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, RightOfAttackPriorityValue) == 0x000FA8, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::RightOfAttackPriorityValue' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, RightOfAttackEnableAssignment) == 0x000FAC, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::RightOfAttackEnableAssignment' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, RightOfAttackDisableAttackEnemyMemberCount) == 0x000FB0, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::RightOfAttackDisableAttackEnemyMemberCount' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, RightOfAttackCharacterPriority) == 0x000FB4, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::RightOfAttackCharacterPriority' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, RightOfAttackCharacterDistance) == 0x000FB8, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::RightOfAttackCharacterDistance' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, RightOfAttackCharacter) == 0x000FC0, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::RightOfAttackCharacter' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, RightOfAttackEnableAttackTargetPartyMemberNumArray) == 0x000FC8, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::RightOfAttackEnableAttackTargetPartyMemberNumArray' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Common_AIBP_C, RightOfAttackEnableAttackTargetPartyMemberNum) == 0x000FD8, "Member 'AEN0000_00_SecuritySoldier_Common_AIBP_C::RightOfAttackEnableAttackTargetPartyMemberNum' has a wrong offset!");

}

