#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkillTree_Line

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SkillTree_Line.SkillTree_Line_C
// 0x0070 (0x0438 - 0x03C8)
class USkillTree_Line_C final : public UEndUserWidget
{
public:
	class UWidgetAnimation*                       LineC_A;                                           // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LineC_B;                                           // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LineA_B;                                           // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Lvup_In;                                           // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LineC;                                             // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LineB;                                             // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LineA;                                             // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Get;                                               // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              Line_00;                                           // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Line_00_Eff;                                       // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Line_01;                                           // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Line_02;                                           // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Line_03;                                           // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Line_Eff;                                          // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SkillTree_Line_C">();
	}
	static class USkillTree_Line_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillTree_Line_C>();
	}
};
static_assert(alignof(USkillTree_Line_C) == 0x000008, "Wrong alignment on USkillTree_Line_C");
static_assert(sizeof(USkillTree_Line_C) == 0x000438, "Wrong size on USkillTree_Line_C");
static_assert(offsetof(USkillTree_Line_C, LineC_A) == 0x0003C8, "Member 'USkillTree_Line_C::LineC_A' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, LineC_B) == 0x0003D0, "Member 'USkillTree_Line_C::LineC_B' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, LineA_B) == 0x0003D8, "Member 'USkillTree_Line_C::LineA_B' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, Lvup_In) == 0x0003E0, "Member 'USkillTree_Line_C::Lvup_In' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, LineC) == 0x0003E8, "Member 'USkillTree_Line_C::LineC' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, LineB) == 0x0003F0, "Member 'USkillTree_Line_C::LineB' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, LineA) == 0x0003F8, "Member 'USkillTree_Line_C::LineA' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, Get) == 0x000400, "Member 'USkillTree_Line_C::Get' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, Line_00) == 0x000408, "Member 'USkillTree_Line_C::Line_00' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, Line_00_Eff) == 0x000410, "Member 'USkillTree_Line_C::Line_00_Eff' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, Line_01) == 0x000418, "Member 'USkillTree_Line_C::Line_01' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, Line_02) == 0x000420, "Member 'USkillTree_Line_C::Line_02' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, Line_03) == 0x000428, "Member 'USkillTree_Line_C::Line_03' has a wrong offset!");
static_assert(offsetof(USkillTree_Line_C, Line_Eff) == 0x000430, "Member 'USkillTree_Line_C::Line_Eff' has a wrong offset!");

}

