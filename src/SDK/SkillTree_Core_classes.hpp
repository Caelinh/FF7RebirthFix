#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkillTree_Core

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SkillTree_Core.SkillTree_Core_C
// 0x0160 (0x0528 - 0x03C8)
class USkillTree_Core_C final : public UEndSkillTreeCoreIcon
{
public:
	class UWidgetAnimation*                       UnlockWepon;                                       // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       NewAnimation;                                      // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CoreLv_UnLock_CoreB;                               // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CoreLv_Lock;                                       // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Unlock_CoreB;                                      // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Lvup_In;                                           // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CoreB_CoreD;                                       // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CoreC_CoreD;                                       // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CoreB_CoreC;                                       // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Unlock;                                            // 0x0410(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Reset;                                             // 0x0418(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Core_D;                                            // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Core_C;                                            // 0x0428(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Core_B;                                            // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Core_A;                                            // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Release;                                           // 0x0440(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              BaseDot1;                                          // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              BaseDot2;                                          // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              BaseDot3;                                          // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              BaseDot4;                                          // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              BaseDot5;                                          // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              BtnLight;                                          // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              BtnLight2;                                         // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USkillTree_CoreAnm_C*                   CoreAnm;                                           // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Cover;                                             // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              eff_Flash;                                         // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              EndImage;                                          // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              EndImage_36;                                       // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Effect_00;                                     // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Effect_00_2;                                   // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Effect_01;                                     // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Effect_01_2;                                   // 0x04C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Effect_01_3;                                   // 0x04C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           Ims_Core;                                          // 0x04D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           Ims_Core_Base;                                     // 0x04D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           Ims_Core_BaseLock;                                 // 0x04E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           Ims_Lock;                                          // 0x04E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              OpenEff1;                                          // 0x04F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              OpenEff1_1;                                        // 0x04F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              OpenEff1_2;                                        // 0x0500(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Ring2;                                             // 0x0508(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Ring3;                                             // 0x0510(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Unlock_Eff;                                        // 0x0518(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Unlock_Eff3;                                       // 0x0520(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SkillTree_Core_C">();
	}
	static class USkillTree_Core_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillTree_Core_C>();
	}
};
static_assert(alignof(USkillTree_Core_C) == 0x000008, "Wrong alignment on USkillTree_Core_C");
static_assert(sizeof(USkillTree_Core_C) == 0x000528, "Wrong size on USkillTree_Core_C");
static_assert(offsetof(USkillTree_Core_C, UnlockWepon) == 0x0003C8, "Member 'USkillTree_Core_C::UnlockWepon' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, NewAnimation) == 0x0003D0, "Member 'USkillTree_Core_C::NewAnimation' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, CoreLv_UnLock_CoreB) == 0x0003D8, "Member 'USkillTree_Core_C::CoreLv_UnLock_CoreB' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, CoreLv_Lock) == 0x0003E0, "Member 'USkillTree_Core_C::CoreLv_Lock' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Unlock_CoreB) == 0x0003E8, "Member 'USkillTree_Core_C::Unlock_CoreB' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Lvup_In) == 0x0003F0, "Member 'USkillTree_Core_C::Lvup_In' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, CoreB_CoreD) == 0x0003F8, "Member 'USkillTree_Core_C::CoreB_CoreD' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, CoreC_CoreD) == 0x000400, "Member 'USkillTree_Core_C::CoreC_CoreD' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, CoreB_CoreC) == 0x000408, "Member 'USkillTree_Core_C::CoreB_CoreC' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Unlock) == 0x000410, "Member 'USkillTree_Core_C::Unlock' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Reset) == 0x000418, "Member 'USkillTree_Core_C::Reset' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Core_D) == 0x000420, "Member 'USkillTree_Core_C::Core_D' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Core_C) == 0x000428, "Member 'USkillTree_Core_C::Core_C' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Core_B) == 0x000430, "Member 'USkillTree_Core_C::Core_B' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Core_A) == 0x000438, "Member 'USkillTree_Core_C::Core_A' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Release) == 0x000440, "Member 'USkillTree_Core_C::Release' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, BaseDot1) == 0x000448, "Member 'USkillTree_Core_C::BaseDot1' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, BaseDot2) == 0x000450, "Member 'USkillTree_Core_C::BaseDot2' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, BaseDot3) == 0x000458, "Member 'USkillTree_Core_C::BaseDot3' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, BaseDot4) == 0x000460, "Member 'USkillTree_Core_C::BaseDot4' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, BaseDot5) == 0x000468, "Member 'USkillTree_Core_C::BaseDot5' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, BtnLight) == 0x000470, "Member 'USkillTree_Core_C::BtnLight' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, BtnLight2) == 0x000478, "Member 'USkillTree_Core_C::BtnLight2' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, CoreAnm) == 0x000480, "Member 'USkillTree_Core_C::CoreAnm' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Cover) == 0x000488, "Member 'USkillTree_Core_C::Cover' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, eff_Flash) == 0x000490, "Member 'USkillTree_Core_C::eff_Flash' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, EndImage) == 0x000498, "Member 'USkillTree_Core_C::EndImage' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, EndImage_36) == 0x0004A0, "Member 'USkillTree_Core_C::EndImage_36' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Img_Effect_00) == 0x0004A8, "Member 'USkillTree_Core_C::Img_Effect_00' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Img_Effect_00_2) == 0x0004B0, "Member 'USkillTree_Core_C::Img_Effect_00_2' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Img_Effect_01) == 0x0004B8, "Member 'USkillTree_Core_C::Img_Effect_01' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Img_Effect_01_2) == 0x0004C0, "Member 'USkillTree_Core_C::Img_Effect_01_2' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Img_Effect_01_3) == 0x0004C8, "Member 'USkillTree_Core_C::Img_Effect_01_3' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Ims_Core) == 0x0004D0, "Member 'USkillTree_Core_C::Ims_Core' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Ims_Core_Base) == 0x0004D8, "Member 'USkillTree_Core_C::Ims_Core_Base' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Ims_Core_BaseLock) == 0x0004E0, "Member 'USkillTree_Core_C::Ims_Core_BaseLock' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Ims_Lock) == 0x0004E8, "Member 'USkillTree_Core_C::Ims_Lock' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, OpenEff1) == 0x0004F0, "Member 'USkillTree_Core_C::OpenEff1' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, OpenEff1_1) == 0x0004F8, "Member 'USkillTree_Core_C::OpenEff1_1' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, OpenEff1_2) == 0x000500, "Member 'USkillTree_Core_C::OpenEff1_2' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Ring2) == 0x000508, "Member 'USkillTree_Core_C::Ring2' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Ring3) == 0x000510, "Member 'USkillTree_Core_C::Ring3' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Unlock_Eff) == 0x000518, "Member 'USkillTree_Core_C::Unlock_Eff' has a wrong offset!");
static_assert(offsetof(USkillTree_Core_C, Unlock_Eff3) == 0x000520, "Member 'USkillTree_Core_C::Unlock_Eff3' has a wrong offset!");

}

