#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EndGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "EndDataBase_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "EndGame_structs.hpp"
#include "EndDataObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function EndGame.EndCharacterBase.GetPointDirectionFromOwnPosture
// 0x0018 (0x0018 - 0x0000)
struct EndCharacterBase_GetPointDirectionFromOwnPosture final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_GetPointDirectionFromOwnPosture) == 0x000004, "Wrong alignment on EndCharacterBase_GetPointDirectionFromOwnPosture");
static_assert(sizeof(EndCharacterBase_GetPointDirectionFromOwnPosture) == 0x000018, "Wrong size on EndCharacterBase_GetPointDirectionFromOwnPosture");
static_assert(offsetof(EndCharacterBase_GetPointDirectionFromOwnPosture, InLocation) == 0x000000, "Member 'EndCharacterBase_GetPointDirectionFromOwnPosture::InLocation' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_GetPointDirectionFromOwnPosture, ReturnValue) == 0x00000C, "Member 'EndCharacterBase_GetPointDirectionFromOwnPosture::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacterBase.GetPointRotationFromOwnPosture
// 0x0018 (0x0018 - 0x0000)
struct EndCharacterBase_GetPointRotationFromOwnPosture final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_GetPointRotationFromOwnPosture) == 0x000004, "Wrong alignment on EndCharacterBase_GetPointRotationFromOwnPosture");
static_assert(sizeof(EndCharacterBase_GetPointRotationFromOwnPosture) == 0x000018, "Wrong size on EndCharacterBase_GetPointRotationFromOwnPosture");
static_assert(offsetof(EndCharacterBase_GetPointRotationFromOwnPosture, InLocation) == 0x000000, "Member 'EndCharacterBase_GetPointRotationFromOwnPosture::InLocation' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_GetPointRotationFromOwnPosture, ReturnValue) == 0x00000C, "Member 'EndCharacterBase_GetPointRotationFromOwnPosture::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacterBase.PlayCoordinateAnimation
// 0x0018 (0x0018 - 0x0000)
struct EndCharacterBase_PlayCoordinateAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateAnimationSettingsId;                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_PlayCoordinateAnimation) == 0x000004, "Wrong alignment on EndCharacterBase_PlayCoordinateAnimation");
static_assert(sizeof(EndCharacterBase_PlayCoordinateAnimation) == 0x000018, "Wrong size on EndCharacterBase_PlayCoordinateAnimation");
static_assert(offsetof(EndCharacterBase_PlayCoordinateAnimation, RequestID) == 0x000000, "Member 'EndCharacterBase_PlayCoordinateAnimation::RequestID' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayCoordinateAnimation, CoordinateAnimationSettingsId) == 0x000008, "Member 'EndCharacterBase_PlayCoordinateAnimation::CoordinateAnimationSettingsId' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayCoordinateAnimation, CurveType) == 0x000010, "Member 'EndCharacterBase_PlayCoordinateAnimation::CurveType' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayCoordinateAnimation, bLoop) == 0x000011, "Member 'EndCharacterBase_PlayCoordinateAnimation::bLoop' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayCoordinateAnimation, Duration) == 0x000014, "Member 'EndCharacterBase_PlayCoordinateAnimation::Duration' has a wrong offset!");

// Function EndGame.EndCharacterBase.PlayEmissiveColorAnimation
// 0x0048 (0x0048 - 0x0000)
struct EndCharacterBase_PlayEmissiveColorAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EmissiveColorSettingsId;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationModifierType                     ModifierType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveEvaluateInLogarithmicSpace;                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveDuration;                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomOffset;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimComponentControlLayer                 Layer;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCharacterBase_PlayEmissiveColorAnimation) == 0x000008, "Wrong alignment on EndCharacterBase_PlayEmissiveColorAnimation");
static_assert(sizeof(EndCharacterBase_PlayEmissiveColorAnimation) == 0x000048, "Wrong size on EndCharacterBase_PlayEmissiveColorAnimation");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, RequestID) == 0x000000, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::RequestID' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, EmissiveColorSettingsId) == 0x000008, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::EmissiveColorSettingsId' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, ModifierType) == 0x000010, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::ModifierType' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, CurveType) == 0x000011, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::CurveType' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, CurveAsset) == 0x000018, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::CurveAsset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, bCurveEvaluateInLogarithmicSpace) == 0x000020, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::bCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, bLoop) == 0x000021, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::bLoop' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, Duration) == 0x000024, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::Duration' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, RandomAdditiveDuration) == 0x000028, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::RandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, RandomOffset) == 0x00002C, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::RandomOffset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, BlendInTime) == 0x000030, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, BlendOutTime) == 0x000034, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, StartOffset) == 0x000038, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::StartOffset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, EndOffset) == 0x00003C, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::EndOffset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayEmissiveColorAnimation, Layer) == 0x000040, "Member 'EndCharacterBase_PlayEmissiveColorAnimation::Layer' has a wrong offset!");

// Function EndGame.EndCharacterBase.PlayFlowMapAnimation
// 0x0020 (0x0020 - 0x0000)
struct EndCharacterBase_PlayFlowMapAnimation final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideConstantParameter;                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ConstantParameter0;                                // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstantParameter1;                                // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_PlayFlowMapAnimation) == 0x000004, "Wrong alignment on EndCharacterBase_PlayFlowMapAnimation");
static_assert(sizeof(EndCharacterBase_PlayFlowMapAnimation) == 0x000020, "Wrong size on EndCharacterBase_PlayFlowMapAnimation");
static_assert(offsetof(EndCharacterBase_PlayFlowMapAnimation, PlayRate) == 0x000000, "Member 'EndCharacterBase_PlayFlowMapAnimation::PlayRate' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayFlowMapAnimation, bOverrideConstantParameter) == 0x000004, "Member 'EndCharacterBase_PlayFlowMapAnimation::bOverrideConstantParameter' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayFlowMapAnimation, ConstantParameter0) == 0x000008, "Member 'EndCharacterBase_PlayFlowMapAnimation::ConstantParameter0' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayFlowMapAnimation, ConstantParameter1) == 0x000014, "Member 'EndCharacterBase_PlayFlowMapAnimation::ConstantParameter1' has a wrong offset!");

// Function EndGame.EndCharacterBase.PlayLightAnimation
// 0x0040 (0x0040 - 0x0000)
struct EndCharacterBase_PlayLightAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightAnimationSettingsId;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationModifierType                     ModifierType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveEvaluateInLogarithmicSpace;                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveDuration;                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomOffset;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_PlayLightAnimation) == 0x000008, "Wrong alignment on EndCharacterBase_PlayLightAnimation");
static_assert(sizeof(EndCharacterBase_PlayLightAnimation) == 0x000040, "Wrong size on EndCharacterBase_PlayLightAnimation");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, RequestID) == 0x000000, "Member 'EndCharacterBase_PlayLightAnimation::RequestID' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, LightAnimationSettingsId) == 0x000008, "Member 'EndCharacterBase_PlayLightAnimation::LightAnimationSettingsId' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, ModifierType) == 0x000010, "Member 'EndCharacterBase_PlayLightAnimation::ModifierType' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, CurveType) == 0x000011, "Member 'EndCharacterBase_PlayLightAnimation::CurveType' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, CurveAsset) == 0x000018, "Member 'EndCharacterBase_PlayLightAnimation::CurveAsset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, bCurveEvaluateInLogarithmicSpace) == 0x000020, "Member 'EndCharacterBase_PlayLightAnimation::bCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, bLoop) == 0x000021, "Member 'EndCharacterBase_PlayLightAnimation::bLoop' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, Duration) == 0x000024, "Member 'EndCharacterBase_PlayLightAnimation::Duration' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, RandomAdditiveDuration) == 0x000028, "Member 'EndCharacterBase_PlayLightAnimation::RandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, RandomOffset) == 0x00002C, "Member 'EndCharacterBase_PlayLightAnimation::RandomOffset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, BlendInTime) == 0x000030, "Member 'EndCharacterBase_PlayLightAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, BlendOutTime) == 0x000034, "Member 'EndCharacterBase_PlayLightAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, StartOffset) == 0x000038, "Member 'EndCharacterBase_PlayLightAnimation::StartOffset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayLightAnimation, EndOffset) == 0x00003C, "Member 'EndCharacterBase_PlayLightAnimation::EndOffset' has a wrong offset!");

// Function EndGame.EndCharacterBase.PlayWeaponEmissiveColorAnimation
// 0x0048 (0x0048 - 0x0000)
struct EndCharacterBase_PlayWeaponEmissiveColorAnimation final
{
public:
	EWeaponSlot                                   Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RequestID;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EmissiveColorSettingsId;                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationModifierType                     ModifierType;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveEvaluateInLogarithmicSpace;                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveDuration;                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomOffset;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimComponentControlLayer                 Layer;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCharacterBase_PlayWeaponEmissiveColorAnimation) == 0x000008, "Wrong alignment on EndCharacterBase_PlayWeaponEmissiveColorAnimation");
static_assert(sizeof(EndCharacterBase_PlayWeaponEmissiveColorAnimation) == 0x000048, "Wrong size on EndCharacterBase_PlayWeaponEmissiveColorAnimation");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, Slot) == 0x000000, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::Slot' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, RequestID) == 0x000004, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::RequestID' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, EmissiveColorSettingsId) == 0x00000C, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::EmissiveColorSettingsId' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, ModifierType) == 0x000014, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::ModifierType' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, CurveType) == 0x000015, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::CurveType' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, CurveAsset) == 0x000018, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::CurveAsset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, bCurveEvaluateInLogarithmicSpace) == 0x000020, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::bCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, bLoop) == 0x000021, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::bLoop' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, Duration) == 0x000024, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::Duration' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, RandomAdditiveDuration) == 0x000028, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::RandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, RandomOffset) == 0x00002C, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::RandomOffset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, BlendInTime) == 0x000030, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, BlendOutTime) == 0x000034, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, StartOffset) == 0x000038, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::StartOffset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, EndOffset) == 0x00003C, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::EndOffset' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_PlayWeaponEmissiveColorAnimation, Layer) == 0x000040, "Member 'EndCharacterBase_PlayWeaponEmissiveColorAnimation::Layer' has a wrong offset!");

// Function EndGame.EndCharacterBase.ResetDirectEmissiveColor
// 0x0008 (0x0008 - 0x0000)
struct EndCharacterBase_ResetDirectEmissiveColor final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_ResetDirectEmissiveColor) == 0x000004, "Wrong alignment on EndCharacterBase_ResetDirectEmissiveColor");
static_assert(sizeof(EndCharacterBase_ResetDirectEmissiveColor) == 0x000008, "Wrong size on EndCharacterBase_ResetDirectEmissiveColor");
static_assert(offsetof(EndCharacterBase_ResetDirectEmissiveColor, RequestID) == 0x000000, "Member 'EndCharacterBase_ResetDirectEmissiveColor::RequestID' has a wrong offset!");

// Function EndGame.EndCharacterBase.SetChildMesh
// 0x0010 (0x0010 - 0x0000)
struct EndCharacterBase_SetChildMesh final
{
public:
	class FName                                   MeshName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Label;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_SetChildMesh) == 0x000004, "Wrong alignment on EndCharacterBase_SetChildMesh");
static_assert(sizeof(EndCharacterBase_SetChildMesh) == 0x000010, "Wrong size on EndCharacterBase_SetChildMesh");
static_assert(offsetof(EndCharacterBase_SetChildMesh, MeshName) == 0x000000, "Member 'EndCharacterBase_SetChildMesh::MeshName' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_SetChildMesh, Label) == 0x000008, "Member 'EndCharacterBase_SetChildMesh::Label' has a wrong offset!");

// Function EndGame.EndCharacterBase.SetDirectEmissiveColor
// 0x0014 (0x0014 - 0x0000)
struct EndCharacterBase_SetDirectEmissiveColor final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EmissiveColorSettingsId;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityAlpha;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_SetDirectEmissiveColor) == 0x000004, "Wrong alignment on EndCharacterBase_SetDirectEmissiveColor");
static_assert(sizeof(EndCharacterBase_SetDirectEmissiveColor) == 0x000014, "Wrong size on EndCharacterBase_SetDirectEmissiveColor");
static_assert(offsetof(EndCharacterBase_SetDirectEmissiveColor, RequestID) == 0x000000, "Member 'EndCharacterBase_SetDirectEmissiveColor::RequestID' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_SetDirectEmissiveColor, EmissiveColorSettingsId) == 0x000008, "Member 'EndCharacterBase_SetDirectEmissiveColor::EmissiveColorSettingsId' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_SetDirectEmissiveColor, IntensityAlpha) == 0x000010, "Member 'EndCharacterBase_SetDirectEmissiveColor::IntensityAlpha' has a wrong offset!");

// Function EndGame.EndCharacterBase.SetMaterialPack
// 0x0008 (0x0008 - 0x0000)
struct EndCharacterBase_SetMaterialPack final
{
public:
	class UEndMaterialPack*                       InMaterialPack;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_SetMaterialPack) == 0x000008, "Wrong alignment on EndCharacterBase_SetMaterialPack");
static_assert(sizeof(EndCharacterBase_SetMaterialPack) == 0x000008, "Wrong size on EndCharacterBase_SetMaterialPack");
static_assert(offsetof(EndCharacterBase_SetMaterialPack, InMaterialPack) == 0x000000, "Member 'EndCharacterBase_SetMaterialPack::InMaterialPack' has a wrong offset!");

// Function EndGame.EndCharacterBase.StopCoordinateAnimation
// 0x0008 (0x0008 - 0x0000)
struct EndCharacterBase_StopCoordinateAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_StopCoordinateAnimation) == 0x000004, "Wrong alignment on EndCharacterBase_StopCoordinateAnimation");
static_assert(sizeof(EndCharacterBase_StopCoordinateAnimation) == 0x000008, "Wrong size on EndCharacterBase_StopCoordinateAnimation");
static_assert(offsetof(EndCharacterBase_StopCoordinateAnimation, RequestID) == 0x000000, "Member 'EndCharacterBase_StopCoordinateAnimation::RequestID' has a wrong offset!");

// Function EndGame.EndCharacterBase.StopEmissiveColorAnimation
// 0x0008 (0x0008 - 0x0000)
struct EndCharacterBase_StopEmissiveColorAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_StopEmissiveColorAnimation) == 0x000004, "Wrong alignment on EndCharacterBase_StopEmissiveColorAnimation");
static_assert(sizeof(EndCharacterBase_StopEmissiveColorAnimation) == 0x000008, "Wrong size on EndCharacterBase_StopEmissiveColorAnimation");
static_assert(offsetof(EndCharacterBase_StopEmissiveColorAnimation, RequestID) == 0x000000, "Member 'EndCharacterBase_StopEmissiveColorAnimation::RequestID' has a wrong offset!");

// Function EndGame.EndCharacterBase.StopLightAnimation
// 0x0008 (0x0008 - 0x0000)
struct EndCharacterBase_StopLightAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_StopLightAnimation) == 0x000004, "Wrong alignment on EndCharacterBase_StopLightAnimation");
static_assert(sizeof(EndCharacterBase_StopLightAnimation) == 0x000008, "Wrong size on EndCharacterBase_StopLightAnimation");
static_assert(offsetof(EndCharacterBase_StopLightAnimation, RequestID) == 0x000000, "Member 'EndCharacterBase_StopLightAnimation::RequestID' has a wrong offset!");

// Function EndGame.EndCharacterBase.StopWeaponEmissiveColorAnimation
// 0x000C (0x000C - 0x0000)
struct EndCharacterBase_StopWeaponEmissiveColorAnimation final
{
public:
	EWeaponSlot                                   Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RequestID;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_StopWeaponEmissiveColorAnimation) == 0x000004, "Wrong alignment on EndCharacterBase_StopWeaponEmissiveColorAnimation");
static_assert(sizeof(EndCharacterBase_StopWeaponEmissiveColorAnimation) == 0x00000C, "Wrong size on EndCharacterBase_StopWeaponEmissiveColorAnimation");
static_assert(offsetof(EndCharacterBase_StopWeaponEmissiveColorAnimation, Slot) == 0x000000, "Member 'EndCharacterBase_StopWeaponEmissiveColorAnimation::Slot' has a wrong offset!");
static_assert(offsetof(EndCharacterBase_StopWeaponEmissiveColorAnimation, RequestID) == 0x000004, "Member 'EndCharacterBase_StopWeaponEmissiveColorAnimation::RequestID' has a wrong offset!");

// Function EndGame.EndCharacterBase.GetFeetLocation
// 0x000C (0x000C - 0x0000)
struct EndCharacterBase_GetFeetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_GetFeetLocation) == 0x000004, "Wrong alignment on EndCharacterBase_GetFeetLocation");
static_assert(sizeof(EndCharacterBase_GetFeetLocation) == 0x00000C, "Wrong size on EndCharacterBase_GetFeetLocation");
static_assert(offsetof(EndCharacterBase_GetFeetLocation, ReturnValue) == 0x000000, "Member 'EndCharacterBase_GetFeetLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacterBase.IsActiveCoordinateAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndCharacterBase_IsActiveCoordinateAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_IsActiveCoordinateAnimation) == 0x000001, "Wrong alignment on EndCharacterBase_IsActiveCoordinateAnimation");
static_assert(sizeof(EndCharacterBase_IsActiveCoordinateAnimation) == 0x000001, "Wrong size on EndCharacterBase_IsActiveCoordinateAnimation");
static_assert(offsetof(EndCharacterBase_IsActiveCoordinateAnimation, ReturnValue) == 0x000000, "Member 'EndCharacterBase_IsActiveCoordinateAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacterBase.IsActiveEmissiveColorAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndCharacterBase_IsActiveEmissiveColorAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_IsActiveEmissiveColorAnimation) == 0x000001, "Wrong alignment on EndCharacterBase_IsActiveEmissiveColorAnimation");
static_assert(sizeof(EndCharacterBase_IsActiveEmissiveColorAnimation) == 0x000001, "Wrong size on EndCharacterBase_IsActiveEmissiveColorAnimation");
static_assert(offsetof(EndCharacterBase_IsActiveEmissiveColorAnimation, ReturnValue) == 0x000000, "Member 'EndCharacterBase_IsActiveEmissiveColorAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacterBase.IsActiveFlowMapAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndCharacterBase_IsActiveFlowMapAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_IsActiveFlowMapAnimation) == 0x000001, "Wrong alignment on EndCharacterBase_IsActiveFlowMapAnimation");
static_assert(sizeof(EndCharacterBase_IsActiveFlowMapAnimation) == 0x000001, "Wrong size on EndCharacterBase_IsActiveFlowMapAnimation");
static_assert(offsetof(EndCharacterBase_IsActiveFlowMapAnimation, ReturnValue) == 0x000000, "Member 'EndCharacterBase_IsActiveFlowMapAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacterBase.IsActiveLightAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndCharacterBase_IsActiveLightAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_IsActiveLightAnimation) == 0x000001, "Wrong alignment on EndCharacterBase_IsActiveLightAnimation");
static_assert(sizeof(EndCharacterBase_IsActiveLightAnimation) == 0x000001, "Wrong size on EndCharacterBase_IsActiveLightAnimation");
static_assert(offsetof(EndCharacterBase_IsActiveLightAnimation, ReturnValue) == 0x000000, "Member 'EndCharacterBase_IsActiveLightAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacterBase.IsPlayer
// 0x0001 (0x0001 - 0x0000)
struct EndCharacterBase_IsPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterBase_IsPlayer) == 0x000001, "Wrong alignment on EndCharacterBase_IsPlayer");
static_assert(sizeof(EndCharacterBase_IsPlayer) == 0x000001, "Wrong size on EndCharacterBase_IsPlayer");
static_assert(offsetof(EndCharacterBase_IsPlayer, ReturnValue) == 0x000000, "Member 'EndCharacterBase_IsPlayer::ReturnValue' has a wrong offset!");

// Function EndGame.EndCactusMissionMiniGameEnemyComponent.OnDead
// 0x0008 (0x0008 - 0x0000)
struct EndCactusMissionMiniGameEnemyComponent_OnDead final
{
public:
	EEndCactusMissionMiniGameEnemyType            EnemyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCactusMissionMiniGameEnemyComponent_OnDead) == 0x000004, "Wrong alignment on EndCactusMissionMiniGameEnemyComponent_OnDead");
static_assert(sizeof(EndCactusMissionMiniGameEnemyComponent_OnDead) == 0x000008, "Wrong size on EndCactusMissionMiniGameEnemyComponent_OnDead");
static_assert(offsetof(EndCactusMissionMiniGameEnemyComponent_OnDead, EnemyType) == 0x000000, "Member 'EndCactusMissionMiniGameEnemyComponent_OnDead::EnemyType' has a wrong offset!");
static_assert(offsetof(EndCactusMissionMiniGameEnemyComponent_OnDead, Score) == 0x000004, "Member 'EndCactusMissionMiniGameEnemyComponent_OnDead::Score' has a wrong offset!");

// Function EndGame.EndCactusMissionMiniGameEnemyComponent.PlayEffect
// 0x0018 (0x0018 - 0x0000)
struct EndCactusMissionMiniGameEnemyComponent_PlayEffect final
{
public:
	class FName                                   ResourceName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCactusMissionMiniGameEnemyComponent_PlayEffect) == 0x000008, "Wrong alignment on EndCactusMissionMiniGameEnemyComponent_PlayEffect");
static_assert(sizeof(EndCactusMissionMiniGameEnemyComponent_PlayEffect) == 0x000018, "Wrong size on EndCactusMissionMiniGameEnemyComponent_PlayEffect");
static_assert(offsetof(EndCactusMissionMiniGameEnemyComponent_PlayEffect, ResourceName) == 0x000000, "Member 'EndCactusMissionMiniGameEnemyComponent_PlayEffect::ResourceName' has a wrong offset!");
static_assert(offsetof(EndCactusMissionMiniGameEnemyComponent_PlayEffect, AttachActor) == 0x000008, "Member 'EndCactusMissionMiniGameEnemyComponent_PlayEffect::AttachActor' has a wrong offset!");
static_assert(offsetof(EndCactusMissionMiniGameEnemyComponent_PlayEffect, AttachSocketName) == 0x000010, "Member 'EndCactusMissionMiniGameEnemyComponent_PlayEffect::AttachSocketName' has a wrong offset!");

// Function EndGame.EndCactusMissionMiniGameEnemyComponent.GetAssetLoadLevelName
// 0x0008 (0x0008 - 0x0000)
struct EndCactusMissionMiniGameEnemyComponent_GetAssetLoadLevelName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCactusMissionMiniGameEnemyComponent_GetAssetLoadLevelName) == 0x000004, "Wrong alignment on EndCactusMissionMiniGameEnemyComponent_GetAssetLoadLevelName");
static_assert(sizeof(EndCactusMissionMiniGameEnemyComponent_GetAssetLoadLevelName) == 0x000008, "Wrong size on EndCactusMissionMiniGameEnemyComponent_GetAssetLoadLevelName");
static_assert(offsetof(EndCactusMissionMiniGameEnemyComponent_GetAssetLoadLevelName, ReturnValue) == 0x000000, "Member 'EndCactusMissionMiniGameEnemyComponent_GetAssetLoadLevelName::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldActionNavLinkActorBase.ReceiveSmartLinkReached
// 0x0018 (0x0018 - 0x0000)
struct EndFieldActionNavLinkActorBase_ReceiveSmartLinkReached final
{
public:
	class AActor*                                 Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldActionNavLinkActorBase_ReceiveSmartLinkReached) == 0x000008, "Wrong alignment on EndFieldActionNavLinkActorBase_ReceiveSmartLinkReached");
static_assert(sizeof(EndFieldActionNavLinkActorBase_ReceiveSmartLinkReached) == 0x000018, "Wrong size on EndFieldActionNavLinkActorBase_ReceiveSmartLinkReached");
static_assert(offsetof(EndFieldActionNavLinkActorBase_ReceiveSmartLinkReached, Agent) == 0x000000, "Member 'EndFieldActionNavLinkActorBase_ReceiveSmartLinkReached::Agent' has a wrong offset!");
static_assert(offsetof(EndFieldActionNavLinkActorBase_ReceiveSmartLinkReached, Destination) == 0x000008, "Member 'EndFieldActionNavLinkActorBase_ReceiveSmartLinkReached::Destination' has a wrong offset!");

// Function EndGame.EndFieldActionNavLinkActorBase.ResumePathFollowing
// 0x0008 (0x0008 - 0x0000)
struct EndFieldActionNavLinkActorBase_ResumePathFollowing final
{
public:
	class AActor*                                 Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldActionNavLinkActorBase_ResumePathFollowing) == 0x000008, "Wrong alignment on EndFieldActionNavLinkActorBase_ResumePathFollowing");
static_assert(sizeof(EndFieldActionNavLinkActorBase_ResumePathFollowing) == 0x000008, "Wrong size on EndFieldActionNavLinkActorBase_ResumePathFollowing");
static_assert(offsetof(EndFieldActionNavLinkActorBase_ResumePathFollowing, Agent) == 0x000000, "Member 'EndFieldActionNavLinkActorBase_ResumePathFollowing::Agent' has a wrong offset!");

// Function EndGame.EndFieldActionNavLinkActorBase.SetSmartLinkEnabled
// 0x0001 (0x0001 - 0x0000)
struct EndFieldActionNavLinkActorBase_SetSmartLinkEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldActionNavLinkActorBase_SetSmartLinkEnabled) == 0x000001, "Wrong alignment on EndFieldActionNavLinkActorBase_SetSmartLinkEnabled");
static_assert(sizeof(EndFieldActionNavLinkActorBase_SetSmartLinkEnabled) == 0x000001, "Wrong size on EndFieldActionNavLinkActorBase_SetSmartLinkEnabled");
static_assert(offsetof(EndFieldActionNavLinkActorBase_SetSmartLinkEnabled, bEnabled) == 0x000000, "Member 'EndFieldActionNavLinkActorBase_SetSmartLinkEnabled::bEnabled' has a wrong offset!");

// Function EndGame.EndFieldActionNavLinkActorBase.HasMovingAgents
// 0x0001 (0x0001 - 0x0000)
struct EndFieldActionNavLinkActorBase_HasMovingAgents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldActionNavLinkActorBase_HasMovingAgents) == 0x000001, "Wrong alignment on EndFieldActionNavLinkActorBase_HasMovingAgents");
static_assert(sizeof(EndFieldActionNavLinkActorBase_HasMovingAgents) == 0x000001, "Wrong size on EndFieldActionNavLinkActorBase_HasMovingAgents");
static_assert(offsetof(EndFieldActionNavLinkActorBase_HasMovingAgents, ReturnValue) == 0x000000, "Member 'EndFieldActionNavLinkActorBase_HasMovingAgents::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldActionNavLinkActorBase.IsSmartLinkEnabled
// 0x0001 (0x0001 - 0x0000)
struct EndFieldActionNavLinkActorBase_IsSmartLinkEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldActionNavLinkActorBase_IsSmartLinkEnabled) == 0x000001, "Wrong alignment on EndFieldActionNavLinkActorBase_IsSmartLinkEnabled");
static_assert(sizeof(EndFieldActionNavLinkActorBase_IsSmartLinkEnabled) == 0x000001, "Wrong size on EndFieldActionNavLinkActorBase_IsSmartLinkEnabled");
static_assert(offsetof(EndFieldActionNavLinkActorBase_IsSmartLinkEnabled, ReturnValue) == 0x000000, "Member 'EndFieldActionNavLinkActorBase_IsSmartLinkEnabled::ReturnValue' has a wrong offset!");

// Function EndGame.EndBikeControllerBase.GetCreateFieldPosition
// 0x0024 (0x0024 - 0x0000)
struct EndBikeControllerBase_GetCreateFieldPosition final
{
public:
	struct FVector                                OutPosition;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBattleAbilityID;                                 // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAnimationName;                                   // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeControllerBase_GetCreateFieldPosition) == 0x000004, "Wrong alignment on EndBikeControllerBase_GetCreateFieldPosition");
static_assert(sizeof(EndBikeControllerBase_GetCreateFieldPosition) == 0x000024, "Wrong size on EndBikeControllerBase_GetCreateFieldPosition");
static_assert(offsetof(EndBikeControllerBase_GetCreateFieldPosition, OutPosition) == 0x000000, "Member 'EndBikeControllerBase_GetCreateFieldPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(EndBikeControllerBase_GetCreateFieldPosition, InBattleAbilityID) == 0x00000C, "Member 'EndBikeControllerBase_GetCreateFieldPosition::InBattleAbilityID' has a wrong offset!");
static_assert(offsetof(EndBikeControllerBase_GetCreateFieldPosition, InDamageSourceID) == 0x000014, "Member 'EndBikeControllerBase_GetCreateFieldPosition::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBikeControllerBase_GetCreateFieldPosition, InAnimationName) == 0x00001C, "Member 'EndBikeControllerBase_GetCreateFieldPosition::InAnimationName' has a wrong offset!");

// Function EndGame.EndBikeControllerBase.GetTargetFieldPosition
// 0x0024 (0x0024 - 0x0000)
struct EndBikeControllerBase_GetTargetFieldPosition final
{
public:
	struct FVector                                OutPosition;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBattleAbilityID;                                 // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAnimationName;                                   // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeControllerBase_GetTargetFieldPosition) == 0x000004, "Wrong alignment on EndBikeControllerBase_GetTargetFieldPosition");
static_assert(sizeof(EndBikeControllerBase_GetTargetFieldPosition) == 0x000024, "Wrong size on EndBikeControllerBase_GetTargetFieldPosition");
static_assert(offsetof(EndBikeControllerBase_GetTargetFieldPosition, OutPosition) == 0x000000, "Member 'EndBikeControllerBase_GetTargetFieldPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(EndBikeControllerBase_GetTargetFieldPosition, InBattleAbilityID) == 0x00000C, "Member 'EndBikeControllerBase_GetTargetFieldPosition::InBattleAbilityID' has a wrong offset!");
static_assert(offsetof(EndBikeControllerBase_GetTargetFieldPosition, InDamageSourceID) == 0x000014, "Member 'EndBikeControllerBase_GetTargetFieldPosition::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBikeControllerBase_GetTargetFieldPosition, InAnimationName) == 0x00001C, "Member 'EndBikeControllerBase_GetTargetFieldPosition::InAnimationName' has a wrong offset!");

// Function EndGame.EndBikeDamageSourceComponent.GetDir
// 0x000C (0x000C - 0x0000)
struct EndBikeDamageSourceComponent_GetDir final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeDamageSourceComponent_GetDir) == 0x000004, "Wrong alignment on EndBikeDamageSourceComponent_GetDir");
static_assert(sizeof(EndBikeDamageSourceComponent_GetDir) == 0x00000C, "Wrong size on EndBikeDamageSourceComponent_GetDir");
static_assert(offsetof(EndBikeDamageSourceComponent_GetDir, ReturnValue) == 0x000000, "Member 'EndBikeDamageSourceComponent_GetDir::ReturnValue' has a wrong offset!");

// Function EndGame.EndBikePlayerControllerShootingGame.GetAimLocation
// 0x000C (0x000C - 0x0000)
struct EndBikePlayerControllerShootingGame_GetAimLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikePlayerControllerShootingGame_GetAimLocation) == 0x000004, "Wrong alignment on EndBikePlayerControllerShootingGame_GetAimLocation");
static_assert(sizeof(EndBikePlayerControllerShootingGame_GetAimLocation) == 0x00000C, "Wrong size on EndBikePlayerControllerShootingGame_GetAimLocation");
static_assert(offsetof(EndBikePlayerControllerShootingGame_GetAimLocation, ReturnValue) == 0x000000, "Member 'EndBikePlayerControllerShootingGame_GetAimLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.AddToOffscreen
// 0x0004 (0x0004 - 0x0000)
struct EndUserWidget_AddToOffscreen final
{
public:
	int32                                         ZOrder;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_AddToOffscreen) == 0x000004, "Wrong alignment on EndUserWidget_AddToOffscreen");
static_assert(sizeof(EndUserWidget_AddToOffscreen) == 0x000004, "Wrong size on EndUserWidget_AddToOffscreen");
static_assert(offsetof(EndUserWidget_AddToOffscreen, ZOrder) == 0x000000, "Member 'EndUserWidget_AddToOffscreen::ZOrder' has a wrong offset!");

// Function EndGame.EndUserWidget.AddToPlayerScreenEx
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_AddToPlayerScreenEx final
{
public:
	int32                                         ZOrder;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_AddToPlayerScreenEx) == 0x000004, "Wrong alignment on EndUserWidget_AddToPlayerScreenEx");
static_assert(sizeof(EndUserWidget_AddToPlayerScreenEx) == 0x000008, "Wrong size on EndUserWidget_AddToPlayerScreenEx");
static_assert(offsetof(EndUserWidget_AddToPlayerScreenEx, ZOrder) == 0x000000, "Member 'EndUserWidget_AddToPlayerScreenEx::ZOrder' has a wrong offset!");
static_assert(offsetof(EndUserWidget_AddToPlayerScreenEx, ReturnValue) == 0x000004, "Member 'EndUserWidget_AddToPlayerScreenEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.AddToScene
// 0x0018 (0x0018 - 0x0000)
struct EndUserWidget_AddToScene final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_AddToScene) == 0x000004, "Wrong alignment on EndUserWidget_AddToScene");
static_assert(sizeof(EndUserWidget_AddToScene) == 0x000018, "Wrong size on EndUserWidget_AddToScene");
static_assert(offsetof(EndUserWidget_AddToScene, InLocation) == 0x000000, "Member 'EndUserWidget_AddToScene::InLocation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_AddToScene, InRotation) == 0x00000C, "Member 'EndUserWidget_AddToScene::InRotation' has a wrong offset!");

// Function EndGame.EndUserWidget.AddToViewportEx
// 0x0004 (0x0004 - 0x0000)
struct EndUserWidget_AddToViewportEx final
{
public:
	int32                                         ZOrder;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_AddToViewportEx) == 0x000004, "Wrong alignment on EndUserWidget_AddToViewportEx");
static_assert(sizeof(EndUserWidget_AddToViewportEx) == 0x000004, "Wrong size on EndUserWidget_AddToViewportEx");
static_assert(offsetof(EndUserWidget_AddToViewportEx, ZOrder) == 0x000000, "Member 'EndUserWidget_AddToViewportEx::ZOrder' has a wrong offset!");

// Function EndGame.EndUserWidget.IsAnimationPlayingForwardByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_IsAnimationPlayingForwardByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_IsAnimationPlayingForwardByName) == 0x000004, "Wrong alignment on EndUserWidget_IsAnimationPlayingForwardByName");
static_assert(sizeof(EndUserWidget_IsAnimationPlayingForwardByName) == 0x00000C, "Wrong size on EndUserWidget_IsAnimationPlayingForwardByName");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingForwardByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_IsAnimationPlayingForwardByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingForwardByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_IsAnimationPlayingForwardByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsAnimationPlayingForwardEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_IsAnimationPlayingForwardEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_IsAnimationPlayingForwardEx) == 0x000008, "Wrong alignment on EndUserWidget_IsAnimationPlayingForwardEx");
static_assert(sizeof(EndUserWidget_IsAnimationPlayingForwardEx) == 0x000010, "Wrong size on EndUserWidget_IsAnimationPlayingForwardEx");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingForwardEx, InAnimation) == 0x000000, "Member 'EndUserWidget_IsAnimationPlayingForwardEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingForwardEx, ReturnValue) == 0x000008, "Member 'EndUserWidget_IsAnimationPlayingForwardEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.PauseAnimationByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_PauseAnimationByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_PauseAnimationByName) == 0x000004, "Wrong alignment on EndUserWidget_PauseAnimationByName");
static_assert(sizeof(EndUserWidget_PauseAnimationByName) == 0x00000C, "Wrong size on EndUserWidget_PauseAnimationByName");
static_assert(offsetof(EndUserWidget_PauseAnimationByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_PauseAnimationByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PauseAnimationByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_PauseAnimationByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.PauseAnimationEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_PauseAnimationEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_PauseAnimationEx) == 0x000008, "Wrong alignment on EndUserWidget_PauseAnimationEx");
static_assert(sizeof(EndUserWidget_PauseAnimationEx) == 0x000010, "Wrong size on EndUserWidget_PauseAnimationEx");
static_assert(offsetof(EndUserWidget_PauseAnimationEx, InAnimation) == 0x000000, "Member 'EndUserWidget_PauseAnimationEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PauseAnimationEx, ReturnValue) == 0x000008, "Member 'EndUserWidget_PauseAnimationEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.PlayAnimationByName
// 0x001C (0x001C - 0x0000)
struct EndUserWidget_PlayAnimationByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_PlayAnimationByName) == 0x000004, "Wrong alignment on EndUserWidget_PlayAnimationByName");
static_assert(sizeof(EndUserWidget_PlayAnimationByName) == 0x00001C, "Wrong size on EndUserWidget_PlayAnimationByName");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_PlayAnimationByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, StartAtTime) == 0x000008, "Member 'EndUserWidget_PlayAnimationByName::StartAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, NumLoopsToPlay) == 0x00000C, "Member 'EndUserWidget_PlayAnimationByName::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, PlayMode) == 0x000010, "Member 'EndUserWidget_PlayAnimationByName::PlayMode' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, PlaybackSpeed) == 0x000014, "Member 'EndUserWidget_PlayAnimationByName::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, ReturnValue) == 0x000018, "Member 'EndUserWidget_PlayAnimationByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.PlayAnimationEx
// 0x0018 (0x0018 - 0x0000)
struct EndUserWidget_PlayAnimationEx final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_PlayAnimationEx) == 0x000008, "Wrong alignment on EndUserWidget_PlayAnimationEx");
static_assert(sizeof(EndUserWidget_PlayAnimationEx) == 0x000018, "Wrong size on EndUserWidget_PlayAnimationEx");
static_assert(offsetof(EndUserWidget_PlayAnimationEx, InAnimation) == 0x000000, "Member 'EndUserWidget_PlayAnimationEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationEx, StartAtTime) == 0x000008, "Member 'EndUserWidget_PlayAnimationEx::StartAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationEx, NumLoopsToPlay) == 0x00000C, "Member 'EndUserWidget_PlayAnimationEx::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationEx, PlayMode) == 0x000010, "Member 'EndUserWidget_PlayAnimationEx::PlayMode' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationEx, PlaybackSpeed) == 0x000014, "Member 'EndUserWidget_PlayAnimationEx::PlaybackSpeed' has a wrong offset!");

// Function EndGame.EndUserWidget.PlayAnimationExAutoReverse
// 0x0020 (0x0020 - 0x0000)
struct EndUserWidget_PlayAnimationExAutoReverse final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseSpeed;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_PlayAnimationExAutoReverse) == 0x000008, "Wrong alignment on EndUserWidget_PlayAnimationExAutoReverse");
static_assert(sizeof(EndUserWidget_PlayAnimationExAutoReverse) == 0x000020, "Wrong size on EndUserWidget_PlayAnimationExAutoReverse");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, InAnimation) == 0x000000, "Member 'EndUserWidget_PlayAnimationExAutoReverse::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, StartAtTime) == 0x000008, "Member 'EndUserWidget_PlayAnimationExAutoReverse::StartAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, NumLoopsToPlay) == 0x00000C, "Member 'EndUserWidget_PlayAnimationExAutoReverse::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, PlayMode) == 0x000010, "Member 'EndUserWidget_PlayAnimationExAutoReverse::PlayMode' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, PlaybackSpeed) == 0x000014, "Member 'EndUserWidget_PlayAnimationExAutoReverse::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, ReverseSpeed) == 0x000018, "Member 'EndUserWidget_PlayAnimationExAutoReverse::ReverseSpeed' has a wrong offset!");

// Function EndGame.EndUserWidget.PlayAnimationToByName
// 0x0020 (0x0020 - 0x0000)
struct EndUserWidget_PlayAnimationToByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAtTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_PlayAnimationToByName) == 0x000004, "Wrong alignment on EndUserWidget_PlayAnimationToByName");
static_assert(sizeof(EndUserWidget_PlayAnimationToByName) == 0x000020, "Wrong size on EndUserWidget_PlayAnimationToByName");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_PlayAnimationToByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, StartAtTime) == 0x000008, "Member 'EndUserWidget_PlayAnimationToByName::StartAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, EndAtTime) == 0x00000C, "Member 'EndUserWidget_PlayAnimationToByName::EndAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, NumLoopsToPlay) == 0x000010, "Member 'EndUserWidget_PlayAnimationToByName::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, PlayMode) == 0x000014, "Member 'EndUserWidget_PlayAnimationToByName::PlayMode' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, PlaybackSpeed) == 0x000018, "Member 'EndUserWidget_PlayAnimationToByName::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, ReturnValue) == 0x00001C, "Member 'EndUserWidget_PlayAnimationToByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.PlayAnimationToEx
// 0x0020 (0x0020 - 0x0000)
struct EndUserWidget_PlayAnimationToEx final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAtTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_PlayAnimationToEx) == 0x000008, "Wrong alignment on EndUserWidget_PlayAnimationToEx");
static_assert(sizeof(EndUserWidget_PlayAnimationToEx) == 0x000020, "Wrong size on EndUserWidget_PlayAnimationToEx");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, InAnimation) == 0x000000, "Member 'EndUserWidget_PlayAnimationToEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, StartAtTime) == 0x000008, "Member 'EndUserWidget_PlayAnimationToEx::StartAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, EndAtTime) == 0x00000C, "Member 'EndUserWidget_PlayAnimationToEx::EndAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, NumLoopsToPlay) == 0x000010, "Member 'EndUserWidget_PlayAnimationToEx::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, PlayMode) == 0x000014, "Member 'EndUserWidget_PlayAnimationToEx::PlayMode' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, PlaybackSpeed) == 0x000018, "Member 'EndUserWidget_PlayAnimationToEx::PlaybackSpeed' has a wrong offset!");

// Function EndGame.EndUserWidget.ReverseAnimationByName
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_ReverseAnimationByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_ReverseAnimationByName) == 0x000004, "Wrong alignment on EndUserWidget_ReverseAnimationByName");
static_assert(sizeof(EndUserWidget_ReverseAnimationByName) == 0x000008, "Wrong size on EndUserWidget_ReverseAnimationByName");
static_assert(offsetof(EndUserWidget_ReverseAnimationByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_ReverseAnimationByName::InAnimationName' has a wrong offset!");

// Function EndGame.EndUserWidget.ReverseAnimationEx
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_ReverseAnimationEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_ReverseAnimationEx) == 0x000008, "Wrong alignment on EndUserWidget_ReverseAnimationEx");
static_assert(sizeof(EndUserWidget_ReverseAnimationEx) == 0x000008, "Wrong size on EndUserWidget_ReverseAnimationEx");
static_assert(offsetof(EndUserWidget_ReverseAnimationEx, InAnimation) == 0x000000, "Member 'EndUserWidget_ReverseAnimationEx::InAnimation' has a wrong offset!");

// Function EndGame.EndUserWidget.SetFocusToChild
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_SetFocusToChild final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFocusCause                                   InFocusCause;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_SetFocusToChild) == 0x000008, "Wrong alignment on EndUserWidget_SetFocusToChild");
static_assert(sizeof(EndUserWidget_SetFocusToChild) == 0x000010, "Wrong size on EndUserWidget_SetFocusToChild");
static_assert(offsetof(EndUserWidget_SetFocusToChild, InWidget) == 0x000000, "Member 'EndUserWidget_SetFocusToChild::InWidget' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetFocusToChild, InFocusCause) == 0x000008, "Member 'EndUserWidget_SetFocusToChild::InFocusCause' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetFocusToChild, ReturnValue) == 0x000009, "Member 'EndUserWidget_SetFocusToChild::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.SetLocationInScene
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_SetLocationInScene final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_SetLocationInScene) == 0x000004, "Wrong alignment on EndUserWidget_SetLocationInScene");
static_assert(sizeof(EndUserWidget_SetLocationInScene) == 0x00000C, "Wrong size on EndUserWidget_SetLocationInScene");
static_assert(offsetof(EndUserWidget_SetLocationInScene, InLocation) == 0x000000, "Member 'EndUserWidget_SetLocationInScene::InLocation' has a wrong offset!");

// Function EndGame.EndUserWidget.SetNumLoopsToPlayByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_SetNumLoopsToPlayByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_SetNumLoopsToPlayByName) == 0x000004, "Wrong alignment on EndUserWidget_SetNumLoopsToPlayByName");
static_assert(sizeof(EndUserWidget_SetNumLoopsToPlayByName) == 0x00000C, "Wrong size on EndUserWidget_SetNumLoopsToPlayByName");
static_assert(offsetof(EndUserWidget_SetNumLoopsToPlayByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_SetNumLoopsToPlayByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetNumLoopsToPlayByName, NumLoopsToPlay) == 0x000008, "Member 'EndUserWidget_SetNumLoopsToPlayByName::NumLoopsToPlay' has a wrong offset!");

// Function EndGame.EndUserWidget.SetNumLoopsToPlayEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_SetNumLoopsToPlayEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_SetNumLoopsToPlayEx) == 0x000008, "Wrong alignment on EndUserWidget_SetNumLoopsToPlayEx");
static_assert(sizeof(EndUserWidget_SetNumLoopsToPlayEx) == 0x000010, "Wrong size on EndUserWidget_SetNumLoopsToPlayEx");
static_assert(offsetof(EndUserWidget_SetNumLoopsToPlayEx, InAnimation) == 0x000000, "Member 'EndUserWidget_SetNumLoopsToPlayEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetNumLoopsToPlayEx, NumLoopsToPlay) == 0x000008, "Member 'EndUserWidget_SetNumLoopsToPlayEx::NumLoopsToPlay' has a wrong offset!");

// Function EndGame.EndUserWidget.SetPlaybackSpeedByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_SetPlaybackSpeedByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackSpeed;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_SetPlaybackSpeedByName) == 0x000004, "Wrong alignment on EndUserWidget_SetPlaybackSpeedByName");
static_assert(sizeof(EndUserWidget_SetPlaybackSpeedByName) == 0x00000C, "Wrong size on EndUserWidget_SetPlaybackSpeedByName");
static_assert(offsetof(EndUserWidget_SetPlaybackSpeedByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_SetPlaybackSpeedByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetPlaybackSpeedByName, PlaybackSpeed) == 0x000008, "Member 'EndUserWidget_SetPlaybackSpeedByName::PlaybackSpeed' has a wrong offset!");

// Function EndGame.EndUserWidget.SetPlaybackSpeedEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_SetPlaybackSpeedEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackSpeed;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_SetPlaybackSpeedEx) == 0x000008, "Wrong alignment on EndUserWidget_SetPlaybackSpeedEx");
static_assert(sizeof(EndUserWidget_SetPlaybackSpeedEx) == 0x000010, "Wrong size on EndUserWidget_SetPlaybackSpeedEx");
static_assert(offsetof(EndUserWidget_SetPlaybackSpeedEx, InAnimation) == 0x000000, "Member 'EndUserWidget_SetPlaybackSpeedEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetPlaybackSpeedEx, PlaybackSpeed) == 0x000008, "Member 'EndUserWidget_SetPlaybackSpeedEx::PlaybackSpeed' has a wrong offset!");

// Function EndGame.EndUserWidget.SetRotationInScene
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_SetRotationInScene final
{
public:
	struct FRotator                               InRotation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_SetRotationInScene) == 0x000004, "Wrong alignment on EndUserWidget_SetRotationInScene");
static_assert(sizeof(EndUserWidget_SetRotationInScene) == 0x00000C, "Wrong size on EndUserWidget_SetRotationInScene");
static_assert(offsetof(EndUserWidget_SetRotationInScene, InRotation) == 0x000000, "Member 'EndUserWidget_SetRotationInScene::InRotation' has a wrong offset!");

// Function EndGame.EndUserWidget.SetZOrderInViewport
// 0x0004 (0x0004 - 0x0000)
struct EndUserWidget_SetZOrderInViewport final
{
public:
	int32                                         InZOrder;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_SetZOrderInViewport) == 0x000004, "Wrong alignment on EndUserWidget_SetZOrderInViewport");
static_assert(sizeof(EndUserWidget_SetZOrderInViewport) == 0x000004, "Wrong size on EndUserWidget_SetZOrderInViewport");
static_assert(offsetof(EndUserWidget_SetZOrderInViewport, InZOrder) == 0x000000, "Member 'EndUserWidget_SetZOrderInViewport::InZOrder' has a wrong offset!");

// Function EndGame.EndUserWidget.StopAnimationByName
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_StopAnimationByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_StopAnimationByName) == 0x000004, "Wrong alignment on EndUserWidget_StopAnimationByName");
static_assert(sizeof(EndUserWidget_StopAnimationByName) == 0x000008, "Wrong size on EndUserWidget_StopAnimationByName");
static_assert(offsetof(EndUserWidget_StopAnimationByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_StopAnimationByName::InAnimationName' has a wrong offset!");

// Function EndGame.EndUserWidget.StopAnimationEx
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_StopAnimationEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_StopAnimationEx) == 0x000008, "Wrong alignment on EndUserWidget_StopAnimationEx");
static_assert(sizeof(EndUserWidget_StopAnimationEx) == 0x000008, "Wrong size on EndUserWidget_StopAnimationEx");
static_assert(offsetof(EndUserWidget_StopAnimationEx, InAnimation) == 0x000000, "Member 'EndUserWidget_StopAnimationEx::InAnimation' has a wrong offset!");

// Function EndGame.EndUserWidget.GetAnimationCurrentTimeByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_GetAnimationCurrentTimeByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetAnimationCurrentTimeByName) == 0x000004, "Wrong alignment on EndUserWidget_GetAnimationCurrentTimeByName");
static_assert(sizeof(EndUserWidget_GetAnimationCurrentTimeByName) == 0x00000C, "Wrong size on EndUserWidget_GetAnimationCurrentTimeByName");
static_assert(offsetof(EndUserWidget_GetAnimationCurrentTimeByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_GetAnimationCurrentTimeByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_GetAnimationCurrentTimeByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_GetAnimationCurrentTimeByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetAnimationCurrentTimeEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_GetAnimationCurrentTimeEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_GetAnimationCurrentTimeEx) == 0x000008, "Wrong alignment on EndUserWidget_GetAnimationCurrentTimeEx");
static_assert(sizeof(EndUserWidget_GetAnimationCurrentTimeEx) == 0x000010, "Wrong size on EndUserWidget_GetAnimationCurrentTimeEx");
static_assert(offsetof(EndUserWidget_GetAnimationCurrentTimeEx, InAnimation) == 0x000000, "Member 'EndUserWidget_GetAnimationCurrentTimeEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_GetAnimationCurrentTimeEx, ReturnValue) == 0x000008, "Member 'EndUserWidget_GetAnimationCurrentTimeEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetAnimationEndTimeByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_GetAnimationEndTimeByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetAnimationEndTimeByName) == 0x000004, "Wrong alignment on EndUserWidget_GetAnimationEndTimeByName");
static_assert(sizeof(EndUserWidget_GetAnimationEndTimeByName) == 0x00000C, "Wrong size on EndUserWidget_GetAnimationEndTimeByName");
static_assert(offsetof(EndUserWidget_GetAnimationEndTimeByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_GetAnimationEndTimeByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_GetAnimationEndTimeByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_GetAnimationEndTimeByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetAnimationStartTimeByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_GetAnimationStartTimeByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetAnimationStartTimeByName) == 0x000004, "Wrong alignment on EndUserWidget_GetAnimationStartTimeByName");
static_assert(sizeof(EndUserWidget_GetAnimationStartTimeByName) == 0x00000C, "Wrong size on EndUserWidget_GetAnimationStartTimeByName");
static_assert(offsetof(EndUserWidget_GetAnimationStartTimeByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_GetAnimationStartTimeByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_GetAnimationStartTimeByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_GetAnimationStartTimeByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetFocusedChildWidget
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_GetFocusedChildWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetFocusedChildWidget) == 0x000008, "Wrong alignment on EndUserWidget_GetFocusedChildWidget");
static_assert(sizeof(EndUserWidget_GetFocusedChildWidget) == 0x000008, "Wrong size on EndUserWidget_GetFocusedChildWidget");
static_assert(offsetof(EndUserWidget_GetFocusedChildWidget, ReturnValue) == 0x000000, "Member 'EndUserWidget_GetFocusedChildWidget::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetLocationInScene
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_GetLocationInScene final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetLocationInScene) == 0x000004, "Wrong alignment on EndUserWidget_GetLocationInScene");
static_assert(sizeof(EndUserWidget_GetLocationInScene) == 0x00000C, "Wrong size on EndUserWidget_GetLocationInScene");
static_assert(offsetof(EndUserWidget_GetLocationInScene, ReturnValue) == 0x000000, "Member 'EndUserWidget_GetLocationInScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetRotationInScene
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_GetRotationInScene final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetRotationInScene) == 0x000004, "Wrong alignment on EndUserWidget_GetRotationInScene");
static_assert(sizeof(EndUserWidget_GetRotationInScene) == 0x00000C, "Wrong size on EndUserWidget_GetRotationInScene");
static_assert(offsetof(EndUserWidget_GetRotationInScene, ReturnValue) == 0x000000, "Member 'EndUserWidget_GetRotationInScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetZOrderInViewport
// 0x0004 (0x0004 - 0x0000)
struct EndUserWidget_GetZOrderInViewport final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetZOrderInViewport) == 0x000004, "Wrong alignment on EndUserWidget_GetZOrderInViewport");
static_assert(sizeof(EndUserWidget_GetZOrderInViewport) == 0x000004, "Wrong size on EndUserWidget_GetZOrderInViewport");
static_assert(offsetof(EndUserWidget_GetZOrderInViewport, ReturnValue) == 0x000000, "Member 'EndUserWidget_GetZOrderInViewport::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsAnimationPlayingByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_IsAnimationPlayingByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_IsAnimationPlayingByName) == 0x000004, "Wrong alignment on EndUserWidget_IsAnimationPlayingByName");
static_assert(sizeof(EndUserWidget_IsAnimationPlayingByName) == 0x00000C, "Wrong size on EndUserWidget_IsAnimationPlayingByName");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_IsAnimationPlayingByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_IsAnimationPlayingByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsAnimationPlayingEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_IsAnimationPlayingEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_IsAnimationPlayingEx) == 0x000008, "Wrong alignment on EndUserWidget_IsAnimationPlayingEx");
static_assert(sizeof(EndUserWidget_IsAnimationPlayingEx) == 0x000010, "Wrong size on EndUserWidget_IsAnimationPlayingEx");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingEx, InAnimation) == 0x000000, "Member 'EndUserWidget_IsAnimationPlayingEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingEx, ReturnValue) == 0x000008, "Member 'EndUserWidget_IsAnimationPlayingEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsAnyAnimationPlayingEx
// 0x0001 (0x0001 - 0x0000)
struct EndUserWidget_IsAnyAnimationPlayingEx final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_IsAnyAnimationPlayingEx) == 0x000001, "Wrong alignment on EndUserWidget_IsAnyAnimationPlayingEx");
static_assert(sizeof(EndUserWidget_IsAnyAnimationPlayingEx) == 0x000001, "Wrong size on EndUserWidget_IsAnyAnimationPlayingEx");
static_assert(offsetof(EndUserWidget_IsAnyAnimationPlayingEx, ReturnValue) == 0x000000, "Member 'EndUserWidget_IsAnyAnimationPlayingEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsInViewportEx
// 0x0001 (0x0001 - 0x0000)
struct EndUserWidget_IsInViewportEx final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_IsInViewportEx) == 0x000001, "Wrong alignment on EndUserWidget_IsInViewportEx");
static_assert(sizeof(EndUserWidget_IsInViewportEx) == 0x000001, "Wrong size on EndUserWidget_IsInViewportEx");
static_assert(offsetof(EndUserWidget_IsInViewportEx, ReturnValue) == 0x000000, "Member 'EndUserWidget_IsInViewportEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsPlayingAnimationEx
// 0x0001 (0x0001 - 0x0000)
struct EndUserWidget_IsPlayingAnimationEx final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_IsPlayingAnimationEx) == 0x000001, "Wrong alignment on EndUserWidget_IsPlayingAnimationEx");
static_assert(sizeof(EndUserWidget_IsPlayingAnimationEx) == 0x000001, "Wrong size on EndUserWidget_IsPlayingAnimationEx");
static_assert(offsetof(EndUserWidget_IsPlayingAnimationEx, ReturnValue) == 0x000000, "Member 'EndUserWidget_IsPlayingAnimationEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsPlayingAnimationIgnoreStopped
// 0x0001 (0x0001 - 0x0000)
struct EndUserWidget_IsPlayingAnimationIgnoreStopped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_IsPlayingAnimationIgnoreStopped) == 0x000001, "Wrong alignment on EndUserWidget_IsPlayingAnimationIgnoreStopped");
static_assert(sizeof(EndUserWidget_IsPlayingAnimationIgnoreStopped) == 0x000001, "Wrong size on EndUserWidget_IsPlayingAnimationIgnoreStopped");
static_assert(offsetof(EndUserWidget_IsPlayingAnimationIgnoreStopped, ReturnValue) == 0x000000, "Member 'EndUserWidget_IsPlayingAnimationIgnoreStopped::ReturnValue' has a wrong offset!");

// Function EndGame.EndCardUnitList.OnPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndCardUnitList_OnPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardUnitList_OnPressedItem) == 0x000004, "Wrong alignment on EndCardUnitList_OnPressedItem");
static_assert(sizeof(EndCardUnitList_OnPressedItem) == 0x000004, "Wrong size on EndCardUnitList_OnPressedItem");
static_assert(offsetof(EndCardUnitList_OnPressedItem, CellIndex) == 0x000000, "Member 'EndCardUnitList_OnPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndCardUnitList.OnSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndCardUnitList_OnSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardUnitList_OnSelectedIndexChanged) == 0x000004, "Wrong alignment on EndCardUnitList_OnSelectedIndexChanged");
static_assert(sizeof(EndCardUnitList_OnSelectedIndexChanged) == 0x000004, "Wrong size on EndCardUnitList_OnSelectedIndexChanged");
static_assert(offsetof(EndCardUnitList_OnSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndCardUnitList_OnSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndCardUnitList.OnSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCardUnitList_OnSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCardUnitList_OnSetupItem) == 0x000008, "Wrong alignment on EndCardUnitList_OnSetupItem");
static_assert(sizeof(EndCardUnitList_OnSetupItem) == 0x000010, "Wrong size on EndCardUnitList_OnSetupItem");
static_assert(offsetof(EndCardUnitList_OnSetupItem, ItemWidget) == 0x000000, "Member 'EndCardUnitList_OnSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCardUnitList_OnSetupItem, CellIndex) == 0x000008, "Member 'EndCardUnitList_OnSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndCharacterAnimInstance.GetLocomotionAnimGroupFromCache
// 0x0002 (0x0002 - 0x0000)
struct EndCharacterAnimInstance_GetLocomotionAnimGroupFromCache final
{
public:
	EEndLocomotionState                           LocomotionState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionAnimGroup                       ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacterAnimInstance_GetLocomotionAnimGroupFromCache) == 0x000001, "Wrong alignment on EndCharacterAnimInstance_GetLocomotionAnimGroupFromCache");
static_assert(sizeof(EndCharacterAnimInstance_GetLocomotionAnimGroupFromCache) == 0x000002, "Wrong size on EndCharacterAnimInstance_GetLocomotionAnimGroupFromCache");
static_assert(offsetof(EndCharacterAnimInstance_GetLocomotionAnimGroupFromCache, LocomotionState) == 0x000000, "Member 'EndCharacterAnimInstance_GetLocomotionAnimGroupFromCache::LocomotionState' has a wrong offset!");
static_assert(offsetof(EndCharacterAnimInstance_GetLocomotionAnimGroupFromCache, ReturnValue) == 0x000001, "Member 'EndCharacterAnimInstance_GetLocomotionAnimGroupFromCache::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartySetSwitch.OnPartySetMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndPartySetSwitch_OnPartySetMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartySetSwitch_OnPartySetMeasureItem) == 0x000004, "Wrong alignment on EndPartySetSwitch_OnPartySetMeasureItem");
static_assert(sizeof(EndPartySetSwitch_OnPartySetMeasureItem) == 0x00000C, "Wrong size on EndPartySetSwitch_OnPartySetMeasureItem");
static_assert(offsetof(EndPartySetSwitch_OnPartySetMeasureItem, CellIndex) == 0x000000, "Member 'EndPartySetSwitch_OnPartySetMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndPartySetSwitch_OnPartySetMeasureItem, ReturnValue) == 0x000004, "Member 'EndPartySetSwitch_OnPartySetMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartySetSwitch.OnPartySetSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndPartySetSwitch_OnPartySetSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartySetSwitch_OnPartySetSelectedIndexChanged) == 0x000004, "Wrong alignment on EndPartySetSwitch_OnPartySetSelectedIndexChanged");
static_assert(sizeof(EndPartySetSwitch_OnPartySetSelectedIndexChanged) == 0x000004, "Wrong size on EndPartySetSwitch_OnPartySetSelectedIndexChanged");
static_assert(offsetof(EndPartySetSwitch_OnPartySetSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndPartySetSwitch_OnPartySetSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndPartySetSwitch.OnPartySetSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndPartySetSwitch_OnPartySetSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPartySetSwitch_OnPartySetSetupItem) == 0x000008, "Wrong alignment on EndPartySetSwitch_OnPartySetSetupItem");
static_assert(sizeof(EndPartySetSwitch_OnPartySetSetupItem) == 0x000010, "Wrong size on EndPartySetSwitch_OnPartySetSetupItem");
static_assert(offsetof(EndPartySetSwitch_OnPartySetSetupItem, ItemWidget) == 0x000000, "Member 'EndPartySetSwitch_OnPartySetSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndPartySetSwitch_OnPartySetSetupItem, CellIndex) == 0x000008, "Member 'EndPartySetSwitch_OnPartySetSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStreamingVolume.EnableStreamingVolume
// 0x0001 (0x0001 - 0x0000)
struct EndStreamingVolume_EnableStreamingVolume final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStreamingVolume_EnableStreamingVolume) == 0x000001, "Wrong alignment on EndStreamingVolume_EnableStreamingVolume");
static_assert(sizeof(EndStreamingVolume_EnableStreamingVolume) == 0x000001, "Wrong size on EndStreamingVolume_EnableStreamingVolume");
static_assert(offsetof(EndStreamingVolume_EnableStreamingVolume, bEnable) == 0x000000, "Member 'EndStreamingVolume_EnableStreamingVolume::bEnable' has a wrong offset!");

// Function EndGame.EndStreamingVolume.ShowHideInsteadLevels
// 0x0002 (0x0002 - 0x0000)
struct EndStreamingVolume_ShowHideInsteadLevels final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideDrawOnly;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStreamingVolume_ShowHideInsteadLevels) == 0x000001, "Wrong alignment on EndStreamingVolume_ShowHideInsteadLevels");
static_assert(sizeof(EndStreamingVolume_ShowHideInsteadLevels) == 0x000002, "Wrong size on EndStreamingVolume_ShowHideInsteadLevels");
static_assert(offsetof(EndStreamingVolume_ShowHideInsteadLevels, bShow) == 0x000000, "Member 'EndStreamingVolume_ShowHideInsteadLevels::bShow' has a wrong offset!");
static_assert(offsetof(EndStreamingVolume_ShowHideInsteadLevels, bHideDrawOnly) == 0x000001, "Member 'EndStreamingVolume_ShowHideInsteadLevels::bHideDrawOnly' has a wrong offset!");

// Function EndGame.EndStreamingVolume.ShowHideStreamingLevels
// 0x0002 (0x0002 - 0x0000)
struct EndStreamingVolume_ShowHideStreamingLevels final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideDrawOnly;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStreamingVolume_ShowHideStreamingLevels) == 0x000001, "Wrong alignment on EndStreamingVolume_ShowHideStreamingLevels");
static_assert(sizeof(EndStreamingVolume_ShowHideStreamingLevels) == 0x000002, "Wrong size on EndStreamingVolume_ShowHideStreamingLevels");
static_assert(offsetof(EndStreamingVolume_ShowHideStreamingLevels, bShow) == 0x000000, "Member 'EndStreamingVolume_ShowHideStreamingLevels::bShow' has a wrong offset!");
static_assert(offsetof(EndStreamingVolume_ShowHideStreamingLevels, bHideDrawOnly) == 0x000001, "Member 'EndStreamingVolume_ShowHideStreamingLevels::bHideDrawOnly' has a wrong offset!");

// Function EndGame.EndStreamingVolume.WaitLoadingStreamingLevels
// 0x0028 (0x0028 - 0x0000)
struct EndStreamingVolume_WaitLoadingStreamingLevels final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          NoErrMsg;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStreamingVolume_WaitLoadingStreamingLevels) == 0x000008, "Wrong alignment on EndStreamingVolume_WaitLoadingStreamingLevels");
static_assert(sizeof(EndStreamingVolume_WaitLoadingStreamingLevels) == 0x000028, "Wrong size on EndStreamingVolume_WaitLoadingStreamingLevels");
static_assert(offsetof(EndStreamingVolume_WaitLoadingStreamingLevels, WorldContextObject) == 0x000000, "Member 'EndStreamingVolume_WaitLoadingStreamingLevels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndStreamingVolume_WaitLoadingStreamingLevels, LatentInfo) == 0x000008, "Member 'EndStreamingVolume_WaitLoadingStreamingLevels::LatentInfo' has a wrong offset!");
static_assert(offsetof(EndStreamingVolume_WaitLoadingStreamingLevels, NoErrMsg) == 0x000020, "Member 'EndStreamingVolume_WaitLoadingStreamingLevels::NoErrMsg' has a wrong offset!");

// Function EndGame.EndCameraComponent.SetFocalLength
// 0x0004 (0x0004 - 0x0000)
struct EndCameraComponent_SetFocalLength final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraComponent_SetFocalLength) == 0x000004, "Wrong alignment on EndCameraComponent_SetFocalLength");
static_assert(sizeof(EndCameraComponent_SetFocalLength) == 0x000004, "Wrong size on EndCameraComponent_SetFocalLength");
static_assert(offsetof(EndCameraComponent_SetFocalLength, NewValue) == 0x000000, "Member 'EndCameraComponent_SetFocalLength::NewValue' has a wrong offset!");

// Function EndGame.EndCameraComponent.SetFocusDistance
// 0x0004 (0x0004 - 0x0000)
struct EndCameraComponent_SetFocusDistance final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraComponent_SetFocusDistance) == 0x000004, "Wrong alignment on EndCameraComponent_SetFocusDistance");
static_assert(sizeof(EndCameraComponent_SetFocusDistance) == 0x000004, "Wrong size on EndCameraComponent_SetFocusDistance");
static_assert(offsetof(EndCameraComponent_SetFocusDistance, NewValue) == 0x000000, "Member 'EndCameraComponent_SetFocusDistance::NewValue' has a wrong offset!");

// Function EndGame.EndCameraComponent.SetHorizontalAperture
// 0x0004 (0x0004 - 0x0000)
struct EndCameraComponent_SetHorizontalAperture final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraComponent_SetHorizontalAperture) == 0x000004, "Wrong alignment on EndCameraComponent_SetHorizontalAperture");
static_assert(sizeof(EndCameraComponent_SetHorizontalAperture) == 0x000004, "Wrong size on EndCameraComponent_SetHorizontalAperture");
static_assert(offsetof(EndCameraComponent_SetHorizontalAperture, NewValue) == 0x000000, "Member 'EndCameraComponent_SetHorizontalAperture::NewValue' has a wrong offset!");

// Function EndGame.EndCameraComponent.SetRoll
// 0x0004 (0x0004 - 0x0000)
struct EndCameraComponent_SetRoll final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraComponent_SetRoll) == 0x000004, "Wrong alignment on EndCameraComponent_SetRoll");
static_assert(sizeof(EndCameraComponent_SetRoll) == 0x000004, "Wrong size on EndCameraComponent_SetRoll");
static_assert(offsetof(EndCameraComponent_SetRoll, NewValue) == 0x000000, "Member 'EndCameraComponent_SetRoll::NewValue' has a wrong offset!");

// Function EndGame.EndCharacterMovementComponent.OnOverlapActor
// 0x0010 (0x0010 - 0x0000)
struct EndCharacterMovementComponent_OnOverlapActor final
{
public:
	class AActor*                                 InOverlapActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeginOverlap;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCharacterMovementComponent_OnOverlapActor) == 0x000008, "Wrong alignment on EndCharacterMovementComponent_OnOverlapActor");
static_assert(sizeof(EndCharacterMovementComponent_OnOverlapActor) == 0x000010, "Wrong size on EndCharacterMovementComponent_OnOverlapActor");
static_assert(offsetof(EndCharacterMovementComponent_OnOverlapActor, InOverlapActor) == 0x000000, "Member 'EndCharacterMovementComponent_OnOverlapActor::InOverlapActor' has a wrong offset!");
static_assert(offsetof(EndCharacterMovementComponent_OnOverlapActor, bBeginOverlap) == 0x000008, "Member 'EndCharacterMovementComponent_OnOverlapActor::bBeginOverlap' has a wrong offset!");

// Function EndGame.AnimNotifyState_EndTimedNiagaraEffectAdvanced.GetNotifyProgress
// 0x0010 (0x0010 - 0x0000)
struct AnimNotifyState_EndTimedNiagaraEffectAdvanced_GetNotifyProgress final
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimNotifyState_EndTimedNiagaraEffectAdvanced_GetNotifyProgress) == 0x000008, "Wrong alignment on AnimNotifyState_EndTimedNiagaraEffectAdvanced_GetNotifyProgress");
static_assert(sizeof(AnimNotifyState_EndTimedNiagaraEffectAdvanced_GetNotifyProgress) == 0x000010, "Wrong size on AnimNotifyState_EndTimedNiagaraEffectAdvanced_GetNotifyProgress");
static_assert(offsetof(AnimNotifyState_EndTimedNiagaraEffectAdvanced_GetNotifyProgress, MeshComp) == 0x000000, "Member 'AnimNotifyState_EndTimedNiagaraEffectAdvanced_GetNotifyProgress::MeshComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_EndTimedNiagaraEffectAdvanced_GetNotifyProgress, ReturnValue) == 0x000008, "Member 'AnimNotifyState_EndTimedNiagaraEffectAdvanced_GetNotifyProgress::ReturnValue' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckContentsListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCardDeckWindow_OnCradDeckContentsListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckContentsListSetupItem) == 0x000008, "Wrong alignment on EndCardDeckWindow_OnCradDeckContentsListSetupItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckContentsListSetupItem) == 0x000010, "Wrong size on EndCardDeckWindow_OnCradDeckContentsListSetupItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckContentsListSetupItem, ItemWidget) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckContentsListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckContentsListSetupItem, CellIndex) == 0x000008, "Member 'EndCardDeckWindow_OnCradDeckContentsListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckContentsMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndCardDeckWindow_OnCradDeckContentsMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckContentsMeasureItem) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckContentsMeasureItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckContentsMeasureItem) == 0x00000C, "Wrong size on EndCardDeckWindow_OnCradDeckContentsMeasureItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckContentsMeasureItem, CellIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckContentsMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckContentsMeasureItem, ReturnValue) == 0x000004, "Member 'EndCardDeckWindow_OnCradDeckContentsMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckContentsPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndCardDeckWindow_OnCradDeckContentsPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckContentsPressedItem) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckContentsPressedItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckContentsPressedItem) == 0x000004, "Wrong size on EndCardDeckWindow_OnCradDeckContentsPressedItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckContentsPressedItem, CellIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckContentsPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckContentsSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndCardDeckWindow_OnCradDeckContentsSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckContentsSelectedIndexChanged) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckContentsSelectedIndexChanged");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckContentsSelectedIndexChanged) == 0x000004, "Wrong size on EndCardDeckWindow_OnCradDeckContentsSelectedIndexChanged");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckContentsSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckContentsSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckEditContentsPressedItem
// 0x0008 (0x0008 - 0x0000)
struct EndCardDeckWindow_OnCradDeckEditContentsPressedItem final
{
public:
	int32                                         VerticalIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckEditContentsPressedItem) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckEditContentsPressedItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckEditContentsPressedItem) == 0x000008, "Wrong size on EndCardDeckWindow_OnCradDeckEditContentsPressedItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditContentsPressedItem, VerticalIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckEditContentsPressedItem::VerticalIndex' has a wrong offset!");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditContentsPressedItem, CellIndex) == 0x000004, "Member 'EndCardDeckWindow_OnCradDeckEditContentsPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckEditContentsSelectedIndexChanged
// 0x0008 (0x0008 - 0x0000)
struct EndCardDeckWindow_OnCradDeckEditContentsSelectedIndexChanged final
{
public:
	int32                                         VerticalIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckEditContentsSelectedIndexChanged) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckEditContentsSelectedIndexChanged");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckEditContentsSelectedIndexChanged) == 0x000008, "Wrong size on EndCardDeckWindow_OnCradDeckEditContentsSelectedIndexChanged");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditContentsSelectedIndexChanged, VerticalIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckEditContentsSelectedIndexChanged::VerticalIndex' has a wrong offset!");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditContentsSelectedIndexChanged, CellIndex) == 0x000004, "Member 'EndCardDeckWindow_OnCradDeckEditContentsSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckEditContentsSetupItem
// 0x0018 (0x0018 - 0x0000)
struct EndCardDeckWindow_OnCradDeckEditContentsSetupItem final
{
public:
	int32                                         VerticalIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ItemWidget;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckEditContentsSetupItem) == 0x000008, "Wrong alignment on EndCardDeckWindow_OnCradDeckEditContentsSetupItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckEditContentsSetupItem) == 0x000018, "Wrong size on EndCardDeckWindow_OnCradDeckEditContentsSetupItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditContentsSetupItem, VerticalIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckEditContentsSetupItem::VerticalIndex' has a wrong offset!");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditContentsSetupItem, ItemWidget) == 0x000008, "Member 'EndCardDeckWindow_OnCradDeckEditContentsSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditContentsSetupItem, CellIndex) == 0x000010, "Member 'EndCardDeckWindow_OnCradDeckEditContentsSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckEditMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndCardDeckWindow_OnCradDeckEditMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckEditMeasureItem) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckEditMeasureItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckEditMeasureItem) == 0x00000C, "Wrong size on EndCardDeckWindow_OnCradDeckEditMeasureItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditMeasureItem, CellIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckEditMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditMeasureItem, ReturnValue) == 0x000004, "Member 'EndCardDeckWindow_OnCradDeckEditMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckEditPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndCardDeckWindow_OnCradDeckEditPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckEditPressedItem) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckEditPressedItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckEditPressedItem) == 0x000004, "Wrong size on EndCardDeckWindow_OnCradDeckEditPressedItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditPressedItem, CellIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckEditPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckEditSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndCardDeckWindow_OnCradDeckEditSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckEditSelectedIndexChanged) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckEditSelectedIndexChanged");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckEditSelectedIndexChanged) == 0x000004, "Wrong size on EndCardDeckWindow_OnCradDeckEditSelectedIndexChanged");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckEditSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckEditSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCardDeckWindow_OnCradDeckEditSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckEditSetupItem) == 0x000008, "Wrong alignment on EndCardDeckWindow_OnCradDeckEditSetupItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckEditSetupItem) == 0x000010, "Wrong size on EndCardDeckWindow_OnCradDeckEditSetupItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditSetupItem, ItemWidget) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckEditSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckEditSetupItem, CellIndex) == 0x000008, "Member 'EndCardDeckWindow_OnCradDeckEditSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndCardDeckWindow_OnCradDeckListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckListMeasureItem) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckListMeasureItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckListMeasureItem) == 0x00000C, "Wrong size on EndCardDeckWindow_OnCradDeckListMeasureItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckListMeasureItem, CellIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckListMeasureItem, ReturnValue) == 0x000004, "Member 'EndCardDeckWindow_OnCradDeckListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndCardDeckWindow_OnCradDeckListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckListPressedItem) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckListPressedItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckListPressedItem) == 0x000004, "Wrong size on EndCardDeckWindow_OnCradDeckListPressedItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckListPressedItem, CellIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndCardDeckWindow_OnCradDeckListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndCardDeckWindow_OnCradDeckListSelectedIndexChanged");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckListSelectedIndexChanged) == 0x000004, "Wrong size on EndCardDeckWindow_OnCradDeckListSelectedIndexChanged");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndCardDeckWindow.OnCradDeckListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCardDeckWindow_OnCradDeckListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCardDeckWindow_OnCradDeckListSetupItem) == 0x000008, "Wrong alignment on EndCardDeckWindow_OnCradDeckListSetupItem");
static_assert(sizeof(EndCardDeckWindow_OnCradDeckListSetupItem) == 0x000010, "Wrong size on EndCardDeckWindow_OnCradDeckListSetupItem");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckListSetupItem, ItemWidget) == 0x000000, "Member 'EndCardDeckWindow_OnCradDeckListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCardDeckWindow_OnCradDeckListSetupItem, CellIndex) == 0x000008, "Member 'EndCardDeckWindow_OnCradDeckListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.PlayCoordinateAnimation
// 0x0018 (0x0018 - 0x0000)
struct EndSkeletalMeshActorBase_PlayCoordinateAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoordinateAnimationSettingsId;                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_PlayCoordinateAnimation) == 0x000004, "Wrong alignment on EndSkeletalMeshActorBase_PlayCoordinateAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_PlayCoordinateAnimation) == 0x000018, "Wrong size on EndSkeletalMeshActorBase_PlayCoordinateAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayCoordinateAnimation, RequestID) == 0x000000, "Member 'EndSkeletalMeshActorBase_PlayCoordinateAnimation::RequestID' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayCoordinateAnimation, CoordinateAnimationSettingsId) == 0x000008, "Member 'EndSkeletalMeshActorBase_PlayCoordinateAnimation::CoordinateAnimationSettingsId' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayCoordinateAnimation, CurveType) == 0x000010, "Member 'EndSkeletalMeshActorBase_PlayCoordinateAnimation::CurveType' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayCoordinateAnimation, bLoop) == 0x000011, "Member 'EndSkeletalMeshActorBase_PlayCoordinateAnimation::bLoop' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayCoordinateAnimation, Duration) == 0x000014, "Member 'EndSkeletalMeshActorBase_PlayCoordinateAnimation::Duration' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.PlayDeformAnimation
// 0x0014 (0x0014 - 0x0000)
struct EndSkeletalMeshActorBase_PlayDeformAnimation final
{
public:
	EEndDeformAnimationType                       AnimationType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartFrame;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SyncAnimationName;                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimComponentControlLayer                 Layer;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSkeletalMeshActorBase_PlayDeformAnimation) == 0x000004, "Wrong alignment on EndSkeletalMeshActorBase_PlayDeformAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_PlayDeformAnimation) == 0x000014, "Wrong size on EndSkeletalMeshActorBase_PlayDeformAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayDeformAnimation, AnimationType) == 0x000000, "Member 'EndSkeletalMeshActorBase_PlayDeformAnimation::AnimationType' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayDeformAnimation, StartFrame) == 0x000004, "Member 'EndSkeletalMeshActorBase_PlayDeformAnimation::StartFrame' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayDeformAnimation, SyncAnimationName) == 0x000008, "Member 'EndSkeletalMeshActorBase_PlayDeformAnimation::SyncAnimationName' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayDeformAnimation, Layer) == 0x000010, "Member 'EndSkeletalMeshActorBase_PlayDeformAnimation::Layer' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.PlayEmissiveColorAnimation
// 0x0048 (0x0048 - 0x0000)
struct EndSkeletalMeshActorBase_PlayEmissiveColorAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EmissiveColorSettingsId;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationModifierType                     ModifierType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveEvaluateInLogarithmicSpace;                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveDuration;                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomOffset;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimComponentControlLayer                 Layer;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation) == 0x000008, "Wrong alignment on EndSkeletalMeshActorBase_PlayEmissiveColorAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation) == 0x000048, "Wrong size on EndSkeletalMeshActorBase_PlayEmissiveColorAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, RequestID) == 0x000000, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::RequestID' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, EmissiveColorSettingsId) == 0x000008, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::EmissiveColorSettingsId' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, ModifierType) == 0x000010, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::ModifierType' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, CurveType) == 0x000011, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::CurveType' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, CurveAsset) == 0x000018, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::CurveAsset' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, bCurveEvaluateInLogarithmicSpace) == 0x000020, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::bCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, bLoop) == 0x000021, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::bLoop' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, Duration) == 0x000024, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::Duration' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, RandomAdditiveDuration) == 0x000028, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::RandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, RandomOffset) == 0x00002C, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::RandomOffset' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, BlendInTime) == 0x000030, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, BlendOutTime) == 0x000034, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, StartOffset) == 0x000038, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::StartOffset' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, EndOffset) == 0x00003C, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::EndOffset' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayEmissiveColorAnimation, Layer) == 0x000040, "Member 'EndSkeletalMeshActorBase_PlayEmissiveColorAnimation::Layer' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.PlayExtraActionFromAsset
// 0x0018 (0x0018 - 0x0000)
struct EndSkeletalMeshActorBase_PlayExtraActionFromAsset final
{
public:
	class UAnimSequenceBase*                      Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSkeletalMeshActorBase_PlayExtraActionFromAsset) == 0x000008, "Wrong alignment on EndSkeletalMeshActorBase_PlayExtraActionFromAsset");
static_assert(sizeof(EndSkeletalMeshActorBase_PlayExtraActionFromAsset) == 0x000018, "Wrong size on EndSkeletalMeshActorBase_PlayExtraActionFromAsset");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayExtraActionFromAsset, Asset) == 0x000000, "Member 'EndSkeletalMeshActorBase_PlayExtraActionFromAsset::Asset' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayExtraActionFromAsset, bLooping) == 0x000008, "Member 'EndSkeletalMeshActorBase_PlayExtraActionFromAsset::bLooping' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayExtraActionFromAsset, BlendInTime) == 0x00000C, "Member 'EndSkeletalMeshActorBase_PlayExtraActionFromAsset::BlendInTime' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayExtraActionFromAsset, StartTime) == 0x000010, "Member 'EndSkeletalMeshActorBase_PlayExtraActionFromAsset::StartTime' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.PlayFlowMapAnimation
// 0x0020 (0x0020 - 0x0000)
struct EndSkeletalMeshActorBase_PlayFlowMapAnimation final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideConstantParameter;                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ConstantParameter0;                                // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstantParameter1;                                // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_PlayFlowMapAnimation) == 0x000004, "Wrong alignment on EndSkeletalMeshActorBase_PlayFlowMapAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_PlayFlowMapAnimation) == 0x000020, "Wrong size on EndSkeletalMeshActorBase_PlayFlowMapAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayFlowMapAnimation, PlayRate) == 0x000000, "Member 'EndSkeletalMeshActorBase_PlayFlowMapAnimation::PlayRate' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayFlowMapAnimation, bOverrideConstantParameter) == 0x000004, "Member 'EndSkeletalMeshActorBase_PlayFlowMapAnimation::bOverrideConstantParameter' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayFlowMapAnimation, ConstantParameter0) == 0x000008, "Member 'EndSkeletalMeshActorBase_PlayFlowMapAnimation::ConstantParameter0' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayFlowMapAnimation, ConstantParameter1) == 0x000014, "Member 'EndSkeletalMeshActorBase_PlayFlowMapAnimation::ConstantParameter1' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.PlayLightAnimation
// 0x0040 (0x0040 - 0x0000)
struct EndSkeletalMeshActorBase_PlayLightAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightAnimationSettingsId;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationModifierType                     ModifierType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveEvaluateInLogarithmicSpace;                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveDuration;                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomOffset;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_PlayLightAnimation) == 0x000008, "Wrong alignment on EndSkeletalMeshActorBase_PlayLightAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_PlayLightAnimation) == 0x000040, "Wrong size on EndSkeletalMeshActorBase_PlayLightAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, RequestID) == 0x000000, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::RequestID' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, LightAnimationSettingsId) == 0x000008, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::LightAnimationSettingsId' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, ModifierType) == 0x000010, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::ModifierType' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, CurveType) == 0x000011, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::CurveType' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, CurveAsset) == 0x000018, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::CurveAsset' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, bCurveEvaluateInLogarithmicSpace) == 0x000020, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::bCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, bLoop) == 0x000021, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::bLoop' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, Duration) == 0x000024, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::Duration' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, RandomAdditiveDuration) == 0x000028, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::RandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, RandomOffset) == 0x00002C, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::RandomOffset' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, BlendInTime) == 0x000030, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, BlendOutTime) == 0x000034, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, StartOffset) == 0x000038, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::StartOffset' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_PlayLightAnimation, EndOffset) == 0x00003C, "Member 'EndSkeletalMeshActorBase_PlayLightAnimation::EndOffset' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.ResetDirectEmissiveColor
// 0x0008 (0x0008 - 0x0000)
struct EndSkeletalMeshActorBase_ResetDirectEmissiveColor final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_ResetDirectEmissiveColor) == 0x000004, "Wrong alignment on EndSkeletalMeshActorBase_ResetDirectEmissiveColor");
static_assert(sizeof(EndSkeletalMeshActorBase_ResetDirectEmissiveColor) == 0x000008, "Wrong size on EndSkeletalMeshActorBase_ResetDirectEmissiveColor");
static_assert(offsetof(EndSkeletalMeshActorBase_ResetDirectEmissiveColor, RequestID) == 0x000000, "Member 'EndSkeletalMeshActorBase_ResetDirectEmissiveColor::RequestID' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.SetDirectEmissiveColor
// 0x0014 (0x0014 - 0x0000)
struct EndSkeletalMeshActorBase_SetDirectEmissiveColor final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EmissiveColorSettingsId;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityAlpha;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_SetDirectEmissiveColor) == 0x000004, "Wrong alignment on EndSkeletalMeshActorBase_SetDirectEmissiveColor");
static_assert(sizeof(EndSkeletalMeshActorBase_SetDirectEmissiveColor) == 0x000014, "Wrong size on EndSkeletalMeshActorBase_SetDirectEmissiveColor");
static_assert(offsetof(EndSkeletalMeshActorBase_SetDirectEmissiveColor, RequestID) == 0x000000, "Member 'EndSkeletalMeshActorBase_SetDirectEmissiveColor::RequestID' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_SetDirectEmissiveColor, EmissiveColorSettingsId) == 0x000008, "Member 'EndSkeletalMeshActorBase_SetDirectEmissiveColor::EmissiveColorSettingsId' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActorBase_SetDirectEmissiveColor, IntensityAlpha) == 0x000010, "Member 'EndSkeletalMeshActorBase_SetDirectEmissiveColor::IntensityAlpha' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.StopCoordinateAnimation
// 0x0008 (0x0008 - 0x0000)
struct EndSkeletalMeshActorBase_StopCoordinateAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_StopCoordinateAnimation) == 0x000004, "Wrong alignment on EndSkeletalMeshActorBase_StopCoordinateAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_StopCoordinateAnimation) == 0x000008, "Wrong size on EndSkeletalMeshActorBase_StopCoordinateAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_StopCoordinateAnimation, RequestID) == 0x000000, "Member 'EndSkeletalMeshActorBase_StopCoordinateAnimation::RequestID' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.StopEmissiveColorAnimation
// 0x0008 (0x0008 - 0x0000)
struct EndSkeletalMeshActorBase_StopEmissiveColorAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_StopEmissiveColorAnimation) == 0x000004, "Wrong alignment on EndSkeletalMeshActorBase_StopEmissiveColorAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_StopEmissiveColorAnimation) == 0x000008, "Wrong size on EndSkeletalMeshActorBase_StopEmissiveColorAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_StopEmissiveColorAnimation, RequestID) == 0x000000, "Member 'EndSkeletalMeshActorBase_StopEmissiveColorAnimation::RequestID' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.StopLightAnimation
// 0x0008 (0x0008 - 0x0000)
struct EndSkeletalMeshActorBase_StopLightAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_StopLightAnimation) == 0x000004, "Wrong alignment on EndSkeletalMeshActorBase_StopLightAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_StopLightAnimation) == 0x000008, "Wrong size on EndSkeletalMeshActorBase_StopLightAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_StopLightAnimation, RequestID) == 0x000000, "Member 'EndSkeletalMeshActorBase_StopLightAnimation::RequestID' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.IsActiveCoordinateAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndSkeletalMeshActorBase_IsActiveCoordinateAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_IsActiveCoordinateAnimation) == 0x000001, "Wrong alignment on EndSkeletalMeshActorBase_IsActiveCoordinateAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_IsActiveCoordinateAnimation) == 0x000001, "Wrong size on EndSkeletalMeshActorBase_IsActiveCoordinateAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_IsActiveCoordinateAnimation, ReturnValue) == 0x000000, "Member 'EndSkeletalMeshActorBase_IsActiveCoordinateAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.IsActiveDeformAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndSkeletalMeshActorBase_IsActiveDeformAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_IsActiveDeformAnimation) == 0x000001, "Wrong alignment on EndSkeletalMeshActorBase_IsActiveDeformAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_IsActiveDeformAnimation) == 0x000001, "Wrong size on EndSkeletalMeshActorBase_IsActiveDeformAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_IsActiveDeformAnimation, ReturnValue) == 0x000000, "Member 'EndSkeletalMeshActorBase_IsActiveDeformAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.IsActiveEmissiveColorAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndSkeletalMeshActorBase_IsActiveEmissiveColorAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_IsActiveEmissiveColorAnimation) == 0x000001, "Wrong alignment on EndSkeletalMeshActorBase_IsActiveEmissiveColorAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_IsActiveEmissiveColorAnimation) == 0x000001, "Wrong size on EndSkeletalMeshActorBase_IsActiveEmissiveColorAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_IsActiveEmissiveColorAnimation, ReturnValue) == 0x000000, "Member 'EndSkeletalMeshActorBase_IsActiveEmissiveColorAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.IsActiveFlowMapAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndSkeletalMeshActorBase_IsActiveFlowMapAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_IsActiveFlowMapAnimation) == 0x000001, "Wrong alignment on EndSkeletalMeshActorBase_IsActiveFlowMapAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_IsActiveFlowMapAnimation) == 0x000001, "Wrong size on EndSkeletalMeshActorBase_IsActiveFlowMapAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_IsActiveFlowMapAnimation, ReturnValue) == 0x000000, "Member 'EndSkeletalMeshActorBase_IsActiveFlowMapAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActorBase.IsActiveLightAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndSkeletalMeshActorBase_IsActiveLightAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActorBase_IsActiveLightAnimation) == 0x000001, "Wrong alignment on EndSkeletalMeshActorBase_IsActiveLightAnimation");
static_assert(sizeof(EndSkeletalMeshActorBase_IsActiveLightAnimation) == 0x000001, "Wrong size on EndSkeletalMeshActorBase_IsActiveLightAnimation");
static_assert(offsetof(EndSkeletalMeshActorBase_IsActiveLightAnimation, ReturnValue) == 0x000000, "Member 'EndSkeletalMeshActorBase_IsActiveLightAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndCardGame3DToken.OnProjectileStop
// 0x0090 (0x0090 - 0x0000)
struct EndCardGame3DToken_OnProjectileStop final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardGame3DToken_OnProjectileStop) == 0x000004, "Wrong alignment on EndCardGame3DToken_OnProjectileStop");
static_assert(sizeof(EndCardGame3DToken_OnProjectileStop) == 0x000090, "Wrong size on EndCardGame3DToken_OnProjectileStop");
static_assert(offsetof(EndCardGame3DToken_OnProjectileStop, HitResult) == 0x000000, "Member 'EndCardGame3DToken_OnProjectileStop::HitResult' has a wrong offset!");

// Function EndGame.EndMenuAPI.AddFadeFilter
// 0x0040 (0x0040 - 0x0000)
struct EndMenuAPI_AddFadeFilter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FromColor;                                         // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ToColor;                                           // 0x0024(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseable;                                        // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_AddFadeFilter) == 0x000008, "Wrong alignment on EndMenuAPI_AddFadeFilter");
static_assert(sizeof(EndMenuAPI_AddFadeFilter) == 0x000040, "Wrong size on EndMenuAPI_AddFadeFilter");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_AddFadeFilter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, Name_0) == 0x000008, "Member 'EndMenuAPI_AddFadeFilter::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, ZOrder) == 0x000010, "Member 'EndMenuAPI_AddFadeFilter::ZOrder' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, FromColor) == 0x000014, "Member 'EndMenuAPI_AddFadeFilter::FromColor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, ToColor) == 0x000024, "Member 'EndMenuAPI_AddFadeFilter::ToColor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, FadeTime) == 0x000034, "Member 'EndMenuAPI_AddFadeFilter::FadeTime' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, bAutoDestroy) == 0x000038, "Member 'EndMenuAPI_AddFadeFilter::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, bPauseable) == 0x000039, "Member 'EndMenuAPI_AddFadeFilter::bPauseable' has a wrong offset!");

// Function EndGame.EndMenuAPI.AddMessageLog_AnyThread
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_AddMessageLog_AnyThread final
{
public:
	EEndMenuIconKind                              Icon;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuLogEffectKind                         Effect;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuLogColorKind                          Color;                                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuLogOptionFlags                        Option;                                            // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_AddMessageLog_AnyThread) == 0x000008, "Wrong alignment on EndMenuAPI_AddMessageLog_AnyThread");
static_assert(sizeof(EndMenuAPI_AddMessageLog_AnyThread) == 0x000020, "Wrong size on EndMenuAPI_AddMessageLog_AnyThread");
static_assert(offsetof(EndMenuAPI_AddMessageLog_AnyThread, Icon) == 0x000000, "Member 'EndMenuAPI_AddMessageLog_AnyThread::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddMessageLog_AnyThread, Message) == 0x000008, "Member 'EndMenuAPI_AddMessageLog_AnyThread::Message' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddMessageLog_AnyThread, Effect) == 0x000018, "Member 'EndMenuAPI_AddMessageLog_AnyThread::Effect' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddMessageLog_AnyThread, Color) == 0x000019, "Member 'EndMenuAPI_AddMessageLog_AnyThread::Color' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddMessageLog_AnyThread, Option) == 0x00001A, "Member 'EndMenuAPI_AddMessageLog_AnyThread::Option' has a wrong offset!");

// Function EndGame.EndMenuAPI.AddTalkLogByTextId
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_AddTalkLogByTextId final
{
public:
	class FString                                 TextId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitSeconds;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_AddTalkLogByTextId) == 0x000008, "Wrong alignment on EndMenuAPI_AddTalkLogByTextId");
static_assert(sizeof(EndMenuAPI_AddTalkLogByTextId) == 0x000018, "Wrong size on EndMenuAPI_AddTalkLogByTextId");
static_assert(offsetof(EndMenuAPI_AddTalkLogByTextId, TextId) == 0x000000, "Member 'EndMenuAPI_AddTalkLogByTextId::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddTalkLogByTextId, WaitSeconds) == 0x000010, "Member 'EndMenuAPI_AddTalkLogByTextId::WaitSeconds' has a wrong offset!");

// Function EndGame.EndMenuAPI.AreaNameExists
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_AreaNameExists final
{
public:
	class FString                                 TextId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_AreaNameExists) == 0x000008, "Wrong alignment on EndMenuAPI_AreaNameExists");
static_assert(sizeof(EndMenuAPI_AreaNameExists) == 0x000018, "Wrong size on EndMenuAPI_AreaNameExists");
static_assert(offsetof(EndMenuAPI_AreaNameExists, TextId) == 0x000000, "Member 'EndMenuAPI_AreaNameExists::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AreaNameExists, ReturnValue) == 0x000010, "Member 'EndMenuAPI_AreaNameExists::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideBattleEscape
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_BPHideBattleEscape final
{
public:
	bool                                          aInBattle;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideBattleEscape) == 0x000001, "Wrong alignment on EndMenuAPI_BPHideBattleEscape");
static_assert(sizeof(EndMenuAPI_BPHideBattleEscape) == 0x000001, "Wrong size on EndMenuAPI_BPHideBattleEscape");
static_assert(offsetof(EndMenuAPI_BPHideBattleEscape, aInBattle) == 0x000000, "Member 'EndMenuAPI_BPHideBattleEscape::aInBattle' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideBattleTutorialWindow
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPHideBattleTutorialWindow final
{
public:
	class FName                                   aKey;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideBattleTutorialWindow) == 0x000004, "Wrong alignment on EndMenuAPI_BPHideBattleTutorialWindow");
static_assert(sizeof(EndMenuAPI_BPHideBattleTutorialWindow) == 0x000008, "Wrong size on EndMenuAPI_BPHideBattleTutorialWindow");
static_assert(offsetof(EndMenuAPI_BPHideBattleTutorialWindow, aKey) == 0x000000, "Member 'EndMenuAPI_BPHideBattleTutorialWindow::aKey' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideCaution
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_BPHideCaution final
{
public:
	bool                                          aInBattle;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideCaution) == 0x000001, "Wrong alignment on EndMenuAPI_BPHideCaution");
static_assert(sizeof(EndMenuAPI_BPHideCaution) == 0x000001, "Wrong size on EndMenuAPI_BPHideCaution");
static_assert(offsetof(EndMenuAPI_BPHideCaution, aInBattle) == 0x000000, "Member 'EndMenuAPI_BPHideCaution::aInBattle' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideCountdown
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_BPHideCountdown final
{
public:
	bool                                          aHideFailed;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideCountdown) == 0x000001, "Wrong alignment on EndMenuAPI_BPHideCountdown");
static_assert(sizeof(EndMenuAPI_BPHideCountdown) == 0x000001, "Wrong size on EndMenuAPI_BPHideCountdown");
static_assert(offsetof(EndMenuAPI_BPHideCountdown, aHideFailed) == 0x000000, "Member 'EndMenuAPI_BPHideCountdown::aHideFailed' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideEventProgress
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_BPHideEventProgress final
{
public:
	bool                                          aAnimation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideEventProgress) == 0x000001, "Wrong alignment on EndMenuAPI_BPHideEventProgress");
static_assert(sizeof(EndMenuAPI_BPHideEventProgress) == 0x000001, "Wrong size on EndMenuAPI_BPHideEventProgress");
static_assert(offsetof(EndMenuAPI_BPHideEventProgress, aAnimation) == 0x000000, "Member 'EndMenuAPI_BPHideEventProgress::aAnimation' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideUIFilterWindow
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_BPHideUIFilterWindow final
{
public:
	EEndMenuUIFilterType                          aFilterType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideUIFilterWindow) == 0x000001, "Wrong alignment on EndMenuAPI_BPHideUIFilterWindow");
static_assert(sizeof(EndMenuAPI_BPHideUIFilterWindow) == 0x000001, "Wrong size on EndMenuAPI_BPHideUIFilterWindow");
static_assert(offsetof(EndMenuAPI_BPHideUIFilterWindow, aFilterType) == 0x000000, "Member 'EndMenuAPI_BPHideUIFilterWindow::aFilterType' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetBossDamageLidHP
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetBossDamageLidHP final
{
public:
	float                                         aHP;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetBossDamageLidHP) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetBossDamageLidHP");
static_assert(sizeof(EndMenuAPI_BPSetBossDamageLidHP) == 0x000004, "Wrong size on EndMenuAPI_BPSetBossDamageLidHP");
static_assert(offsetof(EndMenuAPI_BPSetBossDamageLidHP, aHP) == 0x000000, "Member 'EndMenuAPI_BPSetBossDamageLidHP::aHP' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetBossHPGauge
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetBossHPGauge final
{
public:
	float                                         aHP;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetBossHPGauge) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetBossHPGauge");
static_assert(sizeof(EndMenuAPI_BPSetBossHPGauge) == 0x000004, "Wrong size on EndMenuAPI_BPSetBossHPGauge");
static_assert(offsetof(EndMenuAPI_BPSetBossHPGauge, aHP) == 0x000000, "Member 'EndMenuAPI_BPSetBossHPGauge::aHP' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetCautionQuantity
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetCautionQuantity final
{
public:
	float                                         aQT;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetCautionQuantity) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetCautionQuantity");
static_assert(sizeof(EndMenuAPI_BPSetCautionQuantity) == 0x000004, "Wrong size on EndMenuAPI_BPSetCautionQuantity");
static_assert(offsetof(EndMenuAPI_BPSetCautionQuantity, aQT) == 0x000000, "Member 'EndMenuAPI_BPSetCautionQuantity::aQT' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetCountdownTime
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetCountdownTime final
{
public:
	float                                         SetTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetCountdownTime) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetCountdownTime");
static_assert(sizeof(EndMenuAPI_BPSetCountdownTime) == 0x000004, "Wrong size on EndMenuAPI_BPSetCountdownTime");
static_assert(offsetof(EndMenuAPI_BPSetCountdownTime, SetTime) == 0x000000, "Member 'EndMenuAPI_BPSetCountdownTime::SetTime' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetFieldStaminaGauge
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetFieldStaminaGauge final
{
public:
	float                                         aGaugeQt;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetFieldStaminaGauge) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetFieldStaminaGauge");
static_assert(sizeof(EndMenuAPI_BPSetFieldStaminaGauge) == 0x000004, "Wrong size on EndMenuAPI_BPSetFieldStaminaGauge");
static_assert(offsetof(EndMenuAPI_BPSetFieldStaminaGauge, aGaugeQt) == 0x000000, "Member 'EndMenuAPI_BPSetFieldStaminaGauge::aGaugeQt' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetFieldStaminaSpeed
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetFieldStaminaSpeed final
{
public:
	float                                         aSpeedQt;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetFieldStaminaSpeed) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetFieldStaminaSpeed");
static_assert(sizeof(EndMenuAPI_BPSetFieldStaminaSpeed) == 0x000004, "Wrong size on EndMenuAPI_BPSetFieldStaminaSpeed");
static_assert(offsetof(EndMenuAPI_BPSetFieldStaminaSpeed, aSpeedQt) == 0x000000, "Member 'EndMenuAPI_BPSetFieldStaminaSpeed::aSpeedQt' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowBattleEscape
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowBattleEscape final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowBattleEscape) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowBattleEscape");
static_assert(sizeof(EndMenuAPI_BPShowBattleEscape) == 0x000008, "Wrong size on EndMenuAPI_BPShowBattleEscape");
static_assert(offsetof(EndMenuAPI_BPShowBattleEscape, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowBattleEscape::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowBattleLockonMarkerIcon
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_BPShowBattleLockonMarkerIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuLockonMarkerType                      aType;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowBattleLockonMarkerIcon) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowBattleLockonMarkerIcon");
static_assert(sizeof(EndMenuAPI_BPShowBattleLockonMarkerIcon) == 0x000020, "Wrong size on EndMenuAPI_BPShowBattleLockonMarkerIcon");
static_assert(offsetof(EndMenuAPI_BPShowBattleLockonMarkerIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowBattleLockonMarkerIcon::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowBattleLockonMarkerIcon, WorldPosition) == 0x000008, "Member 'EndMenuAPI_BPShowBattleLockonMarkerIcon::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowBattleLockonMarkerIcon, aType) == 0x000014, "Member 'EndMenuAPI_BPShowBattleLockonMarkerIcon::aType' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowBattleLockonMarkerIcon, ReturnValue) == 0x000018, "Member 'EndMenuAPI_BPShowBattleLockonMarkerIcon::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowBattleTutorialWindow
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowBattleTutorialWindow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   aKey;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowBattleTutorialWindow) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowBattleTutorialWindow");
static_assert(sizeof(EndMenuAPI_BPShowBattleTutorialWindow) == 0x000010, "Wrong size on EndMenuAPI_BPShowBattleTutorialWindow");
static_assert(offsetof(EndMenuAPI_BPShowBattleTutorialWindow, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowBattleTutorialWindow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowBattleTutorialWindow, aKey) == 0x000008, "Member 'EndMenuAPI_BPShowBattleTutorialWindow::aKey' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowBossStatus
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowBossStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowBossStatus) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowBossStatus");
static_assert(sizeof(EndMenuAPI_BPShowBossStatus) == 0x000008, "Wrong size on EndMenuAPI_BPShowBossStatus");
static_assert(offsetof(EndMenuAPI_BPShowBossStatus, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowBossStatus::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowCaution
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowCaution final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowCaution) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowCaution");
static_assert(sizeof(EndMenuAPI_BPShowCaution) == 0x000008, "Wrong size on EndMenuAPI_BPShowCaution");
static_assert(offsetof(EndMenuAPI_BPShowCaution, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowCaution::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowCharacterJoin
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowCharacterJoin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIn;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowCharacterJoin) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowCharacterJoin");
static_assert(sizeof(EndMenuAPI_BPShowCharacterJoin) == 0x000010, "Wrong size on EndMenuAPI_BPShowCharacterJoin");
static_assert(offsetof(EndMenuAPI_BPShowCharacterJoin, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowCharacterJoin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowCharacterJoin, PlayerType) == 0x000008, "Member 'EndMenuAPI_BPShowCharacterJoin::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowCharacterJoin, bIsIn) == 0x000009, "Member 'EndMenuAPI_BPShowCharacterJoin::bIsIn' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowCharacterReJoin
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowCharacterReJoin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeftOut;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowCharacterReJoin) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowCharacterReJoin");
static_assert(sizeof(EndMenuAPI_BPShowCharacterReJoin) == 0x000010, "Wrong size on EndMenuAPI_BPShowCharacterReJoin");
static_assert(offsetof(EndMenuAPI_BPShowCharacterReJoin, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowCharacterReJoin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowCharacterReJoin, bIsLeftOut) == 0x000008, "Member 'EndMenuAPI_BPShowCharacterReJoin::bIsLeftOut' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowCountdown
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowCountdown final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowCountdown) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowCountdown");
static_assert(sizeof(EndMenuAPI_BPShowCountdown) == 0x000010, "Wrong size on EndMenuAPI_BPShowCountdown");
static_assert(offsetof(EndMenuAPI_BPShowCountdown, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowCountdown::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowCountdown, SetTime) == 0x000008, "Member 'EndMenuAPI_BPShowCountdown::SetTime' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowDataAccessIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowDataAccessIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowDataAccessIcon) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowDataAccessIcon");
static_assert(sizeof(EndMenuAPI_BPShowDataAccessIcon) == 0x000008, "Wrong size on EndMenuAPI_BPShowDataAccessIcon");
static_assert(offsetof(EndMenuAPI_BPShowDataAccessIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowDataAccessIcon::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowEventProgress
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_BPShowEventProgress final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 aShowText;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowEventProgress) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowEventProgress");
static_assert(sizeof(EndMenuAPI_BPShowEventProgress) == 0x000018, "Wrong size on EndMenuAPI_BPShowEventProgress");
static_assert(offsetof(EndMenuAPI_BPShowEventProgress, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowEventProgress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowEventProgress, aShowText) == 0x000008, "Member 'EndMenuAPI_BPShowEventProgress::aShowText' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowFieldAction
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowFieldAction final
{
public:
	class FString                                 aActionTextId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowFieldAction) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowFieldAction");
static_assert(sizeof(EndMenuAPI_BPShowFieldAction) == 0x000010, "Wrong size on EndMenuAPI_BPShowFieldAction");
static_assert(offsetof(EndMenuAPI_BPShowFieldAction, aActionTextId) == 0x000000, "Member 'EndMenuAPI_BPShowFieldAction::aActionTextId' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowFieldInputGuidelineWindow
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowFieldInputGuidelineWindow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuInputGuidelineType                    aType;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowFieldInputGuidelineWindow) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowFieldInputGuidelineWindow");
static_assert(sizeof(EndMenuAPI_BPShowFieldInputGuidelineWindow) == 0x000010, "Wrong size on EndMenuAPI_BPShowFieldInputGuidelineWindow");
static_assert(offsetof(EndMenuAPI_BPShowFieldInputGuidelineWindow, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowFieldInputGuidelineWindow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowFieldInputGuidelineWindow, aType) == 0x000008, "Member 'EndMenuAPI_BPShowFieldInputGuidelineWindow::aType' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowFieldStaminaIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowFieldStaminaIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowFieldStaminaIcon) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowFieldStaminaIcon");
static_assert(sizeof(EndMenuAPI_BPShowFieldStaminaIcon) == 0x000008, "Wrong size on EndMenuAPI_BPShowFieldStaminaIcon");
static_assert(offsetof(EndMenuAPI_BPShowFieldStaminaIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowFieldStaminaIcon::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowGameOver
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowGameOver final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowGameOver) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowGameOver");
static_assert(sizeof(EndMenuAPI_BPShowGameOver) == 0x000008, "Wrong size on EndMenuAPI_BPShowGameOver");
static_assert(offsetof(EndMenuAPI_BPShowGameOver, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowGameOver::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowNavimap
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowNavimap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowNavimap) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowNavimap");
static_assert(sizeof(EndMenuAPI_BPShowNavimap) == 0x000008, "Wrong size on EndMenuAPI_BPShowNavimap");
static_assert(offsetof(EndMenuAPI_BPShowNavimap, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowNavimap::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowTalkSelect
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowTalkSelect final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuTalkSelectWindowType                  aWindowType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowTalkSelect) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowTalkSelect");
static_assert(sizeof(EndMenuAPI_BPShowTalkSelect) == 0x000010, "Wrong size on EndMenuAPI_BPShowTalkSelect");
static_assert(offsetof(EndMenuAPI_BPShowTalkSelect, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowTalkSelect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowTalkSelect, aWindowType) == 0x000008, "Member 'EndMenuAPI_BPShowTalkSelect::aWindowType' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowUIFilterWindow
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowUIFilterWindow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuUIFilterType                          aFilterType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowUIFilterWindow) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowUIFilterWindow");
static_assert(sizeof(EndMenuAPI_BPShowUIFilterWindow) == 0x000010, "Wrong size on EndMenuAPI_BPShowUIFilterWindow");
static_assert(offsetof(EndMenuAPI_BPShowUIFilterWindow, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowUIFilterWindow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowUIFilterWindow, aFilterType) == 0x000008, "Member 'EndMenuAPI_BPShowUIFilterWindow::aFilterType' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowVisionIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowVisionIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowVisionIcon) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowVisionIcon");
static_assert(sizeof(EndMenuAPI_BPShowVisionIcon) == 0x000008, "Wrong size on EndMenuAPI_BPShowVisionIcon");
static_assert(offsetof(EndMenuAPI_BPShowVisionIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowVisionIcon::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.ChangeBattleTargetIconState
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_ChangeBattleTargetIconState final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuBattleTargetState                     State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ChangeBattleTargetIconState) == 0x000008, "Wrong alignment on EndMenuAPI_ChangeBattleTargetIconState");
static_assert(sizeof(EndMenuAPI_ChangeBattleTargetIconState) == 0x000010, "Wrong size on EndMenuAPI_ChangeBattleTargetIconState");
static_assert(offsetof(EndMenuAPI_ChangeBattleTargetIconState, Icon) == 0x000000, "Member 'EndMenuAPI_ChangeBattleTargetIconState::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeBattleTargetIconState, State) == 0x000008, "Member 'EndMenuAPI_ChangeBattleTargetIconState::State' has a wrong offset!");

// Function EndGame.EndMenuAPI.ChangeFadeFilter
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_ChangeFadeFilter final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ToColor;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseable;                                        // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ChangeFadeFilter) == 0x000004, "Wrong alignment on EndMenuAPI_ChangeFadeFilter");
static_assert(sizeof(EndMenuAPI_ChangeFadeFilter) == 0x000020, "Wrong size on EndMenuAPI_ChangeFadeFilter");
static_assert(offsetof(EndMenuAPI_ChangeFadeFilter, Name_0) == 0x000000, "Member 'EndMenuAPI_ChangeFadeFilter::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFadeFilter, ToColor) == 0x000008, "Member 'EndMenuAPI_ChangeFadeFilter::ToColor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFadeFilter, FadeTime) == 0x000018, "Member 'EndMenuAPI_ChangeFadeFilter::FadeTime' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFadeFilter, bAutoDestroy) == 0x00001C, "Member 'EndMenuAPI_ChangeFadeFilter::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFadeFilter, bPauseable) == 0x00001D, "Member 'EndMenuAPI_ChangeFadeFilter::bPauseable' has a wrong offset!");

// Function EndGame.EndMenuAPI.ChangeFieldTargetIconButton
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_ChangeFieldTargetIconButton final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuFieldTargetIconType                   aButtonType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ChangeFieldTargetIconButton) == 0x000008, "Wrong alignment on EndMenuAPI_ChangeFieldTargetIconButton");
static_assert(sizeof(EndMenuAPI_ChangeFieldTargetIconButton) == 0x000010, "Wrong size on EndMenuAPI_ChangeFieldTargetIconButton");
static_assert(offsetof(EndMenuAPI_ChangeFieldTargetIconButton, Icon) == 0x000000, "Member 'EndMenuAPI_ChangeFieldTargetIconButton::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFieldTargetIconButton, aButtonType) == 0x000008, "Member 'EndMenuAPI_ChangeFieldTargetIconButton::aButtonType' has a wrong offset!");

// Function EndGame.EndMenuAPI.ChangeFieldTargetIconState
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_ChangeFieldTargetIconState final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuFieldTargetState                      State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ChangeFieldTargetIconState) == 0x000008, "Wrong alignment on EndMenuAPI_ChangeFieldTargetIconState");
static_assert(sizeof(EndMenuAPI_ChangeFieldTargetIconState) == 0x000010, "Wrong size on EndMenuAPI_ChangeFieldTargetIconState");
static_assert(offsetof(EndMenuAPI_ChangeFieldTargetIconState, Icon) == 0x000000, "Member 'EndMenuAPI_ChangeFieldTargetIconState::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFieldTargetIconState, State) == 0x000008, "Member 'EndMenuAPI_ChangeFieldTargetIconState::State' has a wrong offset!");

// Function EndGame.EndMenuAPI.ChapterNameExists
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_ChapterNameExists final
{
public:
	class FString                                 TextId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ChapterNameExists) == 0x000008, "Wrong alignment on EndMenuAPI_ChapterNameExists");
static_assert(sizeof(EndMenuAPI_ChapterNameExists) == 0x000018, "Wrong size on EndMenuAPI_ChapterNameExists");
static_assert(offsetof(EndMenuAPI_ChapterNameExists, TextId) == 0x000000, "Member 'EndMenuAPI_ChapterNameExists::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChapterNameExists, ReturnValue) == 0x000010, "Member 'EndMenuAPI_ChapterNameExists::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.CreateWidgetFromPack
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_CreateWidgetFromPack final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_CreateWidgetFromPack) == 0x000008, "Wrong alignment on EndMenuAPI_CreateWidgetFromPack");
static_assert(sizeof(EndMenuAPI_CreateWidgetFromPack) == 0x000020, "Wrong size on EndMenuAPI_CreateWidgetFromPack");
static_assert(offsetof(EndMenuAPI_CreateWidgetFromPack, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_CreateWidgetFromPack::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_CreateWidgetFromPack, LevelName) == 0x000008, "Member 'EndMenuAPI_CreateWidgetFromPack::LevelName' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_CreateWidgetFromPack, ResourceName) == 0x000010, "Member 'EndMenuAPI_CreateWidgetFromPack::ResourceName' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_CreateWidgetFromPack, ReturnValue) == 0x000018, "Member 'EndMenuAPI_CreateWidgetFromPack::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetBattleSimulatorVersionString
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_GetBattleSimulatorVersionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetBattleSimulatorVersionString) == 0x000008, "Wrong alignment on EndMenuAPI_GetBattleSimulatorVersionString");
static_assert(sizeof(EndMenuAPI_GetBattleSimulatorVersionString) == 0x000010, "Wrong size on EndMenuAPI_GetBattleSimulatorVersionString");
static_assert(offsetof(EndMenuAPI_GetBattleSimulatorVersionString, ReturnValue) == 0x000000, "Member 'EndMenuAPI_GetBattleSimulatorVersionString::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetBattleTargetIconState
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_GetBattleTargetIconState final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuBattleTargetState                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_GetBattleTargetIconState) == 0x000008, "Wrong alignment on EndMenuAPI_GetBattleTargetIconState");
static_assert(sizeof(EndMenuAPI_GetBattleTargetIconState) == 0x000010, "Wrong size on EndMenuAPI_GetBattleTargetIconState");
static_assert(offsetof(EndMenuAPI_GetBattleTargetIconState, Icon) == 0x000000, "Member 'EndMenuAPI_GetBattleTargetIconState::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetBattleTargetIconState, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetBattleTargetIconState::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetFadeFilterCurrentColor
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_GetFadeFilterCurrentColor final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetFadeFilterCurrentColor) == 0x000004, "Wrong alignment on EndMenuAPI_GetFadeFilterCurrentColor");
static_assert(sizeof(EndMenuAPI_GetFadeFilterCurrentColor) == 0x000018, "Wrong size on EndMenuAPI_GetFadeFilterCurrentColor");
static_assert(offsetof(EndMenuAPI_GetFadeFilterCurrentColor, Name_0) == 0x000000, "Member 'EndMenuAPI_GetFadeFilterCurrentColor::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetFadeFilterCurrentColor, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetFadeFilterCurrentColor::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetFadeFilterNames
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_GetFadeFilterNames final
{
public:
	TArray<class FName>                           OutNames;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetFadeFilterNames) == 0x000008, "Wrong alignment on EndMenuAPI_GetFadeFilterNames");
static_assert(sizeof(EndMenuAPI_GetFadeFilterNames) == 0x000010, "Wrong size on EndMenuAPI_GetFadeFilterNames");
static_assert(offsetof(EndMenuAPI_GetFadeFilterNames, OutNames) == 0x000000, "Member 'EndMenuAPI_GetFadeFilterNames::OutNames' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetFadeFilterVisibility
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_GetFadeFilterVisibility final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_GetFadeFilterVisibility) == 0x000004, "Wrong alignment on EndMenuAPI_GetFadeFilterVisibility");
static_assert(sizeof(EndMenuAPI_GetFadeFilterVisibility) == 0x00000C, "Wrong size on EndMenuAPI_GetFadeFilterVisibility");
static_assert(offsetof(EndMenuAPI_GetFadeFilterVisibility, Name_0) == 0x000000, "Member 'EndMenuAPI_GetFadeFilterVisibility::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetFadeFilterVisibility, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetFadeFilterVisibility::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetFieldTargetIconState
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_GetFieldTargetIconState final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuFieldTargetState                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_GetFieldTargetIconState) == 0x000008, "Wrong alignment on EndMenuAPI_GetFieldTargetIconState");
static_assert(sizeof(EndMenuAPI_GetFieldTargetIconState) == 0x000010, "Wrong size on EndMenuAPI_GetFieldTargetIconState");
static_assert(offsetof(EndMenuAPI_GetFieldTargetIconState, Icon) == 0x000000, "Member 'EndMenuAPI_GetFieldTargetIconState::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetFieldTargetIconState, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetFieldTargetIconState::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetItemMessageLogIconKind
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_GetItemMessageLogIconKind final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuIconKind                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_GetItemMessageLogIconKind) == 0x000004, "Wrong alignment on EndMenuAPI_GetItemMessageLogIconKind");
static_assert(sizeof(EndMenuAPI_GetItemMessageLogIconKind) == 0x00000C, "Wrong size on EndMenuAPI_GetItemMessageLogIconKind");
static_assert(offsetof(EndMenuAPI_GetItemMessageLogIconKind, ItemId) == 0x000000, "Member 'EndMenuAPI_GetItemMessageLogIconKind::ItemId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetItemMessageLogIconKind, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetItemMessageLogIconKind::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetLocationNameTextID
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_GetLocationNameTextID final
{
public:
	class FName                                   LocationId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetLocationNameTextID) == 0x000008, "Wrong alignment on EndMenuAPI_GetLocationNameTextID");
static_assert(sizeof(EndMenuAPI_GetLocationNameTextID) == 0x000018, "Wrong size on EndMenuAPI_GetLocationNameTextID");
static_assert(offsetof(EndMenuAPI_GetLocationNameTextID, LocationId) == 0x000000, "Member 'EndMenuAPI_GetLocationNameTextID::LocationId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetLocationNameTextID, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetLocationNameTextID::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetMessageWindowSelectedIndex
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_GetMessageWindowSelectedIndex final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_GetMessageWindowSelectedIndex) == 0x000008, "Wrong alignment on EndMenuAPI_GetMessageWindowSelectedIndex");
static_assert(sizeof(EndMenuAPI_GetMessageWindowSelectedIndex) == 0x000010, "Wrong size on EndMenuAPI_GetMessageWindowSelectedIndex");
static_assert(offsetof(EndMenuAPI_GetMessageWindowSelectedIndex, Widget) == 0x000000, "Member 'EndMenuAPI_GetMessageWindowSelectedIndex::Widget' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetMessageWindowSelectedIndex, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetMessageWindowSelectedIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetString
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_GetString final
{
public:
	class FString                                 TextId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetString) == 0x000008, "Wrong alignment on EndMenuAPI_GetString");
static_assert(sizeof(EndMenuAPI_GetString) == 0x000020, "Wrong size on EndMenuAPI_GetString");
static_assert(offsetof(EndMenuAPI_GetString, TextId) == 0x000000, "Member 'EndMenuAPI_GetString::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetString, ReturnValue) == 0x000010, "Member 'EndMenuAPI_GetString::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetWidgetAnimationByName
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_GetWidgetAnimationByName final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetWidgetAnimationByName) == 0x000008, "Wrong alignment on EndMenuAPI_GetWidgetAnimationByName");
static_assert(sizeof(EndMenuAPI_GetWidgetAnimationByName) == 0x000018, "Wrong size on EndMenuAPI_GetWidgetAnimationByName");
static_assert(offsetof(EndMenuAPI_GetWidgetAnimationByName, InWidget) == 0x000000, "Member 'EndMenuAPI_GetWidgetAnimationByName::InWidget' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetWidgetAnimationByName, InName) == 0x000008, "Member 'EndMenuAPI_GetWidgetAnimationByName::InName' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetWidgetAnimationByName, ReturnValue) == 0x000010, "Member 'EndMenuAPI_GetWidgetAnimationByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetWidgetAnimations
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_GetWidgetAnimations final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutNames;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetWidgetAnimations) == 0x000008, "Wrong alignment on EndMenuAPI_GetWidgetAnimations");
static_assert(sizeof(EndMenuAPI_GetWidgetAnimations) == 0x000018, "Wrong size on EndMenuAPI_GetWidgetAnimations");
static_assert(offsetof(EndMenuAPI_GetWidgetAnimations, InWidget) == 0x000000, "Member 'EndMenuAPI_GetWidgetAnimations::InWidget' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetWidgetAnimations, OutNames) == 0x000008, "Member 'EndMenuAPI_GetWidgetAnimations::OutNames' has a wrong offset!");

// Function EndGame.EndMenuAPI.HasFadeFilters
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_HasFadeFilters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HasFadeFilters) == 0x000001, "Wrong alignment on EndMenuAPI_HasFadeFilters");
static_assert(sizeof(EndMenuAPI_HasFadeFilters) == 0x000001, "Wrong size on EndMenuAPI_HasFadeFilters");
static_assert(offsetof(EndMenuAPI_HasFadeFilters, ReturnValue) == 0x000000, "Member 'EndMenuAPI_HasFadeFilters::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.HasFadeFiltersDuringAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_HasFadeFiltersDuringAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HasFadeFiltersDuringAnimation) == 0x000001, "Wrong alignment on EndMenuAPI_HasFadeFiltersDuringAnimation");
static_assert(sizeof(EndMenuAPI_HasFadeFiltersDuringAnimation) == 0x000001, "Wrong size on EndMenuAPI_HasFadeFiltersDuringAnimation");
static_assert(offsetof(EndMenuAPI_HasFadeFiltersDuringAnimation, ReturnValue) == 0x000000, "Member 'EndMenuAPI_HasFadeFiltersDuringAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.HideBattleTargetIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_HideBattleTargetIcon final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HideBattleTargetIcon) == 0x000008, "Wrong alignment on EndMenuAPI_HideBattleTargetIcon");
static_assert(sizeof(EndMenuAPI_HideBattleTargetIcon) == 0x000008, "Wrong size on EndMenuAPI_HideBattleTargetIcon");
static_assert(offsetof(EndMenuAPI_HideBattleTargetIcon, Icon) == 0x000000, "Member 'EndMenuAPI_HideBattleTargetIcon::Icon' has a wrong offset!");

// Function EndGame.EndMenuAPI.HideFieldPane
// 0x0002 (0x0002 - 0x0000)
struct EndMenuAPI_HideFieldPane final
{
public:
	EEndMenuFieldPaneType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommandReset;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HideFieldPane) == 0x000001, "Wrong alignment on EndMenuAPI_HideFieldPane");
static_assert(sizeof(EndMenuAPI_HideFieldPane) == 0x000002, "Wrong size on EndMenuAPI_HideFieldPane");
static_assert(offsetof(EndMenuAPI_HideFieldPane, Type) == 0x000000, "Member 'EndMenuAPI_HideFieldPane::Type' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_HideFieldPane, bCommandReset) == 0x000001, "Member 'EndMenuAPI_HideFieldPane::bCommandReset' has a wrong offset!");

// Function EndGame.EndMenuAPI.HideFieldTargetIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_HideFieldTargetIcon final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HideFieldTargetIcon) == 0x000008, "Wrong alignment on EndMenuAPI_HideFieldTargetIcon");
static_assert(sizeof(EndMenuAPI_HideFieldTargetIcon) == 0x000008, "Wrong size on EndMenuAPI_HideFieldTargetIcon");
static_assert(offsetof(EndMenuAPI_HideFieldTargetIcon, Icon) == 0x000000, "Member 'EndMenuAPI_HideFieldTargetIcon::Icon' has a wrong offset!");

// Function EndGame.EndMenuAPI.HideMessageWindow
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_HideMessageWindow final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HideMessageWindow) == 0x000008, "Wrong alignment on EndMenuAPI_HideMessageWindow");
static_assert(sizeof(EndMenuAPI_HideMessageWindow) == 0x000008, "Wrong size on EndMenuAPI_HideMessageWindow");
static_assert(offsetof(EndMenuAPI_HideMessageWindow, Widget) == 0x000000, "Member 'EndMenuAPI_HideMessageWindow::Widget' has a wrong offset!");

// Function EndGame.EndMenuAPI.HideSubtitle
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_HideSubtitle final
{
public:
	class FString                                 TextId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HideSubtitle) == 0x000008, "Wrong alignment on EndMenuAPI_HideSubtitle");
static_assert(sizeof(EndMenuAPI_HideSubtitle) == 0x000010, "Wrong size on EndMenuAPI_HideSubtitle");
static_assert(offsetof(EndMenuAPI_HideSubtitle, TextId) == 0x000000, "Member 'EndMenuAPI_HideSubtitle::TextId' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsFadeFilter
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_IsFadeFilter final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_IsFadeFilter) == 0x000004, "Wrong alignment on EndMenuAPI_IsFadeFilter");
static_assert(sizeof(EndMenuAPI_IsFadeFilter) == 0x00000C, "Wrong size on EndMenuAPI_IsFadeFilter");
static_assert(offsetof(EndMenuAPI_IsFadeFilter, Name_0) == 0x000000, "Member 'EndMenuAPI_IsFadeFilter::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsFadeFilter, ReturnValue) == 0x000008, "Member 'EndMenuAPI_IsFadeFilter::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsFadeFilterDuringAnimation
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_IsFadeFilterDuringAnimation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_IsFadeFilterDuringAnimation) == 0x000004, "Wrong alignment on EndMenuAPI_IsFadeFilterDuringAnimation");
static_assert(sizeof(EndMenuAPI_IsFadeFilterDuringAnimation) == 0x00000C, "Wrong size on EndMenuAPI_IsFadeFilterDuringAnimation");
static_assert(offsetof(EndMenuAPI_IsFadeFilterDuringAnimation, Name_0) == 0x000000, "Member 'EndMenuAPI_IsFadeFilterDuringAnimation::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsFadeFilterDuringAnimation, ReturnValue) == 0x000008, "Member 'EndMenuAPI_IsFadeFilterDuringAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsFieldMenuLinkupActive
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_IsFieldMenuLinkupActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_IsFieldMenuLinkupActive) == 0x000001, "Wrong alignment on EndMenuAPI_IsFieldMenuLinkupActive");
static_assert(sizeof(EndMenuAPI_IsFieldMenuLinkupActive) == 0x000001, "Wrong size on EndMenuAPI_IsFieldMenuLinkupActive");
static_assert(offsetof(EndMenuAPI_IsFieldMenuLinkupActive, ReturnValue) == 0x000000, "Member 'EndMenuAPI_IsFieldMenuLinkupActive::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsFieldMenuLinkupWindowOpen
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_IsFieldMenuLinkupWindowOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_IsFieldMenuLinkupWindowOpen) == 0x000001, "Wrong alignment on EndMenuAPI_IsFieldMenuLinkupWindowOpen");
static_assert(sizeof(EndMenuAPI_IsFieldMenuLinkupWindowOpen) == 0x000001, "Wrong size on EndMenuAPI_IsFieldMenuLinkupWindowOpen");
static_assert(offsetof(EndMenuAPI_IsFieldMenuLinkupWindowOpen, ReturnValue) == 0x000000, "Member 'EndMenuAPI_IsFieldMenuLinkupWindowOpen::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsFieldMenuShortcutActive
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_IsFieldMenuShortcutActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_IsFieldMenuShortcutActive) == 0x000001, "Wrong alignment on EndMenuAPI_IsFieldMenuShortcutActive");
static_assert(sizeof(EndMenuAPI_IsFieldMenuShortcutActive) == 0x000001, "Wrong size on EndMenuAPI_IsFieldMenuShortcutActive");
static_assert(offsetof(EndMenuAPI_IsFieldMenuShortcutActive, ReturnValue) == 0x000000, "Member 'EndMenuAPI_IsFieldMenuShortcutActive::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsFieldMenuStatus
// 0x0002 (0x0002 - 0x0000)
struct EndMenuAPI_IsFieldMenuStatus final
{
public:
	EEndMenuFieldMenuStatus                       Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_IsFieldMenuStatus) == 0x000001, "Wrong alignment on EndMenuAPI_IsFieldMenuStatus");
static_assert(sizeof(EndMenuAPI_IsFieldMenuStatus) == 0x000002, "Wrong size on EndMenuAPI_IsFieldMenuStatus");
static_assert(offsetof(EndMenuAPI_IsFieldMenuStatus, Status) == 0x000000, "Member 'EndMenuAPI_IsFieldMenuStatus::Status' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsFieldMenuStatus, ReturnValue) == 0x000001, "Member 'EndMenuAPI_IsFieldMenuStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsJoinLeftUpdate
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_IsJoinLeftUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_IsJoinLeftUpdate) == 0x000001, "Wrong alignment on EndMenuAPI_IsJoinLeftUpdate");
static_assert(sizeof(EndMenuAPI_IsJoinLeftUpdate) == 0x000001, "Wrong size on EndMenuAPI_IsJoinLeftUpdate");
static_assert(offsetof(EndMenuAPI_IsJoinLeftUpdate, ReturnValue) == 0x000000, "Member 'EndMenuAPI_IsJoinLeftUpdate::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsMessageWindowClosed
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_IsMessageWindowClosed final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_IsMessageWindowClosed) == 0x000008, "Wrong alignment on EndMenuAPI_IsMessageWindowClosed");
static_assert(sizeof(EndMenuAPI_IsMessageWindowClosed) == 0x000010, "Wrong size on EndMenuAPI_IsMessageWindowClosed");
static_assert(offsetof(EndMenuAPI_IsMessageWindowClosed, Widget) == 0x000000, "Member 'EndMenuAPI_IsMessageWindowClosed::Widget' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsMessageWindowClosed, ReturnValue) == 0x000008, "Member 'EndMenuAPI_IsMessageWindowClosed::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsPauseMenuClosed
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_IsPauseMenuClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_IsPauseMenuClosed) == 0x000001, "Wrong alignment on EndMenuAPI_IsPauseMenuClosed");
static_assert(sizeof(EndMenuAPI_IsPauseMenuClosed) == 0x000001, "Wrong size on EndMenuAPI_IsPauseMenuClosed");
static_assert(offsetof(EndMenuAPI_IsPauseMenuClosed, ReturnValue) == 0x000000, "Member 'EndMenuAPI_IsPauseMenuClosed::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsSubtitleClosed
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_IsSubtitleClosed final
{
public:
	class FString                                 TextId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_IsSubtitleClosed) == 0x000008, "Wrong alignment on EndMenuAPI_IsSubtitleClosed");
static_assert(sizeof(EndMenuAPI_IsSubtitleClosed) == 0x000018, "Wrong size on EndMenuAPI_IsSubtitleClosed");
static_assert(offsetof(EndMenuAPI_IsSubtitleClosed, TextId) == 0x000000, "Member 'EndMenuAPI_IsSubtitleClosed::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsSubtitleClosed, ReturnValue) == 0x000010, "Member 'EndMenuAPI_IsSubtitleClosed::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.Key_IsVirtualAccept
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_Key_IsVirtualAccept final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_Key_IsVirtualAccept) == 0x000008, "Wrong alignment on EndMenuAPI_Key_IsVirtualAccept");
static_assert(sizeof(EndMenuAPI_Key_IsVirtualAccept) == 0x000020, "Wrong size on EndMenuAPI_Key_IsVirtualAccept");
static_assert(offsetof(EndMenuAPI_Key_IsVirtualAccept, Key) == 0x000000, "Member 'EndMenuAPI_Key_IsVirtualAccept::Key' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_Key_IsVirtualAccept, ReturnValue) == 0x000018, "Member 'EndMenuAPI_Key_IsVirtualAccept::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.Key_IsVirtualBack
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_Key_IsVirtualBack final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_Key_IsVirtualBack) == 0x000008, "Wrong alignment on EndMenuAPI_Key_IsVirtualBack");
static_assert(sizeof(EndMenuAPI_Key_IsVirtualBack) == 0x000020, "Wrong size on EndMenuAPI_Key_IsVirtualBack");
static_assert(offsetof(EndMenuAPI_Key_IsVirtualBack, Key) == 0x000000, "Member 'EndMenuAPI_Key_IsVirtualBack::Key' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_Key_IsVirtualBack, ReturnValue) == 0x000018, "Member 'EndMenuAPI_Key_IsVirtualBack::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.LocationNameExists
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_LocationNameExists final
{
public:
	class FString                                 TextId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_LocationNameExists) == 0x000008, "Wrong alignment on EndMenuAPI_LocationNameExists");
static_assert(sizeof(EndMenuAPI_LocationNameExists) == 0x000018, "Wrong size on EndMenuAPI_LocationNameExists");
static_assert(offsetof(EndMenuAPI_LocationNameExists, TextId) == 0x000000, "Member 'EndMenuAPI_LocationNameExists::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_LocationNameExists, ReturnValue) == 0x000010, "Member 'EndMenuAPI_LocationNameExists::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.MakeSoftClassPtr
// 0x0038 (0x0038 - 0x0000)
struct EndMenuAPI_MakeSoftClassPtr final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_MakeSoftClassPtr) == 0x000008, "Wrong alignment on EndMenuAPI_MakeSoftClassPtr");
static_assert(sizeof(EndMenuAPI_MakeSoftClassPtr) == 0x000038, "Wrong size on EndMenuAPI_MakeSoftClassPtr");
static_assert(offsetof(EndMenuAPI_MakeSoftClassPtr, inString) == 0x000000, "Member 'EndMenuAPI_MakeSoftClassPtr::inString' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_MakeSoftClassPtr, ReturnValue) == 0x000010, "Member 'EndMenuAPI_MakeSoftClassPtr::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.Need4KFont
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_Need4KFont final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_Need4KFont) == 0x000001, "Wrong alignment on EndMenuAPI_Need4KFont");
static_assert(sizeof(EndMenuAPI_Need4KFont) == 0x000001, "Wrong size on EndMenuAPI_Need4KFont");
static_assert(offsetof(EndMenuAPI_Need4KFont, ReturnValue) == 0x000000, "Member 'EndMenuAPI_Need4KFont::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.NeedMagnifyFont
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_NeedMagnifyFont final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_NeedMagnifyFont) == 0x000001, "Wrong alignment on EndMenuAPI_NeedMagnifyFont");
static_assert(sizeof(EndMenuAPI_NeedMagnifyFont) == 0x000001, "Wrong size on EndMenuAPI_NeedMagnifyFont");
static_assert(offsetof(EndMenuAPI_NeedMagnifyFont, ReturnValue) == 0x000000, "Member 'EndMenuAPI_NeedMagnifyFont::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.RemoveFadeFilter
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_RemoveFadeFilter final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         removeDelayFrame;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_RemoveFadeFilter) == 0x000004, "Wrong alignment on EndMenuAPI_RemoveFadeFilter");
static_assert(sizeof(EndMenuAPI_RemoveFadeFilter) == 0x00000C, "Wrong size on EndMenuAPI_RemoveFadeFilter");
static_assert(offsetof(EndMenuAPI_RemoveFadeFilter, Name_0) == 0x000000, "Member 'EndMenuAPI_RemoveFadeFilter::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_RemoveFadeFilter, removeDelayFrame) == 0x000008, "Member 'EndMenuAPI_RemoveFadeFilter::removeDelayFrame' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetBattleEnemyStatusWindowPosition
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_SetBattleEnemyStatusWindowPosition final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetBattleEnemyStatusWindowPosition) == 0x000008, "Wrong alignment on EndMenuAPI_SetBattleEnemyStatusWindowPosition");
static_assert(sizeof(EndMenuAPI_SetBattleEnemyStatusWindowPosition) == 0x000018, "Wrong size on EndMenuAPI_SetBattleEnemyStatusWindowPosition");
static_assert(offsetof(EndMenuAPI_SetBattleEnemyStatusWindowPosition, Icon) == 0x000000, "Member 'EndMenuAPI_SetBattleEnemyStatusWindowPosition::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetBattleEnemyStatusWindowPosition, WorldPosition) == 0x000008, "Member 'EndMenuAPI_SetBattleEnemyStatusWindowPosition::WorldPosition' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetBattleTargetIconActor
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_SetBattleTargetIconActor final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetBattleTargetIconActor) == 0x000008, "Wrong alignment on EndMenuAPI_SetBattleTargetIconActor");
static_assert(sizeof(EndMenuAPI_SetBattleTargetIconActor) == 0x000010, "Wrong size on EndMenuAPI_SetBattleTargetIconActor");
static_assert(offsetof(EndMenuAPI_SetBattleTargetIconActor, Icon) == 0x000000, "Member 'EndMenuAPI_SetBattleTargetIconActor::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetBattleTargetIconActor, Actor) == 0x000008, "Member 'EndMenuAPI_SetBattleTargetIconActor::Actor' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetBattleTargetIconPosition
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_SetBattleTargetIconPosition final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetBattleTargetIconPosition) == 0x000008, "Wrong alignment on EndMenuAPI_SetBattleTargetIconPosition");
static_assert(sizeof(EndMenuAPI_SetBattleTargetIconPosition) == 0x000018, "Wrong size on EndMenuAPI_SetBattleTargetIconPosition");
static_assert(offsetof(EndMenuAPI_SetBattleTargetIconPosition, Icon) == 0x000000, "Member 'EndMenuAPI_SetBattleTargetIconPosition::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetBattleTargetIconPosition, WorldPosition) == 0x000008, "Member 'EndMenuAPI_SetBattleTargetIconPosition::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetBattleTargetIconPosition, ReturnValue) == 0x000014, "Member 'EndMenuAPI_SetBattleTargetIconPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFadeFilterVisibility
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_SetFadeFilterVisibility final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetFadeFilterVisibility) == 0x000004, "Wrong alignment on EndMenuAPI_SetFadeFilterVisibility");
static_assert(sizeof(EndMenuAPI_SetFadeFilterVisibility) == 0x00000C, "Wrong size on EndMenuAPI_SetFadeFilterVisibility");
static_assert(offsetof(EndMenuAPI_SetFadeFilterVisibility, Name_0) == 0x000000, "Member 'EndMenuAPI_SetFadeFilterVisibility::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetFadeFilterVisibility, bVisible) == 0x000008, "Member 'EndMenuAPI_SetFadeFilterVisibility::bVisible' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFieldMenuInBattle
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_SetFieldMenuInBattle final
{
public:
	bool                                          bInInBattle;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetFieldMenuInBattle) == 0x000001, "Wrong alignment on EndMenuAPI_SetFieldMenuInBattle");
static_assert(sizeof(EndMenuAPI_SetFieldMenuInBattle) == 0x000001, "Wrong size on EndMenuAPI_SetFieldMenuInBattle");
static_assert(offsetof(EndMenuAPI_SetFieldMenuInBattle, bInInBattle) == 0x000000, "Member 'EndMenuAPI_SetFieldMenuInBattle::bInInBattle' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFieldTargetIconHoldGauge
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_SetFieldTargetIconHoldGauge final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         aGauge;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetFieldTargetIconHoldGauge) == 0x000008, "Wrong alignment on EndMenuAPI_SetFieldTargetIconHoldGauge");
static_assert(sizeof(EndMenuAPI_SetFieldTargetIconHoldGauge) == 0x000010, "Wrong size on EndMenuAPI_SetFieldTargetIconHoldGauge");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconHoldGauge, Icon) == 0x000000, "Member 'EndMenuAPI_SetFieldTargetIconHoldGauge::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconHoldGauge, aGauge) == 0x000008, "Member 'EndMenuAPI_SetFieldTargetIconHoldGauge::aGauge' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFieldTargetIconPosition
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_SetFieldTargetIconPosition final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetFieldTargetIconPosition) == 0x000008, "Wrong alignment on EndMenuAPI_SetFieldTargetIconPosition");
static_assert(sizeof(EndMenuAPI_SetFieldTargetIconPosition) == 0x000018, "Wrong size on EndMenuAPI_SetFieldTargetIconPosition");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconPosition, Icon) == 0x000000, "Member 'EndMenuAPI_SetFieldTargetIconPosition::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconPosition, WorldPosition) == 0x000008, "Member 'EndMenuAPI_SetFieldTargetIconPosition::WorldPosition' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFieldTargetIconRange
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_SetFieldTargetIconRange final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         aRange;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetFieldTargetIconRange) == 0x000008, "Wrong alignment on EndMenuAPI_SetFieldTargetIconRange");
static_assert(sizeof(EndMenuAPI_SetFieldTargetIconRange) == 0x000010, "Wrong size on EndMenuAPI_SetFieldTargetIconRange");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconRange, Icon) == 0x000000, "Member 'EndMenuAPI_SetFieldTargetIconRange::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconRange, aRange) == 0x000008, "Member 'EndMenuAPI_SetFieldTargetIconRange::aRange' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFieldTargetIconRangeText
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_SetFieldTargetIconRangeText final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         aRange;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetFieldTargetIconRangeText) == 0x000008, "Wrong alignment on EndMenuAPI_SetFieldTargetIconRangeText");
static_assert(sizeof(EndMenuAPI_SetFieldTargetIconRangeText) == 0x000010, "Wrong size on EndMenuAPI_SetFieldTargetIconRangeText");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconRangeText, Icon) == 0x000000, "Member 'EndMenuAPI_SetFieldTargetIconRangeText::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconRangeText, aRange) == 0x000008, "Member 'EndMenuAPI_SetFieldTargetIconRangeText::aRange' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFocusBrushBySlateColor
// 0x0028 (0x0028 - 0x0000)
struct EndMenuAPI_SetFocusBrushBySlateColor final
{
public:
	struct FSlateColor                            InColor;                                           // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetFocusBrushBySlateColor) == 0x000008, "Wrong alignment on EndMenuAPI_SetFocusBrushBySlateColor");
static_assert(sizeof(EndMenuAPI_SetFocusBrushBySlateColor) == 0x000028, "Wrong size on EndMenuAPI_SetFocusBrushBySlateColor");
static_assert(offsetof(EndMenuAPI_SetFocusBrushBySlateColor, InColor) == 0x000000, "Member 'EndMenuAPI_SetFocusBrushBySlateColor::InColor' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFocusToWidget
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_SetFocusToWidget final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetFocusToWidget) == 0x000008, "Wrong alignment on EndMenuAPI_SetFocusToWidget");
static_assert(sizeof(EndMenuAPI_SetFocusToWidget) == 0x000008, "Wrong size on EndMenuAPI_SetFocusToWidget");
static_assert(offsetof(EndMenuAPI_SetFocusToWidget, InWidget) == 0x000000, "Member 'EndMenuAPI_SetFocusToWidget::InWidget' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetNavimapInBattle
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_SetNavimapInBattle final
{
public:
	bool                                          bInInBattle;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetNavimapInBattle) == 0x000001, "Wrong alignment on EndMenuAPI_SetNavimapInBattle");
static_assert(sizeof(EndMenuAPI_SetNavimapInBattle) == 0x000001, "Wrong size on EndMenuAPI_SetNavimapInBattle");
static_assert(offsetof(EndMenuAPI_SetNavimapInBattle, bInInBattle) == 0x000000, "Member 'EndMenuAPI_SetNavimapInBattle::bInInBattle' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetVirtualAcceptRight
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_SetVirtualAcceptRight final
{
public:
	bool                                          bRight;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetVirtualAcceptRight) == 0x000001, "Wrong alignment on EndMenuAPI_SetVirtualAcceptRight");
static_assert(sizeof(EndMenuAPI_SetVirtualAcceptRight) == 0x000001, "Wrong size on EndMenuAPI_SetVirtualAcceptRight");
static_assert(offsetof(EndMenuAPI_SetVirtualAcceptRight, bRight) == 0x000000, "Member 'EndMenuAPI_SetVirtualAcceptRight::bRight' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowAreaName
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_ShowAreaName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowAreaName) == 0x000008, "Wrong alignment on EndMenuAPI_ShowAreaName");
static_assert(sizeof(EndMenuAPI_ShowAreaName) == 0x000018, "Wrong size on EndMenuAPI_ShowAreaName");
static_assert(offsetof(EndMenuAPI_ShowAreaName, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowAreaName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowAreaName, TextId) == 0x000008, "Member 'EndMenuAPI_ShowAreaName::TextId' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowBattleEnemyStatusWindow
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowBattleEnemyStatusWindow final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowBattleEnemyStatusWindow) == 0x000008, "Wrong alignment on EndMenuAPI_ShowBattleEnemyStatusWindow");
static_assert(sizeof(EndMenuAPI_ShowBattleEnemyStatusWindow) == 0x000008, "Wrong size on EndMenuAPI_ShowBattleEnemyStatusWindow");
static_assert(offsetof(EndMenuAPI_ShowBattleEnemyStatusWindow, ReturnValue) == 0x000000, "Member 'EndMenuAPI_ShowBattleEnemyStatusWindow::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowBattlePlayerStatusWindow
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowBattlePlayerStatusWindow final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowBattlePlayerStatusWindow) == 0x000008, "Wrong alignment on EndMenuAPI_ShowBattlePlayerStatusWindow");
static_assert(sizeof(EndMenuAPI_ShowBattlePlayerStatusWindow) == 0x000008, "Wrong size on EndMenuAPI_ShowBattlePlayerStatusWindow");
static_assert(offsetof(EndMenuAPI_ShowBattlePlayerStatusWindow, ReturnValue) == 0x000000, "Member 'EndMenuAPI_ShowBattlePlayerStatusWindow::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowBattleTargetIcon
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_ShowBattleTargetIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuBattleTargetState                     State;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowBattleTargetIcon) == 0x000008, "Wrong alignment on EndMenuAPI_ShowBattleTargetIcon");
static_assert(sizeof(EndMenuAPI_ShowBattleTargetIcon) == 0x000020, "Wrong size on EndMenuAPI_ShowBattleTargetIcon");
static_assert(offsetof(EndMenuAPI_ShowBattleTargetIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowBattleTargetIcon::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowBattleTargetIcon, WorldPosition) == 0x000008, "Member 'EndMenuAPI_ShowBattleTargetIcon::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowBattleTargetIcon, State) == 0x000014, "Member 'EndMenuAPI_ShowBattleTargetIcon::State' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowBattleTargetIcon, ReturnValue) == 0x000018, "Member 'EndMenuAPI_ShowBattleTargetIcon::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowChapterName
// 0x0030 (0x0030 - 0x0000)
struct EndMenuAPI_ShowChapterName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnTextId;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopTime;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ShowChapterName) == 0x000008, "Wrong alignment on EndMenuAPI_ShowChapterName");
static_assert(sizeof(EndMenuAPI_ShowChapterName) == 0x000030, "Wrong size on EndMenuAPI_ShowChapterName");
static_assert(offsetof(EndMenuAPI_ShowChapterName, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowChapterName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowChapterName, TextId) == 0x000008, "Member 'EndMenuAPI_ShowChapterName::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowChapterName, EnTextId) == 0x000018, "Member 'EndMenuAPI_ShowChapterName::EnTextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowChapterName, LoopTime) == 0x000028, "Member 'EndMenuAPI_ShowChapterName::LoopTime' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowDamagePopupMessage
// 0x0040 (0x0040 - 0x0000)
struct EndMenuAPI_ShowDamagePopupMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuPopupMessageKind                      Kind;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndMenuDamageInfo                     Info;                                              // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowDamagePopupMessage) == 0x000008, "Wrong alignment on EndMenuAPI_ShowDamagePopupMessage");
static_assert(sizeof(EndMenuAPI_ShowDamagePopupMessage) == 0x000040, "Wrong size on EndMenuAPI_ShowDamagePopupMessage");
static_assert(offsetof(EndMenuAPI_ShowDamagePopupMessage, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowDamagePopupMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDamagePopupMessage, Actor) == 0x000008, "Member 'EndMenuAPI_ShowDamagePopupMessage::Actor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDamagePopupMessage, WorldPosition) == 0x000010, "Member 'EndMenuAPI_ShowDamagePopupMessage::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDamagePopupMessage, Kind) == 0x00001C, "Member 'EndMenuAPI_ShowDamagePopupMessage::Kind' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDamagePopupMessage, Info) == 0x000020, "Member 'EndMenuAPI_ShowDamagePopupMessage::Info' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowDebugListBox
// 0x0050 (0x0050 - 0x0000)
struct EndMenuAPI_ShowDebugListBox final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InStringArray;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InWidth;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSingleNodeAutoClick;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutString;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowDebugListBox) == 0x000008, "Wrong alignment on EndMenuAPI_ShowDebugListBox");
static_assert(sizeof(EndMenuAPI_ShowDebugListBox) == 0x000050, "Wrong size on EndMenuAPI_ShowDebugListBox");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowDebugListBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, InStringArray) == 0x000008, "Member 'EndMenuAPI_ShowDebugListBox::InStringArray' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, InWidth) == 0x000018, "Member 'EndMenuAPI_ShowDebugListBox::InWidth' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, InHeight) == 0x00001C, "Member 'EndMenuAPI_ShowDebugListBox::InHeight' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, InSingleNodeAutoClick) == 0x000020, "Member 'EndMenuAPI_ShowDebugListBox::InSingleNodeAutoClick' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, OutString) == 0x000028, "Member 'EndMenuAPI_ShowDebugListBox::OutString' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, LatentInfo) == 0x000038, "Member 'EndMenuAPI_ShowDebugListBox::LatentInfo' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowFieldMenu
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowFieldMenu final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowFieldMenu) == 0x000008, "Wrong alignment on EndMenuAPI_ShowFieldMenu");
static_assert(sizeof(EndMenuAPI_ShowFieldMenu) == 0x000008, "Wrong size on EndMenuAPI_ShowFieldMenu");
static_assert(offsetof(EndMenuAPI_ShowFieldMenu, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowFieldMenu::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowFieldPane
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_ShowFieldPane final
{
public:
	EEndMenuFieldPaneType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowFieldPane) == 0x000001, "Wrong alignment on EndMenuAPI_ShowFieldPane");
static_assert(sizeof(EndMenuAPI_ShowFieldPane) == 0x000001, "Wrong size on EndMenuAPI_ShowFieldPane");
static_assert(offsetof(EndMenuAPI_ShowFieldPane, Type) == 0x000000, "Member 'EndMenuAPI_ShowFieldPane::Type' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowFieldTargetIcon
// 0x0028 (0x0028 - 0x0000)
struct EndMenuAPI_ShowFieldTargetIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuFieldTargetState                      State;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuFieldTargetIconType                   aType;                                             // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InName;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowFieldTargetIcon) == 0x000008, "Wrong alignment on EndMenuAPI_ShowFieldTargetIcon");
static_assert(sizeof(EndMenuAPI_ShowFieldTargetIcon) == 0x000028, "Wrong size on EndMenuAPI_ShowFieldTargetIcon");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowFieldTargetIcon::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, WorldPosition) == 0x000008, "Member 'EndMenuAPI_ShowFieldTargetIcon::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, State) == 0x000014, "Member 'EndMenuAPI_ShowFieldTargetIcon::State' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, aType) == 0x000015, "Member 'EndMenuAPI_ShowFieldTargetIcon::aType' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, InName) == 0x000018, "Member 'EndMenuAPI_ShowFieldTargetIcon::InName' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, ReturnValue) == 0x000020, "Member 'EndMenuAPI_ShowFieldTargetIcon::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowLoadingIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowLoadingIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowLoadingIcon) == 0x000008, "Wrong alignment on EndMenuAPI_ShowLoadingIcon");
static_assert(sizeof(EndMenuAPI_ShowLoadingIcon) == 0x000008, "Wrong size on EndMenuAPI_ShowLoadingIcon");
static_assert(offsetof(EndMenuAPI_ShowLoadingIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowLoadingIcon::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowLoadingScreen
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_ShowLoadingScreen final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationId;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLocationTip;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ShowLoadingScreen) == 0x000008, "Wrong alignment on EndMenuAPI_ShowLoadingScreen");
static_assert(sizeof(EndMenuAPI_ShowLoadingScreen) == 0x000018, "Wrong size on EndMenuAPI_ShowLoadingScreen");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreen, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowLoadingScreen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreen, LocationId) == 0x000008, "Member 'EndMenuAPI_ShowLoadingScreen::LocationId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreen, ShowLocationTip) == 0x000010, "Member 'EndMenuAPI_ShowLoadingScreen::ShowLocationTip' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowLoadingScreenForChocoboFastTravel
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_ShowLoadingScreenForChocoboFastTravel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChocoboText;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationId;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowLoadingScreenForChocoboFastTravel) == 0x000008, "Wrong alignment on EndMenuAPI_ShowLoadingScreenForChocoboFastTravel");
static_assert(sizeof(EndMenuAPI_ShowLoadingScreenForChocoboFastTravel) == 0x000020, "Wrong size on EndMenuAPI_ShowLoadingScreenForChocoboFastTravel");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreenForChocoboFastTravel, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowLoadingScreenForChocoboFastTravel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreenForChocoboFastTravel, ChocoboText) == 0x000008, "Member 'EndMenuAPI_ShowLoadingScreenForChocoboFastTravel::ChocoboText' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreenForChocoboFastTravel, LocationId) == 0x000018, "Member 'EndMenuAPI_ShowLoadingScreenForChocoboFastTravel::LocationId' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowLocationName
// 0x0028 (0x0028 - 0x0000)
struct EndMenuAPI_ShowLocationName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnTextId;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowLocationName) == 0x000008, "Wrong alignment on EndMenuAPI_ShowLocationName");
static_assert(sizeof(EndMenuAPI_ShowLocationName) == 0x000028, "Wrong size on EndMenuAPI_ShowLocationName");
static_assert(offsetof(EndMenuAPI_ShowLocationName, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowLocationName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLocationName, TextId) == 0x000008, "Member 'EndMenuAPI_ShowLocationName::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLocationName, EnTextId) == 0x000018, "Member 'EndMenuAPI_ShowLocationName::EnTextId' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowMessageLogs
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowMessageLogs final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowMessageLogs) == 0x000008, "Wrong alignment on EndMenuAPI_ShowMessageLogs");
static_assert(sizeof(EndMenuAPI_ShowMessageLogs) == 0x000008, "Wrong size on EndMenuAPI_ShowMessageLogs");
static_assert(offsetof(EndMenuAPI_ShowMessageLogs, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowMessageLogs::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowMessageWindow
// 0x0038 (0x0038 - 0x0000)
struct EndMenuAPI_ShowMessageWindow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OptionTextIds;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EEndMenuMessageWindowFlags                    Flags_0;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowMessageWindow) == 0x000008, "Wrong alignment on EndMenuAPI_ShowMessageWindow");
static_assert(sizeof(EndMenuAPI_ShowMessageWindow) == 0x000038, "Wrong size on EndMenuAPI_ShowMessageWindow");
static_assert(offsetof(EndMenuAPI_ShowMessageWindow, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowMessageWindow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowMessageWindow, TextId) == 0x000008, "Member 'EndMenuAPI_ShowMessageWindow::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowMessageWindow, OptionTextIds) == 0x000018, "Member 'EndMenuAPI_ShowMessageWindow::OptionTextIds' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowMessageWindow, Flags_0) == 0x000028, "Member 'EndMenuAPI_ShowMessageWindow::Flags_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowMessageWindow, ReturnValue) == 0x000030, "Member 'EndMenuAPI_ShowMessageWindow::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowMovie
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_ShowMovie final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowMovie) == 0x000008, "Wrong alignment on EndMenuAPI_ShowMovie");
static_assert(sizeof(EndMenuAPI_ShowMovie) == 0x000010, "Wrong size on EndMenuAPI_ShowMovie");
static_assert(offsetof(EndMenuAPI_ShowMovie, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowMovie::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowMovie, Material) == 0x000008, "Member 'EndMenuAPI_ShowMovie::Material' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowPauseMenu
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_ShowPauseMenu final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuPauseMode                             Mode;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ShowPauseMenu) == 0x000008, "Wrong alignment on EndMenuAPI_ShowPauseMenu");
static_assert(sizeof(EndMenuAPI_ShowPauseMenu) == 0x000010, "Wrong size on EndMenuAPI_ShowPauseMenu");
static_assert(offsetof(EndMenuAPI_ShowPauseMenu, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowPauseMenu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowPauseMenu, Mode) == 0x000008, "Member 'EndMenuAPI_ShowPauseMenu::Mode' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowSkippingIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowSkippingIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowSkippingIcon) == 0x000008, "Wrong alignment on EndMenuAPI_ShowSkippingIcon");
static_assert(sizeof(EndMenuAPI_ShowSkippingIcon) == 0x000008, "Wrong size on EndMenuAPI_ShowSkippingIcon");
static_assert(offsetof(EndMenuAPI_ShowSkippingIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowSkippingIcon::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowSubtitle
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_ShowSubtitle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitKey;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bArrowHidden;                                      // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForce;                                          // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ShowSubtitle) == 0x000008, "Wrong alignment on EndMenuAPI_ShowSubtitle");
static_assert(sizeof(EndMenuAPI_ShowSubtitle) == 0x000020, "Wrong size on EndMenuAPI_ShowSubtitle");
static_assert(offsetof(EndMenuAPI_ShowSubtitle, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowSubtitle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowSubtitle, TextId) == 0x000008, "Member 'EndMenuAPI_ShowSubtitle::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowSubtitle, bWaitKey) == 0x000018, "Member 'EndMenuAPI_ShowSubtitle::bWaitKey' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowSubtitle, bArrowHidden) == 0x000019, "Member 'EndMenuAPI_ShowSubtitle::bArrowHidden' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowSubtitle, bInForce) == 0x00001A, "Member 'EndMenuAPI_ShowSubtitle::bInForce' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowTalkLogs
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowTalkLogs final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowTalkLogs) == 0x000008, "Wrong alignment on EndMenuAPI_ShowTalkLogs");
static_assert(sizeof(EndMenuAPI_ShowTalkLogs) == 0x000008, "Wrong size on EndMenuAPI_ShowTalkLogs");
static_assert(offsetof(EndMenuAPI_ShowTalkLogs, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowTalkLogs::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.SituationNameExists
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_SituationNameExists final
{
public:
	class FString                                 TextId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SituationNameExists) == 0x000008, "Wrong alignment on EndMenuAPI_SituationNameExists");
static_assert(sizeof(EndMenuAPI_SituationNameExists) == 0x000018, "Wrong size on EndMenuAPI_SituationNameExists");
static_assert(offsetof(EndMenuAPI_SituationNameExists, TextId) == 0x000000, "Member 'EndMenuAPI_SituationNameExists::TextId' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SituationNameExists, ReturnValue) == 0x000010, "Member 'EndMenuAPI_SituationNameExists::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.UpdateMenu
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_UpdateMenu final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_UpdateMenu) == 0x000004, "Wrong alignment on EndMenuAPI_UpdateMenu");
static_assert(sizeof(EndMenuAPI_UpdateMenu) == 0x000004, "Wrong size on EndMenuAPI_UpdateMenu");
static_assert(offsetof(EndMenuAPI_UpdateMenu, DeltaSeconds) == 0x000000, "Member 'EndMenuAPI_UpdateMenu::DeltaSeconds' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsBattleTargetIconActor
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_IsBattleTargetIconActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_IsBattleTargetIconActor) == 0x000008, "Wrong alignment on EndMenuAPI_IsBattleTargetIconActor");
static_assert(sizeof(EndMenuAPI_IsBattleTargetIconActor) == 0x000010, "Wrong size on EndMenuAPI_IsBattleTargetIconActor");
static_assert(offsetof(EndMenuAPI_IsBattleTargetIconActor, Actor) == 0x000000, "Member 'EndMenuAPI_IsBattleTargetIconActor::Actor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsBattleTargetIconActor, ReturnValue) == 0x000008, "Member 'EndMenuAPI_IsBattleTargetIconActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndActionTorokkoPlayerController.OnBoxDestroyedCallback
// 0x0008 (0x0008 - 0x0000)
struct EndActionTorokkoPlayerController_OnBoxDestroyedCallback final
{
public:
	class AEndEnvironmentPhysicsStaticMeshActor*  BrokenBox;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActionTorokkoPlayerController_OnBoxDestroyedCallback) == 0x000008, "Wrong alignment on EndActionTorokkoPlayerController_OnBoxDestroyedCallback");
static_assert(sizeof(EndActionTorokkoPlayerController_OnBoxDestroyedCallback) == 0x000008, "Wrong size on EndActionTorokkoPlayerController_OnBoxDestroyedCallback");
static_assert(offsetof(EndActionTorokkoPlayerController_OnBoxDestroyedCallback, BrokenBox) == 0x000000, "Member 'EndActionTorokkoPlayerController_OnBoxDestroyedCallback::BrokenBox' has a wrong offset!");

// Function EndGame.EndEnvironmentPhysicsStaticMeshActor.OnComponentBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap");
static_assert(sizeof(EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap) == 0x0000B0, "Wrong size on EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function EndGame.EndEnvironmentPhysicsStaticMeshActor.OnComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap) == 0x000008, "Wrong alignment on EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap");
static_assert(sizeof(EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap) == 0x000020, "Wrong size on EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap, OtherActor) == 0x000008, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap, OtherComp) == 0x000010, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function EndGame.EndEnvironmentPhysicsStaticMeshActor.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndEnvironmentPhysicsStaticMeshActor_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit) == 0x000008, "Wrong alignment on EndEnvironmentPhysicsStaticMeshActor_OnComponentHit");
static_assert(sizeof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit) == 0x0000B8, "Wrong size on EndEnvironmentPhysicsStaticMeshActor_OnComponentHit");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit, HitComponent) == 0x000000, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit, OtherActor) == 0x000008, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit, OtherComp) == 0x000010, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit, Hit) == 0x000024, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndChocoboPartsSkeletalMeshComponent.SetColorSetting
// 0x0008 (0x0008 - 0x0000)
struct EndChocoboPartsSkeletalMeshComponent_SetColorSetting final
{
public:
	int32                                         Layer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChocoboPartsSkeletalMeshComponent_SetColorSetting) == 0x000004, "Wrong alignment on EndChocoboPartsSkeletalMeshComponent_SetColorSetting");
static_assert(sizeof(EndChocoboPartsSkeletalMeshComponent_SetColorSetting) == 0x000008, "Wrong size on EndChocoboPartsSkeletalMeshComponent_SetColorSetting");
static_assert(offsetof(EndChocoboPartsSkeletalMeshComponent_SetColorSetting, Layer) == 0x000000, "Member 'EndChocoboPartsSkeletalMeshComponent_SetColorSetting::Layer' has a wrong offset!");
static_assert(offsetof(EndChocoboPartsSkeletalMeshComponent_SetColorSetting, Color) == 0x000004, "Member 'EndChocoboPartsSkeletalMeshComponent_SetColorSetting::Color' has a wrong offset!");

// Function EndGame.EndActivityAPI.ActivityInit
// 0x0020 (0x0020 - 0x0000)
struct EndActivityAPI_ActivityInit final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActivityAPI_ActivityInit) == 0x000008, "Wrong alignment on EndActivityAPI_ActivityInit");
static_assert(sizeof(EndActivityAPI_ActivityInit) == 0x000020, "Wrong size on EndActivityAPI_ActivityInit");
static_assert(offsetof(EndActivityAPI_ActivityInit, WorldContextObject) == 0x000000, "Member 'EndActivityAPI_ActivityInit::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndActivityAPI_ActivityInit, LatentInfo) == 0x000008, "Member 'EndActivityAPI_ActivityInit::LatentInfo' has a wrong offset!");

// Function EndGame.EndActivityAPI.GetActivityInitResult
// 0x0001 (0x0001 - 0x0000)
struct EndActivityAPI_GetActivityInitResult final
{
public:
	EEndActivityInitResult                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActivityAPI_GetActivityInitResult) == 0x000001, "Wrong alignment on EndActivityAPI_GetActivityInitResult");
static_assert(sizeof(EndActivityAPI_GetActivityInitResult) == 0x000001, "Wrong size on EndActivityAPI_GetActivityInitResult");
static_assert(offsetof(EndActivityAPI_GetActivityInitResult, ReturnValue) == 0x000000, "Member 'EndActivityAPI_GetActivityInitResult::ReturnValue' has a wrong offset!");

// Function EndGame.EndAISystem.ClearBehaviorTreeAssetCache
// 0x0008 (0x0008 - 0x0000)
struct EndAISystem_ClearBehaviorTreeAssetCache final
{
public:
	class UBehaviorTree*                          Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAISystem_ClearBehaviorTreeAssetCache) == 0x000008, "Wrong alignment on EndAISystem_ClearBehaviorTreeAssetCache");
static_assert(sizeof(EndAISystem_ClearBehaviorTreeAssetCache) == 0x000008, "Wrong size on EndAISystem_ClearBehaviorTreeAssetCache");
static_assert(offsetof(EndAISystem_ClearBehaviorTreeAssetCache, Asset) == 0x000000, "Member 'EndAISystem_ClearBehaviorTreeAssetCache::Asset' has a wrong offset!");

// Function EndGame.EndAISystem.ClearEQSAssetCache
// 0x0008 (0x0008 - 0x0000)
struct EndAISystem_ClearEQSAssetCache final
{
public:
	class UEnvQuery*                              Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAISystem_ClearEQSAssetCache) == 0x000008, "Wrong alignment on EndAISystem_ClearEQSAssetCache");
static_assert(sizeof(EndAISystem_ClearEQSAssetCache) == 0x000008, "Wrong size on EndAISystem_ClearEQSAssetCache");
static_assert(offsetof(EndAISystem_ClearEQSAssetCache, Asset) == 0x000000, "Member 'EndAISystem_ClearEQSAssetCache::Asset' has a wrong offset!");

// Function EndGame.EndAISystem.LoadBehaviorTreeAsset
// 0x0008 (0x0008 - 0x0000)
struct EndAISystem_LoadBehaviorTreeAsset final
{
public:
	class UBehaviorTree*                          Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAISystem_LoadBehaviorTreeAsset) == 0x000008, "Wrong alignment on EndAISystem_LoadBehaviorTreeAsset");
static_assert(sizeof(EndAISystem_LoadBehaviorTreeAsset) == 0x000008, "Wrong size on EndAISystem_LoadBehaviorTreeAsset");
static_assert(offsetof(EndAISystem_LoadBehaviorTreeAsset, Asset) == 0x000000, "Member 'EndAISystem_LoadBehaviorTreeAsset::Asset' has a wrong offset!");

// Function EndGame.EndChickenLureMiniGameCanActor.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndChickenLureMiniGameCanActor_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChickenLureMiniGameCanActor_OnComponentHit) == 0x000008, "Wrong alignment on EndChickenLureMiniGameCanActor_OnComponentHit");
static_assert(sizeof(EndChickenLureMiniGameCanActor_OnComponentHit) == 0x0000B8, "Wrong size on EndChickenLureMiniGameCanActor_OnComponentHit");
static_assert(offsetof(EndChickenLureMiniGameCanActor_OnComponentHit, HitComponent) == 0x000000, "Member 'EndChickenLureMiniGameCanActor_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndChickenLureMiniGameCanActor_OnComponentHit, OtherActor) == 0x000008, "Member 'EndChickenLureMiniGameCanActor_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndChickenLureMiniGameCanActor_OnComponentHit, OtherComp) == 0x000010, "Member 'EndChickenLureMiniGameCanActor_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndChickenLureMiniGameCanActor_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndChickenLureMiniGameCanActor_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndChickenLureMiniGameCanActor_OnComponentHit, Hit) == 0x000024, "Member 'EndChickenLureMiniGameCanActor_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndChickenLureMiniGameCanActor.SetReferenceStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct EndChickenLureMiniGameCanActor_SetReferenceStaticMesh final
{
public:
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChickenLureMiniGameCanActor_SetReferenceStaticMesh) == 0x000008, "Wrong alignment on EndChickenLureMiniGameCanActor_SetReferenceStaticMesh");
static_assert(sizeof(EndChickenLureMiniGameCanActor_SetReferenceStaticMesh) == 0x000008, "Wrong size on EndChickenLureMiniGameCanActor_SetReferenceStaticMesh");
static_assert(offsetof(EndChickenLureMiniGameCanActor_SetReferenceStaticMesh, StaticMeshComp) == 0x000000, "Member 'EndChickenLureMiniGameCanActor_SetReferenceStaticMesh::StaticMeshComp' has a wrong offset!");

// Function EndGame.EndChickenLureMiniGameCanActor.SetRopeLootActor
// 0x0008 (0x0008 - 0x0000)
struct EndChickenLureMiniGameCanActor_SetRopeLootActor final
{
public:
	class AEndEnvironmentSkeletalMeshActor*       RopeLootActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChickenLureMiniGameCanActor_SetRopeLootActor) == 0x000008, "Wrong alignment on EndChickenLureMiniGameCanActor_SetRopeLootActor");
static_assert(sizeof(EndChickenLureMiniGameCanActor_SetRopeLootActor) == 0x000008, "Wrong size on EndChickenLureMiniGameCanActor_SetRopeLootActor");
static_assert(offsetof(EndChickenLureMiniGameCanActor_SetRopeLootActor, RopeLootActor) == 0x000000, "Member 'EndChickenLureMiniGameCanActor_SetRopeLootActor::RopeLootActor' has a wrong offset!");

// Function EndGame.EndAIBattleBossEB0004RenoMineDataComponent.FinishRolling
// 0x0001 (0x0001 - 0x0000)
struct EndAIBattleBossEB0004RenoMineDataComponent_FinishRolling final
{
public:
	bool                                          ReturnToProwl;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIBattleBossEB0004RenoMineDataComponent_FinishRolling) == 0x000001, "Wrong alignment on EndAIBattleBossEB0004RenoMineDataComponent_FinishRolling");
static_assert(sizeof(EndAIBattleBossEB0004RenoMineDataComponent_FinishRolling) == 0x000001, "Wrong size on EndAIBattleBossEB0004RenoMineDataComponent_FinishRolling");
static_assert(offsetof(EndAIBattleBossEB0004RenoMineDataComponent_FinishRolling, ReturnToProwl) == 0x000000, "Member 'EndAIBattleBossEB0004RenoMineDataComponent_FinishRolling::ReturnToProwl' has a wrong offset!");

// Function EndGame.EndAIBattleBossEB0004RenoMineDataComponent.GetCurrentMineState
// 0x0001 (0x0001 - 0x0000)
struct EndAIBattleBossEB0004RenoMineDataComponent_GetCurrentMineState final
{
public:
	ERenoMineMovementMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIBattleBossEB0004RenoMineDataComponent_GetCurrentMineState) == 0x000001, "Wrong alignment on EndAIBattleBossEB0004RenoMineDataComponent_GetCurrentMineState");
static_assert(sizeof(EndAIBattleBossEB0004RenoMineDataComponent_GetCurrentMineState) == 0x000001, "Wrong size on EndAIBattleBossEB0004RenoMineDataComponent_GetCurrentMineState");
static_assert(offsetof(EndAIBattleBossEB0004RenoMineDataComponent_GetCurrentMineState, ReturnValue) == 0x000000, "Member 'EndAIBattleBossEB0004RenoMineDataComponent_GetCurrentMineState::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIBattleBossEB0004RenoMineDataComponent.SetCurrentMineState
// 0x0001 (0x0001 - 0x0000)
struct EndAIBattleBossEB0004RenoMineDataComponent_SetCurrentMineState final
{
public:
	ERenoMineMovementMode                         NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIBattleBossEB0004RenoMineDataComponent_SetCurrentMineState) == 0x000001, "Wrong alignment on EndAIBattleBossEB0004RenoMineDataComponent_SetCurrentMineState");
static_assert(sizeof(EndAIBattleBossEB0004RenoMineDataComponent_SetCurrentMineState) == 0x000001, "Wrong size on EndAIBattleBossEB0004RenoMineDataComponent_SetCurrentMineState");
static_assert(offsetof(EndAIBattleBossEB0004RenoMineDataComponent_SetCurrentMineState, NewMode) == 0x000000, "Member 'EndAIBattleBossEB0004RenoMineDataComponent_SetCurrentMineState::NewMode' has a wrong offset!");

// Function EndGame.EndCardChallengeDeckWindow.OnVirtualScrollBoxCard1CellSelectedIndexChanged
// 0x0008 (0x0008 - 0x0000)
struct EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSelectedIndexChanged final
{
public:
	int32                                         InRowIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSelectedIndexChanged");
static_assert(sizeof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSelectedIndexChanged) == 0x000008, "Wrong size on EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSelectedIndexChanged");
static_assert(offsetof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSelectedIndexChanged, InRowIndex) == 0x000000, "Member 'EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSelectedIndexChanged::InRowIndex' has a wrong offset!");
static_assert(offsetof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSelectedIndexChanged, InItemIndex) == 0x000004, "Member 'EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndCardChallengeDeckWindow.OnVirtualScrollBoxCard1CellSetupItem
// 0x0018 (0x0018 - 0x0000)
struct EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem final
{
public:
	int32                                         InRowIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                InItemWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem) == 0x000008, "Wrong alignment on EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem");
static_assert(sizeof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem) == 0x000018, "Wrong size on EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem");
static_assert(offsetof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem, InRowIndex) == 0x000000, "Member 'EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem::InRowIndex' has a wrong offset!");
static_assert(offsetof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem, InItemWidget) == 0x000008, "Member 'EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem, InItemIndex) == 0x000010, "Member 'EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1CellSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndCardChallengeDeckWindow.OnVirtualScrollBoxCard1MeasureItem
// 0x000C (0x000C - 0x0000)
struct EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1MeasureItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1MeasureItem) == 0x000004, "Wrong alignment on EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1MeasureItem");
static_assert(sizeof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1MeasureItem) == 0x00000C, "Wrong size on EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1MeasureItem");
static_assert(offsetof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1MeasureItem, InItemIndex) == 0x000000, "Member 'EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1MeasureItem::InItemIndex' has a wrong offset!");
static_assert(offsetof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1MeasureItem, ReturnValue) == 0x000004, "Member 'EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1MeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndCardChallengeDeckWindow.OnVirtualScrollBoxCard1SelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SelectedIndexChanged) == 0x000004, "Wrong alignment on EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SelectedIndexChanged");
static_assert(sizeof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SelectedIndexChanged) == 0x000004, "Wrong size on EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SelectedIndexChanged");
static_assert(offsetof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndCardChallengeDeckWindow.OnVirtualScrollBoxCard1SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SetupItem) == 0x000008, "Wrong alignment on EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SetupItem");
static_assert(sizeof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SetupItem) == 0x000010, "Wrong size on EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SetupItem");
static_assert(offsetof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SetupItem, InItemWidget) == 0x000000, "Member 'EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SetupItem, InItemIndex) == 0x000008, "Member 'EndCardChallengeDeckWindow_OnVirtualScrollBoxCard1SetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndEnvironmentSkeletalMeshActor.OnComponentPhysicsHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit) == 0x000008, "Wrong alignment on EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit");
static_assert(sizeof(EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit) == 0x0000B8, "Wrong size on EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit");
static_assert(offsetof(EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit, HitComponent) == 0x000000, "Member 'EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit, OtherActor) == 0x000008, "Member 'EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit, OtherComp) == 0x000010, "Member 'EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit, NormalImpulse) == 0x000018, "Member 'EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit, Hit) == 0x000024, "Member 'EndEnvironmentSkeletalMeshActor_OnComponentPhysicsHit::Hit' has a wrong offset!");

// Function EndGame.EndCylinderComponent.SetCylinderSize
// 0x0010 (0x0010 - 0x0000)
struct EndCylinderComponent_SetCylinderSize final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHalfHeight;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCylinderSides;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateOverlaps;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCylinderComponent_SetCylinderSize) == 0x000004, "Wrong alignment on EndCylinderComponent_SetCylinderSize");
static_assert(sizeof(EndCylinderComponent_SetCylinderSize) == 0x000010, "Wrong size on EndCylinderComponent_SetCylinderSize");
static_assert(offsetof(EndCylinderComponent_SetCylinderSize, InRadius) == 0x000000, "Member 'EndCylinderComponent_SetCylinderSize::InRadius' has a wrong offset!");
static_assert(offsetof(EndCylinderComponent_SetCylinderSize, InHalfHeight) == 0x000004, "Member 'EndCylinderComponent_SetCylinderSize::InHalfHeight' has a wrong offset!");
static_assert(offsetof(EndCylinderComponent_SetCylinderSize, InCylinderSides) == 0x000008, "Member 'EndCylinderComponent_SetCylinderSize::InCylinderSides' has a wrong offset!");
static_assert(offsetof(EndCylinderComponent_SetCylinderSize, bUpdateOverlaps) == 0x00000C, "Member 'EndCylinderComponent_SetCylinderSize::bUpdateOverlaps' has a wrong offset!");

// Function EndGame.EndCylinderComponent.GetCylinderSides
// 0x0004 (0x0004 - 0x0000)
struct EndCylinderComponent_GetCylinderSides final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCylinderComponent_GetCylinderSides) == 0x000004, "Wrong alignment on EndCylinderComponent_GetCylinderSides");
static_assert(sizeof(EndCylinderComponent_GetCylinderSides) == 0x000004, "Wrong size on EndCylinderComponent_GetCylinderSides");
static_assert(offsetof(EndCylinderComponent_GetCylinderSides, ReturnValue) == 0x000000, "Member 'EndCylinderComponent_GetCylinderSides::ReturnValue' has a wrong offset!");

// Function EndGame.EndCylinderComponent.GetScaledCylinderHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct EndCylinderComponent_GetScaledCylinderHalfHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCylinderComponent_GetScaledCylinderHalfHeight) == 0x000004, "Wrong alignment on EndCylinderComponent_GetScaledCylinderHalfHeight");
static_assert(sizeof(EndCylinderComponent_GetScaledCylinderHalfHeight) == 0x000004, "Wrong size on EndCylinderComponent_GetScaledCylinderHalfHeight");
static_assert(offsetof(EndCylinderComponent_GetScaledCylinderHalfHeight, ReturnValue) == 0x000000, "Member 'EndCylinderComponent_GetScaledCylinderHalfHeight::ReturnValue' has a wrong offset!");

// Function EndGame.EndCylinderComponent.GetScaledCylinderRadius
// 0x0004 (0x0004 - 0x0000)
struct EndCylinderComponent_GetScaledCylinderRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCylinderComponent_GetScaledCylinderRadius) == 0x000004, "Wrong alignment on EndCylinderComponent_GetScaledCylinderRadius");
static_assert(sizeof(EndCylinderComponent_GetScaledCylinderRadius) == 0x000004, "Wrong size on EndCylinderComponent_GetScaledCylinderRadius");
static_assert(offsetof(EndCylinderComponent_GetScaledCylinderRadius, ReturnValue) == 0x000000, "Member 'EndCylinderComponent_GetScaledCylinderRadius::ReturnValue' has a wrong offset!");

// Function EndGame.EndCylinderComponent.GetUnscaledCylinderHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct EndCylinderComponent_GetUnscaledCylinderHalfHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCylinderComponent_GetUnscaledCylinderHalfHeight) == 0x000004, "Wrong alignment on EndCylinderComponent_GetUnscaledCylinderHalfHeight");
static_assert(sizeof(EndCylinderComponent_GetUnscaledCylinderHalfHeight) == 0x000004, "Wrong size on EndCylinderComponent_GetUnscaledCylinderHalfHeight");
static_assert(offsetof(EndCylinderComponent_GetUnscaledCylinderHalfHeight, ReturnValue) == 0x000000, "Member 'EndCylinderComponent_GetUnscaledCylinderHalfHeight::ReturnValue' has a wrong offset!");

// Function EndGame.EndCylinderComponent.GetUnscaledCylinderRadius
// 0x0004 (0x0004 - 0x0000)
struct EndCylinderComponent_GetUnscaledCylinderRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCylinderComponent_GetUnscaledCylinderRadius) == 0x000004, "Wrong alignment on EndCylinderComponent_GetUnscaledCylinderRadius");
static_assert(sizeof(EndCylinderComponent_GetUnscaledCylinderRadius) == 0x000004, "Wrong size on EndCylinderComponent_GetUnscaledCylinderRadius");
static_assert(offsetof(EndCylinderComponent_GetUnscaledCylinderRadius, ReturnValue) == 0x000000, "Member 'EndCylinderComponent_GetUnscaledCylinderRadius::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.ActivatePBDConstraint
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBluePrintBase_ActivatePBDConstraint final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_ActivatePBDConstraint) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_ActivatePBDConstraint");
static_assert(sizeof(EndAIControllerBluePrintBase_ActivatePBDConstraint) == 0x000004, "Wrong size on EndAIControllerBluePrintBase_ActivatePBDConstraint");
static_assert(offsetof(EndAIControllerBluePrintBase_ActivatePBDConstraint, BlendTime) == 0x000000, "Member 'EndAIControllerBluePrintBase_ActivatePBDConstraint::BlendTime' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.AddAttachEffect
// 0x0070 (0x0070 - 0x0000)
struct EndAIControllerBluePrintBase_AddAttachEffect final
{
public:
	struct FEndCharacterAttachEffectArguments     args;                                              // 0x0000(0x0070)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_AddAttachEffect) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_AddAttachEffect");
static_assert(sizeof(EndAIControllerBluePrintBase_AddAttachEffect) == 0x000070, "Wrong size on EndAIControllerBluePrintBase_AddAttachEffect");
static_assert(offsetof(EndAIControllerBluePrintBase_AddAttachEffect, args) == 0x000000, "Member 'EndAIControllerBluePrintBase_AddAttachEffect::args' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.AddSpecialStateEffect
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_AddSpecialStateEffect final
{
public:
	class FName                                   specialStateEffectID;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_AddSpecialStateEffect) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_AddSpecialStateEffect");
static_assert(sizeof(EndAIControllerBluePrintBase_AddSpecialStateEffect) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_AddSpecialStateEffect");
static_assert(offsetof(EndAIControllerBluePrintBase_AddSpecialStateEffect, specialStateEffectID) == 0x000000, "Member 'EndAIControllerBluePrintBase_AddSpecialStateEffect::specialStateEffectID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.AddSpecialStateEffectWithBeamTarget
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_AddSpecialStateEffectWithBeamTarget final
{
public:
	class FName                                   specialStateEffectID;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  beamTargetCharaList;                               // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_AddSpecialStateEffectWithBeamTarget) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_AddSpecialStateEffectWithBeamTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_AddSpecialStateEffectWithBeamTarget) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_AddSpecialStateEffectWithBeamTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_AddSpecialStateEffectWithBeamTarget, specialStateEffectID) == 0x000000, "Member 'EndAIControllerBluePrintBase_AddSpecialStateEffectWithBeamTarget::specialStateEffectID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_AddSpecialStateEffectWithBeamTarget, beamTargetCharaList) == 0x000008, "Member 'EndAIControllerBluePrintBase_AddSpecialStateEffectWithBeamTarget::beamTargetCharaList' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.AddSpecialStatusByID
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_AddSpecialStatusByID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_AddSpecialStatusByID) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_AddSpecialStatusByID");
static_assert(sizeof(EndAIControllerBluePrintBase_AddSpecialStatusByID) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_AddSpecialStatusByID");
static_assert(offsetof(EndAIControllerBluePrintBase_AddSpecialStatusByID, ID) == 0x000000, "Member 'EndAIControllerBluePrintBase_AddSpecialStatusByID::ID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.AIDelay
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerBluePrintBase_AIDelay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_AIDelay) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_AIDelay");
static_assert(sizeof(EndAIControllerBluePrintBase_AIDelay) == 0x000028, "Wrong size on EndAIControllerBluePrintBase_AIDelay");
static_assert(offsetof(EndAIControllerBluePrintBase_AIDelay, WorldContextObject) == 0x000000, "Member 'EndAIControllerBluePrintBase_AIDelay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_AIDelay, Duration) == 0x000008, "Member 'EndAIControllerBluePrintBase_AIDelay::Duration' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_AIDelay, LatentInfo) == 0x000010, "Member 'EndAIControllerBluePrintBase_AIDelay::LatentInfo' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.CancelActionChild
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_CancelActionChild final
{
public:
	class FName                                   ChildActionId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_CancelActionChild) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_CancelActionChild");
static_assert(sizeof(EndAIControllerBluePrintBase_CancelActionChild) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_CancelActionChild");
static_assert(offsetof(EndAIControllerBluePrintBase_CancelActionChild, ChildActionId) == 0x000000, "Member 'EndAIControllerBluePrintBase_CancelActionChild::ChildActionId' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.CanSeeTarget
// 0x0002 (0x0002 - 0x0000)
struct EndAIControllerBluePrintBase_CanSeeTarget final
{
public:
	bool                                          bValidBlock;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_CanSeeTarget) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_CanSeeTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_CanSeeTarget) == 0x000002, "Wrong size on EndAIControllerBluePrintBase_CanSeeTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_CanSeeTarget, bValidBlock) == 0x000000, "Member 'EndAIControllerBluePrintBase_CanSeeTarget::bValidBlock' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CanSeeTarget, ReturnValue) == 0x000001, "Member 'EndAIControllerBluePrintBase_CanSeeTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.CheckDistanceToTarget
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_CheckDistanceToTarget final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 Cmp;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCharacterRadius;                            // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_CheckDistanceToTarget) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_CheckDistanceToTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_CheckDistanceToTarget) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_CheckDistanceToTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_CheckDistanceToTarget, InDistance) == 0x000000, "Member 'EndAIControllerBluePrintBase_CheckDistanceToTarget::InDistance' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CheckDistanceToTarget, Cmp) == 0x000004, "Member 'EndAIControllerBluePrintBase_CheckDistanceToTarget::Cmp' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CheckDistanceToTarget, bIgnoreCharacterRadius) == 0x000005, "Member 'EndAIControllerBluePrintBase_CheckDistanceToTarget::bIgnoreCharacterRadius' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CheckDistanceToTarget, ReturnValue) == 0x000006, "Member 'EndAIControllerBluePrintBase_CheckDistanceToTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.CheckDistanceToTargetBranch
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_CheckDistanceToTargetBranch final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 Cmp;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCharacterRadius;                            // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_CheckDistanceToTargetBranch) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_CheckDistanceToTargetBranch");
static_assert(sizeof(EndAIControllerBluePrintBase_CheckDistanceToTargetBranch) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_CheckDistanceToTargetBranch");
static_assert(offsetof(EndAIControllerBluePrintBase_CheckDistanceToTargetBranch, InDistance) == 0x000000, "Member 'EndAIControllerBluePrintBase_CheckDistanceToTargetBranch::InDistance' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CheckDistanceToTargetBranch, Cmp) == 0x000004, "Member 'EndAIControllerBluePrintBase_CheckDistanceToTargetBranch::Cmp' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CheckDistanceToTargetBranch, OutSignal) == 0x000005, "Member 'EndAIControllerBluePrintBase_CheckDistanceToTargetBranch::OutSignal' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CheckDistanceToTargetBranch, bIgnoreCharacterRadius) == 0x000006, "Member 'EndAIControllerBluePrintBase_CheckDistanceToTargetBranch::bIgnoreCharacterRadius' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.CreateDamageSource
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_CreateDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDamage;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverrideDamage;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_CreateDamageSource) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_CreateDamageSource");
static_assert(sizeof(EndAIControllerBluePrintBase_CreateDamageSource) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_CreateDamageSource");
static_assert(offsetof(EndAIControllerBluePrintBase_CreateDamageSource, DamageSourceID) == 0x000000, "Member 'EndAIControllerBluePrintBase_CreateDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CreateDamageSource, targetChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_CreateDamageSource::targetChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CreateDamageSource, AbilityId) == 0x000010, "Member 'EndAIControllerBluePrintBase_CreateDamageSource::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CreateDamageSource, bOverrideDamage) == 0x000018, "Member 'EndAIControllerBluePrintBase_CreateDamageSource::bOverrideDamage' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CreateDamageSource, OverrideDamage) == 0x00001C, "Member 'EndAIControllerBluePrintBase_CreateDamageSource::OverrideDamage' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.CreateSyncAction
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_CreateSyncAction final
{
public:
	class FName                                   SyncActionID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwrite;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_CreateSyncAction) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_CreateSyncAction");
static_assert(sizeof(EndAIControllerBluePrintBase_CreateSyncAction) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_CreateSyncAction");
static_assert(offsetof(EndAIControllerBluePrintBase_CreateSyncAction, SyncActionID) == 0x000000, "Member 'EndAIControllerBluePrintBase_CreateSyncAction::SyncActionID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CreateSyncAction, targetChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_CreateSyncAction::targetChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_CreateSyncAction, bOverwrite) == 0x000010, "Member 'EndAIControllerBluePrintBase_CreateSyncAction::bOverwrite' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.DeactivatePBDConstraint
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBluePrintBase_DeactivatePBDConstraint final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_DeactivatePBDConstraint) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_DeactivatePBDConstraint");
static_assert(sizeof(EndAIControllerBluePrintBase_DeactivatePBDConstraint) == 0x000004, "Wrong size on EndAIControllerBluePrintBase_DeactivatePBDConstraint");
static_assert(offsetof(EndAIControllerBluePrintBase_DeactivatePBDConstraint, BlendTime) == 0x000000, "Member 'EndAIControllerBluePrintBase_DeactivatePBDConstraint::BlendTime' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.DebugEditModeBranch
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_DebugEditModeBranch final
{
public:
	EEndAIExecPinBranch                           PinBranch;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_DebugEditModeBranch) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_DebugEditModeBranch");
static_assert(sizeof(EndAIControllerBluePrintBase_DebugEditModeBranch) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_DebugEditModeBranch");
static_assert(offsetof(EndAIControllerBluePrintBase_DebugEditModeBranch, PinBranch) == 0x000000, "Member 'EndAIControllerBluePrintBase_DebugEditModeBranch::PinBranch' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.DebugLocalLog
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_DebugLocalLog final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_DebugLocalLog) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_DebugLocalLog");
static_assert(sizeof(EndAIControllerBluePrintBase_DebugLocalLog) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_DebugLocalLog");
static_assert(offsetof(EndAIControllerBluePrintBase_DebugLocalLog, inString) == 0x000000, "Member 'EndAIControllerBluePrintBase_DebugLocalLog::inString' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_DebugLocalLog, TextColor) == 0x000010, "Member 'EndAIControllerBluePrintBase_DebugLocalLog::TextColor' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.DestroyDamageSource
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_DestroyDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyEffect;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_DestroyDamageSource) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_DestroyDamageSource");
static_assert(sizeof(EndAIControllerBluePrintBase_DestroyDamageSource) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_DestroyDamageSource");
static_assert(offsetof(EndAIControllerBluePrintBase_DestroyDamageSource, DamageSourceID) == 0x000000, "Member 'EndAIControllerBluePrintBase_DestroyDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_DestroyDamageSource, bDestroyEffect) == 0x000008, "Member 'EndAIControllerBluePrintBase_DestroyDamageSource::bDestroyEffect' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.DoOnceWithThen
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerBluePrintBase_DoOnceWithThen final
{
public:
	EEndDoOnceCode                                Code;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EEndDoOnceOutCode                             Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_DoOnceWithThen) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_DoOnceWithThen");
static_assert(sizeof(EndAIControllerBluePrintBase_DoOnceWithThen) == 0x000028, "Wrong size on EndAIControllerBluePrintBase_DoOnceWithThen");
static_assert(offsetof(EndAIControllerBluePrintBase_DoOnceWithThen, Code) == 0x000000, "Member 'EndAIControllerBluePrintBase_DoOnceWithThen::Code' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_DoOnceWithThen, LatentInfo) == 0x000008, "Member 'EndAIControllerBluePrintBase_DoOnceWithThen::LatentInfo' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_DoOnceWithThen, Result) == 0x000020, "Member 'EndAIControllerBluePrintBase_DoOnceWithThen::Result' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.ForceDisableAimEffectorSetting
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_ForceDisableAimEffectorSetting final
{
public:
	class FName                                   EffectorSettingName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_ForceDisableAimEffectorSetting) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_ForceDisableAimEffectorSetting");
static_assert(sizeof(EndAIControllerBluePrintBase_ForceDisableAimEffectorSetting) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_ForceDisableAimEffectorSetting");
static_assert(offsetof(EndAIControllerBluePrintBase_ForceDisableAimEffectorSetting, EffectorSettingName) == 0x000000, "Member 'EndAIControllerBluePrintBase_ForceDisableAimEffectorSetting::EffectorSettingName' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.ForceTeleportFollowAIPartyMemberAll
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_ForceTeleportFollowAIPartyMemberAll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_ForceTeleportFollowAIPartyMemberAll) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_ForceTeleportFollowAIPartyMemberAll");
static_assert(sizeof(EndAIControllerBluePrintBase_ForceTeleportFollowAIPartyMemberAll) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_ForceTeleportFollowAIPartyMemberAll");
static_assert(offsetof(EndAIControllerBluePrintBase_ForceTeleportFollowAIPartyMemberAll, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_ForceTeleportFollowAIPartyMemberAll::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetAbilityAimTargetPointName
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetAbilityAimTargetPointName final
{
public:
	class FName                                   outTargetPointName;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetAbilityAimTargetPointName) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetAbilityAimTargetPointName");
static_assert(sizeof(EndAIControllerBluePrintBase_GetAbilityAimTargetPointName) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetAbilityAimTargetPointName");
static_assert(offsetof(EndAIControllerBluePrintBase_GetAbilityAimTargetPointName, outTargetPointName) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetAbilityAimTargetPointName::outTargetPointName' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetAbilityLoopMoveNextSpecifiedTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation");
static_assert(sizeof(EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation");
static_assert(offsetof(EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation, OutLocation) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation, AbilityId) == 0x00000C, "Member 'EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation, ReturnValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_GetAbilityLoopMoveNextSpecifiedTargetLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetAbilityLoopMoveStartSpecifiedTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation");
static_assert(sizeof(EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation");
static_assert(offsetof(EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation, OutLocation) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation, AbilityId) == 0x00000C, "Member 'EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation, ReturnValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_GetAbilityLoopMoveStartSpecifiedTargetLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetAngleToTarget
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetAngleToTarget final
{
public:
	bool                                          bAbs;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetAngleToTarget) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetAngleToTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_GetAngleToTarget) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetAngleToTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_GetAngleToTarget, bAbs) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetAngleToTarget::bAbs' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetAngleToTarget, ReturnValue) == 0x000004, "Member 'EndAIControllerBluePrintBase_GetAngleToTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetCharacter final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetCharacter) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetCharacter");
static_assert(sizeof(EndAIControllerBluePrintBase_GetCharacter) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetCharacter");
static_assert(offsetof(EndAIControllerBluePrintBase_GetCharacter, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetCharaSpecName
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetCharaSpecName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetCharaSpecName) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetCharaSpecName");
static_assert(sizeof(EndAIControllerBluePrintBase_GetCharaSpecName) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetCharaSpecName");
static_assert(offsetof(EndAIControllerBluePrintBase_GetCharaSpecName, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetCharaSpecName::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetDistanceToCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_GetDistanceToCharacter final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCharacterRadius;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetDistanceToCharacter) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetDistanceToCharacter");
static_assert(sizeof(EndAIControllerBluePrintBase_GetDistanceToCharacter) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_GetDistanceToCharacter");
static_assert(offsetof(EndAIControllerBluePrintBase_GetDistanceToCharacter, InCharacter) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetDistanceToCharacter::InCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetDistanceToCharacter, bIgnoreCharacterRadius) == 0x000008, "Member 'EndAIControllerBluePrintBase_GetDistanceToCharacter::bIgnoreCharacterRadius' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetDistanceToCharacter, ReturnValue) == 0x00000C, "Member 'EndAIControllerBluePrintBase_GetDistanceToCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetDistanceToCharacter2D
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_GetDistanceToCharacter2D final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCharacterRadius;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetDistanceToCharacter2D) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetDistanceToCharacter2D");
static_assert(sizeof(EndAIControllerBluePrintBase_GetDistanceToCharacter2D) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_GetDistanceToCharacter2D");
static_assert(offsetof(EndAIControllerBluePrintBase_GetDistanceToCharacter2D, InCharacter) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetDistanceToCharacter2D::InCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetDistanceToCharacter2D, bIgnoreCharacterRadius) == 0x000008, "Member 'EndAIControllerBluePrintBase_GetDistanceToCharacter2D::bIgnoreCharacterRadius' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetDistanceToCharacter2D, ReturnValue) == 0x00000C, "Member 'EndAIControllerBluePrintBase_GetDistanceToCharacter2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetDistanceToTarget
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetDistanceToTarget final
{
public:
	bool                                          bIgnoreCharacterRadius;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetDistanceToTarget) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetDistanceToTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_GetDistanceToTarget) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetDistanceToTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_GetDistanceToTarget, bIgnoreCharacterRadius) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetDistanceToTarget::bIgnoreCharacterRadius' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetDistanceToTarget, ReturnValue) == 0x000004, "Member 'EndAIControllerBluePrintBase_GetDistanceToTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetDistanceToTarget2D
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetDistanceToTarget2D final
{
public:
	bool                                          bIgnoreCharacterRadius;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetDistanceToTarget2D) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetDistanceToTarget2D");
static_assert(sizeof(EndAIControllerBluePrintBase_GetDistanceToTarget2D) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetDistanceToTarget2D");
static_assert(offsetof(EndAIControllerBluePrintBase_GetDistanceToTarget2D, bIgnoreCharacterRadius) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetDistanceToTarget2D::bIgnoreCharacterRadius' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetDistanceToTarget2D, ReturnValue) == 0x000004, "Member 'EndAIControllerBluePrintBase_GetDistanceToTarget2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetHeightDistanceToTarget
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetHeightDistanceToTarget final
{
public:
	bool                                          bAbs;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetHeightDistanceToTarget) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetHeightDistanceToTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_GetHeightDistanceToTarget) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetHeightDistanceToTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_GetHeightDistanceToTarget, bAbs) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetHeightDistanceToTarget::bAbs' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetHeightDistanceToTarget, ReturnValue) == 0x000004, "Member 'EndAIControllerBluePrintBase_GetHeightDistanceToTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetHPMax
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBluePrintBase_GetHPMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetHPMax) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetHPMax");
static_assert(sizeof(EndAIControllerBluePrintBase_GetHPMax) == 0x000004, "Wrong size on EndAIControllerBluePrintBase_GetHPMax");
static_assert(offsetof(EndAIControllerBluePrintBase_GetHPMax, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetHPMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetHPPercent
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBluePrintBase_GetHPPercent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetHPPercent) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetHPPercent");
static_assert(sizeof(EndAIControllerBluePrintBase_GetHPPercent) == 0x000004, "Wrong size on EndAIControllerBluePrintBase_GetHPPercent");
static_assert(offsetof(EndAIControllerBluePrintBase_GetHPPercent, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetHPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetLeader
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetLeader final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetLeader) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetLeader");
static_assert(sizeof(EndAIControllerBluePrintBase_GetLeader) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetLeader");
static_assert(offsetof(EndAIControllerBluePrintBase_GetLeader, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetLeader::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetNearestOpponentDistance
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetNearestOpponentDistance final
{
public:
	bool                                          bIgnoreCharacterRadius;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetNearestOpponentDistance) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetNearestOpponentDistance");
static_assert(sizeof(EndAIControllerBluePrintBase_GetNearestOpponentDistance) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetNearestOpponentDistance");
static_assert(offsetof(EndAIControllerBluePrintBase_GetNearestOpponentDistance, bIgnoreCharacterRadius) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetNearestOpponentDistance::bIgnoreCharacterRadius' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetNearestOpponentDistance, ReturnValue) == 0x000004, "Member 'EndAIControllerBluePrintBase_GetNearestOpponentDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetPathDistance
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_GetPathDistance final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetPathDistance) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetPathDistance");
static_assert(sizeof(EndAIControllerBluePrintBase_GetPathDistance) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_GetPathDistance");
static_assert(offsetof(EndAIControllerBluePrintBase_GetPathDistance, Location) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetPathDistance::Location' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetPathDistance, ReturnValue) == 0x00000C, "Member 'EndAIControllerBluePrintBase_GetPathDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetPathDistanceFromTarget
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_GetPathDistanceFromTarget final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetPathDistanceFromTarget) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetPathDistanceFromTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_GetPathDistanceFromTarget) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_GetPathDistanceFromTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_GetPathDistanceFromTarget, Location) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetPathDistanceFromTarget::Location' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetPathDistanceFromTarget, ReturnValue) == 0x00000C, "Member 'EndAIControllerBluePrintBase_GetPathDistanceFromTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetPlayerLeader
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetPlayerLeader final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetPlayerLeader) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetPlayerLeader");
static_assert(sizeof(EndAIControllerBluePrintBase_GetPlayerLeader) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetPlayerLeader");
static_assert(offsetof(EndAIControllerBluePrintBase_GetPlayerLeader, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetPlayerLeader::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetSpawnWeaponCharacter
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_GetSpawnWeaponCharacter final
{
public:
	EEndBattleUniqueAbilitySpawnWeaponType        weaponType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   uniqueWeaponName;                                  // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetSpawnWeaponCharacter) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetSpawnWeaponCharacter");
static_assert(sizeof(EndAIControllerBluePrintBase_GetSpawnWeaponCharacter) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_GetSpawnWeaponCharacter");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSpawnWeaponCharacter, weaponType) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetSpawnWeaponCharacter::weaponType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSpawnWeaponCharacter, uniqueWeaponName) == 0x000004, "Member 'EndAIControllerBluePrintBase_GetSpawnWeaponCharacter::uniqueWeaponName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSpawnWeaponCharacter, ReturnValue) == 0x000010, "Member 'EndAIControllerBluePrintBase_GetSpawnWeaponCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetSpecialStatusChangeCharacter
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter final
{
public:
	EEndAiBattleTargetType                        InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter");
static_assert(sizeof(EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter, InTarget) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter::InTarget' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter, Type) == 0x000001, "Member 'EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter::Type' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter, ReturnValue) == 0x000008, "Member 'EndAIControllerBluePrintBase_GetSpecialStatusChangeCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetSyncActionCharacter
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_GetSyncActionCharacter final
{
public:
	EEndAiBattleTargetType                        InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetSyncActionCharacter) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetSyncActionCharacter");
static_assert(sizeof(EndAIControllerBluePrintBase_GetSyncActionCharacter) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_GetSyncActionCharacter");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSyncActionCharacter, InTarget) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetSyncActionCharacter::InTarget' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSyncActionCharacter, ReturnValue) == 0x000008, "Member 'EndAIControllerBluePrintBase_GetSyncActionCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetTargetJumpBurstInput
// 0x0030 (0x0030 - 0x0000)
struct EndAIControllerBluePrintBase_GetTargetJumpBurstInput final
{
public:
	struct FEndBattleTargetJumpBurstInput         Input;                                             // 0x0000(0x002C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_GetTargetJumpBurstInput) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetTargetJumpBurstInput");
static_assert(sizeof(EndAIControllerBluePrintBase_GetTargetJumpBurstInput) == 0x000030, "Wrong size on EndAIControllerBluePrintBase_GetTargetJumpBurstInput");
static_assert(offsetof(EndAIControllerBluePrintBase_GetTargetJumpBurstInput, Input) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetTargetJumpBurstInput::Input' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetTargetJumpBurstInput, ReturnValue) == 0x00002C, "Member 'EndAIControllerBluePrintBase_GetTargetJumpBurstInput::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetVectorToTarget
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_GetVectorToTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetVectorToTarget) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetVectorToTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_GetVectorToTarget) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_GetVectorToTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_GetVectorToTarget, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetVectorToTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.HasDamageSource
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_HasDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_HasDamageSource) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_HasDamageSource");
static_assert(sizeof(EndAIControllerBluePrintBase_HasDamageSource) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_HasDamageSource");
static_assert(offsetof(EndAIControllerBluePrintBase_HasDamageSource, DamageSourceID) == 0x000000, "Member 'EndAIControllerBluePrintBase_HasDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_HasDamageSource, ReturnValue) == 0x000008, "Member 'EndAIControllerBluePrintBase_HasDamageSource::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.HasSpecialStatus
// 0x0002 (0x0002 - 0x0000)
struct EndAIControllerBluePrintBase_HasSpecialStatus final
{
public:
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_HasSpecialStatus) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_HasSpecialStatus");
static_assert(sizeof(EndAIControllerBluePrintBase_HasSpecialStatus) == 0x000002, "Wrong size on EndAIControllerBluePrintBase_HasSpecialStatus");
static_assert(offsetof(EndAIControllerBluePrintBase_HasSpecialStatus, Type) == 0x000000, "Member 'EndAIControllerBluePrintBase_HasSpecialStatus::Type' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_HasSpecialStatus, ReturnValue) == 0x000001, "Member 'EndAIControllerBluePrintBase_HasSpecialStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.HasSpecialStatusByID
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_HasSpecialStatusByID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_HasSpecialStatusByID) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_HasSpecialStatusByID");
static_assert(sizeof(EndAIControllerBluePrintBase_HasSpecialStatusByID) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_HasSpecialStatusByID");
static_assert(offsetof(EndAIControllerBluePrintBase_HasSpecialStatusByID, ID) == 0x000000, "Member 'EndAIControllerBluePrintBase_HasSpecialStatusByID::ID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_HasSpecialStatusByID, ReturnValue) == 0x000008, "Member 'EndAIControllerBluePrintBase_HasSpecialStatusByID::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsActionRestriction
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_IsActionRestriction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_IsActionRestriction) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_IsActionRestriction");
static_assert(sizeof(EndAIControllerBluePrintBase_IsActionRestriction) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_IsActionRestriction");
static_assert(offsetof(EndAIControllerBluePrintBase_IsActionRestriction, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsActionRestriction::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsDelayProcessing
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_IsDelayProcessing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_IsDelayProcessing) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_IsDelayProcessing");
static_assert(sizeof(EndAIControllerBluePrintBase_IsDelayProcessing) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_IsDelayProcessing");
static_assert(offsetof(EndAIControllerBluePrintBase_IsDelayProcessing, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsDelayProcessing::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsExistSpawnWeaponCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter final
{
public:
	EEndBattleUniqueAbilitySpawnWeaponType        spawnWeaponType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   uniqueWeaponName;                                  // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter");
static_assert(sizeof(EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter");
static_assert(offsetof(EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter, spawnWeaponType) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter::spawnWeaponType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter, uniqueWeaponName) == 0x000004, "Member 'EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter::uniqueWeaponName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter, ReturnValue) == 0x00000C, "Member 'EndAIControllerBluePrintBase_IsExistSpawnWeaponCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsForceTeleportingFollowAIPartyMemberAll
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_IsForceTeleportingFollowAIPartyMemberAll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_IsForceTeleportingFollowAIPartyMemberAll) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_IsForceTeleportingFollowAIPartyMemberAll");
static_assert(sizeof(EndAIControllerBluePrintBase_IsForceTeleportingFollowAIPartyMemberAll) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_IsForceTeleportingFollowAIPartyMemberAll");
static_assert(offsetof(EndAIControllerBluePrintBase_IsForceTeleportingFollowAIPartyMemberAll, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsForceTeleportingFollowAIPartyMemberAll::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsHPPercent
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_IsHPPercent final
{
public:
	int32                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 Cmp;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_IsHPPercent) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_IsHPPercent");
static_assert(sizeof(EndAIControllerBluePrintBase_IsHPPercent) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_IsHPPercent");
static_assert(offsetof(EndAIControllerBluePrintBase_IsHPPercent, Percent) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsHPPercent::Percent' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsHPPercent, Cmp) == 0x000004, "Member 'EndAIControllerBluePrintBase_IsHPPercent::Cmp' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsHPPercent, ReturnValue) == 0x000005, "Member 'EndAIControllerBluePrintBase_IsHPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsIdle
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_IsIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_IsIdle) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_IsIdle");
static_assert(sizeof(EndAIControllerBluePrintBase_IsIdle) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_IsIdle");
static_assert(offsetof(EndAIControllerBluePrintBase_IsIdle, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsIdle::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsInAngleToTarget
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_IsInAngleToTarget final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReverse;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_IsInAngleToTarget) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_IsInAngleToTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_IsInAngleToTarget) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_IsInAngleToTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInAngleToTarget, InAngle) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsInAngleToTarget::InAngle' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInAngleToTarget, InReverse) == 0x000004, "Member 'EndAIControllerBluePrintBase_IsInAngleToTarget::InReverse' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInAngleToTarget, ReturnValue) == 0x000005, "Member 'EndAIControllerBluePrintBase_IsInAngleToTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsInAngleToTargetBranch
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_IsInAngleToTargetBranch final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReverse;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_IsInAngleToTargetBranch) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_IsInAngleToTargetBranch");
static_assert(sizeof(EndAIControllerBluePrintBase_IsInAngleToTargetBranch) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_IsInAngleToTargetBranch");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInAngleToTargetBranch, InAngle) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsInAngleToTargetBranch::InAngle' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInAngleToTargetBranch, OutSignal) == 0x000004, "Member 'EndAIControllerBluePrintBase_IsInAngleToTargetBranch::OutSignal' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInAngleToTargetBranch, InReverse) == 0x000005, "Member 'EndAIControllerBluePrintBase_IsInAngleToTargetBranch::InReverse' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsInRangeToTarget
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_IsInRangeToTarget final
{
public:
	float                                         InMin;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMax;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCharacterRadius;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_IsInRangeToTarget) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_IsInRangeToTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_IsInRangeToTarget) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_IsInRangeToTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInRangeToTarget, InMin) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsInRangeToTarget::InMin' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInRangeToTarget, InMax) == 0x000004, "Member 'EndAIControllerBluePrintBase_IsInRangeToTarget::InMax' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInRangeToTarget, bIgnoreCharacterRadius) == 0x000008, "Member 'EndAIControllerBluePrintBase_IsInRangeToTarget::bIgnoreCharacterRadius' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInRangeToTarget, ReturnValue) == 0x000009, "Member 'EndAIControllerBluePrintBase_IsInRangeToTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsInRangeToTargetBranch
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_IsInRangeToTargetBranch final
{
public:
	float                                         InMin;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMax;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathBinCmp                              Cmp;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCharacterRadius;                            // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_IsInRangeToTargetBranch) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_IsInRangeToTargetBranch");
static_assert(sizeof(EndAIControllerBluePrintBase_IsInRangeToTargetBranch) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_IsInRangeToTargetBranch");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInRangeToTargetBranch, InMin) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsInRangeToTargetBranch::InMin' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInRangeToTargetBranch, InMax) == 0x000004, "Member 'EndAIControllerBluePrintBase_IsInRangeToTargetBranch::InMax' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInRangeToTargetBranch, Cmp) == 0x000008, "Member 'EndAIControllerBluePrintBase_IsInRangeToTargetBranch::Cmp' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInRangeToTargetBranch, OutSignal) == 0x000009, "Member 'EndAIControllerBluePrintBase_IsInRangeToTargetBranch::OutSignal' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInRangeToTargetBranch, bIgnoreCharacterRadius) == 0x00000A, "Member 'EndAIControllerBluePrintBase_IsInRangeToTargetBranch::bIgnoreCharacterRadius' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsOverrideUpperAnim
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_IsOverrideUpperAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_IsOverrideUpperAnim) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_IsOverrideUpperAnim");
static_assert(sizeof(EndAIControllerBluePrintBase_IsOverrideUpperAnim) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_IsOverrideUpperAnim");
static_assert(offsetof(EndAIControllerBluePrintBase_IsOverrideUpperAnim, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsOverrideUpperAnim::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsRangeArea2D
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_IsRangeArea2D final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_IsRangeArea2D) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_IsRangeArea2D");
static_assert(sizeof(EndAIControllerBluePrintBase_IsRangeArea2D) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_IsRangeArea2D");
static_assert(offsetof(EndAIControllerBluePrintBase_IsRangeArea2D, InChara) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsRangeArea2D::InChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsRangeArea2D, InLocation) == 0x000008, "Member 'EndAIControllerBluePrintBase_IsRangeArea2D::InLocation' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsRangeArea2D, InRadius) == 0x000014, "Member 'EndAIControllerBluePrintBase_IsRangeArea2D::InRadius' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_IsRangeArea2D, ReturnValue) == 0x000018, "Member 'EndAIControllerBluePrintBase_IsRangeArea2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.NotifyAbilityReaction
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBluePrintBase_NotifyAbilityReaction final
{
public:
	float                                         Param0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_NotifyAbilityReaction) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_NotifyAbilityReaction");
static_assert(sizeof(EndAIControllerBluePrintBase_NotifyAbilityReaction) == 0x000004, "Wrong size on EndAIControllerBluePrintBase_NotifyAbilityReaction");
static_assert(offsetof(EndAIControllerBluePrintBase_NotifyAbilityReaction, Param0) == 0x000000, "Member 'EndAIControllerBluePrintBase_NotifyAbilityReaction::Param0' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnAbilityReactionCondition
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_OnAbilityReactionCondition final
{
public:
	EEndBattleAbilityReactionConditionType        abilityReactionConditionType;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnAbilityReactionCondition) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_OnAbilityReactionCondition");
static_assert(sizeof(EndAIControllerBluePrintBase_OnAbilityReactionCondition) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_OnAbilityReactionCondition");
static_assert(offsetof(EndAIControllerBluePrintBase_OnAbilityReactionCondition, abilityReactionConditionType) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnAbilityReactionCondition::abilityReactionConditionType' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnAbilityReactionConditionTargetDodge
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodge final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodge) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodge");
static_assert(sizeof(EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodge) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodge");
static_assert(offsetof(EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodge, AbilityId) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodge::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodge, targetChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodge::targetChara' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnAbilityReactionConditionTargetDodgeDirection
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodgeDirection final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodgeDirection) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodgeDirection");
static_assert(sizeof(EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodgeDirection) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodgeDirection");
static_assert(offsetof(EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodgeDirection, AbilityId) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodgeDirection::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodgeDirection, targetChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnAbilityReactionConditionTargetDodgeDirection::targetChara' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnAddStatusChangeID
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnAddStatusChangeID final
{
public:
	class FName                                   statusChangeID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnAddStatusChangeID) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnAddStatusChangeID");
static_assert(sizeof(EndAIControllerBluePrintBase_OnAddStatusChangeID) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnAddStatusChangeID");
static_assert(offsetof(EndAIControllerBluePrintBase_OnAddStatusChangeID, statusChangeID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnAddStatusChangeID::statusChangeID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnAIMoveModeChanged
// 0x0002 (0x0002 - 0x0000)
struct EndAIControllerBluePrintBase_OnAIMoveModeChanged final
{
public:
	EActorMoveMode                                BeforeMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActorMoveMode                                AfterMode;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnAIMoveModeChanged) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_OnAIMoveModeChanged");
static_assert(sizeof(EndAIControllerBluePrintBase_OnAIMoveModeChanged) == 0x000002, "Wrong size on EndAIControllerBluePrintBase_OnAIMoveModeChanged");
static_assert(offsetof(EndAIControllerBluePrintBase_OnAIMoveModeChanged, BeforeMode) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnAIMoveModeChanged::BeforeMode' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnAIMoveModeChanged, AfterMode) == 0x000001, "Member 'EndAIControllerBluePrintBase_OnAIMoveModeChanged::AfterMode' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnBeginBreak
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnBeginBreak final
{
public:
	class AEndCharacter*                          causerCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnBeginBreak) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnBeginBreak");
static_assert(sizeof(EndAIControllerBluePrintBase_OnBeginBreak) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnBeginBreak");
static_assert(offsetof(EndAIControllerBluePrintBase_OnBeginBreak, causerCharacter) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnBeginBreak::causerCharacter' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnBeginCutSceneInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnBeginCutSceneInvoke final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnBeginCutSceneInvoke) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnBeginCutSceneInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnBeginCutSceneInvoke) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnBeginCutSceneInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnBeginCutSceneInvoke, CutSceneID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnBeginCutSceneInvoke::CutSceneID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnChangeLeader
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnChangeLeader final
{
public:
	class AEndCharacter*                          LeaderCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnChangeLeader) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnChangeLeader");
static_assert(sizeof(EndAIControllerBluePrintBase_OnChangeLeader) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnChangeLeader");
static_assert(offsetof(EndAIControllerBluePrintBase_OnChangeLeader, LeaderCharacter) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnChangeLeader::LeaderCharacter' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnChangeSyncActionState
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_OnChangeSyncActionState final
{
public:
	class FName                                   SyncActionID;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSyncActionStateType                 StateType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          targetChara;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DetachDamageSourceID;                              // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnChangeSyncActionState) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnChangeSyncActionState");
static_assert(sizeof(EndAIControllerBluePrintBase_OnChangeSyncActionState) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_OnChangeSyncActionState");
static_assert(offsetof(EndAIControllerBluePrintBase_OnChangeSyncActionState, SyncActionID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnChangeSyncActionState::SyncActionID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnChangeSyncActionState, StateType) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnChangeSyncActionState::StateType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnChangeSyncActionState, targetChara) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnChangeSyncActionState::targetChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnChangeSyncActionState, DetachDamageSourceID) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnChangeSyncActionState::DetachDamageSourceID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnCharacterControllerChangeState
// 0x0002 (0x0002 - 0x0000)
struct EndAIControllerBluePrintBase_OnCharacterControllerChangeState final
{
public:
	EEndCharacterControllerStateType              BeforeState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndCharacterControllerStateType              AfterState;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnCharacterControllerChangeState) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_OnCharacterControllerChangeState");
static_assert(sizeof(EndAIControllerBluePrintBase_OnCharacterControllerChangeState) == 0x000002, "Wrong size on EndAIControllerBluePrintBase_OnCharacterControllerChangeState");
static_assert(offsetof(EndAIControllerBluePrintBase_OnCharacterControllerChangeState, BeforeState) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnCharacterControllerChangeState::BeforeState' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnCharacterControllerChangeState, AfterState) == 0x000001, "Member 'EndAIControllerBluePrintBase_OnCharacterControllerChangeState::AfterState' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnCreateDamageSource
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_OnCreateDamageSource final
{
public:
	class AEndCharacter*                          InOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnCreateDamageSource) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnCreateDamageSource");
static_assert(sizeof(EndAIControllerBluePrintBase_OnCreateDamageSource) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_OnCreateDamageSource");
static_assert(offsetof(EndAIControllerBluePrintBase_OnCreateDamageSource, InOwner) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnCreateDamageSource::InOwner' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnCreateDamageSource, DamageSourceID) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnCreateDamageSource::DamageSourceID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnCutChangeSequencerPV_Test
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_OnCutChangeSequencerPV_Test final
{
public:
	bool                                          bEndShot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnCutChangeSequencerPV_Test) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_OnCutChangeSequencerPV_Test");
static_assert(sizeof(EndAIControllerBluePrintBase_OnCutChangeSequencerPV_Test) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_OnCutChangeSequencerPV_Test");
static_assert(offsetof(EndAIControllerBluePrintBase_OnCutChangeSequencerPV_Test, bEndShot) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnCutChangeSequencerPV_Test::bEndShot' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnCutSceneMessageInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnCutSceneMessageInvoke final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnCutSceneMessageInvoke) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnCutSceneMessageInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnCutSceneMessageInvoke) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnCutSceneMessageInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnCutSceneMessageInvoke, Message) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnCutSceneMessageInvoke::Message' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnDead
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_OnDead final
{
public:
	bool                                          AtBurst;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnDead) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_OnDead");
static_assert(sizeof(EndAIControllerBluePrintBase_OnDead) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_OnDead");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDead, AtBurst) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnDead::AtBurst' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnDefenseGuard
// 0x0040 (0x0040 - 0x0000)
struct EndAIControllerBluePrintBase_OnDefenseGuard final
{
public:
	class FName                                   battleDefenseID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleDefenseGuardType                    defenseGuardType;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          executeTiming;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          attackedCharacter;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataObjectBattleAbilityAccessor    attackedDataObjectBattleAbility;                   // 0x0018(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   attackedDamageSourceID;                            // 0x0038(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnDefenseGuard) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnDefenseGuard");
static_assert(sizeof(EndAIControllerBluePrintBase_OnDefenseGuard) == 0x000040, "Wrong size on EndAIControllerBluePrintBase_OnDefenseGuard");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuard, battleDefenseID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnDefenseGuard::battleDefenseID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuard, defenseGuardType) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnDefenseGuard::defenseGuardType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuard, executeTiming) == 0x000009, "Member 'EndAIControllerBluePrintBase_OnDefenseGuard::executeTiming' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuard, attackedCharacter) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnDefenseGuard::attackedCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuard, attackedDataObjectBattleAbility) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnDefenseGuard::attackedDataObjectBattleAbility' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuard, attackedDamageSourceID) == 0x000038, "Member 'EndAIControllerBluePrintBase_OnDefenseGuard::attackedDamageSourceID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnDefenseGuardDamageHPFirst
// 0x0040 (0x0040 - 0x0000)
struct EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst final
{
public:
	class FName                                   battleDefenseID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleDefenseGuardType                    defenseGuardType;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          executeTiming;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          attackedCharacter;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataObjectBattleAbilityAccessor    attackedDataObjectBattleAbility;                   // 0x0018(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   attackedDamageSourceID;                            // 0x0038(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst");
static_assert(sizeof(EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst) == 0x000040, "Wrong size on EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst, battleDefenseID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst::battleDefenseID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst, defenseGuardType) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst::defenseGuardType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst, executeTiming) == 0x000009, "Member 'EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst::executeTiming' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst, attackedCharacter) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst::attackedCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst, attackedDataObjectBattleAbility) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst::attackedDataObjectBattleAbility' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst, attackedDamageSourceID) == 0x000038, "Member 'EndAIControllerBluePrintBase_OnDefenseGuardDamageHPFirst::attackedDamageSourceID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnDefenseGuardReflectDamage
// 0x0038 (0x0038 - 0x0000)
struct EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage final
{
public:
	class FName                                   battleDefenseID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          attackedCharacter;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataObjectBattleAbilityAccessor    attackedDataObjectBattleAbility;                   // 0x0010(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   attackedDamageSourceID;                            // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage");
static_assert(sizeof(EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage) == 0x000038, "Wrong size on EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage, battleDefenseID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage::battleDefenseID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage, attackedCharacter) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage::attackedCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage, attackedDataObjectBattleAbility) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage::attackedDataObjectBattleAbility' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage, attackedDamageSourceID) == 0x000030, "Member 'EndAIControllerBluePrintBase_OnDefenseGuardReflectDamage::attackedDamageSourceID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnDestroyDamageSource
// 0x0030 (0x0030 - 0x0000)
struct EndAIControllerBluePrintBase_OnDestroyDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Quat;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnDestroyDamageSource) == 0x000010, "Wrong alignment on EndAIControllerBluePrintBase_OnDestroyDamageSource");
static_assert(sizeof(EndAIControllerBluePrintBase_OnDestroyDamageSource) == 0x000030, "Wrong size on EndAIControllerBluePrintBase_OnDestroyDamageSource");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDestroyDamageSource, DamageSourceID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnDestroyDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDestroyDamageSource, Location) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnDestroyDamageSource::Location' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnDestroyDamageSource, Quat) == 0x000020, "Member 'EndAIControllerBluePrintBase_OnDestroyDamageSource::Quat' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnEndAbilityInvoke
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_OnEndAbilityInvoke final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          createdDamageSource;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          suspended;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          suspendedSummonCutScene;                           // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnEndAbilityInvoke) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnEndAbilityInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnEndAbilityInvoke) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_OnEndAbilityInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnEndAbilityInvoke, AbilityId) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnEndAbilityInvoke::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnEndAbilityInvoke, createdDamageSource) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnEndAbilityInvoke::createdDamageSource' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnEndAbilityInvoke, suspended) == 0x000009, "Member 'EndAIControllerBluePrintBase_OnEndAbilityInvoke::suspended' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnEndAbilityInvoke, suspendedSummonCutScene) == 0x00000A, "Member 'EndAIControllerBluePrintBase_OnEndAbilityInvoke::suspendedSummonCutScene' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnEndBurst
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_OnEndBurst final
{
public:
	bool                                          instant;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnEndBurst) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_OnEndBurst");
static_assert(sizeof(EndAIControllerBluePrintBase_OnEndBurst) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_OnEndBurst");
static_assert(offsetof(EndAIControllerBluePrintBase_OnEndBurst, instant) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnEndBurst::instant' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnEndCutSceneInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnEndCutSceneInvoke final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnEndCutSceneInvoke) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnEndCutSceneInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnEndCutSceneInvoke) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnEndCutSceneInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnEndCutSceneInvoke, CutSceneID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnEndCutSceneInvoke::CutSceneID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnEndCutSceneNextFrameInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnEndCutSceneNextFrameInvoke final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnEndCutSceneNextFrameInvoke) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnEndCutSceneNextFrameInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnEndCutSceneNextFrameInvoke) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnEndCutSceneNextFrameInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnEndCutSceneNextFrameInvoke, CutSceneID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnEndCutSceneNextFrameInvoke::CutSceneID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnFieldActionInfoFromPlayerInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnFieldActionInfoFromPlayerInvoke final
{
public:
	class FName                                   ActionTag;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnFieldActionInfoFromPlayerInvoke) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnFieldActionInfoFromPlayerInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnFieldActionInfoFromPlayerInvoke) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnFieldActionInfoFromPlayerInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnFieldActionInfoFromPlayerInvoke, ActionTag) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnFieldActionInfoFromPlayerInvoke::ActionTag' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnGetAbilityJumpLandLocation
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBattleAbilityID;                                 // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation");
static_assert(sizeof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation, OutLocation) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation, InBattleAbilityID) == 0x00000C, "Member 'EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation::InBattleAbilityID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation, ReturnValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnGetAbilityJumpLandLocationAndRotation
// 0x0024 (0x0024 - 0x0000)
struct EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InBattleAbilityID;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation");
static_assert(sizeof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation) == 0x000024, "Wrong size on EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation, OutLocation) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation::OutLocation' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation, OutRotation) == 0x00000C, "Member 'EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation::OutRotation' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation, InBattleAbilityID) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation::InBattleAbilityID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation, ReturnValue) == 0x000020, "Member 'EndAIControllerBluePrintBase_OnGetAbilityJumpLandLocationAndRotation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnGetCreateFieldPosition
// 0x0040 (0x0040 - 0x0000)
struct EndAIControllerBluePrintBase_OnGetCreateFieldPosition final
{
public:
	struct FVector                                OutPosition;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  outQuat;                                           // 0x0010(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InBattleAbilityID;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAnimationName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnGetCreateFieldPosition) == 0x000010, "Wrong alignment on EndAIControllerBluePrintBase_OnGetCreateFieldPosition");
static_assert(sizeof(EndAIControllerBluePrintBase_OnGetCreateFieldPosition) == 0x000040, "Wrong size on EndAIControllerBluePrintBase_OnGetCreateFieldPosition");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetCreateFieldPosition, OutPosition) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnGetCreateFieldPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetCreateFieldPosition, outQuat) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnGetCreateFieldPosition::outQuat' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetCreateFieldPosition, InBattleAbilityID) == 0x000020, "Member 'EndAIControllerBluePrintBase_OnGetCreateFieldPosition::InBattleAbilityID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetCreateFieldPosition, InDamageSourceID) == 0x000028, "Member 'EndAIControllerBluePrintBase_OnGetCreateFieldPosition::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetCreateFieldPosition, InAnimationName) == 0x000030, "Member 'EndAIControllerBluePrintBase_OnGetCreateFieldPosition::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetCreateFieldPosition, ReturnValue) == 0x000038, "Member 'EndAIControllerBluePrintBase_OnGetCreateFieldPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnGetTargetFieldActor
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_OnGetTargetFieldActor final
{
public:
	class FName                                   InBattleAbilityID;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnGetTargetFieldActor) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnGetTargetFieldActor");
static_assert(sizeof(EndAIControllerBluePrintBase_OnGetTargetFieldActor) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_OnGetTargetFieldActor");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetTargetFieldActor, InBattleAbilityID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnGetTargetFieldActor::InBattleAbilityID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetTargetFieldActor, ReturnValue) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnGetTargetFieldActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnGetTargetFieldPosition
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerBluePrintBase_OnGetTargetFieldPosition final
{
public:
	struct FVector                                OutPosition;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBattleAbilityID;                                 // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAnimationName;                                   // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnGetTargetFieldPosition) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnGetTargetFieldPosition");
static_assert(sizeof(EndAIControllerBluePrintBase_OnGetTargetFieldPosition) == 0x000028, "Wrong size on EndAIControllerBluePrintBase_OnGetTargetFieldPosition");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetTargetFieldPosition, OutPosition) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnGetTargetFieldPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetTargetFieldPosition, InBattleAbilityID) == 0x00000C, "Member 'EndAIControllerBluePrintBase_OnGetTargetFieldPosition::InBattleAbilityID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetTargetFieldPosition, InDamageSourceID) == 0x000014, "Member 'EndAIControllerBluePrintBase_OnGetTargetFieldPosition::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetTargetFieldPosition, InAnimationName) == 0x00001C, "Member 'EndAIControllerBluePrintBase_OnGetTargetFieldPosition::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGetTargetFieldPosition, ReturnValue) == 0x000024, "Member 'EndAIControllerBluePrintBase_OnGetTargetFieldPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnGiveDamageInvoke
// 0x0038 (0x0038 - 0x0000)
struct EndAIControllerBluePrintBase_OnGiveDamageInvoke final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          InTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBind;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InGuard;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepOver;                                          // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCounter;                                         // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBoneName;                                        // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAttributeWeak;                                   // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InDamageSourceID;                                  // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSteal;                                           // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          heal;                                              // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          kill;                                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          justGuard;                                         // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLock;                                             // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnGiveDamageInvoke) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnGiveDamageInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnGiveDamageInvoke) == 0x000038, "Wrong size on EndAIControllerBluePrintBase_OnGiveDamageInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, Damage) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::Damage' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, InTarget) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::InTarget' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, InName) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::InName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, InBind) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::InBind' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, InGuard) == 0x000019, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::InGuard' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, KeepOver) == 0x00001A, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::KeepOver' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, InCounter) == 0x00001B, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::InCounter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, InBoneName) == 0x00001C, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::InBoneName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, InAttributeWeak) == 0x000024, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::InAttributeWeak' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, InDamageSourceID) == 0x000028, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, InSteal) == 0x000030, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::InSteal' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, heal) == 0x000031, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::heal' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, kill) == 0x000032, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::kill' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, justGuard) == 0x000033, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::justGuard' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnGiveDamageInvoke, bLock) == 0x000034, "Member 'EndAIControllerBluePrintBase_OnGiveDamageInvoke::bLock' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnHitDamageSource
// 0x0014 (0x0014 - 0x0000)
struct EndAIControllerBluePrintBase_OnHitDamageSource final
{
public:
	bool                                          outDestroySrcDamageSoruce;                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SrcDamageSourceID;                                 // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitDamageSourceID;                                 // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnHitDamageSource) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnHitDamageSource");
static_assert(sizeof(EndAIControllerBluePrintBase_OnHitDamageSource) == 0x000014, "Wrong size on EndAIControllerBluePrintBase_OnHitDamageSource");
static_assert(offsetof(EndAIControllerBluePrintBase_OnHitDamageSource, outDestroySrcDamageSoruce) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnHitDamageSource::outDestroySrcDamageSoruce' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnHitDamageSource, SrcDamageSourceID) == 0x000004, "Member 'EndAIControllerBluePrintBase_OnHitDamageSource::SrcDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnHitDamageSource, HitDamageSourceID) == 0x00000C, "Member 'EndAIControllerBluePrintBase_OnHitDamageSource::HitDamageSourceID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnIncrementBattleCountPerID
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_OnIncrementBattleCountPerID final
{
public:
	class FName                                   TargetCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCountLogType                        Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnIncrementBattleCountPerID) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnIncrementBattleCountPerID");
static_assert(sizeof(EndAIControllerBluePrintBase_OnIncrementBattleCountPerID) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_OnIncrementBattleCountPerID");
static_assert(offsetof(EndAIControllerBluePrintBase_OnIncrementBattleCountPerID, TargetCharaName) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnIncrementBattleCountPerID::TargetCharaName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnIncrementBattleCountPerID, Type) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnIncrementBattleCountPerID::Type' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnIncrementBattleCountPerID, ID) == 0x00000C, "Member 'EndAIControllerBluePrintBase_OnIncrementBattleCountPerID::ID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnIncrementBattleCountPerID, Count) == 0x000014, "Member 'EndAIControllerBluePrintBase_OnIncrementBattleCountPerID::Count' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnKilledInvoke
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_OnKilledInvoke final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          InTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBind;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnKilledInvoke) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnKilledInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnKilledInvoke) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_OnKilledInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnKilledInvoke, Damage) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnKilledInvoke::Damage' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnKilledInvoke, InTarget) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnKilledInvoke::InTarget' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnKilledInvoke, InName) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnKilledInvoke::InName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnKilledInvoke, InBind) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnKilledInvoke::InBind' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnMotionMessageInvoke
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_OnMotionMessageInvoke final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIntValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloatValue;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnMotionMessageInvoke) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnMotionMessageInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnMotionMessageInvoke) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_OnMotionMessageInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionMessageInvoke, InMotionName) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnMotionMessageInvoke::InMotionName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionMessageInvoke, InName) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnMotionMessageInvoke::InName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionMessageInvoke, InIntValue) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnMotionMessageInvoke::InIntValue' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionMessageInvoke, InFloatValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_OnMotionMessageInvoke::InFloatValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnMotionStateMessageBegin
// 0x001C (0x001C - 0x0000)
struct EndAIControllerBluePrintBase_OnMotionStateMessageBegin final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIntValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloatValue;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTotalDuration;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnMotionStateMessageBegin) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnMotionStateMessageBegin");
static_assert(sizeof(EndAIControllerBluePrintBase_OnMotionStateMessageBegin) == 0x00001C, "Wrong size on EndAIControllerBluePrintBase_OnMotionStateMessageBegin");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageBegin, InMotionName) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageBegin::InMotionName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageBegin, InName) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageBegin::InName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageBegin, InIntValue) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageBegin::InIntValue' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageBegin, InFloatValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageBegin::InFloatValue' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageBegin, InTotalDuration) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageBegin::InTotalDuration' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnMotionStateMessageEnd
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_OnMotionStateMessageEnd final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIntValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloatValue;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnMotionStateMessageEnd) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnMotionStateMessageEnd");
static_assert(sizeof(EndAIControllerBluePrintBase_OnMotionStateMessageEnd) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_OnMotionStateMessageEnd");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageEnd, InMotionName) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageEnd::InMotionName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageEnd, InName) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageEnd::InName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageEnd, InIntValue) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageEnd::InIntValue' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageEnd, InFloatValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageEnd::InFloatValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnMotionStateMessageUpdate
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_OnMotionStateMessageUpdate final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIntValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloatValue;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InProgress;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LatestContactWall;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LatestContact;                                     // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnMotionStateMessageUpdate) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnMotionStateMessageUpdate");
static_assert(sizeof(EndAIControllerBluePrintBase_OnMotionStateMessageUpdate) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_OnMotionStateMessageUpdate");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageUpdate, InMotionName) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageUpdate::InMotionName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageUpdate, InName) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageUpdate::InName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageUpdate, InIntValue) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageUpdate::InIntValue' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageUpdate, InFloatValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageUpdate::InFloatValue' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageUpdate, InProgress) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageUpdate::InProgress' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageUpdate, LatestContactWall) == 0x00001C, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageUpdate::LatestContactWall' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnMotionStateMessageUpdate, LatestContact) == 0x00001D, "Member 'EndAIControllerBluePrintBase_OnMotionStateMessageUpdate::LatestContact' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnPartsBreak
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnPartsBreak final
{
public:
	class FName                                   PartsID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnPartsBreak) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnPartsBreak");
static_assert(sizeof(EndAIControllerBluePrintBase_OnPartsBreak) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnPartsBreak");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPartsBreak, PartsID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnPartsBreak::PartsID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnPCDead
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnPCDead final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         alivePCNum;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnPCDead) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnPCDead");
static_assert(sizeof(EndAIControllerBluePrintBase_OnPCDead) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnPCDead");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPCDead, PlayerType) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnPCDead::PlayerType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPCDead, alivePCNum) == 0x000004, "Member 'EndAIControllerBluePrintBase_OnPCDead::alivePCNum' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnPlayBattleCameraSequence
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_OnPlayBattleCameraSequence final
{
public:
	int32                                         sequenceActorUID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   battleCameraSequenceID;                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnPlayBattleCameraSequence) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnPlayBattleCameraSequence");
static_assert(sizeof(EndAIControllerBluePrintBase_OnPlayBattleCameraSequence) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_OnPlayBattleCameraSequence");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPlayBattleCameraSequence, sequenceActorUID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnPlayBattleCameraSequence::sequenceActorUID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPlayBattleCameraSequence, battleCameraSequenceID) == 0x000004, "Member 'EndAIControllerBluePrintBase_OnPlayBattleCameraSequence::battleCameraSequenceID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnPreTakeDamage
// 0x0068 (0x0068 - 0x0000)
struct EndAIControllerBluePrintBase_OnPreTakeDamage final
{
public:
	float                                         justHitRotYaw;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ownerCharacter;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   hitBoneName;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hitPosition;                                       // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InGuard;                                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttributeType                       appendAttribute;                                   // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndDataObjectBattleDamageSourceAccessor dataObjectBattleDamageSource;                      // 0x0040(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          heal;                                              // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnPreTakeDamage) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnPreTakeDamage");
static_assert(sizeof(EndAIControllerBluePrintBase_OnPreTakeDamage) == 0x000068, "Wrong size on EndAIControllerBluePrintBase_OnPreTakeDamage");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, justHitRotYaw) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::justHitRotYaw' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, ownerCharacter) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, InName) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::InName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, hitBoneName) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::hitBoneName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, DamageSourceID) == 0x000020, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, hitPosition) == 0x000028, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::hitPosition' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, Damage) == 0x000034, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, InGuard) == 0x000038, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::InGuard' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, appendAttribute) == 0x000039, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::appendAttribute' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, dataObjectBattleDamageSource) == 0x000040, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::dataObjectBattleDamageSource' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnPreTakeDamage, heal) == 0x000060, "Member 'EndAIControllerBluePrintBase_OnPreTakeDamage::heal' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnReactionSensingInvoke
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_OnReactionSensingInvoke final
{
public:
	class AEndCharacter*                          CauserChara;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandleId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleReactionNotificationType            NotificationType;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttackDirectionType                 AttackDirectionType;                               // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnReactionSensingInvoke) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnReactionSensingInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnReactionSensingInvoke) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_OnReactionSensingInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnReactionSensingInvoke, CauserChara) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnReactionSensingInvoke::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnReactionSensingInvoke, HandleId) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnReactionSensingInvoke::HandleId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnReactionSensingInvoke, NotificationType) == 0x00000C, "Member 'EndAIControllerBluePrintBase_OnReactionSensingInvoke::NotificationType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnReactionSensingInvoke, AttackDirectionType) == 0x00000D, "Member 'EndAIControllerBluePrintBase_OnReactionSensingInvoke::AttackDirectionType' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnReactionSensingTakeAbilityInvoke
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_OnReactionSensingTakeAbilityInvoke final
{
public:
	class AEndCharacter*                          CauserChara;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandleId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_OnReactionSensingTakeAbilityInvoke) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnReactionSensingTakeAbilityInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnReactionSensingTakeAbilityInvoke) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_OnReactionSensingTakeAbilityInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnReactionSensingTakeAbilityInvoke, CauserChara) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnReactionSensingTakeAbilityInvoke::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnReactionSensingTakeAbilityInvoke, HandleId) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnReactionSensingTakeAbilityInvoke::HandleId' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnRemoveStatusChangeID
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnRemoveStatusChangeID final
{
public:
	class FName                                   statusChangeID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnRemoveStatusChangeID) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnRemoveStatusChangeID");
static_assert(sizeof(EndAIControllerBluePrintBase_OnRemoveStatusChangeID) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnRemoveStatusChangeID");
static_assert(offsetof(EndAIControllerBluePrintBase_OnRemoveStatusChangeID, statusChangeID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnRemoveStatusChangeID::statusChangeID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnSpecialStateEffectEvent
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnSpecialStateEffectEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnSpecialStateEffectEvent) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnSpecialStateEffectEvent");
static_assert(sizeof(EndAIControllerBluePrintBase_OnSpecialStateEffectEvent) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnSpecialStateEffectEvent");
static_assert(offsetof(EndAIControllerBluePrintBase_OnSpecialStateEffectEvent, EventName) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnSpecialStateEffectEvent::EventName' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnSpecialStatusChange
// 0x0048 (0x0048 - 0x0000)
struct EndAIControllerBluePrintBase_OnSpecialStatusChange final
{
public:
	class FName                                   SpecialStatusChangeID;                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChangeID;                                          // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Params_0;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParamIDs;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ParamActors;                                       // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnSpecialStatusChange) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnSpecialStatusChange");
static_assert(sizeof(EndAIControllerBluePrintBase_OnSpecialStatusChange) == 0x000048, "Wrong size on EndAIControllerBluePrintBase_OnSpecialStatusChange");
static_assert(offsetof(EndAIControllerBluePrintBase_OnSpecialStatusChange, SpecialStatusChangeID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnSpecialStatusChange::SpecialStatusChangeID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnSpecialStatusChange, Type) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnSpecialStatusChange::Type' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnSpecialStatusChange, ChangeID) == 0x00000C, "Member 'EndAIControllerBluePrintBase_OnSpecialStatusChange::ChangeID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnSpecialStatusChange, Params_0) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnSpecialStatusChange::Params_0' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnSpecialStatusChange, ParamIDs) == 0x000028, "Member 'EndAIControllerBluePrintBase_OnSpecialStatusChange::ParamIDs' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnSpecialStatusChange, ParamActors) == 0x000038, "Member 'EndAIControllerBluePrintBase_OnSpecialStatusChange::ParamActors' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnStolen
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnStolen final
{
public:
	class AEndCharacter*                          causerCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnStolen) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnStolen");
static_assert(sizeof(EndAIControllerBluePrintBase_OnStolen) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnStolen");
static_assert(offsetof(EndAIControllerBluePrintBase_OnStolen, causerCharacter) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnStolen::causerCharacter' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnSyncActionRescue
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_OnSyncActionRescue final
{
public:
	class FName                                   SyncActionID;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnSyncActionRescue) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnSyncActionRescue");
static_assert(sizeof(EndAIControllerBluePrintBase_OnSyncActionRescue) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_OnSyncActionRescue");
static_assert(offsetof(EndAIControllerBluePrintBase_OnSyncActionRescue, SyncActionID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnSyncActionRescue::SyncActionID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnSyncActionRescue, targetChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnSyncActionRescue::targetChara' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnSystemMessage
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_OnSystemMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnSystemMessage) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnSystemMessage");
static_assert(sizeof(EndAIControllerBluePrintBase_OnSystemMessage) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_OnSystemMessage");
static_assert(offsetof(EndAIControllerBluePrintBase_OnSystemMessage, InMessage) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnSystemMessage::InMessage' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnTakeAbilityInvoke
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerBluePrintBase_OnTakeAbilityInvoke final
{
public:
	class AEndCharacter*                          CauserChara;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  AbilityCommandType;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AnimationNameList;                                 // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnTakeAbilityInvoke) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnTakeAbilityInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnTakeAbilityInvoke) == 0x000028, "Wrong size on EndAIControllerBluePrintBase_OnTakeAbilityInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeAbilityInvoke, CauserChara) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnTakeAbilityInvoke::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeAbilityInvoke, AbilityName) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnTakeAbilityInvoke::AbilityName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeAbilityInvoke, AbilityCommandType) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnTakeAbilityInvoke::AbilityCommandType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeAbilityInvoke, AnimationNameList) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnTakeAbilityInvoke::AnimationNameList' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnTakeDamageHPCutValueOver50First
// 0x0058 (0x0058 - 0x0000)
struct EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First final
{
public:
	class AEndCharacter*                          causerCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataObjectBattleAbilityAccessor    dataObjectBattleAbility;                           // 0x0010(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         attackCount;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndDataObjectBattleDamageSourceAccessor dataTableBattleDamageSource;                       // 0x0038(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First");
static_assert(sizeof(EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First) == 0x000058, "Wrong size on EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First, causerCharacter) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First::causerCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First, AbilityId) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First, dataObjectBattleAbility) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First::dataObjectBattleAbility' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First, attackCount) == 0x000030, "Member 'EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First::attackCount' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First, dataTableBattleDamageSource) == 0x000038, "Member 'EndAIControllerBluePrintBase_OnTakeDamageHPCutValueOver50First::dataTableBattleDamageSource' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnTakeDamageHPFirstInvoke
// 0x0038 (0x0038 - 0x0000)
struct EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke final
{
public:
	class AEndCharacter*                          causerCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          attributeWeak;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  AbilityCommandType;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndDataObjectBattleAbilityAccessor    dataObjectBattleAbility;                           // 0x0018(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke) == 0x000038, "Wrong size on EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke, causerCharacter) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke::causerCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke, AbilityId) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke, attributeWeak) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke::attributeWeak' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke, AbilityCommandType) == 0x000011, "Member 'EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke::AbilityCommandType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke, dataObjectBattleAbility) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnTakeDamageHPFirstInvoke::dataObjectBattleAbility' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnTakeDamageInvoke
// 0x0090 (0x0090 - 0x0000)
struct EndAIControllerBluePrintBase_OnTakeDamageInvoke final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          InChara;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  InCommandType;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBind;                                            // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InGuard;                                           // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InBoneName;                                        // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAttributeWeak;                                   // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InDmgSrcID;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttributeType                       appendAttribute;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         justHitRotYaw;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hitPosition;                                       // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InHeal;                                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCounter;                                         // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndDataObjectBattleDamageSourceAccessor dataObjectBattleDamageSource;                      // 0x0048(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useAbilityUCPC;                                    // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndDataObjectBattleAbilityAccessor    dataObjectBattleAbility;                           // 0x0070(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnTakeDamageInvoke) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnTakeDamageInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnTakeDamageInvoke) == 0x000090, "Wrong size on EndAIControllerBluePrintBase_OnTakeDamageInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, Damage) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::Damage' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, InChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::InChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, InName) == 0x000010, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::InName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, InCommandType) == 0x000018, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::InCommandType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, InBind) == 0x000019, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::InBind' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, InGuard) == 0x00001A, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::InGuard' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, InBoneName) == 0x00001C, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::InBoneName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, InAttributeWeak) == 0x000024, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::InAttributeWeak' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, InDmgSrcID) == 0x000028, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::InDmgSrcID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, appendAttribute) == 0x000030, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::appendAttribute' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, justHitRotYaw) == 0x000034, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::justHitRotYaw' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, hitPosition) == 0x000038, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::hitPosition' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, InHeal) == 0x000044, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::InHeal' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, InCounter) == 0x000045, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::InCounter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, dataObjectBattleDamageSource) == 0x000048, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::dataObjectBattleDamageSource' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, useAbilityUCPC) == 0x000068, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::useAbilityUCPC' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageInvoke, dataObjectBattleAbility) == 0x000070, "Member 'EndAIControllerBluePrintBase_OnTakeDamageInvoke::dataObjectBattleAbility' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnTakeDamageOverTime
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBluePrintBase_OnTakeDamageOverTime final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnTakeDamageOverTime) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnTakeDamageOverTime");
static_assert(sizeof(EndAIControllerBluePrintBase_OnTakeDamageOverTime) == 0x000004, "Wrong size on EndAIControllerBluePrintBase_OnTakeDamageOverTime");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakeDamageOverTime, Damage) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnTakeDamageOverTime::Damage' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnTakePartsDamage
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnTakePartsDamage final
{
public:
	class FName                                   BattleCharaPartsSpecID;                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnTakePartsDamage) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnTakePartsDamage");
static_assert(sizeof(EndAIControllerBluePrintBase_OnTakePartsDamage) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnTakePartsDamage");
static_assert(offsetof(EndAIControllerBluePrintBase_OnTakePartsDamage, BattleCharaPartsSpecID) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnTakePartsDamage::BattleCharaPartsSpecID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnUpdateBattle
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBluePrintBase_OnUpdateBattle final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnUpdateBattle) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnUpdateBattle");
static_assert(sizeof(EndAIControllerBluePrintBase_OnUpdateBattle) == 0x000004, "Wrong size on EndAIControllerBluePrintBase_OnUpdateBattle");
static_assert(offsetof(EndAIControllerBluePrintBase_OnUpdateBattle, DeltaTime) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnUpdateBattle::DeltaTime' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnUseAbility
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_OnUseAbility final
{
public:
	class AEndCharacter*                          useCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnUseAbility) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OnUseAbility");
static_assert(sizeof(EndAIControllerBluePrintBase_OnUseAbility) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_OnUseAbility");
static_assert(offsetof(EndAIControllerBluePrintBase_OnUseAbility, useCharacter) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnUseAbility::useCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OnUseAbility, AbilityId) == 0x000008, "Member 'EndAIControllerBluePrintBase_OnUseAbility::AbilityId' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OnUseAbilityInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_OnUseAbilityInvoke final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OnUseAbilityInvoke) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_OnUseAbilityInvoke");
static_assert(sizeof(EndAIControllerBluePrintBase_OnUseAbilityInvoke) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_OnUseAbilityInvoke");
static_assert(offsetof(EndAIControllerBluePrintBase_OnUseAbilityInvoke, AbilityId) == 0x000000, "Member 'EndAIControllerBluePrintBase_OnUseAbilityInvoke::AbilityId' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.OverrideDamageHitReactionID
// 0x0048 (0x0048 - 0x0000)
struct EndAIControllerBluePrintBase_OverrideDamageHitReactionID final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataObjectBattleAbilityAccessor    dataObjectBattleAbility;                           // 0x0008(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          abilityFirstHit;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          causerCharacter;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   damageHitReactionID;                               // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_OverrideDamageHitReactionID) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_OverrideDamageHitReactionID");
static_assert(sizeof(EndAIControllerBluePrintBase_OverrideDamageHitReactionID) == 0x000048, "Wrong size on EndAIControllerBluePrintBase_OverrideDamageHitReactionID");
static_assert(offsetof(EndAIControllerBluePrintBase_OverrideDamageHitReactionID, AbilityId) == 0x000000, "Member 'EndAIControllerBluePrintBase_OverrideDamageHitReactionID::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OverrideDamageHitReactionID, dataObjectBattleAbility) == 0x000008, "Member 'EndAIControllerBluePrintBase_OverrideDamageHitReactionID::dataObjectBattleAbility' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OverrideDamageHitReactionID, DamageSourceID) == 0x000028, "Member 'EndAIControllerBluePrintBase_OverrideDamageHitReactionID::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OverrideDamageHitReactionID, abilityFirstHit) == 0x000030, "Member 'EndAIControllerBluePrintBase_OverrideDamageHitReactionID::abilityFirstHit' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OverrideDamageHitReactionID, causerCharacter) == 0x000038, "Member 'EndAIControllerBluePrintBase_OverrideDamageHitReactionID::causerCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_OverrideDamageHitReactionID, damageHitReactionID) == 0x000040, "Member 'EndAIControllerBluePrintBase_OverrideDamageHitReactionID::damageHitReactionID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.PlayBattleCameraSequence
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_PlayBattleCameraSequence final
{
public:
	class FName                                   SequenceID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_PlayBattleCameraSequence) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_PlayBattleCameraSequence");
static_assert(sizeof(EndAIControllerBluePrintBase_PlayBattleCameraSequence) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_PlayBattleCameraSequence");
static_assert(offsetof(EndAIControllerBluePrintBase_PlayBattleCameraSequence, SequenceID) == 0x000000, "Member 'EndAIControllerBluePrintBase_PlayBattleCameraSequence::SequenceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_PlayBattleCameraSequence, ReturnValue) == 0x000008, "Member 'EndAIControllerBluePrintBase_PlayBattleCameraSequence::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RemoveAttachEffect
// 0x0014 (0x0014 - 0x0000)
struct EndAIControllerBluePrintBase_RemoveAttachEffect final
{
public:
	class FName                                   AttachSocketName;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroy;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RemoveAttachEffect) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_RemoveAttachEffect");
static_assert(sizeof(EndAIControllerBluePrintBase_RemoveAttachEffect) == 0x000014, "Wrong size on EndAIControllerBluePrintBase_RemoveAttachEffect");
static_assert(offsetof(EndAIControllerBluePrintBase_RemoveAttachEffect, AttachSocketName) == 0x000000, "Member 'EndAIControllerBluePrintBase_RemoveAttachEffect::AttachSocketName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RemoveAttachEffect, ResourceName) == 0x000008, "Member 'EndAIControllerBluePrintBase_RemoveAttachEffect::ResourceName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RemoveAttachEffect, bDestroy) == 0x000010, "Member 'EndAIControllerBluePrintBase_RemoveAttachEffect::bDestroy' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RemoveSpecialStateEffect
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_RemoveSpecialStateEffect final
{
public:
	class FName                                   specialStateEffectID;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_RemoveSpecialStateEffect) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_RemoveSpecialStateEffect");
static_assert(sizeof(EndAIControllerBluePrintBase_RemoveSpecialStateEffect) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_RemoveSpecialStateEffect");
static_assert(offsetof(EndAIControllerBluePrintBase_RemoveSpecialStateEffect, specialStateEffectID) == 0x000000, "Member 'EndAIControllerBluePrintBase_RemoveSpecialStateEffect::specialStateEffectID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RemoveSpecialStatusByID
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_RemoveSpecialStatusByID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_RemoveSpecialStatusByID) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_RemoveSpecialStatusByID");
static_assert(sizeof(EndAIControllerBluePrintBase_RemoveSpecialStatusByID) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_RemoveSpecialStatusByID");
static_assert(offsetof(EndAIControllerBluePrintBase_RemoveSpecialStatusByID, ID) == 0x000000, "Member 'EndAIControllerBluePrintBase_RemoveSpecialStatusByID::ID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestAction
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_RequestAction final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestAction) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestAction");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestAction) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_RequestAction");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestAction, MoveDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestAction::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestAction, ActionDefinitionClass) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestAction::ActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestAction, ReturnValue) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestActionChild
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_RequestActionChild final
{
public:
	TSubclassOf<class UEndAIActionDefinitionBase> InActionDefinitionClass;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildActionId;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestActionChild) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestActionChild");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestActionChild) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_RequestActionChild");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionChild, InActionDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestActionChild::InActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionChild, ChildActionId) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestActionChild::ChildActionId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionChild, ReturnValue) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestActionChild::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestActionInterrupt
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_RequestActionInterrupt final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestActionInterrupt) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestActionInterrupt");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestActionInterrupt) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_RequestActionInterrupt");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionInterrupt, MoveDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestActionInterrupt::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionInterrupt, ActionDefinitionClass) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestActionInterrupt::ActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionInterrupt, ReturnValue) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestActionInterrupt::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestActionInterruptPack
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_RequestActionInterruptPack final
{
public:
	TSubclassOf<class UEndAIActionPackBase>       ActionPackClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndAIActionPackReturnInfo             ReturnValue;                                       // 0x0008(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestActionInterruptPack) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestActionInterruptPack");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestActionInterruptPack) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_RequestActionInterruptPack");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionInterruptPack, ActionPackClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestActionInterruptPack::ActionPackClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionInterruptPack, ReturnValue) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestActionInterruptPack::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestActionInterruptPackArray
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerBluePrintBase_RequestActionInterruptPackArray final
{
public:
	TArray<TSubclassOf<class UEndAIActionPackBase>> ActionPackClassList;                               // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FEndAIActionPackReturnInfo             ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestActionInterruptPackArray) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestActionInterruptPackArray");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestActionInterruptPackArray) == 0x000028, "Wrong size on EndAIControllerBluePrintBase_RequestActionInterruptPackArray");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionInterruptPackArray, ActionPackClassList) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestActionInterruptPackArray::ActionPackClassList' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionInterruptPackArray, ReturnValue) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestActionInterruptPackArray::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestActionInterruptPackArrayLot
// 0x0038 (0x0038 - 0x0000)
struct EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot final
{
public:
	TArray<TSubclassOf<class UEndAIActionPackBase>> ActionPackClassList;                               // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int32>                                 LotProbabilities;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEndAIActionPackReturnInfo             ReturnValue;                                       // 0x0020(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot) == 0x000038, "Wrong size on EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot, ActionPackClassList) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot::ActionPackClassList' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot, LotProbabilities) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot::LotProbabilities' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot, ReturnValue) == 0x000020, "Member 'EndAIControllerBluePrintBase_RequestActionInterruptPackArrayLot::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestActionPack
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_RequestActionPack final
{
public:
	TSubclassOf<class UEndAIActionPackBase>       ActionPackClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndAIActionPackReturnInfo             ReturnValue;                                       // 0x0008(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestActionPack) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestActionPack");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestActionPack) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_RequestActionPack");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionPack, ActionPackClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestActionPack::ActionPackClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionPack, ReturnValue) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestActionPack::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestActionPackArray
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerBluePrintBase_RequestActionPackArray final
{
public:
	TArray<TSubclassOf<class UEndAIActionPackBase>> ActionPackClassList;                               // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FEndAIActionPackReturnInfo             ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestActionPackArray) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestActionPackArray");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestActionPackArray) == 0x000028, "Wrong size on EndAIControllerBluePrintBase_RequestActionPackArray");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionPackArray, ActionPackClassList) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestActionPackArray::ActionPackClassList' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionPackArray, ReturnValue) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestActionPackArray::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestActionPackArrayLot
// 0x0038 (0x0038 - 0x0000)
struct EndAIControllerBluePrintBase_RequestActionPackArrayLot final
{
public:
	TArray<TSubclassOf<class UEndAIActionPackBase>> ActionPackClassList;                               // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int32>                                 LotProbabilities;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEndAIActionPackReturnInfo             ReturnValue;                                       // 0x0020(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestActionPackArrayLot) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestActionPackArrayLot");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestActionPackArrayLot) == 0x000038, "Wrong size on EndAIControllerBluePrintBase_RequestActionPackArrayLot");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionPackArrayLot, ActionPackClassList) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestActionPackArrayLot::ActionPackClassList' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionPackArrayLot, LotProbabilities) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestActionPackArrayLot::LotProbabilities' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestActionPackArrayLot, ReturnValue) == 0x000020, "Member 'EndAIControllerBluePrintBase_RequestActionPackArrayLot::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestCancelReactionAvoidToAction
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_RequestCancelReactionAvoidToAction final
{
public:
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestCancelReactionAvoidToAction) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestCancelReactionAvoidToAction");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestCancelReactionAvoidToAction) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_RequestCancelReactionAvoidToAction");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestCancelReactionAvoidToAction, ActionDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestCancelReactionAvoidToAction::ActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestCancelReactionAvoidToAction, ReturnValue) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestCancelReactionAvoidToAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestCombinationSpecial
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_RequestCombinationSpecial final
{
public:
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLast;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestCombinationSpecial) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestCombinationSpecial");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestCombinationSpecial) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_RequestCombinationSpecial");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestCombinationSpecial, ActionDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestCombinationSpecial::ActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestCombinationSpecial, bLast) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestCombinationSpecial::bLast' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestCombinationSpecial, ReturnValue) == 0x000009, "Member 'EndAIControllerBluePrintBase_RequestCombinationSpecial::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestGuardHitCounter
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_RequestGuardHitCounter final
{
public:
	class FName                                   DefenseID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteTiming;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestGuardHitCounter) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestGuardHitCounter");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestGuardHitCounter) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_RequestGuardHitCounter");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounter, DefenseID) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounter::DefenseID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounter, bExecuteTiming) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounter::bExecuteTiming' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounter, ActionDefinitionClass) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounter::ActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounter, ReturnValue) == 0x000018, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestGuardHitCounterPack
// 0x0030 (0x0030 - 0x0000)
struct EndAIControllerBluePrintBase_RequestGuardHitCounterPack final
{
public:
	class FName                                   DefenseID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteTiming;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UEndAIActionPackBase>       ActionPackClass;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndAIActionPackReturnInfo             ReturnValue;                                       // 0x0018(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestGuardHitCounterPack) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestGuardHitCounterPack");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestGuardHitCounterPack) == 0x000030, "Wrong size on EndAIControllerBluePrintBase_RequestGuardHitCounterPack");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPack, DefenseID) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPack::DefenseID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPack, bExecuteTiming) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPack::bExecuteTiming' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPack, ActionPackClass) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPack::ActionPackClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPack, ReturnValue) == 0x000018, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPack::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestGuardHitCounterPackArray
// 0x0038 (0x0038 - 0x0000)
struct EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray final
{
public:
	class FName                                   DefenseID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteTiming;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UEndAIActionPackBase>> ActionPackClassList;                               // 0x0010(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FEndAIActionPackReturnInfo             ReturnValue;                                       // 0x0020(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray) == 0x000038, "Wrong size on EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray, DefenseID) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray::DefenseID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray, bExecuteTiming) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray::bExecuteTiming' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray, ActionPackClassList) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray::ActionPackClassList' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray, ReturnValue) == 0x000020, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPackArray::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestGuardHitCounterPackArrayLot
// 0x0048 (0x0048 - 0x0000)
struct EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot final
{
public:
	class FName                                   DefenseID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteTiming;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UEndAIActionPackBase>> ActionPackClassList;                               // 0x0010(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int32>                                 LotProbabilities;                                  // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEndAIActionPackReturnInfo             ReturnValue;                                       // 0x0030(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot) == 0x000048, "Wrong size on EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot, DefenseID) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot::DefenseID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot, bExecuteTiming) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot::bExecuteTiming' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot, ActionPackClassList) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot::ActionPackClassList' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot, LotProbabilities) == 0x000020, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot::LotProbabilities' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot, ReturnValue) == 0x000030, "Member 'EndAIControllerBluePrintBase_RequestGuardHitCounterPackArrayLot::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestPlayBattleCameraSequence
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence final
{
public:
	class FName                                   CameraSequenceID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacterBase*                      OwnerChara;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacterBase*                      HasResourceChara;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToRegisterSlaveViewOnly;                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MassiveEnvironmentFrustrumScaleForMainPass;        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence) == 0x000028, "Wrong size on EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence, CameraSequenceID) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence::CameraSequenceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence, OwnerChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence::OwnerChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence, HasResourceChara) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence::HasResourceChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence, TargetActor) == 0x000018, "Member 'EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence::TargetActor' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence, bIsToRegisterSlaveViewOnly) == 0x000020, "Member 'EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence::bIsToRegisterSlaveViewOnly' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence, MassiveEnvironmentFrustrumScaleForMainPass) == 0x000024, "Member 'EndAIControllerBluePrintBase_RequestPlayBattleCameraSequence::MassiveEnvironmentFrustrumScaleForMainPass' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestReactionAvoid
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_RequestReactionAvoid final
{
public:
	TSubclassOf<class UEndAIAvoidDefinitionReaction> AvoidDefinitionClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          CauserChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandleId;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestReactionAvoid) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestReactionAvoid");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestReactionAvoid) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_RequestReactionAvoid");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionAvoid, AvoidDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestReactionAvoid::AvoidDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionAvoid, CauserChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestReactionAvoid::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionAvoid, HandleId) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestReactionAvoid::HandleId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionAvoid, ReturnValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_RequestReactionAvoid::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestReactionCounter
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_RequestReactionCounter final
{
public:
	TSubclassOf<class UEndAIAbilityDefinitionReactionCounter> CounterDefinitionClass;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          CauserChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandleId;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestReactionCounter) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestReactionCounter");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestReactionCounter) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_RequestReactionCounter");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounter, CounterDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestReactionCounter::CounterDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounter, CauserChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestReactionCounter::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounter, HandleId) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestReactionCounter::HandleId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounter, ReturnValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_RequestReactionCounter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestReactionCounterAndMove
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_RequestReactionCounterAndMove final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIAbilityDefinitionReactionCounter> CounterDefinitionClass;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          CauserChara;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandleId;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestReactionCounterAndMove) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestReactionCounterAndMove");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestReactionCounterAndMove) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_RequestReactionCounterAndMove");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounterAndMove, MoveDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestReactionCounterAndMove::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounterAndMove, CounterDefinitionClass) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestReactionCounterAndMove::CounterDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounterAndMove, CauserChara) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestReactionCounterAndMove::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounterAndMove, HandleId) == 0x000018, "Member 'EndAIControllerBluePrintBase_RequestReactionCounterAndMove::HandleId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounterAndMove, ReturnValue) == 0x00001C, "Member 'EndAIControllerBluePrintBase_RequestReactionCounterAndMove::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestReactionCounterCombo
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_RequestReactionCounterCombo final
{
public:
	TSubclassOf<class UEndAIComboDefinitionReactionCounter> ComboCounterDefinitionClass;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          CauserChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandleId;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestReactionCounterCombo) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestReactionCounterCombo");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestReactionCounterCombo) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_RequestReactionCounterCombo");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounterCombo, ComboCounterDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestReactionCounterCombo::ComboCounterDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounterCombo, CauserChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestReactionCounterCombo::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounterCombo, HandleId) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestReactionCounterCombo::HandleId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionCounterCombo, ReturnValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_RequestReactionCounterCombo::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestReactionGuard
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_RequestReactionGuard final
{
public:
	TSubclassOf<class UEndAIGuardDefinitionReaction> GuardDefinitionClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          CauserChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandleId;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestReactionGuard) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestReactionGuard");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestReactionGuard) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_RequestReactionGuard");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionGuard, GuardDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestReactionGuard::GuardDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionGuard, CauserChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestReactionGuard::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionGuard, HandleId) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestReactionGuard::HandleId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestReactionGuard, ReturnValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_RequestReactionGuard::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestTakeDamageCounter
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerBluePrintBase_RequestTakeDamageCounter final
{
public:
	TSubclassOf<class UEndAIAbilityDefinitionReactionCounter> CounterDefinitionClass;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          CauserChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  CommandType;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DamageSourceID;                                    // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestTakeDamageCounter) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestTakeDamageCounter");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestTakeDamageCounter) == 0x000028, "Wrong size on EndAIControllerBluePrintBase_RequestTakeDamageCounter");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounter, CounterDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounter::CounterDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounter, CauserChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounter::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounter, AbilityId) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounter::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounter, CommandType) == 0x000018, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounter::CommandType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounter, DamageSourceID) == 0x00001C, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounter::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounter, ReturnValue) == 0x000024, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestTakeDamageCounterAndMove
// 0x0030 (0x0030 - 0x0000)
struct EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIAbilityDefinitionReactionCounter> CounterDefinitionClass;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          CauserChara;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  CommandType;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DamageSourceID;                                    // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove) == 0x000030, "Wrong size on EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove, MoveDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove, CounterDefinitionClass) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove::CounterDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove, CauserChara) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove, AbilityId) == 0x000018, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove, CommandType) == 0x000020, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove::CommandType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove, DamageSourceID) == 0x000024, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove, ReturnValue) == 0x00002C, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterAndMove::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestTakeDamageCounterCombo
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo final
{
public:
	TSubclassOf<class UEndAIComboDefinitionReactionCounter> ComboCounterDefinitionClass;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          CauserChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  CommandType;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DamageSourceID;                                    // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo) == 0x000028, "Wrong size on EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo, ComboCounterDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo::ComboCounterDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo, CauserChara) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo::CauserChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo, AbilityId) == 0x000010, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo, CommandType) == 0x000018, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo::CommandType' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo, DamageSourceID) == 0x00001C, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo, ReturnValue) == 0x000024, "Member 'EndAIControllerBluePrintBase_RequestTakeDamageCounterCombo::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.RequestTrans
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_RequestTrans final
{
public:
	TSubclassOf<class UEndAITransDefinition>      TransDefinitionClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_RequestTrans) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_RequestTrans");
static_assert(sizeof(EndAIControllerBluePrintBase_RequestTrans) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_RequestTrans");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTrans, TransDefinitionClass) == 0x000000, "Member 'EndAIControllerBluePrintBase_RequestTrans::TransDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_RequestTrans, ReturnValue) == 0x000008, "Member 'EndAIControllerBluePrintBase_RequestTrans::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.ResetOverrideUpperAnim
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_ResetOverrideUpperAnim final
{
public:
	bool                                          InPlayEndAnim;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_ResetOverrideUpperAnim) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_ResetOverrideUpperAnim");
static_assert(sizeof(EndAIControllerBluePrintBase_ResetOverrideUpperAnim) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_ResetOverrideUpperAnim");
static_assert(offsetof(EndAIControllerBluePrintBase_ResetOverrideUpperAnim, InPlayEndAnim) == 0x000000, "Member 'EndAIControllerBluePrintBase_ResetOverrideUpperAnim::InPlayEndAnim' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SendBPMessageToBattleScene
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_SendBPMessageToBattleScene final
{
public:
	class AEndCharacter*                          SendCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SendBPMessageToBattleScene) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_SendBPMessageToBattleScene");
static_assert(sizeof(EndAIControllerBluePrintBase_SendBPMessageToBattleScene) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_SendBPMessageToBattleScene");
static_assert(offsetof(EndAIControllerBluePrintBase_SendBPMessageToBattleScene, SendCharacter) == 0x000000, "Member 'EndAIControllerBluePrintBase_SendBPMessageToBattleScene::SendCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_SendBPMessageToBattleScene, Message) == 0x000008, "Member 'EndAIControllerBluePrintBase_SendBPMessageToBattleScene::Message' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetBattleSafeTransform
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_SetBattleSafeTransform final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetBattleSafeTransform) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_SetBattleSafeTransform");
static_assert(sizeof(EndAIControllerBluePrintBase_SetBattleSafeTransform) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_SetBattleSafeTransform");
static_assert(offsetof(EndAIControllerBluePrintBase_SetBattleSafeTransform, bEnable) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetBattleSafeTransform::bEnable' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetCapturableBySummon
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_SetCapturableBySummon final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetCapturableBySummon) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_SetCapturableBySummon");
static_assert(sizeof(EndAIControllerBluePrintBase_SetCapturableBySummon) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_SetCapturableBySummon");
static_assert(offsetof(EndAIControllerBluePrintBase_SetCapturableBySummon, Flag) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetCapturableBySummon::Flag' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetCharacterLocation
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_SetCharacterLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleportPhysics;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_SetCharacterLocation) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_SetCharacterLocation");
static_assert(sizeof(EndAIControllerBluePrintBase_SetCharacterLocation) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_SetCharacterLocation");
static_assert(offsetof(EndAIControllerBluePrintBase_SetCharacterLocation, InLocation) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetCharacterLocation::InLocation' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_SetCharacterLocation, bTeleportPhysics) == 0x00000C, "Member 'EndAIControllerBluePrintBase_SetCharacterLocation::bTeleportPhysics' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetCharacterRotation
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_SetCharacterRotation final
{
public:
	struct FRotator                               InRotation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetCharacterRotation) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_SetCharacterRotation");
static_assert(sizeof(EndAIControllerBluePrintBase_SetCharacterRotation) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_SetCharacterRotation");
static_assert(offsetof(EndAIControllerBluePrintBase_SetCharacterRotation, InRotation) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetCharacterRotation::InRotation' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetDisableReaction
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_SetDisableReaction final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetDisableReaction) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_SetDisableReaction");
static_assert(sizeof(EndAIControllerBluePrintBase_SetDisableReaction) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_SetDisableReaction");
static_assert(offsetof(EndAIControllerBluePrintBase_SetDisableReaction, Disable) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetDisableReaction::Disable' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetDisableResidualParticlesAbility
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_SetDisableResidualParticlesAbility final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetDisableResidualParticlesAbility) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_SetDisableResidualParticlesAbility");
static_assert(sizeof(EndAIControllerBluePrintBase_SetDisableResidualParticlesAbility) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_SetDisableResidualParticlesAbility");
static_assert(offsetof(EndAIControllerBluePrintBase_SetDisableResidualParticlesAbility, Disable) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetDisableResidualParticlesAbility::Disable' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetDisableSuspendAction
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_SetDisableSuspendAction final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetDisableSuspendAction) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_SetDisableSuspendAction");
static_assert(sizeof(EndAIControllerBluePrintBase_SetDisableSuspendAction) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_SetDisableSuspendAction");
static_assert(offsetof(EndAIControllerBluePrintBase_SetDisableSuspendAction, Disable) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetDisableSuspendAction::Disable' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetEnabledUpdateAimLocation
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_SetEnabledUpdateAimLocation final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetEnabledUpdateAimLocation) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_SetEnabledUpdateAimLocation");
static_assert(sizeof(EndAIControllerBluePrintBase_SetEnabledUpdateAimLocation) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_SetEnabledUpdateAimLocation");
static_assert(offsetof(EndAIControllerBluePrintBase_SetEnabledUpdateAimLocation, bEnabled) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetEnabledUpdateAimLocation::bEnabled' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetHPPercent
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBluePrintBase_SetHPPercent final
{
public:
	int32                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetHPPercent) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_SetHPPercent");
static_assert(sizeof(EndAIControllerBluePrintBase_SetHPPercent) == 0x000004, "Wrong size on EndAIControllerBluePrintBase_SetHPPercent");
static_assert(offsetof(EndAIControllerBluePrintBase_SetHPPercent, Percent) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetHPPercent::Percent' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetMeshDisp
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_SetMeshDisp final
{
public:
	bool                                          InDisp;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetMeshDisp) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_SetMeshDisp");
static_assert(sizeof(EndAIControllerBluePrintBase_SetMeshDisp) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_SetMeshDisp");
static_assert(offsetof(EndAIControllerBluePrintBase_SetMeshDisp, InDisp) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetMeshDisp::InDisp' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetOverrideAbilityKeep
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBluePrintBase_SetOverrideAbilityKeep final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetOverrideAbilityKeep) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_SetOverrideAbilityKeep");
static_assert(sizeof(EndAIControllerBluePrintBase_SetOverrideAbilityKeep) == 0x000004, "Wrong size on EndAIControllerBluePrintBase_SetOverrideAbilityKeep");
static_assert(offsetof(EndAIControllerBluePrintBase_SetOverrideAbilityKeep, Value) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetOverrideAbilityKeep::Value' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetOverrideActiveAimAngle
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_SetOverrideActiveAimAngle final
{
public:
	struct FVector2D                              ActiveYawRange;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ActivePitchRange;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetOverrideActiveAimAngle) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_SetOverrideActiveAimAngle");
static_assert(sizeof(EndAIControllerBluePrintBase_SetOverrideActiveAimAngle) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_SetOverrideActiveAimAngle");
static_assert(offsetof(EndAIControllerBluePrintBase_SetOverrideActiveAimAngle, ActiveYawRange) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetOverrideActiveAimAngle::ActiveYawRange' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_SetOverrideActiveAimAngle, ActivePitchRange) == 0x000008, "Member 'EndAIControllerBluePrintBase_SetOverrideActiveAimAngle::ActivePitchRange' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetOverrideKeep
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBluePrintBase_SetOverrideKeep final
{
public:
	int32                                         InKeep;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetOverrideKeep) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_SetOverrideKeep");
static_assert(sizeof(EndAIControllerBluePrintBase_SetOverrideKeep) == 0x000004, "Wrong size on EndAIControllerBluePrintBase_SetOverrideKeep");
static_assert(offsetof(EndAIControllerBluePrintBase_SetOverrideKeep, InKeep) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetOverrideKeep::InKeep' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetOverrideKeepFromAbility
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_SetOverrideKeepFromAbility final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetOverrideKeepFromAbility) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_SetOverrideKeepFromAbility");
static_assert(sizeof(EndAIControllerBluePrintBase_SetOverrideKeepFromAbility) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_SetOverrideKeepFromAbility");
static_assert(offsetof(EndAIControllerBluePrintBase_SetOverrideKeepFromAbility, InAbilityName) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetOverrideKeepFromAbility::InAbilityName' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetOverrideUpperAnim
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_SetOverrideUpperAnim final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InInterIn;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InInterOut;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetOverrideUpperAnim) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_SetOverrideUpperAnim");
static_assert(sizeof(EndAIControllerBluePrintBase_SetOverrideUpperAnim) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_SetOverrideUpperAnim");
static_assert(offsetof(EndAIControllerBluePrintBase_SetOverrideUpperAnim, InName) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetOverrideUpperAnim::InName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_SetOverrideUpperAnim, InInterIn) == 0x000008, "Member 'EndAIControllerBluePrintBase_SetOverrideUpperAnim::InInterIn' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_SetOverrideUpperAnim, InInterOut) == 0x000010, "Member 'EndAIControllerBluePrintBase_SetOverrideUpperAnim::InInterOut' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetPushCollisionEnable
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_SetPushCollisionEnable final
{
public:
	class FName                                   partId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_SetPushCollisionEnable) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_SetPushCollisionEnable");
static_assert(sizeof(EndAIControllerBluePrintBase_SetPushCollisionEnable) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_SetPushCollisionEnable");
static_assert(offsetof(EndAIControllerBluePrintBase_SetPushCollisionEnable, partId) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetPushCollisionEnable::partId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_SetPushCollisionEnable, Enable) == 0x000008, "Member 'EndAIControllerBluePrintBase_SetPushCollisionEnable::Enable' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetSpecialStatusStateChangeID
// 0x0014 (0x0014 - 0x0000)
struct EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID final
{
public:
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   stateChangeID;                                     // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   paramID;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID");
static_assert(sizeof(EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID) == 0x000014, "Wrong size on EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID");
static_assert(offsetof(EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID, Type) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID::Type' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID, stateChangeID) == 0x000004, "Member 'EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID::stateChangeID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID, paramID) == 0x00000C, "Member 'EndAIControllerBluePrintBase_SetSpecialStatusStateChangeID::paramID' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.SetVisibilityWeapon
// 0x0002 (0x0002 - 0x0000)
struct EndAIControllerBluePrintBase_SetVisibilityWeapon final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   weaponSlotType;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_SetVisibilityWeapon) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_SetVisibilityWeapon");
static_assert(sizeof(EndAIControllerBluePrintBase_SetVisibilityWeapon) == 0x000002, "Wrong size on EndAIControllerBluePrintBase_SetVisibilityWeapon");
static_assert(offsetof(EndAIControllerBluePrintBase_SetVisibilityWeapon, bVisible) == 0x000000, "Member 'EndAIControllerBluePrintBase_SetVisibilityWeapon::bVisible' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_SetVisibilityWeapon, weaponSlotType) == 0x000001, "Member 'EndAIControllerBluePrintBase_SetVisibilityWeapon::weaponSlotType' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.TestMoveTo_AIState
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_TestMoveTo_AIState final
{
public:
	struct FVector                                InVector;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_TestMoveTo_AIState) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_TestMoveTo_AIState");
static_assert(sizeof(EndAIControllerBluePrintBase_TestMoveTo_AIState) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_TestMoveTo_AIState");
static_assert(offsetof(EndAIControllerBluePrintBase_TestMoveTo_AIState, InVector) == 0x000000, "Member 'EndAIControllerBluePrintBase_TestMoveTo_AIState::InVector' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.ToggleDebugEditMode
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_ToggleDebugEditMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_ToggleDebugEditMode) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_ToggleDebugEditMode");
static_assert(sizeof(EndAIControllerBluePrintBase_ToggleDebugEditMode) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_ToggleDebugEditMode");
static_assert(offsetof(EndAIControllerBluePrintBase_ToggleDebugEditMode, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_ToggleDebugEditMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetCharacterFeetLocation
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_GetCharacterFeetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetCharacterFeetLocation) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetCharacterFeetLocation");
static_assert(sizeof(EndAIControllerBluePrintBase_GetCharacterFeetLocation) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_GetCharacterFeetLocation");
static_assert(offsetof(EndAIControllerBluePrintBase_GetCharacterFeetLocation, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetCharacterFeetLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetCharacterLocation
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_GetCharacterLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetCharacterLocation) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetCharacterLocation");
static_assert(sizeof(EndAIControllerBluePrintBase_GetCharacterLocation) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_GetCharacterLocation");
static_assert(offsetof(EndAIControllerBluePrintBase_GetCharacterLocation, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetCharacterLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetCharacterRotation
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBluePrintBase_GetCharacterRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetCharacterRotation) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetCharacterRotation");
static_assert(sizeof(EndAIControllerBluePrintBase_GetCharacterRotation) == 0x00000C, "Wrong size on EndAIControllerBluePrintBase_GetCharacterRotation");
static_assert(offsetof(EndAIControllerBluePrintBase_GetCharacterRotation, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetCharacterRotation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetFirstDamageTime
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBluePrintBase_GetFirstDamageTime final
{
public:
	float                                         FirstDamageTime;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequence*                    AnimSequecne;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_GetFirstDamageTime) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetFirstDamageTime");
static_assert(sizeof(EndAIControllerBluePrintBase_GetFirstDamageTime) == 0x000018, "Wrong size on EndAIControllerBluePrintBase_GetFirstDamageTime");
static_assert(offsetof(EndAIControllerBluePrintBase_GetFirstDamageTime, FirstDamageTime) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetFirstDamageTime::FirstDamageTime' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetFirstDamageTime, AnimSequecne) == 0x000008, "Member 'EndAIControllerBluePrintBase_GetFirstDamageTime::AnimSequecne' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetFirstDamageTime, StartTime) == 0x000010, "Member 'EndAIControllerBluePrintBase_GetFirstDamageTime::StartTime' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetFirstDamageTime, ReturnValue) == 0x000014, "Member 'EndAIControllerBluePrintBase_GetFirstDamageTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetLocationAngle
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_GetLocationAngle final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_GetLocationAngle) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetLocationAngle");
static_assert(sizeof(EndAIControllerBluePrintBase_GetLocationAngle) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_GetLocationAngle");
static_assert(offsetof(EndAIControllerBluePrintBase_GetLocationAngle, Loc) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetLocationAngle::Loc' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetLocationAngle, Target) == 0x000010, "Member 'EndAIControllerBluePrintBase_GetLocationAngle::Target' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetLocationAngle, ReturnValue) == 0x000018, "Member 'EndAIControllerBluePrintBase_GetLocationAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetLocationAngleAbs
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBluePrintBase_GetLocationAngleAbs final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBluePrintBase_GetLocationAngleAbs) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetLocationAngleAbs");
static_assert(sizeof(EndAIControllerBluePrintBase_GetLocationAngleAbs) == 0x000020, "Wrong size on EndAIControllerBluePrintBase_GetLocationAngleAbs");
static_assert(offsetof(EndAIControllerBluePrintBase_GetLocationAngleAbs, Loc) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetLocationAngleAbs::Loc' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetLocationAngleAbs, Target) == 0x000010, "Member 'EndAIControllerBluePrintBase_GetLocationAngleAbs::Target' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetLocationAngleAbs, ReturnValue) == 0x000018, "Member 'EndAIControllerBluePrintBase_GetLocationAngleAbs::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetSpecialStatusParamFloat
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_GetSpecialStatusParamFloat final
{
public:
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   paramID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetSpecialStatusParamFloat) == 0x000004, "Wrong alignment on EndAIControllerBluePrintBase_GetSpecialStatusParamFloat");
static_assert(sizeof(EndAIControllerBluePrintBase_GetSpecialStatusParamFloat) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_GetSpecialStatusParamFloat");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSpecialStatusParamFloat, Type) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetSpecialStatusParamFloat::Type' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSpecialStatusParamFloat, paramID) == 0x000004, "Member 'EndAIControllerBluePrintBase_GetSpecialStatusParamFloat::paramID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSpecialStatusParamFloat, ReturnValue) == 0x00000C, "Member 'EndAIControllerBluePrintBase_GetSpecialStatusParamFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetSpecialStatusType
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBluePrintBase_GetSpecialStatusType final
{
public:
	TArray<EEndBattleSpecialStatusChangeType>     typeList;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetSpecialStatusType) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetSpecialStatusType");
static_assert(sizeof(EndAIControllerBluePrintBase_GetSpecialStatusType) == 0x000010, "Wrong size on EndAIControllerBluePrintBase_GetSpecialStatusType");
static_assert(offsetof(EndAIControllerBluePrintBase_GetSpecialStatusType, typeList) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetSpecialStatusType::typeList' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.GetTarget
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBluePrintBase_GetTarget final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_GetTarget) == 0x000008, "Wrong alignment on EndAIControllerBluePrintBase_GetTarget");
static_assert(sizeof(EndAIControllerBluePrintBase_GetTarget) == 0x000008, "Wrong size on EndAIControllerBluePrintBase_GetTarget");
static_assert(offsetof(EndAIControllerBluePrintBase_GetTarget, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_GetTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsDebugEditMode
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_IsDebugEditMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_IsDebugEditMode) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_IsDebugEditMode");
static_assert(sizeof(EndAIControllerBluePrintBase_IsDebugEditMode) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_IsDebugEditMode");
static_assert(offsetof(EndAIControllerBluePrintBase_IsDebugEditMode, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsDebugEditMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsEditor
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_IsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_IsEditor) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_IsEditor");
static_assert(sizeof(EndAIControllerBluePrintBase_IsEditor) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_IsEditor");
static_assert(offsetof(EndAIControllerBluePrintBase_IsEditor, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsEditor::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsInDummyBattle
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_IsInDummyBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_IsInDummyBattle) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_IsInDummyBattle");
static_assert(sizeof(EndAIControllerBluePrintBase_IsInDummyBattle) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_IsInDummyBattle");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInDummyBattle, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsInDummyBattle::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBluePrintBase.IsInSyncAction
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBluePrintBase_IsInSyncAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBluePrintBase_IsInSyncAction) == 0x000001, "Wrong alignment on EndAIControllerBluePrintBase_IsInSyncAction");
static_assert(sizeof(EndAIControllerBluePrintBase_IsInSyncAction) == 0x000001, "Wrong size on EndAIControllerBluePrintBase_IsInSyncAction");
static_assert(offsetof(EndAIControllerBluePrintBase_IsInSyncAction, ReturnValue) == 0x000000, "Member 'EndAIControllerBluePrintBase_IsInSyncAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.AddDestructionPartsName
// 0x0024 (0x0024 - 0x0000)
struct EndAIControllerEnemyBase_AddDestructionPartsName final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   destructionPartsLabelName;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   restorePartsLabelName;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_AddDestructionPartsName) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_AddDestructionPartsName");
static_assert(sizeof(EndAIControllerEnemyBase_AddDestructionPartsName) == 0x000024, "Wrong size on EndAIControllerEnemyBase_AddDestructionPartsName");
static_assert(offsetof(EndAIControllerEnemyBase_AddDestructionPartsName, keyword) == 0x000000, "Member 'EndAIControllerEnemyBase_AddDestructionPartsName::keyword' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_AddDestructionPartsName, MeshName) == 0x000008, "Member 'EndAIControllerEnemyBase_AddDestructionPartsName::MeshName' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_AddDestructionPartsName, destructionPartsLabelName) == 0x000010, "Member 'EndAIControllerEnemyBase_AddDestructionPartsName::destructionPartsLabelName' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_AddDestructionPartsName, restorePartsLabelName) == 0x000018, "Member 'EndAIControllerEnemyBase_AddDestructionPartsName::restorePartsLabelName' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_AddDestructionPartsName, ReturnValue) == 0x000020, "Member 'EndAIControllerEnemyBase_AddDestructionPartsName::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ChangeCombinationTarget
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_ChangeCombinationTarget final
{
public:
	class AEndCharacter*                          InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ChangeCombinationTarget) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_ChangeCombinationTarget");
static_assert(sizeof(EndAIControllerEnemyBase_ChangeCombinationTarget) == 0x000008, "Wrong size on EndAIControllerEnemyBase_ChangeCombinationTarget");
static_assert(offsetof(EndAIControllerEnemyBase_ChangeCombinationTarget, InTarget) == 0x000000, "Member 'EndAIControllerEnemyBase_ChangeCombinationTarget::InTarget' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.CheckAIActionStatus
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerEnemyBase_CheckAIActionStatus final
{
public:
	TSubclassOf<class UEndAIActionDefinition>     ActionDefClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolTime;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrialCount;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrialStraightCount;                                // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_CheckAIActionStatus) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_CheckAIActionStatus");
static_assert(sizeof(EndAIControllerEnemyBase_CheckAIActionStatus) == 0x000018, "Wrong size on EndAIControllerEnemyBase_CheckAIActionStatus");
static_assert(offsetof(EndAIControllerEnemyBase_CheckAIActionStatus, ActionDefClass) == 0x000000, "Member 'EndAIControllerEnemyBase_CheckAIActionStatus::ActionDefClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_CheckAIActionStatus, bResult) == 0x000008, "Member 'EndAIControllerEnemyBase_CheckAIActionStatus::bResult' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_CheckAIActionStatus, CoolTime) == 0x00000C, "Member 'EndAIControllerEnemyBase_CheckAIActionStatus::CoolTime' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_CheckAIActionStatus, TrialCount) == 0x000010, "Member 'EndAIControllerEnemyBase_CheckAIActionStatus::TrialCount' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_CheckAIActionStatus, TrialStraightCount) == 0x000014, "Member 'EndAIControllerEnemyBase_CheckAIActionStatus::TrialStraightCount' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ClearTopPriorityActionCondition
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_ClearTopPriorityActionCondition final
{
public:
	class FName                                   TopPriorityActionId;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ClearTopPriorityActionCondition) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_ClearTopPriorityActionCondition");
static_assert(sizeof(EndAIControllerEnemyBase_ClearTopPriorityActionCondition) == 0x000008, "Wrong size on EndAIControllerEnemyBase_ClearTopPriorityActionCondition");
static_assert(offsetof(EndAIControllerEnemyBase_ClearTopPriorityActionCondition, TopPriorityActionId) == 0x000000, "Member 'EndAIControllerEnemyBase_ClearTopPriorityActionCondition::TopPriorityActionId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.DisableLastHitAIPC
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_DisableLastHitAIPC final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_DisableLastHitAIPC) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_DisableLastHitAIPC");
static_assert(sizeof(EndAIControllerEnemyBase_DisableLastHitAIPC) == 0x000001, "Wrong size on EndAIControllerEnemyBase_DisableLastHitAIPC");
static_assert(offsetof(EndAIControllerEnemyBase_DisableLastHitAIPC, bDisable) == 0x000000, "Member 'EndAIControllerEnemyBase_DisableLastHitAIPC::bDisable' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ForceTakeDamegeHitReactionToParent
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_ForceTakeDamegeHitReactionToParent final
{
public:
	class FName                                   ReactionID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ForceTakeDamegeHitReactionToParent) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_ForceTakeDamegeHitReactionToParent");
static_assert(sizeof(EndAIControllerEnemyBase_ForceTakeDamegeHitReactionToParent) == 0x000008, "Wrong size on EndAIControllerEnemyBase_ForceTakeDamegeHitReactionToParent");
static_assert(offsetof(EndAIControllerEnemyBase_ForceTakeDamegeHitReactionToParent, ReactionID) == 0x000000, "Member 'EndAIControllerEnemyBase_ForceTakeDamegeHitReactionToParent::ReactionID' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetAIMoveMode
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_GetAIMoveMode final
{
public:
	EActorMoveMode                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetAIMoveMode) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_GetAIMoveMode");
static_assert(sizeof(EndAIControllerEnemyBase_GetAIMoveMode) == 0x000001, "Wrong size on EndAIControllerEnemyBase_GetAIMoveMode");
static_assert(offsetof(EndAIControllerEnemyBase_GetAIMoveMode, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_GetAIMoveMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetAITimerRemainingTime
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_GetAITimerRemainingTime final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetAITimerRemainingTime) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetAITimerRemainingTime");
static_assert(sizeof(EndAIControllerEnemyBase_GetAITimerRemainingTime) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_GetAITimerRemainingTime");
static_assert(offsetof(EndAIControllerEnemyBase_GetAITimerRemainingTime, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_GetAITimerRemainingTime::ID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetAITimerRemainingTime, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_GetAITimerRemainingTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetBP
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerEnemyBase_GetBP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetBP) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetBP");
static_assert(sizeof(EndAIControllerEnemyBase_GetBP) == 0x000004, "Wrong size on EndAIControllerEnemyBase_GetBP");
static_assert(offsetof(EndAIControllerEnemyBase_GetBP, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_GetBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetBPPercent
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerEnemyBase_GetBPPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetBPPercent) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetBPPercent");
static_assert(sizeof(EndAIControllerEnemyBase_GetBPPercent) == 0x000004, "Wrong size on EndAIControllerEnemyBase_GetBPPercent");
static_assert(offsetof(EndAIControllerEnemyBase_GetBPPercent, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_GetBPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetComboCount
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_GetComboCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextCount;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetComboCount) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetComboCount");
static_assert(sizeof(EndAIControllerEnemyBase_GetComboCount) == 0x000008, "Wrong size on EndAIControllerEnemyBase_GetComboCount");
static_assert(offsetof(EndAIControllerEnemyBase_GetComboCount, Count) == 0x000000, "Member 'EndAIControllerEnemyBase_GetComboCount::Count' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetComboCount, NextCount) == 0x000004, "Member 'EndAIControllerEnemyBase_GetComboCount::NextCount' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetGroupIndividualMember
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerEnemyBase_GetGroupIndividualMember final
{
public:
	class FName                                   GroupId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IndividualTag;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetGroupIndividualMember) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_GetGroupIndividualMember");
static_assert(sizeof(EndAIControllerEnemyBase_GetGroupIndividualMember) == 0x000018, "Wrong size on EndAIControllerEnemyBase_GetGroupIndividualMember");
static_assert(offsetof(EndAIControllerEnemyBase_GetGroupIndividualMember, GroupId) == 0x000000, "Member 'EndAIControllerEnemyBase_GetGroupIndividualMember::GroupId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetGroupIndividualMember, IndividualTag) == 0x000008, "Member 'EndAIControllerEnemyBase_GetGroupIndividualMember::IndividualTag' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetGroupIndividualMember, ReturnValue) == 0x000010, "Member 'EndAIControllerEnemyBase_GetGroupIndividualMember::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetGroupMembers
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerEnemyBase_GetGroupMembers final
{
public:
	class FName                                   GroupId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreLeader;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetGroupMembers) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_GetGroupMembers");
static_assert(sizeof(EndAIControllerEnemyBase_GetGroupMembers) == 0x000020, "Wrong size on EndAIControllerEnemyBase_GetGroupMembers");
static_assert(offsetof(EndAIControllerEnemyBase_GetGroupMembers, GroupId) == 0x000000, "Member 'EndAIControllerEnemyBase_GetGroupMembers::GroupId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetGroupMembers, bIgnoreLeader) == 0x000008, "Member 'EndAIControllerEnemyBase_GetGroupMembers::bIgnoreLeader' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetGroupMembers, ReturnValue) == 0x000010, "Member 'EndAIControllerEnemyBase_GetGroupMembers::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetGroupMembersNum
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_GetGroupMembersNum final
{
public:
	class FName                                   GroupId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreLeader;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetGroupMembersNum) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetGroupMembersNum");
static_assert(sizeof(EndAIControllerEnemyBase_GetGroupMembersNum) == 0x000010, "Wrong size on EndAIControllerEnemyBase_GetGroupMembersNum");
static_assert(offsetof(EndAIControllerEnemyBase_GetGroupMembersNum, GroupId) == 0x000000, "Member 'EndAIControllerEnemyBase_GetGroupMembersNum::GroupId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetGroupMembersNum, bIgnoreLeader) == 0x000008, "Member 'EndAIControllerEnemyBase_GetGroupMembersNum::bIgnoreLeader' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetGroupMembersNum, ReturnValue) == 0x00000C, "Member 'EndAIControllerEnemyBase_GetGroupMembersNum::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetMoveToMultiTargetName
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_GetMoveToMultiTargetName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetMoveToMultiTargetName) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetMoveToMultiTargetName");
static_assert(sizeof(EndAIControllerEnemyBase_GetMoveToMultiTargetName) == 0x000008, "Wrong size on EndAIControllerEnemyBase_GetMoveToMultiTargetName");
static_assert(offsetof(EndAIControllerEnemyBase_GetMoveToMultiTargetName, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_GetMoveToMultiTargetName::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetNextWarpPosition
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_GetNextWarpPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetNextWarpPosition) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetNextWarpPosition");
static_assert(sizeof(EndAIControllerEnemyBase_GetNextWarpPosition) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_GetNextWarpPosition");
static_assert(offsetof(EndAIControllerEnemyBase_GetNextWarpPosition, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_GetNextWarpPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetPartsHPPercent
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_GetPartsHPPercent final
{
public:
	class FName                                   PartsID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetPartsHPPercent) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetPartsHPPercent");
static_assert(sizeof(EndAIControllerEnemyBase_GetPartsHPPercent) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_GetPartsHPPercent");
static_assert(offsetof(EndAIControllerEnemyBase_GetPartsHPPercent, PartsID) == 0x000000, "Member 'EndAIControllerEnemyBase_GetPartsHPPercent::PartsID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetPartsHPPercent, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_GetPartsHPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetTransID
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_GetTransID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetTransID) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetTransID");
static_assert(sizeof(EndAIControllerEnemyBase_GetTransID) == 0x000008, "Wrong size on EndAIControllerEnemyBase_GetTransID");
static_assert(offsetof(EndAIControllerEnemyBase_GetTransID, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_GetTransID::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsAffiliatedGroup
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerEnemyBase_IsAffiliatedGroup final
{
public:
	class AEndCharacter*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupId;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_IsAffiliatedGroup) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_IsAffiliatedGroup");
static_assert(sizeof(EndAIControllerEnemyBase_IsAffiliatedGroup) == 0x000018, "Wrong size on EndAIControllerEnemyBase_IsAffiliatedGroup");
static_assert(offsetof(EndAIControllerEnemyBase_IsAffiliatedGroup, Chara) == 0x000000, "Member 'EndAIControllerEnemyBase_IsAffiliatedGroup::Chara' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_IsAffiliatedGroup, GroupId) == 0x000008, "Member 'EndAIControllerEnemyBase_IsAffiliatedGroup::GroupId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_IsAffiliatedGroup, ReturnValue) == 0x000010, "Member 'EndAIControllerEnemyBase_IsAffiliatedGroup::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsAIActionStatusRecast
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerEnemyBase_IsAIActionStatusRecast final
{
public:
	TArray<TSubclassOf<class UEndAIActionDefinition>> ActionDefClassList;                                // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_IsAIActionStatusRecast) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_IsAIActionStatusRecast");
static_assert(sizeof(EndAIControllerEnemyBase_IsAIActionStatusRecast) == 0x000018, "Wrong size on EndAIControllerEnemyBase_IsAIActionStatusRecast");
static_assert(offsetof(EndAIControllerEnemyBase_IsAIActionStatusRecast, ActionDefClassList) == 0x000000, "Member 'EndAIControllerEnemyBase_IsAIActionStatusRecast::ActionDefClassList' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_IsAIActionStatusRecast, ReturnValue) == 0x000010, "Member 'EndAIControllerEnemyBase_IsAIActionStatusRecast::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsAIActionStatusRecastForId
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_IsAIActionStatusRecastForId final
{
public:
	class FName                                   AIActionStatusId;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_IsAIActionStatusRecastForId) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_IsAIActionStatusRecastForId");
static_assert(sizeof(EndAIControllerEnemyBase_IsAIActionStatusRecastForId) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_IsAIActionStatusRecastForId");
static_assert(offsetof(EndAIControllerEnemyBase_IsAIActionStatusRecastForId, AIActionStatusId) == 0x000000, "Member 'EndAIControllerEnemyBase_IsAIActionStatusRecastForId::AIActionStatusId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_IsAIActionStatusRecastForId, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_IsAIActionStatusRecastForId::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsBGFAStatusBP
// 0x0014 (0x0014 - 0x0000)
struct EndAIControllerEnemyBase_IsBGFAStatusBP final
{
public:
	class FName                                   AccessorID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateId;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_IsBGFAStatusBP) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_IsBGFAStatusBP");
static_assert(sizeof(EndAIControllerEnemyBase_IsBGFAStatusBP) == 0x000014, "Wrong size on EndAIControllerEnemyBase_IsBGFAStatusBP");
static_assert(offsetof(EndAIControllerEnemyBase_IsBGFAStatusBP, AccessorID) == 0x000000, "Member 'EndAIControllerEnemyBase_IsBGFAStatusBP::AccessorID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_IsBGFAStatusBP, StateId) == 0x000008, "Member 'EndAIControllerEnemyBase_IsBGFAStatusBP::StateId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_IsBGFAStatusBP, ReturnValue) == 0x000010, "Member 'EndAIControllerEnemyBase_IsBGFAStatusBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsBPAttackChance
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_IsBPAttackChance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_IsBPAttackChance) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_IsBPAttackChance");
static_assert(sizeof(EndAIControllerEnemyBase_IsBPAttackChance) == 0x000001, "Wrong size on EndAIControllerEnemyBase_IsBPAttackChance");
static_assert(offsetof(EndAIControllerEnemyBase_IsBPAttackChance, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_IsBPAttackChance::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsBurst
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_IsBurst final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_IsBurst) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_IsBurst");
static_assert(sizeof(EndAIControllerEnemyBase_IsBurst) == 0x000001, "Wrong size on EndAIControllerEnemyBase_IsBurst");
static_assert(offsetof(EndAIControllerEnemyBase_IsBurst, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_IsBurst::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsDestruction
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_IsDestruction final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_IsDestruction) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_IsDestruction");
static_assert(sizeof(EndAIControllerEnemyBase_IsDestruction) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_IsDestruction");
static_assert(offsetof(EndAIControllerEnemyBase_IsDestruction, keyword) == 0x000000, "Member 'EndAIControllerEnemyBase_IsDestruction::keyword' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_IsDestruction, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_IsDestruction::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsDifficultyHard
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_IsDifficultyHard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_IsDifficultyHard) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_IsDifficultyHard");
static_assert(sizeof(EndAIControllerEnemyBase_IsDifficultyHard) == 0x000001, "Wrong size on EndAIControllerEnemyBase_IsDifficultyHard");
static_assert(offsetof(EndAIControllerEnemyBase_IsDifficultyHard, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_IsDifficultyHard::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsGroupLeader
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_IsGroupLeader final
{
public:
	class FName                                   GroupId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_IsGroupLeader) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_IsGroupLeader");
static_assert(sizeof(EndAIControllerEnemyBase_IsGroupLeader) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_IsGroupLeader");
static_assert(offsetof(EndAIControllerEnemyBase_IsGroupLeader, GroupId) == 0x000000, "Member 'EndAIControllerEnemyBase_IsGroupLeader::GroupId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_IsGroupLeader, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_IsGroupLeader::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsInHateLock
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_IsInHateLock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_IsInHateLock) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_IsInHateLock");
static_assert(sizeof(EndAIControllerEnemyBase_IsInHateLock) == 0x000001, "Wrong size on EndAIControllerEnemyBase_IsInHateLock");
static_assert(offsetof(EndAIControllerEnemyBase_IsInHateLock, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_IsInHateLock::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsPlayingAICombination
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_IsPlayingAICombination final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_IsPlayingAICombination) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_IsPlayingAICombination");
static_assert(sizeof(EndAIControllerEnemyBase_IsPlayingAICombination) == 0x000001, "Wrong size on EndAIControllerEnemyBase_IsPlayingAICombination");
static_assert(offsetof(EndAIControllerEnemyBase_IsPlayingAICombination, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_IsPlayingAICombination::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.NotifyAbilitySuccessToTargetSystem_EN2219
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_NotifyAbilitySuccessToTargetSystem_EN2219 final
{
public:
	class AEndCharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityActionCategory               ActionCategory;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_NotifyAbilitySuccessToTargetSystem_EN2219) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_NotifyAbilitySuccessToTargetSystem_EN2219");
static_assert(sizeof(EndAIControllerEnemyBase_NotifyAbilitySuccessToTargetSystem_EN2219) == 0x000010, "Wrong size on EndAIControllerEnemyBase_NotifyAbilitySuccessToTargetSystem_EN2219");
static_assert(offsetof(EndAIControllerEnemyBase_NotifyAbilitySuccessToTargetSystem_EN2219, Target) == 0x000000, "Member 'EndAIControllerEnemyBase_NotifyAbilitySuccessToTargetSystem_EN2219::Target' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_NotifyAbilitySuccessToTargetSystem_EN2219, ActionCategory) == 0x000008, "Member 'EndAIControllerEnemyBase_NotifyAbilitySuccessToTargetSystem_EN2219::ActionCategory' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnActionChildInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnActionChildInvoke final
{
public:
	class FName                                   ChildActionId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnActionChildInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnActionChildInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnActionChildInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnActionChildInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnActionChildInvoke, ChildActionId) == 0x000000, "Member 'EndAIControllerEnemyBase_OnActionChildInvoke::ChildActionId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnActionInterruptInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnActionInterruptInvoke final
{
public:
	class FName                                   ActionTag;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnActionInterruptInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnActionInterruptInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnActionInterruptInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnActionInterruptInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnActionInterruptInvoke, ActionTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnActionInterruptInvoke::ActionTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnActionInvoke
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_OnActionInvoke final
{
public:
	EEndAIIntervalType                            IntervalType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ExtraIntervalId;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnActionInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnActionInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnActionInvoke) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_OnActionInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnActionInvoke, IntervalType) == 0x000000, "Member 'EndAIControllerEnemyBase_OnActionInvoke::IntervalType' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnActionInvoke, ExtraIntervalId) == 0x000004, "Member 'EndAIControllerEnemyBase_OnActionInvoke::ExtraIntervalId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnActionTopPriorityInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnActionTopPriorityInvoke final
{
public:
	class FName                                   TopPriorityActionId;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnActionTopPriorityInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnActionTopPriorityInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnActionTopPriorityInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnActionTopPriorityInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnActionTopPriorityInvoke, TopPriorityActionId) == 0x000000, "Member 'EndAIControllerEnemyBase_OnActionTopPriorityInvoke::TopPriorityActionId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnAICombinationInvoke
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_OnAICombinationInvoke final
{
public:
	EEndAIEnemyCombinationNotify                  NotifyType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CombinationId;                                     // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnAICombinationInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnAICombinationInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnAICombinationInvoke) == 0x000010, "Wrong size on EndAIControllerEnemyBase_OnAICombinationInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnAICombinationInvoke, NotifyType) == 0x000000, "Member 'EndAIControllerEnemyBase_OnAICombinationInvoke::NotifyType' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnAICombinationInvoke, CombinationId) == 0x000004, "Member 'EndAIControllerEnemyBase_OnAICombinationInvoke::CombinationId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnAICombinationInvoke, Count) == 0x00000C, "Member 'EndAIControllerEnemyBase_OnAICombinationInvoke::Count' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnAITimerInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnAITimerInvoke final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnAITimerInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnAITimerInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnAITimerInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnAITimerInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnAITimerInvoke, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_OnAITimerInvoke::ID' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnDefinitionLockTargetInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnDefinitionLockTargetInvoke final
{
public:
	class FName                                   LockTargetTag;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnDefinitionLockTargetInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnDefinitionLockTargetInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnDefinitionLockTargetInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnDefinitionLockTargetInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnDefinitionLockTargetInvoke, LockTargetTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnDefinitionLockTargetInvoke::LockTargetTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnEndActionDefinitionInvoke
// 0x0014 (0x0014 - 0x0000)
struct EndAIControllerEnemyBase_OnEndActionDefinitionInvoke final
{
public:
	class FName                                   ActionDefTag;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspendAbilityId;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuspendSummonCutScene;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_OnEndActionDefinitionInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnEndActionDefinitionInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnEndActionDefinitionInvoke) == 0x000014, "Wrong size on EndAIControllerEnemyBase_OnEndActionDefinitionInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnEndActionDefinitionInvoke, ActionDefTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnEndActionDefinitionInvoke::ActionDefTag' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnEndActionDefinitionInvoke, SuspendAbilityId) == 0x000008, "Member 'EndAIControllerEnemyBase_OnEndActionDefinitionInvoke::SuspendAbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnEndActionDefinitionInvoke, bSuspendSummonCutScene) == 0x000010, "Member 'EndAIControllerEnemyBase_OnEndActionDefinitionInvoke::bSuspendSummonCutScene' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnEndAICombinationInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnEndAICombinationInvoke final
{
public:
	class FName                                   CombinationId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnEndAICombinationInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnEndAICombinationInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnEndAICombinationInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnEndAICombinationInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnEndAICombinationInvoke, CombinationId) == 0x000000, "Member 'EndAIControllerEnemyBase_OnEndAICombinationInvoke::CombinationId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnEndMoveDefinitionInvoke
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_OnEndMoveDefinitionInvoke final
{
public:
	class FName                                   MoveDefTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuspendSummonCutScene;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_OnEndMoveDefinitionInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnEndMoveDefinitionInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnEndMoveDefinitionInvoke) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_OnEndMoveDefinitionInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnEndMoveDefinitionInvoke, MoveDefTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnEndMoveDefinitionInvoke::MoveDefTag' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnEndMoveDefinitionInvoke, bSuspendSummonCutScene) == 0x000008, "Member 'EndAIControllerEnemyBase_OnEndMoveDefinitionInvoke::bSuspendSummonCutScene' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnExecutWarpDefinitionInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnExecutWarpDefinitionInvoke final
{
public:
	class FName                                   WarpDefTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnExecutWarpDefinitionInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnExecutWarpDefinitionInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnExecutWarpDefinitionInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnExecutWarpDefinitionInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnExecutWarpDefinitionInvoke, WarpDefTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnExecutWarpDefinitionInvoke::WarpDefTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnExtraConditionInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnExtraConditionInvoke final
{
public:
	class FName                                   ConditionTag;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnExtraConditionInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnExtraConditionInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnExtraConditionInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnExtraConditionInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnExtraConditionInvoke, ConditionTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnExtraConditionInvoke::ConditionTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnFailPreActionCancelInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnFailPreActionCancelInvoke final
{
public:
	class FName                                   ActionTag;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnFailPreActionCancelInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnFailPreActionCancelInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnFailPreActionCancelInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnFailPreActionCancelInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnFailPreActionCancelInvoke, ActionTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnFailPreActionCancelInvoke::ActionTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnGroupMessageInvoke
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerEnemyBase_OnGroupMessageInvoke final
{
public:
	struct FEndAIBattleGroupNotifyInfo            NotifyInfo;                                        // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnGroupMessageInvoke) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_OnGroupMessageInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnGroupMessageInvoke) == 0x000020, "Wrong size on EndAIControllerEnemyBase_OnGroupMessageInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnGroupMessageInvoke, NotifyInfo) == 0x000000, "Member 'EndAIControllerEnemyBase_OnGroupMessageInvoke::NotifyInfo' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnMoveTimeOutInvoke
// 0x001C (0x001C - 0x0000)
struct EndAIControllerEnemyBase_OnMoveTimeOutInvoke final
{
public:
	EEndAIActionMoveTimeOut                       TimeOutType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MoveDefTag;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionDefTag;                                      // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComboDefTag;                                       // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnMoveTimeOutInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnMoveTimeOutInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnMoveTimeOutInvoke) == 0x00001C, "Wrong size on EndAIControllerEnemyBase_OnMoveTimeOutInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnMoveTimeOutInvoke, TimeOutType) == 0x000000, "Member 'EndAIControllerEnemyBase_OnMoveTimeOutInvoke::TimeOutType' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnMoveTimeOutInvoke, MoveDefTag) == 0x000004, "Member 'EndAIControllerEnemyBase_OnMoveTimeOutInvoke::MoveDefTag' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnMoveTimeOutInvoke, ActionDefTag) == 0x00000C, "Member 'EndAIControllerEnemyBase_OnMoveTimeOutInvoke::ActionDefTag' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnMoveTimeOutInvoke, ComboDefTag) == 0x000014, "Member 'EndAIControllerEnemyBase_OnMoveTimeOutInvoke::ComboDefTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnNotificationDefinitionComboInvoke
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_OnNotificationDefinitionComboInvoke final
{
public:
	class FName                                   ComboDefTag;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionDefTag;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnNotificationDefinitionComboInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnNotificationDefinitionComboInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnNotificationDefinitionComboInvoke) == 0x000010, "Wrong size on EndAIControllerEnemyBase_OnNotificationDefinitionComboInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnNotificationDefinitionComboInvoke, ComboDefTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnNotificationDefinitionComboInvoke::ComboDefTag' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnNotificationDefinitionComboInvoke, ActionDefTag) == 0x000008, "Member 'EndAIControllerEnemyBase_OnNotificationDefinitionComboInvoke::ActionDefTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnPreExecutWarpDefinitionInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnPreExecutWarpDefinitionInvoke final
{
public:
	class FName                                   WarpDefTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnPreExecutWarpDefinitionInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnPreExecutWarpDefinitionInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnPreExecutWarpDefinitionInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnPreExecutWarpDefinitionInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnPreExecutWarpDefinitionInvoke, WarpDefTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnPreExecutWarpDefinitionInvoke::WarpDefTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnProwlInvoke
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_OnProwlInvoke final
{
public:
	EEndAIProwlCallType                           CallType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnProwlInvoke) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_OnProwlInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnProwlInvoke) == 0x000001, "Wrong size on EndAIControllerEnemyBase_OnProwlInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnProwlInvoke, CallType) == 0x000000, "Member 'EndAIControllerEnemyBase_OnProwlInvoke::CallType' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnReactionAvoidCancelInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnReactionAvoidCancelInvoke final
{
public:
	class FName                                   AvoidDefTag;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnReactionAvoidCancelInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnReactionAvoidCancelInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnReactionAvoidCancelInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnReactionAvoidCancelInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnReactionAvoidCancelInvoke, AvoidDefTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnReactionAvoidCancelInvoke::AvoidDefTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnRemoveTrans_EndBattleInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnRemoveTrans_EndBattleInvoke final
{
public:
	class FName                                   CurrentTransId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnRemoveTrans_EndBattleInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnRemoveTrans_EndBattleInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnRemoveTrans_EndBattleInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnRemoveTrans_EndBattleInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnRemoveTrans_EndBattleInvoke, CurrentTransId) == 0x000000, "Member 'EndAIControllerEnemyBase_OnRemoveTrans_EndBattleInvoke::CurrentTransId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnRemoveTrans_ReturnHomeInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnRemoveTrans_ReturnHomeInvoke final
{
public:
	class FName                                   CurrentTransId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnRemoveTrans_ReturnHomeInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnRemoveTrans_ReturnHomeInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnRemoveTrans_ReturnHomeInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnRemoveTrans_ReturnHomeInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnRemoveTrans_ReturnHomeInvoke, CurrentTransId) == 0x000000, "Member 'EndAIControllerEnemyBase_OnRemoveTrans_ReturnHomeInvoke::CurrentTransId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnShowPreloadedWaveReinforcement
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnShowPreloadedWaveReinforcement final
{
public:
	class FName                                   reinforcementActorName;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnShowPreloadedWaveReinforcement) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnShowPreloadedWaveReinforcement");
static_assert(sizeof(EndAIControllerEnemyBase_OnShowPreloadedWaveReinforcement) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnShowPreloadedWaveReinforcement");
static_assert(offsetof(EndAIControllerEnemyBase_OnShowPreloadedWaveReinforcement, reinforcementActorName) == 0x000000, "Member 'EndAIControllerEnemyBase_OnShowPreloadedWaveReinforcement::reinforcementActorName' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnStartActionDefinitionInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnStartActionDefinitionInvoke final
{
public:
	class FName                                   ActionDefTag;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnStartActionDefinitionInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnStartActionDefinitionInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnStartActionDefinitionInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnStartActionDefinitionInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnStartActionDefinitionInvoke, ActionDefTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnStartActionDefinitionInvoke::ActionDefTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnStartAICombinationInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnStartAICombinationInvoke final
{
public:
	class FName                                   CombinationId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnStartAICombinationInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnStartAICombinationInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnStartAICombinationInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnStartAICombinationInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnStartAICombinationInvoke, CombinationId) == 0x000000, "Member 'EndAIControllerEnemyBase_OnStartAICombinationInvoke::CombinationId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnStartMoveDefinitionInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_OnStartMoveDefinitionInvoke final
{
public:
	class FName                                   MoveDefTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnStartMoveDefinitionInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnStartMoveDefinitionInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnStartMoveDefinitionInvoke) == 0x000008, "Wrong size on EndAIControllerEnemyBase_OnStartMoveDefinitionInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnStartMoveDefinitionInvoke, MoveDefTag) == 0x000000, "Member 'EndAIControllerEnemyBase_OnStartMoveDefinitionInvoke::MoveDefTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.OnTransInvoke
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_OnTransInvoke final
{
public:
	class FName                                   PrevTransId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextTransId;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_OnTransInvoke) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_OnTransInvoke");
static_assert(sizeof(EndAIControllerEnemyBase_OnTransInvoke) == 0x000010, "Wrong size on EndAIControllerEnemyBase_OnTransInvoke");
static_assert(offsetof(EndAIControllerEnemyBase_OnTransInvoke, PrevTransId) == 0x000000, "Member 'EndAIControllerEnemyBase_OnTransInvoke::PrevTransId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_OnTransInvoke, NextTransId) == 0x000008, "Member 'EndAIControllerEnemyBase_OnTransInvoke::NextTransId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.PauseAITimer
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_PauseAITimer final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_PauseAITimer) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_PauseAITimer");
static_assert(sizeof(EndAIControllerEnemyBase_PauseAITimer) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_PauseAITimer");
static_assert(offsetof(EndAIControllerEnemyBase_PauseAITimer, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_PauseAITimer::ID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_PauseAITimer, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_PauseAITimer::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.PauseAttackInterval
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_PauseAttackInterval final
{
public:
	EEndAIIntervalType                            IntervalType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_PauseAttackInterval) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_PauseAttackInterval");
static_assert(sizeof(EndAIControllerEnemyBase_PauseAttackInterval) == 0x000001, "Wrong size on EndAIControllerEnemyBase_PauseAttackInterval");
static_assert(offsetof(EndAIControllerEnemyBase_PauseAttackInterval, IntervalType) == 0x000000, "Member 'EndAIControllerEnemyBase_PauseAttackInterval::IntervalType' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.PauseExtraInterval
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_PauseExtraInterval final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_PauseExtraInterval) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_PauseExtraInterval");
static_assert(sizeof(EndAIControllerEnemyBase_PauseExtraInterval) == 0x000008, "Wrong size on EndAIControllerEnemyBase_PauseExtraInterval");
static_assert(offsetof(EndAIControllerEnemyBase_PauseExtraInterval, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_PauseExtraInterval::ID' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RequestActionTopPriority
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerEnemyBase_RequestActionTopPriority final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TopPriorityActionId;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_RequestActionTopPriority) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_RequestActionTopPriority");
static_assert(sizeof(EndAIControllerEnemyBase_RequestActionTopPriority) == 0x000020, "Wrong size on EndAIControllerEnemyBase_RequestActionTopPriority");
static_assert(offsetof(EndAIControllerEnemyBase_RequestActionTopPriority, MoveDefinitionClass) == 0x000000, "Member 'EndAIControllerEnemyBase_RequestActionTopPriority::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestActionTopPriority, ActionDefinitionClass) == 0x000008, "Member 'EndAIControllerEnemyBase_RequestActionTopPriority::ActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestActionTopPriority, TopPriorityActionId) == 0x000010, "Member 'EndAIControllerEnemyBase_RequestActionTopPriority::TopPriorityActionId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestActionTopPriority, ReturnValue) == 0x000018, "Member 'EndAIControllerEnemyBase_RequestActionTopPriority::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RequestCombination
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerEnemyBase_RequestCombination final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIAbilityDefinition>    AbilityDefinitionClass;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLast;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_RequestCombination) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_RequestCombination");
static_assert(sizeof(EndAIControllerEnemyBase_RequestCombination) == 0x000018, "Wrong size on EndAIControllerEnemyBase_RequestCombination");
static_assert(offsetof(EndAIControllerEnemyBase_RequestCombination, MoveDefinitionClass) == 0x000000, "Member 'EndAIControllerEnemyBase_RequestCombination::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestCombination, AbilityDefinitionClass) == 0x000008, "Member 'EndAIControllerEnemyBase_RequestCombination::AbilityDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestCombination, bLast) == 0x000010, "Member 'EndAIControllerEnemyBase_RequestCombination::bLast' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestCombination, ReturnValue) == 0x000011, "Member 'EndAIControllerEnemyBase_RequestCombination::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RequestCombinationCombo
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerEnemyBase_RequestCombinationCombo final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIComboDefinition>      ComboDefinitionClass;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLast;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_RequestCombinationCombo) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_RequestCombinationCombo");
static_assert(sizeof(EndAIControllerEnemyBase_RequestCombinationCombo) == 0x000018, "Wrong size on EndAIControllerEnemyBase_RequestCombinationCombo");
static_assert(offsetof(EndAIControllerEnemyBase_RequestCombinationCombo, MoveDefinitionClass) == 0x000000, "Member 'EndAIControllerEnemyBase_RequestCombinationCombo::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestCombinationCombo, ComboDefinitionClass) == 0x000008, "Member 'EndAIControllerEnemyBase_RequestCombinationCombo::ComboDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestCombinationCombo, bLast) == 0x000010, "Member 'EndAIControllerEnemyBase_RequestCombinationCombo::bLast' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestCombinationCombo, ReturnValue) == 0x000011, "Member 'EndAIControllerEnemyBase_RequestCombinationCombo::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RequestConnectActivatedAbilityCombo
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo final
{
public:
	TSubclassOf<class UEndAIComboDefinition>      ComboDefinitionClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo");
static_assert(sizeof(EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo) == 0x000018, "Wrong size on EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo");
static_assert(offsetof(EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo, ComboDefinitionClass) == 0x000000, "Member 'EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo::ComboDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo, AbilityId) == 0x000008, "Member 'EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo, ReturnValue) == 0x000010, "Member 'EndAIControllerEnemyBase_RequestConnectActivatedAbilityCombo::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RequestNotificationComboAbilityInterrupt
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_RequestNotificationComboAbilityInterrupt final
{
public:
	TSubclassOf<class UEndAIAbilityDefinition>    AbilityDefinitionClass;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_RequestNotificationComboAbilityInterrupt) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_RequestNotificationComboAbilityInterrupt");
static_assert(sizeof(EndAIControllerEnemyBase_RequestNotificationComboAbilityInterrupt) == 0x000010, "Wrong size on EndAIControllerEnemyBase_RequestNotificationComboAbilityInterrupt");
static_assert(offsetof(EndAIControllerEnemyBase_RequestNotificationComboAbilityInterrupt, AbilityDefinitionClass) == 0x000000, "Member 'EndAIControllerEnemyBase_RequestNotificationComboAbilityInterrupt::AbilityDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestNotificationComboAbilityInterrupt, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_RequestNotificationComboAbilityInterrupt::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RequestShowPreloadedWaveReinforcement
// 0x0040 (0x0040 - 0x0000)
struct EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   reinforcementActorName;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             reinforcementStartPoint;                           // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement) == 0x000010, "Wrong alignment on EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement");
static_assert(sizeof(EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement) == 0x000040, "Wrong size on EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement");
static_assert(offsetof(EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement, territoryID) == 0x000000, "Member 'EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement::territoryID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement, reinforcementActorName) == 0x000008, "Member 'EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement::reinforcementActorName' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement, reinforcementStartPoint) == 0x000010, "Member 'EndAIControllerEnemyBase_RequestShowPreloadedWaveReinforcement::reinforcementStartPoint' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RequestStartCombination
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerEnemyBase_RequestStartCombination final
{
public:
	TSubclassOf<class UEndAIActionDefinitionBase> CombinationDefinitionClass;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_RequestStartCombination) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_RequestStartCombination");
static_assert(sizeof(EndAIControllerEnemyBase_RequestStartCombination) == 0x000018, "Wrong size on EndAIControllerEnemyBase_RequestStartCombination");
static_assert(offsetof(EndAIControllerEnemyBase_RequestStartCombination, CombinationDefinitionClass) == 0x000000, "Member 'EndAIControllerEnemyBase_RequestStartCombination::CombinationDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestStartCombination, Target) == 0x000008, "Member 'EndAIControllerEnemyBase_RequestStartCombination::Target' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestStartCombination, ReturnValue) == 0x000010, "Member 'EndAIControllerEnemyBase_RequestStartCombination::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RequestStartCombinationTopPriority
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerEnemyBase_RequestStartCombinationTopPriority final
{
public:
	TSubclassOf<class UEndAIActionDefinitionBase> CombinationDefinitionClass;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TopPriorityActionId;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_RequestStartCombinationTopPriority) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_RequestStartCombinationTopPriority");
static_assert(sizeof(EndAIControllerEnemyBase_RequestStartCombinationTopPriority) == 0x000020, "Wrong size on EndAIControllerEnemyBase_RequestStartCombinationTopPriority");
static_assert(offsetof(EndAIControllerEnemyBase_RequestStartCombinationTopPriority, CombinationDefinitionClass) == 0x000000, "Member 'EndAIControllerEnemyBase_RequestStartCombinationTopPriority::CombinationDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestStartCombinationTopPriority, Target) == 0x000008, "Member 'EndAIControllerEnemyBase_RequestStartCombinationTopPriority::Target' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestStartCombinationTopPriority, TopPriorityActionId) == 0x000010, "Member 'EndAIControllerEnemyBase_RequestStartCombinationTopPriority::TopPriorityActionId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RequestStartCombinationTopPriority, ReturnValue) == 0x000018, "Member 'EndAIControllerEnemyBase_RequestStartCombinationTopPriority::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ResetAIActionStatus
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerEnemyBase_ResetAIActionStatus final
{
public:
	TArray<TSubclassOf<class UEndAIActionDefinition>> ActionDefClassList;                                // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bTrialCount;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TrialStraightCount;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecastTime;                                       // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_ResetAIActionStatus) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_ResetAIActionStatus");
static_assert(sizeof(EndAIControllerEnemyBase_ResetAIActionStatus) == 0x000018, "Wrong size on EndAIControllerEnemyBase_ResetAIActionStatus");
static_assert(offsetof(EndAIControllerEnemyBase_ResetAIActionStatus, ActionDefClassList) == 0x000000, "Member 'EndAIControllerEnemyBase_ResetAIActionStatus::ActionDefClassList' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_ResetAIActionStatus, bTrialCount) == 0x000010, "Member 'EndAIControllerEnemyBase_ResetAIActionStatus::bTrialCount' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_ResetAIActionStatus, TrialStraightCount) == 0x000011, "Member 'EndAIControllerEnemyBase_ResetAIActionStatus::TrialStraightCount' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_ResetAIActionStatus, bRecastTime) == 0x000012, "Member 'EndAIControllerEnemyBase_ResetAIActionStatus::bRecastTime' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ResetAngleRangeTargetPoint
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_ResetAngleRangeTargetPoint final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ResetAngleRangeTargetPoint) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_ResetAngleRangeTargetPoint");
static_assert(sizeof(EndAIControllerEnemyBase_ResetAngleRangeTargetPoint) == 0x000008, "Wrong size on EndAIControllerEnemyBase_ResetAngleRangeTargetPoint");
static_assert(offsetof(EndAIControllerEnemyBase_ResetAngleRangeTargetPoint, SocketName) == 0x000000, "Member 'EndAIControllerEnemyBase_ResetAngleRangeTargetPoint::SocketName' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ResetAttackIntervalElapsedTime
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_ResetAttackIntervalElapsedTime final
{
public:
	EEndAIIntervalType                            IntervalType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ResetAttackIntervalElapsedTime) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_ResetAttackIntervalElapsedTime");
static_assert(sizeof(EndAIControllerEnemyBase_ResetAttackIntervalElapsedTime) == 0x000001, "Wrong size on EndAIControllerEnemyBase_ResetAttackIntervalElapsedTime");
static_assert(offsetof(EndAIControllerEnemyBase_ResetAttackIntervalElapsedTime, IntervalType) == 0x000000, "Member 'EndAIControllerEnemyBase_ResetAttackIntervalElapsedTime::IntervalType' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ResetOverrideBattleCharaPartsSpec
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_ResetOverrideBattleCharaPartsSpec final
{
public:
	class FName                                   BaseID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ResetOverrideBattleCharaPartsSpec) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_ResetOverrideBattleCharaPartsSpec");
static_assert(sizeof(EndAIControllerEnemyBase_ResetOverrideBattleCharaPartsSpec) == 0x000008, "Wrong size on EndAIControllerEnemyBase_ResetOverrideBattleCharaPartsSpec");
static_assert(offsetof(EndAIControllerEnemyBase_ResetOverrideBattleCharaPartsSpec, BaseID) == 0x000000, "Member 'EndAIControllerEnemyBase_ResetOverrideBattleCharaPartsSpec::BaseID' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RestartAITimer
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_RestartAITimer final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_RestartAITimer) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_RestartAITimer");
static_assert(sizeof(EndAIControllerEnemyBase_RestartAITimer) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_RestartAITimer");
static_assert(offsetof(EndAIControllerEnemyBase_RestartAITimer, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_RestartAITimer::ID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RestartAITimer, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_RestartAITimer::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RestartAttackInterval
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_RestartAttackInterval final
{
public:
	EEndAIIntervalType                            IntervalType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_RestartAttackInterval) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_RestartAttackInterval");
static_assert(sizeof(EndAIControllerEnemyBase_RestartAttackInterval) == 0x000001, "Wrong size on EndAIControllerEnemyBase_RestartAttackInterval");
static_assert(offsetof(EndAIControllerEnemyBase_RestartAttackInterval, IntervalType) == 0x000000, "Member 'EndAIControllerEnemyBase_RestartAttackInterval::IntervalType' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RestartExtraInterval
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_RestartExtraInterval final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_RestartExtraInterval) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_RestartExtraInterval");
static_assert(sizeof(EndAIControllerEnemyBase_RestartExtraInterval) == 0x000008, "Wrong size on EndAIControllerEnemyBase_RestartExtraInterval");
static_assert(offsetof(EndAIControllerEnemyBase_RestartExtraInterval, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_RestartExtraInterval::ID' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ReturnGroup
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_ReturnGroup final
{
public:
	class FName                                   InGroupId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ReturnGroup) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_ReturnGroup");
static_assert(sizeof(EndAIControllerEnemyBase_ReturnGroup) == 0x000008, "Wrong size on EndAIControllerEnemyBase_ReturnGroup");
static_assert(offsetof(EndAIControllerEnemyBase_ReturnGroup, InGroupId) == 0x000000, "Member 'EndAIControllerEnemyBase_ReturnGroup::InGroupId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RewriteAttackInterval
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_RewriteAttackInterval final
{
public:
	EEndAIIntervalType                            IntervalType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalWidth;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_RewriteAttackInterval) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_RewriteAttackInterval");
static_assert(sizeof(EndAIControllerEnemyBase_RewriteAttackInterval) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_RewriteAttackInterval");
static_assert(offsetof(EndAIControllerEnemyBase_RewriteAttackInterval, IntervalType) == 0x000000, "Member 'EndAIControllerEnemyBase_RewriteAttackInterval::IntervalType' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RewriteAttackInterval, Interval) == 0x000004, "Member 'EndAIControllerEnemyBase_RewriteAttackInterval::Interval' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RewriteAttackInterval, IntervalWidth) == 0x000008, "Member 'EndAIControllerEnemyBase_RewriteAttackInterval::IntervalWidth' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.RewriteExtraInterval
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_RewriteExtraInterval final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalWidth;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_RewriteExtraInterval) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_RewriteExtraInterval");
static_assert(sizeof(EndAIControllerEnemyBase_RewriteExtraInterval) == 0x000010, "Wrong size on EndAIControllerEnemyBase_RewriteExtraInterval");
static_assert(offsetof(EndAIControllerEnemyBase_RewriteExtraInterval, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_RewriteExtraInterval::ID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RewriteExtraInterval, Interval) == 0x000008, "Member 'EndAIControllerEnemyBase_RewriteExtraInterval::Interval' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_RewriteExtraInterval, IntervalWidth) == 0x00000C, "Member 'EndAIControllerEnemyBase_RewriteExtraInterval::IntervalWidth' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SelfDisappear
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_SelfDisappear final
{
public:
	bool                                          drawPause;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SelfDisappear) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_SelfDisappear");
static_assert(sizeof(EndAIControllerEnemyBase_SelfDisappear) == 0x000001, "Wrong size on EndAIControllerEnemyBase_SelfDisappear");
static_assert(offsetof(EndAIControllerEnemyBase_SelfDisappear, drawPause) == 0x000000, "Member 'EndAIControllerEnemyBase_SelfDisappear::drawPause' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SendGroupMessage
// 0x001C (0x001C - 0x0000)
struct EndAIControllerEnemyBase_SendGroupMessage final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBattleGroupNotify                       NotifyType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GroupId;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IndividualTag;                                     // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SendGroupMessage) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SendGroupMessage");
static_assert(sizeof(EndAIControllerEnemyBase_SendGroupMessage) == 0x00001C, "Wrong size on EndAIControllerEnemyBase_SendGroupMessage");
static_assert(offsetof(EndAIControllerEnemyBase_SendGroupMessage, Message) == 0x000000, "Member 'EndAIControllerEnemyBase_SendGroupMessage::Message' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SendGroupMessage, NotifyType) == 0x000008, "Member 'EndAIControllerEnemyBase_SendGroupMessage::NotifyType' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SendGroupMessage, GroupId) == 0x00000C, "Member 'EndAIControllerEnemyBase_SendGroupMessage::GroupId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SendGroupMessage, IndividualTag) == 0x000014, "Member 'EndAIControllerEnemyBase_SendGroupMessage::IndividualTag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetAIActionStatusRecastTime
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerEnemyBase_SetAIActionStatusRecastTime final
{
public:
	TArray<TSubclassOf<class UEndAIActionDefinition>> ActionDefClassList;                                // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         RecastTime;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_SetAIActionStatusRecastTime) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_SetAIActionStatusRecastTime");
static_assert(sizeof(EndAIControllerEnemyBase_SetAIActionStatusRecastTime) == 0x000018, "Wrong size on EndAIControllerEnemyBase_SetAIActionStatusRecastTime");
static_assert(offsetof(EndAIControllerEnemyBase_SetAIActionStatusRecastTime, ActionDefClassList) == 0x000000, "Member 'EndAIControllerEnemyBase_SetAIActionStatusRecastTime::ActionDefClassList' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetAIActionStatusRecastTime, RecastTime) == 0x000010, "Member 'EndAIControllerEnemyBase_SetAIActionStatusRecastTime::RecastTime' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetAngleRangeTargetPoint
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_SetAngleRangeTargetPoint final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseAngle;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         angleRange;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetAngleRangeTargetPoint) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetAngleRangeTargetPoint");
static_assert(sizeof(EndAIControllerEnemyBase_SetAngleRangeTargetPoint) == 0x000010, "Wrong size on EndAIControllerEnemyBase_SetAngleRangeTargetPoint");
static_assert(offsetof(EndAIControllerEnemyBase_SetAngleRangeTargetPoint, SocketName) == 0x000000, "Member 'EndAIControllerEnemyBase_SetAngleRangeTargetPoint::SocketName' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetAngleRangeTargetPoint, baseAngle) == 0x000008, "Member 'EndAIControllerEnemyBase_SetAngleRangeTargetPoint::baseAngle' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetAngleRangeTargetPoint, angleRange) == 0x00000C, "Member 'EndAIControllerEnemyBase_SetAngleRangeTargetPoint::angleRange' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetBGFAStatus
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_SetBGFAStatus final
{
public:
	class FName                                   AccessorID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateId;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetBGFAStatus) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetBGFAStatus");
static_assert(sizeof(EndAIControllerEnemyBase_SetBGFAStatus) == 0x000010, "Wrong size on EndAIControllerEnemyBase_SetBGFAStatus");
static_assert(offsetof(EndAIControllerEnemyBase_SetBGFAStatus, AccessorID) == 0x000000, "Member 'EndAIControllerEnemyBase_SetBGFAStatus::AccessorID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetBGFAStatus, StateId) == 0x000008, "Member 'EndAIControllerEnemyBase_SetBGFAStatus::StateId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetBodyDummyParts
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_SetBodyDummyParts final
{
public:
	class FName                                   PartsID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetBodyDummyParts) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetBodyDummyParts");
static_assert(sizeof(EndAIControllerEnemyBase_SetBodyDummyParts) == 0x000008, "Wrong size on EndAIControllerEnemyBase_SetBodyDummyParts");
static_assert(offsetof(EndAIControllerEnemyBase_SetBodyDummyParts, PartsID) == 0x000000, "Member 'EndAIControllerEnemyBase_SetBodyDummyParts::PartsID' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetBP
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerEnemyBase_SetBP final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetBP) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetBP");
static_assert(sizeof(EndAIControllerEnemyBase_SetBP) == 0x000004, "Wrong size on EndAIControllerEnemyBase_SetBP");
static_assert(offsetof(EndAIControllerEnemyBase_SetBP, Value) == 0x000000, "Member 'EndAIControllerEnemyBase_SetBP::Value' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetBPAttackChance
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_SetBPAttackChance final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetBPAttackChance) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_SetBPAttackChance");
static_assert(sizeof(EndAIControllerEnemyBase_SetBPAttackChance) == 0x000001, "Wrong size on EndAIControllerEnemyBase_SetBPAttackChance");
static_assert(offsetof(EndAIControllerEnemyBase_SetBPAttackChance, Enable) == 0x000000, "Member 'EndAIControllerEnemyBase_SetBPAttackChance::Enable' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetBPDamageCoefficient
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerEnemyBase_SetBPDamageCoefficient final
{
public:
	float                                         Coefficient;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetBPDamageCoefficient) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetBPDamageCoefficient");
static_assert(sizeof(EndAIControllerEnemyBase_SetBPDamageCoefficient) == 0x000004, "Wrong size on EndAIControllerEnemyBase_SetBPDamageCoefficient");
static_assert(offsetof(EndAIControllerEnemyBase_SetBPDamageCoefficient, Coefficient) == 0x000000, "Member 'EndAIControllerEnemyBase_SetBPDamageCoefficient::Coefficient' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetBPPercent
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerEnemyBase_SetBPPercent final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetBPPercent) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetBPPercent");
static_assert(sizeof(EndAIControllerEnemyBase_SetBPPercent) == 0x000004, "Wrong size on EndAIControllerEnemyBase_SetBPPercent");
static_assert(offsetof(EndAIControllerEnemyBase_SetBPPercent, Value) == 0x000000, "Member 'EndAIControllerEnemyBase_SetBPPercent::Value' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetBurstForceAerial
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_SetBurstForceAerial final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetBurstForceAerial) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_SetBurstForceAerial");
static_assert(sizeof(EndAIControllerEnemyBase_SetBurstForceAerial) == 0x000001, "Wrong size on EndAIControllerEnemyBase_SetBurstForceAerial");
static_assert(offsetof(EndAIControllerEnemyBase_SetBurstForceAerial, Flag) == 0x000000, "Member 'EndAIControllerEnemyBase_SetBurstForceAerial::Flag' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetDefinitionLockTargetResult
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_SetDefinitionLockTargetResult final
{
public:
	class FName                                   LockTargetTag;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetDefinitionLockTargetResult) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_SetDefinitionLockTargetResult");
static_assert(sizeof(EndAIControllerEnemyBase_SetDefinitionLockTargetResult) == 0x000010, "Wrong size on EndAIControllerEnemyBase_SetDefinitionLockTargetResult");
static_assert(offsetof(EndAIControllerEnemyBase_SetDefinitionLockTargetResult, LockTargetTag) == 0x000000, "Member 'EndAIControllerEnemyBase_SetDefinitionLockTargetResult::LockTargetTag' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetDefinitionLockTargetResult, Target) == 0x000008, "Member 'EndAIControllerEnemyBase_SetDefinitionLockTargetResult::Target' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetDisableBPDamage
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_SetDisableBPDamage final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetDisableBPDamage) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_SetDisableBPDamage");
static_assert(sizeof(EndAIControllerEnemyBase_SetDisableBPDamage) == 0x000001, "Wrong size on EndAIControllerEnemyBase_SetDisableBPDamage");
static_assert(offsetof(EndAIControllerEnemyBase_SetDisableBPDamage, Disable) == 0x000000, "Member 'EndAIControllerEnemyBase_SetDisableBPDamage::Disable' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetDisableBurst
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_SetDisableBurst final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetDisableBurst) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_SetDisableBurst");
static_assert(sizeof(EndAIControllerEnemyBase_SetDisableBurst) == 0x000001, "Wrong size on EndAIControllerEnemyBase_SetDisableBurst");
static_assert(offsetof(EndAIControllerEnemyBase_SetDisableBurst, Disable) == 0x000000, "Member 'EndAIControllerEnemyBase_SetDisableBurst::Disable' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetDisableTargetPoint
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_SetDisableTargetPoint final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_SetDisableTargetPoint) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetDisableTargetPoint");
static_assert(sizeof(EndAIControllerEnemyBase_SetDisableTargetPoint) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_SetDisableTargetPoint");
static_assert(offsetof(EndAIControllerEnemyBase_SetDisableTargetPoint, SocketName) == 0x000000, "Member 'EndAIControllerEnemyBase_SetDisableTargetPoint::SocketName' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetDisableTargetPoint, bDisable) == 0x000008, "Member 'EndAIControllerEnemyBase_SetDisableTargetPoint::bDisable' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetExtraConditionResult
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_SetExtraConditionResult final
{
public:
	class FName                                   ConditionTag;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_SetExtraConditionResult) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetExtraConditionResult");
static_assert(sizeof(EndAIControllerEnemyBase_SetExtraConditionResult) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_SetExtraConditionResult");
static_assert(offsetof(EndAIControllerEnemyBase_SetExtraConditionResult, ConditionTag) == 0x000000, "Member 'EndAIControllerEnemyBase_SetExtraConditionResult::ConditionTag' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetExtraConditionResult, bResult) == 0x000008, "Member 'EndAIControllerEnemyBase_SetExtraConditionResult::bResult' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetHPMinLimitPercent
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerEnemyBase_SetHPMinLimitPercent final
{
public:
	int32                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetHPMinLimitPercent) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetHPMinLimitPercent");
static_assert(sizeof(EndAIControllerEnemyBase_SetHPMinLimitPercent) == 0x000004, "Wrong size on EndAIControllerEnemyBase_SetHPMinLimitPercent");
static_assert(offsetof(EndAIControllerEnemyBase_SetHPMinLimitPercent, InPercent) == 0x000000, "Member 'EndAIControllerEnemyBase_SetHPMinLimitPercent::InPercent' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetIgnoreRightToAttack
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_SetIgnoreRightToAttack final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetIgnoreRightToAttack) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_SetIgnoreRightToAttack");
static_assert(sizeof(EndAIControllerEnemyBase_SetIgnoreRightToAttack) == 0x000001, "Wrong size on EndAIControllerEnemyBase_SetIgnoreRightToAttack");
static_assert(offsetof(EndAIControllerEnemyBase_SetIgnoreRightToAttack, bIgnore) == 0x000000, "Member 'EndAIControllerEnemyBase_SetIgnoreRightToAttack::bIgnore' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetLockTargetBP
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_SetLockTargetBP final
{
public:
	class AEndCharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_SetLockTargetBP) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_SetLockTargetBP");
static_assert(sizeof(EndAIControllerEnemyBase_SetLockTargetBP) == 0x000010, "Wrong size on EndAIControllerEnemyBase_SetLockTargetBP");
static_assert(offsetof(EndAIControllerEnemyBase_SetLockTargetBP, Target) == 0x000000, "Member 'EndAIControllerEnemyBase_SetLockTargetBP::Target' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetLockTargetBP, bImmediate) == 0x000008, "Member 'EndAIControllerEnemyBase_SetLockTargetBP::bImmediate' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetNextWarpPosition
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_SetNextWarpPosition final
{
public:
	struct FVector                                WarpPosition;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetNextWarpPosition) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetNextWarpPosition");
static_assert(sizeof(EndAIControllerEnemyBase_SetNextWarpPosition) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_SetNextWarpPosition");
static_assert(offsetof(EndAIControllerEnemyBase_SetNextWarpPosition, WarpPosition) == 0x000000, "Member 'EndAIControllerEnemyBase_SetNextWarpPosition::WarpPosition' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetOverrideBattleCharaPartsSpec
// 0x0014 (0x0014 - 0x0000)
struct EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec final
{
public:
	class FName                                   BaseID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideId;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeHP;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec");
static_assert(sizeof(EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec) == 0x000014, "Wrong size on EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec");
static_assert(offsetof(EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec, BaseID) == 0x000000, "Member 'EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec::BaseID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec, OverrideId) == 0x000008, "Member 'EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec::OverrideId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec, bChangeHP) == 0x000010, "Member 'EndAIControllerEnemyBase_SetOverrideBattleCharaPartsSpec::bChangeHP' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetOverrideBattleCharaSpec
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_SetOverrideBattleCharaSpec final
{
public:
	class FName                                   BattleCharaSpecID;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetOverrideBattleCharaSpec) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetOverrideBattleCharaSpec");
static_assert(sizeof(EndAIControllerEnemyBase_SetOverrideBattleCharaSpec) == 0x000008, "Wrong size on EndAIControllerEnemyBase_SetOverrideBattleCharaSpec");
static_assert(offsetof(EndAIControllerEnemyBase_SetOverrideBattleCharaSpec, BattleCharaSpecID) == 0x000000, "Member 'EndAIControllerEnemyBase_SetOverrideBattleCharaSpec::BattleCharaSpecID' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetReserveMoveToMultiPointDefinitionTargetLocations
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_SetReserveMoveToMultiPointDefinitionTargetLocations final
{
public:
	TArray<struct FVector>                        Locations;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetReserveMoveToMultiPointDefinitionTargetLocations) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_SetReserveMoveToMultiPointDefinitionTargetLocations");
static_assert(sizeof(EndAIControllerEnemyBase_SetReserveMoveToMultiPointDefinitionTargetLocations) == 0x000010, "Wrong size on EndAIControllerEnemyBase_SetReserveMoveToMultiPointDefinitionTargetLocations");
static_assert(offsetof(EndAIControllerEnemyBase_SetReserveMoveToMultiPointDefinitionTargetLocations, Locations) == 0x000000, "Member 'EndAIControllerEnemyBase_SetReserveMoveToMultiPointDefinitionTargetLocations::Locations' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetReserveWarpDefinitionTargetLocations
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetLocations final
{
public:
	TArray<struct FVector>                        Locations;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetLocations) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetLocations");
static_assert(sizeof(EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetLocations) == 0x000010, "Wrong size on EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetLocations");
static_assert(offsetof(EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetLocations, Locations) == 0x000000, "Member 'EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetLocations::Locations' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetReserveWarpDefinitionTargetPointNames
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetPointNames final
{
public:
	TArray<class FName>                           TargetPointNames;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetPointNames) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetPointNames");
static_assert(sizeof(EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetPointNames) == 0x000010, "Wrong size on EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetPointNames");
static_assert(offsetof(EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetPointNames, TargetPointNames) == 0x000000, "Member 'EndAIControllerEnemyBase_SetReserveWarpDefinitionTargetPointNames::TargetPointNames' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.SetTopPriorityActionConditionResult
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_SetTopPriorityActionConditionResult final
{
public:
	class FName                                   TopPriorityActionId;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_SetTopPriorityActionConditionResult) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_SetTopPriorityActionConditionResult");
static_assert(sizeof(EndAIControllerEnemyBase_SetTopPriorityActionConditionResult) == 0x000010, "Wrong size on EndAIControllerEnemyBase_SetTopPriorityActionConditionResult");
static_assert(offsetof(EndAIControllerEnemyBase_SetTopPriorityActionConditionResult, TopPriorityActionId) == 0x000000, "Member 'EndAIControllerEnemyBase_SetTopPriorityActionConditionResult::TopPriorityActionId' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetTopPriorityActionConditionResult, Priority) == 0x000008, "Member 'EndAIControllerEnemyBase_SetTopPriorityActionConditionResult::Priority' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_SetTopPriorityActionConditionResult, bResult) == 0x00000C, "Member 'EndAIControllerEnemyBase_SetTopPriorityActionConditionResult::bResult' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.StartAITimer
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_StartAITimer final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_StartAITimer) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_StartAITimer");
static_assert(sizeof(EndAIControllerEnemyBase_StartAITimer) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_StartAITimer");
static_assert(offsetof(EndAIControllerEnemyBase_StartAITimer, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_StartAITimer::ID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_StartAITimer, Time) == 0x000008, "Member 'EndAIControllerEnemyBase_StartAITimer::Time' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.StartBurst
// 0x0002 (0x0002 - 0x0000)
struct EndAIControllerEnemyBase_StartBurst final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_StartBurst) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_StartBurst");
static_assert(sizeof(EndAIControllerEnemyBase_StartBurst) == 0x000002, "Wrong size on EndAIControllerEnemyBase_StartBurst");
static_assert(offsetof(EndAIControllerEnemyBase_StartBurst, Force) == 0x000000, "Member 'EndAIControllerEnemyBase_StartBurst::Force' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_StartBurst, ReturnValue) == 0x000001, "Member 'EndAIControllerEnemyBase_StartBurst::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.StartExtraInterval
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_StartExtraInterval final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_StartExtraInterval) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_StartExtraInterval");
static_assert(sizeof(EndAIControllerEnemyBase_StartExtraInterval) == 0x000008, "Wrong size on EndAIControllerEnemyBase_StartExtraInterval");
static_assert(offsetof(EndAIControllerEnemyBase_StartExtraInterval, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_StartExtraInterval::ID' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.StopAITimer
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_StopAITimer final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_StopAITimer) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_StopAITimer");
static_assert(sizeof(EndAIControllerEnemyBase_StopAITimer) == 0x000008, "Wrong size on EndAIControllerEnemyBase_StopAITimer");
static_assert(offsetof(EndAIControllerEnemyBase_StopAITimer, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_StopAITimer::ID' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.StopExtraInterval
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_StopExtraInterval final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_StopExtraInterval) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_StopExtraInterval");
static_assert(sizeof(EndAIControllerEnemyBase_StopExtraInterval) == 0x000008, "Wrong size on EndAIControllerEnemyBase_StopExtraInterval");
static_assert(offsetof(EndAIControllerEnemyBase_StopExtraInterval, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_StopExtraInterval::ID' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.TemporaryWithdrawalGroup
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_TemporaryWithdrawalGroup final
{
public:
	class FName                                   InGroupId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_TemporaryWithdrawalGroup) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_TemporaryWithdrawalGroup");
static_assert(sizeof(EndAIControllerEnemyBase_TemporaryWithdrawalGroup) == 0x000008, "Wrong size on EndAIControllerEnemyBase_TemporaryWithdrawalGroup");
static_assert(offsetof(EndAIControllerEnemyBase_TemporaryWithdrawalGroup, InGroupId) == 0x000000, "Member 'EndAIControllerEnemyBase_TemporaryWithdrawalGroup::InGroupId' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ToBreak
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_ToBreak final
{
public:
	class FName                                   charaPartsSpecName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ToBreak) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_ToBreak");
static_assert(sizeof(EndAIControllerEnemyBase_ToBreak) == 0x000008, "Wrong size on EndAIControllerEnemyBase_ToBreak");
static_assert(offsetof(EndAIControllerEnemyBase_ToBreak, charaPartsSpecName) == 0x000000, "Member 'EndAIControllerEnemyBase_ToBreak::charaPartsSpecName' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ToChangeParts
// 0x0014 (0x0014 - 0x0000)
struct EndAIControllerEnemyBase_ToChangeParts final
{
public:
	class FName                                   MeshName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshLabel;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_ToChangeParts) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_ToChangeParts");
static_assert(sizeof(EndAIControllerEnemyBase_ToChangeParts) == 0x000014, "Wrong size on EndAIControllerEnemyBase_ToChangeParts");
static_assert(offsetof(EndAIControllerEnemyBase_ToChangeParts, MeshName) == 0x000000, "Member 'EndAIControllerEnemyBase_ToChangeParts::MeshName' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_ToChangeParts, MeshLabel) == 0x000008, "Member 'EndAIControllerEnemyBase_ToChangeParts::MeshLabel' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_ToChangeParts, ReturnValue) == 0x000010, "Member 'EndAIControllerEnemyBase_ToChangeParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ToDestructionParts
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_ToDestructionParts final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ToDestructionParts) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_ToDestructionParts");
static_assert(sizeof(EndAIControllerEnemyBase_ToDestructionParts) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_ToDestructionParts");
static_assert(offsetof(EndAIControllerEnemyBase_ToDestructionParts, keyword) == 0x000000, "Member 'EndAIControllerEnemyBase_ToDestructionParts::keyword' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_ToDestructionParts, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_ToDestructionParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ToRepairWithHPPercent
// 0x0014 (0x0014 - 0x0000)
struct EndAIControllerEnemyBase_ToRepairWithHPPercent final
{
public:
	class FName                                   charaPartsSpecName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   meshLabelName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HPPercent;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ToRepairWithHPPercent) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_ToRepairWithHPPercent");
static_assert(sizeof(EndAIControllerEnemyBase_ToRepairWithHPPercent) == 0x000014, "Wrong size on EndAIControllerEnemyBase_ToRepairWithHPPercent");
static_assert(offsetof(EndAIControllerEnemyBase_ToRepairWithHPPercent, charaPartsSpecName) == 0x000000, "Member 'EndAIControllerEnemyBase_ToRepairWithHPPercent::charaPartsSpecName' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_ToRepairWithHPPercent, meshLabelName) == 0x000008, "Member 'EndAIControllerEnemyBase_ToRepairWithHPPercent::meshLabelName' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_ToRepairWithHPPercent, HPPercent) == 0x000010, "Member 'EndAIControllerEnemyBase_ToRepairWithHPPercent::HPPercent' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.ToRestoreParts
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_ToRestoreParts final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_ToRestoreParts) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_ToRestoreParts");
static_assert(sizeof(EndAIControllerEnemyBase_ToRestoreParts) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_ToRestoreParts");
static_assert(offsetof(EndAIControllerEnemyBase_ToRestoreParts, keyword) == 0x000000, "Member 'EndAIControllerEnemyBase_ToRestoreParts::keyword' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_ToRestoreParts, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_ToRestoreParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetAIActionState
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_GetAIActionState final
{
public:
	EEndAIActionState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetAIActionState) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_GetAIActionState");
static_assert(sizeof(EndAIControllerEnemyBase_GetAIActionState) == 0x000001, "Wrong size on EndAIControllerEnemyBase_GetAIActionState");
static_assert(offsetof(EndAIControllerEnemyBase_GetAIActionState, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_GetAIActionState::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetAttackIntervalElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_GetAttackIntervalElapsedTime final
{
public:
	EEndAIIntervalType                            IntervalType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetAttackIntervalElapsedTime) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetAttackIntervalElapsedTime");
static_assert(sizeof(EndAIControllerEnemyBase_GetAttackIntervalElapsedTime) == 0x000008, "Wrong size on EndAIControllerEnemyBase_GetAttackIntervalElapsedTime");
static_assert(offsetof(EndAIControllerEnemyBase_GetAttackIntervalElapsedTime, IntervalType) == 0x000000, "Member 'EndAIControllerEnemyBase_GetAttackIntervalElapsedTime::IntervalType' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetAttackIntervalElapsedTime, ReturnValue) == 0x000004, "Member 'EndAIControllerEnemyBase_GetAttackIntervalElapsedTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetCurrentAIDefinitionTag
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerEnemyBase_GetCurrentAIDefinitionTag final
{
public:
	struct FEndAIDefinitionReturnTag              ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetCurrentAIDefinitionTag) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetCurrentAIDefinitionTag");
static_assert(sizeof(EndAIControllerEnemyBase_GetCurrentAIDefinitionTag) == 0x000020, "Wrong size on EndAIControllerEnemyBase_GetCurrentAIDefinitionTag");
static_assert(offsetof(EndAIControllerEnemyBase_GetCurrentAIDefinitionTag, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_GetCurrentAIDefinitionTag::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetCurrentAIDefinitionTagToChara
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerEnemyBase_GetCurrentAIDefinitionTagToChara final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndAIDefinitionReturnTag              ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetCurrentAIDefinitionTagToChara) == 0x000008, "Wrong alignment on EndAIControllerEnemyBase_GetCurrentAIDefinitionTagToChara");
static_assert(sizeof(EndAIControllerEnemyBase_GetCurrentAIDefinitionTagToChara) == 0x000028, "Wrong size on EndAIControllerEnemyBase_GetCurrentAIDefinitionTagToChara");
static_assert(offsetof(EndAIControllerEnemyBase_GetCurrentAIDefinitionTagToChara, InChara) == 0x000000, "Member 'EndAIControllerEnemyBase_GetCurrentAIDefinitionTagToChara::InChara' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetCurrentAIDefinitionTagToChara, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_GetCurrentAIDefinitionTagToChara::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetExtraIntervalStatus
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerEnemyBase_GetExtraIntervalStatus final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_GetExtraIntervalStatus) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetExtraIntervalStatus");
static_assert(sizeof(EndAIControllerEnemyBase_GetExtraIntervalStatus) == 0x000010, "Wrong size on EndAIControllerEnemyBase_GetExtraIntervalStatus");
static_assert(offsetof(EndAIControllerEnemyBase_GetExtraIntervalStatus, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_GetExtraIntervalStatus::ID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetExtraIntervalStatus, ElapsedTime) == 0x000008, "Member 'EndAIControllerEnemyBase_GetExtraIntervalStatus::ElapsedTime' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetExtraIntervalStatus, bActive) == 0x00000C, "Member 'EndAIControllerEnemyBase_GetExtraIntervalStatus::bActive' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_GetExtraIntervalStatus, bPause) == 0x00000D, "Member 'EndAIControllerEnemyBase_GetExtraIntervalStatus::bPause' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetOwnerTerritoryIdBP
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerEnemyBase_GetOwnerTerritoryIdBP final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetOwnerTerritoryIdBP) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetOwnerTerritoryIdBP");
static_assert(sizeof(EndAIControllerEnemyBase_GetOwnerTerritoryIdBP) == 0x000008, "Wrong size on EndAIControllerEnemyBase_GetOwnerTerritoryIdBP");
static_assert(offsetof(EndAIControllerEnemyBase_GetOwnerTerritoryIdBP, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_GetOwnerTerritoryIdBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.GetPhase
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerEnemyBase_GetPhase final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_GetPhase) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_GetPhase");
static_assert(sizeof(EndAIControllerEnemyBase_GetPhase) == 0x000004, "Wrong size on EndAIControllerEnemyBase_GetPhase");
static_assert(offsetof(EndAIControllerEnemyBase_GetPhase, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_GetPhase::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsActiveAITimer
// 0x000C (0x000C - 0x0000)
struct EndAIControllerEnemyBase_IsActiveAITimer final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerEnemyBase_IsActiveAITimer) == 0x000004, "Wrong alignment on EndAIControllerEnemyBase_IsActiveAITimer");
static_assert(sizeof(EndAIControllerEnemyBase_IsActiveAITimer) == 0x00000C, "Wrong size on EndAIControllerEnemyBase_IsActiveAITimer");
static_assert(offsetof(EndAIControllerEnemyBase_IsActiveAITimer, ID) == 0x000000, "Member 'EndAIControllerEnemyBase_IsActiveAITimer::ID' has a wrong offset!");
static_assert(offsetof(EndAIControllerEnemyBase_IsActiveAITimer, ReturnValue) == 0x000008, "Member 'EndAIControllerEnemyBase_IsActiveAITimer::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerEnemyBase.IsInBattleArea
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerEnemyBase_IsInBattleArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerEnemyBase_IsInBattleArea) == 0x000001, "Wrong alignment on EndAIControllerEnemyBase_IsInBattleArea");
static_assert(sizeof(EndAIControllerEnemyBase_IsInBattleArea) == 0x000001, "Wrong size on EndAIControllerEnemyBase_IsInBattleArea");
static_assert(offsetof(EndAIControllerEnemyBase_IsInBattleArea, ReturnValue) == 0x000000, "Member 'EndAIControllerEnemyBase_IsInBattleArea::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.ChangeWallMoveType_EN0007
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBossBase_ChangeWallMoveType_EN0007 final
{
public:
	EEndAiMoveType                                MoveType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_ChangeWallMoveType_EN0007) == 0x000001, "Wrong alignment on EndAIControllerBossBase_ChangeWallMoveType_EN0007");
static_assert(sizeof(EndAIControllerBossBase_ChangeWallMoveType_EN0007) == 0x000001, "Wrong size on EndAIControllerBossBase_ChangeWallMoveType_EN0007");
static_assert(offsetof(EndAIControllerBossBase_ChangeWallMoveType_EN0007, MoveType) == 0x000000, "Member 'EndAIControllerBossBase_ChangeWallMoveType_EN0007::MoveType' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.ForceRequestAction
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBossBase_ForceRequestAction final
{
public:
	TSubclassOf<class UEndAIMoveDefinition>       MoveDefinitionClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAIActionDefinitionBase> ActionDefinitionClass;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBossBase_ForceRequestAction) == 0x000008, "Wrong alignment on EndAIControllerBossBase_ForceRequestAction");
static_assert(sizeof(EndAIControllerBossBase_ForceRequestAction) == 0x000018, "Wrong size on EndAIControllerBossBase_ForceRequestAction");
static_assert(offsetof(EndAIControllerBossBase_ForceRequestAction, MoveDefinitionClass) == 0x000000, "Member 'EndAIControllerBossBase_ForceRequestAction::MoveDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_ForceRequestAction, ActionDefinitionClass) == 0x000008, "Member 'EndAIControllerBossBase_ForceRequestAction::ActionDefinitionClass' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_ForceRequestAction, ReturnValue) == 0x000010, "Member 'EndAIControllerBossBase_ForceRequestAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.GetTotalStalactiteNum_EB2000
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBossBase_GetTotalStalactiteNum_EB2000 final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_GetTotalStalactiteNum_EB2000) == 0x000004, "Wrong alignment on EndAIControllerBossBase_GetTotalStalactiteNum_EB2000");
static_assert(sizeof(EndAIControllerBossBase_GetTotalStalactiteNum_EB2000) == 0x000004, "Wrong size on EndAIControllerBossBase_GetTotalStalactiteNum_EB2000");
static_assert(offsetof(EndAIControllerBossBase_GetTotalStalactiteNum_EB2000, ReturnValue) == 0x000000, "Member 'EndAIControllerBossBase_GetTotalStalactiteNum_EB2000::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.IsChangingPhase
// 0x0001 (0x0001 - 0x0000)
struct EndAIControllerBossBase_IsChangingPhase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_IsChangingPhase) == 0x000001, "Wrong alignment on EndAIControllerBossBase_IsChangingPhase");
static_assert(sizeof(EndAIControllerBossBase_IsChangingPhase) == 0x000001, "Wrong size on EndAIControllerBossBase_IsChangingPhase");
static_assert(offsetof(EndAIControllerBossBase_IsChangingPhase, ReturnValue) == 0x000000, "Member 'EndAIControllerBossBase_IsChangingPhase::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.NotifyAbilitySuccessToTargetSystem
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBossBase_NotifyAbilitySuccessToTargetSystem final
{
public:
	class AEndCharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityActionCategory               ActionCategory;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBossBase_NotifyAbilitySuccessToTargetSystem) == 0x000008, "Wrong alignment on EndAIControllerBossBase_NotifyAbilitySuccessToTargetSystem");
static_assert(sizeof(EndAIControllerBossBase_NotifyAbilitySuccessToTargetSystem) == 0x000010, "Wrong size on EndAIControllerBossBase_NotifyAbilitySuccessToTargetSystem");
static_assert(offsetof(EndAIControllerBossBase_NotifyAbilitySuccessToTargetSystem, Target) == 0x000000, "Member 'EndAIControllerBossBase_NotifyAbilitySuccessToTargetSystem::Target' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_NotifyAbilitySuccessToTargetSystem, ActionCategory) == 0x000008, "Member 'EndAIControllerBossBase_NotifyAbilitySuccessToTargetSystem::ActionCategory' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.OnBattleEventInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBossBase_OnBattleEventInvoke final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_OnBattleEventInvoke) == 0x000004, "Wrong alignment on EndAIControllerBossBase_OnBattleEventInvoke");
static_assert(sizeof(EndAIControllerBossBase_OnBattleEventInvoke) == 0x000008, "Wrong size on EndAIControllerBossBase_OnBattleEventInvoke");
static_assert(offsetof(EndAIControllerBossBase_OnBattleEventInvoke, EventName) == 0x000000, "Member 'EndAIControllerBossBase_OnBattleEventInvoke::EventName' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.OnChangePhaseFinishInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBossBase_OnChangePhaseFinishInvoke final
{
public:
	int32                                         PrevPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextPhase;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_OnChangePhaseFinishInvoke) == 0x000004, "Wrong alignment on EndAIControllerBossBase_OnChangePhaseFinishInvoke");
static_assert(sizeof(EndAIControllerBossBase_OnChangePhaseFinishInvoke) == 0x000008, "Wrong size on EndAIControllerBossBase_OnChangePhaseFinishInvoke");
static_assert(offsetof(EndAIControllerBossBase_OnChangePhaseFinishInvoke, PrevPhase) == 0x000000, "Member 'EndAIControllerBossBase_OnChangePhaseFinishInvoke::PrevPhase' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_OnChangePhaseFinishInvoke, NextPhase) == 0x000004, "Member 'EndAIControllerBossBase_OnChangePhaseFinishInvoke::NextPhase' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.OnChangePhaseReactionAfterInvoke
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBossBase_OnChangePhaseReactionAfterInvoke final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitReactionID;                                     // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_OnChangePhaseReactionAfterInvoke) == 0x000004, "Wrong alignment on EndAIControllerBossBase_OnChangePhaseReactionAfterInvoke");
static_assert(sizeof(EndAIControllerBossBase_OnChangePhaseReactionAfterInvoke) == 0x00000C, "Wrong size on EndAIControllerBossBase_OnChangePhaseReactionAfterInvoke");
static_assert(offsetof(EndAIControllerBossBase_OnChangePhaseReactionAfterInvoke, NextPhase) == 0x000000, "Member 'EndAIControllerBossBase_OnChangePhaseReactionAfterInvoke::NextPhase' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_OnChangePhaseReactionAfterInvoke, HitReactionID) == 0x000004, "Member 'EndAIControllerBossBase_OnChangePhaseReactionAfterInvoke::HitReactionID' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.OnChangePhaseReadyInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBossBase_OnChangePhaseReadyInvoke final
{
public:
	int32                                         PrevPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextPhase;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_OnChangePhaseReadyInvoke) == 0x000004, "Wrong alignment on EndAIControllerBossBase_OnChangePhaseReadyInvoke");
static_assert(sizeof(EndAIControllerBossBase_OnChangePhaseReadyInvoke) == 0x000008, "Wrong size on EndAIControllerBossBase_OnChangePhaseReadyInvoke");
static_assert(offsetof(EndAIControllerBossBase_OnChangePhaseReadyInvoke, PrevPhase) == 0x000000, "Member 'EndAIControllerBossBase_OnChangePhaseReadyInvoke::PrevPhase' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_OnChangePhaseReadyInvoke, NextPhase) == 0x000004, "Member 'EndAIControllerBossBase_OnChangePhaseReadyInvoke::NextPhase' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.OnEnemyCombinationFinishInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBossBase_OnEnemyCombinationFinishInvoke final
{
public:
	EEndBattleEnemyCombinationAbilityFinishResult FinishedResult;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FinishedOnAbility;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_OnEnemyCombinationFinishInvoke) == 0x000004, "Wrong alignment on EndAIControllerBossBase_OnEnemyCombinationFinishInvoke");
static_assert(sizeof(EndAIControllerBossBase_OnEnemyCombinationFinishInvoke) == 0x000008, "Wrong size on EndAIControllerBossBase_OnEnemyCombinationFinishInvoke");
static_assert(offsetof(EndAIControllerBossBase_OnEnemyCombinationFinishInvoke, FinishedResult) == 0x000000, "Member 'EndAIControllerBossBase_OnEnemyCombinationFinishInvoke::FinishedResult' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_OnEnemyCombinationFinishInvoke, FinishedOnAbility) == 0x000004, "Member 'EndAIControllerBossBase_OnEnemyCombinationFinishInvoke::FinishedOnAbility' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.OnFastDashArrivalInvoke_EB0016
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBossBase_OnFastDashArrivalInvoke_EB0016 final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessAction;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBossBase_OnFastDashArrivalInvoke_EB0016) == 0x000004, "Wrong alignment on EndAIControllerBossBase_OnFastDashArrivalInvoke_EB0016");
static_assert(sizeof(EndAIControllerBossBase_OnFastDashArrivalInvoke_EB0016) == 0x00000C, "Wrong size on EndAIControllerBossBase_OnFastDashArrivalInvoke_EB0016");
static_assert(offsetof(EndAIControllerBossBase_OnFastDashArrivalInvoke_EB0016, Tag) == 0x000000, "Member 'EndAIControllerBossBase_OnFastDashArrivalInvoke_EB0016::Tag' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_OnFastDashArrivalInvoke_EB0016, bSuccessAction) == 0x000008, "Member 'EndAIControllerBossBase_OnFastDashArrivalInvoke_EB0016::bSuccessAction' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.OnFastDashTimingInvoke_EB2160
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160 final
{
public:
	EEndAIMoveDefinitionFastDashEventTiming       Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MoveDefTag;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160) == 0x000004, "Wrong alignment on EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160");
static_assert(sizeof(EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160) == 0x000010, "Wrong size on EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160");
static_assert(offsetof(EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160, Timing) == 0x000000, "Member 'EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160::Timing' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160, Index_0) == 0x000004, "Member 'EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160::Index_0' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160, MoveDefTag) == 0x000008, "Member 'EndAIControllerBossBase_OnFastDashTimingInvoke_EB2160::MoveDefTag' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.OnTakeDamagePhaseChangeHpLineInvoke
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBossBase_OnTakeDamagePhaseChangeHpLineInvoke final
{
public:
	int32                                         Phase;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_OnTakeDamagePhaseChangeHpLineInvoke) == 0x000004, "Wrong alignment on EndAIControllerBossBase_OnTakeDamagePhaseChangeHpLineInvoke");
static_assert(sizeof(EndAIControllerBossBase_OnTakeDamagePhaseChangeHpLineInvoke) == 0x000004, "Wrong size on EndAIControllerBossBase_OnTakeDamagePhaseChangeHpLineInvoke");
static_assert(offsetof(EndAIControllerBossBase_OnTakeDamagePhaseChangeHpLineInvoke, Phase) == 0x000000, "Member 'EndAIControllerBossBase_OnTakeDamagePhaseChangeHpLineInvoke::Phase' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.PlayEnvironmentFeeler
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBossBase_PlayEnvironmentFeeler final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_PlayEnvironmentFeeler) == 0x000004, "Wrong alignment on EndAIControllerBossBase_PlayEnvironmentFeeler");
static_assert(sizeof(EndAIControllerBossBase_PlayEnvironmentFeeler) == 0x000018, "Wrong size on EndAIControllerBossBase_PlayEnvironmentFeeler");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeeler, LevelName) == 0x000000, "Member 'EndAIControllerBossBase_PlayEnvironmentFeeler::LevelName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeeler, AccessID) == 0x000008, "Member 'EndAIControllerBossBase_PlayEnvironmentFeeler::AccessID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeeler, bUseFade) == 0x000010, "Member 'EndAIControllerBossBase_PlayEnvironmentFeeler::bUseFade' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeeler, BlendTime) == 0x000014, "Member 'EndAIControllerBossBase_PlayEnvironmentFeeler::BlendTime' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.PlayEnvironmentFeelerLaser
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBossBase_PlayEnvironmentFeelerLaser final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_PlayEnvironmentFeelerLaser) == 0x000004, "Wrong alignment on EndAIControllerBossBase_PlayEnvironmentFeelerLaser");
static_assert(sizeof(EndAIControllerBossBase_PlayEnvironmentFeelerLaser) == 0x000020, "Wrong size on EndAIControllerBossBase_PlayEnvironmentFeelerLaser");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeelerLaser, LevelName) == 0x000000, "Member 'EndAIControllerBossBase_PlayEnvironmentFeelerLaser::LevelName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeelerLaser, AccessID) == 0x000008, "Member 'EndAIControllerBossBase_PlayEnvironmentFeelerLaser::AccessID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeelerLaser, AttachName) == 0x000010, "Member 'EndAIControllerBossBase_PlayEnvironmentFeelerLaser::AttachName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeelerLaser, bUseFade) == 0x000018, "Member 'EndAIControllerBossBase_PlayEnvironmentFeelerLaser::bUseFade' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeelerLaser, BlendTime) == 0x00001C, "Member 'EndAIControllerBossBase_PlayEnvironmentFeelerLaser::BlendTime' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.PlayEnvironmentFeelerTornade
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerBossBase_PlayEnvironmentFeelerTornade final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_PlayEnvironmentFeelerTornade) == 0x000004, "Wrong alignment on EndAIControllerBossBase_PlayEnvironmentFeelerTornade");
static_assert(sizeof(EndAIControllerBossBase_PlayEnvironmentFeelerTornade) == 0x000020, "Wrong size on EndAIControllerBossBase_PlayEnvironmentFeelerTornade");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeelerTornade, LevelName) == 0x000000, "Member 'EndAIControllerBossBase_PlayEnvironmentFeelerTornade::LevelName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeelerTornade, AccessID) == 0x000008, "Member 'EndAIControllerBossBase_PlayEnvironmentFeelerTornade::AccessID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeelerTornade, DamageSourceID) == 0x000010, "Member 'EndAIControllerBossBase_PlayEnvironmentFeelerTornade::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeelerTornade, bUseFade) == 0x000018, "Member 'EndAIControllerBossBase_PlayEnvironmentFeelerTornade::bUseFade' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_PlayEnvironmentFeelerTornade, BlendTime) == 0x00001C, "Member 'EndAIControllerBossBase_PlayEnvironmentFeelerTornade::BlendTime' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.RequestManualPhaseChange
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerBossBase_RequestManualPhaseChange final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanPhaseChangeToDisableReaction;                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBossBase_RequestManualPhaseChange) == 0x000004, "Wrong alignment on EndAIControllerBossBase_RequestManualPhaseChange");
static_assert(sizeof(EndAIControllerBossBase_RequestManualPhaseChange) == 0x000008, "Wrong size on EndAIControllerBossBase_RequestManualPhaseChange");
static_assert(offsetof(EndAIControllerBossBase_RequestManualPhaseChange, Delay) == 0x000000, "Member 'EndAIControllerBossBase_RequestManualPhaseChange::Delay' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_RequestManualPhaseChange, CanPhaseChangeToDisableReaction) == 0x000004, "Member 'EndAIControllerBossBase_RequestManualPhaseChange::CanPhaseChangeToDisableReaction' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.RequestPhaseChangeAbility
// 0x000C (0x000C - 0x0000)
struct EndAIControllerBossBase_RequestPhaseChangeAbility final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerBossBase_RequestPhaseChangeAbility) == 0x000004, "Wrong alignment on EndAIControllerBossBase_RequestPhaseChangeAbility");
static_assert(sizeof(EndAIControllerBossBase_RequestPhaseChangeAbility) == 0x00000C, "Wrong size on EndAIControllerBossBase_RequestPhaseChangeAbility");
static_assert(offsetof(EndAIControllerBossBase_RequestPhaseChangeAbility, AbilityId) == 0x000000, "Member 'EndAIControllerBossBase_RequestPhaseChangeAbility::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_RequestPhaseChangeAbility, ReturnValue) == 0x000008, "Member 'EndAIControllerBossBase_RequestPhaseChangeAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.SetDebugChangePhase
// 0x0004 (0x0004 - 0x0000)
struct EndAIControllerBossBase_SetDebugChangePhase final
{
public:
	int32                                         Phase;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_SetDebugChangePhase) == 0x000004, "Wrong alignment on EndAIControllerBossBase_SetDebugChangePhase");
static_assert(sizeof(EndAIControllerBossBase_SetDebugChangePhase) == 0x000004, "Wrong size on EndAIControllerBossBase_SetDebugChangePhase");
static_assert(offsetof(EndAIControllerBossBase_SetDebugChangePhase, Phase) == 0x000000, "Member 'EndAIControllerBossBase_SetDebugChangePhase::Phase' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.StopEnvironmentFeeler
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBossBase_StopEnvironmentFeeler final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_StopEnvironmentFeeler) == 0x000004, "Wrong alignment on EndAIControllerBossBase_StopEnvironmentFeeler");
static_assert(sizeof(EndAIControllerBossBase_StopEnvironmentFeeler) == 0x000018, "Wrong size on EndAIControllerBossBase_StopEnvironmentFeeler");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeeler, LevelName) == 0x000000, "Member 'EndAIControllerBossBase_StopEnvironmentFeeler::LevelName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeeler, AccessID) == 0x000008, "Member 'EndAIControllerBossBase_StopEnvironmentFeeler::AccessID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeeler, bUseFade) == 0x000010, "Member 'EndAIControllerBossBase_StopEnvironmentFeeler::bUseFade' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeeler, BlendTime) == 0x000014, "Member 'EndAIControllerBossBase_StopEnvironmentFeeler::BlendTime' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.StopEnvironmentFeelerLaser
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBossBase_StopEnvironmentFeelerLaser final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetach;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_StopEnvironmentFeelerLaser) == 0x000004, "Wrong alignment on EndAIControllerBossBase_StopEnvironmentFeelerLaser");
static_assert(sizeof(EndAIControllerBossBase_StopEnvironmentFeelerLaser) == 0x000018, "Wrong size on EndAIControllerBossBase_StopEnvironmentFeelerLaser");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeelerLaser, LevelName) == 0x000000, "Member 'EndAIControllerBossBase_StopEnvironmentFeelerLaser::LevelName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeelerLaser, AccessID) == 0x000008, "Member 'EndAIControllerBossBase_StopEnvironmentFeelerLaser::AccessID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeelerLaser, bDetach) == 0x000010, "Member 'EndAIControllerBossBase_StopEnvironmentFeelerLaser::bDetach' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeelerLaser, bUseFade) == 0x000011, "Member 'EndAIControllerBossBase_StopEnvironmentFeelerLaser::bUseFade' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeelerLaser, BlendTime) == 0x000014, "Member 'EndAIControllerBossBase_StopEnvironmentFeelerLaser::BlendTime' has a wrong offset!");

// Function EndGame.EndAIControllerBossBase.StopEnvironmentFeelerTornade
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerBossBase_StopEnvironmentFeelerTornade final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetach;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerBossBase_StopEnvironmentFeelerTornade) == 0x000004, "Wrong alignment on EndAIControllerBossBase_StopEnvironmentFeelerTornade");
static_assert(sizeof(EndAIControllerBossBase_StopEnvironmentFeelerTornade) == 0x000018, "Wrong size on EndAIControllerBossBase_StopEnvironmentFeelerTornade");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeelerTornade, LevelName) == 0x000000, "Member 'EndAIControllerBossBase_StopEnvironmentFeelerTornade::LevelName' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeelerTornade, AccessID) == 0x000008, "Member 'EndAIControllerBossBase_StopEnvironmentFeelerTornade::AccessID' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeelerTornade, bDetach) == 0x000010, "Member 'EndAIControllerBossBase_StopEnvironmentFeelerTornade::bDetach' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeelerTornade, bUseFade) == 0x000011, "Member 'EndAIControllerBossBase_StopEnvironmentFeelerTornade::bUseFade' has a wrong offset!");
static_assert(offsetof(EndAIControllerBossBase_StopEnvironmentFeelerTornade, BlendTime) == 0x000014, "Member 'EndAIControllerBossBase_StopEnvironmentFeelerTornade::BlendTime' has a wrong offset!");

// Function EndGame.EndAIControllerFriendBase.OnAbilityInterruptInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerFriendBase_OnAbilityInterruptInvoke final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerFriendBase_OnAbilityInterruptInvoke) == 0x000004, "Wrong alignment on EndAIControllerFriendBase_OnAbilityInterruptInvoke");
static_assert(sizeof(EndAIControllerFriendBase_OnAbilityInterruptInvoke) == 0x000008, "Wrong size on EndAIControllerFriendBase_OnAbilityInterruptInvoke");
static_assert(offsetof(EndAIControllerFriendBase_OnAbilityInterruptInvoke, AbilityId) == 0x000000, "Member 'EndAIControllerFriendBase_OnAbilityInterruptInvoke::AbilityId' has a wrong offset!");

// Function EndGame.EndAIControllerFriendBase.OnPlayerPartyEmergency
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerFriendBase_OnPlayerPartyEmergency final
{
public:
	class AEndCharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerFriendBase_OnPlayerPartyEmergency) == 0x000008, "Wrong alignment on EndAIControllerFriendBase_OnPlayerPartyEmergency");
static_assert(sizeof(EndAIControllerFriendBase_OnPlayerPartyEmergency) == 0x000008, "Wrong size on EndAIControllerFriendBase_OnPlayerPartyEmergency");
static_assert(offsetof(EndAIControllerFriendBase_OnPlayerPartyEmergency, Target) == 0x000000, "Member 'EndAIControllerFriendBase_OnPlayerPartyEmergency::Target' has a wrong offset!");

// Function EndGame.EndAIControllerFriendBase.OnPlayerPartyStatusChange
// 0x0018 (0x0018 - 0x0000)
struct EndAIControllerFriendBase_OnPlayerPartyStatusChange final
{
public:
	class AEndCharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           idList;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerFriendBase_OnPlayerPartyStatusChange) == 0x000008, "Wrong alignment on EndAIControllerFriendBase_OnPlayerPartyStatusChange");
static_assert(sizeof(EndAIControllerFriendBase_OnPlayerPartyStatusChange) == 0x000018, "Wrong size on EndAIControllerFriendBase_OnPlayerPartyStatusChange");
static_assert(offsetof(EndAIControllerFriendBase_OnPlayerPartyStatusChange, Target) == 0x000000, "Member 'EndAIControllerFriendBase_OnPlayerPartyStatusChange::Target' has a wrong offset!");
static_assert(offsetof(EndAIControllerFriendBase_OnPlayerPartyStatusChange, idList) == 0x000008, "Member 'EndAIControllerFriendBase_OnPlayerPartyStatusChange::idList' has a wrong offset!");

// Function EndGame.EndAIControllerFriendBase.OnStartRequestedAbilityInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerFriendBase_OnStartRequestedAbilityInvoke final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerFriendBase_OnStartRequestedAbilityInvoke) == 0x000004, "Wrong alignment on EndAIControllerFriendBase_OnStartRequestedAbilityInvoke");
static_assert(sizeof(EndAIControllerFriendBase_OnStartRequestedAbilityInvoke) == 0x000008, "Wrong size on EndAIControllerFriendBase_OnStartRequestedAbilityInvoke");
static_assert(offsetof(EndAIControllerFriendBase_OnStartRequestedAbilityInvoke, AbilityId) == 0x000000, "Member 'EndAIControllerFriendBase_OnStartRequestedAbilityInvoke::AbilityId' has a wrong offset!");

// Function EndGame.EndAIControllerFriendBase.OverrideCooldownTimer
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerFriendBase_OverrideCooldownTimer final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerFriendBase_OverrideCooldownTimer) == 0x000004, "Wrong alignment on EndAIControllerFriendBase_OverrideCooldownTimer");
static_assert(sizeof(EndAIControllerFriendBase_OverrideCooldownTimer) == 0x000008, "Wrong size on EndAIControllerFriendBase_OverrideCooldownTimer");
static_assert(offsetof(EndAIControllerFriendBase_OverrideCooldownTimer, Time) == 0x000000, "Member 'EndAIControllerFriendBase_OverrideCooldownTimer::Time' has a wrong offset!");
static_assert(offsetof(EndAIControllerFriendBase_OverrideCooldownTimer, bForce) == 0x000004, "Member 'EndAIControllerFriendBase_OverrideCooldownTimer::bForce' has a wrong offset!");

// Function EndGame.EndAIControllerFriendBase.RequestAbility
// 0x0028 (0x0028 - 0x0000)
struct EndAIControllerFriendBase_RequestAbility final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendAbilityTargetType                      TargetType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPriority;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   prevComboAbilityId;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetryFailed;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerFriendBase_RequestAbility) == 0x000008, "Wrong alignment on EndAIControllerFriendBase_RequestAbility");
static_assert(sizeof(EndAIControllerFriendBase_RequestAbility) == 0x000028, "Wrong size on EndAIControllerFriendBase_RequestAbility");
static_assert(offsetof(EndAIControllerFriendBase_RequestAbility, AbilityId) == 0x000000, "Member 'EndAIControllerFriendBase_RequestAbility::AbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerFriendBase_RequestAbility, TargetType) == 0x000008, "Member 'EndAIControllerFriendBase_RequestAbility::TargetType' has a wrong offset!");
static_assert(offsetof(EndAIControllerFriendBase_RequestAbility, bPriority) == 0x000009, "Member 'EndAIControllerFriendBase_RequestAbility::bPriority' has a wrong offset!");
static_assert(offsetof(EndAIControllerFriendBase_RequestAbility, Target) == 0x000010, "Member 'EndAIControllerFriendBase_RequestAbility::Target' has a wrong offset!");
static_assert(offsetof(EndAIControllerFriendBase_RequestAbility, prevComboAbilityId) == 0x000018, "Member 'EndAIControllerFriendBase_RequestAbility::prevComboAbilityId' has a wrong offset!");
static_assert(offsetof(EndAIControllerFriendBase_RequestAbility, bRetryFailed) == 0x000020, "Member 'EndAIControllerFriendBase_RequestAbility::bRetryFailed' has a wrong offset!");
static_assert(offsetof(EndAIControllerFriendBase_RequestAbility, ReturnValue) == 0x000021, "Member 'EndAIControllerFriendBase_RequestAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIControllerPlayerBase.TestJumpToGround
// 0x0040 (0x0040 - 0x0000)
struct EndAIControllerPlayerBase_TestJumpToGround final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerPlayerBase_TestJumpToGround) == 0x000010, "Wrong alignment on EndAIControllerPlayerBase_TestJumpToGround");
static_assert(sizeof(EndAIControllerPlayerBase_TestJumpToGround) == 0x000040, "Wrong size on EndAIControllerPlayerBase_TestJumpToGround");
static_assert(offsetof(EndAIControllerPlayerBase_TestJumpToGround, InCharacter) == 0x000000, "Member 'EndAIControllerPlayerBase_TestJumpToGround::InCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerPlayerBase_TestJumpToGround, TargetTransform) == 0x000010, "Member 'EndAIControllerPlayerBase_TestJumpToGround::TargetTransform' has a wrong offset!");

// Function EndGame.EndAIControllerPlayerBase.TestJumpToWall
// 0x0020 (0x0020 - 0x0000)
struct EndAIControllerPlayerBase_TestJumpToWall final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerPlayerBase_TestJumpToWall) == 0x000008, "Wrong alignment on EndAIControllerPlayerBase_TestJumpToWall");
static_assert(sizeof(EndAIControllerPlayerBase_TestJumpToWall) == 0x000020, "Wrong size on EndAIControllerPlayerBase_TestJumpToWall");
static_assert(offsetof(EndAIControllerPlayerBase_TestJumpToWall, InCharacter) == 0x000000, "Member 'EndAIControllerPlayerBase_TestJumpToWall::InCharacter' has a wrong offset!");
static_assert(offsetof(EndAIControllerPlayerBase_TestJumpToWall, TargetLocation) == 0x000008, "Member 'EndAIControllerPlayerBase_TestJumpToWall::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndAIControllerPlayerBase_TestJumpToWall, UpVector) == 0x000014, "Member 'EndAIControllerPlayerBase_TestJumpToWall::UpVector' has a wrong offset!");

// Function EndGame.EndAIControllerPlayerBase.TestResetAI
// 0x0008 (0x0008 - 0x0000)
struct EndAIControllerPlayerBase_TestResetAI final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerPlayerBase_TestResetAI) == 0x000008, "Wrong alignment on EndAIControllerPlayerBase_TestResetAI");
static_assert(sizeof(EndAIControllerPlayerBase_TestResetAI) == 0x000008, "Wrong size on EndAIControllerPlayerBase_TestResetAI");
static_assert(offsetof(EndAIControllerPlayerBase_TestResetAI, InCharacter) == 0x000000, "Member 'EndAIControllerPlayerBase_TestResetAI::InCharacter' has a wrong offset!");

// Function EndGame.EndAIControllerPlayerBase.TestAIJumpToGround
// 0x0030 (0x0030 - 0x0000)
struct EndAIControllerPlayerBase_TestAIJumpToGround final
{
public:
	struct FTransform                             TargetTransform;                                   // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerPlayerBase_TestAIJumpToGround) == 0x000010, "Wrong alignment on EndAIControllerPlayerBase_TestAIJumpToGround");
static_assert(sizeof(EndAIControllerPlayerBase_TestAIJumpToGround) == 0x000030, "Wrong size on EndAIControllerPlayerBase_TestAIJumpToGround");
static_assert(offsetof(EndAIControllerPlayerBase_TestAIJumpToGround, TargetTransform) == 0x000000, "Member 'EndAIControllerPlayerBase_TestAIJumpToGround::TargetTransform' has a wrong offset!");

// Function EndGame.EndAIControllerPlayerBase.TestAIJumpToWall
// 0x0030 (0x0030 - 0x0000)
struct EndAIControllerPlayerBase_TestAIJumpToWall final
{
public:
	struct FTransform                             TargetTransform;                                   // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIControllerPlayerBase_TestAIJumpToWall) == 0x000010, "Wrong alignment on EndAIControllerPlayerBase_TestAIJumpToWall");
static_assert(sizeof(EndAIControllerPlayerBase_TestAIJumpToWall) == 0x000030, "Wrong size on EndAIControllerPlayerBase_TestAIJumpToWall");
static_assert(offsetof(EndAIControllerPlayerBase_TestAIJumpToWall, TargetTransform) == 0x000000, "Member 'EndAIControllerPlayerBase_TestAIJumpToWall::TargetTransform' has a wrong offset!");

// Function EndGame.EndAIControllerPlayerBase.TestMoveTo
// 0x0010 (0x0010 - 0x0000)
struct EndAIControllerPlayerBase_TestMoveTo final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindPath;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIControllerPlayerBase_TestMoveTo) == 0x000004, "Wrong alignment on EndAIControllerPlayerBase_TestMoveTo");
static_assert(sizeof(EndAIControllerPlayerBase_TestMoveTo) == 0x000010, "Wrong size on EndAIControllerPlayerBase_TestMoveTo");
static_assert(offsetof(EndAIControllerPlayerBase_TestMoveTo, TargetLocation) == 0x000000, "Member 'EndAIControllerPlayerBase_TestMoveTo::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndAIControllerPlayerBase_TestMoveTo, bFindPath) == 0x00000C, "Member 'EndAIControllerPlayerBase_TestMoveTo::bFindPath' has a wrong offset!");

// Function EndGame.EndPlayerSBScooterCoordinator.GetRiderCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndPlayerSBScooterCoordinator_GetRiderCharacter final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacterBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayerSBScooterCoordinator_GetRiderCharacter) == 0x000008, "Wrong alignment on EndPlayerSBScooterCoordinator_GetRiderCharacter");
static_assert(sizeof(EndPlayerSBScooterCoordinator_GetRiderCharacter) == 0x000010, "Wrong size on EndPlayerSBScooterCoordinator_GetRiderCharacter");
static_assert(offsetof(EndPlayerSBScooterCoordinator_GetRiderCharacter, Index_0) == 0x000000, "Member 'EndPlayerSBScooterCoordinator_GetRiderCharacter::Index_0' has a wrong offset!");
static_assert(offsetof(EndPlayerSBScooterCoordinator_GetRiderCharacter, ReturnValue) == 0x000008, "Member 'EndPlayerSBScooterCoordinator_GetRiderCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndPlayerSBScooterCoordinator.GetVehicleCharacter
// 0x0008 (0x0008 - 0x0000)
struct EndPlayerSBScooterCoordinator_GetVehicleCharacter final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayerSBScooterCoordinator_GetVehicleCharacter) == 0x000008, "Wrong alignment on EndPlayerSBScooterCoordinator_GetVehicleCharacter");
static_assert(sizeof(EndPlayerSBScooterCoordinator_GetVehicleCharacter) == 0x000008, "Wrong size on EndPlayerSBScooterCoordinator_GetVehicleCharacter");
static_assert(offsetof(EndPlayerSBScooterCoordinator_GetVehicleCharacter, ReturnValue) == 0x000000, "Member 'EndPlayerSBScooterCoordinator_GetVehicleCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIFrogGuysVolume.OnBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct EndAIFrogGuysVolume_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIFrogGuysVolume_OnBeginOverlap) == 0x000008, "Wrong alignment on EndAIFrogGuysVolume_OnBeginOverlap");
static_assert(sizeof(EndAIFrogGuysVolume_OnBeginOverlap) == 0x0000B0, "Wrong size on EndAIFrogGuysVolume_OnBeginOverlap");
static_assert(offsetof(EndAIFrogGuysVolume_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'EndAIFrogGuysVolume_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndAIFrogGuysVolume_OnBeginOverlap, OtherActor) == 0x000008, "Member 'EndAIFrogGuysVolume_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndAIFrogGuysVolume_OnBeginOverlap, OtherComp) == 0x000010, "Member 'EndAIFrogGuysVolume_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndAIFrogGuysVolume_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'EndAIFrogGuysVolume_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EndAIFrogGuysVolume_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'EndAIFrogGuysVolume_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EndAIFrogGuysVolume_OnBeginOverlap, SweepResult) == 0x000020, "Member 'EndAIFrogGuysVolume_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function EndGame.EndAIFrogGuysVolume.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct EndAIFrogGuysVolume_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIFrogGuysVolume_OnEndOverlap) == 0x000008, "Wrong alignment on EndAIFrogGuysVolume_OnEndOverlap");
static_assert(sizeof(EndAIFrogGuysVolume_OnEndOverlap) == 0x000020, "Wrong size on EndAIFrogGuysVolume_OnEndOverlap");
static_assert(offsetof(EndAIFrogGuysVolume_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'EndAIFrogGuysVolume_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndAIFrogGuysVolume_OnEndOverlap, OtherActor) == 0x000008, "Member 'EndAIFrogGuysVolume_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndAIFrogGuysVolume_OnEndOverlap, OtherComp) == 0x000010, "Member 'EndAIFrogGuysVolume_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndAIFrogGuysVolume_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'EndAIFrogGuysVolume_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.ChangeMyTarget
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISummonBaseController_ChangeMyTarget final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_ChangeMyTarget) == 0x000008, "Wrong alignment on EndBattleAISummonBaseController_ChangeMyTarget");
static_assert(sizeof(EndBattleAISummonBaseController_ChangeMyTarget) == 0x000008, "Wrong size on EndBattleAISummonBaseController_ChangeMyTarget");
static_assert(offsetof(EndBattleAISummonBaseController_ChangeMyTarget, InCharacter) == 0x000000, "Member 'EndBattleAISummonBaseController_ChangeMyTarget::InCharacter' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.CreateDamageSourceByCurrentTargetBase
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISummonBaseController_CreateDamageSourceByCurrentTargetBase final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_CreateDamageSourceByCurrentTargetBase) == 0x000004, "Wrong alignment on EndBattleAISummonBaseController_CreateDamageSourceByCurrentTargetBase");
static_assert(sizeof(EndBattleAISummonBaseController_CreateDamageSourceByCurrentTargetBase) == 0x000008, "Wrong size on EndBattleAISummonBaseController_CreateDamageSourceByCurrentTargetBase");
static_assert(offsetof(EndBattleAISummonBaseController_CreateDamageSourceByCurrentTargetBase, DamageSourceID) == 0x000000, "Member 'EndBattleAISummonBaseController_CreateDamageSourceByCurrentTargetBase::DamageSourceID' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.OnAbilityChoice
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISummonBaseController_OnAbilityChoice final
{
public:
	class FName                                   choiceAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_OnAbilityChoice) == 0x000004, "Wrong alignment on EndBattleAISummonBaseController_OnAbilityChoice");
static_assert(sizeof(EndBattleAISummonBaseController_OnAbilityChoice) == 0x000008, "Wrong size on EndBattleAISummonBaseController_OnAbilityChoice");
static_assert(offsetof(EndBattleAISummonBaseController_OnAbilityChoice, choiceAbility) == 0x000000, "Member 'EndBattleAISummonBaseController_OnAbilityChoice::choiceAbility' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.OnChangeBattleBehavior
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISummonBaseController_OnChangeBattleBehavior final
{
public:
	ESummonBattleBehavior                         NewBattleBehavior;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_OnChangeBattleBehavior) == 0x000001, "Wrong alignment on EndBattleAISummonBaseController_OnChangeBattleBehavior");
static_assert(sizeof(EndBattleAISummonBaseController_OnChangeBattleBehavior) == 0x000001, "Wrong size on EndBattleAISummonBaseController_OnChangeBattleBehavior");
static_assert(offsetof(EndBattleAISummonBaseController_OnChangeBattleBehavior, NewBattleBehavior) == 0x000000, "Member 'EndBattleAISummonBaseController_OnChangeBattleBehavior::NewBattleBehavior' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.OnInvokeCutSceneAbility
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISummonBaseController_OnInvokeCutSceneAbility final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_OnInvokeCutSceneAbility) == 0x000004, "Wrong alignment on EndBattleAISummonBaseController_OnInvokeCutSceneAbility");
static_assert(sizeof(EndBattleAISummonBaseController_OnInvokeCutSceneAbility) == 0x000008, "Wrong size on EndBattleAISummonBaseController_OnInvokeCutSceneAbility");
static_assert(offsetof(EndBattleAISummonBaseController_OnInvokeCutSceneAbility, CutSceneID) == 0x000000, "Member 'EndBattleAISummonBaseController_OnInvokeCutSceneAbility::CutSceneID' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.OnRequestUseAbility
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISummonBaseController_OnRequestUseAbility final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_OnRequestUseAbility) == 0x000004, "Wrong alignment on EndBattleAISummonBaseController_OnRequestUseAbility");
static_assert(sizeof(EndBattleAISummonBaseController_OnRequestUseAbility) == 0x000008, "Wrong size on EndBattleAISummonBaseController_OnRequestUseAbility");
static_assert(offsetof(EndBattleAISummonBaseController_OnRequestUseAbility, AbilityId) == 0x000000, "Member 'EndBattleAISummonBaseController_OnRequestUseAbility::AbilityId' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.RequestWarpTo
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAISummonBaseController_RequestWarpTo final
{
public:
	struct FVector                                WarpLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAISummonBaseController_RequestWarpTo) == 0x000004, "Wrong alignment on EndBattleAISummonBaseController_RequestWarpTo");
static_assert(sizeof(EndBattleAISummonBaseController_RequestWarpTo) == 0x000010, "Wrong size on EndBattleAISummonBaseController_RequestWarpTo");
static_assert(offsetof(EndBattleAISummonBaseController_RequestWarpTo, WarpLocation) == 0x000000, "Member 'EndBattleAISummonBaseController_RequestWarpTo::WarpLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAISummonBaseController_RequestWarpTo, ReturnValue) == 0x00000C, "Member 'EndBattleAISummonBaseController_RequestWarpTo::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.SetAppear
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISummonBaseController_SetAppear final
{
public:
	bool                                          bAppear;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_SetAppear) == 0x000001, "Wrong alignment on EndBattleAISummonBaseController_SetAppear");
static_assert(sizeof(EndBattleAISummonBaseController_SetAppear) == 0x000001, "Wrong size on EndBattleAISummonBaseController_SetAppear");
static_assert(offsetof(EndBattleAISummonBaseController_SetAppear, bAppear) == 0x000000, "Member 'EndBattleAISummonBaseController_SetAppear::bAppear' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.SetDrawPause
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISummonBaseController_SetDrawPause final
{
public:
	bool                                          bDrawPause;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_SetDrawPause) == 0x000001, "Wrong alignment on EndBattleAISummonBaseController_SetDrawPause");
static_assert(sizeof(EndBattleAISummonBaseController_SetDrawPause) == 0x000001, "Wrong size on EndBattleAISummonBaseController_SetDrawPause");
static_assert(offsetof(EndBattleAISummonBaseController_SetDrawPause, bDrawPause) == 0x000000, "Member 'EndBattleAISummonBaseController_SetDrawPause::bDrawPause' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.IsUsedMoogleAbility
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISummonBaseController_IsUsedMoogleAbility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_IsUsedMoogleAbility) == 0x000001, "Wrong alignment on EndBattleAISummonBaseController_IsUsedMoogleAbility");
static_assert(sizeof(EndBattleAISummonBaseController_IsUsedMoogleAbility) == 0x000001, "Wrong size on EndBattleAISummonBaseController_IsUsedMoogleAbility");
static_assert(offsetof(EndBattleAISummonBaseController_IsUsedMoogleAbility, ReturnValue) == 0x000000, "Member 'EndBattleAISummonBaseController_IsUsedMoogleAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndWorldReportEnemyPage.OnBtnListSetupItemCorel
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportEnemyPage_OnBtnListSetupItemCorel final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportEnemyPage_OnBtnListSetupItemCorel) == 0x000008, "Wrong alignment on EndWorldReportEnemyPage_OnBtnListSetupItemCorel");
static_assert(sizeof(EndWorldReportEnemyPage_OnBtnListSetupItemCorel) == 0x000010, "Wrong size on EndWorldReportEnemyPage_OnBtnListSetupItemCorel");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemCorel, ItemWidget) == 0x000000, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemCorel::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemCorel, ItemIndex) == 0x000008, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemCorel::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportEnemyPage.OnBtnListSetupItemCosmo
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportEnemyPage_OnBtnListSetupItemCosmo final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportEnemyPage_OnBtnListSetupItemCosmo) == 0x000008, "Wrong alignment on EndWorldReportEnemyPage_OnBtnListSetupItemCosmo");
static_assert(sizeof(EndWorldReportEnemyPage_OnBtnListSetupItemCosmo) == 0x000010, "Wrong size on EndWorldReportEnemyPage_OnBtnListSetupItemCosmo");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemCosmo, ItemWidget) == 0x000000, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemCosmo::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemCosmo, ItemIndex) == 0x000008, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemCosmo::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportEnemyPage.OnBtnListSetupItemGlasslands
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportEnemyPage_OnBtnListSetupItemGlasslands final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportEnemyPage_OnBtnListSetupItemGlasslands) == 0x000008, "Wrong alignment on EndWorldReportEnemyPage_OnBtnListSetupItemGlasslands");
static_assert(sizeof(EndWorldReportEnemyPage_OnBtnListSetupItemGlasslands) == 0x000010, "Wrong size on EndWorldReportEnemyPage_OnBtnListSetupItemGlasslands");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemGlasslands, ItemWidget) == 0x000000, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemGlasslands::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemGlasslands, ItemIndex) == 0x000008, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemGlasslands::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportEnemyPage.OnBtnListSetupItemGongaga
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportEnemyPage_OnBtnListSetupItemGongaga final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportEnemyPage_OnBtnListSetupItemGongaga) == 0x000008, "Wrong alignment on EndWorldReportEnemyPage_OnBtnListSetupItemGongaga");
static_assert(sizeof(EndWorldReportEnemyPage_OnBtnListSetupItemGongaga) == 0x000010, "Wrong size on EndWorldReportEnemyPage_OnBtnListSetupItemGongaga");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemGongaga, ItemWidget) == 0x000000, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemGongaga::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemGongaga, ItemIndex) == 0x000008, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemGongaga::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportEnemyPage.OnBtnListSetupItemJunon
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportEnemyPage_OnBtnListSetupItemJunon final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportEnemyPage_OnBtnListSetupItemJunon) == 0x000008, "Wrong alignment on EndWorldReportEnemyPage_OnBtnListSetupItemJunon");
static_assert(sizeof(EndWorldReportEnemyPage_OnBtnListSetupItemJunon) == 0x000010, "Wrong size on EndWorldReportEnemyPage_OnBtnListSetupItemJunon");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemJunon, ItemWidget) == 0x000000, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemJunon::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemJunon, ItemIndex) == 0x000008, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemJunon::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportEnemyPage.OnBtnListSetupItemNibel
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportEnemyPage_OnBtnListSetupItemNibel final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportEnemyPage_OnBtnListSetupItemNibel) == 0x000008, "Wrong alignment on EndWorldReportEnemyPage_OnBtnListSetupItemNibel");
static_assert(sizeof(EndWorldReportEnemyPage_OnBtnListSetupItemNibel) == 0x000010, "Wrong size on EndWorldReportEnemyPage_OnBtnListSetupItemNibel");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemNibel, ItemWidget) == 0x000000, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemNibel::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportEnemyPage_OnBtnListSetupItemNibel, ItemIndex) == 0x000008, "Member 'EndWorldReportEnemyPage_OnBtnListSetupItemNibel::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportEnemyPage.OnResearchTargetListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportEnemyPage_OnResearchTargetListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportEnemyPage_OnResearchTargetListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportEnemyPage_OnResearchTargetListSetupItem");
static_assert(sizeof(EndWorldReportEnemyPage_OnResearchTargetListSetupItem) == 0x000010, "Wrong size on EndWorldReportEnemyPage_OnResearchTargetListSetupItem");
static_assert(offsetof(EndWorldReportEnemyPage_OnResearchTargetListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportEnemyPage_OnResearchTargetListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportEnemyPage_OnResearchTargetListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportEnemyPage_OnResearchTargetListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportEnemyPage.OnTermListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWorldReportEnemyPage_OnTermListMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWorldReportEnemyPage_OnTermListMeasureItem) == 0x000004, "Wrong alignment on EndWorldReportEnemyPage_OnTermListMeasureItem");
static_assert(sizeof(EndWorldReportEnemyPage_OnTermListMeasureItem) == 0x00000C, "Wrong size on EndWorldReportEnemyPage_OnTermListMeasureItem");
static_assert(offsetof(EndWorldReportEnemyPage_OnTermListMeasureItem, ItemIndex) == 0x000000, "Member 'EndWorldReportEnemyPage_OnTermListMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndWorldReportEnemyPage_OnTermListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWorldReportEnemyPage_OnTermListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWorldReportEnemyPage.OnTermListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportEnemyPage_OnTermListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportEnemyPage_OnTermListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportEnemyPage_OnTermListSetupItem");
static_assert(sizeof(EndWorldReportEnemyPage_OnTermListSetupItem) == 0x000010, "Wrong size on EndWorldReportEnemyPage_OnTermListSetupItem");
static_assert(offsetof(EndWorldReportEnemyPage_OnTermListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportEnemyPage_OnTermListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportEnemyPage_OnTermListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportEnemyPage_OnTermListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndNumberLabel_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetBlendMode) == 0x000001, "Wrong alignment on EndNumberLabel_SetBlendMode");
static_assert(sizeof(EndNumberLabel_SetBlendMode) == 0x000001, "Wrong size on EndNumberLabel_SetBlendMode");
static_assert(offsetof(EndNumberLabel_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndNumberLabel_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndNumberLabel_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndNumberLabel_SetColorAndOpacity");
static_assert(sizeof(EndNumberLabel_SetColorAndOpacity) == 0x000010, "Wrong size on EndNumberLabel_SetColorAndOpacity");
static_assert(offsetof(EndNumberLabel_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndNumberLabel_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetFontIndex
// 0x0004 (0x0004 - 0x0000)
struct EndNumberLabel_SetFontIndex final
{
public:
	int32                                         InFontIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetFontIndex) == 0x000004, "Wrong alignment on EndNumberLabel_SetFontIndex");
static_assert(sizeof(EndNumberLabel_SetFontIndex) == 0x000004, "Wrong size on EndNumberLabel_SetFontIndex");
static_assert(offsetof(EndNumberLabel_SetFontIndex, InFontIndex) == 0x000000, "Member 'EndNumberLabel_SetFontIndex::InFontIndex' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct EndNumberLabel_SetJustification final
{
public:
	ETextJustify                                  InJustification;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetJustification) == 0x000001, "Wrong alignment on EndNumberLabel_SetJustification");
static_assert(sizeof(EndNumberLabel_SetJustification) == 0x000001, "Wrong size on EndNumberLabel_SetJustification");
static_assert(offsetof(EndNumberLabel_SetJustification, InJustification) == 0x000000, "Member 'EndNumberLabel_SetJustification::InJustification' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetMinDigits
// 0x0004 (0x0004 - 0x0000)
struct EndNumberLabel_SetMinDigits final
{
public:
	int32                                         InMinDigits;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetMinDigits) == 0x000004, "Wrong alignment on EndNumberLabel_SetMinDigits");
static_assert(sizeof(EndNumberLabel_SetMinDigits) == 0x000004, "Wrong size on EndNumberLabel_SetMinDigits");
static_assert(offsetof(EndNumberLabel_SetMinDigits, InMinDigits) == 0x000000, "Member 'EndNumberLabel_SetMinDigits::InMinDigits' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndNumberLabel_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetOpacity) == 0x000004, "Wrong alignment on EndNumberLabel_SetOpacity");
static_assert(sizeof(EndNumberLabel_SetOpacity) == 0x000004, "Wrong size on EndNumberLabel_SetOpacity");
static_assert(offsetof(EndNumberLabel_SetOpacity, InOpacity) == 0x000000, "Member 'EndNumberLabel_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetSpacing
// 0x0004 (0x0004 - 0x0000)
struct EndNumberLabel_SetSpacing final
{
public:
	int32                                         InSpacing;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetSpacing) == 0x000004, "Wrong alignment on EndNumberLabel_SetSpacing");
static_assert(sizeof(EndNumberLabel_SetSpacing) == 0x000004, "Wrong size on EndNumberLabel_SetSpacing");
static_assert(offsetof(EndNumberLabel_SetSpacing, InSpacing) == 0x000000, "Member 'EndNumberLabel_SetSpacing::InSpacing' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetValue
// 0x0004 (0x0004 - 0x0000)
struct EndNumberLabel_SetValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetValue) == 0x000004, "Wrong alignment on EndNumberLabel_SetValue");
static_assert(sizeof(EndNumberLabel_SetValue) == 0x000004, "Wrong size on EndNumberLabel_SetValue");
static_assert(offsetof(EndNumberLabel_SetValue, InValue) == 0x000000, "Member 'EndNumberLabel_SetValue::InValue' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetZeroFilled
// 0x0001 (0x0001 - 0x0000)
struct EndNumberLabel_SetZeroFilled final
{
public:
	bool                                          bInZeroFilled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetZeroFilled) == 0x000001, "Wrong alignment on EndNumberLabel_SetZeroFilled");
static_assert(sizeof(EndNumberLabel_SetZeroFilled) == 0x000001, "Wrong size on EndNumberLabel_SetZeroFilled");
static_assert(offsetof(EndNumberLabel_SetZeroFilled, bInZeroFilled) == 0x000000, "Member 'EndNumberLabel_SetZeroFilled::bInZeroFilled' has a wrong offset!");

// Function EndGame.EndChangeAppearanceCharacter.RequestChangeAppearance
// 0x0008 (0x0008 - 0x0000)
struct EndChangeAppearanceCharacter_RequestChangeAppearance final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediately;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChangeAppearanceCharacter_RequestChangeAppearance) == 0x000004, "Wrong alignment on EndChangeAppearanceCharacter_RequestChangeAppearance");
static_assert(sizeof(EndChangeAppearanceCharacter_RequestChangeAppearance) == 0x000008, "Wrong size on EndChangeAppearanceCharacter_RequestChangeAppearance");
static_assert(offsetof(EndChangeAppearanceCharacter_RequestChangeAppearance, Index_0) == 0x000000, "Member 'EndChangeAppearanceCharacter_RequestChangeAppearance::Index_0' has a wrong offset!");
static_assert(offsetof(EndChangeAppearanceCharacter_RequestChangeAppearance, bImmediately) == 0x000004, "Member 'EndChangeAppearanceCharacter_RequestChangeAppearance::bImmediately' has a wrong offset!");

// Function EndGame.EndChangeAppearanceCharacter.RequestChangeAppearance_ForceFinishAbility
// 0x0004 (0x0004 - 0x0000)
struct EndChangeAppearanceCharacter_RequestChangeAppearance_ForceFinishAbility final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChangeAppearanceCharacter_RequestChangeAppearance_ForceFinishAbility) == 0x000004, "Wrong alignment on EndChangeAppearanceCharacter_RequestChangeAppearance_ForceFinishAbility");
static_assert(sizeof(EndChangeAppearanceCharacter_RequestChangeAppearance_ForceFinishAbility) == 0x000004, "Wrong size on EndChangeAppearanceCharacter_RequestChangeAppearance_ForceFinishAbility");
static_assert(offsetof(EndChangeAppearanceCharacter_RequestChangeAppearance_ForceFinishAbility, Index_0) == 0x000000, "Member 'EndChangeAppearanceCharacter_RequestChangeAppearance_ForceFinishAbility::Index_0' has a wrong offset!");

// Function EndGame.EndBoxing3DBattlerMenu.OnPrizeList2SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBoxing3DBattlerMenu_OnPrizeList2SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBoxing3DBattlerMenu_OnPrizeList2SetupItem) == 0x000008, "Wrong alignment on EndBoxing3DBattlerMenu_OnPrizeList2SetupItem");
static_assert(sizeof(EndBoxing3DBattlerMenu_OnPrizeList2SetupItem) == 0x000010, "Wrong size on EndBoxing3DBattlerMenu_OnPrizeList2SetupItem");
static_assert(offsetof(EndBoxing3DBattlerMenu_OnPrizeList2SetupItem, ItemWidget) == 0x000000, "Member 'EndBoxing3DBattlerMenu_OnPrizeList2SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBoxing3DBattlerMenu_OnPrizeList2SetupItem, ItemIndex) == 0x000008, "Member 'EndBoxing3DBattlerMenu_OnPrizeList2SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndBoxing3DBattlerMenu.OnPrizeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBoxing3DBattlerMenu_OnPrizeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBoxing3DBattlerMenu_OnPrizeListSetupItem) == 0x000008, "Wrong alignment on EndBoxing3DBattlerMenu_OnPrizeListSetupItem");
static_assert(sizeof(EndBoxing3DBattlerMenu_OnPrizeListSetupItem) == 0x000010, "Wrong size on EndBoxing3DBattlerMenu_OnPrizeListSetupItem");
static_assert(offsetof(EndBoxing3DBattlerMenu_OnPrizeListSetupItem, ItemWidget) == 0x000000, "Member 'EndBoxing3DBattlerMenu_OnPrizeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBoxing3DBattlerMenu_OnPrizeListSetupItem, ItemIndex) == 0x000008, "Member 'EndBoxing3DBattlerMenu_OnPrizeListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndBoxing3DBattlerMenu.OnUnitListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBoxing3DBattlerMenu_OnUnitListPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBoxing3DBattlerMenu_OnUnitListPressedItem) == 0x000004, "Wrong alignment on EndBoxing3DBattlerMenu_OnUnitListPressedItem");
static_assert(sizeof(EndBoxing3DBattlerMenu_OnUnitListPressedItem) == 0x000004, "Wrong size on EndBoxing3DBattlerMenu_OnUnitListPressedItem");
static_assert(offsetof(EndBoxing3DBattlerMenu_OnUnitListPressedItem, ItemIndex) == 0x000000, "Member 'EndBoxing3DBattlerMenu_OnUnitListPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndBoxing3DBattlerMenu.OnUnitListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBoxing3DBattlerMenu_OnUnitListSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBoxing3DBattlerMenu_OnUnitListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBoxing3DBattlerMenu_OnUnitListSelectedIndexChanged");
static_assert(sizeof(EndBoxing3DBattlerMenu_OnUnitListSelectedIndexChanged) == 0x000004, "Wrong size on EndBoxing3DBattlerMenu_OnUnitListSelectedIndexChanged");
static_assert(offsetof(EndBoxing3DBattlerMenu_OnUnitListSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndBoxing3DBattlerMenu_OnUnitListSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndBoxing3DBattlerMenu.OnUnitListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBoxing3DBattlerMenu_OnUnitListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBoxing3DBattlerMenu_OnUnitListSetupItem) == 0x000008, "Wrong alignment on EndBoxing3DBattlerMenu_OnUnitListSetupItem");
static_assert(sizeof(EndBoxing3DBattlerMenu_OnUnitListSetupItem) == 0x000010, "Wrong size on EndBoxing3DBattlerMenu_OnUnitListSetupItem");
static_assert(offsetof(EndBoxing3DBattlerMenu_OnUnitListSetupItem, ItemWidget) == 0x000000, "Member 'EndBoxing3DBattlerMenu_OnUnitListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBoxing3DBattlerMenu_OnUnitListSetupItem, ItemIndex) == 0x000008, "Member 'EndBoxing3DBattlerMenu_OnUnitListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndNaviMapOctagon.ConvertToPosition2D
// 0x0014 (0x0014 - 0x0000)
struct EndNaviMapOctagon_ConvertToPosition2D final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapOctagon_ConvertToPosition2D) == 0x000004, "Wrong alignment on EndNaviMapOctagon_ConvertToPosition2D");
static_assert(sizeof(EndNaviMapOctagon_ConvertToPosition2D) == 0x000014, "Wrong size on EndNaviMapOctagon_ConvertToPosition2D");
static_assert(offsetof(EndNaviMapOctagon_ConvertToPosition2D, InPos) == 0x000000, "Member 'EndNaviMapOctagon_ConvertToPosition2D::InPos' has a wrong offset!");
static_assert(offsetof(EndNaviMapOctagon_ConvertToPosition2D, ReturnValue) == 0x00000C, "Member 'EndNaviMapOctagon_ConvertToPosition2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndNaviMapOctagon.SetPosition3D
// 0x000C (0x000C - 0x0000)
struct EndNaviMapOctagon_SetPosition3D final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapOctagon_SetPosition3D) == 0x000004, "Wrong alignment on EndNaviMapOctagon_SetPosition3D");
static_assert(sizeof(EndNaviMapOctagon_SetPosition3D) == 0x00000C, "Wrong size on EndNaviMapOctagon_SetPosition3D");
static_assert(offsetof(EndNaviMapOctagon_SetPosition3D, InPos) == 0x000000, "Member 'EndNaviMapOctagon_SetPosition3D::InPos' has a wrong offset!");

// Function EndGame.EndChocoboFastTravelMenu.OnPointsListIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndChocoboFastTravelMenu_OnPointsListIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChocoboFastTravelMenu_OnPointsListIndexChanged) == 0x000004, "Wrong alignment on EndChocoboFastTravelMenu_OnPointsListIndexChanged");
static_assert(sizeof(EndChocoboFastTravelMenu_OnPointsListIndexChanged) == 0x000004, "Wrong size on EndChocoboFastTravelMenu_OnPointsListIndexChanged");
static_assert(offsetof(EndChocoboFastTravelMenu_OnPointsListIndexChanged, ItemIndex) == 0x000000, "Member 'EndChocoboFastTravelMenu_OnPointsListIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboFastTravelMenu.OnPointsListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndChocoboFastTravelMenu_OnPointsListPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChocoboFastTravelMenu_OnPointsListPressedItem) == 0x000004, "Wrong alignment on EndChocoboFastTravelMenu_OnPointsListPressedItem");
static_assert(sizeof(EndChocoboFastTravelMenu_OnPointsListPressedItem) == 0x000004, "Wrong size on EndChocoboFastTravelMenu_OnPointsListPressedItem");
static_assert(offsetof(EndChocoboFastTravelMenu_OnPointsListPressedItem, ItemIndex) == 0x000000, "Member 'EndChocoboFastTravelMenu_OnPointsListPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboFastTravelMenu.OnPointsListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboFastTravelMenu_OnPointsListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboFastTravelMenu_OnPointsListSetupItem) == 0x000008, "Wrong alignment on EndChocoboFastTravelMenu_OnPointsListSetupItem");
static_assert(sizeof(EndChocoboFastTravelMenu_OnPointsListSetupItem) == 0x000010, "Wrong size on EndChocoboFastTravelMenu_OnPointsListSetupItem");
static_assert(offsetof(EndChocoboFastTravelMenu_OnPointsListSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboFastTravelMenu_OnPointsListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboFastTravelMenu_OnPointsListSetupItem, ItemIndex) == 0x000008, "Member 'EndChocoboFastTravelMenu_OnPointsListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.AddAttachEffect
// 0x001C (0x001C - 0x0000)
struct EndAnimalRunAIDirector_AddAttachEffect final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketNam;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutHandleId;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_AddAttachEffect) == 0x000004, "Wrong alignment on EndAnimalRunAIDirector_AddAttachEffect");
static_assert(sizeof(EndAnimalRunAIDirector_AddAttachEffect) == 0x00001C, "Wrong size on EndAnimalRunAIDirector_AddAttachEffect");
static_assert(offsetof(EndAnimalRunAIDirector_AddAttachEffect, EffectName) == 0x000000, "Member 'EndAnimalRunAIDirector_AddAttachEffect::EffectName' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_AddAttachEffect, CharacterName) == 0x000008, "Member 'EndAnimalRunAIDirector_AddAttachEffect::CharacterName' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_AddAttachEffect, AttachSocketNam) == 0x000010, "Member 'EndAnimalRunAIDirector_AddAttachEffect::AttachSocketNam' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_AddAttachEffect, OutHandleId) == 0x000018, "Member 'EndAnimalRunAIDirector_AddAttachEffect::OutHandleId' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.ChangeDefaultParameter
// 0x0010 (0x0010 - 0x0000)
struct EndAnimalRunAIDirector_ChangeDefaultParameter final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAnimalRunAIParameterBase> DefaultParameterClass;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_ChangeDefaultParameter) == 0x000008, "Wrong alignment on EndAnimalRunAIDirector_ChangeDefaultParameter");
static_assert(sizeof(EndAnimalRunAIDirector_ChangeDefaultParameter) == 0x000010, "Wrong size on EndAnimalRunAIDirector_ChangeDefaultParameter");
static_assert(offsetof(EndAnimalRunAIDirector_ChangeDefaultParameter, CharacterName) == 0x000000, "Member 'EndAnimalRunAIDirector_ChangeDefaultParameter::CharacterName' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_ChangeDefaultParameter, DefaultParameterClass) == 0x000008, "Member 'EndAnimalRunAIDirector_ChangeDefaultParameter::DefaultParameterClass' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.OnChangeMode
// 0x0002 (0x0002 - 0x0000)
struct EndAnimalRunAIDirector_OnChangeMode final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimalRunTeamMode                         Mode;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_OnChangeMode) == 0x000001, "Wrong alignment on EndAnimalRunAIDirector_OnChangeMode");
static_assert(sizeof(EndAnimalRunAIDirector_OnChangeMode) == 0x000002, "Wrong size on EndAnimalRunAIDirector_OnChangeMode");
static_assert(offsetof(EndAnimalRunAIDirector_OnChangeMode, TeamType) == 0x000000, "Member 'EndAnimalRunAIDirector_OnChangeMode::TeamType' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_OnChangeMode, Mode) == 0x000001, "Member 'EndAnimalRunAIDirector_OnChangeMode::Mode' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.OnElapsedSecond
// 0x0004 (0x0004 - 0x0000)
struct EndAnimalRunAIDirector_OnElapsedSecond final
{
public:
	int32                                         ElapsedSecond;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_OnElapsedSecond) == 0x000004, "Wrong alignment on EndAnimalRunAIDirector_OnElapsedSecond");
static_assert(sizeof(EndAnimalRunAIDirector_OnElapsedSecond) == 0x000004, "Wrong size on EndAnimalRunAIDirector_OnElapsedSecond");
static_assert(offsetof(EndAnimalRunAIDirector_OnElapsedSecond, ElapsedSecond) == 0x000000, "Member 'EndAnimalRunAIDirector_OnElapsedSecond::ElapsedSecond' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.OnGoal
// 0x0008 (0x0008 - 0x0000)
struct EndAnimalRunAIDirector_OnGoal final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_OnGoal) == 0x000004, "Wrong alignment on EndAnimalRunAIDirector_OnGoal");
static_assert(sizeof(EndAnimalRunAIDirector_OnGoal) == 0x000008, "Wrong size on EndAnimalRunAIDirector_OnGoal");
static_assert(offsetof(EndAnimalRunAIDirector_OnGoal, TeamType) == 0x000000, "Member 'EndAnimalRunAIDirector_OnGoal::TeamType' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_OnGoal, Score) == 0x000004, "Member 'EndAnimalRunAIDirector_OnGoal::Score' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.OnWildModeElapsedSecond
// 0x0008 (0x0008 - 0x0000)
struct EndAnimalRunAIDirector_OnWildModeElapsedSecond final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ElapsedSecond;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_OnWildModeElapsedSecond) == 0x000004, "Wrong alignment on EndAnimalRunAIDirector_OnWildModeElapsedSecond");
static_assert(sizeof(EndAnimalRunAIDirector_OnWildModeElapsedSecond) == 0x000008, "Wrong size on EndAnimalRunAIDirector_OnWildModeElapsedSecond");
static_assert(offsetof(EndAnimalRunAIDirector_OnWildModeElapsedSecond, TeamType) == 0x000000, "Member 'EndAnimalRunAIDirector_OnWildModeElapsedSecond::TeamType' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_OnWildModeElapsedSecond, ElapsedSecond) == 0x000004, "Member 'EndAnimalRunAIDirector_OnWildModeElapsedSecond::ElapsedSecond' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.RemoveAttachEffect
// 0x0004 (0x0004 - 0x0000)
struct EndAnimalRunAIDirector_RemoveAttachEffect final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_RemoveAttachEffect) == 0x000004, "Wrong alignment on EndAnimalRunAIDirector_RemoveAttachEffect");
static_assert(sizeof(EndAnimalRunAIDirector_RemoveAttachEffect) == 0x000004, "Wrong size on EndAnimalRunAIDirector_RemoveAttachEffect");
static_assert(offsetof(EndAnimalRunAIDirector_RemoveAttachEffect, HandleId) == 0x000000, "Member 'EndAnimalRunAIDirector_RemoveAttachEffect::HandleId' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.RequestChangeMode
// 0x0002 (0x0002 - 0x0000)
struct EndAnimalRunAIDirector_RequestChangeMode final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimalRunTeamMode                         Mode;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_RequestChangeMode) == 0x000001, "Wrong alignment on EndAnimalRunAIDirector_RequestChangeMode");
static_assert(sizeof(EndAnimalRunAIDirector_RequestChangeMode) == 0x000002, "Wrong size on EndAnimalRunAIDirector_RequestChangeMode");
static_assert(offsetof(EndAnimalRunAIDirector_RequestChangeMode, TeamType) == 0x000000, "Member 'EndAnimalRunAIDirector_RequestChangeMode::TeamType' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_RequestChangeMode, Mode) == 0x000001, "Member 'EndAnimalRunAIDirector_RequestChangeMode::Mode' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.ResetAnimationPlayRate
// 0x0008 (0x0008 - 0x0000)
struct EndAnimalRunAIDirector_ResetAnimationPlayRate final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_ResetAnimationPlayRate) == 0x000004, "Wrong alignment on EndAnimalRunAIDirector_ResetAnimationPlayRate");
static_assert(sizeof(EndAnimalRunAIDirector_ResetAnimationPlayRate) == 0x000008, "Wrong size on EndAnimalRunAIDirector_ResetAnimationPlayRate");
static_assert(offsetof(EndAnimalRunAIDirector_ResetAnimationPlayRate, CharacterName) == 0x000000, "Member 'EndAnimalRunAIDirector_ResetAnimationPlayRate::CharacterName' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.ResetOverrideParameter
// 0x0008 (0x0008 - 0x0000)
struct EndAnimalRunAIDirector_ResetOverrideParameter final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_ResetOverrideParameter) == 0x000004, "Wrong alignment on EndAnimalRunAIDirector_ResetOverrideParameter");
static_assert(sizeof(EndAnimalRunAIDirector_ResetOverrideParameter) == 0x000008, "Wrong size on EndAnimalRunAIDirector_ResetOverrideParameter");
static_assert(offsetof(EndAnimalRunAIDirector_ResetOverrideParameter, CharacterName) == 0x000000, "Member 'EndAnimalRunAIDirector_ResetOverrideParameter::CharacterName' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.SetAnimationPlayRate
// 0x000C (0x000C - 0x0000)
struct EndAnimalRunAIDirector_SetAnimationPlayRate final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_SetAnimationPlayRate) == 0x000004, "Wrong alignment on EndAnimalRunAIDirector_SetAnimationPlayRate");
static_assert(sizeof(EndAnimalRunAIDirector_SetAnimationPlayRate) == 0x00000C, "Wrong size on EndAnimalRunAIDirector_SetAnimationPlayRate");
static_assert(offsetof(EndAnimalRunAIDirector_SetAnimationPlayRate, CharacterName) == 0x000000, "Member 'EndAnimalRunAIDirector_SetAnimationPlayRate::CharacterName' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_SetAnimationPlayRate, PlayRate) == 0x000008, "Member 'EndAnimalRunAIDirector_SetAnimationPlayRate::PlayRate' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.SetLockTarget
// 0x000C (0x000C - 0x0000)
struct EndAnimalRunAIDirector_SetLockTarget final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamType                                     TeamType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAnimalRunAIDirector_SetLockTarget) == 0x000004, "Wrong alignment on EndAnimalRunAIDirector_SetLockTarget");
static_assert(sizeof(EndAnimalRunAIDirector_SetLockTarget) == 0x00000C, "Wrong size on EndAnimalRunAIDirector_SetLockTarget");
static_assert(offsetof(EndAnimalRunAIDirector_SetLockTarget, CharacterName) == 0x000000, "Member 'EndAnimalRunAIDirector_SetLockTarget::CharacterName' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_SetLockTarget, TeamType) == 0x000008, "Member 'EndAnimalRunAIDirector_SetLockTarget::TeamType' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.SetOverrideParameter
// 0x0010 (0x0010 - 0x0000)
struct EndAnimalRunAIDirector_SetOverrideParameter final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEndAnimalRunAIParameterBase> OverrideParameterClass;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_SetOverrideParameter) == 0x000008, "Wrong alignment on EndAnimalRunAIDirector_SetOverrideParameter");
static_assert(sizeof(EndAnimalRunAIDirector_SetOverrideParameter) == 0x000010, "Wrong size on EndAnimalRunAIDirector_SetOverrideParameter");
static_assert(offsetof(EndAnimalRunAIDirector_SetOverrideParameter, CharacterName) == 0x000000, "Member 'EndAnimalRunAIDirector_SetOverrideParameter::CharacterName' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_SetOverrideParameter, OverrideParameterClass) == 0x000008, "Member 'EndAnimalRunAIDirector_SetOverrideParameter::OverrideParameterClass' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.GetRunWildAICharacter
// 0x0010 (0x0010 - 0x0000)
struct EndAnimalRunAIDirector_GetRunWildAICharacter final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacterBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_GetRunWildAICharacter) == 0x000008, "Wrong alignment on EndAnimalRunAIDirector_GetRunWildAICharacter");
static_assert(sizeof(EndAnimalRunAIDirector_GetRunWildAICharacter) == 0x000010, "Wrong size on EndAnimalRunAIDirector_GetRunWildAICharacter");
static_assert(offsetof(EndAnimalRunAIDirector_GetRunWildAICharacter, CharacterName) == 0x000000, "Member 'EndAnimalRunAIDirector_GetRunWildAICharacter::CharacterName' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_GetRunWildAICharacter, ReturnValue) == 0x000008, "Member 'EndAnimalRunAIDirector_GetRunWildAICharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.GetTeamMode
// 0x0002 (0x0002 - 0x0000)
struct EndAnimalRunAIDirector_GetTeamMode final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimalRunTeamMode                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_GetTeamMode) == 0x000001, "Wrong alignment on EndAnimalRunAIDirector_GetTeamMode");
static_assert(sizeof(EndAnimalRunAIDirector_GetTeamMode) == 0x000002, "Wrong size on EndAnimalRunAIDirector_GetTeamMode");
static_assert(offsetof(EndAnimalRunAIDirector_GetTeamMode, TeamType) == 0x000000, "Member 'EndAnimalRunAIDirector_GetTeamMode::TeamType' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_GetTeamMode, ReturnValue) == 0x000001, "Member 'EndAnimalRunAIDirector_GetTeamMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndAnimalRunAIDirector.GetTeamRank
// 0x0008 (0x0008 - 0x0000)
struct EndAnimalRunAIDirector_GetTeamRank final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAnimalRunAIDirector_GetTeamRank) == 0x000004, "Wrong alignment on EndAnimalRunAIDirector_GetTeamRank");
static_assert(sizeof(EndAnimalRunAIDirector_GetTeamRank) == 0x000008, "Wrong size on EndAnimalRunAIDirector_GetTeamRank");
static_assert(offsetof(EndAnimalRunAIDirector_GetTeamRank, TeamType) == 0x000000, "Member 'EndAnimalRunAIDirector_GetTeamRank::TeamType' has a wrong offset!");
static_assert(offsetof(EndAnimalRunAIDirector_GetTeamRank, ReturnValue) == 0x000004, "Member 'EndAnimalRunAIDirector_GetTeamRank::ReturnValue' has a wrong offset!");

// Function EndGame.EndAnimalRunBallActor.OnComponentHitBall
// 0x00B8 (0x00B8 - 0x0000)
struct EndAnimalRunBallActor_OnComponentHitBall final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAnimalRunBallActor_OnComponentHitBall) == 0x000008, "Wrong alignment on EndAnimalRunBallActor_OnComponentHitBall");
static_assert(sizeof(EndAnimalRunBallActor_OnComponentHitBall) == 0x0000B8, "Wrong size on EndAnimalRunBallActor_OnComponentHitBall");
static_assert(offsetof(EndAnimalRunBallActor_OnComponentHitBall, HitComponent) == 0x000000, "Member 'EndAnimalRunBallActor_OnComponentHitBall::HitComponent' has a wrong offset!");
static_assert(offsetof(EndAnimalRunBallActor_OnComponentHitBall, OtherActor) == 0x000008, "Member 'EndAnimalRunBallActor_OnComponentHitBall::OtherActor' has a wrong offset!");
static_assert(offsetof(EndAnimalRunBallActor_OnComponentHitBall, OtherComp) == 0x000010, "Member 'EndAnimalRunBallActor_OnComponentHitBall::OtherComp' has a wrong offset!");
static_assert(offsetof(EndAnimalRunBallActor_OnComponentHitBall, NormalImpulse) == 0x000018, "Member 'EndAnimalRunBallActor_OnComponentHitBall::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndAnimalRunBallActor_OnComponentHitBall, Hit) == 0x000024, "Member 'EndAnimalRunBallActor_OnComponentHitBall::Hit' has a wrong offset!");

// Function EndGame.EndCrowdActorBase.Play
// 0x0008 (0x0008 - 0x0000)
struct EndCrowdActorBase_Play final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCrowdActorBase_Play) == 0x000004, "Wrong alignment on EndCrowdActorBase_Play");
static_assert(sizeof(EndCrowdActorBase_Play) == 0x000008, "Wrong size on EndCrowdActorBase_Play");
static_assert(offsetof(EndCrowdActorBase_Play, BlendTime) == 0x000000, "Member 'EndCrowdActorBase_Play::BlendTime' has a wrong offset!");
static_assert(offsetof(EndCrowdActorBase_Play, bUseFade) == 0x000004, "Member 'EndCrowdActorBase_Play::bUseFade' has a wrong offset!");

// Function EndGame.EndCrowdActorBase.Stop
// 0x0008 (0x0008 - 0x0000)
struct EndCrowdActorBase_Stop final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCrowdActorBase_Stop) == 0x000004, "Wrong alignment on EndCrowdActorBase_Stop");
static_assert(sizeof(EndCrowdActorBase_Stop) == 0x000008, "Wrong size on EndCrowdActorBase_Stop");
static_assert(offsetof(EndCrowdActorBase_Stop, BlendTime) == 0x000000, "Member 'EndCrowdActorBase_Stop::BlendTime' has a wrong offset!");
static_assert(offsetof(EndCrowdActorBase_Stop, bUseFade) == 0x000004, "Member 'EndCrowdActorBase_Stop::bUseFade' has a wrong offset!");

// Function EndGame.EndChocoboStableMenu.OnBodyBoxEquipSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboStableMenu_OnBodyBoxEquipSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboStableMenu_OnBodyBoxEquipSetupItem) == 0x000008, "Wrong alignment on EndChocoboStableMenu_OnBodyBoxEquipSetupItem");
static_assert(sizeof(EndChocoboStableMenu_OnBodyBoxEquipSetupItem) == 0x000010, "Wrong size on EndChocoboStableMenu_OnBodyBoxEquipSetupItem");
static_assert(offsetof(EndChocoboStableMenu_OnBodyBoxEquipSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboStableMenu_OnBodyBoxEquipSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboStableMenu_OnBodyBoxEquipSetupItem, ItemIndex) == 0x000008, "Member 'EndChocoboStableMenu_OnBodyBoxEquipSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboStableMenu.OnChangePartsColor
// 0x000C (0x000C - 0x0000)
struct EndChocoboStableMenu_OnChangePartsColor final
{
public:
	EChocoboEquipPartsType                        EditType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 Color0;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color1;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChocoboStableMenu_OnChangePartsColor) == 0x000004, "Wrong alignment on EndChocoboStableMenu_OnChangePartsColor");
static_assert(sizeof(EndChocoboStableMenu_OnChangePartsColor) == 0x00000C, "Wrong size on EndChocoboStableMenu_OnChangePartsColor");
static_assert(offsetof(EndChocoboStableMenu_OnChangePartsColor, EditType) == 0x000000, "Member 'EndChocoboStableMenu_OnChangePartsColor::EditType' has a wrong offset!");
static_assert(offsetof(EndChocoboStableMenu_OnChangePartsColor, Color0) == 0x000004, "Member 'EndChocoboStableMenu_OnChangePartsColor::Color0' has a wrong offset!");
static_assert(offsetof(EndChocoboStableMenu_OnChangePartsColor, Color1) == 0x000008, "Member 'EndChocoboStableMenu_OnChangePartsColor::Color1' has a wrong offset!");

// Function EndGame.EndChocoboStableMenu.OnFootBoxEquipSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboStableMenu_OnFootBoxEquipSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboStableMenu_OnFootBoxEquipSetupItem) == 0x000008, "Wrong alignment on EndChocoboStableMenu_OnFootBoxEquipSetupItem");
static_assert(sizeof(EndChocoboStableMenu_OnFootBoxEquipSetupItem) == 0x000010, "Wrong size on EndChocoboStableMenu_OnFootBoxEquipSetupItem");
static_assert(offsetof(EndChocoboStableMenu_OnFootBoxEquipSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboStableMenu_OnFootBoxEquipSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboStableMenu_OnFootBoxEquipSetupItem, ItemIndex) == 0x000008, "Member 'EndChocoboStableMenu_OnFootBoxEquipSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboStableMenu.OnHeadBoxEquipSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboStableMenu_OnHeadBoxEquipSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboStableMenu_OnHeadBoxEquipSetupItem) == 0x000008, "Wrong alignment on EndChocoboStableMenu_OnHeadBoxEquipSetupItem");
static_assert(sizeof(EndChocoboStableMenu_OnHeadBoxEquipSetupItem) == 0x000010, "Wrong size on EndChocoboStableMenu_OnHeadBoxEquipSetupItem");
static_assert(offsetof(EndChocoboStableMenu_OnHeadBoxEquipSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboStableMenu_OnHeadBoxEquipSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboStableMenu_OnHeadBoxEquipSetupItem, ItemIndex) == 0x000008, "Member 'EndChocoboStableMenu_OnHeadBoxEquipSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboStableMenu.OnSkillListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboStableMenu_OnSkillListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboStableMenu_OnSkillListSetupItem) == 0x000008, "Wrong alignment on EndChocoboStableMenu_OnSkillListSetupItem");
static_assert(sizeof(EndChocoboStableMenu_OnSkillListSetupItem) == 0x000010, "Wrong size on EndChocoboStableMenu_OnSkillListSetupItem");
static_assert(offsetof(EndChocoboStableMenu_OnSkillListSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboStableMenu_OnSkillListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboStableMenu_OnSkillListSetupItem, ItemIndex) == 0x000008, "Member 'EndChocoboStableMenu_OnSkillListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboStableMenu.OnTabMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndChocoboStableMenu_OnTabMenuMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChocoboStableMenu_OnTabMenuMeasureItem) == 0x000004, "Wrong alignment on EndChocoboStableMenu_OnTabMenuMeasureItem");
static_assert(sizeof(EndChocoboStableMenu_OnTabMenuMeasureItem) == 0x00000C, "Wrong size on EndChocoboStableMenu_OnTabMenuMeasureItem");
static_assert(offsetof(EndChocoboStableMenu_OnTabMenuMeasureItem, ItemIndex) == 0x000000, "Member 'EndChocoboStableMenu_OnTabMenuMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndChocoboStableMenu_OnTabMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndChocoboStableMenu_OnTabMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndChocoboStableMenu.OnTabMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboStableMenu_OnTabMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboStableMenu_OnTabMenuSetupItem) == 0x000008, "Wrong alignment on EndChocoboStableMenu_OnTabMenuSetupItem");
static_assert(sizeof(EndChocoboStableMenu_OnTabMenuSetupItem) == 0x000010, "Wrong size on EndChocoboStableMenu_OnTabMenuSetupItem");
static_assert(offsetof(EndChocoboStableMenu_OnTabMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboStableMenu_OnTabMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboStableMenu_OnTabMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndChocoboStableMenu_OnTabMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndAreaReportMenu.OnAreaReportListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndAreaReportMenu_OnAreaReportListSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAreaReportMenu_OnAreaReportListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndAreaReportMenu_OnAreaReportListSelectedIndexChanged");
static_assert(sizeof(EndAreaReportMenu_OnAreaReportListSelectedIndexChanged) == 0x000004, "Wrong size on EndAreaReportMenu_OnAreaReportListSelectedIndexChanged");
static_assert(offsetof(EndAreaReportMenu_OnAreaReportListSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndAreaReportMenu_OnAreaReportListSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndAreaReportMenu.OnAreaReportListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndAreaReportMenu_OnAreaReportListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAreaReportMenu_OnAreaReportListSetupItem) == 0x000008, "Wrong alignment on EndAreaReportMenu_OnAreaReportListSetupItem");
static_assert(sizeof(EndAreaReportMenu_OnAreaReportListSetupItem) == 0x000010, "Wrong size on EndAreaReportMenu_OnAreaReportListSetupItem");
static_assert(offsetof(EndAreaReportMenu_OnAreaReportListSetupItem, ItemWidget) == 0x000000, "Member 'EndAreaReportMenu_OnAreaReportListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndAreaReportMenu_OnAreaReportListSetupItem, ItemIndex) == 0x000008, "Member 'EndAreaReportMenu_OnAreaReportListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainSaveLoadTopMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainSaveLoadTopMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainSaveLoadTopMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainSaveLoadTopMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainSaveLoadTopMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainSaveLoadTopMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainSaveLoadTopMenu_OnLeftMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndMainSaveLoadTopMenu_OnLeftMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainSaveLoadTopMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainSaveLoadTopMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainSaveLoadTopMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainSaveLoadTopMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainSaveLoadTopMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainSaveLoadTopMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainSaveLoadTopMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainSaveLoadTopMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainSaveLoadTopMenu_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndMainSaveLoadTopMenu_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndAreaMapMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndAreaMapMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAreaMapMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndAreaMapMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndAreaMapMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndAreaMapMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndAreaMapMenu_OnLeftMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndAreaMapMenu_OnLeftMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndAreaMapMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndAreaMapMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAreaMapMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndAreaMapMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndAreaMapMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndAreaMapMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndAreaMapMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndAreaMapMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndAreaMapMenu_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndAreaMapMenu_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndAreaMapMenu.OnReportListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndAreaMapMenu_OnReportListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAreaMapMenu_OnReportListSetupItem) == 0x000008, "Wrong alignment on EndAreaMapMenu_OnReportListSetupItem");
static_assert(sizeof(EndAreaMapMenu_OnReportListSetupItem) == 0x000010, "Wrong size on EndAreaMapMenu_OnReportListSetupItem");
static_assert(offsetof(EndAreaMapMenu_OnReportListSetupItem, ItemWidget) == 0x000000, "Member 'EndAreaMapMenu_OnReportListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndAreaMapMenu_OnReportListSetupItem, ItemIndex) == 0x000008, "Member 'EndAreaMapMenu_OnReportListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndAreaMapMenu.OnStoryListBoxSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndAreaMapMenu_OnStoryListBoxSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAreaMapMenu_OnStoryListBoxSetupItem) == 0x000008, "Wrong alignment on EndAreaMapMenu_OnStoryListBoxSetupItem");
static_assert(sizeof(EndAreaMapMenu_OnStoryListBoxSetupItem) == 0x000010, "Wrong size on EndAreaMapMenu_OnStoryListBoxSetupItem");
static_assert(offsetof(EndAreaMapMenu_OnStoryListBoxSetupItem, ItemWidget) == 0x000000, "Member 'EndAreaMapMenu_OnStoryListBoxSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndAreaMapMenu_OnStoryListBoxSetupItem, ItemIndex) == 0x000008, "Member 'EndAreaMapMenu_OnStoryListBoxSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPAbsoluteToViewport
// 0x0058 (0x0058 - 0x0000)
struct EndMenuBPAPI_BPAbsoluteToViewport final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              AbsoluteCoordinate;                                // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPAbsoluteToViewport) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPAbsoluteToViewport");
static_assert(sizeof(EndMenuBPAPI_BPAbsoluteToViewport) == 0x000058, "Wrong size on EndMenuBPAPI_BPAbsoluteToViewport");
static_assert(offsetof(EndMenuBPAPI_BPAbsoluteToViewport, World) == 0x000000, "Member 'EndMenuBPAPI_BPAbsoluteToViewport::World' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPAbsoluteToViewport, Geometry) == 0x000008, "Member 'EndMenuBPAPI_BPAbsoluteToViewport::Geometry' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPAbsoluteToViewport, AbsoluteCoordinate) == 0x000040, "Member 'EndMenuBPAPI_BPAbsoluteToViewport::AbsoluteCoordinate' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPAbsoluteToViewport, ScreenPosition) == 0x000048, "Member 'EndMenuBPAPI_BPAbsoluteToViewport::ScreenPosition' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPAbsoluteToViewport, ViewportPosition) == 0x000050, "Member 'EndMenuBPAPI_BPAbsoluteToViewport::ViewportPosition' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetAllChapters
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPGetAllChapters final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetAllChapters) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPGetAllChapters");
static_assert(sizeof(EndMenuBPAPI_BPGetAllChapters) == 0x000010, "Wrong size on EndMenuBPAPI_BPGetAllChapters");
static_assert(offsetof(EndMenuBPAPI_BPGetAllChapters, ReturnValue) == 0x000000, "Member 'EndMenuBPAPI_BPGetAllChapters::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetCurrentChapter
// 0x000C (0x000C - 0x0000)
struct EndMenuBPAPI_BPGetCurrentChapter final
{
public:
	class FName                                   ChapterID;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetCurrentChapter) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetCurrentChapter");
static_assert(sizeof(EndMenuBPAPI_BPGetCurrentChapter) == 0x00000C, "Wrong size on EndMenuBPAPI_BPGetCurrentChapter");
static_assert(offsetof(EndMenuBPAPI_BPGetCurrentChapter, ChapterID) == 0x000000, "Member 'EndMenuBPAPI_BPGetCurrentChapter::ChapterID' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetCurrentChapter, ReturnValue) == 0x000008, "Member 'EndMenuBPAPI_BPGetCurrentChapter::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetCurrentEquipment
// 0x0028 (0x0028 - 0x0000)
struct EndMenuBPAPI_BPGetCurrentEquipment final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentCategoryMain                        EquipType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndDataObjectEquipmentAccessor        ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetCurrentEquipment) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPGetCurrentEquipment");
static_assert(sizeof(EndMenuBPAPI_BPGetCurrentEquipment) == 0x000028, "Wrong size on EndMenuBPAPI_BPGetCurrentEquipment");
static_assert(offsetof(EndMenuBPAPI_BPGetCurrentEquipment, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetCurrentEquipment::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetCurrentEquipment, EquipType) == 0x000001, "Member 'EndMenuBPAPI_BPGetCurrentEquipment::EquipType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetCurrentEquipment, ReturnValue) == 0x000008, "Member 'EndMenuBPAPI_BPGetCurrentEquipment::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetFinalPower
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPGetFinalPower final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PowerValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleDamageSourcePowerType               PowerType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetFinalPower) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetFinalPower");
static_assert(sizeof(EndMenuBPAPI_BPGetFinalPower) == 0x000010, "Wrong size on EndMenuBPAPI_BPGetFinalPower");
static_assert(offsetof(EndMenuBPAPI_BPGetFinalPower, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetFinalPower::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetFinalPower, PowerValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetFinalPower::PowerValue' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetFinalPower, PowerType) == 0x000008, "Member 'EndMenuBPAPI_BPGetFinalPower::PowerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetFinalPower, ReturnValue) == 0x00000C, "Member 'EndMenuBPAPI_BPGetFinalPower::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetFirstName
// 0x0018 (0x0018 - 0x0000)
struct EndMenuBPAPI_BPGetFirstName final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetFirstName) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPGetFirstName");
static_assert(sizeof(EndMenuBPAPI_BPGetFirstName) == 0x000018, "Wrong size on EndMenuBPAPI_BPGetFirstName");
static_assert(offsetof(EndMenuBPAPI_BPGetFirstName, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetFirstName::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetFirstName, ReturnValue) == 0x000008, "Member 'EndMenuBPAPI_BPGetFirstName::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetLastName
// 0x0018 (0x0018 - 0x0000)
struct EndMenuBPAPI_BPGetLastName final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetLastName) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPGetLastName");
static_assert(sizeof(EndMenuBPAPI_BPGetLastName) == 0x000018, "Wrong size on EndMenuBPAPI_BPGetLastName");
static_assert(offsetof(EndMenuBPAPI_BPGetLastName, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetLastName::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetLastName, ReturnValue) == 0x000008, "Member 'EndMenuBPAPI_BPGetLastName::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetMemberName
// 0x000C (0x000C - 0x0000)
struct EndMenuBPAPI_BPGetMemberName final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetMemberName) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetMemberName");
static_assert(sizeof(EndMenuBPAPI_BPGetMemberName) == 0x00000C, "Wrong size on EndMenuBPAPI_BPGetMemberName");
static_assert(offsetof(EndMenuBPAPI_BPGetMemberName, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetMemberName::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetMemberName, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetMemberName::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerDexterity
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerDexterity final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerDexterity) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerDexterity");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerDexterity) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerDexterity");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerDexterity, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerDexterity::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerDexterity, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerDexterity::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerExperience
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerExperience final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerExperience) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerExperience");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerExperience) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerExperience");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperience, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerExperience::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperience, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerExperience::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerExperienceBase
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerExperienceBase final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerExperienceBase) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerExperienceBase");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerExperienceBase) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerExperienceBase");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperienceBase, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerExperienceBase::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperienceBase, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerExperienceBase::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerExperienceNext
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerExperienceNext final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerExperienceNext) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerExperienceNext");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerExperienceNext) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerExperienceNext");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperienceNext, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerExperienceNext::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperienceNext, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerExperienceNext::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerHP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerHP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerHP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerHP");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerHP) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerHP");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerHP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerHP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerHP, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerHP::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerHPMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerHPMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerHPMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerHPMax");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerHPMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerHPMax");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerHPMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerHPMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerHPMax, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerHPMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLevel
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLevel final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLevel) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLevel");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLevel) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLevel");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLevel, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLevel::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLevel, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLimit
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLimit final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLimit) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLimit");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLimit) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLimit");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimit, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLimit::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimit, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLimit::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLimitLevel
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLimitLevel final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLimitLevel) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLimitLevel");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLimitLevel) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLimitLevel");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitLevel, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLimitLevel::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitLevel, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLimitLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLimitLevelMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLimitLevelMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLimitLevelMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLimitLevelMax");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLimitLevelMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLimitLevelMax");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitLevelMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLimitLevelMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitLevelMax, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLimitLevelMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLimitMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLimitMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLimitMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLimitMax");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLimitMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLimitMax");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLimitMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitMax, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLimitMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLuck
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLuck final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLuck) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLuck");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLuck) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLuck");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLuck, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLuck::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLuck, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLuck::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerMagic
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerMagic final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerMagic) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerMagic");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerMagic) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerMagic");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagic, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerMagic::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagic, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerMagic::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerMagicAttack
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerMagicAttack final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerMagicAttack) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerMagicAttack");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerMagicAttack) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerMagicAttack");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagicAttack, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerMagicAttack::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagicAttack, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerMagicAttack::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerMagicDefense
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerMagicDefense final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerMagicDefense) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerMagicDefense");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerMagicDefense) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerMagicDefense");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagicDefense, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerMagicDefense::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagicDefense, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerMagicDefense::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerMaxMP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerMaxMP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerMaxMP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerMaxMP");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerMaxMP) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerMaxMP");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMaxMP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerMaxMP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMaxMP, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerMaxMP::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerMP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerMP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerMP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerMP");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerMP) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerMP");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerMP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMP, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerMP::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerPhysicsAttack
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerPhysicsAttack final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerPhysicsAttack) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerPhysicsAttack");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerPhysicsAttack) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerPhysicsAttack");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerPhysicsAttack, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerPhysicsAttack::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerPhysicsAttack, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerPhysicsAttack::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerPhysicsDefense
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerPhysicsDefense final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerPhysicsDefense) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerPhysicsDefense");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerPhysicsDefense) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerPhysicsDefense");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerPhysicsDefense, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerPhysicsDefense::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerPhysicsDefense, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerPhysicsDefense::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerSpirit
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerSpirit final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerSpirit) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerSpirit");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerSpirit) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerSpirit");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerSpirit, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerSpirit::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerSpirit, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerSpirit::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerStatus
// 0x003C (0x003C - 0x0000)
struct EndMenuBPAPI_BPGetPlayerStatus final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndPlayerStatus                       ReturnValue;                                       // 0x0004(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerStatus) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerStatus");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerStatus) == 0x00003C, "Wrong size on EndMenuBPAPI_BPGetPlayerStatus");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatus, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerStatus::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatus, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerStatusWithEquipment
// 0x0048 (0x0048 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerStatusWithEquipment final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentCategoryMain                        EquipType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EquipID;                                           // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipmentIndexToEquip;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndPlayerStatus                       ReturnValue;                                       // 0x0010(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerStatusWithEquipment");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment) == 0x000048, "Wrong size on EndMenuBPAPI_BPGetPlayerStatusWithEquipment");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithEquipment::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment, EquipType) == 0x000001, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithEquipment::EquipType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment, EquipID) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithEquipment::EquipID' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment, EquipmentIndexToEquip) == 0x00000C, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithEquipment::EquipmentIndexToEquip' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment, ReturnValue) == 0x000010, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithEquipment::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerStatusWithMateria
// 0x004C (0x004C - 0x0000)
struct EndMenuBPAPI_BPGetPlayerStatusWithMateria final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OrigMateriaIndex;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetMateriaIndex;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentCategoryMain                        materiaEquipType;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndPlayerStatus                       ReturnValue;                                       // 0x0014(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerStatusWithMateria) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerStatusWithMateria");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerStatusWithMateria) == 0x00004C, "Wrong size on EndMenuBPAPI_BPGetPlayerStatusWithMateria");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, OrigMateriaIndex) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::OrigMateriaIndex' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, TargetMateriaIndex) == 0x000008, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::TargetMateriaIndex' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, SlotIndex) == 0x00000C, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, materiaEquipType) == 0x000010, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::materiaEquipType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, ReturnValue) == 0x000014, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerStrength
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerStrength final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerStrength) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerStrength");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerStrength) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerStrength");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStrength, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerStrength::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStrength, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerStrength::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerVitality
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerVitality final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerVitality) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerVitality");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerVitality) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerVitality");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerVitality, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerVitality::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerVitality, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerVitality::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPIsCharacterDead
// 0x0002 (0x0002 - 0x0000)
struct EndMenuBPAPI_BPIsCharacterDead final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPIsCharacterDead) == 0x000001, "Wrong alignment on EndMenuBPAPI_BPIsCharacterDead");
static_assert(sizeof(EndMenuBPAPI_BPIsCharacterDead) == 0x000002, "Wrong size on EndMenuBPAPI_BPIsCharacterDead");
static_assert(offsetof(EndMenuBPAPI_BPIsCharacterDead, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPIsCharacterDead::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPIsCharacterDead, ReturnValue) == 0x000001, "Member 'EndMenuBPAPI_BPIsCharacterDead::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPLocalToViewport
// 0x0058 (0x0058 - 0x0000)
struct EndMenuBPAPI_BPLocalToViewport final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              LocalCoordinate;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPLocalToViewport) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPLocalToViewport");
static_assert(sizeof(EndMenuBPAPI_BPLocalToViewport) == 0x000058, "Wrong size on EndMenuBPAPI_BPLocalToViewport");
static_assert(offsetof(EndMenuBPAPI_BPLocalToViewport, World) == 0x000000, "Member 'EndMenuBPAPI_BPLocalToViewport::World' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPLocalToViewport, Geometry) == 0x000008, "Member 'EndMenuBPAPI_BPLocalToViewport::Geometry' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPLocalToViewport, LocalCoordinate) == 0x000040, "Member 'EndMenuBPAPI_BPLocalToViewport::LocalCoordinate' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPLocalToViewport, ScreenPosition) == 0x000048, "Member 'EndMenuBPAPI_BPLocalToViewport::ScreenPosition' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPLocalToViewport, ViewportPosition) == 0x000050, "Member 'EndMenuBPAPI_BPLocalToViewport::ViewportPosition' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerExperience
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerExperience final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Exp;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerExperience) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerExperience");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerExperience) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerExperience");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerExperience, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerExperience::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerExperience, Exp) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerExperience::Exp' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerHP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerHP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerHP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerHP");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerHP) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerHP");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerHP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerHP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerHP, HP) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerHP::HP' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerHPMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerHPMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerHPMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerHPMax");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerHPMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerHPMax");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerHPMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerHPMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerHPMax, HP) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerHPMax::HP' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerLevel
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerLevel final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerLevel) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerLevel");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerLevel) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerLevel");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLevel, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerLevel::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLevel, Level) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerLevel::Level' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerLimit
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerLimit final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Limit;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerLimit) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerLimit");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerLimit) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerLimit");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimit, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerLimit::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimit, Limit) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerLimit::Limit' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerLimitLevel
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerLimitLevel final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LimitLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerLimitLevel) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerLimitLevel");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerLimitLevel) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerLimitLevel");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitLevel, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerLimitLevel::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitLevel, LimitLevel) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerLimitLevel::LimitLevel' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerLimitLevelMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerLimitLevelMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LimitLevelMax;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerLimitLevelMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerLimitLevelMax");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerLimitLevelMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerLimitLevelMax");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitLevelMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerLimitLevelMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitLevelMax, LimitLevelMax) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerLimitLevelMax::LimitLevelMax' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerLimitMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerLimitMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LimitMax;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerLimitMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerLimitMax");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerLimitMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerLimitMax");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerLimitMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitMax, LimitMax) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerLimitMax::LimitMax' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerMaxMP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerMaxMP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxHp;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerMaxMP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerMaxMP");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerMaxMP) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerMaxMP");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerMaxMP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerMaxMP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerMaxMP, MaxHp) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerMaxMP::MaxHp' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerMP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerMP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerMP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerMP");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerMP) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerMP");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerMP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerMP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerMP, MP) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerMP::MP' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetupBillboard
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPSetupBillboard final
{
public:
	class UUserWidget*                            TopStatus;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enableReleaseSlate;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuBPAPI_BPSetupBillboard) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPSetupBillboard");
static_assert(sizeof(EndMenuBPAPI_BPSetupBillboard) == 0x000010, "Wrong size on EndMenuBPAPI_BPSetupBillboard");
static_assert(offsetof(EndMenuBPAPI_BPSetupBillboard, TopStatus) == 0x000000, "Member 'EndMenuBPAPI_BPSetupBillboard::TopStatus' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupBillboard, PlayerType) == 0x000008, "Member 'EndMenuBPAPI_BPSetupBillboard::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupBillboard, enableReleaseSlate) == 0x000009, "Member 'EndMenuBPAPI_BPSetupBillboard::enableReleaseSlate' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetupLeaderLabel
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPSetupLeaderLabel final
{
public:
	class UUserWidget*                            TopStatus;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   LeaderType;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuBPAPI_BPSetupLeaderLabel) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPSetupLeaderLabel");
static_assert(sizeof(EndMenuBPAPI_BPSetupLeaderLabel) == 0x000010, "Wrong size on EndMenuBPAPI_BPSetupLeaderLabel");
static_assert(offsetof(EndMenuBPAPI_BPSetupLeaderLabel, TopStatus) == 0x000000, "Member 'EndMenuBPAPI_BPSetupLeaderLabel::TopStatus' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupLeaderLabel, PlayerType) == 0x000008, "Member 'EndMenuBPAPI_BPSetupLeaderLabel::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupLeaderLabel, LeaderType) == 0x000009, "Member 'EndMenuBPAPI_BPSetupLeaderLabel::LeaderType' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetupStatus
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPSetupStatus final
{
public:
	class UUserWidget*                            TopStatus;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuBPAPI_BPSetupStatus) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPSetupStatus");
static_assert(sizeof(EndMenuBPAPI_BPSetupStatus) == 0x000010, "Wrong size on EndMenuBPAPI_BPSetupStatus");
static_assert(offsetof(EndMenuBPAPI_BPSetupStatus, TopStatus) == 0x000000, "Member 'EndMenuBPAPI_BPSetupStatus::TopStatus' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupStatus, PlayerType) == 0x000008, "Member 'EndMenuBPAPI_BPSetupStatus::PlayerType' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetupStatusPanel
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPSetupStatusPanel final
{
public:
	class UUserWidget*                            TopStatus;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   LeaderType;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuBPAPI_BPSetupStatusPanel) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPSetupStatusPanel");
static_assert(sizeof(EndMenuBPAPI_BPSetupStatusPanel) == 0x000010, "Wrong size on EndMenuBPAPI_BPSetupStatusPanel");
static_assert(offsetof(EndMenuBPAPI_BPSetupStatusPanel, TopStatus) == 0x000000, "Member 'EndMenuBPAPI_BPSetupStatusPanel::TopStatus' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupStatusPanel, PlayerType) == 0x000008, "Member 'EndMenuBPAPI_BPSetupStatusPanel::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupStatusPanel, LeaderType) == 0x000009, "Member 'EndMenuBPAPI_BPSetupStatusPanel::LeaderType' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPViewportToAbsolute
// 0x0050 (0x0050 - 0x0000)
struct EndMenuBPAPI_BPViewportToAbsolute final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AbsoluteCoordinate;                                // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPViewportToAbsolute) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPViewportToAbsolute");
static_assert(sizeof(EndMenuBPAPI_BPViewportToAbsolute) == 0x000050, "Wrong size on EndMenuBPAPI_BPViewportToAbsolute");
static_assert(offsetof(EndMenuBPAPI_BPViewportToAbsolute, World) == 0x000000, "Member 'EndMenuBPAPI_BPViewportToAbsolute::World' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToAbsolute, Geometry) == 0x000008, "Member 'EndMenuBPAPI_BPViewportToAbsolute::Geometry' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToAbsolute, ViewportPosition) == 0x000040, "Member 'EndMenuBPAPI_BPViewportToAbsolute::ViewportPosition' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToAbsolute, AbsoluteCoordinate) == 0x000048, "Member 'EndMenuBPAPI_BPViewportToAbsolute::AbsoluteCoordinate' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPViewportToLocal
// 0x0050 (0x0050 - 0x0000)
struct EndMenuBPAPI_BPViewportToLocal final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LocalCoordinate;                                   // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPViewportToLocal) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPViewportToLocal");
static_assert(sizeof(EndMenuBPAPI_BPViewportToLocal) == 0x000050, "Wrong size on EndMenuBPAPI_BPViewportToLocal");
static_assert(offsetof(EndMenuBPAPI_BPViewportToLocal, World) == 0x000000, "Member 'EndMenuBPAPI_BPViewportToLocal::World' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToLocal, Geometry) == 0x000008, "Member 'EndMenuBPAPI_BPViewportToLocal::Geometry' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToLocal, ViewportPosition) == 0x000040, "Member 'EndMenuBPAPI_BPViewportToLocal::ViewportPosition' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToLocal, LocalCoordinate) == 0x000048, "Member 'EndMenuBPAPI_BPViewportToLocal::LocalCoordinate' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.ResetLinkedMateria
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_ResetLinkedMateria final
{
public:
	TArray<class UEndMainMateriaListBoxWindow*>   MateriaLists;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_ResetLinkedMateria) == 0x000008, "Wrong alignment on EndMenuBPAPI_ResetLinkedMateria");
static_assert(sizeof(EndMenuBPAPI_ResetLinkedMateria) == 0x000010, "Wrong size on EndMenuBPAPI_ResetLinkedMateria");
static_assert(offsetof(EndMenuBPAPI_ResetLinkedMateria, MateriaLists) == 0x000000, "Member 'EndMenuBPAPI_ResetLinkedMateria::MateriaLists' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.SetIgnoreListRepeatKey
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_SetIgnoreListRepeatKey final
{
public:
	const class UEndListBox*                      Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ButtonName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_SetIgnoreListRepeatKey) == 0x000008, "Wrong alignment on EndMenuBPAPI_SetIgnoreListRepeatKey");
static_assert(sizeof(EndMenuBPAPI_SetIgnoreListRepeatKey) == 0x000010, "Wrong size on EndMenuBPAPI_SetIgnoreListRepeatKey");
static_assert(offsetof(EndMenuBPAPI_SetIgnoreListRepeatKey, Widget) == 0x000000, "Member 'EndMenuBPAPI_SetIgnoreListRepeatKey::Widget' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_SetIgnoreListRepeatKey, ButtonName) == 0x000008, "Member 'EndMenuBPAPI_SetIgnoreListRepeatKey::ButtonName' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.SetIgnoreRepeatKey
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_SetIgnoreRepeatKey final
{
public:
	const class UEndVirtualScrollBox*             Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ButtonName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_SetIgnoreRepeatKey) == 0x000008, "Wrong alignment on EndMenuBPAPI_SetIgnoreRepeatKey");
static_assert(sizeof(EndMenuBPAPI_SetIgnoreRepeatKey) == 0x000010, "Wrong size on EndMenuBPAPI_SetIgnoreRepeatKey");
static_assert(offsetof(EndMenuBPAPI_SetIgnoreRepeatKey, Widget) == 0x000000, "Member 'EndMenuBPAPI_SetIgnoreRepeatKey::Widget' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_SetIgnoreRepeatKey, ButtonName) == 0x000008, "Member 'EndMenuBPAPI_SetIgnoreRepeatKey::ButtonName' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.UpdateLinkedMateria
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_UpdateLinkedMateria final
{
public:
	TArray<class UEndMainMateriaListBoxWindow*>   MateriaLists;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_UpdateLinkedMateria) == 0x000008, "Wrong alignment on EndMenuBPAPI_UpdateLinkedMateria");
static_assert(sizeof(EndMenuBPAPI_UpdateLinkedMateria) == 0x000010, "Wrong size on EndMenuBPAPI_UpdateLinkedMateria");
static_assert(offsetof(EndMenuBPAPI_UpdateLinkedMateria, MateriaLists) == 0x000000, "Member 'EndMenuBPAPI_UpdateLinkedMateria::MateriaLists' has a wrong offset!");

// Function EndGame.EndBattleAISU0001BaseController.SetMoogleBombHidden
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISU0001BaseController_SetMoogleBombHidden final
{
public:
	bool                                          IsHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0001BaseController_SetMoogleBombHidden) == 0x000001, "Wrong alignment on EndBattleAISU0001BaseController_SetMoogleBombHidden");
static_assert(sizeof(EndBattleAISU0001BaseController_SetMoogleBombHidden) == 0x000001, "Wrong size on EndBattleAISU0001BaseController_SetMoogleBombHidden");
static_assert(offsetof(EndBattleAISU0001BaseController_SetMoogleBombHidden, IsHidden) == 0x000000, "Member 'EndBattleAISU0001BaseController_SetMoogleBombHidden::IsHidden' has a wrong offset!");

// Function EndGame.EndBattleAISU1000BaseController.GetLightningStrikeTargetLocation
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation) == 0x000004, "Wrong alignment on EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation");
static_assert(sizeof(EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation) == 0x000010, "Wrong size on EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation");
static_assert(offsetof(EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation, Index_0) == 0x000000, "Member 'EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation::Index_0' has a wrong offset!");
static_assert(offsetof(EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation, ReturnValue) == 0x000004, "Member 'EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISU1000BaseController.SetHidePowerUpFX
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAISU1000BaseController_SetHidePowerUpFX final
{
public:
	bool                                          bHide;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediately;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000BaseController_SetHidePowerUpFX) == 0x000001, "Wrong alignment on EndBattleAISU1000BaseController_SetHidePowerUpFX");
static_assert(sizeof(EndBattleAISU1000BaseController_SetHidePowerUpFX) == 0x000002, "Wrong size on EndBattleAISU1000BaseController_SetHidePowerUpFX");
static_assert(offsetof(EndBattleAISU1000BaseController_SetHidePowerUpFX, bHide) == 0x000000, "Member 'EndBattleAISU1000BaseController_SetHidePowerUpFX::bHide' has a wrong offset!");
static_assert(offsetof(EndBattleAISU1000BaseController_SetHidePowerUpFX, bImmediately) == 0x000001, "Member 'EndBattleAISU1000BaseController_SetHidePowerUpFX::bImmediately' has a wrong offset!");

// Function EndGame.EndBattleAISU2020BaseController.GetIndexOfByAbilityId
// 0x000C (0x000C - 0x0000)
struct EndBattleAISU2020BaseController_GetIndexOfByAbilityId final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU2020BaseController_GetIndexOfByAbilityId) == 0x000004, "Wrong alignment on EndBattleAISU2020BaseController_GetIndexOfByAbilityId");
static_assert(sizeof(EndBattleAISU2020BaseController_GetIndexOfByAbilityId) == 0x00000C, "Wrong size on EndBattleAISU2020BaseController_GetIndexOfByAbilityId");
static_assert(offsetof(EndBattleAISU2020BaseController_GetIndexOfByAbilityId, AbilityId) == 0x000000, "Member 'EndBattleAISU2020BaseController_GetIndexOfByAbilityId::AbilityId' has a wrong offset!");
static_assert(offsetof(EndBattleAISU2020BaseController_GetIndexOfByAbilityId, ReturnValue) == 0x000008, "Member 'EndBattleAISU2020BaseController_GetIndexOfByAbilityId::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISU2040BaseController.OnChangeLevel
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAISU2040BaseController_OnChangeLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU2040BaseController_OnChangeLevel) == 0x000004, "Wrong alignment on EndBattleAISU2040BaseController_OnChangeLevel");
static_assert(sizeof(EndBattleAISU2040BaseController_OnChangeLevel) == 0x000004, "Wrong size on EndBattleAISU2040BaseController_OnChangeLevel");
static_assert(offsetof(EndBattleAISU2040BaseController_OnChangeLevel, Level) == 0x000000, "Member 'EndBattleAISU2040BaseController_OnChangeLevel::Level' has a wrong offset!");

// Function EndGame.EndBattleAISU2050BaseController.ChangeBattleMode
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAISU2050BaseController_ChangeBattleMode final
{
public:
	EEndBattleNeoBahaBattleMode                   nextBattleMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          swapAbility;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU2050BaseController_ChangeBattleMode) == 0x000001, "Wrong alignment on EndBattleAISU2050BaseController_ChangeBattleMode");
static_assert(sizeof(EndBattleAISU2050BaseController_ChangeBattleMode) == 0x000003, "Wrong size on EndBattleAISU2050BaseController_ChangeBattleMode");
static_assert(offsetof(EndBattleAISU2050BaseController_ChangeBattleMode, nextBattleMode) == 0x000000, "Member 'EndBattleAISU2050BaseController_ChangeBattleMode::nextBattleMode' has a wrong offset!");
static_assert(offsetof(EndBattleAISU2050BaseController_ChangeBattleMode, swapAbility) == 0x000001, "Member 'EndBattleAISU2050BaseController_ChangeBattleMode::swapAbility' has a wrong offset!");
static_assert(offsetof(EndBattleAISU2050BaseController_ChangeBattleMode, ReturnValue) == 0x000002, "Member 'EndBattleAISU2050BaseController_ChangeBattleMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISU2050BaseController.GetCurrentBattleMode
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISU2050BaseController_GetCurrentBattleMode final
{
public:
	EEndBattleNeoBahaBattleMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU2050BaseController_GetCurrentBattleMode) == 0x000001, "Wrong alignment on EndBattleAISU2050BaseController_GetCurrentBattleMode");
static_assert(sizeof(EndBattleAISU2050BaseController_GetCurrentBattleMode) == 0x000001, "Wrong size on EndBattleAISU2050BaseController_GetCurrentBattleMode");
static_assert(offsetof(EndBattleAISU2050BaseController_GetCurrentBattleMode, ReturnValue) == 0x000000, "Member 'EndBattleAISU2050BaseController_GetCurrentBattleMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISU2050BaseController.SetBattleMode
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISU2050BaseController_SetBattleMode final
{
public:
	EEndBattleNeoBahaBattleMode                   BattleMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU2050BaseController_SetBattleMode) == 0x000001, "Wrong alignment on EndBattleAISU2050BaseController_SetBattleMode");
static_assert(sizeof(EndBattleAISU2050BaseController_SetBattleMode) == 0x000001, "Wrong size on EndBattleAISU2050BaseController_SetBattleMode");
static_assert(offsetof(EndBattleAISU2050BaseController_SetBattleMode, BattleMode) == 0x000000, "Member 'EndBattleAISU2050BaseController_SetBattleMode::BattleMode' has a wrong offset!");

// Function EndGame.EndBattleAPI.ActiveRagdoll
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ActiveRagdoll final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediately;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ActiveRagdoll) == 0x000008, "Wrong alignment on EndBattleAPI_ActiveRagdoll");
static_assert(sizeof(EndBattleAPI_ActiveRagdoll) == 0x000010, "Wrong size on EndBattleAPI_ActiveRagdoll");
static_assert(offsetof(EndBattleAPI_ActiveRagdoll, Character) == 0x000000, "Member 'EndBattleAPI_ActiveRagdoll::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ActiveRagdoll, bImmediately) == 0x000008, "Member 'EndBattleAPI_ActiveRagdoll::bImmediately' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddAttachEffect
// 0x0078 (0x0078 - 0x0000)
struct EndBattleAPI_AddAttachEffect final
{
public:
	class AEndCharacter*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndCharacterAttachEffectArguments     args;                                              // 0x0008(0x0070)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddAttachEffect) == 0x000008, "Wrong alignment on EndBattleAPI_AddAttachEffect");
static_assert(sizeof(EndBattleAPI_AddAttachEffect) == 0x000078, "Wrong size on EndBattleAPI_AddAttachEffect");
static_assert(offsetof(EndBattleAPI_AddAttachEffect, Chara) == 0x000000, "Member 'EndBattleAPI_AddAttachEffect::Chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddAttachEffect, args) == 0x000008, "Member 'EndBattleAPI_AddAttachEffect::args' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddBattleCameraRestrictedPlayOwners
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_AddBattleCameraRestrictedPlayOwners final
{
public:
	TArray<class AEndCharacterBase*>              restrictedPlayOwners;                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddBattleCameraRestrictedPlayOwners) == 0x000008, "Wrong alignment on EndBattleAPI_AddBattleCameraRestrictedPlayOwners");
static_assert(sizeof(EndBattleAPI_AddBattleCameraRestrictedPlayOwners) == 0x000010, "Wrong size on EndBattleAPI_AddBattleCameraRestrictedPlayOwners");
static_assert(offsetof(EndBattleAPI_AddBattleCameraRestrictedPlayOwners, restrictedPlayOwners) == 0x000000, "Member 'EndBattleAPI_AddBattleCameraRestrictedPlayOwners::restrictedPlayOwners' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddBattleSceneCount
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_AddBattleSceneCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAddCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddBattleSceneCount) == 0x000004, "Wrong alignment on EndBattleAPI_AddBattleSceneCount");
static_assert(sizeof(EndBattleAPI_AddBattleSceneCount) == 0x000010, "Wrong size on EndBattleAPI_AddBattleSceneCount");
static_assert(offsetof(EndBattleAPI_AddBattleSceneCount, InName) == 0x000000, "Member 'EndBattleAPI_AddBattleSceneCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddBattleSceneCount, InAddCount) == 0x000008, "Member 'EndBattleAPI_AddBattleSceneCount::InAddCount' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddBattleSceneCount, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_AddBattleSceneCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddCombinationGauge
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_AddCombinationGauge final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_AddCombinationGauge) == 0x000008, "Wrong alignment on EndBattleAPI_AddCombinationGauge");
static_assert(sizeof(EndBattleAPI_AddCombinationGauge) == 0x000010, "Wrong size on EndBattleAPI_AddCombinationGauge");
static_assert(offsetof(EndBattleAPI_AddCombinationGauge, Character) == 0x000000, "Member 'EndBattleAPI_AddCombinationGauge::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddCombinationGauge, Value) == 0x000008, "Member 'EndBattleAPI_AddCombinationGauge::Value' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddDangerSource
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_AddDangerSource final
{
public:
	class AEndCharacter*                          Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndAIDangerInfo>               Infos;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bResolveWithDamageSource;                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_AddDangerSource) == 0x000008, "Wrong alignment on EndBattleAPI_AddDangerSource");
static_assert(sizeof(EndBattleAPI_AddDangerSource) == 0x000028, "Wrong size on EndBattleAPI_AddDangerSource");
static_assert(offsetof(EndBattleAPI_AddDangerSource, Instigator) == 0x000000, "Member 'EndBattleAPI_AddDangerSource::Instigator' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddDangerSource, Duration) == 0x000008, "Member 'EndBattleAPI_AddDangerSource::Duration' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddDangerSource, Infos) == 0x000010, "Member 'EndBattleAPI_AddDangerSource::Infos' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddDangerSource, bResolveWithDamageSource) == 0x000020, "Member 'EndBattleAPI_AddDangerSource::bResolveWithDamageSource' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddEnableTargetAbility
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_AddEnableTargetAbility final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddEnableTargetAbility) == 0x000008, "Wrong alignment on EndBattleAPI_AddEnableTargetAbility");
static_assert(sizeof(EndBattleAPI_AddEnableTargetAbility) == 0x000010, "Wrong size on EndBattleAPI_AddEnableTargetAbility");
static_assert(offsetof(EndBattleAPI_AddEnableTargetAbility, Character) == 0x000000, "Member 'EndBattleAPI_AddEnableTargetAbility::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddEnableTargetAbility, AbilityId) == 0x000008, "Member 'EndBattleAPI_AddEnableTargetAbility::AbilityId' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddIgnoreDamageSourceLookAtTraceActor
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_AddIgnoreDamageSourceLookAtTraceActor final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 IgnoreActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddIgnoreDamageSourceLookAtTraceActor) == 0x000008, "Wrong alignment on EndBattleAPI_AddIgnoreDamageSourceLookAtTraceActor");
static_assert(sizeof(EndBattleAPI_AddIgnoreDamageSourceLookAtTraceActor) == 0x000010, "Wrong size on EndBattleAPI_AddIgnoreDamageSourceLookAtTraceActor");
static_assert(offsetof(EndBattleAPI_AddIgnoreDamageSourceLookAtTraceActor, Character) == 0x000000, "Member 'EndBattleAPI_AddIgnoreDamageSourceLookAtTraceActor::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddIgnoreDamageSourceLookAtTraceActor, IgnoreActor) == 0x000008, "Member 'EndBattleAPI_AddIgnoreDamageSourceLookAtTraceActor::IgnoreActor' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddImpluse
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_AddImpluse final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddImpluse) == 0x000008, "Wrong alignment on EndBattleAPI_AddImpluse");
static_assert(sizeof(EndBattleAPI_AddImpluse) == 0x000018, "Wrong size on EndBattleAPI_AddImpluse");
static_assert(offsetof(EndBattleAPI_AddImpluse, Character) == 0x000000, "Member 'EndBattleAPI_AddImpluse::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddImpluse, Direction) == 0x000008, "Member 'EndBattleAPI_AddImpluse::Direction' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddImpluse, Magnitude) == 0x000014, "Member 'EndBattleAPI_AddImpluse::Magnitude' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddInvincibleThroughAbilityID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_AddInvincibleThroughAbilityID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddInvincibleThroughAbilityID) == 0x000008, "Wrong alignment on EndBattleAPI_AddInvincibleThroughAbilityID");
static_assert(sizeof(EndBattleAPI_AddInvincibleThroughAbilityID) == 0x000010, "Wrong size on EndBattleAPI_AddInvincibleThroughAbilityID");
static_assert(offsetof(EndBattleAPI_AddInvincibleThroughAbilityID, Character) == 0x000000, "Member 'EndBattleAPI_AddInvincibleThroughAbilityID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddInvincibleThroughAbilityID, AbilityId) == 0x000008, "Member 'EndBattleAPI_AddInvincibleThroughAbilityID::AbilityId' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddSpecialStateEffect
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_AddSpecialStateEffect final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   specialStateEffectID;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddSpecialStateEffect) == 0x000008, "Wrong alignment on EndBattleAPI_AddSpecialStateEffect");
static_assert(sizeof(EndBattleAPI_AddSpecialStateEffect) == 0x000010, "Wrong size on EndBattleAPI_AddSpecialStateEffect");
static_assert(offsetof(EndBattleAPI_AddSpecialStateEffect, Character) == 0x000000, "Member 'EndBattleAPI_AddSpecialStateEffect::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddSpecialStateEffect, specialStateEffectID) == 0x000008, "Member 'EndBattleAPI_AddSpecialStateEffect::specialStateEffectID' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddSpecialStateEffectWithBeamTarget
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_AddSpecialStateEffectWithBeamTarget final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   specialStateEffectID;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  beamTargetCharaList;                               // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLineEffect;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineEffectTangentLength;                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddSpecialStateEffectWithBeamTarget) == 0x000008, "Wrong alignment on EndBattleAPI_AddSpecialStateEffectWithBeamTarget");
static_assert(sizeof(EndBattleAPI_AddSpecialStateEffectWithBeamTarget) == 0x000028, "Wrong size on EndBattleAPI_AddSpecialStateEffectWithBeamTarget");
static_assert(offsetof(EndBattleAPI_AddSpecialStateEffectWithBeamTarget, Character) == 0x000000, "Member 'EndBattleAPI_AddSpecialStateEffectWithBeamTarget::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddSpecialStateEffectWithBeamTarget, specialStateEffectID) == 0x000008, "Member 'EndBattleAPI_AddSpecialStateEffectWithBeamTarget::specialStateEffectID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddSpecialStateEffectWithBeamTarget, beamTargetCharaList) == 0x000010, "Member 'EndBattleAPI_AddSpecialStateEffectWithBeamTarget::beamTargetCharaList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddSpecialStateEffectWithBeamTarget, bLineEffect) == 0x000020, "Member 'EndBattleAPI_AddSpecialStateEffectWithBeamTarget::bLineEffect' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddSpecialStateEffectWithBeamTarget, LineEffectTangentLength) == 0x000024, "Member 'EndBattleAPI_AddSpecialStateEffectWithBeamTarget::LineEffectTangentLength' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddSpecialStatusChangeID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_AddSpecialStatusChangeID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          causerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddSpecialStatusChangeID) == 0x000008, "Wrong alignment on EndBattleAPI_AddSpecialStatusChangeID");
static_assert(sizeof(EndBattleAPI_AddSpecialStatusChangeID) == 0x000018, "Wrong size on EndBattleAPI_AddSpecialStatusChangeID");
static_assert(offsetof(EndBattleAPI_AddSpecialStatusChangeID, Character) == 0x000000, "Member 'EndBattleAPI_AddSpecialStatusChangeID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddSpecialStatusChangeID, causerCharacter) == 0x000008, "Member 'EndBattleAPI_AddSpecialStatusChangeID::causerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddSpecialStatusChangeID, ID) == 0x000010, "Member 'EndBattleAPI_AddSpecialStatusChangeID::ID' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddStatusChangeID
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_AddStatusChangeID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   statusChangeID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleStatusChangeTimeType                timeType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignoreResist;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          causeCharacter;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lock;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_AddStatusChangeID) == 0x000008, "Wrong alignment on EndBattleAPI_AddStatusChangeID");
static_assert(sizeof(EndBattleAPI_AddStatusChangeID) == 0x000028, "Wrong size on EndBattleAPI_AddStatusChangeID");
static_assert(offsetof(EndBattleAPI_AddStatusChangeID, Character) == 0x000000, "Member 'EndBattleAPI_AddStatusChangeID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddStatusChangeID, statusChangeID) == 0x000008, "Member 'EndBattleAPI_AddStatusChangeID::statusChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddStatusChangeID, timeType) == 0x000010, "Member 'EndBattleAPI_AddStatusChangeID::timeType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddStatusChangeID, ignoreResist) == 0x000011, "Member 'EndBattleAPI_AddStatusChangeID::ignoreResist' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddStatusChangeID, causeCharacter) == 0x000018, "Member 'EndBattleAPI_AddStatusChangeID::causeCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddStatusChangeID, Lock) == 0x000020, "Member 'EndBattleAPI_AddStatusChangeID::Lock' has a wrong offset!");

// Function EndGame.EndBattleAPI.BeginBattleDirection
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_BeginBattleDirection final
{
public:
	bool                                          suspend;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_BeginBattleDirection) == 0x000001, "Wrong alignment on EndBattleAPI_BeginBattleDirection");
static_assert(sizeof(EndBattleAPI_BeginBattleDirection) == 0x000001, "Wrong size on EndBattleAPI_BeginBattleDirection");
static_assert(offsetof(EndBattleAPI_BeginBattleDirection, suspend) == 0x000000, "Member 'EndBattleAPI_BeginBattleDirection::suspend' has a wrong offset!");

// Function EndGame.EndBattleAPI.BeginBreak
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_BeginBreak final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   battleBreakID;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_BeginBreak) == 0x000008, "Wrong alignment on EndBattleAPI_BeginBreak");
static_assert(sizeof(EndBattleAPI_BeginBreak) == 0x000010, "Wrong size on EndBattleAPI_BeginBreak");
static_assert(offsetof(EndBattleAPI_BeginBreak, Character) == 0x000000, "Member 'EndBattleAPI_BeginBreak::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_BeginBreak, battleBreakID) == 0x000008, "Member 'EndBattleAPI_BeginBreak::battleBreakID' has a wrong offset!");

// Function EndGame.EndBattleAPI.BeginForceFieldMode
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_BeginForceFieldMode final
{
public:
	bool                                          actorModeBattle;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateBattleCamera;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_BeginForceFieldMode) == 0x000001, "Wrong alignment on EndBattleAPI_BeginForceFieldMode");
static_assert(sizeof(EndBattleAPI_BeginForceFieldMode) == 0x000002, "Wrong size on EndBattleAPI_BeginForceFieldMode");
static_assert(offsetof(EndBattleAPI_BeginForceFieldMode, actorModeBattle) == 0x000000, "Member 'EndBattleAPI_BeginForceFieldMode::actorModeBattle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_BeginForceFieldMode, bDeactivateBattleCamera) == 0x000001, "Member 'EndBattleAPI_BeginForceFieldMode::bDeactivateBattleCamera' has a wrong offset!");

// Function EndGame.EndBattleAPI.BreakParts
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_BreakParts final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   uniqueName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forceDisableBattleLog;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forceDisableDamageSource;                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_BreakParts) == 0x000008, "Wrong alignment on EndBattleAPI_BreakParts");
static_assert(sizeof(EndBattleAPI_BreakParts) == 0x000018, "Wrong size on EndBattleAPI_BreakParts");
static_assert(offsetof(EndBattleAPI_BreakParts, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_BreakParts::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_BreakParts, uniqueName) == 0x000008, "Member 'EndBattleAPI_BreakParts::uniqueName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_BreakParts, forceDisableBattleLog) == 0x000010, "Member 'EndBattleAPI_BreakParts::forceDisableBattleLog' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_BreakParts, forceDisableDamageSource) == 0x000011, "Member 'EndBattleAPI_BreakParts::forceDisableDamageSource' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_BreakParts, ReturnValue) == 0x000012, "Member 'EndBattleAPI_BreakParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.CalcAimTargetOffsetHeight
// 0x002C (0x002C - 0x0000)
struct EndBattleAPI_CalcAimTargetOffsetHeight final
{
public:
	struct FVector                                From;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugDrawTime;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_CalcAimTargetOffsetHeight) == 0x000004, "Wrong alignment on EndBattleAPI_CalcAimTargetOffsetHeight");
static_assert(sizeof(EndBattleAPI_CalcAimTargetOffsetHeight) == 0x00002C, "Wrong size on EndBattleAPI_CalcAimTargetOffsetHeight");
static_assert(offsetof(EndBattleAPI_CalcAimTargetOffsetHeight, From) == 0x000000, "Member 'EndBattleAPI_CalcAimTargetOffsetHeight::From' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CalcAimTargetOffsetHeight, To) == 0x00000C, "Member 'EndBattleAPI_CalcAimTargetOffsetHeight::To' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CalcAimTargetOffsetHeight, Velocity) == 0x000018, "Member 'EndBattleAPI_CalcAimTargetOffsetHeight::Velocity' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CalcAimTargetOffsetHeight, GravityScale) == 0x00001C, "Member 'EndBattleAPI_CalcAimTargetOffsetHeight::GravityScale' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CalcAimTargetOffsetHeight, bDebugDraw) == 0x000020, "Member 'EndBattleAPI_CalcAimTargetOffsetHeight::bDebugDraw' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CalcAimTargetOffsetHeight, DebugDrawTime) == 0x000024, "Member 'EndBattleAPI_CalcAimTargetOffsetHeight::DebugDrawTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CalcAimTargetOffsetHeight, ReturnValue) == 0x000028, "Member 'EndBattleAPI_CalcAimTargetOffsetHeight::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.CanSyncAction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_CanSyncAction final
{
public:
	class AEndCharacter*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_CanSyncAction) == 0x000008, "Wrong alignment on EndBattleAPI_CanSyncAction");
static_assert(sizeof(EndBattleAPI_CanSyncAction) == 0x000010, "Wrong size on EndBattleAPI_CanSyncAction");
static_assert(offsetof(EndBattleAPI_CanSyncAction, Chara) == 0x000000, "Member 'EndBattleAPI_CanSyncAction::Chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CanSyncAction, ReturnValue) == 0x000008, "Member 'EndBattleAPI_CanSyncAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.ChangeAppearance
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ChangeAppearance final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ChangeAppearance) == 0x000008, "Wrong alignment on EndBattleAPI_ChangeAppearance");
static_assert(sizeof(EndBattleAPI_ChangeAppearance) == 0x000010, "Wrong size on EndBattleAPI_ChangeAppearance");
static_assert(offsetof(EndBattleAPI_ChangeAppearance, Character) == 0x000000, "Member 'EndBattleAPI_ChangeAppearance::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ChangeAppearance, Index_0) == 0x000008, "Member 'EndBattleAPI_ChangeAppearance::Index_0' has a wrong offset!");

// Function EndGame.EndBattleAPI.ChangePartyMember
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_ChangePartyMember final
{
public:
	TArray<struct FEndMenuJoin>                   changeParameters;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          showUI;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ChangePartyMember) == 0x000008, "Wrong alignment on EndBattleAPI_ChangePartyMember");
static_assert(sizeof(EndBattleAPI_ChangePartyMember) == 0x000018, "Wrong size on EndBattleAPI_ChangePartyMember");
static_assert(offsetof(EndBattleAPI_ChangePartyMember, changeParameters) == 0x000000, "Member 'EndBattleAPI_ChangePartyMember::changeParameters' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ChangePartyMember, showUI) == 0x000010, "Member 'EndBattleAPI_ChangePartyMember::showUI' has a wrong offset!");

// Function EndGame.EndBattleAPI.ChangePositionOfSummonOmen
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ChangePositionOfSummonOmen final
{
public:
	int32                                         PhaseNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ownerCharacter;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ChangePositionOfSummonOmen) == 0x000008, "Wrong alignment on EndBattleAPI_ChangePositionOfSummonOmen");
static_assert(sizeof(EndBattleAPI_ChangePositionOfSummonOmen) == 0x000010, "Wrong size on EndBattleAPI_ChangePositionOfSummonOmen");
static_assert(offsetof(EndBattleAPI_ChangePositionOfSummonOmen, PhaseNumber) == 0x000000, "Member 'EndBattleAPI_ChangePositionOfSummonOmen::PhaseNumber' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ChangePositionOfSummonOmen, ownerCharacter) == 0x000008, "Member 'EndBattleAPI_ChangePositionOfSummonOmen::ownerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ClearBPDamageCoefficient
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ClearBPDamageCoefficient final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ClearBPDamageCoefficient) == 0x000008, "Wrong alignment on EndBattleAPI_ClearBPDamageCoefficient");
static_assert(sizeof(EndBattleAPI_ClearBPDamageCoefficient) == 0x000008, "Wrong size on EndBattleAPI_ClearBPDamageCoefficient");
static_assert(offsetof(EndBattleAPI_ClearBPDamageCoefficient, Character) == 0x000000, "Member 'EndBattleAPI_ClearBPDamageCoefficient::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.CreateDamageSource
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_CreateDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerCharacter;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          TargetCharacter;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDamage;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverrideDamage;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_CreateDamageSource) == 0x000008, "Wrong alignment on EndBattleAPI_CreateDamageSource");
static_assert(sizeof(EndBattleAPI_CreateDamageSource) == 0x000028, "Wrong size on EndBattleAPI_CreateDamageSource");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, DamageSourceID) == 0x000000, "Member 'EndBattleAPI_CreateDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, ownerCharacter) == 0x000008, "Member 'EndBattleAPI_CreateDamageSource::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, TargetCharacter) == 0x000010, "Member 'EndBattleAPI_CreateDamageSource::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, AbilityId) == 0x000018, "Member 'EndBattleAPI_CreateDamageSource::AbilityId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, bOverrideDamage) == 0x000020, "Member 'EndBattleAPI_CreateDamageSource::bOverrideDamage' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, OverrideDamage) == 0x000024, "Member 'EndBattleAPI_CreateDamageSource::OverrideDamage' has a wrong offset!");

// Function EndGame.EndBattleAPI.CreateSafeAreaBehindDamageSource
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_CreateSafeAreaBehindDamageSource final
{
public:
	int32                                         InGroupId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           InDamageSourceIdList;                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 InDangerActor;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_CreateSafeAreaBehindDamageSource) == 0x000008, "Wrong alignment on EndBattleAPI_CreateSafeAreaBehindDamageSource");
static_assert(sizeof(EndBattleAPI_CreateSafeAreaBehindDamageSource) == 0x000020, "Wrong size on EndBattleAPI_CreateSafeAreaBehindDamageSource");
static_assert(offsetof(EndBattleAPI_CreateSafeAreaBehindDamageSource, InGroupId) == 0x000000, "Member 'EndBattleAPI_CreateSafeAreaBehindDamageSource::InGroupId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSafeAreaBehindDamageSource, InDamageSourceIdList) == 0x000008, "Member 'EndBattleAPI_CreateSafeAreaBehindDamageSource::InDamageSourceIdList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSafeAreaBehindDamageSource, InDangerActor) == 0x000018, "Member 'EndBattleAPI_CreateSafeAreaBehindDamageSource::InDangerActor' has a wrong offset!");

// Function EndGame.EndBattleAPI.CreateSyncAction
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_CreateSyncAction final
{
public:
	class FName                                   SyncActionID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          OwnerChara;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayFromLoop;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwrite;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_CreateSyncAction) == 0x000008, "Wrong alignment on EndBattleAPI_CreateSyncAction");
static_assert(sizeof(EndBattleAPI_CreateSyncAction) == 0x000020, "Wrong size on EndBattleAPI_CreateSyncAction");
static_assert(offsetof(EndBattleAPI_CreateSyncAction, SyncActionID) == 0x000000, "Member 'EndBattleAPI_CreateSyncAction::SyncActionID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncAction, OwnerChara) == 0x000008, "Member 'EndBattleAPI_CreateSyncAction::OwnerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncAction, targetChara) == 0x000010, "Member 'EndBattleAPI_CreateSyncAction::targetChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncAction, bPlayFromLoop) == 0x000018, "Member 'EndBattleAPI_CreateSyncAction::bPlayFromLoop' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncAction, bOverwrite) == 0x000019, "Member 'EndBattleAPI_CreateSyncAction::bOverwrite' has a wrong offset!");

// Function EndGame.EndBattleAPI.CreateSyncActionOwners
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_CreateSyncActionOwners final
{
public:
	class FName                                   syncActionID0;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara0;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   syncActionID1;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara1;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   syncActionID2;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara2;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_CreateSyncActionOwners) == 0x000008, "Wrong alignment on EndBattleAPI_CreateSyncActionOwners");
static_assert(sizeof(EndBattleAPI_CreateSyncActionOwners) == 0x000030, "Wrong size on EndBattleAPI_CreateSyncActionOwners");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, syncActionID0) == 0x000000, "Member 'EndBattleAPI_CreateSyncActionOwners::syncActionID0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, ownerChara0) == 0x000008, "Member 'EndBattleAPI_CreateSyncActionOwners::ownerChara0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, syncActionID1) == 0x000010, "Member 'EndBattleAPI_CreateSyncActionOwners::syncActionID1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, ownerChara1) == 0x000018, "Member 'EndBattleAPI_CreateSyncActionOwners::ownerChara1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, syncActionID2) == 0x000020, "Member 'EndBattleAPI_CreateSyncActionOwners::syncActionID2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, ownerChara2) == 0x000028, "Member 'EndBattleAPI_CreateSyncActionOwners::ownerChara2' has a wrong offset!");

// Function EndGame.EndBattleAPI.CreateSyncActionOwnersByName
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_CreateSyncActionOwnersByName final
{
public:
	class FName                                   syncActionID0;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ownerCharaName0;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   syncActionID1;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ownerCharaName1;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   syncActionID2;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ownerCharaName2;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_CreateSyncActionOwnersByName) == 0x000004, "Wrong alignment on EndBattleAPI_CreateSyncActionOwnersByName");
static_assert(sizeof(EndBattleAPI_CreateSyncActionOwnersByName) == 0x000030, "Wrong size on EndBattleAPI_CreateSyncActionOwnersByName");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, syncActionID0) == 0x000000, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::syncActionID0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, ownerCharaName0) == 0x000008, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::ownerCharaName0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, syncActionID1) == 0x000010, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::syncActionID1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, ownerCharaName1) == 0x000018, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::ownerCharaName1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, syncActionID2) == 0x000020, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::syncActionID2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, ownerCharaName2) == 0x000028, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::ownerCharaName2' has a wrong offset!");

// Function EndGame.EndBattleAPI.DebugSetHP
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_DebugSetHP final
{
public:
	class AEndCharacter*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_DebugSetHP) == 0x000008, "Wrong alignment on EndBattleAPI_DebugSetHP");
static_assert(sizeof(EndBattleAPI_DebugSetHP) == 0x000010, "Wrong size on EndBattleAPI_DebugSetHP");
static_assert(offsetof(EndBattleAPI_DebugSetHP, Chara) == 0x000000, "Member 'EndBattleAPI_DebugSetHP::Chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DebugSetHP, HP) == 0x000008, "Member 'EndBattleAPI_DebugSetHP::HP' has a wrong offset!");

// Function EndGame.EndBattleAPI.DebugSetPropertyInformation
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_DebugSetPropertyInformation final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InName;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_DebugSetPropertyInformation) == 0x000008, "Wrong alignment on EndBattleAPI_DebugSetPropertyInformation");
static_assert(sizeof(EndBattleAPI_DebugSetPropertyInformation) == 0x000018, "Wrong size on EndBattleAPI_DebugSetPropertyInformation");
static_assert(offsetof(EndBattleAPI_DebugSetPropertyInformation, InCharacter) == 0x000000, "Member 'EndBattleAPI_DebugSetPropertyInformation::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DebugSetPropertyInformation, InName) == 0x000008, "Member 'EndBattleAPI_DebugSetPropertyInformation::InName' has a wrong offset!");

// Function EndGame.EndBattleAPI.DecBattleSceneCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_DecBattleSceneCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_DecBattleSceneCount) == 0x000004, "Wrong alignment on EndBattleAPI_DecBattleSceneCount");
static_assert(sizeof(EndBattleAPI_DecBattleSceneCount) == 0x00000C, "Wrong size on EndBattleAPI_DecBattleSceneCount");
static_assert(offsetof(EndBattleAPI_DecBattleSceneCount, InName) == 0x000000, "Member 'EndBattleAPI_DecBattleSceneCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DecBattleSceneCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_DecBattleSceneCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.DestroyDamageSource
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_DestroyDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerCharacter;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyEffect;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forceDestroy;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_DestroyDamageSource) == 0x000008, "Wrong alignment on EndBattleAPI_DestroyDamageSource");
static_assert(sizeof(EndBattleAPI_DestroyDamageSource) == 0x000018, "Wrong size on EndBattleAPI_DestroyDamageSource");
static_assert(offsetof(EndBattleAPI_DestroyDamageSource, DamageSourceID) == 0x000000, "Member 'EndBattleAPI_DestroyDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DestroyDamageSource, ownerCharacter) == 0x000008, "Member 'EndBattleAPI_DestroyDamageSource::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DestroyDamageSource, bDestroyEffect) == 0x000010, "Member 'EndBattleAPI_DestroyDamageSource::bDestroyEffect' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DestroyDamageSource, forceDestroy) == 0x000011, "Member 'EndBattleAPI_DestroyDamageSource::forceDestroy' has a wrong offset!");

// Function EndGame.EndBattleAPI.DestroyDamageSourceAll
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_DestroyDamageSourceAll final
{
public:
	bool                                          bDestroyEffect;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_DestroyDamageSourceAll) == 0x000001, "Wrong alignment on EndBattleAPI_DestroyDamageSourceAll");
static_assert(sizeof(EndBattleAPI_DestroyDamageSourceAll) == 0x000001, "Wrong size on EndBattleAPI_DestroyDamageSourceAll");
static_assert(offsetof(EndBattleAPI_DestroyDamageSourceAll, bDestroyEffect) == 0x000000, "Member 'EndBattleAPI_DestroyDamageSourceAll::bDestroyEffect' has a wrong offset!");

// Function EndGame.EndBattleAPI.DestroyDamageSourceAllCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_DestroyDamageSourceAllCharacter final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyEffect;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forceDestroy;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_DestroyDamageSourceAllCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_DestroyDamageSourceAllCharacter");
static_assert(sizeof(EndBattleAPI_DestroyDamageSourceAllCharacter) == 0x000010, "Wrong size on EndBattleAPI_DestroyDamageSourceAllCharacter");
static_assert(offsetof(EndBattleAPI_DestroyDamageSourceAllCharacter, Character) == 0x000000, "Member 'EndBattleAPI_DestroyDamageSourceAllCharacter::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DestroyDamageSourceAllCharacter, bDestroyEffect) == 0x000008, "Member 'EndBattleAPI_DestroyDamageSourceAllCharacter::bDestroyEffect' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DestroyDamageSourceAllCharacter, forceDestroy) == 0x000009, "Member 'EndBattleAPI_DestroyDamageSourceAllCharacter::forceDestroy' has a wrong offset!");

// Function EndGame.EndBattleAPI.DestroySafeAreaBehindDamageSource
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_DestroySafeAreaBehindDamageSource final
{
public:
	int32                                         InGroupId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           InDamageSourceIdList;                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_DestroySafeAreaBehindDamageSource) == 0x000008, "Wrong alignment on EndBattleAPI_DestroySafeAreaBehindDamageSource");
static_assert(sizeof(EndBattleAPI_DestroySafeAreaBehindDamageSource) == 0x000018, "Wrong size on EndBattleAPI_DestroySafeAreaBehindDamageSource");
static_assert(offsetof(EndBattleAPI_DestroySafeAreaBehindDamageSource, InGroupId) == 0x000000, "Member 'EndBattleAPI_DestroySafeAreaBehindDamageSource::InGroupId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DestroySafeAreaBehindDamageSource, InDamageSourceIdList) == 0x000008, "Member 'EndBattleAPI_DestroySafeAreaBehindDamageSource::InDamageSourceIdList' has a wrong offset!");

// Function EndGame.EndBattleAPI.Die
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_Die final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          causerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          skipDirection;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_Die) == 0x000008, "Wrong alignment on EndBattleAPI_Die");
static_assert(sizeof(EndBattleAPI_Die) == 0x000018, "Wrong size on EndBattleAPI_Die");
static_assert(offsetof(EndBattleAPI_Die, Character) == 0x000000, "Member 'EndBattleAPI_Die::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_Die, causerCharacter) == 0x000008, "Member 'EndBattleAPI_Die::causerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_Die, skipDirection) == 0x000010, "Member 'EndBattleAPI_Die::skipDirection' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_Die, ReturnValue) == 0x000011, "Member 'EndBattleAPI_Die::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.EnableDamageReactionOwnerSyncAction
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_EnableDamageReactionOwnerSyncAction final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_EnableDamageReactionOwnerSyncAction) == 0x000008, "Wrong alignment on EndBattleAPI_EnableDamageReactionOwnerSyncAction");
static_assert(sizeof(EndBattleAPI_EnableDamageReactionOwnerSyncAction) == 0x000008, "Wrong size on EndBattleAPI_EnableDamageReactionOwnerSyncAction");
static_assert(offsetof(EndBattleAPI_EnableDamageReactionOwnerSyncAction, Character) == 0x000000, "Member 'EndBattleAPI_EnableDamageReactionOwnerSyncAction::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.EndBreakTime
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_EndBreakTime final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          immediatelyEndAction;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_EndBreakTime) == 0x000008, "Wrong alignment on EndBattleAPI_EndBreakTime");
static_assert(sizeof(EndBattleAPI_EndBreakTime) == 0x000010, "Wrong size on EndBattleAPI_EndBreakTime");
static_assert(offsetof(EndBattleAPI_EndBreakTime, Character) == 0x000000, "Member 'EndBattleAPI_EndBreakTime::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_EndBreakTime, immediatelyEndAction) == 0x000008, "Member 'EndBattleAPI_EndBreakTime::immediatelyEndAction' has a wrong offset!");

// Function EndGame.EndBattleAPI.EndBurst
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_EndBurst final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          instant;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_EndBurst) == 0x000008, "Wrong alignment on EndBattleAPI_EndBurst");
static_assert(sizeof(EndBattleAPI_EndBurst) == 0x000010, "Wrong size on EndBattleAPI_EndBurst");
static_assert(offsetof(EndBattleAPI_EndBurst, Character) == 0x000000, "Member 'EndBattleAPI_EndBurst::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_EndBurst, instant) == 0x000008, "Member 'EndBattleAPI_EndBurst::instant' has a wrong offset!");

// Function EndGame.EndBattleAPI.ExcludeActorFromSkillCameraSlow
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ExcludeActorFromSkillCameraSlow final
{
public:
	int32                                         sequenceActorUID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ExcludeActorFromSkillCameraSlow) == 0x000008, "Wrong alignment on EndBattleAPI_ExcludeActorFromSkillCameraSlow");
static_assert(sizeof(EndBattleAPI_ExcludeActorFromSkillCameraSlow) == 0x000010, "Wrong size on EndBattleAPI_ExcludeActorFromSkillCameraSlow");
static_assert(offsetof(EndBattleAPI_ExcludeActorFromSkillCameraSlow, sequenceActorUID) == 0x000000, "Member 'EndBattleAPI_ExcludeActorFromSkillCameraSlow::sequenceActorUID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExcludeActorFromSkillCameraSlow, Actor) == 0x000008, "Member 'EndBattleAPI_ExcludeActorFromSkillCameraSlow::Actor' has a wrong offset!");

// Function EndGame.EndBattleAPI.ExcludeActorsFromSkillCameraSlow
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_ExcludeActorsFromSkillCameraSlow final
{
public:
	int32                                         sequenceActorUID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actors;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ExcludeActorsFromSkillCameraSlow) == 0x000008, "Wrong alignment on EndBattleAPI_ExcludeActorsFromSkillCameraSlow");
static_assert(sizeof(EndBattleAPI_ExcludeActorsFromSkillCameraSlow) == 0x000018, "Wrong size on EndBattleAPI_ExcludeActorsFromSkillCameraSlow");
static_assert(offsetof(EndBattleAPI_ExcludeActorsFromSkillCameraSlow, sequenceActorUID) == 0x000000, "Member 'EndBattleAPI_ExcludeActorsFromSkillCameraSlow::sequenceActorUID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExcludeActorsFromSkillCameraSlow, Actors) == 0x000008, "Member 'EndBattleAPI_ExcludeActorsFromSkillCameraSlow::Actors' has a wrong offset!");

// Function EndGame.EndBattleAPI.ExistDamageSourceRevive
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_ExistDamageSourceRevive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ExistDamageSourceRevive) == 0x000001, "Wrong alignment on EndBattleAPI_ExistDamageSourceRevive");
static_assert(sizeof(EndBattleAPI_ExistDamageSourceRevive) == 0x000001, "Wrong size on EndBattleAPI_ExistDamageSourceRevive");
static_assert(offsetof(EndBattleAPI_ExistDamageSourceRevive, ReturnValue) == 0x000000, "Member 'EndBattleAPI_ExistDamageSourceRevive::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.ExistsNavmeshWallEdge
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_ExistsNavmeshWallEdge final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacterBase*                      InExecutor;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawDebug;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawDebugTime;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ExistsNavmeshWallEdge) == 0x000008, "Wrong alignment on EndBattleAPI_ExistsNavmeshWallEdge");
static_assert(sizeof(EndBattleAPI_ExistsNavmeshWallEdge) == 0x000028, "Wrong size on EndBattleAPI_ExistsNavmeshWallEdge");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdge, InLocation) == 0x000000, "Member 'EndBattleAPI_ExistsNavmeshWallEdge::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdge, OutDistance) == 0x00000C, "Member 'EndBattleAPI_ExistsNavmeshWallEdge::OutDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdge, InExecutor) == 0x000010, "Member 'EndBattleAPI_ExistsNavmeshWallEdge::InExecutor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdge, InRadius) == 0x000018, "Member 'EndBattleAPI_ExistsNavmeshWallEdge::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdge, InDrawDebug) == 0x00001C, "Member 'EndBattleAPI_ExistsNavmeshWallEdge::InDrawDebug' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdge, InDrawDebugTime) == 0x000020, "Member 'EndBattleAPI_ExistsNavmeshWallEdge::InDrawDebugTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdge, ReturnValue) == 0x000024, "Member 'EndBattleAPI_ExistsNavmeshWallEdge::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.ExistsNavmeshWallEdgeFromChara
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_ExistsNavmeshWallEdgeFromChara final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InForceSSizeNav;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawDebug;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawDebugTime;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ExistsNavmeshWallEdgeFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_ExistsNavmeshWallEdgeFromChara");
static_assert(sizeof(EndBattleAPI_ExistsNavmeshWallEdgeFromChara) == 0x000020, "Wrong size on EndBattleAPI_ExistsNavmeshWallEdgeFromChara");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdgeFromChara, InCharacter) == 0x000000, "Member 'EndBattleAPI_ExistsNavmeshWallEdgeFromChara::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdgeFromChara, OutDistance) == 0x000008, "Member 'EndBattleAPI_ExistsNavmeshWallEdgeFromChara::OutDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdgeFromChara, InRadius) == 0x00000C, "Member 'EndBattleAPI_ExistsNavmeshWallEdgeFromChara::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdgeFromChara, InForceSSizeNav) == 0x000010, "Member 'EndBattleAPI_ExistsNavmeshWallEdgeFromChara::InForceSSizeNav' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdgeFromChara, InDrawDebug) == 0x000011, "Member 'EndBattleAPI_ExistsNavmeshWallEdgeFromChara::InDrawDebug' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdgeFromChara, InDrawDebugTime) == 0x000014, "Member 'EndBattleAPI_ExistsNavmeshWallEdgeFromChara::InDrawDebugTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ExistsNavmeshWallEdgeFromChara, ReturnValue) == 0x000018, "Member 'EndBattleAPI_ExistsNavmeshWallEdgeFromChara::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.FindEnableCrystalAppearPoint
// 0x0060 (0x0060 - 0x0000)
struct EndBattleAPI_FindEnableCrystalAppearPoint final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         nearLength;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         farLength;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         viewAngle;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   outPointName;                                      // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             outPointTransform;                                 // 0x0020(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_FindEnableCrystalAppearPoint) == 0x000010, "Wrong alignment on EndBattleAPI_FindEnableCrystalAppearPoint");
static_assert(sizeof(EndBattleAPI_FindEnableCrystalAppearPoint) == 0x000060, "Wrong size on EndBattleAPI_FindEnableCrystalAppearPoint");
static_assert(offsetof(EndBattleAPI_FindEnableCrystalAppearPoint, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_FindEnableCrystalAppearPoint::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindEnableCrystalAppearPoint, nearLength) == 0x000008, "Member 'EndBattleAPI_FindEnableCrystalAppearPoint::nearLength' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindEnableCrystalAppearPoint, farLength) == 0x00000C, "Member 'EndBattleAPI_FindEnableCrystalAppearPoint::farLength' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindEnableCrystalAppearPoint, viewAngle) == 0x000010, "Member 'EndBattleAPI_FindEnableCrystalAppearPoint::viewAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindEnableCrystalAppearPoint, outPointName) == 0x000014, "Member 'EndBattleAPI_FindEnableCrystalAppearPoint::outPointName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindEnableCrystalAppearPoint, outPointTransform) == 0x000020, "Member 'EndBattleAPI_FindEnableCrystalAppearPoint::outPointTransform' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindEnableCrystalAppearPoint, ReturnValue) == 0x000050, "Member 'EndBattleAPI_FindEnableCrystalAppearPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.FindNavVolumesInRange
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAPI_FindNavVolumesInRange final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Groups;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         angleRange;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCompareDistanceType                 Type;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          behind;                                            // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndNavModifierVolume*>          ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_FindNavVolumesInRange) == 0x000008, "Wrong alignment on EndBattleAPI_FindNavVolumesInRange");
static_assert(sizeof(EndBattleAPI_FindNavVolumesInRange) == 0x000038, "Wrong size on EndBattleAPI_FindNavVolumesInRange");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, Character) == 0x000000, "Member 'EndBattleAPI_FindNavVolumesInRange::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, Groups) == 0x000008, "Member 'EndBattleAPI_FindNavVolumesInRange::Groups' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, angleRange) == 0x000018, "Member 'EndBattleAPI_FindNavVolumesInRange::angleRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, Type) == 0x00001C, "Member 'EndBattleAPI_FindNavVolumesInRange::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, behind) == 0x00001D, "Member 'EndBattleAPI_FindNavVolumesInRange::behind' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, Distance) == 0x000020, "Member 'EndBattleAPI_FindNavVolumesInRange::Distance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, ReturnValue) == 0x000028, "Member 'EndBattleAPI_FindNavVolumesInRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.FindNavVolumesOutRange
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAPI_FindNavVolumesOutRange final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Groups;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         angleRange;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCompareDistanceType                 Type;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          behind;                                            // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndNavModifierVolume*>          ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_FindNavVolumesOutRange) == 0x000008, "Wrong alignment on EndBattleAPI_FindNavVolumesOutRange");
static_assert(sizeof(EndBattleAPI_FindNavVolumesOutRange) == 0x000038, "Wrong size on EndBattleAPI_FindNavVolumesOutRange");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, Character) == 0x000000, "Member 'EndBattleAPI_FindNavVolumesOutRange::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, Groups) == 0x000008, "Member 'EndBattleAPI_FindNavVolumesOutRange::Groups' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, angleRange) == 0x000018, "Member 'EndBattleAPI_FindNavVolumesOutRange::angleRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, Type) == 0x00001C, "Member 'EndBattleAPI_FindNavVolumesOutRange::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, behind) == 0x00001D, "Member 'EndBattleAPI_FindNavVolumesOutRange::behind' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, Distance) == 0x000020, "Member 'EndBattleAPI_FindNavVolumesOutRange::Distance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, ReturnValue) == 0x000028, "Member 'EndBattleAPI_FindNavVolumesOutRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.ForceDestroyParts
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ForceDestroyParts final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   uniqueName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ForceDestroyParts) == 0x000008, "Wrong alignment on EndBattleAPI_ForceDestroyParts");
static_assert(sizeof(EndBattleAPI_ForceDestroyParts) == 0x000010, "Wrong size on EndBattleAPI_ForceDestroyParts");
static_assert(offsetof(EndBattleAPI_ForceDestroyParts, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_ForceDestroyParts::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ForceDestroyParts, uniqueName) == 0x000008, "Member 'EndBattleAPI_ForceDestroyParts::uniqueName' has a wrong offset!");

// Function EndGame.EndBattleAPI.ForceDisableAimEffectorSetting
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ForceDisableAimEffectorSetting final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectorSettingName;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ForceDisableAimEffectorSetting) == 0x000008, "Wrong alignment on EndBattleAPI_ForceDisableAimEffectorSetting");
static_assert(sizeof(EndBattleAPI_ForceDisableAimEffectorSetting) == 0x000010, "Wrong size on EndBattleAPI_ForceDisableAimEffectorSetting");
static_assert(offsetof(EndBattleAPI_ForceDisableAimEffectorSetting, Character) == 0x000000, "Member 'EndBattleAPI_ForceDisableAimEffectorSetting::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ForceDisableAimEffectorSetting, EffectorSettingName) == 0x000008, "Member 'EndBattleAPI_ForceDisableAimEffectorSetting::EffectorSettingName' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAbilityElement
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetAbilityElement final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetAbilityElement) == 0x000004, "Wrong alignment on EndBattleAPI_GetAbilityElement");
static_assert(sizeof(EndBattleAPI_GetAbilityElement) == 0x00000C, "Wrong size on EndBattleAPI_GetAbilityElement");
static_assert(offsetof(EndBattleAPI_GetAbilityElement, InAbilityName) == 0x000000, "Member 'EndBattleAPI_GetAbilityElement::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAbilityElement, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetAbilityElement::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetActorDirection
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetActorDirection final
{
public:
	class AActor*                                 From;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetActorDirection) == 0x000008, "Wrong alignment on EndBattleAPI_GetActorDirection");
static_assert(sizeof(EndBattleAPI_GetActorDirection) == 0x000020, "Wrong size on EndBattleAPI_GetActorDirection");
static_assert(offsetof(EndBattleAPI_GetActorDirection, From) == 0x000000, "Member 'EndBattleAPI_GetActorDirection::From' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetActorDirection, To) == 0x000008, "Member 'EndBattleAPI_GetActorDirection::To' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetActorDirection, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetActorDirection::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetActorDistance
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetActorDistance final
{
public:
	class AActor*                                 From;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetActorDistance) == 0x000008, "Wrong alignment on EndBattleAPI_GetActorDistance");
static_assert(sizeof(EndBattleAPI_GetActorDistance) == 0x000018, "Wrong size on EndBattleAPI_GetActorDistance");
static_assert(offsetof(EndBattleAPI_GetActorDistance, From) == 0x000000, "Member 'EndBattleAPI_GetActorDistance::From' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetActorDistance, To) == 0x000008, "Member 'EndBattleAPI_GetActorDistance::To' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetActorDistance, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetActorDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetActorName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetActorName final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetActorName) == 0x000008, "Wrong alignment on EndBattleAPI_GetActorName");
static_assert(sizeof(EndBattleAPI_GetActorName) == 0x000010, "Wrong size on EndBattleAPI_GetActorName");
static_assert(offsetof(EndBattleAPI_GetActorName, InChara) == 0x000000, "Member 'EndBattleAPI_GetActorName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetActorName, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAIController
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetAIController final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndAIControllerBluePrintBase*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetAIController) == 0x000008, "Wrong alignment on EndBattleAPI_GetAIController");
static_assert(sizeof(EndBattleAPI_GetAIController) == 0x000010, "Wrong size on EndBattleAPI_GetAIController");
static_assert(offsetof(EndBattleAPI_GetAIController, InChara) == 0x000000, "Member 'EndBattleAPI_GetAIController::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAIController, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetAIController::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAllDamageSourceLocations
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetAllDamageSourceLocations final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetAllDamageSourceLocations) == 0x000008, "Wrong alignment on EndBattleAPI_GetAllDamageSourceLocations");
static_assert(sizeof(EndBattleAPI_GetAllDamageSourceLocations) == 0x000018, "Wrong size on EndBattleAPI_GetAllDamageSourceLocations");
static_assert(offsetof(EndBattleAPI_GetAllDamageSourceLocations, DamageSourceID) == 0x000000, "Member 'EndBattleAPI_GetAllDamageSourceLocations::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAllDamageSourceLocations, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetAllDamageSourceLocations::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAttackableCharacters
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetAttackableCharacters final
{
public:
	TArray<class AEndCharacter*>                  OutList;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  InList;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetAttackableCharacters) == 0x000008, "Wrong alignment on EndBattleAPI_GetAttackableCharacters");
static_assert(sizeof(EndBattleAPI_GetAttackableCharacters) == 0x000020, "Wrong size on EndBattleAPI_GetAttackableCharacters");
static_assert(offsetof(EndBattleAPI_GetAttackableCharacters, OutList) == 0x000000, "Member 'EndBattleAPI_GetAttackableCharacters::OutList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAttackableCharacters, InList) == 0x000010, "Member 'EndBattleAPI_GetAttackableCharacters::InList' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleCameraSequenceID
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetBattleCameraSequenceID final
{
public:
	int32                                         sequenceActorUID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleCameraSequenceID) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleCameraSequenceID");
static_assert(sizeof(EndBattleAPI_GetBattleCameraSequenceID) == 0x00000C, "Wrong size on EndBattleAPI_GetBattleCameraSequenceID");
static_assert(offsetof(EndBattleAPI_GetBattleCameraSequenceID, sequenceActorUID) == 0x000000, "Member 'EndBattleAPI_GetBattleCameraSequenceID::sequenceActorUID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCameraSequenceID, ReturnValue) == 0x000004, "Member 'EndBattleAPI_GetBattleCameraSequenceID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleCharaSpec_DataTableID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetBattleCharaSpec_DataTableID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleCharaSpec_DataTableID) == 0x000008, "Wrong alignment on EndBattleAPI_GetBattleCharaSpec_DataTableID");
static_assert(sizeof(EndBattleAPI_GetBattleCharaSpec_DataTableID) == 0x000010, "Wrong size on EndBattleAPI_GetBattleCharaSpec_DataTableID");
static_assert(offsetof(EndBattleAPI_GetBattleCharaSpec_DataTableID, InChara) == 0x000000, "Member 'EndBattleAPI_GetBattleCharaSpec_DataTableID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCharaSpec_DataTableID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetBattleCharaSpec_DataTableID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleMemberConditionList
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetBattleMemberConditionList final
{
public:
	bool                                          dead;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          sleep;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stop;                                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          petrify;                                           // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Toad;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  MemberList;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBattleMemberConditionList) == 0x000008, "Wrong alignment on EndBattleAPI_GetBattleMemberConditionList");
static_assert(sizeof(EndBattleAPI_GetBattleMemberConditionList) == 0x000020, "Wrong size on EndBattleAPI_GetBattleMemberConditionList");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, dead) == 0x000000, "Member 'EndBattleAPI_GetBattleMemberConditionList::dead' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, sleep) == 0x000001, "Member 'EndBattleAPI_GetBattleMemberConditionList::sleep' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, Stop) == 0x000002, "Member 'EndBattleAPI_GetBattleMemberConditionList::Stop' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, petrify) == 0x000003, "Member 'EndBattleAPI_GetBattleMemberConditionList::petrify' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, Toad) == 0x000004, "Member 'EndBattleAPI_GetBattleMemberConditionList::Toad' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, MemberList) == 0x000008, "Member 'EndBattleAPI_GetBattleMemberConditionList::MemberList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetBattleMemberConditionList::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleSceneCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetBattleSceneCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleSceneCount) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleSceneCount");
static_assert(sizeof(EndBattleAPI_GetBattleSceneCount) == 0x00000C, "Wrong size on EndBattleAPI_GetBattleSceneCount");
static_assert(offsetof(EndBattleAPI_GetBattleSceneCount, InName) == 0x000000, "Member 'EndBattleAPI_GetBattleSceneCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleSceneCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetBattleSceneCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleSceneIDFromChara
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetBattleSceneIDFromChara final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InParent;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBattleSceneIDFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_GetBattleSceneIDFromChara");
static_assert(sizeof(EndBattleAPI_GetBattleSceneIDFromChara) == 0x000018, "Wrong size on EndBattleAPI_GetBattleSceneIDFromChara");
static_assert(offsetof(EndBattleAPI_GetBattleSceneIDFromChara, InChara) == 0x000000, "Member 'EndBattleAPI_GetBattleSceneIDFromChara::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleSceneIDFromChara, InParent) == 0x000008, "Member 'EndBattleAPI_GetBattleSceneIDFromChara::InParent' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleSceneIDFromChara, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_GetBattleSceneIDFromChara::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBP
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetBP final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBP) == 0x000008, "Wrong alignment on EndBattleAPI_GetBP");
static_assert(sizeof(EndBattleAPI_GetBP) == 0x000010, "Wrong size on EndBattleAPI_GetBP");
static_assert(offsetof(EndBattleAPI_GetBP, Character) == 0x000000, "Member 'EndBattleAPI_GetBP::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBP, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBPPercent
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetBPPercent final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBPPercent) == 0x000008, "Wrong alignment on EndBattleAPI_GetBPPercent");
static_assert(sizeof(EndBattleAPI_GetBPPercent) == 0x000010, "Wrong size on EndBattleAPI_GetBPPercent");
static_assert(offsetof(EndBattleAPI_GetBPPercent, Character) == 0x000000, "Member 'EndBattleAPI_GetBPPercent::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBPPercent, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetBPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBreakTime
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetBreakTime final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBreakTime) == 0x000008, "Wrong alignment on EndBattleAPI_GetBreakTime");
static_assert(sizeof(EndBattleAPI_GetBreakTime) == 0x000010, "Wrong size on EndBattleAPI_GetBreakTime");
static_assert(offsetof(EndBattleAPI_GetBreakTime, Character) == 0x000000, "Member 'EndBattleAPI_GetBreakTime::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBreakTime, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetBreakTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharacterNameSymbolIndex
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharacterNameSymbolIndex final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetCharacterNameSymbolIndex) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharacterNameSymbolIndex");
static_assert(sizeof(EndBattleAPI_GetCharacterNameSymbolIndex) == 0x000010, "Wrong size on EndBattleAPI_GetCharacterNameSymbolIndex");
static_assert(offsetof(EndBattleAPI_GetCharacterNameSymbolIndex, Character) == 0x000000, "Member 'EndBattleAPI_GetCharacterNameSymbolIndex::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharacterNameSymbolIndex, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharacterNameSymbolIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharactersFromID
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetCharactersFromID final
{
public:
	class FName                                   Upper;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  OutList;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  InList;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCharactersFromID) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharactersFromID");
static_assert(sizeof(EndBattleAPI_GetCharactersFromID) == 0x000030, "Wrong size on EndBattleAPI_GetCharactersFromID");
static_assert(offsetof(EndBattleAPI_GetCharactersFromID, Upper) == 0x000000, "Member 'EndBattleAPI_GetCharactersFromID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharactersFromID, Lower) == 0x000008, "Member 'EndBattleAPI_GetCharactersFromID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharactersFromID, OutList) == 0x000010, "Member 'EndBattleAPI_GetCharactersFromID::OutList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharactersFromID, InList) == 0x000020, "Member 'EndBattleAPI_GetCharactersFromID::InList' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharacterStateType
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharacterStateType final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndCharacterControllerStateType              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetCharacterStateType) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharacterStateType");
static_assert(sizeof(EndBattleAPI_GetCharacterStateType) == 0x000010, "Wrong size on EndBattleAPI_GetCharacterStateType");
static_assert(offsetof(EndBattleAPI_GetCharacterStateType, Character) == 0x000000, "Member 'EndBattleAPI_GetCharacterStateType::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharacterStateType, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharacterStateType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaFromActorName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetCharaFromActorName final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFindCharaPopManager;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCharaFromActorName) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaFromActorName");
static_assert(sizeof(EndBattleAPI_GetCharaFromActorName) == 0x000018, "Wrong size on EndBattleAPI_GetCharaFromActorName");
static_assert(offsetof(EndBattleAPI_GetCharaFromActorName, InActorName) == 0x000000, "Member 'EndBattleAPI_GetCharaFromActorName::InActorName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaFromActorName, bAllowFindCharaPopManager) == 0x000008, "Member 'EndBattleAPI_GetCharaFromActorName::bAllowFindCharaPopManager' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaFromActorName, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetCharaFromActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaFromRaceID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharaFromRaceID final
{
public:
	class FName                                   InRaceName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCharaFromRaceID) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaFromRaceID");
static_assert(sizeof(EndBattleAPI_GetCharaFromRaceID) == 0x000010, "Wrong size on EndBattleAPI_GetCharaFromRaceID");
static_assert(offsetof(EndBattleAPI_GetCharaFromRaceID, InRaceName) == 0x000000, "Member 'EndBattleAPI_GetCharaFromRaceID::InRaceName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaFromRaceID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharaFromRaceID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaHP
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharaHP final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetCharaHP) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaHP");
static_assert(sizeof(EndBattleAPI_GetCharaHP) == 0x000010, "Wrong size on EndBattleAPI_GetCharaHP");
static_assert(offsetof(EndBattleAPI_GetCharaHP, InChara) == 0x000000, "Member 'EndBattleAPI_GetCharaHP::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaHP, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharaHP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharaID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCharaID) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaID");
static_assert(sizeof(EndBattleAPI_GetCharaID) == 0x000010, "Wrong size on EndBattleAPI_GetCharaID");
static_assert(offsetof(EndBattleAPI_GetCharaID, InChara) == 0x000000, "Member 'EndBattleAPI_GetCharaID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharaID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaSpecName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharaSpecName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCharaSpecName) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaSpecName");
static_assert(sizeof(EndBattleAPI_GetCharaSpecName) == 0x000010, "Wrong size on EndBattleAPI_GetCharaSpecName");
static_assert(offsetof(EndBattleAPI_GetCharaSpecName, Character) == 0x000000, "Member 'EndBattleAPI_GetCharaSpecName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaSpecName, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharaSpecName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCombinationAbilityUsedCharacterName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCombinationAbilityUsedCharacterName final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCombinationAbilityUsedCharacterName) == 0x000004, "Wrong alignment on EndBattleAPI_GetCombinationAbilityUsedCharacterName");
static_assert(sizeof(EndBattleAPI_GetCombinationAbilityUsedCharacterName) == 0x000010, "Wrong size on EndBattleAPI_GetCombinationAbilityUsedCharacterName");
static_assert(offsetof(EndBattleAPI_GetCombinationAbilityUsedCharacterName, AbilityId) == 0x000000, "Member 'EndBattleAPI_GetCombinationAbilityUsedCharacterName::AbilityId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCombinationAbilityUsedCharacterName, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCombinationAbilityUsedCharacterName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCompareLocation
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetCompareLocation final
{
public:
	struct FVector                                BaseLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        compareLocationList;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCompare2D;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCompareLocationType                 compareType;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCompareLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetCompareLocation");
static_assert(sizeof(EndBattleAPI_GetCompareLocation) == 0x000030, "Wrong size on EndBattleAPI_GetCompareLocation");
static_assert(offsetof(EndBattleAPI_GetCompareLocation, BaseLocation) == 0x000000, "Member 'EndBattleAPI_GetCompareLocation::BaseLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCompareLocation, compareLocationList) == 0x000010, "Member 'EndBattleAPI_GetCompareLocation::compareLocationList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCompareLocation, bCompare2D) == 0x000020, "Member 'EndBattleAPI_GetCompareLocation::bCompare2D' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCompareLocation, compareType) == 0x000021, "Member 'EndBattleAPI_GetCompareLocation::compareType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCompareLocation, ReturnValue) == 0x000024, "Member 'EndBattleAPI_GetCompareLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCurrentAbilityID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCurrentAbilityID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCurrentAbilityID) == 0x000008, "Wrong alignment on EndBattleAPI_GetCurrentAbilityID");
static_assert(sizeof(EndBattleAPI_GetCurrentAbilityID) == 0x000010, "Wrong size on EndBattleAPI_GetCurrentAbilityID");
static_assert(offsetof(EndBattleAPI_GetCurrentAbilityID, InChara) == 0x000000, "Member 'EndBattleAPI_GetCurrentAbilityID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCurrentAbilityID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCurrentAbilityID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCurrentLocomotionState
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCurrentLocomotionState final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionState                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetCurrentLocomotionState) == 0x000008, "Wrong alignment on EndBattleAPI_GetCurrentLocomotionState");
static_assert(sizeof(EndBattleAPI_GetCurrentLocomotionState) == 0x000010, "Wrong size on EndBattleAPI_GetCurrentLocomotionState");
static_assert(offsetof(EndBattleAPI_GetCurrentLocomotionState, InChara) == 0x000000, "Member 'EndBattleAPI_GetCurrentLocomotionState::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCurrentLocomotionState, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCurrentLocomotionState::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDamageHitReactionTableIndex
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetDamageHitReactionTableIndex final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetDamageHitReactionTableIndex) == 0x000008, "Wrong alignment on EndBattleAPI_GetDamageHitReactionTableIndex");
static_assert(sizeof(EndBattleAPI_GetDamageHitReactionTableIndex) == 0x000010, "Wrong size on EndBattleAPI_GetDamageHitReactionTableIndex");
static_assert(offsetof(EndBattleAPI_GetDamageHitReactionTableIndex, Character) == 0x000000, "Member 'EndBattleAPI_GetDamageHitReactionTableIndex::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageHitReactionTableIndex, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetDamageHitReactionTableIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDamageSourceCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetDamageSourceCount final
{
public:
	class FName                                   InDamageSourceID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDamageSourceCount) == 0x000004, "Wrong alignment on EndBattleAPI_GetDamageSourceCount");
static_assert(sizeof(EndBattleAPI_GetDamageSourceCount) == 0x00000C, "Wrong size on EndBattleAPI_GetDamageSourceCount");
static_assert(offsetof(EndBattleAPI_GetDamageSourceCount, InDamageSourceID) == 0x000000, "Member 'EndBattleAPI_GetDamageSourceCount::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetDamageSourceCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDamageSourceCountInArea
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetDamageSourceCountInArea final
{
public:
	class FName                                   InDamageSourceID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToSearchAround;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRadius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlatSearch;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetDamageSourceCountInArea) == 0x000008, "Wrong alignment on EndBattleAPI_GetDamageSourceCountInArea");
static_assert(sizeof(EndBattleAPI_GetDamageSourceCountInArea) == 0x000020, "Wrong size on EndBattleAPI_GetDamageSourceCountInArea");
static_assert(offsetof(EndBattleAPI_GetDamageSourceCountInArea, InDamageSourceID) == 0x000000, "Member 'EndBattleAPI_GetDamageSourceCountInArea::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceCountInArea, ActorToSearchAround) == 0x000008, "Member 'EndBattleAPI_GetDamageSourceCountInArea::ActorToSearchAround' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceCountInArea, SearchRadius) == 0x000010, "Member 'EndBattleAPI_GetDamageSourceCountInArea::SearchRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceCountInArea, bFlatSearch) == 0x000014, "Member 'EndBattleAPI_GetDamageSourceCountInArea::bFlatSearch' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceCountInArea, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetDamageSourceCountInArea::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDamageSourceLocations
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetDamageSourceLocations final
{
public:
	TArray<class FName>                           DamageSourceIDs;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerCharacter;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDamageSourceLocations) == 0x000008, "Wrong alignment on EndBattleAPI_GetDamageSourceLocations");
static_assert(sizeof(EndBattleAPI_GetDamageSourceLocations) == 0x000028, "Wrong size on EndBattleAPI_GetDamageSourceLocations");
static_assert(offsetof(EndBattleAPI_GetDamageSourceLocations, DamageSourceIDs) == 0x000000, "Member 'EndBattleAPI_GetDamageSourceLocations::DamageSourceIDs' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceLocations, ownerCharacter) == 0x000010, "Member 'EndBattleAPI_GetDamageSourceLocations::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceLocations, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetDamageSourceLocations::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDataObjectBattleAbility
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetDataObjectBattleAbility final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataObjectBattleAbilityAccessor    dataObjectBattleAbility;                           // 0x0008(0x0020)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetDataObjectBattleAbility) == 0x000008, "Wrong alignment on EndBattleAPI_GetDataObjectBattleAbility");
static_assert(sizeof(EndBattleAPI_GetDataObjectBattleAbility) == 0x000030, "Wrong size on EndBattleAPI_GetDataObjectBattleAbility");
static_assert(offsetof(EndBattleAPI_GetDataObjectBattleAbility, AbilityId) == 0x000000, "Member 'EndBattleAPI_GetDataObjectBattleAbility::AbilityId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDataObjectBattleAbility, dataObjectBattleAbility) == 0x000008, "Member 'EndBattleAPI_GetDataObjectBattleAbility::dataObjectBattleAbility' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDataObjectBattleAbility, ReturnValue) == 0x000028, "Member 'EndBattleAPI_GetDataObjectBattleAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDataObjectBattleDamageSource
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetDataObjectBattleDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataObjectBattleDamageSourceAccessor dataObjectBattleDamageSource;                      // 0x0008(0x0020)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetDataObjectBattleDamageSource) == 0x000008, "Wrong alignment on EndBattleAPI_GetDataObjectBattleDamageSource");
static_assert(sizeof(EndBattleAPI_GetDataObjectBattleDamageSource) == 0x000030, "Wrong size on EndBattleAPI_GetDataObjectBattleDamageSource");
static_assert(offsetof(EndBattleAPI_GetDataObjectBattleDamageSource, DamageSourceID) == 0x000000, "Member 'EndBattleAPI_GetDataObjectBattleDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDataObjectBattleDamageSource, dataObjectBattleDamageSource) == 0x000008, "Member 'EndBattleAPI_GetDataObjectBattleDamageSource::dataObjectBattleDamageSource' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDataObjectBattleDamageSource, ReturnValue) == 0x000028, "Member 'EndBattleAPI_GetDataObjectBattleDamageSource::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDataObjectBattleDamageSourceFromAbilityID
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataObjectBattleDamageSourceAccessor dataObjectBattleDamageSource;                      // 0x0008(0x0020)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID) == 0x000008, "Wrong alignment on EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID");
static_assert(sizeof(EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID) == 0x000030, "Wrong size on EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID");
static_assert(offsetof(EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID, AbilityId) == 0x000000, "Member 'EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID::AbilityId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID, dataObjectBattleDamageSource) == 0x000008, "Member 'EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID::dataObjectBattleDamageSource' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID, ReturnValue) == 0x000028, "Member 'EndBattleAPI_GetDataObjectBattleDamageSourceFromAbilityID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDummyEnemies
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetDummyEnemies final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDummyEnemies) == 0x000008, "Wrong alignment on EndBattleAPI_GetDummyEnemies");
static_assert(sizeof(EndBattleAPI_GetDummyEnemies) == 0x000010, "Wrong size on EndBattleAPI_GetDummyEnemies");
static_assert(offsetof(EndBattleAPI_GetDummyEnemies, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetDummyEnemies::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDummyNPCsFromID
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetDummyNPCsFromID final
{
public:
	class FName                                   Upper;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDummyNPCsFromID) == 0x000008, "Wrong alignment on EndBattleAPI_GetDummyNPCsFromID");
static_assert(sizeof(EndBattleAPI_GetDummyNPCsFromID) == 0x000020, "Wrong size on EndBattleAPI_GetDummyNPCsFromID");
static_assert(offsetof(EndBattleAPI_GetDummyNPCsFromID, Upper) == 0x000000, "Member 'EndBattleAPI_GetDummyNPCsFromID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDummyNPCsFromID, Lower) == 0x000008, "Member 'EndBattleAPI_GetDummyNPCsFromID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDummyNPCsFromID, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetDummyNPCsFromID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDummyPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetDummyPartyMembers final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDummyPartyMembers) == 0x000008, "Wrong alignment on EndBattleAPI_GetDummyPartyMembers");
static_assert(sizeof(EndBattleAPI_GetDummyPartyMembers) == 0x000010, "Wrong size on EndBattleAPI_GetDummyPartyMembers");
static_assert(offsetof(EndBattleAPI_GetDummyPartyMembers, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetDummyPartyMembers::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnableBreakable
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAPI_GetEnableBreakable final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetEnableBreakable) == 0x000004, "Wrong alignment on EndBattleAPI_GetEnableBreakable");
static_assert(sizeof(EndBattleAPI_GetEnableBreakable) == 0x000014, "Wrong size on EndBattleAPI_GetEnableBreakable");
static_assert(offsetof(EndBattleAPI_GetEnableBreakable, LevelName) == 0x000000, "Member 'EndBattleAPI_GetEnableBreakable::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnableBreakable, AccessID) == 0x000008, "Member 'EndBattleAPI_GetEnableBreakable::AccessID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnableBreakable, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetEnableBreakable::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEncountBattleSceneIDs
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetEncountBattleSceneIDs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEncountBattleSceneIDs) == 0x000008, "Wrong alignment on EndBattleAPI_GetEncountBattleSceneIDs");
static_assert(sizeof(EndBattleAPI_GetEncountBattleSceneIDs) == 0x000010, "Wrong size on EndBattleAPI_GetEncountBattleSceneIDs");
static_assert(offsetof(EndBattleAPI_GetEncountBattleSceneIDs, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetEncountBattleSceneIDs::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMemberCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetEnemyMemberCount final
{
public:
	class FName                                   ContainRaceID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMemberCount) == 0x000004, "Wrong alignment on EndBattleAPI_GetEnemyMemberCount");
static_assert(sizeof(EndBattleAPI_GetEnemyMemberCount) == 0x00000C, "Wrong size on EndBattleAPI_GetEnemyMemberCount");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCount, ContainRaceID) == 0x000000, "Member 'EndBattleAPI_GetEnemyMemberCount::ContainRaceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetEnemyMemberCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMemberCountFromID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetEnemyMemberCountFromID final
{
public:
	class FName                                   Upper;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flip;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMemberCountFromID) == 0x000004, "Wrong alignment on EndBattleAPI_GetEnemyMemberCountFromID");
static_assert(sizeof(EndBattleAPI_GetEnemyMemberCountFromID) == 0x000018, "Wrong size on EndBattleAPI_GetEnemyMemberCountFromID");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCountFromID, Upper) == 0x000000, "Member 'EndBattleAPI_GetEnemyMemberCountFromID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCountFromID, Lower) == 0x000008, "Member 'EndBattleAPI_GetEnemyMemberCountFromID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCountFromID, Flip) == 0x000010, "Member 'EndBattleAPI_GetEnemyMemberCountFromID::Flip' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCountFromID, ReturnValue) == 0x000014, "Member 'EndBattleAPI_GetEnemyMemberCountFromID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMemberFromIDWithIndex
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetEnemyMemberFromIDWithIndex final
{
public:
	class FName                                   Upper;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIndex;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMemberFromIDWithIndex) == 0x000008, "Wrong alignment on EndBattleAPI_GetEnemyMemberFromIDWithIndex");
static_assert(sizeof(EndBattleAPI_GetEnemyMemberFromIDWithIndex) == 0x000020, "Wrong size on EndBattleAPI_GetEnemyMemberFromIDWithIndex");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberFromIDWithIndex, Upper) == 0x000000, "Member 'EndBattleAPI_GetEnemyMemberFromIDWithIndex::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberFromIDWithIndex, Lower) == 0x000008, "Member 'EndBattleAPI_GetEnemyMemberFromIDWithIndex::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberFromIDWithIndex, InIndex) == 0x000010, "Member 'EndBattleAPI_GetEnemyMemberFromIDWithIndex::InIndex' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberFromIDWithIndex, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetEnemyMemberFromIDWithIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMembersFromID
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetEnemyMembersFromID final
{
public:
	class FName                                   Upper;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flip;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMembersFromID) == 0x000008, "Wrong alignment on EndBattleAPI_GetEnemyMembersFromID");
static_assert(sizeof(EndBattleAPI_GetEnemyMembersFromID) == 0x000028, "Wrong size on EndBattleAPI_GetEnemyMembersFromID");
static_assert(offsetof(EndBattleAPI_GetEnemyMembersFromID, Upper) == 0x000000, "Member 'EndBattleAPI_GetEnemyMembersFromID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMembersFromID, Lower) == 0x000008, "Member 'EndBattleAPI_GetEnemyMembersFromID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMembersFromID, Flip) == 0x000010, "Member 'EndBattleAPI_GetEnemyMembersFromID::Flip' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMembersFromID, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetEnemyMembersFromID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMembersRef
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetEnemyMembersRef final
{
public:
	TArray<class AEndCharacter*>                  Out;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMembersRef) == 0x000008, "Wrong alignment on EndBattleAPI_GetEnemyMembersRef");
static_assert(sizeof(EndBattleAPI_GetEnemyMembersRef) == 0x000010, "Wrong size on EndBattleAPI_GetEnemyMembersRef");
static_assert(offsetof(EndBattleAPI_GetEnemyMembersRef, Out) == 0x000000, "Member 'EndBattleAPI_GetEnemyMembersRef::Out' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyTerritorySituationType
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetEnemyTerritorySituationType final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEnemyTerritorySituationType               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetEnemyTerritorySituationType) == 0x000004, "Wrong alignment on EndBattleAPI_GetEnemyTerritorySituationType");
static_assert(sizeof(EndBattleAPI_GetEnemyTerritorySituationType) == 0x00000C, "Wrong size on EndBattleAPI_GetEnemyTerritorySituationType");
static_assert(offsetof(EndBattleAPI_GetEnemyTerritorySituationType, territoryID) == 0x000000, "Member 'EndBattleAPI_GetEnemyTerritorySituationType::territoryID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyTerritorySituationType, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetEnemyTerritorySituationType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnvironmentSocketTransform
// 0x0050 (0x0050 - 0x0000)
struct EndBattleAPI_GetEnvironmentSocketTransform final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnvironmentSocketTransform) == 0x000010, "Wrong alignment on EndBattleAPI_GetEnvironmentSocketTransform");
static_assert(sizeof(EndBattleAPI_GetEnvironmentSocketTransform) == 0x000050, "Wrong size on EndBattleAPI_GetEnvironmentSocketTransform");
static_assert(offsetof(EndBattleAPI_GetEnvironmentSocketTransform, LevelName) == 0x000000, "Member 'EndBattleAPI_GetEnvironmentSocketTransform::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnvironmentSocketTransform, AccessID) == 0x000008, "Member 'EndBattleAPI_GetEnvironmentSocketTransform::AccessID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnvironmentSocketTransform, SocketName) == 0x000010, "Member 'EndBattleAPI_GetEnvironmentSocketTransform::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnvironmentSocketTransform, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetEnvironmentSocketTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetExpectationCountInCapsuleArea
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetExpectationCountInCapsuleArea final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiBattleTargetType                        TargetType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleRadius;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleLength;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FowardVectorRotateAngle;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawDebug;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawDebugTime;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetExpectationCountInCapsuleArea) == 0x000008, "Wrong alignment on EndBattleAPI_GetExpectationCountInCapsuleArea");
static_assert(sizeof(EndBattleAPI_GetExpectationCountInCapsuleArea) == 0x000028, "Wrong size on EndBattleAPI_GetExpectationCountInCapsuleArea");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, TargetType) == 0x000008, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::TargetType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, CapsuleRadius) == 0x00000C, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, CapsuleLength) == 0x000010, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::CapsuleLength' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, FowardVectorRotateAngle) == 0x000014, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::FowardVectorRotateAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, InDrawDebug) == 0x000018, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::InDrawDebug' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, InDrawDebugTime) == 0x00001C, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::InDrawDebugTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetExpectationCountInCapsuleAreaByLocation
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiBattleTargetType                        TargetType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleRadius;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleLength;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FowardVectorRotateAngle;                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawDebug;                                       // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawDebugTime;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation");
static_assert(sizeof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation) == 0x000030, "Wrong size on EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, TargetType) == 0x000008, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::TargetType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, CapsuleRadius) == 0x00000C, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, CapsuleLength) == 0x000010, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::CapsuleLength' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, TargetLocation) == 0x000014, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, FowardVectorRotateAngle) == 0x000020, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::FowardVectorRotateAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, InDrawDebug) == 0x000024, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::InDrawDebug' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, InDrawDebugTime) == 0x000028, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::InDrawDebugTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, ReturnValue) == 0x00002C, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetExpectationCountInConeArea
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetExpectationCountInConeArea final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiBattleTargetType                        TargetType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConeRadius;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeAngle;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FowardVectorRotateAngle;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawDebug;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawDebugTime;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetExpectationCountInConeArea) == 0x000008, "Wrong alignment on EndBattleAPI_GetExpectationCountInConeArea");
static_assert(sizeof(EndBattleAPI_GetExpectationCountInConeArea) == 0x000028, "Wrong size on EndBattleAPI_GetExpectationCountInConeArea");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetExpectationCountInConeArea::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, TargetType) == 0x000008, "Member 'EndBattleAPI_GetExpectationCountInConeArea::TargetType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, ConeRadius) == 0x00000C, "Member 'EndBattleAPI_GetExpectationCountInConeArea::ConeRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, ConeAngle) == 0x000010, "Member 'EndBattleAPI_GetExpectationCountInConeArea::ConeAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, FowardVectorRotateAngle) == 0x000014, "Member 'EndBattleAPI_GetExpectationCountInConeArea::FowardVectorRotateAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, InDrawDebug) == 0x000018, "Member 'EndBattleAPI_GetExpectationCountInConeArea::InDrawDebug' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, InDrawDebugTime) == 0x00001C, "Member 'EndBattleAPI_GetExpectationCountInConeArea::InDrawDebugTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetExpectationCountInConeArea::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetExpectationCountInConeAreaByLocation
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetExpectationCountInConeAreaByLocation final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiBattleTargetType                        TargetType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConeRadius;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeAngle;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FowardVectorRotateAngle;                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawDebug;                                       // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawDebugTime;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetExpectationCountInConeAreaByLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetExpectationCountInConeAreaByLocation");
static_assert(sizeof(EndBattleAPI_GetExpectationCountInConeAreaByLocation) == 0x000030, "Wrong size on EndBattleAPI_GetExpectationCountInConeAreaByLocation");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, TargetType) == 0x000008, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::TargetType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, ConeRadius) == 0x00000C, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::ConeRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, ConeAngle) == 0x000010, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::ConeAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, TargetLocation) == 0x000014, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, FowardVectorRotateAngle) == 0x000020, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::FowardVectorRotateAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, InDrawDebug) == 0x000024, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::InDrawDebug' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, InDrawDebugTime) == 0x000028, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::InDrawDebugTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, ReturnValue) == 0x00002C, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetFarestActor
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetFarestActor final
{
public:
	class AActor*                                 outActor;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 baseActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         compareActorList;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ignoreActorList;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetFarestActor) == 0x000008, "Wrong alignment on EndBattleAPI_GetFarestActor");
static_assert(sizeof(EndBattleAPI_GetFarestActor) == 0x000030, "Wrong size on EndBattleAPI_GetFarestActor");
static_assert(offsetof(EndBattleAPI_GetFarestActor, outActor) == 0x000000, "Member 'EndBattleAPI_GetFarestActor::outActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestActor, baseActor) == 0x000008, "Member 'EndBattleAPI_GetFarestActor::baseActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestActor, compareActorList) == 0x000010, "Member 'EndBattleAPI_GetFarestActor::compareActorList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestActor, ignoreActorList) == 0x000020, "Member 'EndBattleAPI_GetFarestActor::ignoreActorList' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetFarestCharacter
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetFarestCharacter final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  InList;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetFarestCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_GetFarestCharacter");
static_assert(sizeof(EndBattleAPI_GetFarestCharacter) == 0x000028, "Wrong size on EndBattleAPI_GetFarestCharacter");
static_assert(offsetof(EndBattleAPI_GetFarestCharacter, InLocation) == 0x000000, "Member 'EndBattleAPI_GetFarestCharacter::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestCharacter, InList) == 0x000010, "Member 'EndBattleAPI_GetFarestCharacter::InList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestCharacter, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetFarestCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetFarestPhysics
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetFarestPhysics final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetFarestPhysics) == 0x000008, "Wrong alignment on EndBattleAPI_GetFarestPhysics");
static_assert(sizeof(EndBattleAPI_GetFarestPhysics) == 0x000020, "Wrong size on EndBattleAPI_GetFarestPhysics");
static_assert(offsetof(EndBattleAPI_GetFarestPhysics, InChara) == 0x000000, "Member 'EndBattleAPI_GetFarestPhysics::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestPhysics, InRadius) == 0x000008, "Member 'EndBattleAPI_GetFarestPhysics::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestPhysics, InName) == 0x00000C, "Member 'EndBattleAPI_GetFarestPhysics::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestPhysics, InContain) == 0x000014, "Member 'EndBattleAPI_GetFarestPhysics::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestPhysics, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetFarestPhysics::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetFirstDamageTime
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetFirstDamageTime final
{
public:
	float                                         FirstDamageTime;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequence*                    AnimSequecne;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetFirstDamageTime) == 0x000008, "Wrong alignment on EndBattleAPI_GetFirstDamageTime");
static_assert(sizeof(EndBattleAPI_GetFirstDamageTime) == 0x000018, "Wrong size on EndBattleAPI_GetFirstDamageTime");
static_assert(offsetof(EndBattleAPI_GetFirstDamageTime, FirstDamageTime) == 0x000000, "Member 'EndBattleAPI_GetFirstDamageTime::FirstDamageTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFirstDamageTime, AnimSequecne) == 0x000008, "Member 'EndBattleAPI_GetFirstDamageTime::AnimSequecne' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFirstDamageTime, StartTime) == 0x000010, "Member 'EndBattleAPI_GetFirstDamageTime::StartTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFirstDamageTime, ReturnValue) == 0x000014, "Member 'EndBattleAPI_GetFirstDamageTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetGuardTime
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetGuardTime final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetGuardTime) == 0x000008, "Wrong alignment on EndBattleAPI_GetGuardTime");
static_assert(sizeof(EndBattleAPI_GetGuardTime) == 0x000010, "Wrong size on EndBattleAPI_GetGuardTime");
static_assert(offsetof(EndBattleAPI_GetGuardTime, InChara) == 0x000000, "Member 'EndBattleAPI_GetGuardTime::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetGuardTime, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetGuardTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetHiddenBreakable
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAPI_GetHiddenBreakable final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetHiddenBreakable) == 0x000004, "Wrong alignment on EndBattleAPI_GetHiddenBreakable");
static_assert(sizeof(EndBattleAPI_GetHiddenBreakable) == 0x000014, "Wrong size on EndBattleAPI_GetHiddenBreakable");
static_assert(offsetof(EndBattleAPI_GetHiddenBreakable, LevelName) == 0x000000, "Member 'EndBattleAPI_GetHiddenBreakable::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetHiddenBreakable, AccessID) == 0x000008, "Member 'EndBattleAPI_GetHiddenBreakable::AccessID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetHiddenBreakable, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetHiddenBreakable::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetHighestPriorityBattleCharaCategory
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetHighestPriorityBattleCharaCategory final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCharaCategoryType                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetHighestPriorityBattleCharaCategory) == 0x000004, "Wrong alignment on EndBattleAPI_GetHighestPriorityBattleCharaCategory");
static_assert(sizeof(EndBattleAPI_GetHighestPriorityBattleCharaCategory) == 0x00000C, "Wrong size on EndBattleAPI_GetHighestPriorityBattleCharaCategory");
static_assert(offsetof(EndBattleAPI_GetHighestPriorityBattleCharaCategory, territoryID) == 0x000000, "Member 'EndBattleAPI_GetHighestPriorityBattleCharaCategory::territoryID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetHighestPriorityBattleCharaCategory, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetHighestPriorityBattleCharaCategory::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetHPMax
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetHPMax final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetHPMax) == 0x000008, "Wrong alignment on EndBattleAPI_GetHPMax");
static_assert(sizeof(EndBattleAPI_GetHPMax) == 0x000010, "Wrong size on EndBattleAPI_GetHPMax");
static_assert(offsetof(EndBattleAPI_GetHPMax, Character) == 0x000000, "Member 'EndBattleAPI_GetHPMax::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetHPMax, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetHPMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetHPPercent
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetHPPercent final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetHPPercent) == 0x000008, "Wrong alignment on EndBattleAPI_GetHPPercent");
static_assert(sizeof(EndBattleAPI_GetHPPercent) == 0x000010, "Wrong size on EndBattleAPI_GetHPPercent");
static_assert(offsetof(EndBattleAPI_GetHPPercent, InChara) == 0x000000, "Member 'EndBattleAPI_GetHPPercent::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetHPPercent, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetHPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetKeep
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetKeep final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetKeep) == 0x000008, "Wrong alignment on EndBattleAPI_GetKeep");
static_assert(sizeof(EndBattleAPI_GetKeep) == 0x000010, "Wrong size on EndBattleAPI_GetKeep");
static_assert(offsetof(EndBattleAPI_GetKeep, InChara) == 0x000000, "Member 'EndBattleAPI_GetKeep::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetKeep, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetKeep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetLayoutTransform
// 0x0040 (0x0040 - 0x0000)
struct EndBattleAPI_GetLayoutTransform final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetLayoutTransform) == 0x000010, "Wrong alignment on EndBattleAPI_GetLayoutTransform");
static_assert(sizeof(EndBattleAPI_GetLayoutTransform) == 0x000040, "Wrong size on EndBattleAPI_GetLayoutTransform");
static_assert(offsetof(EndBattleAPI_GetLayoutTransform, NodeName) == 0x000000, "Member 'EndBattleAPI_GetLayoutTransform::NodeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetLayoutTransform, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetLayoutTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetMagicAttack
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetMagicAttack final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetMagicAttack) == 0x000008, "Wrong alignment on EndBattleAPI_GetMagicAttack");
static_assert(sizeof(EndBattleAPI_GetMagicAttack) == 0x000010, "Wrong size on EndBattleAPI_GetMagicAttack");
static_assert(offsetof(EndBattleAPI_GetMagicAttack, Character) == 0x000000, "Member 'EndBattleAPI_GetMagicAttack::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMagicAttack, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetMagicAttack::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetMagicDefense
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetMagicDefense final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetMagicDefense) == 0x000008, "Wrong alignment on EndBattleAPI_GetMagicDefense");
static_assert(sizeof(EndBattleAPI_GetMagicDefense) == 0x000010, "Wrong size on EndBattleAPI_GetMagicDefense");
static_assert(offsetof(EndBattleAPI_GetMagicDefense, InChara) == 0x000000, "Member 'EndBattleAPI_GetMagicDefense::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMagicDefense, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetMagicDefense::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetMateriaParam
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetMateriaParam final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeapon;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndBattleMateriaParam                 Param;                                             // 0x0010(0x0014)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetMateriaParam) == 0x000008, "Wrong alignment on EndBattleAPI_GetMateriaParam");
static_assert(sizeof(EndBattleAPI_GetMateriaParam) == 0x000028, "Wrong size on EndBattleAPI_GetMateriaParam");
static_assert(offsetof(EndBattleAPI_GetMateriaParam, InChara) == 0x000000, "Member 'EndBattleAPI_GetMateriaParam::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMateriaParam, bWeapon) == 0x000008, "Member 'EndBattleAPI_GetMateriaParam::bWeapon' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMateriaParam, Slot) == 0x00000C, "Member 'EndBattleAPI_GetMateriaParam::Slot' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMateriaParam, Param) == 0x000010, "Member 'EndBattleAPI_GetMateriaParam::Param' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMateriaParam, ReturnValue) == 0x000024, "Member 'EndBattleAPI_GetMateriaParam::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetMotionList
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetMotionList final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetMotionList) == 0x000008, "Wrong alignment on EndBattleAPI_GetMotionList");
static_assert(sizeof(EndBattleAPI_GetMotionList) == 0x000018, "Wrong size on EndBattleAPI_GetMotionList");
static_assert(offsetof(EndBattleAPI_GetMotionList, InChara) == 0x000000, "Member 'EndBattleAPI_GetMotionList::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMotionList, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetMotionList::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNavVolumeFromAngle
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetNavVolumeFromAngle final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngleRange;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCompareDistanceType                 InType;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InGroup;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBehind;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndNavModifierVolume*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNavVolumeFromAngle) == 0x000008, "Wrong alignment on EndBattleAPI_GetNavVolumeFromAngle");
static_assert(sizeof(EndBattleAPI_GetNavVolumeFromAngle) == 0x000020, "Wrong size on EndBattleAPI_GetNavVolumeFromAngle");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, InChara) == 0x000000, "Member 'EndBattleAPI_GetNavVolumeFromAngle::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, InAngleRange) == 0x000008, "Member 'EndBattleAPI_GetNavVolumeFromAngle::InAngleRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, InType) == 0x00000C, "Member 'EndBattleAPI_GetNavVolumeFromAngle::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, InGroup) == 0x000010, "Member 'EndBattleAPI_GetNavVolumeFromAngle::InGroup' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, InBehind) == 0x000014, "Member 'EndBattleAPI_GetNavVolumeFromAngle::InBehind' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetNavVolumeFromAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNavVolumeFromType
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetNavVolumeFromType final
{
public:
	class FName                                   InBattleSceneID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModifierVolumeType                           InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndNavModifierVolume*>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNavVolumeFromType) == 0x000008, "Wrong alignment on EndBattleAPI_GetNavVolumeFromType");
static_assert(sizeof(EndBattleAPI_GetNavVolumeFromType) == 0x000020, "Wrong size on EndBattleAPI_GetNavVolumeFromType");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromType, InBattleSceneID) == 0x000000, "Member 'EndBattleAPI_GetNavVolumeFromType::InBattleSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromType, InType) == 0x000008, "Member 'EndBattleAPI_GetNavVolumeFromType::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromType, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetNavVolumeFromType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestActor
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetNearestActor final
{
public:
	class AActor*                                 outActor;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 baseActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         compareActorList;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ignoreActorList;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestActor) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestActor");
static_assert(sizeof(EndBattleAPI_GetNearestActor) == 0x000030, "Wrong size on EndBattleAPI_GetNearestActor");
static_assert(offsetof(EndBattleAPI_GetNearestActor, outActor) == 0x000000, "Member 'EndBattleAPI_GetNearestActor::outActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestActor, baseActor) == 0x000008, "Member 'EndBattleAPI_GetNearestActor::baseActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestActor, compareActorList) == 0x000010, "Member 'EndBattleAPI_GetNearestActor::compareActorList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestActor, ignoreActorList) == 0x000020, "Member 'EndBattleAPI_GetNearestActor::ignoreActorList' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestCharacter
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetNearestCharacter final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  InList;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestCharacter");
static_assert(sizeof(EndBattleAPI_GetNearestCharacter) == 0x000028, "Wrong size on EndBattleAPI_GetNearestCharacter");
static_assert(offsetof(EndBattleAPI_GetNearestCharacter, InLocation) == 0x000000, "Member 'EndBattleAPI_GetNearestCharacter::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestCharacter, InList) == 0x000010, "Member 'EndBattleAPI_GetNearestCharacter::InList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestCharacter, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetNearestCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestOwnVolume
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetNearestOwnVolume final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestOwnVolume) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestOwnVolume");
static_assert(sizeof(EndBattleAPI_GetNearestOwnVolume) == 0x000020, "Wrong size on EndBattleAPI_GetNearestOwnVolume");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolume, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestOwnVolume::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolume, InLocation) == 0x000008, "Member 'EndBattleAPI_GetNearestOwnVolume::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolume, ReturnValue) == 0x000014, "Member 'EndBattleAPI_GetNearestOwnVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestOwnVolumeWithExtent
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetNearestOwnVolumeWithExtent final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InExtent;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetNearestOwnVolumeWithExtent) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestOwnVolumeWithExtent");
static_assert(sizeof(EndBattleAPI_GetNearestOwnVolumeWithExtent) == 0x000030, "Wrong size on EndBattleAPI_GetNearestOwnVolumeWithExtent");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolumeWithExtent, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestOwnVolumeWithExtent::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolumeWithExtent, InLocation) == 0x000008, "Member 'EndBattleAPI_GetNearestOwnVolumeWithExtent::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolumeWithExtent, InExtent) == 0x000014, "Member 'EndBattleAPI_GetNearestOwnVolumeWithExtent::InExtent' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolumeWithExtent, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetNearestOwnVolumeWithExtent::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestPhysics
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetNearestPhysics final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestPhysics) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestPhysics");
static_assert(sizeof(EndBattleAPI_GetNearestPhysics) == 0x000020, "Wrong size on EndBattleAPI_GetNearestPhysics");
static_assert(offsetof(EndBattleAPI_GetNearestPhysics, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestPhysics::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysics, InName) == 0x000008, "Member 'EndBattleAPI_GetNearestPhysics::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysics, InContain) == 0x000010, "Member 'EndBattleAPI_GetNearestPhysics::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysics, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetNearestPhysics::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestPhysicsFromActorName
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetNearestPhysicsFromActorName final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestPhysicsFromActorName) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestPhysicsFromActorName");
static_assert(sizeof(EndBattleAPI_GetNearestPhysicsFromActorName) == 0x000020, "Wrong size on EndBattleAPI_GetNearestPhysicsFromActorName");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsFromActorName, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestPhysicsFromActorName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsFromActorName, InName) == 0x000008, "Member 'EndBattleAPI_GetNearestPhysicsFromActorName::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsFromActorName, InContain) == 0x000010, "Member 'EndBattleAPI_GetNearestPhysicsFromActorName::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsFromActorName, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetNearestPhysicsFromActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestPhysicsInVolume
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetNearestPhysicsInVolume final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVolumeName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPossetion;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestPhysicsInVolume) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestPhysicsInVolume");
static_assert(sizeof(EndBattleAPI_GetNearestPhysicsInVolume) == 0x000028, "Wrong size on EndBattleAPI_GetNearestPhysicsInVolume");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolume, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestPhysicsInVolume::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolume, InVolumeName) == 0x000008, "Member 'EndBattleAPI_GetNearestPhysicsInVolume::InVolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolume, InName) == 0x000010, "Member 'EndBattleAPI_GetNearestPhysicsInVolume::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolume, InContain) == 0x000018, "Member 'EndBattleAPI_GetNearestPhysicsInVolume::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolume, InPossetion) == 0x000019, "Member 'EndBattleAPI_GetNearestPhysicsInVolume::InPossetion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolume, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetNearestPhysicsInVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestPhysicsInVolumeFromLocation
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetNearestPhysicsInVolumeFromLocation final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVolumeName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPossetion;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCanPosettion;                                    // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestPhysicsInVolumeFromLocation");
static_assert(sizeof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation) == 0x000030, "Wrong size on EndBattleAPI_GetNearestPhysicsInVolumeFromLocation");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InVolumeName) == 0x000008, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InVolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, LocationName) == 0x000010, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::LocationName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InName) == 0x000018, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InContain) == 0x000020, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InPossetion) == 0x000021, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InPossetion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InCanPosettion) == 0x000022, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InCanPosettion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, ReturnValue) == 0x000028, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestRangePartyCharacter
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetNearestRangePartyCharacter final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ZVisible;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestRangePartyCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestRangePartyCharacter");
static_assert(sizeof(EndBattleAPI_GetNearestRangePartyCharacter) == 0x000018, "Wrong size on EndBattleAPI_GetNearestRangePartyCharacter");
static_assert(offsetof(EndBattleAPI_GetNearestRangePartyCharacter, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestRangePartyCharacter::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestRangePartyCharacter, Range) == 0x000008, "Member 'EndBattleAPI_GetNearestRangePartyCharacter::Range' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestRangePartyCharacter, ZVisible) == 0x00000C, "Member 'EndBattleAPI_GetNearestRangePartyCharacter::ZVisible' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestRangePartyCharacter, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetNearestRangePartyCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestSocketName
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetNearestSocketName final
{
public:
	struct FVector                                BaseLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SocketNameList;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AEndCharacter*                          HasSocketNameChara;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestSocketName) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestSocketName");
static_assert(sizeof(EndBattleAPI_GetNearestSocketName) == 0x000030, "Wrong size on EndBattleAPI_GetNearestSocketName");
static_assert(offsetof(EndBattleAPI_GetNearestSocketName, BaseLocation) == 0x000000, "Member 'EndBattleAPI_GetNearestSocketName::BaseLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestSocketName, SocketNameList) == 0x000010, "Member 'EndBattleAPI_GetNearestSocketName::SocketNameList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestSocketName, HasSocketNameChara) == 0x000020, "Member 'EndBattleAPI_GetNearestSocketName::HasSocketNameChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestSocketName, ReturnValue) == 0x000028, "Member 'EndBattleAPI_GetNearestSocketName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestTargetPointName
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetNearestTargetPointName final
{
public:
	struct FVector                                BaseLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           targetPointNameList;                               // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestTargetPointName) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestTargetPointName");
static_assert(sizeof(EndBattleAPI_GetNearestTargetPointName) == 0x000028, "Wrong size on EndBattleAPI_GetNearestTargetPointName");
static_assert(offsetof(EndBattleAPI_GetNearestTargetPointName, BaseLocation) == 0x000000, "Member 'EndBattleAPI_GetNearestTargetPointName::BaseLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestTargetPointName, targetPointNameList) == 0x000010, "Member 'EndBattleAPI_GetNearestTargetPointName::targetPointNameList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestTargetPointName, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetNearestTargetPointName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetOffsetTransform
// 0x0070 (0x0070 - 0x0000)
struct EndBattleAPI_GetOffsetTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGetOffsetTransform                           RotationType;                                      // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0040(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetOffsetTransform) == 0x000010, "Wrong alignment on EndBattleAPI_GetOffsetTransform");
static_assert(sizeof(EndBattleAPI_GetOffsetTransform) == 0x000070, "Wrong size on EndBattleAPI_GetOffsetTransform");
static_assert(offsetof(EndBattleAPI_GetOffsetTransform, Transform) == 0x000000, "Member 'EndBattleAPI_GetOffsetTransform::Transform' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetOffsetTransform, Offset) == 0x000030, "Member 'EndBattleAPI_GetOffsetTransform::Offset' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetOffsetTransform, RotationType) == 0x00003C, "Member 'EndBattleAPI_GetOffsetTransform::RotationType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetOffsetTransform, ReturnValue) == 0x000040, "Member 'EndBattleAPI_GetOffsetTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetOverlapVolumes
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetOverlapVolumes final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndNavModifierVolume*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetOverlapVolumes) == 0x000008, "Wrong alignment on EndBattleAPI_GetOverlapVolumes");
static_assert(sizeof(EndBattleAPI_GetOverlapVolumes) == 0x000018, "Wrong size on EndBattleAPI_GetOverlapVolumes");
static_assert(offsetof(EndBattleAPI_GetOverlapVolumes, InChara) == 0x000000, "Member 'EndBattleAPI_GetOverlapVolumes::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetOverlapVolumes, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetOverlapVolumes::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPartsHPPercent
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetPartsHPPercent final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaPartsSpecID;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetPartsHPPercent) == 0x000008, "Wrong alignment on EndBattleAPI_GetPartsHPPercent");
static_assert(sizeof(EndBattleAPI_GetPartsHPPercent) == 0x000018, "Wrong size on EndBattleAPI_GetPartsHPPercent");
static_assert(offsetof(EndBattleAPI_GetPartsHPPercent, Character) == 0x000000, "Member 'EndBattleAPI_GetPartsHPPercent::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPartsHPPercent, BattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_GetPartsHPPercent::BattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPartsHPPercent, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetPartsHPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPartyLeader
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_GetPartyLeader final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPartyLeader) == 0x000008, "Wrong alignment on EndBattleAPI_GetPartyLeader");
static_assert(sizeof(EndBattleAPI_GetPartyLeader) == 0x000008, "Wrong size on EndBattleAPI_GetPartyLeader");
static_assert(offsetof(EndBattleAPI_GetPartyLeader, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetPartyLeader::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPartyMembersIgnoreDead
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetPartyMembersIgnoreDead final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPartyMembersIgnoreDead) == 0x000008, "Wrong alignment on EndBattleAPI_GetPartyMembersIgnoreDead");
static_assert(sizeof(EndBattleAPI_GetPartyMembersIgnoreDead) == 0x000010, "Wrong size on EndBattleAPI_GetPartyMembersIgnoreDead");
static_assert(offsetof(EndBattleAPI_GetPartyMembersIgnoreDead, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetPartyMembersIgnoreDead::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhysics
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetPhysics final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPhysics) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhysics");
static_assert(sizeof(EndBattleAPI_GetPhysics) == 0x000020, "Wrong size on EndBattleAPI_GetPhysics");
static_assert(offsetof(EndBattleAPI_GetPhysics, InName) == 0x000000, "Member 'EndBattleAPI_GetPhysics::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysics, InContain) == 0x000008, "Member 'EndBattleAPI_GetPhysics::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysics, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetPhysics::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhysicsAttack
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetPhysicsAttack final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetPhysicsAttack) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhysicsAttack");
static_assert(sizeof(EndBattleAPI_GetPhysicsAttack) == 0x000010, "Wrong size on EndBattleAPI_GetPhysicsAttack");
static_assert(offsetof(EndBattleAPI_GetPhysicsAttack, Character) == 0x000000, "Member 'EndBattleAPI_GetPhysicsAttack::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsAttack, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetPhysicsAttack::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhysicsDefense
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetPhysicsDefense final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetPhysicsDefense) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhysicsDefense");
static_assert(sizeof(EndBattleAPI_GetPhysicsDefense) == 0x000010, "Wrong size on EndBattleAPI_GetPhysicsDefense");
static_assert(offsetof(EndBattleAPI_GetPhysicsDefense, InChara) == 0x000000, "Member 'EndBattleAPI_GetPhysicsDefense::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsDefense, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetPhysicsDefense::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhysicsFromActorName
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetPhysicsFromActorName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPhysicsFromActorName) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhysicsFromActorName");
static_assert(sizeof(EndBattleAPI_GetPhysicsFromActorName) == 0x000020, "Wrong size on EndBattleAPI_GetPhysicsFromActorName");
static_assert(offsetof(EndBattleAPI_GetPhysicsFromActorName, InName) == 0x000000, "Member 'EndBattleAPI_GetPhysicsFromActorName::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsFromActorName, InContain) == 0x000008, "Member 'EndBattleAPI_GetPhysicsFromActorName::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsFromActorName, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetPhysicsFromActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhysicsFromLocation
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetPhysicsFromLocation final
{
public:
	class FName                                   LocationName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndEnvironmentPhysicsStaticMeshActor*> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPhysicsFromLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhysicsFromLocation");
static_assert(sizeof(EndBattleAPI_GetPhysicsFromLocation) == 0x000018, "Wrong size on EndBattleAPI_GetPhysicsFromLocation");
static_assert(offsetof(EndBattleAPI_GetPhysicsFromLocation, LocationName) == 0x000000, "Member 'EndBattleAPI_GetPhysicsFromLocation::LocationName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsFromLocation, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetPhysicsFromLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhysicsInVolume
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetPhysicsInVolume final
{
public:
	class FName                                   InVolumeName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPossetion;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPhysicsInVolume) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhysicsInVolume");
static_assert(sizeof(EndBattleAPI_GetPhysicsInVolume) == 0x000028, "Wrong size on EndBattleAPI_GetPhysicsInVolume");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolume, InVolumeName) == 0x000000, "Member 'EndBattleAPI_GetPhysicsInVolume::InVolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolume, InName) == 0x000008, "Member 'EndBattleAPI_GetPhysicsInVolume::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolume, InContain) == 0x000010, "Member 'EndBattleAPI_GetPhysicsInVolume::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolume, InPossetion) == 0x000011, "Member 'EndBattleAPI_GetPhysicsInVolume::InPossetion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolume, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetPhysicsInVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhysicsInVolumeFromLocation
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetPhysicsInVolumeFromLocation final
{
public:
	class FName                                   InVolumeName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPossetion;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCanPosettion;                                    // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPhysicsInVolumeFromLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhysicsInVolumeFromLocation");
static_assert(sizeof(EndBattleAPI_GetPhysicsInVolumeFromLocation) == 0x000030, "Wrong size on EndBattleAPI_GetPhysicsInVolumeFromLocation");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, InVolumeName) == 0x000000, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::InVolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, LocationName) == 0x000008, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::LocationName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, InName) == 0x000010, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, InContain) == 0x000018, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, InPossetion) == 0x000019, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::InPossetion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, InCanPosettion) == 0x00001A, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::InCanPosettion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPlayerCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetPlayerCharacter final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPlayerCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_GetPlayerCharacter");
static_assert(sizeof(EndBattleAPI_GetPlayerCharacter) == 0x000010, "Wrong size on EndBattleAPI_GetPlayerCharacter");
static_assert(offsetof(EndBattleAPI_GetPlayerCharacter, Type) == 0x000000, "Member 'EndBattleAPI_GetPlayerCharacter::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPlayerCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetPlayerCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPlayerType
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetPlayerType final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetPlayerType) == 0x000008, "Wrong alignment on EndBattleAPI_GetPlayerType");
static_assert(sizeof(EndBattleAPI_GetPlayerType) == 0x000010, "Wrong size on EndBattleAPI_GetPlayerType");
static_assert(offsetof(EndBattleAPI_GetPlayerType, InChara) == 0x000000, "Member 'EndBattleAPI_GetPlayerType::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPlayerType, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetPlayerType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPlayingExtraActionSequenceNames
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetPlayingExtraActionSequenceNames final
{
public:
	TArray<class FName>                           OutNames;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InChara;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPlayingExtraActionSequenceNames) == 0x000008, "Wrong alignment on EndBattleAPI_GetPlayingExtraActionSequenceNames");
static_assert(sizeof(EndBattleAPI_GetPlayingExtraActionSequenceNames) == 0x000018, "Wrong size on EndBattleAPI_GetPlayingExtraActionSequenceNames");
static_assert(offsetof(EndBattleAPI_GetPlayingExtraActionSequenceNames, OutNames) == 0x000000, "Member 'EndBattleAPI_GetPlayingExtraActionSequenceNames::OutNames' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPlayingExtraActionSequenceNames, InChara) == 0x000010, "Member 'EndBattleAPI_GetPlayingExtraActionSequenceNames::InChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetRaceName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetRaceName final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetRaceName) == 0x000008, "Wrong alignment on EndBattleAPI_GetRaceName");
static_assert(sizeof(EndBattleAPI_GetRaceName) == 0x000010, "Wrong size on EndBattleAPI_GetRaceName");
static_assert(offsetof(EndBattleAPI_GetRaceName, InChara) == 0x000000, "Member 'EndBattleAPI_GetRaceName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetRaceName, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetRaceName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetReplaceDamageSourceID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetReplaceDamageSourceID final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetReplaceDamageSourceID) == 0x000004, "Wrong alignment on EndBattleAPI_GetReplaceDamageSourceID");
static_assert(sizeof(EndBattleAPI_GetReplaceDamageSourceID) == 0x000010, "Wrong size on EndBattleAPI_GetReplaceDamageSourceID");
static_assert(offsetof(EndBattleAPI_GetReplaceDamageSourceID, InAbilityName) == 0x000000, "Member 'EndBattleAPI_GetReplaceDamageSourceID::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetReplaceDamageSourceID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetReplaceDamageSourceID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetResistanceElement
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetResistanceElement final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InType;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetResistanceElement) == 0x000008, "Wrong alignment on EndBattleAPI_GetResistanceElement");
static_assert(sizeof(EndBattleAPI_GetResistanceElement) == 0x000010, "Wrong size on EndBattleAPI_GetResistanceElement");
static_assert(offsetof(EndBattleAPI_GetResistanceElement, InChara) == 0x000000, "Member 'EndBattleAPI_GetResistanceElement::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetResistanceElement, InType) == 0x000008, "Member 'EndBattleAPI_GetResistanceElement::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetResistanceElement, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_GetResistanceElement::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetRiddenMasterCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetRiddenMasterCharacter final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetRiddenMasterCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_GetRiddenMasterCharacter");
static_assert(sizeof(EndBattleAPI_GetRiddenMasterCharacter) == 0x000010, "Wrong size on EndBattleAPI_GetRiddenMasterCharacter");
static_assert(offsetof(EndBattleAPI_GetRiddenMasterCharacter, Character) == 0x000000, "Member 'EndBattleAPI_GetRiddenMasterCharacter::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetRiddenMasterCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetRiddenMasterCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSocketTransform
// 0x0040 (0x0040 - 0x0000)
struct EndBattleAPI_GetSocketTransform final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSocketTransform) == 0x000010, "Wrong alignment on EndBattleAPI_GetSocketTransform");
static_assert(sizeof(EndBattleAPI_GetSocketTransform) == 0x000040, "Wrong size on EndBattleAPI_GetSocketTransform");
static_assert(offsetof(EndBattleAPI_GetSocketTransform, InChara) == 0x000000, "Member 'EndBattleAPI_GetSocketTransform::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSocketTransform, InSocketName) == 0x000008, "Member 'EndBattleAPI_GetSocketTransform::InSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSocketTransform, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetSocketTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSpecialStatusChangeParamFloat
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetSpecialStatusChangeParamFloat final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   paramID;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSpecialStatusChangeParamFloat) == 0x000008, "Wrong alignment on EndBattleAPI_GetSpecialStatusChangeParamFloat");
static_assert(sizeof(EndBattleAPI_GetSpecialStatusChangeParamFloat) == 0x000018, "Wrong size on EndBattleAPI_GetSpecialStatusChangeParamFloat");
static_assert(offsetof(EndBattleAPI_GetSpecialStatusChangeParamFloat, Character) == 0x000000, "Member 'EndBattleAPI_GetSpecialStatusChangeParamFloat::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSpecialStatusChangeParamFloat, Type) == 0x000008, "Member 'EndBattleAPI_GetSpecialStatusChangeParamFloat::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSpecialStatusChangeParamFloat, paramID) == 0x00000C, "Member 'EndBattleAPI_GetSpecialStatusChangeParamFloat::paramID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSpecialStatusChangeParamFloat, ReturnValue) == 0x000014, "Member 'EndBattleAPI_GetSpecialStatusChangeParamFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSpecialStatusChangeType
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetSpecialStatusChangeType final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EEndBattleSpecialStatusChangeType>     typeList;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSpecialStatusChangeType) == 0x000008, "Wrong alignment on EndBattleAPI_GetSpecialStatusChangeType");
static_assert(sizeof(EndBattleAPI_GetSpecialStatusChangeType) == 0x000018, "Wrong size on EndBattleAPI_GetSpecialStatusChangeType");
static_assert(offsetof(EndBattleAPI_GetSpecialStatusChangeType, Character) == 0x000000, "Member 'EndBattleAPI_GetSpecialStatusChangeType::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSpecialStatusChangeType, typeList) == 0x000008, "Member 'EndBattleAPI_GetSpecialStatusChangeType::typeList' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSpendATBBarTotal
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetSpendATBBarTotal final
{
public:
	class AEndCharacter*                          EndCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetSpendATBBarTotal) == 0x000008, "Wrong alignment on EndBattleAPI_GetSpendATBBarTotal");
static_assert(sizeof(EndBattleAPI_GetSpendATBBarTotal) == 0x000010, "Wrong size on EndBattleAPI_GetSpendATBBarTotal");
static_assert(offsetof(EndBattleAPI_GetSpendATBBarTotal, EndCharacter) == 0x000000, "Member 'EndBattleAPI_GetSpendATBBarTotal::EndCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSpendATBBarTotal, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetSpendATBBarTotal::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetStoryFlagConditionNum
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetStoryFlagConditionNum final
{
public:
	TArray<class FName>                           storyFlagNames;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Condition;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         initializeNum;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetStoryFlagConditionNum) == 0x000008, "Wrong alignment on EndBattleAPI_GetStoryFlagConditionNum");
static_assert(sizeof(EndBattleAPI_GetStoryFlagConditionNum) == 0x000020, "Wrong size on EndBattleAPI_GetStoryFlagConditionNum");
static_assert(offsetof(EndBattleAPI_GetStoryFlagConditionNum, storyFlagNames) == 0x000000, "Member 'EndBattleAPI_GetStoryFlagConditionNum::storyFlagNames' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetStoryFlagConditionNum, Condition) == 0x000010, "Member 'EndBattleAPI_GetStoryFlagConditionNum::Condition' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetStoryFlagConditionNum, initializeNum) == 0x000014, "Member 'EndBattleAPI_GetStoryFlagConditionNum::initializeNum' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetStoryFlagConditionNum, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetStoryFlagConditionNum::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSubCollisionPushBackSpeed
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetSubCollisionPushBackSpeed final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetSubCollisionPushBackSpeed) == 0x000008, "Wrong alignment on EndBattleAPI_GetSubCollisionPushBackSpeed");
static_assert(sizeof(EndBattleAPI_GetSubCollisionPushBackSpeed) == 0x000010, "Wrong size on EndBattleAPI_GetSubCollisionPushBackSpeed");
static_assert(offsetof(EndBattleAPI_GetSubCollisionPushBackSpeed, InChara) == 0x000000, "Member 'EndBattleAPI_GetSubCollisionPushBackSpeed::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSubCollisionPushBackSpeed, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetSubCollisionPushBackSpeed::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSummom
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetSummom final
{
public:
	EEndBattleSummonType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSummom) == 0x000008, "Wrong alignment on EndBattleAPI_GetSummom");
static_assert(sizeof(EndBattleAPI_GetSummom) == 0x000010, "Wrong size on EndBattleAPI_GetSummom");
static_assert(offsetof(EndBattleAPI_GetSummom, Type) == 0x000000, "Member 'EndBattleAPI_GetSummom::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSummom, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetSummom::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSummonAvilableTime
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_GetSummonAvilableTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSummonAvilableTime) == 0x000004, "Wrong alignment on EndBattleAPI_GetSummonAvilableTime");
static_assert(sizeof(EndBattleAPI_GetSummonAvilableTime) == 0x000004, "Wrong size on EndBattleAPI_GetSummonAvilableTime");
static_assert(offsetof(EndBattleAPI_GetSummonAvilableTime, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetSummonAvilableTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSummonTargetPointFromActorName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetSummonTargetPointFromActorName final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndBattleSummonTargetPoint*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSummonTargetPointFromActorName) == 0x000008, "Wrong alignment on EndBattleAPI_GetSummonTargetPointFromActorName");
static_assert(sizeof(EndBattleAPI_GetSummonTargetPointFromActorName) == 0x000010, "Wrong size on EndBattleAPI_GetSummonTargetPointFromActorName");
static_assert(offsetof(EndBattleAPI_GetSummonTargetPointFromActorName, InActorName) == 0x000000, "Member 'EndBattleAPI_GetSummonTargetPointFromActorName::InActorName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSummonTargetPointFromActorName, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetSummonTargetPointFromActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSyncActionID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetSyncActionID final
{
public:
	class AEndCharacter*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSyncActionID) == 0x000008, "Wrong alignment on EndBattleAPI_GetSyncActionID");
static_assert(sizeof(EndBattleAPI_GetSyncActionID) == 0x000010, "Wrong size on EndBattleAPI_GetSyncActionID");
static_assert(offsetof(EndBattleAPI_GetSyncActionID, Chara) == 0x000000, "Member 'EndBattleAPI_GetSyncActionID::Chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSyncActionID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetSyncActionID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSyncActionIDLast
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetSyncActionIDLast final
{
public:
	class AEndCharacter*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSyncActionIDLast) == 0x000008, "Wrong alignment on EndBattleAPI_GetSyncActionIDLast");
static_assert(sizeof(EndBattleAPI_GetSyncActionIDLast) == 0x000010, "Wrong size on EndBattleAPI_GetSyncActionIDLast");
static_assert(offsetof(EndBattleAPI_GetSyncActionIDLast, Chara) == 0x000000, "Member 'EndBattleAPI_GetSyncActionIDLast::Chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSyncActionIDLast, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetSyncActionIDLast::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetTargetCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetTargetCharacter final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetTargetCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_GetTargetCharacter");
static_assert(sizeof(EndBattleAPI_GetTargetCharacter) == 0x000010, "Wrong size on EndBattleAPI_GetTargetCharacter");
static_assert(offsetof(EndBattleAPI_GetTargetCharacter, Character) == 0x000000, "Member 'EndBattleAPI_GetTargetCharacter::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTargetCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetTargetCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetTargetCharacterAngle
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetTargetCharacterAngle final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          TargetCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetTargetCharacterAngle) == 0x000008, "Wrong alignment on EndBattleAPI_GetTargetCharacterAngle");
static_assert(sizeof(EndBattleAPI_GetTargetCharacterAngle) == 0x000018, "Wrong size on EndBattleAPI_GetTargetCharacterAngle");
static_assert(offsetof(EndBattleAPI_GetTargetCharacterAngle, Character) == 0x000000, "Member 'EndBattleAPI_GetTargetCharacterAngle::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTargetCharacterAngle, TargetCharacter) == 0x000008, "Member 'EndBattleAPI_GetTargetCharacterAngle::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTargetCharacterAngle, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetTargetCharacterAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetTargetLocationAngle
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetTargetLocationAngle final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetTargetLocationAngle) == 0x000008, "Wrong alignment on EndBattleAPI_GetTargetLocationAngle");
static_assert(sizeof(EndBattleAPI_GetTargetLocationAngle) == 0x000018, "Wrong size on EndBattleAPI_GetTargetLocationAngle");
static_assert(offsetof(EndBattleAPI_GetTargetLocationAngle, Character) == 0x000000, "Member 'EndBattleAPI_GetTargetLocationAngle::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTargetLocationAngle, TargetLocation) == 0x000008, "Member 'EndBattleAPI_GetTargetLocationAngle::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTargetLocationAngle, ReturnValue) == 0x000014, "Member 'EndBattleAPI_GetTargetLocationAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetWorldLocationAngle
// 0x001C (0x001C - 0x0000)
struct EndBattleAPI_GetWorldLocationAngle final
{
public:
	struct FVector                                BaseLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetWorldLocationAngle) == 0x000004, "Wrong alignment on EndBattleAPI_GetWorldLocationAngle");
static_assert(sizeof(EndBattleAPI_GetWorldLocationAngle) == 0x00001C, "Wrong size on EndBattleAPI_GetWorldLocationAngle");
static_assert(offsetof(EndBattleAPI_GetWorldLocationAngle, BaseLocation) == 0x000000, "Member 'EndBattleAPI_GetWorldLocationAngle::BaseLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetWorldLocationAngle, TargetLocation) == 0x00000C, "Member 'EndBattleAPI_GetWorldLocationAngle::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetWorldLocationAngle, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetWorldLocationAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HasAbilityElement
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_HasAbilityElement final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttributeType                       InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_HasAbilityElement) == 0x000004, "Wrong alignment on EndBattleAPI_HasAbilityElement");
static_assert(sizeof(EndBattleAPI_HasAbilityElement) == 0x00000C, "Wrong size on EndBattleAPI_HasAbilityElement");
static_assert(offsetof(EndBattleAPI_HasAbilityElement, InAbilityName) == 0x000000, "Member 'EndBattleAPI_HasAbilityElement::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasAbilityElement, InType) == 0x000008, "Member 'EndBattleAPI_HasAbilityElement::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasAbilityElement, ReturnValue) == 0x000009, "Member 'EndBattleAPI_HasAbilityElement::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HasDamageSource
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_HasDamageSource final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_HasDamageSource) == 0x000008, "Wrong alignment on EndBattleAPI_HasDamageSource");
static_assert(sizeof(EndBattleAPI_HasDamageSource) == 0x000018, "Wrong size on EndBattleAPI_HasDamageSource");
static_assert(offsetof(EndBattleAPI_HasDamageSource, InChara) == 0x000000, "Member 'EndBattleAPI_HasDamageSource::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasDamageSource, InDamageSourceID) == 0x000008, "Member 'EndBattleAPI_HasDamageSource::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasDamageSource, ReturnValue) == 0x000010, "Member 'EndBattleAPI_HasDamageSource::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HasSpecialStatusChangeID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_HasSpecialStatusChangeID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_HasSpecialStatusChangeID) == 0x000008, "Wrong alignment on EndBattleAPI_HasSpecialStatusChangeID");
static_assert(sizeof(EndBattleAPI_HasSpecialStatusChangeID) == 0x000018, "Wrong size on EndBattleAPI_HasSpecialStatusChangeID");
static_assert(offsetof(EndBattleAPI_HasSpecialStatusChangeID, Character) == 0x000000, "Member 'EndBattleAPI_HasSpecialStatusChangeID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasSpecialStatusChangeID, ID) == 0x000008, "Member 'EndBattleAPI_HasSpecialStatusChangeID::ID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasSpecialStatusChangeID, ReturnValue) == 0x000010, "Member 'EndBattleAPI_HasSpecialStatusChangeID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HasSpecialStatusChangeType
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_HasSpecialStatusChangeType final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_HasSpecialStatusChangeType) == 0x000008, "Wrong alignment on EndBattleAPI_HasSpecialStatusChangeType");
static_assert(sizeof(EndBattleAPI_HasSpecialStatusChangeType) == 0x000010, "Wrong size on EndBattleAPI_HasSpecialStatusChangeType");
static_assert(offsetof(EndBattleAPI_HasSpecialStatusChangeType, InChara) == 0x000000, "Member 'EndBattleAPI_HasSpecialStatusChangeType::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasSpecialStatusChangeType, InType) == 0x000008, "Member 'EndBattleAPI_HasSpecialStatusChangeType::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasSpecialStatusChangeType, ReturnValue) == 0x000009, "Member 'EndBattleAPI_HasSpecialStatusChangeType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HasStatusChangeID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_HasStatusChangeID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   statusChangeID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_HasStatusChangeID) == 0x000008, "Wrong alignment on EndBattleAPI_HasStatusChangeID");
static_assert(sizeof(EndBattleAPI_HasStatusChangeID) == 0x000018, "Wrong size on EndBattleAPI_HasStatusChangeID");
static_assert(offsetof(EndBattleAPI_HasStatusChangeID, Character) == 0x000000, "Member 'EndBattleAPI_HasStatusChangeID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasStatusChangeID, statusChangeID) == 0x000008, "Member 'EndBattleAPI_HasStatusChangeID::statusChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasStatusChangeID, ReturnValue) == 0x000010, "Member 'EndBattleAPI_HasStatusChangeID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HideAbilityName
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_HideAbilityName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_HideAbilityName) == 0x000008, "Wrong alignment on EndBattleAPI_HideAbilityName");
static_assert(sizeof(EndBattleAPI_HideAbilityName) == 0x000008, "Wrong size on EndBattleAPI_HideAbilityName");
static_assert(offsetof(EndBattleAPI_HideAbilityName, Character) == 0x000000, "Member 'EndBattleAPI_HideAbilityName::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.HidePhysics
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_HidePhysics final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_HidePhysics) == 0x000004, "Wrong alignment on EndBattleAPI_HidePhysics");
static_assert(sizeof(EndBattleAPI_HidePhysics) == 0x000008, "Wrong size on EndBattleAPI_HidePhysics");
static_assert(offsetof(EndBattleAPI_HidePhysics, ActorName) == 0x000000, "Member 'EndBattleAPI_HidePhysics::ActorName' has a wrong offset!");

// Function EndGame.EndBattleAPI.IncBattleSceneCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IncBattleSceneCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IncBattleSceneCount) == 0x000004, "Wrong alignment on EndBattleAPI_IncBattleSceneCount");
static_assert(sizeof(EndBattleAPI_IncBattleSceneCount) == 0x00000C, "Wrong size on EndBattleAPI_IncBattleSceneCount");
static_assert(offsetof(EndBattleAPI_IncBattleSceneCount, InName) == 0x000000, "Member 'EndBattleAPI_IncBattleSceneCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IncBattleSceneCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IncBattleSceneCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsAbility
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsAbility final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsAbility) == 0x000004, "Wrong alignment on EndBattleAPI_IsAbility");
static_assert(sizeof(EndBattleAPI_IsAbility) == 0x00000C, "Wrong size on EndBattleAPI_IsAbility");
static_assert(offsetof(EndBattleAPI_IsAbility, InAbilityName) == 0x000000, "Member 'EndBattleAPI_IsAbility::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsAbility, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsActionRestriction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsActionRestriction final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsActionRestriction) == 0x000008, "Wrong alignment on EndBattleAPI_IsActionRestriction");
static_assert(sizeof(EndBattleAPI_IsActionRestriction) == 0x000010, "Wrong size on EndBattleAPI_IsActionRestriction");
static_assert(offsetof(EndBattleAPI_IsActionRestriction, Character) == 0x000000, "Member 'EndBattleAPI_IsActionRestriction::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsActionRestriction, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsActionRestriction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsAdditiveDamagePlaying
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsAdditiveDamagePlaying final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsAdditiveDamagePlaying) == 0x000008, "Wrong alignment on EndBattleAPI_IsAdditiveDamagePlaying");
static_assert(sizeof(EndBattleAPI_IsAdditiveDamagePlaying) == 0x000010, "Wrong size on EndBattleAPI_IsAdditiveDamagePlaying");
static_assert(offsetof(EndBattleAPI_IsAdditiveDamagePlaying, InChara) == 0x000000, "Member 'EndBattleAPI_IsAdditiveDamagePlaying::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsAdditiveDamagePlaying, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsAdditiveDamagePlaying::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsAIPC
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsAIPC final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsAIPC) == 0x000008, "Wrong alignment on EndBattleAPI_IsAIPC");
static_assert(sizeof(EndBattleAPI_IsAIPC) == 0x000010, "Wrong size on EndBattleAPI_IsAIPC");
static_assert(offsetof(EndBattleAPI_IsAIPC, InChara) == 0x000000, "Member 'EndBattleAPI_IsAIPC::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsAIPC, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsAIPC::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsAIPCRangedWeaponEquipped
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_IsAIPCRangedWeaponEquipped final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsAIPCRangedWeaponEquipped) == 0x000001, "Wrong alignment on EndBattleAPI_IsAIPCRangedWeaponEquipped");
static_assert(sizeof(EndBattleAPI_IsAIPCRangedWeaponEquipped) == 0x000002, "Wrong size on EndBattleAPI_IsAIPCRangedWeaponEquipped");
static_assert(offsetof(EndBattleAPI_IsAIPCRangedWeaponEquipped, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_IsAIPCRangedWeaponEquipped::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsAIPCRangedWeaponEquipped, ReturnValue) == 0x000001, "Member 'EndBattleAPI_IsAIPCRangedWeaponEquipped::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsBreak
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsBreak final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsBreak) == 0x000008, "Wrong alignment on EndBattleAPI_IsBreak");
static_assert(sizeof(EndBattleAPI_IsBreak) == 0x000010, "Wrong size on EndBattleAPI_IsBreak");
static_assert(offsetof(EndBattleAPI_IsBreak, Character) == 0x000000, "Member 'EndBattleAPI_IsBreak::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsBreak, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsBreak::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsBreakEndAction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsBreakEndAction final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsBreakEndAction) == 0x000008, "Wrong alignment on EndBattleAPI_IsBreakEndAction");
static_assert(sizeof(EndBattleAPI_IsBreakEndAction) == 0x000010, "Wrong size on EndBattleAPI_IsBreakEndAction");
static_assert(offsetof(EndBattleAPI_IsBreakEndAction, Character) == 0x000000, "Member 'EndBattleAPI_IsBreakEndAction::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsBreakEndAction, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsBreakEndAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsBrokenParts
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_IsBrokenParts final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaPartsSpecID;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsBrokenParts) == 0x000008, "Wrong alignment on EndBattleAPI_IsBrokenParts");
static_assert(sizeof(EndBattleAPI_IsBrokenParts) == 0x000018, "Wrong size on EndBattleAPI_IsBrokenParts");
static_assert(offsetof(EndBattleAPI_IsBrokenParts, Character) == 0x000000, "Member 'EndBattleAPI_IsBrokenParts::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsBrokenParts, BattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_IsBrokenParts::BattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsBrokenParts, ReturnValue) == 0x000010, "Member 'EndBattleAPI_IsBrokenParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsBurst
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsBurst final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsBurst) == 0x000008, "Wrong alignment on EndBattleAPI_IsBurst");
static_assert(sizeof(EndBattleAPI_IsBurst) == 0x000010, "Wrong size on EndBattleAPI_IsBurst");
static_assert(offsetof(EndBattleAPI_IsBurst, InChara) == 0x000000, "Member 'EndBattleAPI_IsBurst::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsBurst, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsBurst::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCharacterValid
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsCharacterValid final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsCharacterValid) == 0x000008, "Wrong alignment on EndBattleAPI_IsCharacterValid");
static_assert(sizeof(EndBattleAPI_IsCharacterValid) == 0x000010, "Wrong size on EndBattleAPI_IsCharacterValid");
static_assert(offsetof(EndBattleAPI_IsCharacterValid, InCharacter) == 0x000000, "Member 'EndBattleAPI_IsCharacterValid::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharacterValid, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsCharacterValid::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCharacterValidBranch
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsCharacterValidBranch final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsCharacterValidBranch) == 0x000008, "Wrong alignment on EndBattleAPI_IsCharacterValidBranch");
static_assert(sizeof(EndBattleAPI_IsCharacterValidBranch) == 0x000010, "Wrong size on EndBattleAPI_IsCharacterValidBranch");
static_assert(offsetof(EndBattleAPI_IsCharacterValidBranch, InCharacter) == 0x000000, "Member 'EndBattleAPI_IsCharacterValidBranch::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharacterValidBranch, OutSignal) == 0x000008, "Member 'EndBattleAPI_IsCharacterValidBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCharaID
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_IsCharaID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Upper;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsCharaID) == 0x000008, "Wrong alignment on EndBattleAPI_IsCharaID");
static_assert(sizeof(EndBattleAPI_IsCharaID) == 0x000020, "Wrong size on EndBattleAPI_IsCharaID");
static_assert(offsetof(EndBattleAPI_IsCharaID, InChara) == 0x000000, "Member 'EndBattleAPI_IsCharaID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharaID, Upper) == 0x000008, "Member 'EndBattleAPI_IsCharaID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharaID, Lower) == 0x000010, "Member 'EndBattleAPI_IsCharaID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharaID, ReturnValue) == 0x000018, "Member 'EndBattleAPI_IsCharaID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCloudOffensiveMode
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_IsCloudOffensiveMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsCloudOffensiveMode) == 0x000001, "Wrong alignment on EndBattleAPI_IsCloudOffensiveMode");
static_assert(sizeof(EndBattleAPI_IsCloudOffensiveMode) == 0x000001, "Wrong size on EndBattleAPI_IsCloudOffensiveMode");
static_assert(offsetof(EndBattleAPI_IsCloudOffensiveMode, ReturnValue) == 0x000000, "Member 'EndBattleAPI_IsCloudOffensiveMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCombinationAbilityFromDataObjectBattleAbility
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsCombinationAbilityFromDataObjectBattleAbility final
{
public:
	int64                                         Flag0;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsCombinationAbilityFromDataObjectBattleAbility) == 0x000008, "Wrong alignment on EndBattleAPI_IsCombinationAbilityFromDataObjectBattleAbility");
static_assert(sizeof(EndBattleAPI_IsCombinationAbilityFromDataObjectBattleAbility) == 0x000010, "Wrong size on EndBattleAPI_IsCombinationAbilityFromDataObjectBattleAbility");
static_assert(offsetof(EndBattleAPI_IsCombinationAbilityFromDataObjectBattleAbility, Flag0) == 0x000000, "Member 'EndBattleAPI_IsCombinationAbilityFromDataObjectBattleAbility::Flag0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCombinationAbilityFromDataObjectBattleAbility, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsCombinationAbilityFromDataObjectBattleAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCommandAbilityCombination
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsCommandAbilityCombination final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsCommandAbilityCombination) == 0x000008, "Wrong alignment on EndBattleAPI_IsCommandAbilityCombination");
static_assert(sizeof(EndBattleAPI_IsCommandAbilityCombination) == 0x000010, "Wrong size on EndBattleAPI_IsCommandAbilityCombination");
static_assert(offsetof(EndBattleAPI_IsCommandAbilityCombination, Character) == 0x000000, "Member 'EndBattleAPI_IsCommandAbilityCombination::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCommandAbilityCombination, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsCommandAbilityCombination::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionList
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_IsContainedMotionList final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionList) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionList");
static_assert(sizeof(EndBattleAPI_IsContainedMotionList) == 0x000018, "Wrong size on EndBattleAPI_IsContainedMotionList");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionList::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList, InMot1) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionList::InMot1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList, ReturnValue) == 0x000010, "Member 'EndBattleAPI_IsContainedMotionList::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionList2
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_IsContainedMotionList2 final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot2;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionList2) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionList2");
static_assert(sizeof(EndBattleAPI_IsContainedMotionList2) == 0x000020, "Wrong size on EndBattleAPI_IsContainedMotionList2");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList2, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionList2::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList2, InMot1) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionList2::InMot1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList2, InMot2) == 0x000010, "Member 'EndBattleAPI_IsContainedMotionList2::InMot2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList2, ReturnValue) == 0x000018, "Member 'EndBattleAPI_IsContainedMotionList2::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionList3
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_IsContainedMotionList3 final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot2;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot3;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionList3) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionList3");
static_assert(sizeof(EndBattleAPI_IsContainedMotionList3) == 0x000028, "Wrong size on EndBattleAPI_IsContainedMotionList3");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList3, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionList3::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList3, InMot1) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionList3::InMot1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList3, InMot2) == 0x000010, "Member 'EndBattleAPI_IsContainedMotionList3::InMot2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList3, InMot3) == 0x000018, "Member 'EndBattleAPI_IsContainedMotionList3::InMot3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList3, ReturnValue) == 0x000020, "Member 'EndBattleAPI_IsContainedMotionList3::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionList4
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_IsContainedMotionList4 final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot2;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot3;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot4;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionList4) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionList4");
static_assert(sizeof(EndBattleAPI_IsContainedMotionList4) == 0x000030, "Wrong size on EndBattleAPI_IsContainedMotionList4");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionList4::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, InMot1) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionList4::InMot1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, InMot2) == 0x000010, "Member 'EndBattleAPI_IsContainedMotionList4::InMot2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, InMot3) == 0x000018, "Member 'EndBattleAPI_IsContainedMotionList4::InMot3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, InMot4) == 0x000020, "Member 'EndBattleAPI_IsContainedMotionList4::InMot4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, ReturnValue) == 0x000028, "Member 'EndBattleAPI_IsContainedMotionList4::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionList5
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAPI_IsContainedMotionList5 final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot2;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot3;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot4;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot5;                                            // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionList5) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionList5");
static_assert(sizeof(EndBattleAPI_IsContainedMotionList5) == 0x000038, "Wrong size on EndBattleAPI_IsContainedMotionList5");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionList5::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InMot1) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionList5::InMot1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InMot2) == 0x000010, "Member 'EndBattleAPI_IsContainedMotionList5::InMot2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InMot3) == 0x000018, "Member 'EndBattleAPI_IsContainedMotionList5::InMot3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InMot4) == 0x000020, "Member 'EndBattleAPI_IsContainedMotionList5::InMot4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InMot5) == 0x000028, "Member 'EndBattleAPI_IsContainedMotionList5::InMot5' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, ReturnValue) == 0x000030, "Member 'EndBattleAPI_IsContainedMotionList5::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionListArray
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_IsContainedMotionListArray final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           InMot;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionListArray) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionListArray");
static_assert(sizeof(EndBattleAPI_IsContainedMotionListArray) == 0x000020, "Wrong size on EndBattleAPI_IsContainedMotionListArray");
static_assert(offsetof(EndBattleAPI_IsContainedMotionListArray, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionListArray::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionListArray, InMot) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionListArray::InMot' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionListArray, ReturnValue) == 0x000018, "Member 'EndBattleAPI_IsContainedMotionListArray::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDamage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDamage final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDamage) == 0x000008, "Wrong alignment on EndBattleAPI_IsDamage");
static_assert(sizeof(EndBattleAPI_IsDamage) == 0x000010, "Wrong size on EndBattleAPI_IsDamage");
static_assert(offsetof(EndBattleAPI_IsDamage, InChara) == 0x000000, "Member 'EndBattleAPI_IsDamage::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDamage, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDamage::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDamageSourceFlagDisableFinish
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDamageSourceFlagDisableFinish final
{
public:
	int64                                         Flag;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDamageSourceFlagDisableFinish) == 0x000008, "Wrong alignment on EndBattleAPI_IsDamageSourceFlagDisableFinish");
static_assert(sizeof(EndBattleAPI_IsDamageSourceFlagDisableFinish) == 0x000010, "Wrong size on EndBattleAPI_IsDamageSourceFlagDisableFinish");
static_assert(offsetof(EndBattleAPI_IsDamageSourceFlagDisableFinish, Flag) == 0x000000, "Member 'EndBattleAPI_IsDamageSourceFlagDisableFinish::Flag' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDamageSourceFlagDisableFinish, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDamageSourceFlagDisableFinish::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDisableTarget
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDisableTarget final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDisableTarget) == 0x000008, "Wrong alignment on EndBattleAPI_IsDisableTarget");
static_assert(sizeof(EndBattleAPI_IsDisableTarget) == 0x000010, "Wrong size on EndBattleAPI_IsDisableTarget");
static_assert(offsetof(EndBattleAPI_IsDisableTarget, InChara) == 0x000000, "Member 'EndBattleAPI_IsDisableTarget::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDisableTarget, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDisableTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDisperseTargetExecutor
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDisperseTargetExecutor final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDisperseTargetExecutor) == 0x000008, "Wrong alignment on EndBattleAPI_IsDisperseTargetExecutor");
static_assert(sizeof(EndBattleAPI_IsDisperseTargetExecutor) == 0x000010, "Wrong size on EndBattleAPI_IsDisperseTargetExecutor");
static_assert(offsetof(EndBattleAPI_IsDisperseTargetExecutor, Character) == 0x000000, "Member 'EndBattleAPI_IsDisperseTargetExecutor::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDisperseTargetExecutor, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDisperseTargetExecutor::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDodgeResetUniqueAbility
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDodgeResetUniqueAbility final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDodgeResetUniqueAbility) == 0x000008, "Wrong alignment on EndBattleAPI_IsDodgeResetUniqueAbility");
static_assert(sizeof(EndBattleAPI_IsDodgeResetUniqueAbility) == 0x000010, "Wrong size on EndBattleAPI_IsDodgeResetUniqueAbility");
static_assert(offsetof(EndBattleAPI_IsDodgeResetUniqueAbility, InChara) == 0x000000, "Member 'EndBattleAPI_IsDodgeResetUniqueAbility::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDodgeResetUniqueAbility, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDodgeResetUniqueAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDummyPartyMember
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDummyPartyMember final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDummyPartyMember) == 0x000008, "Wrong alignment on EndBattleAPI_IsDummyPartyMember");
static_assert(sizeof(EndBattleAPI_IsDummyPartyMember) == 0x000010, "Wrong size on EndBattleAPI_IsDummyPartyMember");
static_assert(offsetof(EndBattleAPI_IsDummyPartyMember, InChara) == 0x000000, "Member 'EndBattleAPI_IsDummyPartyMember::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDummyPartyMember, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDummyPartyMember::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsFillLimitPlayer
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsFillLimitPlayer final
{
public:
	class FName                                   PlayerCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsFillLimitPlayer) == 0x000004, "Wrong alignment on EndBattleAPI_IsFillLimitPlayer");
static_assert(sizeof(EndBattleAPI_IsFillLimitPlayer) == 0x00000C, "Wrong size on EndBattleAPI_IsFillLimitPlayer");
static_assert(offsetof(EndBattleAPI_IsFillLimitPlayer, PlayerCharaName) == 0x000000, "Member 'EndBattleAPI_IsFillLimitPlayer::PlayerCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsFillLimitPlayer, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsFillLimitPlayer::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsGuard
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsGuard final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsGuard) == 0x000008, "Wrong alignment on EndBattleAPI_IsGuard");
static_assert(sizeof(EndBattleAPI_IsGuard) == 0x000010, "Wrong size on EndBattleAPI_IsGuard");
static_assert(offsetof(EndBattleAPI_IsGuard, InChara) == 0x000000, "Member 'EndBattleAPI_IsGuard::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsGuard, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsGuard::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsHPPercent
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsHPPercent final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Percent;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 Cmp;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsHPPercent) == 0x000008, "Wrong alignment on EndBattleAPI_IsHPPercent");
static_assert(sizeof(EndBattleAPI_IsHPPercent) == 0x000010, "Wrong size on EndBattleAPI_IsHPPercent");
static_assert(offsetof(EndBattleAPI_IsHPPercent, InChara) == 0x000000, "Member 'EndBattleAPI_IsHPPercent::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsHPPercent, Percent) == 0x000008, "Member 'EndBattleAPI_IsHPPercent::Percent' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsHPPercent, Cmp) == 0x00000C, "Member 'EndBattleAPI_IsHPPercent::Cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsHPPercent, ReturnValue) == 0x00000D, "Member 'EndBattleAPI_IsHPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInBattle
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_IsInBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsInBattle) == 0x000001, "Wrong alignment on EndBattleAPI_IsInBattle");
static_assert(sizeof(EndBattleAPI_IsInBattle) == 0x000001, "Wrong size on EndBattleAPI_IsInBattle");
static_assert(offsetof(EndBattleAPI_IsInBattle, ReturnValue) == 0x000000, "Member 'EndBattleAPI_IsInBattle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInEnemySummonCutScene
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_IsInEnemySummonCutScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsInEnemySummonCutScene) == 0x000001, "Wrong alignment on EndBattleAPI_IsInEnemySummonCutScene");
static_assert(sizeof(EndBattleAPI_IsInEnemySummonCutScene) == 0x000001, "Wrong size on EndBattleAPI_IsInEnemySummonCutScene");
static_assert(offsetof(EndBattleAPI_IsInEnemySummonCutScene, ReturnValue) == 0x000000, "Member 'EndBattleAPI_IsInEnemySummonCutScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInFanRange
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_IsInFanRange final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseYaw;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         angleRange;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         radiusMin;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         radiusMax;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                targetPosition;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsInFanRange) == 0x000008, "Wrong alignment on EndBattleAPI_IsInFanRange");
static_assert(sizeof(EndBattleAPI_IsInFanRange) == 0x000028, "Wrong size on EndBattleAPI_IsInFanRange");
static_assert(offsetof(EndBattleAPI_IsInFanRange, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_IsInFanRange::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, baseYaw) == 0x000008, "Member 'EndBattleAPI_IsInFanRange::baseYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, angleRange) == 0x00000C, "Member 'EndBattleAPI_IsInFanRange::angleRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, radiusMin) == 0x000010, "Member 'EndBattleAPI_IsInFanRange::radiusMin' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, radiusMax) == 0x000014, "Member 'EndBattleAPI_IsInFanRange::radiusMax' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, targetPosition) == 0x000018, "Member 'EndBattleAPI_IsInFanRange::targetPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, ReturnValue) == 0x000024, "Member 'EndBattleAPI_IsInFanRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInScreen
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsInScreen final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsInScreen) == 0x000008, "Wrong alignment on EndBattleAPI_IsInScreen");
static_assert(sizeof(EndBattleAPI_IsInScreen) == 0x000010, "Wrong size on EndBattleAPI_IsInScreen");
static_assert(offsetof(EndBattleAPI_IsInScreen, Actor) == 0x000000, "Member 'EndBattleAPI_IsInScreen::Actor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInScreen, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsInScreen::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInSummonCutScene
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_IsInSummonCutScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsInSummonCutScene) == 0x000001, "Wrong alignment on EndBattleAPI_IsInSummonCutScene");
static_assert(sizeof(EndBattleAPI_IsInSummonCutScene) == 0x000001, "Wrong size on EndBattleAPI_IsInSummonCutScene");
static_assert(offsetof(EndBattleAPI_IsInSummonCutScene, ReturnValue) == 0x000000, "Member 'EndBattleAPI_IsInSummonCutScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInSupportField
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsInSupportField final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSupportFieldType                    supportFieldType;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsInSupportField) == 0x000008, "Wrong alignment on EndBattleAPI_IsInSupportField");
static_assert(sizeof(EndBattleAPI_IsInSupportField) == 0x000010, "Wrong size on EndBattleAPI_IsInSupportField");
static_assert(offsetof(EndBattleAPI_IsInSupportField, Character) == 0x000000, "Member 'EndBattleAPI_IsInSupportField::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInSupportField, supportFieldType) == 0x000008, "Member 'EndBattleAPI_IsInSupportField::supportFieldType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInSupportField, ReturnValue) == 0x000009, "Member 'EndBattleAPI_IsInSupportField::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInSyncAction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsInSyncAction final
{
public:
	class AEndCharacter*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsInSyncAction) == 0x000008, "Wrong alignment on EndBattleAPI_IsInSyncAction");
static_assert(sizeof(EndBattleAPI_IsInSyncAction) == 0x000010, "Wrong size on EndBattleAPI_IsInSyncAction");
static_assert(offsetof(EndBattleAPI_IsInSyncAction, Chara) == 0x000000, "Member 'EndBattleAPI_IsInSyncAction::Chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInSyncAction, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsInSyncAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsItem
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsItem final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsItem) == 0x000004, "Wrong alignment on EndBattleAPI_IsItem");
static_assert(sizeof(EndBattleAPI_IsItem) == 0x00000C, "Wrong size on EndBattleAPI_IsItem");
static_assert(offsetof(EndBattleAPI_IsItem, InAbilityName) == 0x000000, "Member 'EndBattleAPI_IsItem::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsItem, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsLaunchActionInAir
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsLaunchActionInAir final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsLaunchActionInAir) == 0x000008, "Wrong alignment on EndBattleAPI_IsLaunchActionInAir");
static_assert(sizeof(EndBattleAPI_IsLaunchActionInAir) == 0x000010, "Wrong size on EndBattleAPI_IsLaunchActionInAir");
static_assert(offsetof(EndBattleAPI_IsLaunchActionInAir, InChara) == 0x000000, "Member 'EndBattleAPI_IsLaunchActionInAir::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsLaunchActionInAir, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsLaunchActionInAir::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsLaunchActionPlaying
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsLaunchActionPlaying final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsLaunchActionPlaying) == 0x000008, "Wrong alignment on EndBattleAPI_IsLaunchActionPlaying");
static_assert(sizeof(EndBattleAPI_IsLaunchActionPlaying) == 0x000010, "Wrong size on EndBattleAPI_IsLaunchActionPlaying");
static_assert(offsetof(EndBattleAPI_IsLaunchActionPlaying, InChara) == 0x000000, "Member 'EndBattleAPI_IsLaunchActionPlaying::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsLaunchActionPlaying, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsLaunchActionPlaying::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsLimit
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsLimit final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsLimit) == 0x000004, "Wrong alignment on EndBattleAPI_IsLimit");
static_assert(sizeof(EndBattleAPI_IsLimit) == 0x00000C, "Wrong size on EndBattleAPI_IsLimit");
static_assert(offsetof(EndBattleAPI_IsLimit, InAbilityName) == 0x000000, "Member 'EndBattleAPI_IsLimit::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsLimit, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsLimit::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsMagic
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsMagic final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsMagic) == 0x000004, "Wrong alignment on EndBattleAPI_IsMagic");
static_assert(sizeof(EndBattleAPI_IsMagic) == 0x00000C, "Wrong size on EndBattleAPI_IsMagic");
static_assert(offsetof(EndBattleAPI_IsMagic, InAbilityName) == 0x000000, "Member 'EndBattleAPI_IsMagic::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsMagic, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsMagic::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsNormal
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsNormal final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsNormal) == 0x000004, "Wrong alignment on EndBattleAPI_IsNormal");
static_assert(sizeof(EndBattleAPI_IsNormal) == 0x00000C, "Wrong size on EndBattleAPI_IsNormal");
static_assert(offsetof(EndBattleAPI_IsNormal, InAbilityName) == 0x000000, "Member 'EndBattleAPI_IsNormal::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsNormal, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsNormal::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsOverlapCharaFromName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_IsOverlapCharaFromName final
{
public:
	class FName                                   InVolumeName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InChara;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsOverlapCharaFromName) == 0x000008, "Wrong alignment on EndBattleAPI_IsOverlapCharaFromName");
static_assert(sizeof(EndBattleAPI_IsOverlapCharaFromName) == 0x000018, "Wrong size on EndBattleAPI_IsOverlapCharaFromName");
static_assert(offsetof(EndBattleAPI_IsOverlapCharaFromName, InVolumeName) == 0x000000, "Member 'EndBattleAPI_IsOverlapCharaFromName::InVolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsOverlapCharaFromName, InChara) == 0x000008, "Member 'EndBattleAPI_IsOverlapCharaFromName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsOverlapCharaFromName, ReturnValue) == 0x000010, "Member 'EndBattleAPI_IsOverlapCharaFromName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsOverlapPoint
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_IsOverlapPoint final
{
public:
	class AEndNavModifierVolume*                  InVolume;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPoint;                                           // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsOverlapPoint) == 0x000008, "Wrong alignment on EndBattleAPI_IsOverlapPoint");
static_assert(sizeof(EndBattleAPI_IsOverlapPoint) == 0x000018, "Wrong size on EndBattleAPI_IsOverlapPoint");
static_assert(offsetof(EndBattleAPI_IsOverlapPoint, InVolume) == 0x000000, "Member 'EndBattleAPI_IsOverlapPoint::InVolume' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsOverlapPoint, InPoint) == 0x000008, "Member 'EndBattleAPI_IsOverlapPoint::InPoint' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsOverlapPoint, ReturnValue) == 0x000014, "Member 'EndBattleAPI_IsOverlapPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsPlayer
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsPlayer final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsPlayer) == 0x000008, "Wrong alignment on EndBattleAPI_IsPlayer");
static_assert(sizeof(EndBattleAPI_IsPlayer) == 0x000010, "Wrong size on EndBattleAPI_IsPlayer");
static_assert(offsetof(EndBattleAPI_IsPlayer, InChara) == 0x000000, "Member 'EndBattleAPI_IsPlayer::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsPlayer, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsPlayer::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsPlayerCharacterValid
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_IsPlayerCharacterValid final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsPlayerCharacterValid) == 0x000001, "Wrong alignment on EndBattleAPI_IsPlayerCharacterValid");
static_assert(sizeof(EndBattleAPI_IsPlayerCharacterValid) == 0x000002, "Wrong size on EndBattleAPI_IsPlayerCharacterValid");
static_assert(offsetof(EndBattleAPI_IsPlayerCharacterValid, Type) == 0x000000, "Member 'EndBattleAPI_IsPlayerCharacterValid::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsPlayerCharacterValid, ReturnValue) == 0x000001, "Member 'EndBattleAPI_IsPlayerCharacterValid::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsPlayingAnimEnvironment
// 0x001C (0x001C - 0x0000)
struct EndBattleAPI_IsPlayingAnimEnvironment final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsPlayingAnimEnvironment) == 0x000004, "Wrong alignment on EndBattleAPI_IsPlayingAnimEnvironment");
static_assert(sizeof(EndBattleAPI_IsPlayingAnimEnvironment) == 0x00001C, "Wrong size on EndBattleAPI_IsPlayingAnimEnvironment");
static_assert(offsetof(EndBattleAPI_IsPlayingAnimEnvironment, LevelName) == 0x000000, "Member 'EndBattleAPI_IsPlayingAnimEnvironment::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsPlayingAnimEnvironment, AccessID) == 0x000008, "Member 'EndBattleAPI_IsPlayingAnimEnvironment::AccessID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsPlayingAnimEnvironment, AnimName) == 0x000010, "Member 'EndBattleAPI_IsPlayingAnimEnvironment::AnimName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsPlayingAnimEnvironment, ReturnValue) == 0x000018, "Member 'EndBattleAPI_IsPlayingAnimEnvironment::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsPlayingBattleCameraSequence
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_IsPlayingBattleCameraSequence final
{
public:
	int32                                         sequenceActorUID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsPlayingBattleCameraSequence) == 0x000004, "Wrong alignment on EndBattleAPI_IsPlayingBattleCameraSequence");
static_assert(sizeof(EndBattleAPI_IsPlayingBattleCameraSequence) == 0x000008, "Wrong size on EndBattleAPI_IsPlayingBattleCameraSequence");
static_assert(offsetof(EndBattleAPI_IsPlayingBattleCameraSequence, sequenceActorUID) == 0x000000, "Member 'EndBattleAPI_IsPlayingBattleCameraSequence::sequenceActorUID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsPlayingBattleCameraSequence, ReturnValue) == 0x000004, "Member 'EndBattleAPI_IsPlayingBattleCameraSequence::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsRideFatMoogle
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsRideFatMoogle final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsRideFatMoogle) == 0x000008, "Wrong alignment on EndBattleAPI_IsRideFatMoogle");
static_assert(sizeof(EndBattleAPI_IsRideFatMoogle) == 0x000010, "Wrong size on EndBattleAPI_IsRideFatMoogle");
static_assert(offsetof(EndBattleAPI_IsRideFatMoogle, Character) == 0x000000, "Member 'EndBattleAPI_IsRideFatMoogle::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsRideFatMoogle, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsRideFatMoogle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsSetRigidBodyName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_IsSetRigidBodyName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RigidBodyName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsSetRigidBodyName) == 0x000008, "Wrong alignment on EndBattleAPI_IsSetRigidBodyName");
static_assert(sizeof(EndBattleAPI_IsSetRigidBodyName) == 0x000018, "Wrong size on EndBattleAPI_IsSetRigidBodyName");
static_assert(offsetof(EndBattleAPI_IsSetRigidBodyName, Character) == 0x000000, "Member 'EndBattleAPI_IsSetRigidBodyName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsSetRigidBodyName, RigidBodyName) == 0x000008, "Member 'EndBattleAPI_IsSetRigidBodyName::RigidBodyName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsSetRigidBodyName, ReturnValue) == 0x000010, "Member 'EndBattleAPI_IsSetRigidBodyName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsSummon
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsSummon final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsSummon) == 0x000008, "Wrong alignment on EndBattleAPI_IsSummon");
static_assert(sizeof(EndBattleAPI_IsSummon) == 0x000010, "Wrong size on EndBattleAPI_IsSummon");
static_assert(offsetof(EndBattleAPI_IsSummon, InChara) == 0x000000, "Member 'EndBattleAPI_IsSummon::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsSummon, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsSummon::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsSummonGaugeZero
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_IsSummonGaugeZero final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsSummonGaugeZero) == 0x000001, "Wrong alignment on EndBattleAPI_IsSummonGaugeZero");
static_assert(sizeof(EndBattleAPI_IsSummonGaugeZero) == 0x000001, "Wrong size on EndBattleAPI_IsSummonGaugeZero");
static_assert(offsetof(EndBattleAPI_IsSummonGaugeZero, ReturnValue) == 0x000000, "Member 'EndBattleAPI_IsSummonGaugeZero::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsUCPC
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsUCPC final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsUCPC) == 0x000008, "Wrong alignment on EndBattleAPI_IsUCPC");
static_assert(sizeof(EndBattleAPI_IsUCPC) == 0x000010, "Wrong size on EndBattleAPI_IsUCPC");
static_assert(offsetof(EndBattleAPI_IsUCPC, Character) == 0x000000, "Member 'EndBattleAPI_IsUCPC::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsUCPC, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsUCPC::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsUniqueAbility
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsUniqueAbility final
{
public:
	class FName                                   AbilityId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsUniqueAbility) == 0x000004, "Wrong alignment on EndBattleAPI_IsUniqueAbility");
static_assert(sizeof(EndBattleAPI_IsUniqueAbility) == 0x00000C, "Wrong size on EndBattleAPI_IsUniqueAbility");
static_assert(offsetof(EndBattleAPI_IsUniqueAbility, AbilityId) == 0x000000, "Member 'EndBattleAPI_IsUniqueAbility::AbilityId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsUniqueAbility, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsUniqueAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.MoveGenjiShield
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_MoveGenjiShield final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          causerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_MoveGenjiShield) == 0x000008, "Wrong alignment on EndBattleAPI_MoveGenjiShield");
static_assert(sizeof(EndBattleAPI_MoveGenjiShield) == 0x000010, "Wrong size on EndBattleAPI_MoveGenjiShield");
static_assert(offsetof(EndBattleAPI_MoveGenjiShield, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_MoveGenjiShield::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_MoveGenjiShield, causerCharacter) == 0x000008, "Member 'EndBattleAPI_MoveGenjiShield::causerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.NavmeshRaycast
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAPI_NavmeshRaycast final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDirection;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacterBase*                      InExecutor;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCastRange;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawDebug;                                       // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawDebugTime;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoCheckEscapeWall;                                 // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0035(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_NavmeshRaycast) == 0x000008, "Wrong alignment on EndBattleAPI_NavmeshRaycast");
static_assert(sizeof(EndBattleAPI_NavmeshRaycast) == 0x000038, "Wrong size on EndBattleAPI_NavmeshRaycast");
static_assert(offsetof(EndBattleAPI_NavmeshRaycast, InLocation) == 0x000000, "Member 'EndBattleAPI_NavmeshRaycast::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycast, InDirection) == 0x00000C, "Member 'EndBattleAPI_NavmeshRaycast::InDirection' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycast, OutDistance) == 0x000018, "Member 'EndBattleAPI_NavmeshRaycast::OutDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycast, InExecutor) == 0x000020, "Member 'EndBattleAPI_NavmeshRaycast::InExecutor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycast, InCastRange) == 0x000028, "Member 'EndBattleAPI_NavmeshRaycast::InCastRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycast, InDrawDebug) == 0x00002C, "Member 'EndBattleAPI_NavmeshRaycast::InDrawDebug' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycast, InDrawDebugTime) == 0x000030, "Member 'EndBattleAPI_NavmeshRaycast::InDrawDebugTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycast, NoCheckEscapeWall) == 0x000034, "Member 'EndBattleAPI_NavmeshRaycast::NoCheckEscapeWall' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycast, ReturnValue) == 0x000035, "Member 'EndBattleAPI_NavmeshRaycast::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.NavmeshRaycastFromChara
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_NavmeshRaycastFromChara final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCastRange;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InForceSSizeNav;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawDebug;                                       // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawDebugTime;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoCheckEscapeWall;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_NavmeshRaycastFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_NavmeshRaycastFromChara");
static_assert(sizeof(EndBattleAPI_NavmeshRaycastFromChara) == 0x000020, "Wrong size on EndBattleAPI_NavmeshRaycastFromChara");
static_assert(offsetof(EndBattleAPI_NavmeshRaycastFromChara, InCharacter) == 0x000000, "Member 'EndBattleAPI_NavmeshRaycastFromChara::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycastFromChara, InOffsetYaw) == 0x000008, "Member 'EndBattleAPI_NavmeshRaycastFromChara::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycastFromChara, OutDistance) == 0x00000C, "Member 'EndBattleAPI_NavmeshRaycastFromChara::OutDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycastFromChara, InCastRange) == 0x000010, "Member 'EndBattleAPI_NavmeshRaycastFromChara::InCastRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycastFromChara, InForceSSizeNav) == 0x000014, "Member 'EndBattleAPI_NavmeshRaycastFromChara::InForceSSizeNav' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycastFromChara, InDrawDebug) == 0x000015, "Member 'EndBattleAPI_NavmeshRaycastFromChara::InDrawDebug' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycastFromChara, InDrawDebugTime) == 0x000018, "Member 'EndBattleAPI_NavmeshRaycastFromChara::InDrawDebugTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycastFromChara, NoCheckEscapeWall) == 0x00001C, "Member 'EndBattleAPI_NavmeshRaycastFromChara::NoCheckEscapeWall' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NavmeshRaycastFromChara, ReturnValue) == 0x00001D, "Member 'EndBattleAPI_NavmeshRaycastFromChara::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.NotifyAbilityReaction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_NotifyAbilityReaction final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param0;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_NotifyAbilityReaction) == 0x000008, "Wrong alignment on EndBattleAPI_NotifyAbilityReaction");
static_assert(sizeof(EndBattleAPI_NotifyAbilityReaction) == 0x000010, "Wrong size on EndBattleAPI_NotifyAbilityReaction");
static_assert(offsetof(EndBattleAPI_NotifyAbilityReaction, Character) == 0x000000, "Member 'EndBattleAPI_NotifyAbilityReaction::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_NotifyAbilityReaction, Param0) == 0x000008, "Member 'EndBattleAPI_NotifyAbilityReaction::Param0' has a wrong offset!");

// Function EndGame.EndBattleAPI.OverrideDamageSourceIDCutSceneAbility
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_OverrideDamageSourceIDCutSceneAbility final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_OverrideDamageSourceIDCutSceneAbility) == 0x000008, "Wrong alignment on EndBattleAPI_OverrideDamageSourceIDCutSceneAbility");
static_assert(sizeof(EndBattleAPI_OverrideDamageSourceIDCutSceneAbility) == 0x000010, "Wrong size on EndBattleAPI_OverrideDamageSourceIDCutSceneAbility");
static_assert(offsetof(EndBattleAPI_OverrideDamageSourceIDCutSceneAbility, InCharacter) == 0x000000, "Member 'EndBattleAPI_OverrideDamageSourceIDCutSceneAbility::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_OverrideDamageSourceIDCutSceneAbility, InDamageSourceID) == 0x000008, "Member 'EndBattleAPI_OverrideDamageSourceIDCutSceneAbility::InDamageSourceID' has a wrong offset!");

// Function EndGame.EndBattleAPI.OverrideSummonCaptureTimeLimit
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_OverrideSummonCaptureTimeLimit final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_OverrideSummonCaptureTimeLimit) == 0x000004, "Wrong alignment on EndBattleAPI_OverrideSummonCaptureTimeLimit");
static_assert(sizeof(EndBattleAPI_OverrideSummonCaptureTimeLimit) == 0x000004, "Wrong size on EndBattleAPI_OverrideSummonCaptureTimeLimit");
static_assert(offsetof(EndBattleAPI_OverrideSummonCaptureTimeLimit, Time) == 0x000000, "Member 'EndBattleAPI_OverrideSummonCaptureTimeLimit::Time' has a wrong offset!");

// Function EndGame.EndBattleAPI.OverrideSummonCutSceneReturnLocation
// 0x0040 (0x0040 - 0x0000)
struct EndBattleAPI_OverrideSummonCutSceneReturnLocation final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_OverrideSummonCutSceneReturnLocation) == 0x000010, "Wrong alignment on EndBattleAPI_OverrideSummonCutSceneReturnLocation");
static_assert(sizeof(EndBattleAPI_OverrideSummonCutSceneReturnLocation) == 0x000040, "Wrong size on EndBattleAPI_OverrideSummonCutSceneReturnLocation");
static_assert(offsetof(EndBattleAPI_OverrideSummonCutSceneReturnLocation, Character) == 0x000000, "Member 'EndBattleAPI_OverrideSummonCutSceneReturnLocation::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_OverrideSummonCutSceneReturnLocation, Transform) == 0x000010, "Member 'EndBattleAPI_OverrideSummonCutSceneReturnLocation::Transform' has a wrong offset!");

// Function EndGame.EndBattleAPI.OverrideSummonPointToIncreaseOneSecond
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_OverrideSummonPointToIncreaseOneSecond final
{
public:
	float                                         Point;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_OverrideSummonPointToIncreaseOneSecond) == 0x000004, "Wrong alignment on EndBattleAPI_OverrideSummonPointToIncreaseOneSecond");
static_assert(sizeof(EndBattleAPI_OverrideSummonPointToIncreaseOneSecond) == 0x000004, "Wrong size on EndBattleAPI_OverrideSummonPointToIncreaseOneSecond");
static_assert(offsetof(EndBattleAPI_OverrideSummonPointToIncreaseOneSecond, Point) == 0x000000, "Member 'EndBattleAPI_OverrideSummonPointToIncreaseOneSecond::Point' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayAddMotion
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_PlayAddMotion final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtraActionLayer                          Layer;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInfiniteLoop;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_PlayAddMotion) == 0x000008, "Wrong alignment on EndBattleAPI_PlayAddMotion");
static_assert(sizeof(EndBattleAPI_PlayAddMotion) == 0x000018, "Wrong size on EndBattleAPI_PlayAddMotion");
static_assert(offsetof(EndBattleAPI_PlayAddMotion, Character) == 0x000000, "Member 'EndBattleAPI_PlayAddMotion::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayAddMotion, MotionName) == 0x000008, "Member 'EndBattleAPI_PlayAddMotion::MotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayAddMotion, Layer) == 0x000010, "Member 'EndBattleAPI_PlayAddMotion::Layer' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayAddMotion, bInfiniteLoop) == 0x000011, "Member 'EndBattleAPI_PlayAddMotion::bInfiniteLoop' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayAnimEnvironment
// 0x001C (0x001C - 0x0000)
struct EndBattleAPI_PlayAnimEnvironment final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleEnvironmentAnimPlayType             PlayType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_PlayAnimEnvironment) == 0x000004, "Wrong alignment on EndBattleAPI_PlayAnimEnvironment");
static_assert(sizeof(EndBattleAPI_PlayAnimEnvironment) == 0x00001C, "Wrong size on EndBattleAPI_PlayAnimEnvironment");
static_assert(offsetof(EndBattleAPI_PlayAnimEnvironment, LevelName) == 0x000000, "Member 'EndBattleAPI_PlayAnimEnvironment::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayAnimEnvironment, AccessID) == 0x000008, "Member 'EndBattleAPI_PlayAnimEnvironment::AccessID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayAnimEnvironment, AnimName) == 0x000010, "Member 'EndBattleAPI_PlayAnimEnvironment::AnimName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayAnimEnvironment, PlayType) == 0x000018, "Member 'EndBattleAPI_PlayAnimEnvironment::PlayType' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayAnimEnvironmentBeginLoop
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_PlayAnimEnvironmentBeginLoop final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeginAnimName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopAnimName;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_PlayAnimEnvironmentBeginLoop) == 0x000004, "Wrong alignment on EndBattleAPI_PlayAnimEnvironmentBeginLoop");
static_assert(sizeof(EndBattleAPI_PlayAnimEnvironmentBeginLoop) == 0x000020, "Wrong size on EndBattleAPI_PlayAnimEnvironmentBeginLoop");
static_assert(offsetof(EndBattleAPI_PlayAnimEnvironmentBeginLoop, LevelName) == 0x000000, "Member 'EndBattleAPI_PlayAnimEnvironmentBeginLoop::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayAnimEnvironmentBeginLoop, AccessID) == 0x000008, "Member 'EndBattleAPI_PlayAnimEnvironmentBeginLoop::AccessID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayAnimEnvironmentBeginLoop, BeginAnimName) == 0x000010, "Member 'EndBattleAPI_PlayAnimEnvironmentBeginLoop::BeginAnimName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayAnimEnvironmentBeginLoop, LoopAnimName) == 0x000018, "Member 'EndBattleAPI_PlayAnimEnvironmentBeginLoop::LoopAnimName' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayBattleCameraSequence
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_PlayBattleCameraSequence final
{
public:
	class FName                                   CameraSequenceID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacterBase*                      OwnerChara;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacterBase*                      HasResourceChara;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToRegisterSlaveViewOnly;                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MassiveEnvironmentFrustrumScaleForMainPass;        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_PlayBattleCameraSequence) == 0x000008, "Wrong alignment on EndBattleAPI_PlayBattleCameraSequence");
static_assert(sizeof(EndBattleAPI_PlayBattleCameraSequence) == 0x000030, "Wrong size on EndBattleAPI_PlayBattleCameraSequence");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, CameraSequenceID) == 0x000000, "Member 'EndBattleAPI_PlayBattleCameraSequence::CameraSequenceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, OwnerChara) == 0x000008, "Member 'EndBattleAPI_PlayBattleCameraSequence::OwnerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, HasResourceChara) == 0x000010, "Member 'EndBattleAPI_PlayBattleCameraSequence::HasResourceChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, TargetActor) == 0x000018, "Member 'EndBattleAPI_PlayBattleCameraSequence::TargetActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, bIsToRegisterSlaveViewOnly) == 0x000020, "Member 'EndBattleAPI_PlayBattleCameraSequence::bIsToRegisterSlaveViewOnly' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, MassiveEnvironmentFrustrumScaleForMainPass) == 0x000024, "Member 'EndBattleAPI_PlayBattleCameraSequence::MassiveEnvironmentFrustrumScaleForMainPass' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, ReturnValue) == 0x000028, "Member 'EndBattleAPI_PlayBattleCameraSequence::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayBattleCameraSequenceSpecialSkill
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_PlayBattleCameraSequenceSpecialSkill final
{
public:
	class FName                                   CameraSequenceID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacterBase*                      OwnerChara;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacterBase*                      HasResourceChara;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_PlayBattleCameraSequenceSpecialSkill) == 0x000008, "Wrong alignment on EndBattleAPI_PlayBattleCameraSequenceSpecialSkill");
static_assert(sizeof(EndBattleAPI_PlayBattleCameraSequenceSpecialSkill) == 0x000028, "Wrong size on EndBattleAPI_PlayBattleCameraSequenceSpecialSkill");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequenceSpecialSkill, CameraSequenceID) == 0x000000, "Member 'EndBattleAPI_PlayBattleCameraSequenceSpecialSkill::CameraSequenceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequenceSpecialSkill, OwnerChara) == 0x000008, "Member 'EndBattleAPI_PlayBattleCameraSequenceSpecialSkill::OwnerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequenceSpecialSkill, HasResourceChara) == 0x000010, "Member 'EndBattleAPI_PlayBattleCameraSequenceSpecialSkill::HasResourceChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequenceSpecialSkill, TargetActor) == 0x000018, "Member 'EndBattleAPI_PlayBattleCameraSequenceSpecialSkill::TargetActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequenceSpecialSkill, ReturnValue) == 0x000020, "Member 'EndBattleAPI_PlayBattleCameraSequenceSpecialSkill::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayCrowdActor
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_PlayCrowdActor final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_PlayCrowdActor) == 0x000004, "Wrong alignment on EndBattleAPI_PlayCrowdActor");
static_assert(sizeof(EndBattleAPI_PlayCrowdActor) == 0x000018, "Wrong size on EndBattleAPI_PlayCrowdActor");
static_assert(offsetof(EndBattleAPI_PlayCrowdActor, LevelName) == 0x000000, "Member 'EndBattleAPI_PlayCrowdActor::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayCrowdActor, AccessID) == 0x000008, "Member 'EndBattleAPI_PlayCrowdActor::AccessID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayCrowdActor, BlendTime) == 0x000010, "Member 'EndBattleAPI_PlayCrowdActor::BlendTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayCrowdActor, bUseFade) == 0x000014, "Member 'EndBattleAPI_PlayCrowdActor::bUseFade' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayDitherFadeEffect
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_PlayDitherFadeEffect final
{
public:
	int32                                         CategoryType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ownerCharacter;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_PlayDitherFadeEffect) == 0x000008, "Wrong alignment on EndBattleAPI_PlayDitherFadeEffect");
static_assert(sizeof(EndBattleAPI_PlayDitherFadeEffect) == 0x000028, "Wrong size on EndBattleAPI_PlayDitherFadeEffect");
static_assert(offsetof(EndBattleAPI_PlayDitherFadeEffect, CategoryType) == 0x000000, "Member 'EndBattleAPI_PlayDitherFadeEffect::CategoryType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayDitherFadeEffect, ResourceName) == 0x000004, "Member 'EndBattleAPI_PlayDitherFadeEffect::ResourceName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayDitherFadeEffect, ownerCharacter) == 0x000010, "Member 'EndBattleAPI_PlayDitherFadeEffect::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayDitherFadeEffect, AttachSocketName) == 0x000018, "Member 'EndBattleAPI_PlayDitherFadeEffect::AttachSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayDitherFadeEffect, ReturnValue) == 0x000020, "Member 'EndBattleAPI_PlayDitherFadeEffect::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayEffect
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_PlayEffect final
{
public:
	int32                                         CategoryType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttachActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotSynchronizeInvisible;                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_PlayEffect) == 0x000008, "Wrong alignment on EndBattleAPI_PlayEffect");
static_assert(sizeof(EndBattleAPI_PlayEffect) == 0x000028, "Wrong size on EndBattleAPI_PlayEffect");
static_assert(offsetof(EndBattleAPI_PlayEffect, CategoryType) == 0x000000, "Member 'EndBattleAPI_PlayEffect::CategoryType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffect, ResourceName) == 0x000004, "Member 'EndBattleAPI_PlayEffect::ResourceName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffect, AttachActor) == 0x000010, "Member 'EndBattleAPI_PlayEffect::AttachActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffect, AttachSocketName) == 0x000018, "Member 'EndBattleAPI_PlayEffect::AttachSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffect, NotSynchronizeInvisible) == 0x000020, "Member 'EndBattleAPI_PlayEffect::NotSynchronizeInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffect, ReturnValue) == 0x000024, "Member 'EndBattleAPI_PlayEffect::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayEffectFromResourceCharacter
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_PlayEffectFromResourceCharacter final
{
public:
	int32                                         CategoryType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ResourceActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachActor;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotSynchronizeInvisible;                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_PlayEffectFromResourceCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_PlayEffectFromResourceCharacter");
static_assert(sizeof(EndBattleAPI_PlayEffectFromResourceCharacter) == 0x000030, "Wrong size on EndBattleAPI_PlayEffectFromResourceCharacter");
static_assert(offsetof(EndBattleAPI_PlayEffectFromResourceCharacter, CategoryType) == 0x000000, "Member 'EndBattleAPI_PlayEffectFromResourceCharacter::CategoryType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffectFromResourceCharacter, ResourceActor) == 0x000008, "Member 'EndBattleAPI_PlayEffectFromResourceCharacter::ResourceActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffectFromResourceCharacter, ResourceName) == 0x000010, "Member 'EndBattleAPI_PlayEffectFromResourceCharacter::ResourceName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffectFromResourceCharacter, AttachActor) == 0x000018, "Member 'EndBattleAPI_PlayEffectFromResourceCharacter::AttachActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffectFromResourceCharacter, AttachSocketName) == 0x000020, "Member 'EndBattleAPI_PlayEffectFromResourceCharacter::AttachSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffectFromResourceCharacter, NotSynchronizeInvisible) == 0x000028, "Member 'EndBattleAPI_PlayEffectFromResourceCharacter::NotSynchronizeInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffectFromResourceCharacter, ReturnValue) == 0x00002C, "Member 'EndBattleAPI_PlayEffectFromResourceCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayInterruptAnimInBurst
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_PlayInterruptAnimInBurst final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_PlayInterruptAnimInBurst) == 0x000008, "Wrong alignment on EndBattleAPI_PlayInterruptAnimInBurst");
static_assert(sizeof(EndBattleAPI_PlayInterruptAnimInBurst) == 0x000008, "Wrong size on EndBattleAPI_PlayInterruptAnimInBurst");
static_assert(offsetof(EndBattleAPI_PlayInterruptAnimInBurst, InChara) == 0x000000, "Member 'EndBattleAPI_PlayInterruptAnimInBurst::InChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayPartLoopMotion
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_PlayPartLoopMotion final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtraActionLayer                          Layer;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_PlayPartLoopMotion) == 0x000008, "Wrong alignment on EndBattleAPI_PlayPartLoopMotion");
static_assert(sizeof(EndBattleAPI_PlayPartLoopMotion) == 0x000020, "Wrong size on EndBattleAPI_PlayPartLoopMotion");
static_assert(offsetof(EndBattleAPI_PlayPartLoopMotion, Character) == 0x000000, "Member 'EndBattleAPI_PlayPartLoopMotion::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartLoopMotion, MotionName) == 0x000008, "Member 'EndBattleAPI_PlayPartLoopMotion::MotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartLoopMotion, BoneName) == 0x000010, "Member 'EndBattleAPI_PlayPartLoopMotion::BoneName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartLoopMotion, Layer) == 0x000018, "Member 'EndBattleAPI_PlayPartLoopMotion::Layer' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayPartMotion
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_PlayPartMotion final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtraActionLayer                          Layer;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         overrideBlendIn;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         overrideBlendOut;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_PlayPartMotion) == 0x000008, "Wrong alignment on EndBattleAPI_PlayPartMotion");
static_assert(sizeof(EndBattleAPI_PlayPartMotion) == 0x000028, "Wrong size on EndBattleAPI_PlayPartMotion");
static_assert(offsetof(EndBattleAPI_PlayPartMotion, Character) == 0x000000, "Member 'EndBattleAPI_PlayPartMotion::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartMotion, MotionName) == 0x000008, "Member 'EndBattleAPI_PlayPartMotion::MotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartMotion, BoneName) == 0x000010, "Member 'EndBattleAPI_PlayPartMotion::BoneName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartMotion, Layer) == 0x000018, "Member 'EndBattleAPI_PlayPartMotion::Layer' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartMotion, overrideBlendIn) == 0x00001C, "Member 'EndBattleAPI_PlayPartMotion::overrideBlendIn' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartMotion, overrideBlendOut) == 0x000020, "Member 'EndBattleAPI_PlayPartMotion::overrideBlendOut' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayPartStartLoopEndMotion
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_PlayPartStartLoopEndMotion final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartMotionName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopMotionName;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   endMotionName;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtraActionLayer                          Layer;                                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopTime;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_PlayPartStartLoopEndMotion) == 0x000008, "Wrong alignment on EndBattleAPI_PlayPartStartLoopEndMotion");
static_assert(sizeof(EndBattleAPI_PlayPartStartLoopEndMotion) == 0x000030, "Wrong size on EndBattleAPI_PlayPartStartLoopEndMotion");
static_assert(offsetof(EndBattleAPI_PlayPartStartLoopEndMotion, Character) == 0x000000, "Member 'EndBattleAPI_PlayPartStartLoopEndMotion::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartStartLoopEndMotion, StartMotionName) == 0x000008, "Member 'EndBattleAPI_PlayPartStartLoopEndMotion::StartMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartStartLoopEndMotion, LoopMotionName) == 0x000010, "Member 'EndBattleAPI_PlayPartStartLoopEndMotion::LoopMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartStartLoopEndMotion, endMotionName) == 0x000018, "Member 'EndBattleAPI_PlayPartStartLoopEndMotion::endMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartStartLoopEndMotion, BoneName) == 0x000020, "Member 'EndBattleAPI_PlayPartStartLoopEndMotion::BoneName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartStartLoopEndMotion, Layer) == 0x000028, "Member 'EndBattleAPI_PlayPartStartLoopEndMotion::Layer' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayPartStartLoopEndMotion, LoopTime) == 0x00002C, "Member 'EndBattleAPI_PlayPartStartLoopEndMotion::LoopTime' has a wrong offset!");

// Function EndGame.EndBattleAPI.RaycastSphereWallFromChara
// 0x00B0 (0x00B0 - 0x0000)
struct EndBattleAPI_RaycastSphereWallFromChara final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCastRange;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutHit;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutDistance;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutParam;                                          // 0x001C(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RaycastSphereWallFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_RaycastSphereWallFromChara");
static_assert(sizeof(EndBattleAPI_RaycastSphereWallFromChara) == 0x0000B0, "Wrong size on EndBattleAPI_RaycastSphereWallFromChara");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, InCharacter) == 0x000000, "Member 'EndBattleAPI_RaycastSphereWallFromChara::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, InOffsetYaw) == 0x000008, "Member 'EndBattleAPI_RaycastSphereWallFromChara::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, InCastRange) == 0x00000C, "Member 'EndBattleAPI_RaycastSphereWallFromChara::InCastRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, InRadius) == 0x000010, "Member 'EndBattleAPI_RaycastSphereWallFromChara::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, OutHit) == 0x000014, "Member 'EndBattleAPI_RaycastSphereWallFromChara::OutHit' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, OutDistance) == 0x000018, "Member 'EndBattleAPI_RaycastSphereWallFromChara::OutDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, OutParam) == 0x00001C, "Member 'EndBattleAPI_RaycastSphereWallFromChara::OutParam' has a wrong offset!");

// Function EndGame.EndBattleAPI.RaycastTerrainFromChara
// 0x00D8 (0x00D8 - 0x0000)
struct EndBattleAPI_RaycastTerrainFromChara final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AEndCharacter*                          Character;                                         // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x00A0(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x00B0(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x00C0(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x00D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RaycastTerrainFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_RaycastTerrainFromChara");
static_assert(sizeof(EndBattleAPI_RaycastTerrainFromChara) == 0x0000D8, "Wrong size on EndBattleAPI_RaycastTerrainFromChara");
static_assert(offsetof(EndBattleAPI_RaycastTerrainFromChara, HitResult) == 0x000000, "Member 'EndBattleAPI_RaycastTerrainFromChara::HitResult' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastTerrainFromChara, Character) == 0x000090, "Member 'EndBattleAPI_RaycastTerrainFromChara::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastTerrainFromChara, SocketName) == 0x000098, "Member 'EndBattleAPI_RaycastTerrainFromChara::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastTerrainFromChara, Offset) == 0x0000A0, "Member 'EndBattleAPI_RaycastTerrainFromChara::Offset' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastTerrainFromChara, DrawDebugType) == 0x0000AC, "Member 'EndBattleAPI_RaycastTerrainFromChara::DrawDebugType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastTerrainFromChara, TraceColor) == 0x0000B0, "Member 'EndBattleAPI_RaycastTerrainFromChara::TraceColor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastTerrainFromChara, TraceHitColor) == 0x0000C0, "Member 'EndBattleAPI_RaycastTerrainFromChara::TraceHitColor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastTerrainFromChara, DrawTime) == 0x0000D0, "Member 'EndBattleAPI_RaycastTerrainFromChara::DrawTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastTerrainFromChara, ReturnValue) == 0x0000D4, "Member 'EndBattleAPI_RaycastTerrainFromChara::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.RaycastWallFromChara
// 0x00A8 (0x00A8 - 0x0000)
struct EndBattleAPI_RaycastWallFromChara final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCastRange;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutHit;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutDistance;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutParam;                                          // 0x0018(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RaycastWallFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_RaycastWallFromChara");
static_assert(sizeof(EndBattleAPI_RaycastWallFromChara) == 0x0000A8, "Wrong size on EndBattleAPI_RaycastWallFromChara");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, InCharacter) == 0x000000, "Member 'EndBattleAPI_RaycastWallFromChara::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, InOffsetYaw) == 0x000008, "Member 'EndBattleAPI_RaycastWallFromChara::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, InCastRange) == 0x00000C, "Member 'EndBattleAPI_RaycastWallFromChara::InCastRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, OutHit) == 0x000010, "Member 'EndBattleAPI_RaycastWallFromChara::OutHit' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, OutDistance) == 0x000014, "Member 'EndBattleAPI_RaycastWallFromChara::OutDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, OutParam) == 0x000018, "Member 'EndBattleAPI_RaycastWallFromChara::OutParam' has a wrong offset!");

// Function EndGame.EndBattleAPI.RegisterTargetLockGroup
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_RegisterTargetLockGroup final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  TargetList;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MaxEachTargetNum;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrioritizeUCPC;                                   // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GroupName;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAITargetLockGroupPriority           Priority;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreProvocation;                                // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoLockLastOne;                                    // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RegisterTargetLockGroup) == 0x000008, "Wrong alignment on EndBattleAPI_RegisterTargetLockGroup");
static_assert(sizeof(EndBattleAPI_RegisterTargetLockGroup) == 0x000030, "Wrong size on EndBattleAPI_RegisterTargetLockGroup");
static_assert(offsetof(EndBattleAPI_RegisterTargetLockGroup, Character) == 0x000000, "Member 'EndBattleAPI_RegisterTargetLockGroup::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RegisterTargetLockGroup, TargetList) == 0x000008, "Member 'EndBattleAPI_RegisterTargetLockGroup::TargetList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RegisterTargetLockGroup, MaxEachTargetNum) == 0x000018, "Member 'EndBattleAPI_RegisterTargetLockGroup::MaxEachTargetNum' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RegisterTargetLockGroup, bPrioritizeUCPC) == 0x00001C, "Member 'EndBattleAPI_RegisterTargetLockGroup::bPrioritizeUCPC' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RegisterTargetLockGroup, GroupName) == 0x000020, "Member 'EndBattleAPI_RegisterTargetLockGroup::GroupName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RegisterTargetLockGroup, Priority) == 0x000028, "Member 'EndBattleAPI_RegisterTargetLockGroup::Priority' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RegisterTargetLockGroup, bIgnoreProvocation) == 0x000029, "Member 'EndBattleAPI_RegisterTargetLockGroup::bIgnoreProvocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RegisterTargetLockGroup, bNoLockLastOne) == 0x00002A, "Member 'EndBattleAPI_RegisterTargetLockGroup::bNoLockLastOne' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RegisterTargetLockGroup, ReturnValue) == 0x00002B, "Member 'EndBattleAPI_RegisterTargetLockGroup::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.ReGuard
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ReGuard final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ReGuard) == 0x000008, "Wrong alignment on EndBattleAPI_ReGuard");
static_assert(sizeof(EndBattleAPI_ReGuard) == 0x000008, "Wrong size on EndBattleAPI_ReGuard");
static_assert(offsetof(EndBattleAPI_ReGuard, Character) == 0x000000, "Member 'EndBattleAPI_ReGuard::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveAttachEffect
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RemoveAttachEffect final
{
public:
	class AEndCharacter*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroy;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RemoveAttachEffect) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveAttachEffect");
static_assert(sizeof(EndBattleAPI_RemoveAttachEffect) == 0x000020, "Wrong size on EndBattleAPI_RemoveAttachEffect");
static_assert(offsetof(EndBattleAPI_RemoveAttachEffect, Chara) == 0x000000, "Member 'EndBattleAPI_RemoveAttachEffect::Chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveAttachEffect, AttachSocketName) == 0x000008, "Member 'EndBattleAPI_RemoveAttachEffect::AttachSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveAttachEffect, ResourceName) == 0x000010, "Member 'EndBattleAPI_RemoveAttachEffect::ResourceName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveAttachEffect, bDestroy) == 0x000018, "Member 'EndBattleAPI_RemoveAttachEffect::bDestroy' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveDangerSource
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RemoveDangerSource final
{
public:
	class AEndCharacter*                          Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAISensorDangerObjectType                  Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RemoveDangerSource) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveDangerSource");
static_assert(sizeof(EndBattleAPI_RemoveDangerSource) == 0x000010, "Wrong size on EndBattleAPI_RemoveDangerSource");
static_assert(offsetof(EndBattleAPI_RemoveDangerSource, Instigator) == 0x000000, "Member 'EndBattleAPI_RemoveDangerSource::Instigator' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveDangerSource, Type) == 0x000008, "Member 'EndBattleAPI_RemoveDangerSource::Type' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveIgnoreDamageSourceLookAtTraceActor
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RemoveIgnoreDamageSourceLookAtTraceActor final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 IgnoreActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RemoveIgnoreDamageSourceLookAtTraceActor) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveIgnoreDamageSourceLookAtTraceActor");
static_assert(sizeof(EndBattleAPI_RemoveIgnoreDamageSourceLookAtTraceActor) == 0x000010, "Wrong size on EndBattleAPI_RemoveIgnoreDamageSourceLookAtTraceActor");
static_assert(offsetof(EndBattleAPI_RemoveIgnoreDamageSourceLookAtTraceActor, Character) == 0x000000, "Member 'EndBattleAPI_RemoveIgnoreDamageSourceLookAtTraceActor::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveIgnoreDamageSourceLookAtTraceActor, IgnoreActor) == 0x000008, "Member 'EndBattleAPI_RemoveIgnoreDamageSourceLookAtTraceActor::IgnoreActor' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveSpecialStateEffect
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RemoveSpecialStateEffect final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   specialStateEffectID;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RemoveSpecialStateEffect) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveSpecialStateEffect");
static_assert(sizeof(EndBattleAPI_RemoveSpecialStateEffect) == 0x000010, "Wrong size on EndBattleAPI_RemoveSpecialStateEffect");
static_assert(offsetof(EndBattleAPI_RemoveSpecialStateEffect, Character) == 0x000000, "Member 'EndBattleAPI_RemoveSpecialStateEffect::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveSpecialStateEffect, specialStateEffectID) == 0x000008, "Member 'EndBattleAPI_RemoveSpecialStateEffect::specialStateEffectID' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveSpecialStatusChangeID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RemoveSpecialStatusChangeID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RemoveSpecialStatusChangeID) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveSpecialStatusChangeID");
static_assert(sizeof(EndBattleAPI_RemoveSpecialStatusChangeID) == 0x000010, "Wrong size on EndBattleAPI_RemoveSpecialStatusChangeID");
static_assert(offsetof(EndBattleAPI_RemoveSpecialStatusChangeID, Character) == 0x000000, "Member 'EndBattleAPI_RemoveSpecialStatusChangeID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveSpecialStatusChangeID, ID) == 0x000008, "Member 'EndBattleAPI_RemoveSpecialStatusChangeID::ID' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveSpecialStatusChangeIDRequest
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RemoveSpecialStatusChangeIDRequest final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RemoveSpecialStatusChangeIDRequest) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveSpecialStatusChangeIDRequest");
static_assert(sizeof(EndBattleAPI_RemoveSpecialStatusChangeIDRequest) == 0x000010, "Wrong size on EndBattleAPI_RemoveSpecialStatusChangeIDRequest");
static_assert(offsetof(EndBattleAPI_RemoveSpecialStatusChangeIDRequest, Character) == 0x000000, "Member 'EndBattleAPI_RemoveSpecialStatusChangeIDRequest::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveSpecialStatusChangeIDRequest, ID) == 0x000008, "Member 'EndBattleAPI_RemoveSpecialStatusChangeIDRequest::ID' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveSpecialStatusChangeType
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RemoveSpecialStatusChangeType final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RemoveSpecialStatusChangeType) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveSpecialStatusChangeType");
static_assert(sizeof(EndBattleAPI_RemoveSpecialStatusChangeType) == 0x000010, "Wrong size on EndBattleAPI_RemoveSpecialStatusChangeType");
static_assert(offsetof(EndBattleAPI_RemoveSpecialStatusChangeType, InChara) == 0x000000, "Member 'EndBattleAPI_RemoveSpecialStatusChangeType::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveSpecialStatusChangeType, InType) == 0x000008, "Member 'EndBattleAPI_RemoveSpecialStatusChangeType::InType' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveStatusChangeID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_RemoveStatusChangeID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   statusChangeID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lock;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RemoveStatusChangeID) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveStatusChangeID");
static_assert(sizeof(EndBattleAPI_RemoveStatusChangeID) == 0x000018, "Wrong size on EndBattleAPI_RemoveStatusChangeID");
static_assert(offsetof(EndBattleAPI_RemoveStatusChangeID, Character) == 0x000000, "Member 'EndBattleAPI_RemoveStatusChangeID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveStatusChangeID, statusChangeID) == 0x000008, "Member 'EndBattleAPI_RemoveStatusChangeID::statusChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveStatusChangeID, Lock) == 0x000010, "Member 'EndBattleAPI_RemoveStatusChangeID::Lock' has a wrong offset!");

// Function EndGame.EndBattleAPI.RepairParts
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RepairParts final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaPartsSpecID;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshLabel;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPartsRepairConditionType                  Condition;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RepairParts) == 0x000008, "Wrong alignment on EndBattleAPI_RepairParts");
static_assert(sizeof(EndBattleAPI_RepairParts) == 0x000020, "Wrong size on EndBattleAPI_RepairParts");
static_assert(offsetof(EndBattleAPI_RepairParts, Character) == 0x000000, "Member 'EndBattleAPI_RepairParts::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RepairParts, BattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_RepairParts::BattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RepairParts, MeshLabel) == 0x000010, "Member 'EndBattleAPI_RepairParts::MeshLabel' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RepairParts, Condition) == 0x000018, "Member 'EndBattleAPI_RepairParts::Condition' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestAttachSyncAction
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_RequestAttachSyncAction final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RequestAttachSyncAction) == 0x000008, "Wrong alignment on EndBattleAPI_RequestAttachSyncAction");
static_assert(sizeof(EndBattleAPI_RequestAttachSyncAction) == 0x000008, "Wrong size on EndBattleAPI_RequestAttachSyncAction");
static_assert(offsetof(EndBattleAPI_RequestAttachSyncAction, Character) == 0x000000, "Member 'EndBattleAPI_RequestAttachSyncAction::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestBrokenDestructionParts
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_RequestBrokenDestructionParts final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   uniqueName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestBrokenDestructionParts) == 0x000008, "Wrong alignment on EndBattleAPI_RequestBrokenDestructionParts");
static_assert(sizeof(EndBattleAPI_RequestBrokenDestructionParts) == 0x000018, "Wrong size on EndBattleAPI_RequestBrokenDestructionParts");
static_assert(offsetof(EndBattleAPI_RequestBrokenDestructionParts, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_RequestBrokenDestructionParts::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestBrokenDestructionParts, uniqueName) == 0x000008, "Member 'EndBattleAPI_RequestBrokenDestructionParts::uniqueName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestBrokenDestructionParts, ReturnValue) == 0x000010, "Member 'EndBattleAPI_RequestBrokenDestructionParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestCreateDestructionParts
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_RequestCreateDestructionParts final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   uniqueName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   spawnCharaSpecName;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   partsAttachSocketName;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recreate;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestCreateDestructionParts) == 0x000008, "Wrong alignment on EndBattleAPI_RequestCreateDestructionParts");
static_assert(sizeof(EndBattleAPI_RequestCreateDestructionParts) == 0x000028, "Wrong size on EndBattleAPI_RequestCreateDestructionParts");
static_assert(offsetof(EndBattleAPI_RequestCreateDestructionParts, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_RequestCreateDestructionParts::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestCreateDestructionParts, uniqueName) == 0x000008, "Member 'EndBattleAPI_RequestCreateDestructionParts::uniqueName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestCreateDestructionParts, spawnCharaSpecName) == 0x000010, "Member 'EndBattleAPI_RequestCreateDestructionParts::spawnCharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestCreateDestructionParts, partsAttachSocketName) == 0x000018, "Member 'EndBattleAPI_RequestCreateDestructionParts::partsAttachSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestCreateDestructionParts, recreate) == 0x000020, "Member 'EndBattleAPI_RequestCreateDestructionParts::recreate' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestCreateDestructionParts, ReturnValue) == 0x000021, "Member 'EndBattleAPI_RequestCreateDestructionParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestCurrentChargeCrystalDisappears
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RequestCurrentChargeCrystalDisappears final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestCurrentChargeCrystalDisappears) == 0x000008, "Wrong alignment on EndBattleAPI_RequestCurrentChargeCrystalDisappears");
static_assert(sizeof(EndBattleAPI_RequestCurrentChargeCrystalDisappears) == 0x000010, "Wrong size on EndBattleAPI_RequestCurrentChargeCrystalDisappears");
static_assert(offsetof(EndBattleAPI_RequestCurrentChargeCrystalDisappears, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_RequestCurrentChargeCrystalDisappears::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestCurrentChargeCrystalDisappears, ReturnValue) == 0x000008, "Member 'EndBattleAPI_RequestCurrentChargeCrystalDisappears::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestPreloadCutScene
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_RequestPreloadCutScene final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RequestPreloadCutScene) == 0x000004, "Wrong alignment on EndBattleAPI_RequestPreloadCutScene");
static_assert(sizeof(EndBattleAPI_RequestPreloadCutScene) == 0x000008, "Wrong size on EndBattleAPI_RequestPreloadCutScene");
static_assert(offsetof(EndBattleAPI_RequestPreloadCutScene, CutSceneID) == 0x000000, "Member 'EndBattleAPI_RequestPreloadCutScene::CutSceneID' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestShowAbilityName
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RequestShowAbilityName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonGuardableIcon;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestShowAbilityName) == 0x000008, "Wrong alignment on EndBattleAPI_RequestShowAbilityName");
static_assert(sizeof(EndBattleAPI_RequestShowAbilityName) == 0x000020, "Wrong size on EndBattleAPI_RequestShowAbilityName");
static_assert(offsetof(EndBattleAPI_RequestShowAbilityName, Character) == 0x000000, "Member 'EndBattleAPI_RequestShowAbilityName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestShowAbilityName, String) == 0x000008, "Member 'EndBattleAPI_RequestShowAbilityName::String' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestShowAbilityName, InTime) == 0x000018, "Member 'EndBattleAPI_RequestShowAbilityName::InTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestShowAbilityName, bNonGuardableIcon) == 0x00001C, "Member 'EndBattleAPI_RequestShowAbilityName::bNonGuardableIcon' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestSummonEnemyCutSceneAbility
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RequestSummonEnemyCutSceneAbility final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCutSceneID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestSummonEnemyCutSceneAbility) == 0x000008, "Wrong alignment on EndBattleAPI_RequestSummonEnemyCutSceneAbility");
static_assert(sizeof(EndBattleAPI_RequestSummonEnemyCutSceneAbility) == 0x000020, "Wrong size on EndBattleAPI_RequestSummonEnemyCutSceneAbility");
static_assert(offsetof(EndBattleAPI_RequestSummonEnemyCutSceneAbility, InCharacter) == 0x000000, "Member 'EndBattleAPI_RequestSummonEnemyCutSceneAbility::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestSummonEnemyCutSceneAbility, InCutSceneID) == 0x000008, "Member 'EndBattleAPI_RequestSummonEnemyCutSceneAbility::InCutSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestSummonEnemyCutSceneAbility, InDamageSourceID) == 0x000010, "Member 'EndBattleAPI_RequestSummonEnemyCutSceneAbility::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestSummonEnemyCutSceneAbility, ReturnValue) == 0x000018, "Member 'EndBattleAPI_RequestSummonEnemyCutSceneAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestSummonEnemyPlayCutSceneAbility
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RequestSummonEnemyPlayCutSceneAbility final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestSummonEnemyPlayCutSceneAbility) == 0x000008, "Wrong alignment on EndBattleAPI_RequestSummonEnemyPlayCutSceneAbility");
static_assert(sizeof(EndBattleAPI_RequestSummonEnemyPlayCutSceneAbility) == 0x000010, "Wrong size on EndBattleAPI_RequestSummonEnemyPlayCutSceneAbility");
static_assert(offsetof(EndBattleAPI_RequestSummonEnemyPlayCutSceneAbility, InCharacter) == 0x000000, "Member 'EndBattleAPI_RequestSummonEnemyPlayCutSceneAbility::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestSummonEnemyPlayCutSceneAbility, ReturnValue) == 0x000008, "Member 'EndBattleAPI_RequestSummonEnemyPlayCutSceneAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestSummonEnemyPreloadCutSceneAbility
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCutSceneID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility) == 0x000008, "Wrong alignment on EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility");
static_assert(sizeof(EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility) == 0x000020, "Wrong size on EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility");
static_assert(offsetof(EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility, InCharacter) == 0x000000, "Member 'EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility, InCutSceneID) == 0x000008, "Member 'EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility::InCutSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility, InDamageSourceID) == 0x000010, "Member 'EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility, ReturnValue) == 0x000018, "Member 'EndBattleAPI_RequestSummonEnemyPreloadCutSceneAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestSyncActionEnd
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_RequestSyncActionEnd final
{
public:
	class AEndCharacter*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSyncActionEndType                   Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          causerCharacter;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RequestSyncActionEnd) == 0x000008, "Wrong alignment on EndBattleAPI_RequestSyncActionEnd");
static_assert(sizeof(EndBattleAPI_RequestSyncActionEnd) == 0x000018, "Wrong size on EndBattleAPI_RequestSyncActionEnd");
static_assert(offsetof(EndBattleAPI_RequestSyncActionEnd, Chara) == 0x000000, "Member 'EndBattleAPI_RequestSyncActionEnd::Chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestSyncActionEnd, Type) == 0x000008, "Member 'EndBattleAPI_RequestSyncActionEnd::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestSyncActionEnd, causerCharacter) == 0x000010, "Member 'EndBattleAPI_RequestSyncActionEnd::causerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestUniqueAbilitySpawnWeapon
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_RequestUniqueAbilitySpawnWeapon final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleUniqueAbilitySpawnWeaponType        weaponType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpawnWeaponStateType                weaponStateType;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   uniqueWeaponName;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestUniqueAbilitySpawnWeapon) == 0x000008, "Wrong alignment on EndBattleAPI_RequestUniqueAbilitySpawnWeapon");
static_assert(sizeof(EndBattleAPI_RequestUniqueAbilitySpawnWeapon) == 0x000018, "Wrong size on EndBattleAPI_RequestUniqueAbilitySpawnWeapon");
static_assert(offsetof(EndBattleAPI_RequestUniqueAbilitySpawnWeapon, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_RequestUniqueAbilitySpawnWeapon::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestUniqueAbilitySpawnWeapon, weaponType) == 0x000008, "Member 'EndBattleAPI_RequestUniqueAbilitySpawnWeapon::weaponType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestUniqueAbilitySpawnWeapon, weaponStateType) == 0x000009, "Member 'EndBattleAPI_RequestUniqueAbilitySpawnWeapon::weaponStateType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestUniqueAbilitySpawnWeapon, uniqueWeaponName) == 0x00000C, "Member 'EndBattleAPI_RequestUniqueAbilitySpawnWeapon::uniqueWeaponName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestUniqueAbilitySpawnWeapon, ReturnValue) == 0x000014, "Member 'EndBattleAPI_RequestUniqueAbilitySpawnWeapon::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetAimTargetOffsetHeight
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetAimTargetOffsetHeight final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetAimTargetOffsetHeight) == 0x000008, "Wrong alignment on EndBattleAPI_ResetAimTargetOffsetHeight");
static_assert(sizeof(EndBattleAPI_ResetAimTargetOffsetHeight) == 0x000008, "Wrong size on EndBattleAPI_ResetAimTargetOffsetHeight");
static_assert(offsetof(EndBattleAPI_ResetAimTargetOffsetHeight, Character) == 0x000000, "Member 'EndBattleAPI_ResetAimTargetOffsetHeight::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetAIPCExcludeTarget
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_ResetAIPCExcludeTarget final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetAIPCExcludeTarget) == 0x000001, "Wrong alignment on EndBattleAPI_ResetAIPCExcludeTarget");
static_assert(sizeof(EndBattleAPI_ResetAIPCExcludeTarget) == 0x000001, "Wrong size on EndBattleAPI_ResetAIPCExcludeTarget");
static_assert(offsetof(EndBattleAPI_ResetAIPCExcludeTarget, PlayerType) == 0x000000, "Member 'EndBattleAPI_ResetAIPCExcludeTarget::PlayerType' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetAIPCTargetChoosingParam
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_ResetAIPCTargetChoosingParam final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetAIPCTargetChoosingParam) == 0x000001, "Wrong alignment on EndBattleAPI_ResetAIPCTargetChoosingParam");
static_assert(sizeof(EndBattleAPI_ResetAIPCTargetChoosingParam) == 0x000001, "Wrong size on EndBattleAPI_ResetAIPCTargetChoosingParam");
static_assert(offsetof(EndBattleAPI_ResetAIPCTargetChoosingParam, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_ResetAIPCTargetChoosingParam::PlayerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetAIPCTargetDirect
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_ResetAIPCTargetDirect final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetAIPCTargetDirect) == 0x000001, "Wrong alignment on EndBattleAPI_ResetAIPCTargetDirect");
static_assert(sizeof(EndBattleAPI_ResetAIPCTargetDirect) == 0x000001, "Wrong size on EndBattleAPI_ResetAIPCTargetDirect");
static_assert(offsetof(EndBattleAPI_ResetAIPCTargetDirect, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_ResetAIPCTargetDirect::PlayerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetAppearance
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetAppearance final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetAppearance) == 0x000008, "Wrong alignment on EndBattleAPI_ResetAppearance");
static_assert(sizeof(EndBattleAPI_ResetAppearance) == 0x000008, "Wrong size on EndBattleAPI_ResetAppearance");
static_assert(offsetof(EndBattleAPI_ResetAppearance, Character) == 0x000000, "Member 'EndBattleAPI_ResetAppearance::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetAppearanceFrog
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetAppearanceFrog final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetAppearanceFrog) == 0x000008, "Wrong alignment on EndBattleAPI_ResetAppearanceFrog");
static_assert(sizeof(EndBattleAPI_ResetAppearanceFrog) == 0x000008, "Wrong size on EndBattleAPI_ResetAppearanceFrog");
static_assert(offsetof(EndBattleAPI_ResetAppearanceFrog, Character) == 0x000000, "Member 'EndBattleAPI_ResetAppearanceFrog::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetBP
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ResetBP final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetAnimation;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ResetBP) == 0x000008, "Wrong alignment on EndBattleAPI_ResetBP");
static_assert(sizeof(EndBattleAPI_ResetBP) == 0x000010, "Wrong size on EndBattleAPI_ResetBP");
static_assert(offsetof(EndBattleAPI_ResetBP, Character) == 0x000000, "Member 'EndBattleAPI_ResetBP::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetBP, bResetAnimation) == 0x000008, "Member 'EndBattleAPI_ResetBP::bResetAnimation' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetBreakDamageValue
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetBreakDamageValue final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetBreakDamageValue) == 0x000008, "Wrong alignment on EndBattleAPI_ResetBreakDamageValue");
static_assert(sizeof(EndBattleAPI_ResetBreakDamageValue) == 0x000008, "Wrong size on EndBattleAPI_ResetBreakDamageValue");
static_assert(offsetof(EndBattleAPI_ResetBreakDamageValue, Character) == 0x000000, "Member 'EndBattleAPI_ResetBreakDamageValue::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetBreakPartsDamageValue
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ResetBreakPartsDamageValue final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaPartsSpecID;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetBreakPartsDamageValue) == 0x000008, "Wrong alignment on EndBattleAPI_ResetBreakPartsDamageValue");
static_assert(sizeof(EndBattleAPI_ResetBreakPartsDamageValue) == 0x000010, "Wrong size on EndBattleAPI_ResetBreakPartsDamageValue");
static_assert(offsetof(EndBattleAPI_ResetBreakPartsDamageValue, Character) == 0x000000, "Member 'EndBattleAPI_ResetBreakPartsDamageValue::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetBreakPartsDamageValue, BattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_ResetBreakPartsDamageValue::BattleCharaPartsSpecID' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetBreakWeakAttributeDamageValue
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetBreakWeakAttributeDamageValue final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetBreakWeakAttributeDamageValue) == 0x000008, "Wrong alignment on EndBattleAPI_ResetBreakWeakAttributeDamageValue");
static_assert(sizeof(EndBattleAPI_ResetBreakWeakAttributeDamageValue) == 0x000008, "Wrong size on EndBattleAPI_ResetBreakWeakAttributeDamageValue");
static_assert(offsetof(EndBattleAPI_ResetBreakWeakAttributeDamageValue, Character) == 0x000000, "Member 'EndBattleAPI_ResetBreakWeakAttributeDamageValue::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetCharacterMovementMode
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetCharacterMovementMode final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetCharacterMovementMode) == 0x000008, "Wrong alignment on EndBattleAPI_ResetCharacterMovementMode");
static_assert(sizeof(EndBattleAPI_ResetCharacterMovementMode) == 0x000008, "Wrong size on EndBattleAPI_ResetCharacterMovementMode");
static_assert(offsetof(EndBattleAPI_ResetCharacterMovementMode, InChara) == 0x000000, "Member 'EndBattleAPI_ResetCharacterMovementMode::InChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetDamageHitResponse
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetDamageHitResponse final
{
public:
	class AEndCharacterBase*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetDamageHitResponse) == 0x000008, "Wrong alignment on EndBattleAPI_ResetDamageHitResponse");
static_assert(sizeof(EndBattleAPI_ResetDamageHitResponse) == 0x000008, "Wrong size on EndBattleAPI_ResetDamageHitResponse");
static_assert(offsetof(EndBattleAPI_ResetDamageHitResponse, Character) == 0x000000, "Member 'EndBattleAPI_ResetDamageHitResponse::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetHitCharaResponse
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetHitCharaResponse final
{
public:
	class AEndCharacterBase*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetHitCharaResponse) == 0x000008, "Wrong alignment on EndBattleAPI_ResetHitCharaResponse");
static_assert(sizeof(EndBattleAPI_ResetHitCharaResponse) == 0x000008, "Wrong size on EndBattleAPI_ResetHitCharaResponse");
static_assert(offsetof(EndBattleAPI_ResetHitCharaResponse, Character) == 0x000000, "Member 'EndBattleAPI_ResetHitCharaResponse::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideActiveAimAngle
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetOverrideActiveAimAngle final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetOverrideActiveAimAngle) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideActiveAimAngle");
static_assert(sizeof(EndBattleAPI_ResetOverrideActiveAimAngle) == 0x000008, "Wrong size on EndBattleAPI_ResetOverrideActiveAimAngle");
static_assert(offsetof(EndBattleAPI_ResetOverrideActiveAimAngle, Character) == 0x000000, "Member 'EndBattleAPI_ResetOverrideActiveAimAngle::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideAdditiveDamage
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetOverrideAdditiveDamage final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetOverrideAdditiveDamage) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideAdditiveDamage");
static_assert(sizeof(EndBattleAPI_ResetOverrideAdditiveDamage) == 0x000008, "Wrong size on EndBattleAPI_ResetOverrideAdditiveDamage");
static_assert(offsetof(EndBattleAPI_ResetOverrideAdditiveDamage, InChara) == 0x000000, "Member 'EndBattleAPI_ResetOverrideAdditiveDamage::InChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideBattleCharaPartsSpec
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ResetOverrideBattleCharaPartsSpec final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseID;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetOverrideBattleCharaPartsSpec) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideBattleCharaPartsSpec");
static_assert(sizeof(EndBattleAPI_ResetOverrideBattleCharaPartsSpec) == 0x000010, "Wrong size on EndBattleAPI_ResetOverrideBattleCharaPartsSpec");
static_assert(offsetof(EndBattleAPI_ResetOverrideBattleCharaPartsSpec, Character) == 0x000000, "Member 'EndBattleAPI_ResetOverrideBattleCharaPartsSpec::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetOverrideBattleCharaPartsSpec, BaseID) == 0x000008, "Member 'EndBattleAPI_ResetOverrideBattleCharaPartsSpec::BaseID' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideBattleCharaSpec
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetOverrideBattleCharaSpec final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetOverrideBattleCharaSpec) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideBattleCharaSpec");
static_assert(sizeof(EndBattleAPI_ResetOverrideBattleCharaSpec) == 0x000008, "Wrong size on EndBattleAPI_ResetOverrideBattleCharaSpec");
static_assert(offsetof(EndBattleAPI_ResetOverrideBattleCharaSpec, Character) == 0x000000, "Member 'EndBattleAPI_ResetOverrideBattleCharaSpec::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideBattleDefenseID
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetOverrideBattleDefenseID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetOverrideBattleDefenseID) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideBattleDefenseID");
static_assert(sizeof(EndBattleAPI_ResetOverrideBattleDefenseID) == 0x000008, "Wrong size on EndBattleAPI_ResetOverrideBattleDefenseID");
static_assert(offsetof(EndBattleAPI_ResetOverrideBattleDefenseID, Character) == 0x000000, "Member 'EndBattleAPI_ResetOverrideBattleDefenseID::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideCameraLockSocketName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ResetOverrideCameraLockSocketName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ResetOverrideCameraLockSocketName) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideCameraLockSocketName");
static_assert(sizeof(EndBattleAPI_ResetOverrideCameraLockSocketName) == 0x000010, "Wrong size on EndBattleAPI_ResetOverrideCameraLockSocketName");
static_assert(offsetof(EndBattleAPI_ResetOverrideCameraLockSocketName, Character) == 0x000000, "Member 'EndBattleAPI_ResetOverrideCameraLockSocketName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetOverrideCameraLockSocketName, BlendTime) == 0x000008, "Member 'EndBattleAPI_ResetOverrideCameraLockSocketName::BlendTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetOverrideCameraLockSocketName, BlendOption) == 0x00000C, "Member 'EndBattleAPI_ResetOverrideCameraLockSocketName::BlendOption' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideCapsuleSize
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetOverrideCapsuleSize final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetOverrideCapsuleSize) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideCapsuleSize");
static_assert(sizeof(EndBattleAPI_ResetOverrideCapsuleSize) == 0x000008, "Wrong size on EndBattleAPI_ResetOverrideCapsuleSize");
static_assert(offsetof(EndBattleAPI_ResetOverrideCapsuleSize, InCharacter) == 0x000000, "Member 'EndBattleAPI_ResetOverrideCapsuleSize::InCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideEnemyBookID
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetOverrideEnemyBookID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetOverrideEnemyBookID) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideEnemyBookID");
static_assert(sizeof(EndBattleAPI_ResetOverrideEnemyBookID) == 0x000008, "Wrong size on EndBattleAPI_ResetOverrideEnemyBookID");
static_assert(offsetof(EndBattleAPI_ResetOverrideEnemyBookID, Character) == 0x000000, "Member 'EndBattleAPI_ResetOverrideEnemyBookID::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideKeep
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetOverrideKeep final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetOverrideKeep) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideKeep");
static_assert(sizeof(EndBattleAPI_ResetOverrideKeep) == 0x000008, "Wrong size on EndBattleAPI_ResetOverrideKeep");
static_assert(offsetof(EndBattleAPI_ResetOverrideKeep, Character) == 0x000000, "Member 'EndBattleAPI_ResetOverrideKeep::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideLocomotionAnimSequenceName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ResetOverrideLocomotionAnimSequenceName final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionAnimGroup                       AnimGroup;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetOverrideLocomotionAnimSequenceName) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideLocomotionAnimSequenceName");
static_assert(sizeof(EndBattleAPI_ResetOverrideLocomotionAnimSequenceName) == 0x000010, "Wrong size on EndBattleAPI_ResetOverrideLocomotionAnimSequenceName");
static_assert(offsetof(EndBattleAPI_ResetOverrideLocomotionAnimSequenceName, InChara) == 0x000000, "Member 'EndBattleAPI_ResetOverrideLocomotionAnimSequenceName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetOverrideLocomotionAnimSequenceName, AnimGroup) == 0x000008, "Member 'EndBattleAPI_ResetOverrideLocomotionAnimSequenceName::AnimGroup' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetOverrideLocomotionAnimSequenceName, BlendTime) == 0x00000C, "Member 'EndBattleAPI_ResetOverrideLocomotionAnimSequenceName::BlendTime' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverrideMovementBase
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetOverrideMovementBase final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetOverrideMovementBase) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverrideMovementBase");
static_assert(sizeof(EndBattleAPI_ResetOverrideMovementBase) == 0x000008, "Wrong size on EndBattleAPI_ResetOverrideMovementBase");
static_assert(offsetof(EndBattleAPI_ResetOverrideMovementBase, InCharacter) == 0x000000, "Member 'EndBattleAPI_ResetOverrideMovementBase::InCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetOverridePartsCameraLockSocketName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_ResetOverridePartsCameraLockSocketName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseBattleCharaPartsSpecID;                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ResetOverridePartsCameraLockSocketName) == 0x000008, "Wrong alignment on EndBattleAPI_ResetOverridePartsCameraLockSocketName");
static_assert(sizeof(EndBattleAPI_ResetOverridePartsCameraLockSocketName) == 0x000018, "Wrong size on EndBattleAPI_ResetOverridePartsCameraLockSocketName");
static_assert(offsetof(EndBattleAPI_ResetOverridePartsCameraLockSocketName, Character) == 0x000000, "Member 'EndBattleAPI_ResetOverridePartsCameraLockSocketName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetOverridePartsCameraLockSocketName, BaseBattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_ResetOverridePartsCameraLockSocketName::BaseBattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetOverridePartsCameraLockSocketName, BlendTime) == 0x000010, "Member 'EndBattleAPI_ResetOverridePartsCameraLockSocketName::BlendTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetOverridePartsCameraLockSocketName, BlendOption) == 0x000014, "Member 'EndBattleAPI_ResetOverridePartsCameraLockSocketName::BlendOption' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetPrimaryAnimPack
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetPrimaryAnimPack final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetPrimaryAnimPack) == 0x000008, "Wrong alignment on EndBattleAPI_ResetPrimaryAnimPack");
static_assert(sizeof(EndBattleAPI_ResetPrimaryAnimPack) == 0x000008, "Wrong size on EndBattleAPI_ResetPrimaryAnimPack");
static_assert(offsetof(EndBattleAPI_ResetPrimaryAnimPack, Character) == 0x000000, "Member 'EndBattleAPI_ResetPrimaryAnimPack::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetRigidBodyName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_ResetRigidBodyName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RigidBodyName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetRigidBodyName) == 0x000008, "Wrong alignment on EndBattleAPI_ResetRigidBodyName");
static_assert(sizeof(EndBattleAPI_ResetRigidBodyName) == 0x000010, "Wrong size on EndBattleAPI_ResetRigidBodyName");
static_assert(offsetof(EndBattleAPI_ResetRigidBodyName, Character) == 0x000000, "Member 'EndBattleAPI_ResetRigidBodyName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ResetRigidBodyName, RigidBodyName) == 0x000008, "Member 'EndBattleAPI_ResetRigidBodyName::RigidBodyName' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetRootCapsuleAttackTargetSizeScale
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetRootCapsuleAttackTargetSizeScale final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetRootCapsuleAttackTargetSizeScale) == 0x000008, "Wrong alignment on EndBattleAPI_ResetRootCapsuleAttackTargetSizeScale");
static_assert(sizeof(EndBattleAPI_ResetRootCapsuleAttackTargetSizeScale) == 0x000008, "Wrong size on EndBattleAPI_ResetRootCapsuleAttackTargetSizeScale");
static_assert(offsetof(EndBattleAPI_ResetRootCapsuleAttackTargetSizeScale, Character) == 0x000000, "Member 'EndBattleAPI_ResetRootCapsuleAttackTargetSizeScale::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetSubCollisionPushBackSpeed
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetSubCollisionPushBackSpeed final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetSubCollisionPushBackSpeed) == 0x000008, "Wrong alignment on EndBattleAPI_ResetSubCollisionPushBackSpeed");
static_assert(sizeof(EndBattleAPI_ResetSubCollisionPushBackSpeed) == 0x000008, "Wrong size on EndBattleAPI_ResetSubCollisionPushBackSpeed");
static_assert(offsetof(EndBattleAPI_ResetSubCollisionPushBackSpeed, InChara) == 0x000000, "Member 'EndBattleAPI_ResetSubCollisionPushBackSpeed::InChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetSummonCutSceneReturnLocation
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetSummonCutSceneReturnLocation final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetSummonCutSceneReturnLocation) == 0x000008, "Wrong alignment on EndBattleAPI_ResetSummonCutSceneReturnLocation");
static_assert(sizeof(EndBattleAPI_ResetSummonCutSceneReturnLocation) == 0x000008, "Wrong size on EndBattleAPI_ResetSummonCutSceneReturnLocation");
static_assert(offsetof(EndBattleAPI_ResetSummonCutSceneReturnLocation, Character) == 0x000000, "Member 'EndBattleAPI_ResetSummonCutSceneReturnLocation::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetUniqueAbilityDerivedFixedAbilityID
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetUniqueAbilityDerivedFixedAbilityID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetUniqueAbilityDerivedFixedAbilityID) == 0x000008, "Wrong alignment on EndBattleAPI_ResetUniqueAbilityDerivedFixedAbilityID");
static_assert(sizeof(EndBattleAPI_ResetUniqueAbilityDerivedFixedAbilityID) == 0x000008, "Wrong size on EndBattleAPI_ResetUniqueAbilityDerivedFixedAbilityID");
static_assert(offsetof(EndBattleAPI_ResetUniqueAbilityDerivedFixedAbilityID, Character) == 0x000000, "Member 'EndBattleAPI_ResetUniqueAbilityDerivedFixedAbilityID::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetWalkableFloorAngle
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetWalkableFloorAngle final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetWalkableFloorAngle) == 0x000008, "Wrong alignment on EndBattleAPI_ResetWalkableFloorAngle");
static_assert(sizeof(EndBattleAPI_ResetWalkableFloorAngle) == 0x000008, "Wrong size on EndBattleAPI_ResetWalkableFloorAngle");
static_assert(offsetof(EndBattleAPI_ResetWalkableFloorAngle, InCharacter) == 0x000000, "Member 'EndBattleAPI_ResetWalkableFloorAngle::InCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetWalkableFloorAngleOnBattleNav
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetWalkableFloorAngleOnBattleNav final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetWalkableFloorAngleOnBattleNav) == 0x000008, "Wrong alignment on EndBattleAPI_ResetWalkableFloorAngleOnBattleNav");
static_assert(sizeof(EndBattleAPI_ResetWalkableFloorAngleOnBattleNav) == 0x000008, "Wrong size on EndBattleAPI_ResetWalkableFloorAngleOnBattleNav");
static_assert(offsetof(EndBattleAPI_ResetWalkableFloorAngleOnBattleNav, InCharacter) == 0x000000, "Member 'EndBattleAPI_ResetWalkableFloorAngleOnBattleNav::InCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendEventDamageSource
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SendEventDamageSource final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendEventDamageSource) == 0x000008, "Wrong alignment on EndBattleAPI_SendEventDamageSource");
static_assert(sizeof(EndBattleAPI_SendEventDamageSource) == 0x000010, "Wrong size on EndBattleAPI_SendEventDamageSource");
static_assert(offsetof(EndBattleAPI_SendEventDamageSource, Character) == 0x000000, "Member 'EndBattleAPI_SendEventDamageSource::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendEventDamageSource, DamageSourceID) == 0x000008, "Member 'EndBattleAPI_SendEventDamageSource::DamageSourceID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendEventDamageSourceTheTableNumber
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SendEventDamageSourceTheTableNumber final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         tableNumber;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SendEventDamageSourceTheTableNumber) == 0x000008, "Wrong alignment on EndBattleAPI_SendEventDamageSourceTheTableNumber");
static_assert(sizeof(EndBattleAPI_SendEventDamageSourceTheTableNumber) == 0x000018, "Wrong size on EndBattleAPI_SendEventDamageSourceTheTableNumber");
static_assert(offsetof(EndBattleAPI_SendEventDamageSourceTheTableNumber, Character) == 0x000000, "Member 'EndBattleAPI_SendEventDamageSourceTheTableNumber::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendEventDamageSourceTheTableNumber, DamageSourceID) == 0x000008, "Member 'EndBattleAPI_SendEventDamageSourceTheTableNumber::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendEventDamageSourceTheTableNumber, tableNumber) == 0x000010, "Member 'EndBattleAPI_SendEventDamageSourceTheTableNumber::tableNumber' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendEventResidualParticles
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SendEventResidualParticles final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleResidualParticlesEventType          EventType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          otherThanOwner;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SendEventResidualParticles) == 0x000008, "Wrong alignment on EndBattleAPI_SendEventResidualParticles");
static_assert(sizeof(EndBattleAPI_SendEventResidualParticles) == 0x000010, "Wrong size on EndBattleAPI_SendEventResidualParticles");
static_assert(offsetof(EndBattleAPI_SendEventResidualParticles, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_SendEventResidualParticles::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendEventResidualParticles, EventType) == 0x000008, "Member 'EndBattleAPI_SendEventResidualParticles::EventType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendEventResidualParticles, otherThanOwner) == 0x000009, "Member 'EndBattleAPI_SendEventResidualParticles::otherThanOwner' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendGenjiShieldToPlayBattleCamera
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SendGenjiShieldToPlayBattleCamera final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sequenceActorUID;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SendGenjiShieldToPlayBattleCamera) == 0x000008, "Wrong alignment on EndBattleAPI_SendGenjiShieldToPlayBattleCamera");
static_assert(sizeof(EndBattleAPI_SendGenjiShieldToPlayBattleCamera) == 0x000010, "Wrong size on EndBattleAPI_SendGenjiShieldToPlayBattleCamera");
static_assert(offsetof(EndBattleAPI_SendGenjiShieldToPlayBattleCamera, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_SendGenjiShieldToPlayBattleCamera::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendGenjiShieldToPlayBattleCamera, sequenceActorUID) == 0x000008, "Member 'EndBattleAPI_SendGenjiShieldToPlayBattleCamera::sequenceActorUID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendGenjiShieldToPlayBattleCamera, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_SendGenjiShieldToPlayBattleCamera::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendMetaMessage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SendMetaMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendMetaMessage) == 0x000008, "Wrong alignment on EndBattleAPI_SendMetaMessage");
static_assert(sizeof(EndBattleAPI_SendMetaMessage) == 0x000010, "Wrong size on EndBattleAPI_SendMetaMessage");
static_assert(offsetof(EndBattleAPI_SendMetaMessage, InMessage) == 0x000000, "Member 'EndBattleAPI_SendMetaMessage::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendPhaseNumberToSummonSystem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_SendPhaseNumberToSummonSystem final
{
public:
	int32                                         currentPhase;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendPhaseNumberToSummonSystem) == 0x000004, "Wrong alignment on EndBattleAPI_SendPhaseNumberToSummonSystem");
static_assert(sizeof(EndBattleAPI_SendPhaseNumberToSummonSystem) == 0x000004, "Wrong size on EndBattleAPI_SendPhaseNumberToSummonSystem");
static_assert(offsetof(EndBattleAPI_SendPhaseNumberToSummonSystem, currentPhase) == 0x000000, "Member 'EndBattleAPI_SendPhaseNumberToSummonSystem::currentPhase' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendSystemMessage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SendSystemMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendSystemMessage) == 0x000008, "Wrong alignment on EndBattleAPI_SendSystemMessage");
static_assert(sizeof(EndBattleAPI_SendSystemMessage) == 0x000010, "Wrong size on EndBattleAPI_SendSystemMessage");
static_assert(offsetof(EndBattleAPI_SendSystemMessage, InMessage) == 0x000000, "Member 'EndBattleAPI_SendSystemMessage::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetActorLocationAndRotationToRoot
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SetActorLocationAndRotationToRoot final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLocation;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotator;                                        // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetActorLocationAndRotationToRoot) == 0x000008, "Wrong alignment on EndBattleAPI_SetActorLocationAndRotationToRoot");
static_assert(sizeof(EndBattleAPI_SetActorLocationAndRotationToRoot) == 0x000020, "Wrong size on EndBattleAPI_SetActorLocationAndRotationToRoot");
static_assert(offsetof(EndBattleAPI_SetActorLocationAndRotationToRoot, Character) == 0x000000, "Member 'EndBattleAPI_SetActorLocationAndRotationToRoot::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActorLocationAndRotationToRoot, NewLocation) == 0x000008, "Member 'EndBattleAPI_SetActorLocationAndRotationToRoot::NewLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActorLocationAndRotationToRoot, NewRotator) == 0x000014, "Member 'EndBattleAPI_SetActorLocationAndRotationToRoot::NewRotator' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetActorLocationToRoot
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetActorLocationToRoot final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLocation;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetActorLocationToRoot) == 0x000008, "Wrong alignment on EndBattleAPI_SetActorLocationToRoot");
static_assert(sizeof(EndBattleAPI_SetActorLocationToRoot) == 0x000018, "Wrong size on EndBattleAPI_SetActorLocationToRoot");
static_assert(offsetof(EndBattleAPI_SetActorLocationToRoot, Character) == 0x000000, "Member 'EndBattleAPI_SetActorLocationToRoot::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActorLocationToRoot, NewLocation) == 0x000008, "Member 'EndBattleAPI_SetActorLocationToRoot::NewLocation' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetActorMoveMode
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetActorMoveMode final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActorMoveMode                                actorMoveMode;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetActorMoveMode) == 0x000008, "Wrong alignment on EndBattleAPI_SetActorMoveMode");
static_assert(sizeof(EndBattleAPI_SetActorMoveMode) == 0x000010, "Wrong size on EndBattleAPI_SetActorMoveMode");
static_assert(offsetof(EndBattleAPI_SetActorMoveMode, Character) == 0x000000, "Member 'EndBattleAPI_SetActorMoveMode::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActorMoveMode, actorMoveMode) == 0x000008, "Member 'EndBattleAPI_SetActorMoveMode::actorMoveMode' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetActorPause
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetActorPause final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickPause;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPause;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetActorPause) == 0x000008, "Wrong alignment on EndBattleAPI_SetActorPause");
static_assert(sizeof(EndBattleAPI_SetActorPause) == 0x000010, "Wrong size on EndBattleAPI_SetActorPause");
static_assert(offsetof(EndBattleAPI_SetActorPause, Actor) == 0x000000, "Member 'EndBattleAPI_SetActorPause::Actor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActorPause, bTickPause) == 0x000008, "Member 'EndBattleAPI_SetActorPause::bTickPause' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActorPause, bDrawPause) == 0x000009, "Member 'EndBattleAPI_SetActorPause::bDrawPause' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAimTargetOffsetHeight
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetAimTargetOffsetHeight final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetHeight;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetAimTargetOffsetHeight) == 0x000008, "Wrong alignment on EndBattleAPI_SetAimTargetOffsetHeight");
static_assert(sizeof(EndBattleAPI_SetAimTargetOffsetHeight) == 0x000010, "Wrong size on EndBattleAPI_SetAimTargetOffsetHeight");
static_assert(offsetof(EndBattleAPI_SetAimTargetOffsetHeight, Character) == 0x000000, "Member 'EndBattleAPI_SetAimTargetOffsetHeight::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAimTargetOffsetHeight, OffsetHeight) == 0x000008, "Member 'EndBattleAPI_SetAimTargetOffsetHeight::OffsetHeight' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCCombatArea
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_SetAIPCCombatArea final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeReserve;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetAIPCCombatArea) == 0x000004, "Wrong alignment on EndBattleAPI_SetAIPCCombatArea");
static_assert(sizeof(EndBattleAPI_SetAIPCCombatArea) == 0x00000C, "Wrong size on EndBattleAPI_SetAIPCCombatArea");
static_assert(offsetof(EndBattleAPI_SetAIPCCombatArea, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCCombatArea::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCCombatArea, GroupId) == 0x000004, "Member 'EndBattleAPI_SetAIPCCombatArea::GroupId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCCombatArea, Flag) == 0x000008, "Member 'EndBattleAPI_SetAIPCCombatArea::Flag' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCCombatArea, bIncludeReserve) == 0x000009, "Member 'EndBattleAPI_SetAIPCCombatArea::bIncludeReserve' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCConfrontIdle
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAPI_SetAIPCConfrontIdle final
{
public:
	EPlayerType                                   InPlayerType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeReserve;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCConfrontIdle) == 0x000001, "Wrong alignment on EndBattleAPI_SetAIPCConfrontIdle");
static_assert(sizeof(EndBattleAPI_SetAIPCConfrontIdle) == 0x000003, "Wrong size on EndBattleAPI_SetAIPCConfrontIdle");
static_assert(offsetof(EndBattleAPI_SetAIPCConfrontIdle, InPlayerType) == 0x000000, "Member 'EndBattleAPI_SetAIPCConfrontIdle::InPlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCConfrontIdle, InFlag) == 0x000001, "Member 'EndBattleAPI_SetAIPCConfrontIdle::InFlag' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCConfrontIdle, bIncludeReserve) == 0x000002, "Member 'EndBattleAPI_SetAIPCConfrontIdle::bIncludeReserve' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCDisconnectArea
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetAIPCDisconnectArea final
{
public:
	const class AEndCharacter*                    InCharacter;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGroupId;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetAIPCDisconnectArea) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCDisconnectArea");
static_assert(sizeof(EndBattleAPI_SetAIPCDisconnectArea) == 0x000010, "Wrong size on EndBattleAPI_SetAIPCDisconnectArea");
static_assert(offsetof(EndBattleAPI_SetAIPCDisconnectArea, InCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCDisconnectArea::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCDisconnectArea, InGroupId) == 0x000008, "Member 'EndBattleAPI_SetAIPCDisconnectArea::InGroupId' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCExcludeArea
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_SetAIPCExcludeArea final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeReserve;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetAIPCExcludeArea) == 0x000004, "Wrong alignment on EndBattleAPI_SetAIPCExcludeArea");
static_assert(sizeof(EndBattleAPI_SetAIPCExcludeArea) == 0x00000C, "Wrong size on EndBattleAPI_SetAIPCExcludeArea");
static_assert(offsetof(EndBattleAPI_SetAIPCExcludeArea, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCExcludeArea::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCExcludeArea, GroupId) == 0x000004, "Member 'EndBattleAPI_SetAIPCExcludeArea::GroupId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCExcludeArea, Flag) == 0x000008, "Member 'EndBattleAPI_SetAIPCExcludeArea::Flag' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCExcludeArea, bIncludeReserve) == 0x000009, "Member 'EndBattleAPI_SetAIPCExcludeArea::bIncludeReserve' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCExcludeTarget
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetAIPCExcludeTarget final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          TargetCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCExcludeTarget) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCExcludeTarget");
static_assert(sizeof(EndBattleAPI_SetAIPCExcludeTarget) == 0x000010, "Wrong size on EndBattleAPI_SetAIPCExcludeTarget");
static_assert(offsetof(EndBattleAPI_SetAIPCExcludeTarget, PlayerType) == 0x000000, "Member 'EndBattleAPI_SetAIPCExcludeTarget::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCExcludeTarget, TargetCharacter) == 0x000008, "Member 'EndBattleAPI_SetAIPCExcludeTarget::TargetCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCIgnoreHeight
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_SetAIPCIgnoreHeight final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCIgnoreHeight) == 0x000001, "Wrong alignment on EndBattleAPI_SetAIPCIgnoreHeight");
static_assert(sizeof(EndBattleAPI_SetAIPCIgnoreHeight) == 0x000002, "Wrong size on EndBattleAPI_SetAIPCIgnoreHeight");
static_assert(offsetof(EndBattleAPI_SetAIPCIgnoreHeight, PlayerType) == 0x000000, "Member 'EndBattleAPI_SetAIPCIgnoreHeight::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCIgnoreHeight, InFlag) == 0x000001, "Member 'EndBattleAPI_SetAIPCIgnoreHeight::InFlag' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCTargetChoosingParam
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_SetAIPCTargetChoosingParam final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETargetChoosingTag>                    PriorityTagList;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ETargetChoosingSort                           SortMethod;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  AssignedTargets;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCTargetChoosingParam) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCTargetChoosingParam");
static_assert(sizeof(EndBattleAPI_SetAIPCTargetChoosingParam) == 0x000030, "Wrong size on EndBattleAPI_SetAIPCTargetChoosingParam");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetChoosingParam, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCTargetChoosingParam::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetChoosingParam, PriorityTagList) == 0x000008, "Member 'EndBattleAPI_SetAIPCTargetChoosingParam::PriorityTagList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetChoosingParam, SortMethod) == 0x000018, "Member 'EndBattleAPI_SetAIPCTargetChoosingParam::SortMethod' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetChoosingParam, AssignedTargets) == 0x000020, "Member 'EndBattleAPI_SetAIPCTargetChoosingParam::AssignedTargets' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCTargetDirect
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SetAIPCTargetDirect final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          TargetCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PartsIDList;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCTargetDirect) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCTargetDirect");
static_assert(sizeof(EndBattleAPI_SetAIPCTargetDirect) == 0x000020, "Wrong size on EndBattleAPI_SetAIPCTargetDirect");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetDirect, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCTargetDirect::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetDirect, TargetCharacter) == 0x000008, "Member 'EndBattleAPI_SetAIPCTargetDirect::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetDirect, PartsIDList) == 0x000010, "Member 'EndBattleAPI_SetAIPCTargetDirect::PartsIDList' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCToSafeArea
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetAIPCToSafeArea final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeReserve;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowUCPC;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AvoidLocation;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCToSafeArea) == 0x000004, "Wrong alignment on EndBattleAPI_SetAIPCToSafeArea");
static_assert(sizeof(EndBattleAPI_SetAIPCToSafeArea) == 0x000018, "Wrong size on EndBattleAPI_SetAIPCToSafeArea");
static_assert(offsetof(EndBattleAPI_SetAIPCToSafeArea, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCToSafeArea::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCToSafeArea, GroupId) == 0x000004, "Member 'EndBattleAPI_SetAIPCToSafeArea::GroupId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCToSafeArea, Flag) == 0x000008, "Member 'EndBattleAPI_SetAIPCToSafeArea::Flag' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCToSafeArea, bIncludeReserve) == 0x000009, "Member 'EndBattleAPI_SetAIPCToSafeArea::bIncludeReserve' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCToSafeArea, bFollowUCPC) == 0x00000A, "Member 'EndBattleAPI_SetAIPCToSafeArea::bFollowUCPC' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCToSafeArea, AvoidLocation) == 0x00000C, "Member 'EndBattleAPI_SetAIPCToSafeArea::AvoidLocation' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetATB
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_SetATB final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetATB) == 0x000004, "Wrong alignment on EndBattleAPI_SetATB");
static_assert(sizeof(EndBattleAPI_SetATB) == 0x000008, "Wrong size on EndBattleAPI_SetATB");
static_assert(offsetof(EndBattleAPI_SetATB, PlayerType) == 0x000000, "Member 'EndBattleAPI_SetATB::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetATB, Value) == 0x000004, "Member 'EndBattleAPI_SetATB::Value' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetATBAll
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_SetATBAll final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetATBAll) == 0x000004, "Wrong alignment on EndBattleAPI_SetATBAll");
static_assert(sizeof(EndBattleAPI_SetATBAll) == 0x000004, "Wrong size on EndBattleAPI_SetATBAll");
static_assert(offsetof(EndBattleAPI_SetATBAll, Value) == 0x000000, "Member 'EndBattleAPI_SetATBAll::Value' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBattleAbilityRotateStateLocation
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetBattleAbilityRotateStateLocation final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetBattleAbilityRotateStateLocation) == 0x000008, "Wrong alignment on EndBattleAPI_SetBattleAbilityRotateStateLocation");
static_assert(sizeof(EndBattleAPI_SetBattleAbilityRotateStateLocation) == 0x000018, "Wrong size on EndBattleAPI_SetBattleAbilityRotateStateLocation");
static_assert(offsetof(EndBattleAPI_SetBattleAbilityRotateStateLocation, Character) == 0x000000, "Member 'EndBattleAPI_SetBattleAbilityRotateStateLocation::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBattleAbilityRotateStateLocation, Location) == 0x000008, "Member 'EndBattleAPI_SetBattleAbilityRotateStateLocation::Location' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBattleAbilityRotateStatePointName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetBattleAbilityRotateStatePointName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PointName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetBattleAbilityRotateStatePointName) == 0x000008, "Wrong alignment on EndBattleAPI_SetBattleAbilityRotateStatePointName");
static_assert(sizeof(EndBattleAPI_SetBattleAbilityRotateStatePointName) == 0x000010, "Wrong size on EndBattleAPI_SetBattleAbilityRotateStatePointName");
static_assert(offsetof(EndBattleAPI_SetBattleAbilityRotateStatePointName, Character) == 0x000000, "Member 'EndBattleAPI_SetBattleAbilityRotateStatePointName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBattleAbilityRotateStatePointName, PointName) == 0x000008, "Member 'EndBattleAPI_SetBattleAbilityRotateStatePointName::PointName' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBattleSafeTransform
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetBattleSafeTransform final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetBattleSafeTransform) == 0x000008, "Wrong alignment on EndBattleAPI_SetBattleSafeTransform");
static_assert(sizeof(EndBattleAPI_SetBattleSafeTransform) == 0x000010, "Wrong size on EndBattleAPI_SetBattleSafeTransform");
static_assert(offsetof(EndBattleAPI_SetBattleSafeTransform, InChara) == 0x000000, "Member 'EndBattleAPI_SetBattleSafeTransform::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBattleSafeTransform, bEnable) == 0x000008, "Member 'EndBattleAPI_SetBattleSafeTransform::bEnable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBattleSceneCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_SetBattleSceneCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetBattleSceneCount) == 0x000004, "Wrong alignment on EndBattleAPI_SetBattleSceneCount");
static_assert(sizeof(EndBattleAPI_SetBattleSceneCount) == 0x00000C, "Wrong size on EndBattleAPI_SetBattleSceneCount");
static_assert(offsetof(EndBattleAPI_SetBattleSceneCount, InName) == 0x000000, "Member 'EndBattleAPI_SetBattleSceneCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBattleSceneCount, InCount) == 0x000008, "Member 'EndBattleAPI_SetBattleSceneCount::InCount' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBattleSceneCountLifeCycle
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetBattleSceneCountLifeCycle final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSceneCountLifeCycleType             InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetBattleSceneCountLifeCycle) == 0x000004, "Wrong alignment on EndBattleAPI_SetBattleSceneCountLifeCycle");
static_assert(sizeof(EndBattleAPI_SetBattleSceneCountLifeCycle) == 0x000010, "Wrong size on EndBattleAPI_SetBattleSceneCountLifeCycle");
static_assert(offsetof(EndBattleAPI_SetBattleSceneCountLifeCycle, InName) == 0x000000, "Member 'EndBattleAPI_SetBattleSceneCountLifeCycle::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBattleSceneCountLifeCycle, InType) == 0x000008, "Member 'EndBattleAPI_SetBattleSceneCountLifeCycle::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBattleSceneCountLifeCycle, InValue) == 0x00000C, "Member 'EndBattleAPI_SetBattleSceneCountLifeCycle::InValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBP
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetBP final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetBP) == 0x000008, "Wrong alignment on EndBattleAPI_SetBP");
static_assert(sizeof(EndBattleAPI_SetBP) == 0x000010, "Wrong size on EndBattleAPI_SetBP");
static_assert(offsetof(EndBattleAPI_SetBP, Character) == 0x000000, "Member 'EndBattleAPI_SetBP::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBP, Value) == 0x000008, "Member 'EndBattleAPI_SetBP::Value' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBPDamageCoefficient
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetBPDamageCoefficient final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coefficient;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetBPDamageCoefficient) == 0x000008, "Wrong alignment on EndBattleAPI_SetBPDamageCoefficient");
static_assert(sizeof(EndBattleAPI_SetBPDamageCoefficient) == 0x000010, "Wrong size on EndBattleAPI_SetBPDamageCoefficient");
static_assert(offsetof(EndBattleAPI_SetBPDamageCoefficient, Character) == 0x000000, "Member 'EndBattleAPI_SetBPDamageCoefficient::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBPDamageCoefficient, Coefficient) == 0x000008, "Member 'EndBattleAPI_SetBPDamageCoefficient::Coefficient' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBPPercent
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetBPPercent final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetBPPercent) == 0x000008, "Wrong alignment on EndBattleAPI_SetBPPercent");
static_assert(sizeof(EndBattleAPI_SetBPPercent) == 0x000010, "Wrong size on EndBattleAPI_SetBPPercent");
static_assert(offsetof(EndBattleAPI_SetBPPercent, Character) == 0x000000, "Member 'EndBattleAPI_SetBPPercent::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBPPercent, Value) == 0x000008, "Member 'EndBattleAPI_SetBPPercent::Value' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBreakDamage
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetBreakDamage final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BreakID;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         breakDamageHPMaxPercent;                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetBreakDamage) == 0x000008, "Wrong alignment on EndBattleAPI_SetBreakDamage");
static_assert(sizeof(EndBattleAPI_SetBreakDamage) == 0x000018, "Wrong size on EndBattleAPI_SetBreakDamage");
static_assert(offsetof(EndBattleAPI_SetBreakDamage, Character) == 0x000000, "Member 'EndBattleAPI_SetBreakDamage::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBreakDamage, BreakID) == 0x000008, "Member 'EndBattleAPI_SetBreakDamage::BreakID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBreakDamage, breakDamageHPMaxPercent) == 0x000010, "Member 'EndBattleAPI_SetBreakDamage::breakDamageHPMaxPercent' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBreakPartsDamage
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SetBreakPartsDamage final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaPartsSpecID;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BreakID;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         breakDamageHPMaxPercent;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetBreakPartsDamage) == 0x000008, "Wrong alignment on EndBattleAPI_SetBreakPartsDamage");
static_assert(sizeof(EndBattleAPI_SetBreakPartsDamage) == 0x000020, "Wrong size on EndBattleAPI_SetBreakPartsDamage");
static_assert(offsetof(EndBattleAPI_SetBreakPartsDamage, Character) == 0x000000, "Member 'EndBattleAPI_SetBreakPartsDamage::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBreakPartsDamage, BattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_SetBreakPartsDamage::BattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBreakPartsDamage, BreakID) == 0x000010, "Member 'EndBattleAPI_SetBreakPartsDamage::BreakID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBreakPartsDamage, breakDamageHPMaxPercent) == 0x000018, "Member 'EndBattleAPI_SetBreakPartsDamage::breakDamageHPMaxPercent' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBreakPartsDamageID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetBreakPartsDamageID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaPartsSpecID;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BreakID;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetBreakPartsDamageID) == 0x000008, "Wrong alignment on EndBattleAPI_SetBreakPartsDamageID");
static_assert(sizeof(EndBattleAPI_SetBreakPartsDamageID) == 0x000018, "Wrong size on EndBattleAPI_SetBreakPartsDamageID");
static_assert(offsetof(EndBattleAPI_SetBreakPartsDamageID, Character) == 0x000000, "Member 'EndBattleAPI_SetBreakPartsDamageID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBreakPartsDamageID, BattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_SetBreakPartsDamageID::BattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBreakPartsDamageID, BreakID) == 0x000010, "Member 'EndBattleAPI_SetBreakPartsDamageID::BreakID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBurstForceAerial
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetBurstForceAerial final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetBurstForceAerial) == 0x000008, "Wrong alignment on EndBattleAPI_SetBurstForceAerial");
static_assert(sizeof(EndBattleAPI_SetBurstForceAerial) == 0x000010, "Wrong size on EndBattleAPI_SetBurstForceAerial");
static_assert(offsetof(EndBattleAPI_SetBurstForceAerial, InChara) == 0x000000, "Member 'EndBattleAPI_SetBurstForceAerial::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBurstForceAerial, Flag) == 0x000008, "Member 'EndBattleAPI_SetBurstForceAerial::Flag' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetCharacterBehaviorMode
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetCharacterBehaviorMode final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimBehaviorMode                          Mode;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          immediate;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetCharacterBehaviorMode) == 0x000008, "Wrong alignment on EndBattleAPI_SetCharacterBehaviorMode");
static_assert(sizeof(EndBattleAPI_SetCharacterBehaviorMode) == 0x000010, "Wrong size on EndBattleAPI_SetCharacterBehaviorMode");
static_assert(offsetof(EndBattleAPI_SetCharacterBehaviorMode, Character) == 0x000000, "Member 'EndBattleAPI_SetCharacterBehaviorMode::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterBehaviorMode, Mode) == 0x000008, "Member 'EndBattleAPI_SetCharacterBehaviorMode::Mode' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterBehaviorMode, immediate) == 0x000009, "Member 'EndBattleAPI_SetCharacterBehaviorMode::immediate' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetCharacterBehaviorParts
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetCharacterBehaviorParts final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          parentCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetCharacterBehaviorParts) == 0x000008, "Wrong alignment on EndBattleAPI_SetCharacterBehaviorParts");
static_assert(sizeof(EndBattleAPI_SetCharacterBehaviorParts) == 0x000010, "Wrong size on EndBattleAPI_SetCharacterBehaviorParts");
static_assert(offsetof(EndBattleAPI_SetCharacterBehaviorParts, Character) == 0x000000, "Member 'EndBattleAPI_SetCharacterBehaviorParts::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterBehaviorParts, parentCharacter) == 0x000008, "Member 'EndBattleAPI_SetCharacterBehaviorParts::parentCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetCharacterMovementMode
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetCharacterMovementMode final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMovable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitWall;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitObject;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFitFloor;                                         // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaxWeight;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetCharacterMovementMode) == 0x000008, "Wrong alignment on EndBattleAPI_SetCharacterMovementMode");
static_assert(sizeof(EndBattleAPI_SetCharacterMovementMode) == 0x000010, "Wrong size on EndBattleAPI_SetCharacterMovementMode");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, InChara) == 0x000000, "Member 'EndBattleAPI_SetCharacterMovementMode::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, bMovable) == 0x000008, "Member 'EndBattleAPI_SetCharacterMovementMode::bMovable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, bHitWall) == 0x000009, "Member 'EndBattleAPI_SetCharacterMovementMode::bHitWall' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, bHitObject) == 0x00000A, "Member 'EndBattleAPI_SetCharacterMovementMode::bHitObject' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, bFitFloor) == 0x00000B, "Member 'EndBattleAPI_SetCharacterMovementMode::bFitFloor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, bMaxWeight) == 0x00000C, "Member 'EndBattleAPI_SetCharacterMovementMode::bMaxWeight' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetCollisionEnableByComponentTag
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetCollisionEnableByComponentTag final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentTag;                                      // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetCollisionEnableByComponentTag) == 0x000008, "Wrong alignment on EndBattleAPI_SetCollisionEnableByComponentTag");
static_assert(sizeof(EndBattleAPI_SetCollisionEnableByComponentTag) == 0x000018, "Wrong size on EndBattleAPI_SetCollisionEnableByComponentTag");
static_assert(offsetof(EndBattleAPI_SetCollisionEnableByComponentTag, InActor) == 0x000000, "Member 'EndBattleAPI_SetCollisionEnableByComponentTag::InActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCollisionEnableByComponentTag, bEnable) == 0x000008, "Member 'EndBattleAPI_SetCollisionEnableByComponentTag::bEnable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCollisionEnableByComponentTag, ComponentTag) == 0x00000C, "Member 'EndBattleAPI_SetCollisionEnableByComponentTag::ComponentTag' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDamageHitResponse
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDamageHitResponse final
{
public:
	class AEndCharacterBase*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitDamage;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDamageHitResponse) == 0x000008, "Wrong alignment on EndBattleAPI_SetDamageHitResponse");
static_assert(sizeof(EndBattleAPI_SetDamageHitResponse) == 0x000010, "Wrong size on EndBattleAPI_SetDamageHitResponse");
static_assert(offsetof(EndBattleAPI_SetDamageHitResponse, Character) == 0x000000, "Member 'EndBattleAPI_SetDamageHitResponse::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDamageHitResponse, bHitDamage) == 0x000008, "Member 'EndBattleAPI_SetDamageHitResponse::bHitDamage' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableActionRestriction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableActionRestriction final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableActionRestriction) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableActionRestriction");
static_assert(sizeof(EndBattleAPI_SetDisableActionRestriction) == 0x000010, "Wrong size on EndBattleAPI_SetDisableActionRestriction");
static_assert(offsetof(EndBattleAPI_SetDisableActionRestriction, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableActionRestriction::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableActionRestriction, Disable) == 0x000008, "Member 'EndBattleAPI_SetDisableActionRestriction::Disable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableBodyDamagePopupByParts
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableBodyDamagePopupByParts final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableBodyDamagePopupByParts) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableBodyDamagePopupByParts");
static_assert(sizeof(EndBattleAPI_SetDisableBodyDamagePopupByParts) == 0x000010, "Wrong size on EndBattleAPI_SetDisableBodyDamagePopupByParts");
static_assert(offsetof(EndBattleAPI_SetDisableBodyDamagePopupByParts, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableBodyDamagePopupByParts::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableBodyDamagePopupByParts, bDisable) == 0x000008, "Member 'EndBattleAPI_SetDisableBodyDamagePopupByParts::bDisable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableBodyHPDecrementByParts
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableBodyHPDecrementByParts final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableBodyHPDecrementByParts) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableBodyHPDecrementByParts");
static_assert(sizeof(EndBattleAPI_SetDisableBodyHPDecrementByParts) == 0x000010, "Wrong size on EndBattleAPI_SetDisableBodyHPDecrementByParts");
static_assert(offsetof(EndBattleAPI_SetDisableBodyHPDecrementByParts, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableBodyHPDecrementByParts::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableBodyHPDecrementByParts, bDisable) == 0x000008, "Member 'EndBattleAPI_SetDisableBodyHPDecrementByParts::bDisable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableBurst
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableBurst final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableBurst) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableBurst");
static_assert(sizeof(EndBattleAPI_SetDisableBurst) == 0x000010, "Wrong size on EndBattleAPI_SetDisableBurst");
static_assert(offsetof(EndBattleAPI_SetDisableBurst, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableBurst::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableBurst, Disable) == 0x000008, "Member 'EndBattleAPI_SetDisableBurst::Disable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableDamageHit
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableDamageHit final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableDamageHit) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableDamageHit");
static_assert(sizeof(EndBattleAPI_SetDisableDamageHit) == 0x000010, "Wrong size on EndBattleAPI_SetDisableDamageHit");
static_assert(offsetof(EndBattleAPI_SetDisableDamageHit, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableDamageHit::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableDamageHit, Disable) == 0x000008, "Member 'EndBattleAPI_SetDisableDamageHit::Disable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableDeadDestroy
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableDeadDestroy final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableDeadDestroy) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableDeadDestroy");
static_assert(sizeof(EndBattleAPI_SetDisableDeadDestroy) == 0x000010, "Wrong size on EndBattleAPI_SetDisableDeadDestroy");
static_assert(offsetof(EndBattleAPI_SetDisableDeadDestroy, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableDeadDestroy::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableDeadDestroy, Disable) == 0x000008, "Member 'EndBattleAPI_SetDisableDeadDestroy::Disable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableFinish
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableFinish final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableFinish) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableFinish");
static_assert(sizeof(EndBattleAPI_SetDisableFinish) == 0x000010, "Wrong size on EndBattleAPI_SetDisableFinish");
static_assert(offsetof(EndBattleAPI_SetDisableFinish, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableFinish::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableFinish, Disable) == 0x000008, "Member 'EndBattleAPI_SetDisableFinish::Disable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableGameOver
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetDisableGameOver final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetDisableGameOver) == 0x000001, "Wrong alignment on EndBattleAPI_SetDisableGameOver");
static_assert(sizeof(EndBattleAPI_SetDisableGameOver) == 0x000001, "Wrong size on EndBattleAPI_SetDisableGameOver");
static_assert(offsetof(EndBattleAPI_SetDisableGameOver, Disable) == 0x000000, "Member 'EndBattleAPI_SetDisableGameOver::Disable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableParts
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetDisableParts final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaPartsSpecID;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableTarget;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableDamage;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableDamageCollision;                           // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableParts) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableParts");
static_assert(sizeof(EndBattleAPI_SetDisableParts) == 0x000018, "Wrong size on EndBattleAPI_SetDisableParts");
static_assert(offsetof(EndBattleAPI_SetDisableParts, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableParts::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableParts, BattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_SetDisableParts::BattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableParts, bDisableTarget) == 0x000010, "Member 'EndBattleAPI_SetDisableParts::bDisableTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableParts, bDisableDamage) == 0x000011, "Member 'EndBattleAPI_SetDisableParts::bDisableDamage' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableParts, bDisableDamageCollision) == 0x000012, "Member 'EndBattleAPI_SetDisableParts::bDisableDamageCollision' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisablePartsBreak
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisablePartsBreak final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisablePartsBreak) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisablePartsBreak");
static_assert(sizeof(EndBattleAPI_SetDisablePartsBreak) == 0x000010, "Wrong size on EndBattleAPI_SetDisablePartsBreak");
static_assert(offsetof(EndBattleAPI_SetDisablePartsBreak, Character) == 0x000000, "Member 'EndBattleAPI_SetDisablePartsBreak::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisablePartsBreak, bDisable) == 0x000008, "Member 'EndBattleAPI_SetDisablePartsBreak::bDisable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableReaction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableReaction final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableReaction) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableReaction");
static_assert(sizeof(EndBattleAPI_SetDisableReaction) == 0x000010, "Wrong size on EndBattleAPI_SetDisableReaction");
static_assert(offsetof(EndBattleAPI_SetDisableReaction, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableReaction::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableReaction, Disable) == 0x000008, "Member 'EndBattleAPI_SetDisableReaction::Disable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableReactionAndBreak
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableReactionAndBreak final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableReactionAndBreak) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableReactionAndBreak");
static_assert(sizeof(EndBattleAPI_SetDisableReactionAndBreak) == 0x000010, "Wrong size on EndBattleAPI_SetDisableReactionAndBreak");
static_assert(offsetof(EndBattleAPI_SetDisableReactionAndBreak, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableReactionAndBreak::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableReactionAndBreak, Disable) == 0x000008, "Member 'EndBattleAPI_SetDisableReactionAndBreak::Disable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableReserveMemberCommand
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetDisableReserveMemberCommand final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetDisableReserveMemberCommand) == 0x000001, "Wrong alignment on EndBattleAPI_SetDisableReserveMemberCommand");
static_assert(sizeof(EndBattleAPI_SetDisableReserveMemberCommand) == 0x000001, "Wrong size on EndBattleAPI_SetDisableReserveMemberCommand");
static_assert(offsetof(EndBattleAPI_SetDisableReserveMemberCommand, Disable) == 0x000000, "Member 'EndBattleAPI_SetDisableReserveMemberCommand::Disable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableSteal
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableSteal final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableSteal) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableSteal");
static_assert(sizeof(EndBattleAPI_SetDisableSteal) == 0x000010, "Wrong size on EndBattleAPI_SetDisableSteal");
static_assert(offsetof(EndBattleAPI_SetDisableSteal, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableSteal::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableSteal, Disable) == 0x000008, "Member 'EndBattleAPI_SetDisableSteal::Disable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableStealTextLabel
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableStealTextLabel final
{
public:
	class FString                                 TextLabel;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetDisableStealTextLabel) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableStealTextLabel");
static_assert(sizeof(EndBattleAPI_SetDisableStealTextLabel) == 0x000010, "Wrong size on EndBattleAPI_SetDisableStealTextLabel");
static_assert(offsetof(EndBattleAPI_SetDisableStealTextLabel, TextLabel) == 0x000000, "Member 'EndBattleAPI_SetDisableStealTextLabel::TextLabel' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableSubCollision
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableSubCollision final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableSubCollision) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableSubCollision");
static_assert(sizeof(EndBattleAPI_SetDisableSubCollision) == 0x000010, "Wrong size on EndBattleAPI_SetDisableSubCollision");
static_assert(offsetof(EndBattleAPI_SetDisableSubCollision, InChara) == 0x000000, "Member 'EndBattleAPI_SetDisableSubCollision::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableSubCollision, bDisable) == 0x000008, "Member 'EndBattleAPI_SetDisableSubCollision::bDisable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableSubCollisionByGroupName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetDisableSubCollisionByGroupName final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InGroupName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableSubCollisionByGroupName) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableSubCollisionByGroupName");
static_assert(sizeof(EndBattleAPI_SetDisableSubCollisionByGroupName) == 0x000018, "Wrong size on EndBattleAPI_SetDisableSubCollisionByGroupName");
static_assert(offsetof(EndBattleAPI_SetDisableSubCollisionByGroupName, InChara) == 0x000000, "Member 'EndBattleAPI_SetDisableSubCollisionByGroupName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableSubCollisionByGroupName, InGroupName) == 0x000008, "Member 'EndBattleAPI_SetDisableSubCollisionByGroupName::InGroupName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableSubCollisionByGroupName, bDisable) == 0x000010, "Member 'EndBattleAPI_SetDisableSubCollisionByGroupName::bDisable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableSummoning
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_SetDisableSummoning final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PhaseNumber;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetDisableSummoning) == 0x000004, "Wrong alignment on EndBattleAPI_SetDisableSummoning");
static_assert(sizeof(EndBattleAPI_SetDisableSummoning) == 0x000008, "Wrong size on EndBattleAPI_SetDisableSummoning");
static_assert(offsetof(EndBattleAPI_SetDisableSummoning, Enable) == 0x000000, "Member 'EndBattleAPI_SetDisableSummoning::Enable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableSummoning, PhaseNumber) == 0x000004, "Member 'EndBattleAPI_SetDisableSummoning::PhaseNumber' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableTarget
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableTarget final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDisable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hitDamage;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          refreshTargetLock;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableTarget) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableTarget");
static_assert(sizeof(EndBattleAPI_SetDisableTarget) == 0x000010, "Wrong size on EndBattleAPI_SetDisableTarget");
static_assert(offsetof(EndBattleAPI_SetDisableTarget, InChara) == 0x000000, "Member 'EndBattleAPI_SetDisableTarget::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTarget, InDisable) == 0x000008, "Member 'EndBattleAPI_SetDisableTarget::InDisable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTarget, hitDamage) == 0x000009, "Member 'EndBattleAPI_SetDisableTarget::hitDamage' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTarget, refreshTargetLock) == 0x00000A, "Member 'EndBattleAPI_SetDisableTarget::refreshTargetLock' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableTargetNew
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableTargetNew final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          showIcon;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableTargetNew) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableTargetNew");
static_assert(sizeof(EndBattleAPI_SetDisableTargetNew) == 0x000010, "Wrong size on EndBattleAPI_SetDisableTargetNew");
static_assert(offsetof(EndBattleAPI_SetDisableTargetNew, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableTargetNew::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTargetNew, Disable) == 0x000008, "Member 'EndBattleAPI_SetDisableTargetNew::Disable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTargetNew, showIcon) == 0x000009, "Member 'EndBattleAPI_SetDisableTargetNew::showIcon' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableTargetOfParts
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetDisableTargetOfParts final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaPartsSpecID;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableTarget;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableTargetOfParts) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableTargetOfParts");
static_assert(sizeof(EndBattleAPI_SetDisableTargetOfParts) == 0x000018, "Wrong size on EndBattleAPI_SetDisableTargetOfParts");
static_assert(offsetof(EndBattleAPI_SetDisableTargetOfParts, Character) == 0x000000, "Member 'EndBattleAPI_SetDisableTargetOfParts::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTargetOfParts, BattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_SetDisableTargetOfParts::BattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTargetOfParts, bDisableTarget) == 0x000010, "Member 'EndBattleAPI_SetDisableTargetOfParts::bDisableTarget' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisperseTarget
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisperseTarget final
{
public:
	class AEndCharacter*                          Executor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          TargetPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetDisperseTarget) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisperseTarget");
static_assert(sizeof(EndBattleAPI_SetDisperseTarget) == 0x000010, "Wrong size on EndBattleAPI_SetDisperseTarget");
static_assert(offsetof(EndBattleAPI_SetDisperseTarget, Executor) == 0x000000, "Member 'EndBattleAPI_SetDisperseTarget::Executor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisperseTarget, TargetPlayer) == 0x000008, "Member 'EndBattleAPI_SetDisperseTarget::TargetPlayer' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDrawPauseCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDrawPauseCharacter final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDrawPauseCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_SetDrawPauseCharacter");
static_assert(sizeof(EndBattleAPI_SetDrawPauseCharacter) == 0x000010, "Wrong size on EndBattleAPI_SetDrawPauseCharacter");
static_assert(offsetof(EndBattleAPI_SetDrawPauseCharacter, Character) == 0x000000, "Member 'EndBattleAPI_SetDrawPauseCharacter::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDrawPauseCharacter, bPause) == 0x000008, "Member 'EndBattleAPI_SetDrawPauseCharacter::bPause' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDrawPauseEnvironment
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAPI_SetDrawPauseEnvironment final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludingCollision;                               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDrawPauseEnvironment) == 0x000004, "Wrong alignment on EndBattleAPI_SetDrawPauseEnvironment");
static_assert(sizeof(EndBattleAPI_SetDrawPauseEnvironment) == 0x000014, "Wrong size on EndBattleAPI_SetDrawPauseEnvironment");
static_assert(offsetof(EndBattleAPI_SetDrawPauseEnvironment, LevelName) == 0x000000, "Member 'EndBattleAPI_SetDrawPauseEnvironment::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDrawPauseEnvironment, AccessID) == 0x000008, "Member 'EndBattleAPI_SetDrawPauseEnvironment::AccessID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDrawPauseEnvironment, bPause) == 0x000010, "Member 'EndBattleAPI_SetDrawPauseEnvironment::bPause' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDrawPauseEnvironment, bIncludingCollision) == 0x000011, "Member 'EndBattleAPI_SetDrawPauseEnvironment::bIncludingCollision' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDrawPauseEnvironmentPhysicsActors
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors final
{
public:
	TArray<class AActor*>                         objectList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          drawPause;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          tickPause;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors) == 0x000008, "Wrong alignment on EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors");
static_assert(sizeof(EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors) == 0x000018, "Wrong size on EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors");
static_assert(offsetof(EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors, objectList) == 0x000000, "Member 'EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors::objectList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors, drawPause) == 0x000010, "Member 'EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors::drawPause' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors, tickPause) == 0x000011, "Member 'EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors::tickPause' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDuringCommandAbilityInvalidPeriod
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDuringCommandAbilityInvalidPeriod final
{
public:
	class AEndCharacter*                          targetPlayerCharacter;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalid;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDuringCommandAbilityInvalidPeriod) == 0x000008, "Wrong alignment on EndBattleAPI_SetDuringCommandAbilityInvalidPeriod");
static_assert(sizeof(EndBattleAPI_SetDuringCommandAbilityInvalidPeriod) == 0x000010, "Wrong size on EndBattleAPI_SetDuringCommandAbilityInvalidPeriod");
static_assert(offsetof(EndBattleAPI_SetDuringCommandAbilityInvalidPeriod, targetPlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetDuringCommandAbilityInvalidPeriod::targetPlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDuringCommandAbilityInvalidPeriod, bInvalid) == 0x000008, "Member 'EndBattleAPI_SetDuringCommandAbilityInvalidPeriod::bInvalid' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDyingAbilityID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDyingAbilityID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetDyingAbilityID) == 0x000008, "Wrong alignment on EndBattleAPI_SetDyingAbilityID");
static_assert(sizeof(EndBattleAPI_SetDyingAbilityID) == 0x000010, "Wrong size on EndBattleAPI_SetDyingAbilityID");
static_assert(offsetof(EndBattleAPI_SetDyingAbilityID, Character) == 0x000000, "Member 'EndBattleAPI_SetDyingAbilityID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDyingAbilityID, AbilityId) == 0x000008, "Member 'EndBattleAPI_SetDyingAbilityID::AbilityId' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableBattleAway
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetEnableBattleAway final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetEnableBattleAway) == 0x000001, "Wrong alignment on EndBattleAPI_SetEnableBattleAway");
static_assert(sizeof(EndBattleAPI_SetEnableBattleAway) == 0x000001, "Wrong size on EndBattleAPI_SetEnableBattleAway");
static_assert(offsetof(EndBattleAPI_SetEnableBattleAway, Enable) == 0x000000, "Member 'EndBattleAPI_SetEnableBattleAway::Enable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableBonamikGroundCollision
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetEnableBonamikGroundCollision final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BonamikGroupName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetEnableBonamikGroundCollision) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnableBonamikGroundCollision");
static_assert(sizeof(EndBattleAPI_SetEnableBonamikGroundCollision) == 0x000018, "Wrong size on EndBattleAPI_SetEnableBonamikGroundCollision");
static_assert(offsetof(EndBattleAPI_SetEnableBonamikGroundCollision, Character) == 0x000000, "Member 'EndBattleAPI_SetEnableBonamikGroundCollision::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableBonamikGroundCollision, BonamikGroupName) == 0x000008, "Member 'EndBattleAPI_SetEnableBonamikGroundCollision::BonamikGroupName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableBonamikGroundCollision, bEnabled) == 0x000010, "Member 'EndBattleAPI_SetEnableBonamikGroundCollision::bEnabled' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableBonamikGroup
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetEnableBonamikGroup final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BonamikGroupName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetEnableBonamikGroup) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnableBonamikGroup");
static_assert(sizeof(EndBattleAPI_SetEnableBonamikGroup) == 0x000018, "Wrong size on EndBattleAPI_SetEnableBonamikGroup");
static_assert(offsetof(EndBattleAPI_SetEnableBonamikGroup, Character) == 0x000000, "Member 'EndBattleAPI_SetEnableBonamikGroup::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableBonamikGroup, BonamikGroupName) == 0x000008, "Member 'EndBattleAPI_SetEnableBonamikGroup::BonamikGroupName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableBonamikGroup, bEnabled) == 0x000010, "Member 'EndBattleAPI_SetEnableBonamikGroup::bEnabled' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableBonamikGroup, BlendTime) == 0x000014, "Member 'EndBattleAPI_SetEnableBonamikGroup::BlendTime' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableBreakable
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAPI_SetEnableBreakable final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetEnableBreakable) == 0x000004, "Wrong alignment on EndBattleAPI_SetEnableBreakable");
static_assert(sizeof(EndBattleAPI_SetEnableBreakable) == 0x000014, "Wrong size on EndBattleAPI_SetEnableBreakable");
static_assert(offsetof(EndBattleAPI_SetEnableBreakable, LevelName) == 0x000000, "Member 'EndBattleAPI_SetEnableBreakable::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableBreakable, AccessID) == 0x000008, "Member 'EndBattleAPI_SetEnableBreakable::AccessID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableBreakable, bEnable) == 0x000010, "Member 'EndBattleAPI_SetEnableBreakable::bEnable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableBreakDamage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetEnableBreakDamage final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetEnableBreakDamage) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnableBreakDamage");
static_assert(sizeof(EndBattleAPI_SetEnableBreakDamage) == 0x000010, "Wrong size on EndBattleAPI_SetEnableBreakDamage");
static_assert(offsetof(EndBattleAPI_SetEnableBreakDamage, Character) == 0x000000, "Member 'EndBattleAPI_SetEnableBreakDamage::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableBreakDamage, Enable) == 0x000008, "Member 'EndBattleAPI_SetEnableBreakDamage::Enable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableBreakPartsDamage
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetEnableBreakPartsDamage final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaPartsSpecID;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetEnableBreakPartsDamage) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnableBreakPartsDamage");
static_assert(sizeof(EndBattleAPI_SetEnableBreakPartsDamage) == 0x000018, "Wrong size on EndBattleAPI_SetEnableBreakPartsDamage");
static_assert(offsetof(EndBattleAPI_SetEnableBreakPartsDamage, Character) == 0x000000, "Member 'EndBattleAPI_SetEnableBreakPartsDamage::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableBreakPartsDamage, BattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_SetEnableBreakPartsDamage::BattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableBreakPartsDamage, Enable) == 0x000010, "Member 'EndBattleAPI_SetEnableBreakPartsDamage::Enable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableControlDamageToParts
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetEnableControlDamageToParts final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDamageToOnePart;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetEnableControlDamageToParts) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnableControlDamageToParts");
static_assert(sizeof(EndBattleAPI_SetEnableControlDamageToParts) == 0x000010, "Wrong size on EndBattleAPI_SetEnableControlDamageToParts");
static_assert(offsetof(EndBattleAPI_SetEnableControlDamageToParts, InCharacter) == 0x000000, "Member 'EndBattleAPI_SetEnableControlDamageToParts::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableControlDamageToParts, InDamageToOnePart) == 0x000008, "Member 'EndBattleAPI_SetEnableControlDamageToParts::InDamageToOnePart' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnabledUpdateAimLocation
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetEnabledUpdateAimLocation final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetEnabledUpdateAimLocation) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnabledUpdateAimLocation");
static_assert(sizeof(EndBattleAPI_SetEnabledUpdateAimLocation) == 0x000010, "Wrong size on EndBattleAPI_SetEnabledUpdateAimLocation");
static_assert(offsetof(EndBattleAPI_SetEnabledUpdateAimLocation, Character) == 0x000000, "Member 'EndBattleAPI_SetEnabledUpdateAimLocation::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnabledUpdateAimLocation, bEnabled) == 0x000008, "Member 'EndBattleAPI_SetEnabledUpdateAimLocation::bEnabled' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableEquipmentSkillFrogAlways
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_SetEnableEquipmentSkillFrogAlways final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          frogAfterDebuffDisable;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetEnableEquipmentSkillFrogAlways) == 0x000001, "Wrong alignment on EndBattleAPI_SetEnableEquipmentSkillFrogAlways");
static_assert(sizeof(EndBattleAPI_SetEnableEquipmentSkillFrogAlways) == 0x000002, "Wrong size on EndBattleAPI_SetEnableEquipmentSkillFrogAlways");
static_assert(offsetof(EndBattleAPI_SetEnableEquipmentSkillFrogAlways, Enable) == 0x000000, "Member 'EndBattleAPI_SetEnableEquipmentSkillFrogAlways::Enable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableEquipmentSkillFrogAlways, frogAfterDebuffDisable) == 0x000001, "Member 'EndBattleAPI_SetEnableEquipmentSkillFrogAlways::frogAfterDebuffDisable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnablePushCollision
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetEnablePushCollision final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   partId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetEnablePushCollision) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnablePushCollision");
static_assert(sizeof(EndBattleAPI_SetEnablePushCollision) == 0x000018, "Wrong size on EndBattleAPI_SetEnablePushCollision");
static_assert(offsetof(EndBattleAPI_SetEnablePushCollision, Character) == 0x000000, "Member 'EndBattleAPI_SetEnablePushCollision::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnablePushCollision, partId) == 0x000008, "Member 'EndBattleAPI_SetEnablePushCollision::partId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnablePushCollision, Enable) == 0x000010, "Member 'EndBattleAPI_SetEnablePushCollision::Enable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableRegeneOfCharaParts
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetEnableRegeneOfCharaParts final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPartsID;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnable;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetEnableRegeneOfCharaParts) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnableRegeneOfCharaParts");
static_assert(sizeof(EndBattleAPI_SetEnableRegeneOfCharaParts) == 0x000018, "Wrong size on EndBattleAPI_SetEnableRegeneOfCharaParts");
static_assert(offsetof(EndBattleAPI_SetEnableRegeneOfCharaParts, InCharacter) == 0x000000, "Member 'EndBattleAPI_SetEnableRegeneOfCharaParts::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableRegeneOfCharaParts, InPartsID) == 0x000008, "Member 'EndBattleAPI_SetEnableRegeneOfCharaParts::InPartsID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableRegeneOfCharaParts, InEnable) == 0x000010, "Member 'EndBattleAPI_SetEnableRegeneOfCharaParts::InEnable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableResidentBlend
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetEnableResidentBlend final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResidentBlendName;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetEnableResidentBlend) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnableResidentBlend");
static_assert(sizeof(EndBattleAPI_SetEnableResidentBlend) == 0x000018, "Wrong size on EndBattleAPI_SetEnableResidentBlend");
static_assert(offsetof(EndBattleAPI_SetEnableResidentBlend, Character) == 0x000000, "Member 'EndBattleAPI_SetEnableResidentBlend::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableResidentBlend, ResidentBlendName) == 0x000008, "Member 'EndBattleAPI_SetEnableResidentBlend::ResidentBlendName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableResidentBlend, bEnabled) == 0x000010, "Member 'EndBattleAPI_SetEnableResidentBlend::bEnabled' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableResidentBlend, BlendTime) == 0x000014, "Member 'EndBattleAPI_SetEnableResidentBlend::BlendTime' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableSleepAnimationAttachCharacterOnly
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetEnableSleepAnimationAttachCharacterOnly final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetEnableSleepAnimationAttachCharacterOnly) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnableSleepAnimationAttachCharacterOnly");
static_assert(sizeof(EndBattleAPI_SetEnableSleepAnimationAttachCharacterOnly) == 0x000010, "Wrong size on EndBattleAPI_SetEnableSleepAnimationAttachCharacterOnly");
static_assert(offsetof(EndBattleAPI_SetEnableSleepAnimationAttachCharacterOnly, Character) == 0x000000, "Member 'EndBattleAPI_SetEnableSleepAnimationAttachCharacterOnly::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableSleepAnimationAttachCharacterOnly, Enable) == 0x000008, "Member 'EndBattleAPI_SetEnableSleepAnimationAttachCharacterOnly::Enable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableSlip
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetEnableSlip final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetEnableSlip) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnableSlip");
static_assert(sizeof(EndBattleAPI_SetEnableSlip) == 0x000010, "Wrong size on EndBattleAPI_SetEnableSlip");
static_assert(offsetof(EndBattleAPI_SetEnableSlip, Character) == 0x000000, "Member 'EndBattleAPI_SetEnableSlip::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableSlip, Enable) == 0x000008, "Member 'EndBattleAPI_SetEnableSlip::Enable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetForceActionRestriction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetForceActionRestriction final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forceActionRestriction;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetForceActionRestriction) == 0x000008, "Wrong alignment on EndBattleAPI_SetForceActionRestriction");
static_assert(sizeof(EndBattleAPI_SetForceActionRestriction) == 0x000010, "Wrong size on EndBattleAPI_SetForceActionRestriction");
static_assert(offsetof(EndBattleAPI_SetForceActionRestriction, Character) == 0x000000, "Member 'EndBattleAPI_SetForceActionRestriction::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetForceActionRestriction, forceActionRestriction) == 0x000008, "Member 'EndBattleAPI_SetForceActionRestriction::forceActionRestriction' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetForcedLODMode
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetForcedLODMode final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetForcedLODMode) == 0x000008, "Wrong alignment on EndBattleAPI_SetForcedLODMode");
static_assert(sizeof(EndBattleAPI_SetForcedLODMode) == 0x000010, "Wrong size on EndBattleAPI_SetForcedLODMode");
static_assert(offsetof(EndBattleAPI_SetForcedLODMode, Character) == 0x000000, "Member 'EndBattleAPI_SetForcedLODMode::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetForcedLODMode, Enable) == 0x000008, "Member 'EndBattleAPI_SetForcedLODMode::Enable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHeat
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetHeat final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetHeat) == 0x000008, "Wrong alignment on EndBattleAPI_SetHeat");
static_assert(sizeof(EndBattleAPI_SetHeat) == 0x000010, "Wrong size on EndBattleAPI_SetHeat");
static_assert(offsetof(EndBattleAPI_SetHeat, Character) == 0x000000, "Member 'EndBattleAPI_SetHeat::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHeat, Enable) == 0x000008, "Member 'EndBattleAPI_SetHeat::Enable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHeat, Duration) == 0x00000C, "Member 'EndBattleAPI_SetHeat::Duration' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHiddenBreakable
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAPI_SetHiddenBreakable final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LevelName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetHiddenBreakable) == 0x000004, "Wrong alignment on EndBattleAPI_SetHiddenBreakable");
static_assert(sizeof(EndBattleAPI_SetHiddenBreakable) == 0x000014, "Wrong size on EndBattleAPI_SetHiddenBreakable");
static_assert(offsetof(EndBattleAPI_SetHiddenBreakable, bHidden) == 0x000000, "Member 'EndBattleAPI_SetHiddenBreakable::bHidden' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHiddenBreakable, LevelName) == 0x000004, "Member 'EndBattleAPI_SetHiddenBreakable::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHiddenBreakable, AccessID) == 0x00000C, "Member 'EndBattleAPI_SetHiddenBreakable::AccessID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHiddenBreakables
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_SetHiddenBreakables final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelNames;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           AccessIDs;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetHiddenBreakables) == 0x000008, "Wrong alignment on EndBattleAPI_SetHiddenBreakables");
static_assert(sizeof(EndBattleAPI_SetHiddenBreakables) == 0x000028, "Wrong size on EndBattleAPI_SetHiddenBreakables");
static_assert(offsetof(EndBattleAPI_SetHiddenBreakables, bHidden) == 0x000000, "Member 'EndBattleAPI_SetHiddenBreakables::bHidden' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHiddenBreakables, LevelNames) == 0x000008, "Member 'EndBattleAPI_SetHiddenBreakables::LevelNames' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHiddenBreakables, AccessIDs) == 0x000018, "Member 'EndBattleAPI_SetHiddenBreakables::AccessIDs' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHiddenBreakablesTwoParam
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetHiddenBreakablesTwoParam final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AccessIDs;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetHiddenBreakablesTwoParam) == 0x000008, "Wrong alignment on EndBattleAPI_SetHiddenBreakablesTwoParam");
static_assert(sizeof(EndBattleAPI_SetHiddenBreakablesTwoParam) == 0x000018, "Wrong size on EndBattleAPI_SetHiddenBreakablesTwoParam");
static_assert(offsetof(EndBattleAPI_SetHiddenBreakablesTwoParam, bHidden) == 0x000000, "Member 'EndBattleAPI_SetHiddenBreakablesTwoParam::bHidden' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHiddenBreakablesTwoParam, AccessIDs) == 0x000008, "Member 'EndBattleAPI_SetHiddenBreakablesTwoParam::AccessIDs' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHiddenVolumeRelatedBreakable
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetHiddenVolumeRelatedBreakable final
{
public:
	EEndBattleBreakableRelationVolumeType         VolumeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BreakableIDs;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetHiddenVolumeRelatedBreakable) == 0x000008, "Wrong alignment on EndBattleAPI_SetHiddenVolumeRelatedBreakable");
static_assert(sizeof(EndBattleAPI_SetHiddenVolumeRelatedBreakable) == 0x000018, "Wrong size on EndBattleAPI_SetHiddenVolumeRelatedBreakable");
static_assert(offsetof(EndBattleAPI_SetHiddenVolumeRelatedBreakable, VolumeType) == 0x000000, "Member 'EndBattleAPI_SetHiddenVolumeRelatedBreakable::VolumeType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHiddenVolumeRelatedBreakable, bHidden) == 0x000001, "Member 'EndBattleAPI_SetHiddenVolumeRelatedBreakable::bHidden' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHiddenVolumeRelatedBreakable, BreakableIDs) == 0x000008, "Member 'EndBattleAPI_SetHiddenVolumeRelatedBreakable::BreakableIDs' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHide
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetHide final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hide;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetHide) == 0x000008, "Wrong alignment on EndBattleAPI_SetHide");
static_assert(sizeof(EndBattleAPI_SetHide) == 0x000010, "Wrong size on EndBattleAPI_SetHide");
static_assert(offsetof(EndBattleAPI_SetHide, Character) == 0x000000, "Member 'EndBattleAPI_SetHide::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHide, hide) == 0x000008, "Member 'EndBattleAPI_SetHide::hide' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHideSummonWithSkillCamera
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetHideSummonWithSkillCamera final
{
public:
	bool                                          enableHide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetHideSummonWithSkillCamera) == 0x000001, "Wrong alignment on EndBattleAPI_SetHideSummonWithSkillCamera");
static_assert(sizeof(EndBattleAPI_SetHideSummonWithSkillCamera) == 0x000001, "Wrong size on EndBattleAPI_SetHideSummonWithSkillCamera");
static_assert(offsetof(EndBattleAPI_SetHideSummonWithSkillCamera, enableHide) == 0x000000, "Member 'EndBattleAPI_SetHideSummonWithSkillCamera::enableHide' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHideTargetList
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetHideTargetList final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hide;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetHideTargetList) == 0x000008, "Wrong alignment on EndBattleAPI_SetHideTargetList");
static_assert(sizeof(EndBattleAPI_SetHideTargetList) == 0x000010, "Wrong size on EndBattleAPI_SetHideTargetList");
static_assert(offsetof(EndBattleAPI_SetHideTargetList, Character) == 0x000000, "Member 'EndBattleAPI_SetHideTargetList::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHideTargetList, hide) == 0x000008, "Member 'EndBattleAPI_SetHideTargetList::hide' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHitCharaResponse
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetHitCharaResponse final
{
public:
	class AEndCharacterBase*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitChara;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetHitCharaResponse) == 0x000008, "Wrong alignment on EndBattleAPI_SetHitCharaResponse");
static_assert(sizeof(EndBattleAPI_SetHitCharaResponse) == 0x000010, "Wrong size on EndBattleAPI_SetHitCharaResponse");
static_assert(offsetof(EndBattleAPI_SetHitCharaResponse, Character) == 0x000000, "Member 'EndBattleAPI_SetHitCharaResponse::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHitCharaResponse, bHitChara) == 0x000008, "Member 'EndBattleAPI_SetHitCharaResponse::bHitChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHPPercent
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetHPPercent final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Percent;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetHPPercent) == 0x000008, "Wrong alignment on EndBattleAPI_SetHPPercent");
static_assert(sizeof(EndBattleAPI_SetHPPercent) == 0x000010, "Wrong size on EndBattleAPI_SetHPPercent");
static_assert(offsetof(EndBattleAPI_SetHPPercent, Character) == 0x000000, "Member 'EndBattleAPI_SetHPPercent::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHPPercent, Percent) == 0x000008, "Member 'EndBattleAPI_SetHPPercent::Percent' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetIgnoreDisperseTarget
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_SetIgnoreDisperseTarget final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetIgnoreDisperseTarget) == 0x000008, "Wrong alignment on EndBattleAPI_SetIgnoreDisperseTarget");
static_assert(sizeof(EndBattleAPI_SetIgnoreDisperseTarget) == 0x000008, "Wrong size on EndBattleAPI_SetIgnoreDisperseTarget");
static_assert(offsetof(EndBattleAPI_SetIgnoreDisperseTarget, Character) == 0x000000, "Member 'EndBattleAPI_SetIgnoreDisperseTarget::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetIgnoreMoveOnlyNavMesh
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetIgnoreMoveOnlyNavMesh final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreMoveOnlyNavMesh;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetIgnoreMoveOnlyNavMesh) == 0x000008, "Wrong alignment on EndBattleAPI_SetIgnoreMoveOnlyNavMesh");
static_assert(sizeof(EndBattleAPI_SetIgnoreMoveOnlyNavMesh) == 0x000010, "Wrong size on EndBattleAPI_SetIgnoreMoveOnlyNavMesh");
static_assert(offsetof(EndBattleAPI_SetIgnoreMoveOnlyNavMesh, Character) == 0x000000, "Member 'EndBattleAPI_SetIgnoreMoveOnlyNavMesh::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetIgnoreMoveOnlyNavMesh, bIgnoreMoveOnlyNavMesh) == 0x000008, "Member 'EndBattleAPI_SetIgnoreMoveOnlyNavMesh::bIgnoreMoveOnlyNavMesh' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetIgnorePushActors
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_SetIgnorePushActors final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnore;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelNames;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActorNames;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetIgnorePushActors) == 0x000008, "Wrong alignment on EndBattleAPI_SetIgnorePushActors");
static_assert(sizeof(EndBattleAPI_SetIgnorePushActors) == 0x000030, "Wrong size on EndBattleAPI_SetIgnorePushActors");
static_assert(offsetof(EndBattleAPI_SetIgnorePushActors, Character) == 0x000000, "Member 'EndBattleAPI_SetIgnorePushActors::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetIgnorePushActors, bIgnore) == 0x000008, "Member 'EndBattleAPI_SetIgnorePushActors::bIgnore' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetIgnorePushActors, LevelNames) == 0x000010, "Member 'EndBattleAPI_SetIgnorePushActors::LevelNames' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetIgnorePushActors, ActorNames) == 0x000020, "Member 'EndBattleAPI_SetIgnorePushActors::ActorNames' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetIgnorePushActorsByAccessID
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SetIgnorePushActorsByAccessID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnore;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AccessIDs;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetIgnorePushActorsByAccessID) == 0x000008, "Wrong alignment on EndBattleAPI_SetIgnorePushActorsByAccessID");
static_assert(sizeof(EndBattleAPI_SetIgnorePushActorsByAccessID) == 0x000020, "Wrong size on EndBattleAPI_SetIgnorePushActorsByAccessID");
static_assert(offsetof(EndBattleAPI_SetIgnorePushActorsByAccessID, Character) == 0x000000, "Member 'EndBattleAPI_SetIgnorePushActorsByAccessID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetIgnorePushActorsByAccessID, bIgnore) == 0x000008, "Member 'EndBattleAPI_SetIgnorePushActorsByAccessID::bIgnore' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetIgnorePushActorsByAccessID, AccessIDs) == 0x000010, "Member 'EndBattleAPI_SetIgnorePushActorsByAccessID::AccessIDs' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetIgnoreSummonTargetPointFromActorName
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_SetIgnoreSummonTargetPointFromActorName final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignore;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetIgnoreSummonTargetPointFromActorName) == 0x000004, "Wrong alignment on EndBattleAPI_SetIgnoreSummonTargetPointFromActorName");
static_assert(sizeof(EndBattleAPI_SetIgnoreSummonTargetPointFromActorName) == 0x00000C, "Wrong size on EndBattleAPI_SetIgnoreSummonTargetPointFromActorName");
static_assert(offsetof(EndBattleAPI_SetIgnoreSummonTargetPointFromActorName, InActorName) == 0x000000, "Member 'EndBattleAPI_SetIgnoreSummonTargetPointFromActorName::InActorName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetIgnoreSummonTargetPointFromActorName, ignore) == 0x000008, "Member 'EndBattleAPI_SetIgnoreSummonTargetPointFromActorName::ignore' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetIgnoreSummonTargetPointFromActorName, ReturnValue) == 0x000009, "Member 'EndBattleAPI_SetIgnoreSummonTargetPointFromActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetImmotality
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetImmotality final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InImmotality;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetImmotality) == 0x000008, "Wrong alignment on EndBattleAPI_SetImmotality");
static_assert(sizeof(EndBattleAPI_SetImmotality) == 0x000010, "Wrong size on EndBattleAPI_SetImmotality");
static_assert(offsetof(EndBattleAPI_SetImmotality, InChara) == 0x000000, "Member 'EndBattleAPI_SetImmotality::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetImmotality, InImmotality) == 0x000008, "Member 'EndBattleAPI_SetImmotality::InImmotality' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetInvalidPerchRadiusScale
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetInvalidPerchRadiusScale final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetInvalidPerchRadiusScale) == 0x000008, "Wrong alignment on EndBattleAPI_SetInvalidPerchRadiusScale");
static_assert(sizeof(EndBattleAPI_SetInvalidPerchRadiusScale) == 0x000010, "Wrong size on EndBattleAPI_SetInvalidPerchRadiusScale");
static_assert(offsetof(EndBattleAPI_SetInvalidPerchRadiusScale, InChara) == 0x000000, "Member 'EndBattleAPI_SetInvalidPerchRadiusScale::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetInvalidPerchRadiusScale, InScale) == 0x000008, "Member 'EndBattleAPI_SetInvalidPerchRadiusScale::InScale' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetLockHeat
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetLockHeat final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetLockHeat) == 0x000008, "Wrong alignment on EndBattleAPI_SetLockHeat");
static_assert(sizeof(EndBattleAPI_SetLockHeat) == 0x000010, "Wrong size on EndBattleAPI_SetLockHeat");
static_assert(offsetof(EndBattleAPI_SetLockHeat, Character) == 0x000000, "Member 'EndBattleAPI_SetLockHeat::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetLockHeat, Locked) == 0x000008, "Member 'EndBattleAPI_SetLockHeat::Locked' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetMovementSplineConstraint
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetMovementSplineConstraint final
{
public:
	class AEndCharacterBase*                      InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InSplineActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentTag;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetMovementSplineConstraint) == 0x000008, "Wrong alignment on EndBattleAPI_SetMovementSplineConstraint");
static_assert(sizeof(EndBattleAPI_SetMovementSplineConstraint) == 0x000018, "Wrong size on EndBattleAPI_SetMovementSplineConstraint");
static_assert(offsetof(EndBattleAPI_SetMovementSplineConstraint, InCharacter) == 0x000000, "Member 'EndBattleAPI_SetMovementSplineConstraint::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetMovementSplineConstraint, InSplineActor) == 0x000008, "Member 'EndBattleAPI_SetMovementSplineConstraint::InSplineActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetMovementSplineConstraint, ComponentTag) == 0x000010, "Member 'EndBattleAPI_SetMovementSplineConstraint::ComponentTag' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideAbilityKeep
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetOverrideAbilityKeep final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetOverrideAbilityKeep) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideAbilityKeep");
static_assert(sizeof(EndBattleAPI_SetOverrideAbilityKeep) == 0x000010, "Wrong size on EndBattleAPI_SetOverrideAbilityKeep");
static_assert(offsetof(EndBattleAPI_SetOverrideAbilityKeep, Character) == 0x000000, "Member 'EndBattleAPI_SetOverrideAbilityKeep::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideAbilityKeep, Value) == 0x000008, "Member 'EndBattleAPI_SetOverrideAbilityKeep::Value' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideActiveAimAngle
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetOverrideActiveAimAngle final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ActiveYawRange;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ActivePitchRange;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetOverrideActiveAimAngle) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideActiveAimAngle");
static_assert(sizeof(EndBattleAPI_SetOverrideActiveAimAngle) == 0x000018, "Wrong size on EndBattleAPI_SetOverrideActiveAimAngle");
static_assert(offsetof(EndBattleAPI_SetOverrideActiveAimAngle, Character) == 0x000000, "Member 'EndBattleAPI_SetOverrideActiveAimAngle::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideActiveAimAngle, ActiveYawRange) == 0x000008, "Member 'EndBattleAPI_SetOverrideActiveAimAngle::ActiveYawRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideActiveAimAngle, ActivePitchRange) == 0x000010, "Member 'EndBattleAPI_SetOverrideActiveAimAngle::ActivePitchRange' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideAdditiveDamage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetOverrideAdditiveDamage final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimSequenceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetOverrideAdditiveDamage) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideAdditiveDamage");
static_assert(sizeof(EndBattleAPI_SetOverrideAdditiveDamage) == 0x000010, "Wrong size on EndBattleAPI_SetOverrideAdditiveDamage");
static_assert(offsetof(EndBattleAPI_SetOverrideAdditiveDamage, InChara) == 0x000000, "Member 'EndBattleAPI_SetOverrideAdditiveDamage::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideAdditiveDamage, AnimSequenceName) == 0x000008, "Member 'EndBattleAPI_SetOverrideAdditiveDamage::AnimSequenceName' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideBattleCharaPartsSpec
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SetOverrideBattleCharaPartsSpec final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseID;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideId;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeHP;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetOverrideBattleCharaPartsSpec) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideBattleCharaPartsSpec");
static_assert(sizeof(EndBattleAPI_SetOverrideBattleCharaPartsSpec) == 0x000020, "Wrong size on EndBattleAPI_SetOverrideBattleCharaPartsSpec");
static_assert(offsetof(EndBattleAPI_SetOverrideBattleCharaPartsSpec, Character) == 0x000000, "Member 'EndBattleAPI_SetOverrideBattleCharaPartsSpec::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideBattleCharaPartsSpec, BaseID) == 0x000008, "Member 'EndBattleAPI_SetOverrideBattleCharaPartsSpec::BaseID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideBattleCharaPartsSpec, OverrideId) == 0x000010, "Member 'EndBattleAPI_SetOverrideBattleCharaPartsSpec::OverrideId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideBattleCharaPartsSpec, bChangeHP) == 0x000018, "Member 'EndBattleAPI_SetOverrideBattleCharaPartsSpec::bChangeHP' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideBattleCharaSpec
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetOverrideBattleCharaSpec final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaSpecID;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetOverrideBattleCharaSpec) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideBattleCharaSpec");
static_assert(sizeof(EndBattleAPI_SetOverrideBattleCharaSpec) == 0x000010, "Wrong size on EndBattleAPI_SetOverrideBattleCharaSpec");
static_assert(offsetof(EndBattleAPI_SetOverrideBattleCharaSpec, Character) == 0x000000, "Member 'EndBattleAPI_SetOverrideBattleCharaSpec::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideBattleCharaSpec, BattleCharaSpecID) == 0x000008, "Member 'EndBattleAPI_SetOverrideBattleCharaSpec::BattleCharaSpecID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideBattleDefenseID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetOverrideBattleDefenseID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   battleDefenseID;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetOverrideBattleDefenseID) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideBattleDefenseID");
static_assert(sizeof(EndBattleAPI_SetOverrideBattleDefenseID) == 0x000010, "Wrong size on EndBattleAPI_SetOverrideBattleDefenseID");
static_assert(offsetof(EndBattleAPI_SetOverrideBattleDefenseID, Character) == 0x000000, "Member 'EndBattleAPI_SetOverrideBattleDefenseID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideBattleDefenseID, battleDefenseID) == 0x000008, "Member 'EndBattleAPI_SetOverrideBattleDefenseID::battleDefenseID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideCameraLockSocketName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetOverrideCameraLockSocketName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetOverrideCameraLockSocketName) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideCameraLockSocketName");
static_assert(sizeof(EndBattleAPI_SetOverrideCameraLockSocketName) == 0x000018, "Wrong size on EndBattleAPI_SetOverrideCameraLockSocketName");
static_assert(offsetof(EndBattleAPI_SetOverrideCameraLockSocketName, Character) == 0x000000, "Member 'EndBattleAPI_SetOverrideCameraLockSocketName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideCameraLockSocketName, SocketName) == 0x000008, "Member 'EndBattleAPI_SetOverrideCameraLockSocketName::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideCameraLockSocketName, BlendTime) == 0x000010, "Member 'EndBattleAPI_SetOverrideCameraLockSocketName::BlendTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideCameraLockSocketName, BlendOption) == 0x000014, "Member 'EndBattleAPI_SetOverrideCameraLockSocketName::BlendOption' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideCapsuleSize
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetOverrideCapsuleSize final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleHalfHeight;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetOverrideCapsuleSize) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideCapsuleSize");
static_assert(sizeof(EndBattleAPI_SetOverrideCapsuleSize) == 0x000010, "Wrong size on EndBattleAPI_SetOverrideCapsuleSize");
static_assert(offsetof(EndBattleAPI_SetOverrideCapsuleSize, InCharacter) == 0x000000, "Member 'EndBattleAPI_SetOverrideCapsuleSize::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideCapsuleSize, InRadius) == 0x000008, "Member 'EndBattleAPI_SetOverrideCapsuleSize::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideCapsuleSize, InCapsuleHalfHeight) == 0x00000C, "Member 'EndBattleAPI_SetOverrideCapsuleSize::InCapsuleHalfHeight' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideEnemyBookID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetOverrideEnemyBookID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyBookID;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetOverrideEnemyBookID) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideEnemyBookID");
static_assert(sizeof(EndBattleAPI_SetOverrideEnemyBookID) == 0x000010, "Wrong size on EndBattleAPI_SetOverrideEnemyBookID");
static_assert(offsetof(EndBattleAPI_SetOverrideEnemyBookID, Character) == 0x000000, "Member 'EndBattleAPI_SetOverrideEnemyBookID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideEnemyBookID, EnemyBookID) == 0x000008, "Member 'EndBattleAPI_SetOverrideEnemyBookID::EnemyBookID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideKeep
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetOverrideKeep final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InKeep;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetOverrideKeep) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideKeep");
static_assert(sizeof(EndBattleAPI_SetOverrideKeep) == 0x000010, "Wrong size on EndBattleAPI_SetOverrideKeep");
static_assert(offsetof(EndBattleAPI_SetOverrideKeep, Character) == 0x000000, "Member 'EndBattleAPI_SetOverrideKeep::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideKeep, InKeep) == 0x000008, "Member 'EndBattleAPI_SetOverrideKeep::InKeep' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideKeepFromAbility
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetOverrideKeepFromAbility final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAbilityName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetOverrideKeepFromAbility) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideKeepFromAbility");
static_assert(sizeof(EndBattleAPI_SetOverrideKeepFromAbility) == 0x000010, "Wrong size on EndBattleAPI_SetOverrideKeepFromAbility");
static_assert(offsetof(EndBattleAPI_SetOverrideKeepFromAbility, Character) == 0x000000, "Member 'EndBattleAPI_SetOverrideKeepFromAbility::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideKeepFromAbility, InAbilityName) == 0x000008, "Member 'EndBattleAPI_SetOverrideKeepFromAbility::InAbilityName' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideLocomotionAnimSequenceName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetOverrideLocomotionAnimSequenceName final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionAnimGroup                       AnimGroup;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimSequenceName;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetOverrideLocomotionAnimSequenceName) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideLocomotionAnimSequenceName");
static_assert(sizeof(EndBattleAPI_SetOverrideLocomotionAnimSequenceName) == 0x000018, "Wrong size on EndBattleAPI_SetOverrideLocomotionAnimSequenceName");
static_assert(offsetof(EndBattleAPI_SetOverrideLocomotionAnimSequenceName, InChara) == 0x000000, "Member 'EndBattleAPI_SetOverrideLocomotionAnimSequenceName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideLocomotionAnimSequenceName, AnimGroup) == 0x000008, "Member 'EndBattleAPI_SetOverrideLocomotionAnimSequenceName::AnimGroup' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideLocomotionAnimSequenceName, AnimSequenceName) == 0x00000C, "Member 'EndBattleAPI_SetOverrideLocomotionAnimSequenceName::AnimSequenceName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideLocomotionAnimSequenceName, BlendTime) == 0x000014, "Member 'EndBattleAPI_SetOverrideLocomotionAnimSequenceName::BlendTime' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideMovementBaseByComponentTags
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetOverrideMovementBaseByComponentTags final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InMovementBaseActor;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentTag;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetOverrideMovementBaseByComponentTags) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideMovementBaseByComponentTags");
static_assert(sizeof(EndBattleAPI_SetOverrideMovementBaseByComponentTags) == 0x000018, "Wrong size on EndBattleAPI_SetOverrideMovementBaseByComponentTags");
static_assert(offsetof(EndBattleAPI_SetOverrideMovementBaseByComponentTags, InCharacter) == 0x000000, "Member 'EndBattleAPI_SetOverrideMovementBaseByComponentTags::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideMovementBaseByComponentTags, InMovementBaseActor) == 0x000008, "Member 'EndBattleAPI_SetOverrideMovementBaseByComponentTags::InMovementBaseActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideMovementBaseByComponentTags, ComponentTag) == 0x000010, "Member 'EndBattleAPI_SetOverrideMovementBaseByComponentTags::ComponentTag' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverridePartsCameraLockSocketName
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SetOverridePartsCameraLockSocketName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseBattleCharaPartsSpecID;                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetOverridePartsCameraLockSocketName) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverridePartsCameraLockSocketName");
static_assert(sizeof(EndBattleAPI_SetOverridePartsCameraLockSocketName) == 0x000020, "Wrong size on EndBattleAPI_SetOverridePartsCameraLockSocketName");
static_assert(offsetof(EndBattleAPI_SetOverridePartsCameraLockSocketName, Character) == 0x000000, "Member 'EndBattleAPI_SetOverridePartsCameraLockSocketName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverridePartsCameraLockSocketName, BaseBattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_SetOverridePartsCameraLockSocketName::BaseBattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverridePartsCameraLockSocketName, SocketName) == 0x000010, "Member 'EndBattleAPI_SetOverridePartsCameraLockSocketName::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverridePartsCameraLockSocketName, BlendTime) == 0x000018, "Member 'EndBattleAPI_SetOverridePartsCameraLockSocketName::BlendTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverridePartsCameraLockSocketName, BlendOption) == 0x00001C, "Member 'EndBattleAPI_SetOverridePartsCameraLockSocketName::BlendOption' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetPartsHPPercent
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetPartsHPPercent final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaPartsSpecID;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetPartsHPPercent) == 0x000008, "Wrong alignment on EndBattleAPI_SetPartsHPPercent");
static_assert(sizeof(EndBattleAPI_SetPartsHPPercent) == 0x000018, "Wrong size on EndBattleAPI_SetPartsHPPercent");
static_assert(offsetof(EndBattleAPI_SetPartsHPPercent, Character) == 0x000000, "Member 'EndBattleAPI_SetPartsHPPercent::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetPartsHPPercent, BattleCharaPartsSpecID) == 0x000008, "Member 'EndBattleAPI_SetPartsHPPercent::BattleCharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetPartsHPPercent, Percent) == 0x000010, "Member 'EndBattleAPI_SetPartsHPPercent::Percent' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetPartyLeader
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAPI_SetPartyLeader final
{
public:
	EPlayerType                                   Player;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInputTrigered;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetPartyLeader) == 0x000001, "Wrong alignment on EndBattleAPI_SetPartyLeader");
static_assert(sizeof(EndBattleAPI_SetPartyLeader) == 0x000003, "Wrong size on EndBattleAPI_SetPartyLeader");
static_assert(offsetof(EndBattleAPI_SetPartyLeader, Player) == 0x000000, "Member 'EndBattleAPI_SetPartyLeader::Player' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetPartyLeader, bIsInputTrigered) == 0x000001, "Member 'EndBattleAPI_SetPartyLeader::bIsInputTrigered' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetPartyLeader, ReturnValue) == 0x000002, "Member 'EndBattleAPI_SetPartyLeader::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetPerchSweepRadiusScale
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetPerchSweepRadiusScale final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetPerchSweepRadiusScale) == 0x000008, "Wrong alignment on EndBattleAPI_SetPerchSweepRadiusScale");
static_assert(sizeof(EndBattleAPI_SetPerchSweepRadiusScale) == 0x000010, "Wrong size on EndBattleAPI_SetPerchSweepRadiusScale");
static_assert(offsetof(EndBattleAPI_SetPerchSweepRadiusScale, InChara) == 0x000000, "Member 'EndBattleAPI_SetPerchSweepRadiusScale::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetPerchSweepRadiusScale, InScale) == 0x000008, "Member 'EndBattleAPI_SetPerchSweepRadiusScale::InScale' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetPrimaryAnimPack
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetPrimaryAnimPack final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignoreLowerPriority;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetPrimaryAnimPack) == 0x000008, "Wrong alignment on EndBattleAPI_SetPrimaryAnimPack");
static_assert(sizeof(EndBattleAPI_SetPrimaryAnimPack) == 0x000018, "Wrong size on EndBattleAPI_SetPrimaryAnimPack");
static_assert(offsetof(EndBattleAPI_SetPrimaryAnimPack, Character) == 0x000000, "Member 'EndBattleAPI_SetPrimaryAnimPack::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetPrimaryAnimPack, InName) == 0x000008, "Member 'EndBattleAPI_SetPrimaryAnimPack::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetPrimaryAnimPack, ignoreLowerPriority) == 0x000010, "Member 'EndBattleAPI_SetPrimaryAnimPack::ignoreLowerPriority' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetRigidBodyName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetRigidBodyName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RigidBodyName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateOther;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetRigidBodyName) == 0x000008, "Wrong alignment on EndBattleAPI_SetRigidBodyName");
static_assert(sizeof(EndBattleAPI_SetRigidBodyName) == 0x000018, "Wrong size on EndBattleAPI_SetRigidBodyName");
static_assert(offsetof(EndBattleAPI_SetRigidBodyName, Character) == 0x000000, "Member 'EndBattleAPI_SetRigidBodyName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetRigidBodyName, RigidBodyName) == 0x000008, "Member 'EndBattleAPI_SetRigidBodyName::RigidBodyName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetRigidBodyName, bDeactivateOther) == 0x000010, "Member 'EndBattleAPI_SetRigidBodyName::bDeactivateOther' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetRootCapsuleAttackTargetSizeScale
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetRootCapsuleAttackTargetSizeScale final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttackTargetSizeScale;                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetRootCapsuleAttackTargetSizeScale) == 0x000008, "Wrong alignment on EndBattleAPI_SetRootCapsuleAttackTargetSizeScale");
static_assert(sizeof(EndBattleAPI_SetRootCapsuleAttackTargetSizeScale) == 0x000018, "Wrong size on EndBattleAPI_SetRootCapsuleAttackTargetSizeScale");
static_assert(offsetof(EndBattleAPI_SetRootCapsuleAttackTargetSizeScale, Character) == 0x000000, "Member 'EndBattleAPI_SetRootCapsuleAttackTargetSizeScale::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetRootCapsuleAttackTargetSizeScale, AttackTargetSizeScale) == 0x000008, "Member 'EndBattleAPI_SetRootCapsuleAttackTargetSizeScale::AttackTargetSizeScale' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetShowEnemyStatusGUI
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetShowEnemyStatusGUI final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Show;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetShowEnemyStatusGUI) == 0x000008, "Wrong alignment on EndBattleAPI_SetShowEnemyStatusGUI");
static_assert(sizeof(EndBattleAPI_SetShowEnemyStatusGUI) == 0x000010, "Wrong size on EndBattleAPI_SetShowEnemyStatusGUI");
static_assert(offsetof(EndBattleAPI_SetShowEnemyStatusGUI, Character) == 0x000000, "Member 'EndBattleAPI_SetShowEnemyStatusGUI::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetShowEnemyStatusGUI, Show) == 0x000008, "Member 'EndBattleAPI_SetShowEnemyStatusGUI::Show' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetSpecialStatusChangeStateChangeID
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAPI_SetSpecialStatusChangeStateChangeID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecialStatusChangeID;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   stateChangeID;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Params_0;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   paramID;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 paramActor;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetSpecialStatusChangeStateChangeID) == 0x000008, "Wrong alignment on EndBattleAPI_SetSpecialStatusChangeStateChangeID");
static_assert(sizeof(EndBattleAPI_SetSpecialStatusChangeStateChangeID) == 0x000038, "Wrong size on EndBattleAPI_SetSpecialStatusChangeStateChangeID");
static_assert(offsetof(EndBattleAPI_SetSpecialStatusChangeStateChangeID, Character) == 0x000000, "Member 'EndBattleAPI_SetSpecialStatusChangeStateChangeID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetSpecialStatusChangeStateChangeID, SpecialStatusChangeID) == 0x000008, "Member 'EndBattleAPI_SetSpecialStatusChangeStateChangeID::SpecialStatusChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetSpecialStatusChangeStateChangeID, stateChangeID) == 0x000010, "Member 'EndBattleAPI_SetSpecialStatusChangeStateChangeID::stateChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetSpecialStatusChangeStateChangeID, Params_0) == 0x000018, "Member 'EndBattleAPI_SetSpecialStatusChangeStateChangeID::Params_0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetSpecialStatusChangeStateChangeID, paramID) == 0x000028, "Member 'EndBattleAPI_SetSpecialStatusChangeStateChangeID::paramID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetSpecialStatusChangeStateChangeID, paramActor) == 0x000030, "Member 'EndBattleAPI_SetSpecialStatusChangeStateChangeID::paramActor' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetSpecialStatusStateChangeID
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SetSpecialStatusStateChangeID final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   stateChangeID;                                     // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   paramID;                                           // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetSpecialStatusStateChangeID) == 0x000008, "Wrong alignment on EndBattleAPI_SetSpecialStatusStateChangeID");
static_assert(sizeof(EndBattleAPI_SetSpecialStatusStateChangeID) == 0x000020, "Wrong size on EndBattleAPI_SetSpecialStatusStateChangeID");
static_assert(offsetof(EndBattleAPI_SetSpecialStatusStateChangeID, Character) == 0x000000, "Member 'EndBattleAPI_SetSpecialStatusStateChangeID::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetSpecialStatusStateChangeID, Type) == 0x000008, "Member 'EndBattleAPI_SetSpecialStatusStateChangeID::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetSpecialStatusStateChangeID, stateChangeID) == 0x00000C, "Member 'EndBattleAPI_SetSpecialStatusStateChangeID::stateChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetSpecialStatusStateChangeID, paramID) == 0x000014, "Member 'EndBattleAPI_SetSpecialStatusStateChangeID::paramID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetStoryFlagCondition
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_SetStoryFlagCondition final
{
public:
	class FName                                   storyFlagNames;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Condition;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetStoryFlagCondition) == 0x000004, "Wrong alignment on EndBattleAPI_SetStoryFlagCondition");
static_assert(sizeof(EndBattleAPI_SetStoryFlagCondition) == 0x00000C, "Wrong size on EndBattleAPI_SetStoryFlagCondition");
static_assert(offsetof(EndBattleAPI_SetStoryFlagCondition, storyFlagNames) == 0x000000, "Member 'EndBattleAPI_SetStoryFlagCondition::storyFlagNames' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetStoryFlagCondition, Condition) == 0x000008, "Member 'EndBattleAPI_SetStoryFlagCondition::Condition' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetSubCollisionPushBackSpeed
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetSubCollisionPushBackSpeed final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeed;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetSubCollisionPushBackSpeed) == 0x000008, "Wrong alignment on EndBattleAPI_SetSubCollisionPushBackSpeed");
static_assert(sizeof(EndBattleAPI_SetSubCollisionPushBackSpeed) == 0x000010, "Wrong size on EndBattleAPI_SetSubCollisionPushBackSpeed");
static_assert(offsetof(EndBattleAPI_SetSubCollisionPushBackSpeed, InChara) == 0x000000, "Member 'EndBattleAPI_SetSubCollisionPushBackSpeed::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetSubCollisionPushBackSpeed, InSpeed) == 0x000008, "Member 'EndBattleAPI_SetSubCollisionPushBackSpeed::InSpeed' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetSummonInBossCutScene
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetSummonInBossCutScene final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetSummonInBossCutScene) == 0x000001, "Wrong alignment on EndBattleAPI_SetSummonInBossCutScene");
static_assert(sizeof(EndBattleAPI_SetSummonInBossCutScene) == 0x000001, "Wrong size on EndBattleAPI_SetSummonInBossCutScene");
static_assert(offsetof(EndBattleAPI_SetSummonInBossCutScene, bFlag) == 0x000000, "Member 'EndBattleAPI_SetSummonInBossCutScene::bFlag' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetUnitParameter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetUnitParameter final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hideTargetList;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          disableTarget;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          disableTargetShowIcon;                             // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableDamageHit;                                  // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetUnitParameter) == 0x000008, "Wrong alignment on EndBattleAPI_SetUnitParameter");
static_assert(sizeof(EndBattleAPI_SetUnitParameter) == 0x000010, "Wrong size on EndBattleAPI_SetUnitParameter");
static_assert(offsetof(EndBattleAPI_SetUnitParameter, Character) == 0x000000, "Member 'EndBattleAPI_SetUnitParameter::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetUnitParameter, hideTargetList) == 0x000008, "Member 'EndBattleAPI_SetUnitParameter::hideTargetList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetUnitParameter, disableTarget) == 0x000009, "Member 'EndBattleAPI_SetUnitParameter::disableTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetUnitParameter, disableTargetShowIcon) == 0x00000A, "Member 'EndBattleAPI_SetUnitParameter::disableTargetShowIcon' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetUnitParameter, DisableDamageHit) == 0x00000B, "Member 'EndBattleAPI_SetUnitParameter::DisableDamageHit' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetupChargeCrystal
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetupChargeCrystal final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   uniqueName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetupChargeCrystal) == 0x000008, "Wrong alignment on EndBattleAPI_SetupChargeCrystal");
static_assert(sizeof(EndBattleAPI_SetupChargeCrystal) == 0x000010, "Wrong size on EndBattleAPI_SetupChargeCrystal");
static_assert(offsetof(EndBattleAPI_SetupChargeCrystal, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_SetupChargeCrystal::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetupChargeCrystal, uniqueName) == 0x000008, "Member 'EndBattleAPI_SetupChargeCrystal::uniqueName' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetValidLargeSizeForSummonArea
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetValidLargeSizeForSummonArea final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetValidLargeSizeForSummonArea) == 0x000001, "Wrong alignment on EndBattleAPI_SetValidLargeSizeForSummonArea");
static_assert(sizeof(EndBattleAPI_SetValidLargeSizeForSummonArea) == 0x000001, "Wrong size on EndBattleAPI_SetValidLargeSizeForSummonArea");
static_assert(offsetof(EndBattleAPI_SetValidLargeSizeForSummonArea, Valid) == 0x000000, "Member 'EndBattleAPI_SetValidLargeSizeForSummonArea::Valid' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetValidSmallSizeForSummonArea
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetValidSmallSizeForSummonArea final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetValidSmallSizeForSummonArea) == 0x000001, "Wrong alignment on EndBattleAPI_SetValidSmallSizeForSummonArea");
static_assert(sizeof(EndBattleAPI_SetValidSmallSizeForSummonArea) == 0x000001, "Wrong size on EndBattleAPI_SetValidSmallSizeForSummonArea");
static_assert(offsetof(EndBattleAPI_SetValidSmallSizeForSummonArea, Valid) == 0x000000, "Member 'EndBattleAPI_SetValidSmallSizeForSummonArea::Valid' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetVisibilityWeapon
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetVisibilityWeapon final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   weaponSlotType;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetToAnimationDefault;                            // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlsoSetToNeutral;                                 // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetVisibilityWeapon) == 0x000008, "Wrong alignment on EndBattleAPI_SetVisibilityWeapon");
static_assert(sizeof(EndBattleAPI_SetVisibilityWeapon) == 0x000010, "Wrong size on EndBattleAPI_SetVisibilityWeapon");
static_assert(offsetof(EndBattleAPI_SetVisibilityWeapon, Character) == 0x000000, "Member 'EndBattleAPI_SetVisibilityWeapon::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetVisibilityWeapon, bVisible) == 0x000008, "Member 'EndBattleAPI_SetVisibilityWeapon::bVisible' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetVisibilityWeapon, weaponSlotType) == 0x000009, "Member 'EndBattleAPI_SetVisibilityWeapon::weaponSlotType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetVisibilityWeapon, bSetToAnimationDefault) == 0x00000A, "Member 'EndBattleAPI_SetVisibilityWeapon::bSetToAnimationDefault' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetVisibilityWeapon, bAlsoSetToNeutral) == 0x00000B, "Member 'EndBattleAPI_SetVisibilityWeapon::bAlsoSetToNeutral' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetWalkableFloorAngle
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetWalkableFloorAngle final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWalkableAngle;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetWalkableFloorAngle) == 0x000008, "Wrong alignment on EndBattleAPI_SetWalkableFloorAngle");
static_assert(sizeof(EndBattleAPI_SetWalkableFloorAngle) == 0x000010, "Wrong size on EndBattleAPI_SetWalkableFloorAngle");
static_assert(offsetof(EndBattleAPI_SetWalkableFloorAngle, InCharacter) == 0x000000, "Member 'EndBattleAPI_SetWalkableFloorAngle::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetWalkableFloorAngle, InWalkableAngle) == 0x000008, "Member 'EndBattleAPI_SetWalkableFloorAngle::InWalkableAngle' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetWalkableFloorAngleOnBattleNav
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetWalkableFloorAngleOnBattleNav final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWalkableAngle;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetWalkableFloorAngleOnBattleNav) == 0x000008, "Wrong alignment on EndBattleAPI_SetWalkableFloorAngleOnBattleNav");
static_assert(sizeof(EndBattleAPI_SetWalkableFloorAngleOnBattleNav) == 0x000010, "Wrong size on EndBattleAPI_SetWalkableFloorAngleOnBattleNav");
static_assert(offsetof(EndBattleAPI_SetWalkableFloorAngleOnBattleNav, InCharacter) == 0x000000, "Member 'EndBattleAPI_SetWalkableFloorAngleOnBattleNav::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetWalkableFloorAngleOnBattleNav, InWalkableAngle) == 0x000008, "Member 'EndBattleAPI_SetWalkableFloorAngleOnBattleNav::InWalkableAngle' has a wrong offset!");

// Function EndGame.EndBattleAPI.ShowPhysics
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_ShowPhysics final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulatePhysics;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ShowPhysics) == 0x000004, "Wrong alignment on EndBattleAPI_ShowPhysics");
static_assert(sizeof(EndBattleAPI_ShowPhysics) == 0x00000C, "Wrong size on EndBattleAPI_ShowPhysics");
static_assert(offsetof(EndBattleAPI_ShowPhysics, ActorName) == 0x000000, "Member 'EndBattleAPI_ShowPhysics::ActorName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ShowPhysics, bSimulatePhysics) == 0x000008, "Member 'EndBattleAPI_ShowPhysics::bSimulatePhysics' has a wrong offset!");

// Function EndGame.EndBattleAPI.ShowTargetAppearGUI
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ShowTargetAppearGUI final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ShowTargetAppearGUI) == 0x000008, "Wrong alignment on EndBattleAPI_ShowTargetAppearGUI");
static_assert(sizeof(EndBattleAPI_ShowTargetAppearGUI) == 0x000008, "Wrong size on EndBattleAPI_ShowTargetAppearGUI");
static_assert(offsetof(EndBattleAPI_ShowTargetAppearGUI, Character) == 0x000000, "Member 'EndBattleAPI_ShowTargetAppearGUI::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.SkipFadeCharaPopActor
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_SkipFadeCharaPopActor final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SkipFadeCharaPopActor) == 0x000004, "Wrong alignment on EndBattleAPI_SkipFadeCharaPopActor");
static_assert(sizeof(EndBattleAPI_SkipFadeCharaPopActor) == 0x000008, "Wrong size on EndBattleAPI_SkipFadeCharaPopActor");
static_assert(offsetof(EndBattleAPI_SkipFadeCharaPopActor, ActorName) == 0x000000, "Member 'EndBattleAPI_SkipFadeCharaPopActor::ActorName' has a wrong offset!");

// Function EndGame.EndBattleAPI.SpawnSharedCharaSpec
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SpawnSharedCharaSpec final
{
public:
	class AEndCharacterBase*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SpawnSharedCharaSpec) == 0x000008, "Wrong alignment on EndBattleAPI_SpawnSharedCharaSpec");
static_assert(sizeof(EndBattleAPI_SpawnSharedCharaSpec) == 0x000018, "Wrong size on EndBattleAPI_SpawnSharedCharaSpec");
static_assert(offsetof(EndBattleAPI_SpawnSharedCharaSpec, Character) == 0x000000, "Member 'EndBattleAPI_SpawnSharedCharaSpec::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SpawnSharedCharaSpec, Index_0) == 0x000008, "Member 'EndBattleAPI_SpawnSharedCharaSpec::Index_0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SpawnSharedCharaSpec, ReturnValue) == 0x000010, "Member 'EndBattleAPI_SpawnSharedCharaSpec::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.SpawnWeaponCharacter
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SpawnWeaponCharacter final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleUniqueAbilitySpawnWeaponType        weaponType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   uniqueWeaponName;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnWeaponObjectName;                             // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SpawnWeaponCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_SpawnWeaponCharacter");
static_assert(sizeof(EndBattleAPI_SpawnWeaponCharacter) == 0x000020, "Wrong size on EndBattleAPI_SpawnWeaponCharacter");
static_assert(offsetof(EndBattleAPI_SpawnWeaponCharacter, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_SpawnWeaponCharacter::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SpawnWeaponCharacter, weaponType) == 0x000008, "Member 'EndBattleAPI_SpawnWeaponCharacter::weaponType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SpawnWeaponCharacter, uniqueWeaponName) == 0x00000C, "Member 'EndBattleAPI_SpawnWeaponCharacter::uniqueWeaponName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SpawnWeaponCharacter, SpawnWeaponObjectName) == 0x000014, "Member 'EndBattleAPI_SpawnWeaponCharacter::SpawnWeaponObjectName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SpawnWeaponCharacter, ReturnValue) == 0x00001C, "Member 'EndBattleAPI_SpawnWeaponCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.StartBurst
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_StartBurst final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_StartBurst) == 0x000008, "Wrong alignment on EndBattleAPI_StartBurst");
static_assert(sizeof(EndBattleAPI_StartBurst) == 0x000010, "Wrong size on EndBattleAPI_StartBurst");
static_assert(offsetof(EndBattleAPI_StartBurst, Character) == 0x000000, "Member 'EndBattleAPI_StartBurst::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_StartBurst, Force) == 0x000008, "Member 'EndBattleAPI_StartBurst::Force' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_StartBurst, ReturnValue) == 0x000009, "Member 'EndBattleAPI_StartBurst::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.StartEnvironmentPhysFieldForce
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_StartEnvironmentPhysFieldForce final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StartEnvironmentPhysFieldForce) == 0x000004, "Wrong alignment on EndBattleAPI_StartEnvironmentPhysFieldForce");
static_assert(sizeof(EndBattleAPI_StartEnvironmentPhysFieldForce) == 0x000008, "Wrong size on EndBattleAPI_StartEnvironmentPhysFieldForce");
static_assert(offsetof(EndBattleAPI_StartEnvironmentPhysFieldForce, GroupName) == 0x000000, "Member 'EndBattleAPI_StartEnvironmentPhysFieldForce::GroupName' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopAddMotion
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_StopAddMotion final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StopAddMotion) == 0x000008, "Wrong alignment on EndBattleAPI_StopAddMotion");
static_assert(sizeof(EndBattleAPI_StopAddMotion) == 0x000008, "Wrong size on EndBattleAPI_StopAddMotion");
static_assert(offsetof(EndBattleAPI_StopAddMotion, Character) == 0x000000, "Member 'EndBattleAPI_StopAddMotion::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopAnimEnvironment
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_StopAnimEnvironment final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StopAnimEnvironment) == 0x000004, "Wrong alignment on EndBattleAPI_StopAnimEnvironment");
static_assert(sizeof(EndBattleAPI_StopAnimEnvironment) == 0x000010, "Wrong size on EndBattleAPI_StopAnimEnvironment");
static_assert(offsetof(EndBattleAPI_StopAnimEnvironment, LevelName) == 0x000000, "Member 'EndBattleAPI_StopAnimEnvironment::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_StopAnimEnvironment, AccessID) == 0x000008, "Member 'EndBattleAPI_StopAnimEnvironment::AccessID' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopBattleCameraSequence
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_StopBattleCameraSequence final
{
public:
	int32                                         sequenceActorUID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StopBattleCameraSequence) == 0x000004, "Wrong alignment on EndBattleAPI_StopBattleCameraSequence");
static_assert(sizeof(EndBattleAPI_StopBattleCameraSequence) == 0x000004, "Wrong size on EndBattleAPI_StopBattleCameraSequence");
static_assert(offsetof(EndBattleAPI_StopBattleCameraSequence, sequenceActorUID) == 0x000000, "Member 'EndBattleAPI_StopBattleCameraSequence::sequenceActorUID' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopCrowdActor
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_StopCrowdActor final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccessID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_StopCrowdActor) == 0x000004, "Wrong alignment on EndBattleAPI_StopCrowdActor");
static_assert(sizeof(EndBattleAPI_StopCrowdActor) == 0x000018, "Wrong size on EndBattleAPI_StopCrowdActor");
static_assert(offsetof(EndBattleAPI_StopCrowdActor, LevelName) == 0x000000, "Member 'EndBattleAPI_StopCrowdActor::LevelName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_StopCrowdActor, AccessID) == 0x000008, "Member 'EndBattleAPI_StopCrowdActor::AccessID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_StopCrowdActor, BlendTime) == 0x000010, "Member 'EndBattleAPI_StopCrowdActor::BlendTime' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_StopCrowdActor, bUseFade) == 0x000014, "Member 'EndBattleAPI_StopCrowdActor::bUseFade' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopEffect
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_StopEffect final
{
public:
	int32                                         handleNumber;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StopEffect) == 0x000004, "Wrong alignment on EndBattleAPI_StopEffect");
static_assert(sizeof(EndBattleAPI_StopEffect) == 0x000004, "Wrong size on EndBattleAPI_StopEffect");
static_assert(offsetof(EndBattleAPI_StopEffect, handleNumber) == 0x000000, "Member 'EndBattleAPI_StopEffect::handleNumber' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopEnvironmentPhysFieldForce
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_StopEnvironmentPhysFieldForce final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StopEnvironmentPhysFieldForce) == 0x000004, "Wrong alignment on EndBattleAPI_StopEnvironmentPhysFieldForce");
static_assert(sizeof(EndBattleAPI_StopEnvironmentPhysFieldForce) == 0x000008, "Wrong size on EndBattleAPI_StopEnvironmentPhysFieldForce");
static_assert(offsetof(EndBattleAPI_StopEnvironmentPhysFieldForce, GroupName) == 0x000000, "Member 'EndBattleAPI_StopEnvironmentPhysFieldForce::GroupName' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopPartLoopMotion
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_StopPartLoopMotion final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StopPartLoopMotion) == 0x000008, "Wrong alignment on EndBattleAPI_StopPartLoopMotion");
static_assert(sizeof(EndBattleAPI_StopPartLoopMotion) == 0x000008, "Wrong size on EndBattleAPI_StopPartLoopMotion");
static_assert(offsetof(EndBattleAPI_StopPartLoopMotion, Character) == 0x000000, "Member 'EndBattleAPI_StopPartLoopMotion::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopPartStartLoopEndMotion
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_StopPartStartLoopEndMotion final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StopPartStartLoopEndMotion) == 0x000008, "Wrong alignment on EndBattleAPI_StopPartStartLoopEndMotion");
static_assert(sizeof(EndBattleAPI_StopPartStartLoopEndMotion) == 0x000008, "Wrong size on EndBattleAPI_StopPartStartLoopEndMotion");
static_assert(offsetof(EndBattleAPI_StopPartStartLoopEndMotion, Character) == 0x000000, "Member 'EndBattleAPI_StopPartStartLoopEndMotion::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.SummonCutSceneAbilityException
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SummonCutSceneAbilityException final
{
public:
	class FName                                   excludeCharaSpecID;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   substituteCharaSpecID;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SummonCutSceneAbilityException) == 0x000004, "Wrong alignment on EndBattleAPI_SummonCutSceneAbilityException");
static_assert(sizeof(EndBattleAPI_SummonCutSceneAbilityException) == 0x000010, "Wrong size on EndBattleAPI_SummonCutSceneAbilityException");
static_assert(offsetof(EndBattleAPI_SummonCutSceneAbilityException, excludeCharaSpecID) == 0x000000, "Member 'EndBattleAPI_SummonCutSceneAbilityException::excludeCharaSpecID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SummonCutSceneAbilityException, substituteCharaSpecID) == 0x000008, "Member 'EndBattleAPI_SummonCutSceneAbilityException::substituteCharaSpecID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SummonPointManualSuspend
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SummonPointManualSuspend final
{
public:
	bool                                          suspend;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SummonPointManualSuspend) == 0x000001, "Wrong alignment on EndBattleAPI_SummonPointManualSuspend");
static_assert(sizeof(EndBattleAPI_SummonPointManualSuspend) == 0x000001, "Wrong size on EndBattleAPI_SummonPointManualSuspend");
static_assert(offsetof(EndBattleAPI_SummonPointManualSuspend, suspend) == 0x000000, "Member 'EndBattleAPI_SummonPointManualSuspend::suspend' has a wrong offset!");

// Function EndGame.EndBattleAPI.SwitchMesh
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SwitchMesh final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshLabel;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SwitchMesh) == 0x000008, "Wrong alignment on EndBattleAPI_SwitchMesh");
static_assert(sizeof(EndBattleAPI_SwitchMesh) == 0x000020, "Wrong size on EndBattleAPI_SwitchMesh");
static_assert(offsetof(EndBattleAPI_SwitchMesh, Character) == 0x000000, "Member 'EndBattleAPI_SwitchMesh::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SwitchMesh, MeshName) == 0x000008, "Member 'EndBattleAPI_SwitchMesh::MeshName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SwitchMesh, MeshLabel) == 0x000010, "Member 'EndBattleAPI_SwitchMesh::MeshLabel' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SwitchMesh, ReturnValue) == 0x000018, "Member 'EndBattleAPI_SwitchMesh::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.TryGetCurrentFloorLocation
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_TryGetCurrentFloorLocation final
{
public:
	struct FVector                                FloorLocation;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacterBase*                      Character;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_TryGetCurrentFloorLocation) == 0x000008, "Wrong alignment on EndBattleAPI_TryGetCurrentFloorLocation");
static_assert(sizeof(EndBattleAPI_TryGetCurrentFloorLocation) == 0x000020, "Wrong size on EndBattleAPI_TryGetCurrentFloorLocation");
static_assert(offsetof(EndBattleAPI_TryGetCurrentFloorLocation, FloorLocation) == 0x000000, "Member 'EndBattleAPI_TryGetCurrentFloorLocation::FloorLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_TryGetCurrentFloorLocation, Character) == 0x000010, "Member 'EndBattleAPI_TryGetCurrentFloorLocation::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_TryGetCurrentFloorLocation, ReturnValue) == 0x000018, "Member 'EndBattleAPI_TryGetCurrentFloorLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.TryLayoutTransform
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_TryLayoutTransform final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_TryLayoutTransform) == 0x000004, "Wrong alignment on EndBattleAPI_TryLayoutTransform");
static_assert(sizeof(EndBattleAPI_TryLayoutTransform) == 0x00000C, "Wrong size on EndBattleAPI_TryLayoutTransform");
static_assert(offsetof(EndBattleAPI_TryLayoutTransform, NodeName) == 0x000000, "Member 'EndBattleAPI_TryLayoutTransform::NodeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_TryLayoutTransform, ReturnValue) == 0x000008, "Member 'EndBattleAPI_TryLayoutTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.UpdateAppearanceFrog
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_UpdateAppearanceFrog final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_UpdateAppearanceFrog) == 0x000008, "Wrong alignment on EndBattleAPI_UpdateAppearanceFrog");
static_assert(sizeof(EndBattleAPI_UpdateAppearanceFrog) == 0x000008, "Wrong size on EndBattleAPI_UpdateAppearanceFrog");
static_assert(offsetof(EndBattleAPI_UpdateAppearanceFrog, Character) == 0x000000, "Member 'EndBattleAPI_UpdateAppearanceFrog::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.UpdateMoveGenjiShield
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_UpdateMoveGenjiShield final
{
public:
	class AEndCharacter*                          ownerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          causerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_UpdateMoveGenjiShield) == 0x000008, "Wrong alignment on EndBattleAPI_UpdateMoveGenjiShield");
static_assert(sizeof(EndBattleAPI_UpdateMoveGenjiShield) == 0x000010, "Wrong size on EndBattleAPI_UpdateMoveGenjiShield");
static_assert(offsetof(EndBattleAPI_UpdateMoveGenjiShield, ownerCharacter) == 0x000000, "Member 'EndBattleAPI_UpdateMoveGenjiShield::ownerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_UpdateMoveGenjiShield, causerCharacter) == 0x000008, "Member 'EndBattleAPI_UpdateMoveGenjiShield::causerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ValidateCombatAreaVolume
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_ValidateCombatAreaVolume final
{
public:
	class FName                                   VolumeName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidate;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ValidateCombatAreaVolume) == 0x000004, "Wrong alignment on EndBattleAPI_ValidateCombatAreaVolume");
static_assert(sizeof(EndBattleAPI_ValidateCombatAreaVolume) == 0x00000C, "Wrong size on EndBattleAPI_ValidateCombatAreaVolume");
static_assert(offsetof(EndBattleAPI_ValidateCombatAreaVolume, VolumeName) == 0x000000, "Member 'EndBattleAPI_ValidateCombatAreaVolume::VolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ValidateCombatAreaVolume, bValidate) == 0x000008, "Member 'EndBattleAPI_ValidateCombatAreaVolume::bValidate' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ValidateCombatAreaVolume, ReturnValue) == 0x000009, "Member 'EndBattleAPI_ValidateCombatAreaVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleCameraActor.BindTargetActor
// 0x0010 (0x0010 - 0x0000)
struct EndBattleCameraActor_BindTargetActor final
{
public:
	class AActor*                                 OwnerActor_0;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor_0;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleCameraActor_BindTargetActor) == 0x000008, "Wrong alignment on EndBattleCameraActor_BindTargetActor");
static_assert(sizeof(EndBattleCameraActor_BindTargetActor) == 0x000010, "Wrong size on EndBattleCameraActor_BindTargetActor");
static_assert(offsetof(EndBattleCameraActor_BindTargetActor, OwnerActor_0) == 0x000000, "Member 'EndBattleCameraActor_BindTargetActor::OwnerActor_0' has a wrong offset!");
static_assert(offsetof(EndBattleCameraActor_BindTargetActor, TargetActor_0) == 0x000008, "Member 'EndBattleCameraActor_BindTargetActor::TargetActor_0' has a wrong offset!");

// Function EndGame.EndCoreListNew.OnWeaponCoreListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCoreListNew_OnWeaponCoreListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCoreListNew_OnWeaponCoreListSetupItem) == 0x000008, "Wrong alignment on EndCoreListNew_OnWeaponCoreListSetupItem");
static_assert(sizeof(EndCoreListNew_OnWeaponCoreListSetupItem) == 0x000010, "Wrong size on EndCoreListNew_OnWeaponCoreListSetupItem");
static_assert(offsetof(EndCoreListNew_OnWeaponCoreListSetupItem, ItemWidget) == 0x000000, "Member 'EndCoreListNew_OnWeaponCoreListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCoreListNew_OnWeaponCoreListSetupItem, CellIndex) == 0x000008, "Member 'EndCoreListNew_OnWeaponCoreListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleCommandHelpMenu.OnCommandHelpListCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndBattleCommandHelpMenu_OnCommandHelpListCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleCommandHelpMenu_OnCommandHelpListCellSetup) == 0x000008, "Wrong alignment on EndBattleCommandHelpMenu_OnCommandHelpListCellSetup");
static_assert(sizeof(EndBattleCommandHelpMenu_OnCommandHelpListCellSetup) == 0x000010, "Wrong size on EndBattleCommandHelpMenu_OnCommandHelpListCellSetup");
static_assert(offsetof(EndBattleCommandHelpMenu_OnCommandHelpListCellSetup, ItemWidget) == 0x000000, "Member 'EndBattleCommandHelpMenu_OnCommandHelpListCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleCommandHelpMenu_OnCommandHelpListCellSetup, ItemIndex) == 0x000008, "Member 'EndBattleCommandHelpMenu_OnCommandHelpListCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleCommandHelpMenu.OnCommandShortcutHelpListCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndBattleCommandHelpMenu_OnCommandShortcutHelpListCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleCommandHelpMenu_OnCommandShortcutHelpListCellSetup) == 0x000008, "Wrong alignment on EndBattleCommandHelpMenu_OnCommandShortcutHelpListCellSetup");
static_assert(sizeof(EndBattleCommandHelpMenu_OnCommandShortcutHelpListCellSetup) == 0x000010, "Wrong size on EndBattleCommandHelpMenu_OnCommandShortcutHelpListCellSetup");
static_assert(offsetof(EndBattleCommandHelpMenu_OnCommandShortcutHelpListCellSetup, ItemWidget) == 0x000000, "Member 'EndBattleCommandHelpMenu_OnCommandShortcutHelpListCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleCommandHelpMenu_OnCommandShortcutHelpListCellSetup, ItemIndex) == 0x000008, "Member 'EndBattleCommandHelpMenu_OnCommandShortcutHelpListCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleDamageSourceActor.GetMoveDir
// 0x000C (0x000C - 0x0000)
struct EndBattleDamageSourceActor_GetMoveDir final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleDamageSourceActor_GetMoveDir) == 0x000004, "Wrong alignment on EndBattleDamageSourceActor_GetMoveDir");
static_assert(sizeof(EndBattleDamageSourceActor_GetMoveDir) == 0x00000C, "Wrong size on EndBattleDamageSourceActor_GetMoveDir");
static_assert(offsetof(EndBattleDamageSourceActor_GetMoveDir, ReturnValue) == 0x000000, "Member 'EndBattleDamageSourceActor_GetMoveDir::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnAbilityCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnAbilityCellPressed final
{
public:
	int32                                         AbilityCellIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnAbilityCellPressed) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnAbilityCellPressed");
static_assert(sizeof(EndMainBattleSettingMenu_OnAbilityCellPressed) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnAbilityCellPressed");
static_assert(offsetof(EndMainBattleSettingMenu_OnAbilityCellPressed, AbilityCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnAbilityCellPressed::AbilityCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnAbilityCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnAbilityCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnAbilityCellSetup) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnAbilityCellSetup");
static_assert(sizeof(EndMainBattleSettingMenu_OnAbilityCellSetup) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnAbilityCellSetup");
static_assert(offsetof(EndMainBattleSettingMenu_OnAbilityCellSetup, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnAbilityCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnAbilityCellSetup, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnAbilityCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnAbilitySelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged final
{
public:
	int32                                         AbilityCellIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged, AbilityCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged::AbilityCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnCategoryCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnCategoryCellPressed final
{
public:
	int32                                         CommandCellIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnCategoryCellPressed) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnCategoryCellPressed");
static_assert(sizeof(EndMainBattleSettingMenu_OnCategoryCellPressed) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnCategoryCellPressed");
static_assert(offsetof(EndMainBattleSettingMenu_OnCategoryCellPressed, CommandCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnCategoryCellPressed::CommandCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnCategoryCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnCategoryCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnCategoryCellSetup) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnCategoryCellSetup");
static_assert(sizeof(EndMainBattleSettingMenu_OnCategoryCellSetup) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnCategoryCellSetup");
static_assert(offsetof(EndMainBattleSettingMenu_OnCategoryCellSetup, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnCategoryCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnCategoryCellSetup, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnCategoryCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnCategorySelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnCategorySelectedIndexChanged final
{
public:
	int32                                         CategoryCellIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnCategorySelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnCategorySelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnCategorySelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnCategorySelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnCategorySelectedIndexChanged, CategoryCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnCategorySelectedIndexChanged::CategoryCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnControlTypeCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnControlTypeCellPressed final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnControlTypeCellPressed) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnControlTypeCellPressed");
static_assert(sizeof(EndMainBattleSettingMenu_OnControlTypeCellPressed) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnControlTypeCellPressed");
static_assert(offsetof(EndMainBattleSettingMenu_OnControlTypeCellPressed, CellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnControlTypeCellPressed::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnControlTypeCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnControlTypeCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnControlTypeCellSetup) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnControlTypeCellSetup");
static_assert(sizeof(EndMainBattleSettingMenu_OnControlTypeCellSetup) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnControlTypeCellSetup");
static_assert(offsetof(EndMainBattleSettingMenu_OnControlTypeCellSetup, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnControlTypeCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnControlTypeCellSetup, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnControlTypeCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnControlTypeSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnControlTypeSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnControlTypeSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnControlTypeSelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnControlTypeSelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnControlTypeSelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnControlTypeSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnControlTypeSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainBattleSettingMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainBattleSettingMenu_OnLeftMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLeftMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainBattleSettingMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainBattleSettingMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLimitCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnLimitCellPressed final
{
public:
	int32                                         LimitCellIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnLimitCellPressed) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnLimitCellPressed");
static_assert(sizeof(EndMainBattleSettingMenu_OnLimitCellPressed) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnLimitCellPressed");
static_assert(offsetof(EndMainBattleSettingMenu_OnLimitCellPressed, LimitCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLimitCellPressed::LimitCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLimitCellSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLimitCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnLimitCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnLimitCellSetup) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnLimitCellSetup");
static_assert(sizeof(EndMainBattleSettingMenu_OnLimitCellSetup) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnLimitCellSetup");
static_assert(offsetof(EndMainBattleSettingMenu_OnLimitCellSetup, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLimitCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnLimitCellSetup, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnLimitCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnSettingCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnSettingCellPressed final
{
public:
	int32                                         SettingCellIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnSettingCellPressed) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnSettingCellPressed");
static_assert(sizeof(EndMainBattleSettingMenu_OnSettingCellPressed) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnSettingCellPressed");
static_assert(offsetof(EndMainBattleSettingMenu_OnSettingCellPressed, SettingCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnSettingCellPressed::SettingCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnSettingCellSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnSettingCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnSettingCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnSettingCellSetup) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnSettingCellSetup");
static_assert(sizeof(EndMainBattleSettingMenu_OnSettingCellSetup) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnSettingCellSetup");
static_assert(offsetof(EndMainBattleSettingMenu_OnSettingCellSetup, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnSettingCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnSettingCellSetup, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnSettingCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleDamageSourceComponentLaser.OnBindEffectFinished
// 0x0008 (0x0008 - 0x0000)
struct EndBattleDamageSourceComponentLaser_OnBindEffectFinished final
{
public:
	class UParticleSystemComponent*               FinishedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleDamageSourceComponentLaser_OnBindEffectFinished) == 0x000008, "Wrong alignment on EndBattleDamageSourceComponentLaser_OnBindEffectFinished");
static_assert(sizeof(EndBattleDamageSourceComponentLaser_OnBindEffectFinished) == 0x000008, "Wrong size on EndBattleDamageSourceComponentLaser_OnBindEffectFinished");
static_assert(offsetof(EndBattleDamageSourceComponentLaser_OnBindEffectFinished, FinishedComponent) == 0x000000, "Member 'EndBattleDamageSourceComponentLaser_OnBindEffectFinished::FinishedComponent' has a wrong offset!");

// Function EndGame.EndMenuEventProgressHandler.OnListMissionMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMenuEventProgressHandler_OnListMissionMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuEventProgressHandler_OnListMissionMeasureItem) == 0x000004, "Wrong alignment on EndMenuEventProgressHandler_OnListMissionMeasureItem");
static_assert(sizeof(EndMenuEventProgressHandler_OnListMissionMeasureItem) == 0x00000C, "Wrong size on EndMenuEventProgressHandler_OnListMissionMeasureItem");
static_assert(offsetof(EndMenuEventProgressHandler_OnListMissionMeasureItem, ItemIndex) == 0x000000, "Member 'EndMenuEventProgressHandler_OnListMissionMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndMenuEventProgressHandler_OnListMissionMeasureItem, ReturnValue) == 0x000004, "Member 'EndMenuEventProgressHandler_OnListMissionMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleDevelop.PrintString
// 0x0030 (0x0030 - 0x0000)
struct EndBattleDevelop_PrintString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 inString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintToScreen;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintToLog;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TextColor;                                         // 0x001C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleDevelop_PrintString) == 0x000008, "Wrong alignment on EndBattleDevelop_PrintString");
static_assert(sizeof(EndBattleDevelop_PrintString) == 0x000030, "Wrong size on EndBattleDevelop_PrintString");
static_assert(offsetof(EndBattleDevelop_PrintString, WorldContextObject) == 0x000000, "Member 'EndBattleDevelop_PrintString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndBattleDevelop_PrintString, inString) == 0x000008, "Member 'EndBattleDevelop_PrintString::inString' has a wrong offset!");
static_assert(offsetof(EndBattleDevelop_PrintString, bPrintToScreen) == 0x000018, "Member 'EndBattleDevelop_PrintString::bPrintToScreen' has a wrong offset!");
static_assert(offsetof(EndBattleDevelop_PrintString, bPrintToLog) == 0x000019, "Member 'EndBattleDevelop_PrintString::bPrintToLog' has a wrong offset!");
static_assert(offsetof(EndBattleDevelop_PrintString, TextColor) == 0x00001C, "Member 'EndBattleDevelop_PrintString::TextColor' has a wrong offset!");
static_assert(offsetof(EndBattleDevelop_PrintString, Duration) == 0x00002C, "Member 'EndBattleDevelop_PrintString::Duration' has a wrong offset!");

// Function EndGame.EndBattleMenu.OnCommandCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndBattleMenu_OnCommandCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleMenu_OnCommandCellSetup) == 0x000008, "Wrong alignment on EndBattleMenu_OnCommandCellSetup");
static_assert(sizeof(EndBattleMenu_OnCommandCellSetup) == 0x000010, "Wrong size on EndBattleMenu_OnCommandCellSetup");
static_assert(offsetof(EndBattleMenu_OnCommandCellSetup, ItemWidget) == 0x000000, "Member 'EndBattleMenu_OnCommandCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleMenu_OnCommandCellSetup, ItemIndex) == 0x000008, "Member 'EndBattleMenu_OnCommandCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleMenu.OnPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleMenu_OnPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleMenu_OnPressedItem) == 0x000004, "Wrong alignment on EndBattleMenu_OnPressedItem");
static_assert(sizeof(EndBattleMenu_OnPressedItem) == 0x000004, "Wrong size on EndBattleMenu_OnPressedItem");
static_assert(offsetof(EndBattleMenu_OnPressedItem, ItemIndex) == 0x000000, "Member 'EndBattleMenu_OnPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleReportMenu.OnReportMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleReportMenu_OnReportMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleReportMenu_OnReportMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleReportMenu_OnReportMenuSelectedIndexChanged");
static_assert(sizeof(EndBattleReportMenu_OnReportMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleReportMenu_OnReportMenuSelectedIndexChanged");
static_assert(offsetof(EndBattleReportMenu_OnReportMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleReportMenu_OnReportMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleReportMenu.OnReportMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleReportMenu_OnReportMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleReportMenu_OnReportMenuSetupItem) == 0x000008, "Wrong alignment on EndBattleReportMenu_OnReportMenuSetupItem");
static_assert(sizeof(EndBattleReportMenu_OnReportMenuSetupItem) == 0x000010, "Wrong size on EndBattleReportMenu_OnReportMenuSetupItem");
static_assert(offsetof(EndBattleReportMenu_OnReportMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleReportMenu_OnReportMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleReportMenu_OnReportMenuSetupItem, CellIndex) == 0x000008, "Member 'EndBattleReportMenu_OnReportMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleReportMenu.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleReportMenu_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleReportMenu_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndBattleReportMenu_OnSortListPressedItem");
static_assert(sizeof(EndBattleReportMenu_OnSortListPressedItem) == 0x000004, "Wrong size on EndBattleReportMenu_OnSortListPressedItem");
static_assert(offsetof(EndBattleReportMenu_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleReportMenu_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleReportMenu.SetReportBgImage
// 0x0018 (0x0018 - 0x0000)
struct EndBattleReportMenu_SetReportBgImage final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleReportMenu_SetReportBgImage) == 0x000008, "Wrong alignment on EndBattleReportMenu_SetReportBgImage");
static_assert(sizeof(EndBattleReportMenu_SetReportBgImage) == 0x000018, "Wrong size on EndBattleReportMenu_SetReportBgImage");
static_assert(offsetof(EndBattleReportMenu_SetReportBgImage, Path) == 0x000000, "Member 'EndBattleReportMenu_SetReportBgImage::Path' has a wrong offset!");

// Function EndGame.EndBattleReportMenu.SetReportImage
// 0x0018 (0x0018 - 0x0000)
struct EndBattleReportMenu_SetReportImage final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleReportMenu_SetReportImage) == 0x000008, "Wrong alignment on EndBattleReportMenu_SetReportImage");
static_assert(sizeof(EndBattleReportMenu_SetReportImage) == 0x000018, "Wrong size on EndBattleReportMenu_SetReportImage");
static_assert(offsetof(EndBattleReportMenu_SetReportImage, Path) == 0x000000, "Member 'EndBattleReportMenu_SetReportImage::Path' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.BattleSceneDelay
// 0x0020 (0x0020 - 0x0000)
struct EndBattleSceneBlueprint_BattleSceneDelay final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_BattleSceneDelay) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_BattleSceneDelay");
static_assert(sizeof(EndBattleSceneBlueprint_BattleSceneDelay) == 0x000020, "Wrong size on EndBattleSceneBlueprint_BattleSceneDelay");
static_assert(offsetof(EndBattleSceneBlueprint_BattleSceneDelay, Duration) == 0x000000, "Member 'EndBattleSceneBlueprint_BattleSceneDelay::Duration' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_BattleSceneDelay, LatentInfo) == 0x000008, "Member 'EndBattleSceneBlueprint_BattleSceneDelay::LatentInfo' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.ChangePhase
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSceneBlueprint_ChangePhase final
{
public:
	int32                                         _phase;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_ChangePhase) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_ChangePhase");
static_assert(sizeof(EndBattleSceneBlueprint_ChangePhase) == 0x000004, "Wrong size on EndBattleSceneBlueprint_ChangePhase");
static_assert(offsetof(EndBattleSceneBlueprint_ChangePhase, _phase) == 0x000000, "Member 'EndBattleSceneBlueprint_ChangePhase::_phase' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.ConvertMultiTalkPlayTriggerID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID final
{
public:
	class FName                                   TalkPlayTriggerID;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID");
static_assert(sizeof(EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID) == 0x000010, "Wrong size on EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID");
static_assert(offsetof(EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID, TalkPlayTriggerID) == 0x000000, "Member 'EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID::TalkPlayTriggerID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID, ReturnValue) == 0x000008, "Member 'EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.DoOnceWithThen
// 0x0028 (0x0028 - 0x0000)
struct EndBattleSceneBlueprint_DoOnceWithThen final
{
public:
	EEndDoOnceCode                                Code;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EEndDoOnceOutCode                             Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSceneBlueprint_DoOnceWithThen) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_DoOnceWithThen");
static_assert(sizeof(EndBattleSceneBlueprint_DoOnceWithThen) == 0x000028, "Wrong size on EndBattleSceneBlueprint_DoOnceWithThen");
static_assert(offsetof(EndBattleSceneBlueprint_DoOnceWithThen, Code) == 0x000000, "Member 'EndBattleSceneBlueprint_DoOnceWithThen::Code' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_DoOnceWithThen, LatentInfo) == 0x000008, "Member 'EndBattleSceneBlueprint_DoOnceWithThen::LatentInfo' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_DoOnceWithThen, Result) == 0x000020, "Member 'EndBattleSceneBlueprint_DoOnceWithThen::Result' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.GetEnemyAIGroupMembers
// 0x0020 (0x0020 - 0x0000)
struct EndBattleSceneBlueprint_GetEnemyAIGroupMembers final
{
public:
	class FName                                   GroupId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreLeader;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_GetEnemyAIGroupMembers) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_GetEnemyAIGroupMembers");
static_assert(sizeof(EndBattleSceneBlueprint_GetEnemyAIGroupMembers) == 0x000020, "Wrong size on EndBattleSceneBlueprint_GetEnemyAIGroupMembers");
static_assert(offsetof(EndBattleSceneBlueprint_GetEnemyAIGroupMembers, GroupId) == 0x000000, "Member 'EndBattleSceneBlueprint_GetEnemyAIGroupMembers::GroupId' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_GetEnemyAIGroupMembers, bIgnoreLeader) == 0x000008, "Member 'EndBattleSceneBlueprint_GetEnemyAIGroupMembers::bIgnoreLeader' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_GetEnemyAIGroupMembers, ReturnValue) == 0x000010, "Member 'EndBattleSceneBlueprint_GetEnemyAIGroupMembers::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnAddStatusChangeID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleSceneBlueprint_OnAddStatusChangeID final
{
public:
	class FName                                   CharaName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           IDs;                                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnAddStatusChangeID) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnAddStatusChangeID");
static_assert(sizeof(EndBattleSceneBlueprint_OnAddStatusChangeID) == 0x000018, "Wrong size on EndBattleSceneBlueprint_OnAddStatusChangeID");
static_assert(offsetof(EndBattleSceneBlueprint_OnAddStatusChangeID, CharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnAddStatusChangeID::CharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnAddStatusChangeID, IDs) == 0x000008, "Member 'EndBattleSceneBlueprint_OnAddStatusChangeID::IDs' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnBattleTalkEnded
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_OnBattleTalkEnded final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnBattleTalkEnded) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnBattleTalkEnded");
static_assert(sizeof(EndBattleSceneBlueprint_OnBattleTalkEnded) == 0x000008, "Wrong size on EndBattleSceneBlueprint_OnBattleTalkEnded");
static_assert(offsetof(EndBattleSceneBlueprint_OnBattleTalkEnded, TalkID) == 0x000000, "Member 'EndBattleSceneBlueprint_OnBattleTalkEnded::TalkID' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnBattleTalkInterrupted
// 0x000C (0x000C - 0x0000)
struct EndBattleSceneBlueprint_OnBattleTalkInterrupted final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleTalkInterruptReason                 SkipReason;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSceneBlueprint_OnBattleTalkInterrupted) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnBattleTalkInterrupted");
static_assert(sizeof(EndBattleSceneBlueprint_OnBattleTalkInterrupted) == 0x00000C, "Wrong size on EndBattleSceneBlueprint_OnBattleTalkInterrupted");
static_assert(offsetof(EndBattleSceneBlueprint_OnBattleTalkInterrupted, TalkID) == 0x000000, "Member 'EndBattleSceneBlueprint_OnBattleTalkInterrupted::TalkID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnBattleTalkInterrupted, SkipReason) == 0x000008, "Member 'EndBattleSceneBlueprint_OnBattleTalkInterrupted::SkipReason' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnBeginCombinationAbility
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_OnBeginCombinationAbility final
{
public:
	class FName                                   CombinationAbilityId;                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnBeginCombinationAbility) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnBeginCombinationAbility");
static_assert(sizeof(EndBattleSceneBlueprint_OnBeginCombinationAbility) == 0x000008, "Wrong size on EndBattleSceneBlueprint_OnBeginCombinationAbility");
static_assert(offsetof(EndBattleSceneBlueprint_OnBeginCombinationAbility, CombinationAbilityId) == 0x000000, "Member 'EndBattleSceneBlueprint_OnBeginCombinationAbility::CombinationAbilityId' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnBeginCutScene
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_OnBeginCutScene final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnBeginCutScene) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnBeginCutScene");
static_assert(sizeof(EndBattleSceneBlueprint_OnBeginCutScene) == 0x000008, "Wrong size on EndBattleSceneBlueprint_OnBeginCutScene");
static_assert(offsetof(EndBattleSceneBlueprint_OnBeginCutScene, CutSceneID) == 0x000000, "Member 'EndBattleSceneBlueprint_OnBeginCutScene::CutSceneID' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnBeginTalkTriggerBoxCollide
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide final
{
public:
	class FName                                   TriggerBoxActorName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollideCharaName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide");
static_assert(sizeof(EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide");
static_assert(offsetof(EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide, TriggerBoxActorName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide::TriggerBoxActorName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide, CollideCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide::CollideCharaName' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnBPMessageFromAIBP
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnBPMessageFromAIBP final
{
public:
	class AEndCharacter*                          SendCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnBPMessageFromAIBP) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnBPMessageFromAIBP");
static_assert(sizeof(EndBattleSceneBlueprint_OnBPMessageFromAIBP) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnBPMessageFromAIBP");
static_assert(offsetof(EndBattleSceneBlueprint_OnBPMessageFromAIBP, SendCharacter) == 0x000000, "Member 'EndBattleSceneBlueprint_OnBPMessageFromAIBP::SendCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnBPMessageFromAIBP, Message) == 0x000008, "Member 'EndBattleSceneBlueprint_OnBPMessageFromAIBP::Message' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCharaPartsBreak
// 0x0024 (0x0024 - 0x0000)
struct EndBattleSceneBlueprint_OnCharaPartsBreak final
{
public:
	class FName                                   CauserCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BrokenCharaName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PartsID;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryID;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryBreakCount;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCharaPartsBreak) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnCharaPartsBreak");
static_assert(sizeof(EndBattleSceneBlueprint_OnCharaPartsBreak) == 0x000024, "Wrong size on EndBattleSceneBlueprint_OnCharaPartsBreak");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsBreak, CauserCharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCharaPartsBreak::CauserCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsBreak, BrokenCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCharaPartsBreak::BrokenCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsBreak, PartsID) == 0x000010, "Member 'EndBattleSceneBlueprint_OnCharaPartsBreak::PartsID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsBreak, CategoryID) == 0x000018, "Member 'EndBattleSceneBlueprint_OnCharaPartsBreak::CategoryID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsBreak, CategoryBreakCount) == 0x000020, "Member 'EndBattleSceneBlueprint_OnCharaPartsBreak::CategoryBreakCount' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCharaPartsDamage
// 0x0028 (0x0028 - 0x0000)
struct EndBattleSceneBlueprint_OnCharaPartsDamage final
{
public:
	class FName                                   CauserCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamagedCharaName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PartsID;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryID;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainHP;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainHPPer;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCharaPartsDamage) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnCharaPartsDamage");
static_assert(sizeof(EndBattleSceneBlueprint_OnCharaPartsDamage) == 0x000028, "Wrong size on EndBattleSceneBlueprint_OnCharaPartsDamage");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, CauserCharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::CauserCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, DamagedCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::DamagedCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, PartsID) == 0x000010, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::PartsID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, CategoryID) == 0x000018, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::CategoryID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, RemainHP) == 0x000020, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::RemainHP' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, RemainHPPer) == 0x000024, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::RemainHPPer' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCharaSpecialStatusChange
// 0x0050 (0x0050 - 0x0000)
struct EndBattleSceneBlueprint_OnCharaSpecialStatusChange final
{
public:
	class FName                                   ownerCharaName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecialStatusChangeID;                             // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StateId;                                           // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Params_0;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParamIDs;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ParamActors;                                       // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnCharaSpecialStatusChange");
static_assert(sizeof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange) == 0x000050, "Wrong size on EndBattleSceneBlueprint_OnCharaSpecialStatusChange");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, ownerCharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::ownerCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, SpecialStatusChangeID) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::SpecialStatusChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, Type) == 0x000010, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::Type' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, StateId) == 0x000014, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::StateId' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, Params_0) == 0x000020, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::Params_0' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, ParamIDs) == 0x000030, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::ParamIDs' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, ParamActors) == 0x000040, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::ParamActors' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCharaSyncAction
// 0x0028 (0x0028 - 0x0000)
struct EndBattleSceneBlueprint_OnCharaSyncAction final
{
public:
	class FName                                   AttackedCharaName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReceivedCharaName;                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSyncActionStateType                 StateType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateCount;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SyncActionID;                                      // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CauserCharaName;                                   // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCharaSyncAction) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnCharaSyncAction");
static_assert(sizeof(EndBattleSceneBlueprint_OnCharaSyncAction) == 0x000028, "Wrong size on EndBattleSceneBlueprint_OnCharaSyncAction");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, AttackedCharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::AttackedCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, ReceivedCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::ReceivedCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, StateType) == 0x000010, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::StateType' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, StateCount) == 0x000014, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::StateCount' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, SyncActionID) == 0x000018, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::SyncActionID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, CauserCharaName) == 0x000020, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::CauserCharaName' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCollideBattleTalkColideBox
// 0x0038 (0x0038 - 0x0000)
struct EndBattleSceneBlueprint_OnCollideBattleTalkColideBox final
{
public:
	class FName                                   ColideBoxName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          OwnerChara;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataObjectBattleDamageSourceAccessor DamageSourceDataObject;                            // 0x0018(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnCollideBattleTalkColideBox");
static_assert(sizeof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox) == 0x000038, "Wrong size on EndBattleSceneBlueprint_OnCollideBattleTalkColideBox");
static_assert(offsetof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox, ColideBoxName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCollideBattleTalkColideBox::ColideBoxName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox, OwnerChara) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCollideBattleTalkColideBox::OwnerChara' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox, DamageSourceID) == 0x000010, "Member 'EndBattleSceneBlueprint_OnCollideBattleTalkColideBox::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox, DamageSourceDataObject) == 0x000018, "Member 'EndBattleSceneBlueprint_OnCollideBattleTalkColideBox::DamageSourceDataObject' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCutSceneMessageInvoke
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_OnCutSceneMessageInvoke final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCutSceneMessageInvoke) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnCutSceneMessageInvoke");
static_assert(sizeof(EndBattleSceneBlueprint_OnCutSceneMessageInvoke) == 0x000008, "Wrong size on EndBattleSceneBlueprint_OnCutSceneMessageInvoke");
static_assert(offsetof(EndBattleSceneBlueprint_OnCutSceneMessageInvoke, Message) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCutSceneMessageInvoke::Message' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEndCombinationAbility
// 0x0014 (0x0014 - 0x0000)
struct EndBattleSceneBlueprint_OnEndCombinationAbility final
{
public:
	class FName                                   CombinationAbilityId;                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hitDamageSource;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   useCharacterName;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEndCombinationAbility) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnEndCombinationAbility");
static_assert(sizeof(EndBattleSceneBlueprint_OnEndCombinationAbility) == 0x000014, "Wrong size on EndBattleSceneBlueprint_OnEndCombinationAbility");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndCombinationAbility, CombinationAbilityId) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEndCombinationAbility::CombinationAbilityId' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndCombinationAbility, hitDamageSource) == 0x000008, "Member 'EndBattleSceneBlueprint_OnEndCombinationAbility::hitDamageSource' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndCombinationAbility, useCharacterName) == 0x00000C, "Member 'EndBattleSceneBlueprint_OnEndCombinationAbility::useCharacterName' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEndCutScene
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_OnEndCutScene final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEndCutScene) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnEndCutScene");
static_assert(sizeof(EndBattleSceneBlueprint_OnEndCutScene) == 0x000008, "Wrong size on EndBattleSceneBlueprint_OnEndCutScene");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndCutScene, CutSceneID) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEndCutScene::CutSceneID' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEndRailCamera
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_OnEndRailCamera final
{
public:
	class FName                                   RailCameraID;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEndRailCamera) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnEndRailCamera");
static_assert(sizeof(EndBattleSceneBlueprint_OnEndRailCamera) == 0x000008, "Wrong size on EndBattleSceneBlueprint_OnEndRailCamera");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndRailCamera, RailCameraID) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEndRailCamera::RailCameraID' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEndTalkTriggerBoxCollide
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide final
{
public:
	class FName                                   TriggerBoxActorName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollideCharaName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide");
static_assert(sizeof(EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide, TriggerBoxActorName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide::TriggerBoxActorName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide, CollideCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide::CollideCharaName' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEntryBattleScene
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnEntryBattleScene final
{
public:
	class FName                                   battleScenenBPName;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   territoryID;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEntryBattleScene) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnEntryBattleScene");
static_assert(sizeof(EndBattleSceneBlueprint_OnEntryBattleScene) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnEntryBattleScene");
static_assert(offsetof(EndBattleSceneBlueprint_OnEntryBattleScene, battleScenenBPName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEntryBattleScene::battleScenenBPName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnEntryBattleScene, territoryID) == 0x000008, "Member 'EndBattleSceneBlueprint_OnEntryBattleScene::territoryID' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEntryDummyBattleScene
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnEntryDummyBattleScene final
{
public:
	class FName                                   battleScenenBPName;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   territoryID;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEntryDummyBattleScene) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnEntryDummyBattleScene");
static_assert(sizeof(EndBattleSceneBlueprint_OnEntryDummyBattleScene) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnEntryDummyBattleScene");
static_assert(offsetof(EndBattleSceneBlueprint_OnEntryDummyBattleScene, battleScenenBPName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEntryDummyBattleScene::battleScenenBPName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnEntryDummyBattleScene, territoryID) == 0x000008, "Member 'EndBattleSceneBlueprint_OnEntryDummyBattleScene::territoryID' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnIncrementBattleCountPerID
// 0x0020 (0x0020 - 0x0000)
struct EndBattleSceneBlueprint_OnIncrementBattleCountPerID final
{
public:
	class FName                                   CauserCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetCharaName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCountLogType                        Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnIncrementBattleCountPerID");
static_assert(sizeof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID) == 0x000020, "Wrong size on EndBattleSceneBlueprint_OnIncrementBattleCountPerID");
static_assert(offsetof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID, CauserCharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnIncrementBattleCountPerID::CauserCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID, TargetCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnIncrementBattleCountPerID::TargetCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID, Type) == 0x000010, "Member 'EndBattleSceneBlueprint_OnIncrementBattleCountPerID::Type' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID, ID) == 0x000014, "Member 'EndBattleSceneBlueprint_OnIncrementBattleCountPerID::ID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID, Count) == 0x00001C, "Member 'EndBattleSceneBlueprint_OnIncrementBattleCountPerID::Count' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnMetaMessage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnMetaMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnMetaMessage) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnMetaMessage");
static_assert(sizeof(EndBattleSceneBlueprint_OnMetaMessage) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnMetaMessage");
static_assert(offsetof(EndBattleSceneBlueprint_OnMetaMessage, InMessage) == 0x000000, "Member 'EndBattleSceneBlueprint_OnMetaMessage::InMessage' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnMotionMessage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnMotionMessage final
{
public:
	class FName                                   CharaName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnMotionMessage) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnMotionMessage");
static_assert(sizeof(EndBattleSceneBlueprint_OnMotionMessage) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnMotionMessage");
static_assert(offsetof(EndBattleSceneBlueprint_OnMotionMessage, CharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnMotionMessage::CharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnMotionMessage, MotionName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnMotionMessage::MotionName' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnReadyBattleTalk
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_OnReadyBattleTalk final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnReadyBattleTalk) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnReadyBattleTalk");
static_assert(sizeof(EndBattleSceneBlueprint_OnReadyBattleTalk) == 0x000008, "Wrong size on EndBattleSceneBlueprint_OnReadyBattleTalk");
static_assert(offsetof(EndBattleSceneBlueprint_OnReadyBattleTalk, territoryID) == 0x000000, "Member 'EndBattleSceneBlueprint_OnReadyBattleTalk::territoryID' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnRemoveStatusChangeID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleSceneBlueprint_OnRemoveStatusChangeID final
{
public:
	class FName                                   CharaName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           IDs;                                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnRemoveStatusChangeID) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnRemoveStatusChangeID");
static_assert(sizeof(EndBattleSceneBlueprint_OnRemoveStatusChangeID) == 0x000018, "Wrong size on EndBattleSceneBlueprint_OnRemoveStatusChangeID");
static_assert(offsetof(EndBattleSceneBlueprint_OnRemoveStatusChangeID, CharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnRemoveStatusChangeID::CharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnRemoveStatusChangeID, IDs) == 0x000008, "Member 'EndBattleSceneBlueprint_OnRemoveStatusChangeID::IDs' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnTakeDamage
// 0x004C (0x004C - 0x0000)
struct EndBattleSceneBlueprint_OnTakeDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CauserCharaName;                                   // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamagedCharaName;                                  // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBind;                                             // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuard;                                            // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   hitBoneName;                                       // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttributeHit;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResistHit;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DamageSourceID;                                    // 0x002C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttributeType                       appendAttribute;                                   // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         justHitRotYaw;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hitPosition;                                       // 0x003C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeal;                                             // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBurst;                                            // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLock;                                             // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSceneBlueprint_OnTakeDamage) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnTakeDamage");
static_assert(sizeof(EndBattleSceneBlueprint_OnTakeDamage) == 0x00004C, "Wrong size on EndBattleSceneBlueprint_OnTakeDamage");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, Damage) == 0x000000, "Member 'EndBattleSceneBlueprint_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, CauserCharaName) == 0x000004, "Member 'EndBattleSceneBlueprint_OnTakeDamage::CauserCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, DamagedCharaName) == 0x00000C, "Member 'EndBattleSceneBlueprint_OnTakeDamage::DamagedCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, AbilityId) == 0x000014, "Member 'EndBattleSceneBlueprint_OnTakeDamage::AbilityId' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bBind) == 0x00001C, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bBind' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bGuard) == 0x00001D, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bGuard' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, hitBoneName) == 0x000020, "Member 'EndBattleSceneBlueprint_OnTakeDamage::hitBoneName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bAttributeHit) == 0x000028, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bAttributeHit' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bResistHit) == 0x000029, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bResistHit' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, DamageSourceID) == 0x00002C, "Member 'EndBattleSceneBlueprint_OnTakeDamage::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, appendAttribute) == 0x000034, "Member 'EndBattleSceneBlueprint_OnTakeDamage::appendAttribute' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, justHitRotYaw) == 0x000038, "Member 'EndBattleSceneBlueprint_OnTakeDamage::justHitRotYaw' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, hitPosition) == 0x00003C, "Member 'EndBattleSceneBlueprint_OnTakeDamage::hitPosition' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bHeal) == 0x000048, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bHeal' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bBurst) == 0x000049, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bBurst' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bLock) == 0x00004A, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bLock' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.RequestAbilityToAI
// 0x0028 (0x0028 - 0x0000)
struct EndBattleSceneBlueprint_RequestAbilityToAI final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_RequestAbilityToAI) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_RequestAbilityToAI");
static_assert(sizeof(EndBattleSceneBlueprint_RequestAbilityToAI) == 0x000028, "Wrong size on EndBattleSceneBlueprint_RequestAbilityToAI");
static_assert(offsetof(EndBattleSceneBlueprint_RequestAbilityToAI, Character) == 0x000000, "Member 'EndBattleSceneBlueprint_RequestAbilityToAI::Character' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_RequestAbilityToAI, AbilityId) == 0x000008, "Member 'EndBattleSceneBlueprint_RequestAbilityToAI::AbilityId' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_RequestAbilityToAI, LatentInfo) == 0x000010, "Member 'EndBattleSceneBlueprint_RequestAbilityToAI::LatentInfo' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.SetCapturableBySummon
// 0x0001 (0x0001 - 0x0000)
struct EndBattleSceneBlueprint_SetCapturableBySummon final
{
public:
	bool                                          capturable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_SetCapturableBySummon) == 0x000001, "Wrong alignment on EndBattleSceneBlueprint_SetCapturableBySummon");
static_assert(sizeof(EndBattleSceneBlueprint_SetCapturableBySummon) == 0x000001, "Wrong size on EndBattleSceneBlueprint_SetCapturableBySummon");
static_assert(offsetof(EndBattleSceneBlueprint_SetCapturableBySummon, capturable) == 0x000000, "Member 'EndBattleSceneBlueprint_SetCapturableBySummon::capturable' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.SetPhase
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSceneBlueprint_SetPhase final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_SetPhase) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_SetPhase");
static_assert(sizeof(EndBattleSceneBlueprint_SetPhase) == 0x000004, "Wrong size on EndBattleSceneBlueprint_SetPhase");
static_assert(offsetof(EndBattleSceneBlueprint_SetPhase, Value) == 0x000000, "Member 'EndBattleSceneBlueprint_SetPhase::Value' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.SwitchCharaState
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_SwitchCharaState final
{
public:
	EEndBattleSceneCharaStateType                 State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharaName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecInState;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSceneBlueprint_SwitchCharaState) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_SwitchCharaState");
static_assert(sizeof(EndBattleSceneBlueprint_SwitchCharaState) == 0x000010, "Wrong size on EndBattleSceneBlueprint_SwitchCharaState");
static_assert(offsetof(EndBattleSceneBlueprint_SwitchCharaState, State) == 0x000000, "Member 'EndBattleSceneBlueprint_SwitchCharaState::State' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_SwitchCharaState, CharaName) == 0x000004, "Member 'EndBattleSceneBlueprint_SwitchCharaState::CharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_SwitchCharaState, bExecInState) == 0x00000C, "Member 'EndBattleSceneBlueprint_SwitchCharaState::bExecInState' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.GetBattleSceneBPName
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_GetBattleSceneBPName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_GetBattleSceneBPName) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_GetBattleSceneBPName");
static_assert(sizeof(EndBattleSceneBlueprint_GetBattleSceneBPName) == 0x000008, "Wrong size on EndBattleSceneBlueprint_GetBattleSceneBPName");
static_assert(offsetof(EndBattleSceneBlueprint_GetBattleSceneBPName, ReturnValue) == 0x000000, "Member 'EndBattleSceneBlueprint_GetBattleSceneBPName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.GetPhase
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSceneBlueprint_GetPhase final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_GetPhase) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_GetPhase");
static_assert(sizeof(EndBattleSceneBlueprint_GetPhase) == 0x000004, "Wrong size on EndBattleSceneBlueprint_GetPhase");
static_assert(offsetof(EndBattleSceneBlueprint_GetPhase, ReturnValue) == 0x000000, "Member 'EndBattleSceneBlueprint_GetPhase::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.GetTerritoryID
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_GetTerritoryID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_GetTerritoryID) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_GetTerritoryID");
static_assert(sizeof(EndBattleSceneBlueprint_GetTerritoryID) == 0x000008, "Wrong size on EndBattleSceneBlueprint_GetTerritoryID");
static_assert(offsetof(EndBattleSceneBlueprint_GetTerritoryID, ReturnValue) == 0x000000, "Member 'EndBattleSceneBlueprint_GetTerritoryID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint_2660_NIBLM_EB2000.GetTotalStalactiteNum
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSceneBlueprint_2660_NIBLM_EB2000_GetTotalStalactiteNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_2660_NIBLM_EB2000_GetTotalStalactiteNum) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_2660_NIBLM_EB2000_GetTotalStalactiteNum");
static_assert(sizeof(EndBattleSceneBlueprint_2660_NIBLM_EB2000_GetTotalStalactiteNum) == 0x000004, "Wrong size on EndBattleSceneBlueprint_2660_NIBLM_EB2000_GetTotalStalactiteNum");
static_assert(offsetof(EndBattleSceneBlueprint_2660_NIBLM_EB2000_GetTotalStalactiteNum, ReturnValue) == 0x000000, "Member 'EndBattleSceneBlueprint_2660_NIBLM_EB2000_GetTotalStalactiteNum::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSceneMineSparkLineComponent.SetOverrideSparkLineDamageSourceID
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneMineSparkLineComponent_SetOverrideSparkLineDamageSourceID final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneMineSparkLineComponent_SetOverrideSparkLineDamageSourceID) == 0x000004, "Wrong alignment on EndBattleSceneMineSparkLineComponent_SetOverrideSparkLineDamageSourceID");
static_assert(sizeof(EndBattleSceneMineSparkLineComponent_SetOverrideSparkLineDamageSourceID) == 0x000008, "Wrong size on EndBattleSceneMineSparkLineComponent_SetOverrideSparkLineDamageSourceID");
static_assert(offsetof(EndBattleSceneMineSparkLineComponent_SetOverrideSparkLineDamageSourceID, DamageSourceID) == 0x000000, "Member 'EndBattleSceneMineSparkLineComponent_SetOverrideSparkLineDamageSourceID::DamageSourceID' has a wrong offset!");

// Function EndGame.EndCutAPI.IsPreview
// 0x0001 (0x0001 - 0x0000)
struct EndCutAPI_IsPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_IsPreview) == 0x000001, "Wrong alignment on EndCutAPI_IsPreview");
static_assert(sizeof(EndCutAPI_IsPreview) == 0x000001, "Wrong size on EndCutAPI_IsPreview");
static_assert(offsetof(EndCutAPI_IsPreview, ReturnValue) == 0x000000, "Member 'EndCutAPI_IsPreview::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAbilityListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndBattleSettingWindow_OnAbilityListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnAbilityListMeasureItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnAbilityListMeasureItem");
static_assert(sizeof(EndBattleSettingWindow_OnAbilityListMeasureItem) == 0x00000C, "Wrong size on EndBattleSettingWindow_OnAbilityListMeasureItem");
static_assert(offsetof(EndBattleSettingWindow_OnAbilityListMeasureItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnAbilityListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnAbilityListMeasureItem, ReturnValue) == 0x000004, "Member 'EndBattleSettingWindow_OnAbilityListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAbilityListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnAbilityListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnAbilityListPressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnAbilityListPressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnAbilityListPressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnAbilityListPressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnAbilityListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnAbilityListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAbilityListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnAbilityListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnAbilityListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnAbilityListSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnAbilityListSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnAbilityListSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnAbilityListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnAbilityListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAbilityListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnAbilityListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnAbilityListSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnAbilityListSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnAbilityListSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnAbilityListSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnAbilityListSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnAbilityListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnAbilityListSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnAbilityListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAirActionAutoSettingPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnAirActionAutoSettingPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnAirActionAutoSettingPressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnAirActionAutoSettingPressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnAirActionAutoSettingPressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnAirActionAutoSettingPressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnAirActionAutoSettingPressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnAirActionAutoSettingPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAirActionAutoSettingSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnAirActionAutoSettingSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnAirActionAutoSettingSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnAirActionAutoSettingSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnAirActionAutoSettingSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnAirActionAutoSettingSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnAirActionAutoSettingSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnAirActionAutoSettingSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAirActionAutoSettingSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnAirActionAutoSettingSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnAirActionAutoSettingSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnAirActionAutoSettingSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnAirActionAutoSettingSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnAirActionAutoSettingSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnAirActionAutoSettingSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnAirActionAutoSettingSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnAirActionAutoSettingSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnAirActionAutoSettingSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAirListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndBattleSettingWindow_OnAirListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnAirListMeasureItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnAirListMeasureItem");
static_assert(sizeof(EndBattleSettingWindow_OnAirListMeasureItem) == 0x00000C, "Wrong size on EndBattleSettingWindow_OnAirListMeasureItem");
static_assert(offsetof(EndBattleSettingWindow_OnAirListMeasureItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnAirListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnAirListMeasureItem, ReturnValue) == 0x000004, "Member 'EndBattleSettingWindow_OnAirListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAirListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnAirListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnAirListPressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnAirListPressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnAirListPressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnAirListPressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnAirListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnAirListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAirListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnAirListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnAirListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnAirListSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnAirListSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnAirListSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnAirListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnAirListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnAirListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnAirListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnAirListSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnAirListSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnAirListSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnAirListSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnAirListSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnAirListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnAirListSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnAirListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnCategoryListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndBattleSettingWindow_OnCategoryListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnCategoryListMeasureItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnCategoryListMeasureItem");
static_assert(sizeof(EndBattleSettingWindow_OnCategoryListMeasureItem) == 0x00000C, "Wrong size on EndBattleSettingWindow_OnCategoryListMeasureItem");
static_assert(offsetof(EndBattleSettingWindow_OnCategoryListMeasureItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnCategoryListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnCategoryListMeasureItem, ReturnValue) == 0x000004, "Member 'EndBattleSettingWindow_OnCategoryListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnCategoryListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnCategoryListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnCategoryListPressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnCategoryListPressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnCategoryListPressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnCategoryListPressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnCategoryListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnCategoryListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnCategoryListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnCategoryListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnCategoryListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnCategoryListSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnCategoryListSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnCategoryListSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnCategoryListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnCategoryListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnCategoryListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnCategoryListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnCategoryListSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnCategoryListSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnCategoryListSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnCategoryListSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnCategoryListSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnCategoryListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnCategoryListSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnCategoryListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndBattleSettingWindow_OnChainActionListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionListMeasureItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnChainActionListMeasureItem");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionListMeasureItem) == 0x00000C, "Wrong size on EndBattleSettingWindow_OnChainActionListMeasureItem");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionListMeasureItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionListMeasureItem, ReturnValue) == 0x000004, "Member 'EndBattleSettingWindow_OnChainActionListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnChainActionListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionListPressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnChainActionListPressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionListPressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnChainActionListPressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnChainActionListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnChainActionListSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionListSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnChainActionListSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnChainActionListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionListSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnChainActionListSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionListSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnChainActionListSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionListSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionListSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnChainActionListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionSetListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndBattleSettingWindow_OnChainActionSetListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionSetListMeasureItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnChainActionSetListMeasureItem");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionSetListMeasureItem) == 0x00000C, "Wrong size on EndBattleSettingWindow_OnChainActionSetListMeasureItem");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionSetListMeasureItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionSetListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionSetListMeasureItem, ReturnValue) == 0x000004, "Member 'EndBattleSettingWindow_OnChainActionSetListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionSetListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnChainActionSetListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionSetListPressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnChainActionSetListPressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionSetListPressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnChainActionSetListPressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionSetListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionSetListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionSetListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnChainActionSetListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionSetListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnChainActionSetListSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionSetListSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnChainActionSetListSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionSetListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionSetListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionSetListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnChainActionSetListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionSetListSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnChainActionSetListSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionSetListSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnChainActionSetListSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionSetListSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionSetListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionSetListSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnChainActionSetListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionTypePressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnChainActionTypePressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionTypePressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnChainActionTypePressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionTypePressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnChainActionTypePressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionTypePressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionTypePressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionTypeSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnChainActionTypeSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionTypeSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnChainActionTypeSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionTypeSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnChainActionTypeSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionTypeSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionTypeSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnChainActionTypeSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnChainActionTypeSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnChainActionTypeSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnChainActionTypeSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnChainActionTypeSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnChainActionTypeSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionTypeSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnChainActionTypeSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnChainActionTypeSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnChainActionTypeSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnInfoListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnInfoListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnInfoListPressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnInfoListPressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnInfoListPressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnInfoListPressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnInfoListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnInfoListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnInfoListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnInfoListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnInfoListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnInfoListSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnInfoListSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnInfoListSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnInfoListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnInfoListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnInfoListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnInfoListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnInfoListSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnInfoListSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnInfoListSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnInfoListSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnInfoListSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnInfoListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnInfoListSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnInfoListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnLandListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndBattleSettingWindow_OnLandListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnLandListMeasureItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnLandListMeasureItem");
static_assert(sizeof(EndBattleSettingWindow_OnLandListMeasureItem) == 0x00000C, "Wrong size on EndBattleSettingWindow_OnLandListMeasureItem");
static_assert(offsetof(EndBattleSettingWindow_OnLandListMeasureItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnLandListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnLandListMeasureItem, ReturnValue) == 0x000004, "Member 'EndBattleSettingWindow_OnLandListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnLandListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnLandListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnLandListPressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnLandListPressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnLandListPressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnLandListPressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnLandListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnLandListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnLandListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnLandListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnLandListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnLandListSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnLandListSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnLandListSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnLandListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnLandListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnLandListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnLandListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnLandListSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnLandListSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnLandListSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnLandListSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnLandListSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnLandListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnLandListSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnLandListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnLimitListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndBattleSettingWindow_OnLimitListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnLimitListMeasureItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnLimitListMeasureItem");
static_assert(sizeof(EndBattleSettingWindow_OnLimitListMeasureItem) == 0x00000C, "Wrong size on EndBattleSettingWindow_OnLimitListMeasureItem");
static_assert(offsetof(EndBattleSettingWindow_OnLimitListMeasureItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnLimitListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnLimitListMeasureItem, ReturnValue) == 0x000004, "Member 'EndBattleSettingWindow_OnLimitListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnLimitListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnLimitListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnLimitListPressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnLimitListPressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnLimitListPressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnLimitListPressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnLimitListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnLimitListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnLimitListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnLimitListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnLimitListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnLimitListSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnLimitListSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnLimitListSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnLimitListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnLimitListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnLimitListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnLimitListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnLimitListSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnLimitListSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnLimitListSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnLimitListSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnLimitListSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnLimitListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnLimitListSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnLimitListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnMemberButtonHover
// 0x0001 (0x0001 - 0x0000)
struct EndBattleSettingWindow_OnMemberButtonHover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnMemberButtonHover) == 0x000001, "Wrong alignment on EndBattleSettingWindow_OnMemberButtonHover");
static_assert(sizeof(EndBattleSettingWindow_OnMemberButtonHover) == 0x000001, "Wrong size on EndBattleSettingWindow_OnMemberButtonHover");
static_assert(offsetof(EndBattleSettingWindow_OnMemberButtonHover, ReturnValue) == 0x000000, "Member 'EndBattleSettingWindow_OnMemberButtonHover::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnMemberButtonUnhover
// 0x0001 (0x0001 - 0x0000)
struct EndBattleSettingWindow_OnMemberButtonUnhover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnMemberButtonUnhover) == 0x000001, "Wrong alignment on EndBattleSettingWindow_OnMemberButtonUnhover");
static_assert(sizeof(EndBattleSettingWindow_OnMemberButtonUnhover) == 0x000001, "Wrong size on EndBattleSettingWindow_OnMemberButtonUnhover");
static_assert(offsetof(EndBattleSettingWindow_OnMemberButtonUnhover, ReturnValue) == 0x000000, "Member 'EndBattleSettingWindow_OnMemberButtonUnhover::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnMemberListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndBattleSettingWindow_OnMemberListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnMemberListMeasureItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnMemberListMeasureItem");
static_assert(sizeof(EndBattleSettingWindow_OnMemberListMeasureItem) == 0x00000C, "Wrong size on EndBattleSettingWindow_OnMemberListMeasureItem");
static_assert(offsetof(EndBattleSettingWindow_OnMemberListMeasureItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnMemberListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnMemberListMeasureItem, ReturnValue) == 0x000004, "Member 'EndBattleSettingWindow_OnMemberListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnMemberListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnMemberListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnMemberListPressedItem) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnMemberListPressedItem");
static_assert(sizeof(EndBattleSettingWindow_OnMemberListPressedItem) == 0x000004, "Wrong size on EndBattleSettingWindow_OnMemberListPressedItem");
static_assert(offsetof(EndBattleSettingWindow_OnMemberListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnMemberListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnMemberListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSettingWindow_OnMemberListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSettingWindow_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleSettingWindow_OnMemberListSelectedIndexChanged");
static_assert(sizeof(EndBattleSettingWindow_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleSettingWindow_OnMemberListSelectedIndexChanged");
static_assert(offsetof(EndBattleSettingWindow_OnMemberListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleSettingWindow_OnMemberListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleSettingWindow.OnMemberListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSettingWindow_OnMemberListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSettingWindow_OnMemberListSetupItem) == 0x000008, "Wrong alignment on EndBattleSettingWindow_OnMemberListSetupItem");
static_assert(sizeof(EndBattleSettingWindow_OnMemberListSetupItem) == 0x000010, "Wrong size on EndBattleSettingWindow_OnMemberListSetupItem");
static_assert(offsetof(EndBattleSettingWindow_OnMemberListSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleSettingWindow_OnMemberListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleSettingWindow_OnMemberListSetupItem, CellIndex) == 0x000008, "Member 'EndBattleSettingWindow_OnMemberListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleTalkCharacterComponent.OnNotify
// 0x0020 (0x0020 - 0x0000)
struct EndBattleTalkCharacterComponent_OnNotify final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          OwnerChara;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleTalkCharacterComponent_OnNotify) == 0x000008, "Wrong alignment on EndBattleTalkCharacterComponent_OnNotify");
static_assert(sizeof(EndBattleTalkCharacterComponent_OnNotify) == 0x000020, "Wrong size on EndBattleTalkCharacterComponent_OnNotify");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotify, AnimName) == 0x000000, "Member 'EndBattleTalkCharacterComponent_OnNotify::AnimName' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotify, SoundName) == 0x000008, "Member 'EndBattleTalkCharacterComponent_OnNotify::SoundName' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotify, OwnerChara) == 0x000010, "Member 'EndBattleTalkCharacterComponent_OnNotify::OwnerChara' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotify, ReturnValue) == 0x000018, "Member 'EndBattleTalkCharacterComponent_OnNotify::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleTalkCharacterComponent.OnNotifyWithAbility
// 0x0050 (0x0050 - 0x0000)
struct EndBattleTalkCharacterComponent_OnNotifyWithAbility final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          OwnerChara;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityId;                                         // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataObjectBattleAbilityAccessor    dataObjectBattleAbility;                           // 0x0028(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishBlow;                                       // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleTalkCharacterComponent_OnNotifyWithAbility) == 0x000008, "Wrong alignment on EndBattleTalkCharacterComponent_OnNotifyWithAbility");
static_assert(sizeof(EndBattleTalkCharacterComponent_OnNotifyWithAbility) == 0x000050, "Wrong size on EndBattleTalkCharacterComponent_OnNotifyWithAbility");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, AnimName) == 0x000000, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::AnimName' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, SoundName) == 0x000008, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::SoundName' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, OwnerChara) == 0x000010, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::OwnerChara' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, targetChara) == 0x000018, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::targetChara' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, AbilityId) == 0x000020, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::AbilityId' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, dataObjectBattleAbility) == 0x000028, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::dataObjectBattleAbility' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, bFinishBlow) == 0x000048, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::bFinishBlow' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, ReturnValue) == 0x000049, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBorderSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndBorderSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorderSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on EndBorderSlot_SetHorizontalAlignment");
static_assert(sizeof(EndBorderSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on EndBorderSlot_SetHorizontalAlignment");
static_assert(offsetof(EndBorderSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'EndBorderSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function EndGame.EndBorderSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndBorderSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorderSlot_SetPadding) == 0x000004, "Wrong alignment on EndBorderSlot_SetPadding");
static_assert(sizeof(EndBorderSlot_SetPadding) == 0x000010, "Wrong size on EndBorderSlot_SetPadding");
static_assert(offsetof(EndBorderSlot_SetPadding, InPadding) == 0x000000, "Member 'EndBorderSlot_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndBorderSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndBorderSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorderSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on EndBorderSlot_SetVerticalAlignment");
static_assert(sizeof(EndBorderSlot_SetVerticalAlignment) == 0x000001, "Wrong size on EndBorderSlot_SetVerticalAlignment");
static_assert(offsetof(EndBorderSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'EndBorderSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function EndGame.EndBattleTalkOnEndBattleActor.OnEndBattle
// 0x0018 (0x0018 - 0x0000)
struct EndBattleTalkOnEndBattleActor_OnEndBattle final
{
public:
	TArray<class FName>                           TerritoryIDList;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EndBattleExitBattleSceneType                  BattleExitType;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleTalkOnEndBattleActor_OnEndBattle) == 0x000008, "Wrong alignment on EndBattleTalkOnEndBattleActor_OnEndBattle");
static_assert(sizeof(EndBattleTalkOnEndBattleActor_OnEndBattle) == 0x000018, "Wrong size on EndBattleTalkOnEndBattleActor_OnEndBattle");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_OnEndBattle, TerritoryIDList) == 0x000000, "Member 'EndBattleTalkOnEndBattleActor_OnEndBattle::TerritoryIDList' has a wrong offset!");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_OnEndBattle, BattleExitType) == 0x000010, "Member 'EndBattleTalkOnEndBattleActor_OnEndBattle::BattleExitType' has a wrong offset!");

// Function EndGame.EndBattleTalkOnEndBattleActor.PlayVoice
// 0x0014 (0x0014 - 0x0000)
struct EndBattleTalkOnEndBattleActor_PlayVoice final
{
public:
	bool                                          bUnuseDefaultDelay;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideDelayMinSeconds;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideDelayMaxSeconds;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceSetId;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleTalkOnEndBattleActor_PlayVoice) == 0x000004, "Wrong alignment on EndBattleTalkOnEndBattleActor_PlayVoice");
static_assert(sizeof(EndBattleTalkOnEndBattleActor_PlayVoice) == 0x000014, "Wrong size on EndBattleTalkOnEndBattleActor_PlayVoice");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_PlayVoice, bUnuseDefaultDelay) == 0x000000, "Member 'EndBattleTalkOnEndBattleActor_PlayVoice::bUnuseDefaultDelay' has a wrong offset!");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_PlayVoice, OverrideDelayMinSeconds) == 0x000004, "Member 'EndBattleTalkOnEndBattleActor_PlayVoice::OverrideDelayMinSeconds' has a wrong offset!");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_PlayVoice, OverrideDelayMaxSeconds) == 0x000008, "Member 'EndBattleTalkOnEndBattleActor_PlayVoice::OverrideDelayMaxSeconds' has a wrong offset!");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_PlayVoice, VoiceSetId) == 0x00000C, "Member 'EndBattleTalkOnEndBattleActor_PlayVoice::VoiceSetId' has a wrong offset!");

// Function EndGame.EndCommonAPI.RandomFloatInRange
// 0x000C (0x000C - 0x0000)
struct EndCommonAPI_RandomFloatInRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCommonAPI_RandomFloatInRange) == 0x000004, "Wrong alignment on EndCommonAPI_RandomFloatInRange");
static_assert(sizeof(EndCommonAPI_RandomFloatInRange) == 0x00000C, "Wrong size on EndCommonAPI_RandomFloatInRange");
static_assert(offsetof(EndCommonAPI_RandomFloatInRange, Min) == 0x000000, "Member 'EndCommonAPI_RandomFloatInRange::Min' has a wrong offset!");
static_assert(offsetof(EndCommonAPI_RandomFloatInRange, Max) == 0x000004, "Member 'EndCommonAPI_RandomFloatInRange::Max' has a wrong offset!");
static_assert(offsetof(EndCommonAPI_RandomFloatInRange, ReturnValue) == 0x000008, "Member 'EndCommonAPI_RandomFloatInRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndCommonAPI.RandomIntegerInRange
// 0x000C (0x000C - 0x0000)
struct EndCommonAPI_RandomIntegerInRange final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCommonAPI_RandomIntegerInRange) == 0x000004, "Wrong alignment on EndCommonAPI_RandomIntegerInRange");
static_assert(sizeof(EndCommonAPI_RandomIntegerInRange) == 0x00000C, "Wrong size on EndCommonAPI_RandomIntegerInRange");
static_assert(offsetof(EndCommonAPI_RandomIntegerInRange, Min) == 0x000000, "Member 'EndCommonAPI_RandomIntegerInRange::Min' has a wrong offset!");
static_assert(offsetof(EndCommonAPI_RandomIntegerInRange, Max) == 0x000004, "Member 'EndCommonAPI_RandomIntegerInRange::Max' has a wrong offset!");
static_assert(offsetof(EndCommonAPI_RandomIntegerInRange, ReturnValue) == 0x000008, "Member 'EndCommonAPI_RandomIntegerInRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndProgressBar.SetFillColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndProgressBar_SetFillColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndProgressBar_SetFillColorAndOpacity) == 0x000004, "Wrong alignment on EndProgressBar_SetFillColorAndOpacity");
static_assert(sizeof(EndProgressBar_SetFillColorAndOpacity) == 0x000010, "Wrong size on EndProgressBar_SetFillColorAndOpacity");
static_assert(offsetof(EndProgressBar_SetFillColorAndOpacity, InColor) == 0x000000, "Member 'EndProgressBar_SetFillColorAndOpacity::InColor' has a wrong offset!");

// Function EndGame.EndProgressBar.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct EndProgressBar_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndProgressBar_SetPercent) == 0x000004, "Wrong alignment on EndProgressBar_SetPercent");
static_assert(sizeof(EndProgressBar_SetPercent) == 0x000004, "Wrong size on EndProgressBar_SetPercent");
static_assert(offsetof(EndProgressBar_SetPercent, InPercent) == 0x000000, "Member 'EndProgressBar_SetPercent::InPercent' has a wrong offset!");

// Function EndGame.EndProgressBar.SetPreviewColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndProgressBar_SetPreviewColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndProgressBar_SetPreviewColorAndOpacity) == 0x000004, "Wrong alignment on EndProgressBar_SetPreviewColorAndOpacity");
static_assert(sizeof(EndProgressBar_SetPreviewColorAndOpacity) == 0x000010, "Wrong size on EndProgressBar_SetPreviewColorAndOpacity");
static_assert(offsetof(EndProgressBar_SetPreviewColorAndOpacity, InColor) == 0x000000, "Member 'EndProgressBar_SetPreviewColorAndOpacity::InColor' has a wrong offset!");

// Function EndGame.EndProgressBar.SetPreviewPercent
// 0x0004 (0x0004 - 0x0000)
struct EndProgressBar_SetPreviewPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndProgressBar_SetPreviewPercent) == 0x000004, "Wrong alignment on EndProgressBar_SetPreviewPercent");
static_assert(sizeof(EndProgressBar_SetPreviewPercent) == 0x000004, "Wrong size on EndProgressBar_SetPreviewPercent");
static_assert(offsetof(EndProgressBar_SetPreviewPercent, InPercent) == 0x000000, "Member 'EndProgressBar_SetPreviewPercent::InPercent' has a wrong offset!");

// Function EndGame.EndBikeDamageSourceComponentLaser.OnBindEffectFinished
// 0x0008 (0x0008 - 0x0000)
struct EndBikeDamageSourceComponentLaser_OnBindEffectFinished final
{
public:
	class UParticleSystemComponent*               FinishedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeDamageSourceComponentLaser_OnBindEffectFinished) == 0x000008, "Wrong alignment on EndBikeDamageSourceComponentLaser_OnBindEffectFinished");
static_assert(sizeof(EndBikeDamageSourceComponentLaser_OnBindEffectFinished) == 0x000008, "Wrong size on EndBikeDamageSourceComponentLaser_OnBindEffectFinished");
static_assert(offsetof(EndBikeDamageSourceComponentLaser_OnBindEffectFinished, FinishedComponent) == 0x000000, "Member 'EndBikeDamageSourceComponentLaser_OnBindEffectFinished::FinishedComponent' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnLeftMenuIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainMagicMenu_OnLeftMenuIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMagicMenu_OnLeftMenuIndexChanged) == 0x000004, "Wrong alignment on EndMainMagicMenu_OnLeftMenuIndexChanged");
static_assert(sizeof(EndMainMagicMenu_OnLeftMenuIndexChanged) == 0x000004, "Wrong size on EndMainMagicMenu_OnLeftMenuIndexChanged");
static_assert(offsetof(EndMainMagicMenu_OnLeftMenuIndexChanged, CellIndex) == 0x000000, "Member 'EndMainMagicMenu_OnLeftMenuIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainMagicMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMagicMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainMagicMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainMagicMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainMagicMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainMagicMenu_OnLeftMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainMagicMenu_OnLeftMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainMagicMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMagicMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainMagicMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainMagicMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainMagicMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainMagicMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainMagicMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMagicMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainMagicMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnMagicMenuIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainMagicMenu_OnMagicMenuIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMagicMenu_OnMagicMenuIndexChanged) == 0x000004, "Wrong alignment on EndMainMagicMenu_OnMagicMenuIndexChanged");
static_assert(sizeof(EndMainMagicMenu_OnMagicMenuIndexChanged) == 0x000004, "Wrong size on EndMainMagicMenu_OnMagicMenuIndexChanged");
static_assert(offsetof(EndMainMagicMenu_OnMagicMenuIndexChanged, CellIndex) == 0x000000, "Member 'EndMainMagicMenu_OnMagicMenuIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnMagicMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainMagicMenu_OnMagicMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMagicMenu_OnMagicMenuPressedItem) == 0x000004, "Wrong alignment on EndMainMagicMenu_OnMagicMenuPressedItem");
static_assert(sizeof(EndMainMagicMenu_OnMagicMenuPressedItem) == 0x000004, "Wrong size on EndMainMagicMenu_OnMagicMenuPressedItem");
static_assert(offsetof(EndMainMagicMenu_OnMagicMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainMagicMenu_OnMagicMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnMagicMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainMagicMenu_OnMagicMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMagicMenu_OnMagicMenuSetupItem) == 0x000008, "Wrong alignment on EndMainMagicMenu_OnMagicMenuSetupItem");
static_assert(sizeof(EndMainMagicMenu_OnMagicMenuSetupItem) == 0x000010, "Wrong size on EndMainMagicMenu_OnMagicMenuSetupItem");
static_assert(offsetof(EndMainMagicMenu_OnMagicMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainMagicMenu_OnMagicMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMagicMenu_OnMagicMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainMagicMenu_OnMagicMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBikeTriggerBox.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct EndBikeTriggerBox_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeTriggerBox_OnOverlapBegin) == 0x000008, "Wrong alignment on EndBikeTriggerBox_OnOverlapBegin");
static_assert(sizeof(EndBikeTriggerBox_OnOverlapBegin) == 0x000010, "Wrong size on EndBikeTriggerBox_OnOverlapBegin");
static_assert(offsetof(EndBikeTriggerBox_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'EndBikeTriggerBox_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EndBikeTriggerBox_OnOverlapBegin, OtherActor) == 0x000008, "Member 'EndBikeTriggerBox_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function EndGame.EndBikeTriggerBox.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct EndBikeTriggerBox_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeTriggerBox_OnOverlapEnd) == 0x000008, "Wrong alignment on EndBikeTriggerBox_OnOverlapEnd");
static_assert(sizeof(EndBikeTriggerBox_OnOverlapEnd) == 0x000010, "Wrong size on EndBikeTriggerBox_OnOverlapEnd");
static_assert(offsetof(EndBikeTriggerBox_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'EndBikeTriggerBox_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EndBikeTriggerBox_OnOverlapEnd, OtherActor) == 0x000008, "Member 'EndBikeTriggerBox_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function EndGame.EndBikeWidgetGbikePauseMenuHandler.OnCommandCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndBikeWidgetGbikePauseMenuHandler_OnCommandCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBikeWidgetGbikePauseMenuHandler_OnCommandCellSetup) == 0x000008, "Wrong alignment on EndBikeWidgetGbikePauseMenuHandler_OnCommandCellSetup");
static_assert(sizeof(EndBikeWidgetGbikePauseMenuHandler_OnCommandCellSetup) == 0x000010, "Wrong size on EndBikeWidgetGbikePauseMenuHandler_OnCommandCellSetup");
static_assert(offsetof(EndBikeWidgetGbikePauseMenuHandler_OnCommandCellSetup, ItemWidget) == 0x000000, "Member 'EndBikeWidgetGbikePauseMenuHandler_OnCommandCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBikeWidgetGbikePauseMenuHandler_OnCommandCellSetup, ItemIndex) == 0x000008, "Member 'EndBikeWidgetGbikePauseMenuHandler_OnCommandCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndBikeWidgetGbikePauseMenuHandler.OnCommandClicked
// 0x0004 (0x0004 - 0x0000)
struct EndBikeWidgetGbikePauseMenuHandler_OnCommandClicked final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeWidgetGbikePauseMenuHandler_OnCommandClicked) == 0x000004, "Wrong alignment on EndBikeWidgetGbikePauseMenuHandler_OnCommandClicked");
static_assert(sizeof(EndBikeWidgetGbikePauseMenuHandler_OnCommandClicked) == 0x000004, "Wrong size on EndBikeWidgetGbikePauseMenuHandler_OnCommandClicked");
static_assert(offsetof(EndBikeWidgetGbikePauseMenuHandler_OnCommandClicked, ItemIndex) == 0x000000, "Member 'EndBikeWidgetGbikePauseMenuHandler_OnCommandClicked::ItemIndex' has a wrong offset!");

// Function EndGame.EndBillboard.MakeImagePathFromAssetName
// 0x0020 (0x0020 - 0x0000)
struct EndBillboard_MakeImagePathFromAssetName final
{
public:
	class FName                                   InAssetName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBillboard_MakeImagePathFromAssetName) == 0x000008, "Wrong alignment on EndBillboard_MakeImagePathFromAssetName");
static_assert(sizeof(EndBillboard_MakeImagePathFromAssetName) == 0x000020, "Wrong size on EndBillboard_MakeImagePathFromAssetName");
static_assert(offsetof(EndBillboard_MakeImagePathFromAssetName, InAssetName) == 0x000000, "Member 'EndBillboard_MakeImagePathFromAssetName::InAssetName' has a wrong offset!");
static_assert(offsetof(EndBillboard_MakeImagePathFromAssetName, ReturnValue) == 0x000008, "Member 'EndBillboard_MakeImagePathFromAssetName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBillboard.MakeImagePathFromAssetNameString
// 0x0028 (0x0028 - 0x0000)
struct EndBillboard_MakeImagePathFromAssetNameString final
{
public:
	class FString                                 InAssetName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBillboard_MakeImagePathFromAssetNameString) == 0x000008, "Wrong alignment on EndBillboard_MakeImagePathFromAssetNameString");
static_assert(sizeof(EndBillboard_MakeImagePathFromAssetNameString) == 0x000028, "Wrong size on EndBillboard_MakeImagePathFromAssetNameString");
static_assert(offsetof(EndBillboard_MakeImagePathFromAssetNameString, InAssetName) == 0x000000, "Member 'EndBillboard_MakeImagePathFromAssetNameString::InAssetName' has a wrong offset!");
static_assert(offsetof(EndBillboard_MakeImagePathFromAssetNameString, ReturnValue) == 0x000010, "Member 'EndBillboard_MakeImagePathFromAssetNameString::ReturnValue' has a wrong offset!");

// Function EndGame.EndBillboard.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndBillboard_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBillboard_SetBlendMode) == 0x000001, "Wrong alignment on EndBillboard_SetBlendMode");
static_assert(sizeof(EndBillboard_SetBlendMode) == 0x000001, "Wrong size on EndBillboard_SetBlendMode");
static_assert(offsetof(EndBillboard_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndBillboard_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndBillboard.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndBillboard_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBillboard_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndBillboard_SetColorAndOpacity");
static_assert(sizeof(EndBillboard_SetColorAndOpacity) == 0x000010, "Wrong size on EndBillboard_SetColorAndOpacity");
static_assert(offsetof(EndBillboard_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndBillboard_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndBillboard.SetImageAssetName
// 0x000C (0x000C - 0x0000)
struct EndBillboard_SetImageAssetName final
{
public:
	class FName                                   InAssetName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRewind;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBillboard_SetImageAssetName) == 0x000004, "Wrong alignment on EndBillboard_SetImageAssetName");
static_assert(sizeof(EndBillboard_SetImageAssetName) == 0x00000C, "Wrong size on EndBillboard_SetImageAssetName");
static_assert(offsetof(EndBillboard_SetImageAssetName, InAssetName) == 0x000000, "Member 'EndBillboard_SetImageAssetName::InAssetName' has a wrong offset!");
static_assert(offsetof(EndBillboard_SetImageAssetName, bInRewind) == 0x000008, "Member 'EndBillboard_SetImageAssetName::bInRewind' has a wrong offset!");
static_assert(offsetof(EndBillboard_SetImageAssetName, bInLoop) == 0x000009, "Member 'EndBillboard_SetImageAssetName::bInLoop' has a wrong offset!");

// Function EndGame.EndBillboard.SetImageAssetNameString
// 0x0018 (0x0018 - 0x0000)
struct EndBillboard_SetImageAssetNameString final
{
public:
	class FString                                 InAssetName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRewind;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBillboard_SetImageAssetNameString) == 0x000008, "Wrong alignment on EndBillboard_SetImageAssetNameString");
static_assert(sizeof(EndBillboard_SetImageAssetNameString) == 0x000018, "Wrong size on EndBillboard_SetImageAssetNameString");
static_assert(offsetof(EndBillboard_SetImageAssetNameString, InAssetName) == 0x000000, "Member 'EndBillboard_SetImageAssetNameString::InAssetName' has a wrong offset!");
static_assert(offsetof(EndBillboard_SetImageAssetNameString, bInRewind) == 0x000010, "Member 'EndBillboard_SetImageAssetNameString::bInRewind' has a wrong offset!");
static_assert(offsetof(EndBillboard_SetImageAssetNameString, bInLoop) == 0x000011, "Member 'EndBillboard_SetImageAssetNameString::bInLoop' has a wrong offset!");

// Function EndGame.EndBillboard.SetImagePath
// 0x0020 (0x0020 - 0x0000)
struct EndBillboard_SetImagePath final
{
public:
	struct FSoftObjectPath                        InImagePath;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRewind;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBillboard_SetImagePath) == 0x000008, "Wrong alignment on EndBillboard_SetImagePath");
static_assert(sizeof(EndBillboard_SetImagePath) == 0x000020, "Wrong size on EndBillboard_SetImagePath");
static_assert(offsetof(EndBillboard_SetImagePath, InImagePath) == 0x000000, "Member 'EndBillboard_SetImagePath::InImagePath' has a wrong offset!");
static_assert(offsetof(EndBillboard_SetImagePath, bInRewind) == 0x000018, "Member 'EndBillboard_SetImagePath::bInRewind' has a wrong offset!");
static_assert(offsetof(EndBillboard_SetImagePath, bInLoop) == 0x000019, "Member 'EndBillboard_SetImagePath::bInLoop' has a wrong offset!");

// Function EndGame.EndBillboard.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndBillboard_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBillboard_SetOpacity) == 0x000004, "Wrong alignment on EndBillboard_SetOpacity");
static_assert(sizeof(EndBillboard_SetOpacity) == 0x000004, "Wrong size on EndBillboard_SetOpacity");
static_assert(offsetof(EndBillboard_SetOpacity, InOpacity) == 0x000000, "Member 'EndBillboard_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.BranchAnd
// 0x0003 (0x0003 - 0x0000)
struct EndBlueprintUtility_BranchAnd final
{
public:
	bool                                          Flag1;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag2;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_BranchAnd) == 0x000001, "Wrong alignment on EndBlueprintUtility_BranchAnd");
static_assert(sizeof(EndBlueprintUtility_BranchAnd) == 0x000003, "Wrong size on EndBlueprintUtility_BranchAnd");
static_assert(offsetof(EndBlueprintUtility_BranchAnd, Flag1) == 0x000000, "Member 'EndBlueprintUtility_BranchAnd::Flag1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_BranchAnd, Flag2) == 0x000001, "Member 'EndBlueprintUtility_BranchAnd::Flag2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_BranchAnd, OutSignal) == 0x000002, "Member 'EndBlueprintUtility_BranchAnd::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.BranchOR
// 0x0003 (0x0003 - 0x0000)
struct EndBlueprintUtility_BranchOR final
{
public:
	bool                                          Flag1;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag2;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_BranchOR) == 0x000001, "Wrong alignment on EndBlueprintUtility_BranchOR");
static_assert(sizeof(EndBlueprintUtility_BranchOR) == 0x000003, "Wrong size on EndBlueprintUtility_BranchOR");
static_assert(offsetof(EndBlueprintUtility_BranchOR, Flag1) == 0x000000, "Member 'EndBlueprintUtility_BranchOR::Flag1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_BranchOR, Flag2) == 0x000001, "Member 'EndBlueprintUtility_BranchOR::Flag2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_BranchOR, OutSignal) == 0x000002, "Member 'EndBlueprintUtility_BranchOR::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.BranchXOR
// 0x0003 (0x0003 - 0x0000)
struct EndBlueprintUtility_BranchXOR final
{
public:
	bool                                          Flag1;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag2;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_BranchXOR) == 0x000001, "Wrong alignment on EndBlueprintUtility_BranchXOR");
static_assert(sizeof(EndBlueprintUtility_BranchXOR) == 0x000003, "Wrong size on EndBlueprintUtility_BranchXOR");
static_assert(offsetof(EndBlueprintUtility_BranchXOR, Flag1) == 0x000000, "Member 'EndBlueprintUtility_BranchXOR::Flag1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_BranchXOR, Flag2) == 0x000001, "Member 'EndBlueprintUtility_BranchXOR::Flag2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_BranchXOR, OutSignal) == 0x000002, "Member 'EndBlueprintUtility_BranchXOR::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.DisableInputDebug
// 0x0008 (0x0008 - 0x0000)
struct EndBlueprintUtility_DisableInputDebug final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_DisableInputDebug) == 0x000008, "Wrong alignment on EndBlueprintUtility_DisableInputDebug");
static_assert(sizeof(EndBlueprintUtility_DisableInputDebug) == 0x000008, "Wrong size on EndBlueprintUtility_DisableInputDebug");
static_assert(offsetof(EndBlueprintUtility_DisableInputDebug, Target) == 0x000000, "Member 'EndBlueprintUtility_DisableInputDebug::Target' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.DivEqualFloat
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_DivEqualFloat final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_DivEqualFloat) == 0x000004, "Wrong alignment on EndBlueprintUtility_DivEqualFloat");
static_assert(sizeof(EndBlueprintUtility_DivEqualFloat) == 0x00000C, "Wrong size on EndBlueprintUtility_DivEqualFloat");
static_assert(offsetof(EndBlueprintUtility_DivEqualFloat, ValueA) == 0x000000, "Member 'EndBlueprintUtility_DivEqualFloat::ValueA' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_DivEqualFloat, ValueB) == 0x000004, "Member 'EndBlueprintUtility_DivEqualFloat::ValueB' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_DivEqualFloat, ReturnValue) == 0x000008, "Member 'EndBlueprintUtility_DivEqualFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.DivEqualInterger
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_DivEqualInterger final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_DivEqualInterger) == 0x000004, "Wrong alignment on EndBlueprintUtility_DivEqualInterger");
static_assert(sizeof(EndBlueprintUtility_DivEqualInterger) == 0x00000C, "Wrong size on EndBlueprintUtility_DivEqualInterger");
static_assert(offsetof(EndBlueprintUtility_DivEqualInterger, ValueA) == 0x000000, "Member 'EndBlueprintUtility_DivEqualInterger::ValueA' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_DivEqualInterger, ValueB) == 0x000004, "Member 'EndBlueprintUtility_DivEqualInterger::ValueB' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_DivEqualInterger, ReturnValue) == 0x000008, "Member 'EndBlueprintUtility_DivEqualInterger::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.EnableInputDebug
// 0x0008 (0x0008 - 0x0000)
struct EndBlueprintUtility_EnableInputDebug final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_EnableInputDebug) == 0x000008, "Wrong alignment on EndBlueprintUtility_EnableInputDebug");
static_assert(sizeof(EndBlueprintUtility_EnableInputDebug) == 0x000008, "Wrong size on EndBlueprintUtility_EnableInputDebug");
static_assert(offsetof(EndBlueprintUtility_EnableInputDebug, Target) == 0x000000, "Member 'EndBlueprintUtility_EnableInputDebug::Target' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.FloatCmpBranch
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_FloatCmpBranch final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 Cmp;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_FloatCmpBranch) == 0x000004, "Wrong alignment on EndBlueprintUtility_FloatCmpBranch");
static_assert(sizeof(EndBlueprintUtility_FloatCmpBranch) == 0x00000C, "Wrong size on EndBlueprintUtility_FloatCmpBranch");
static_assert(offsetof(EndBlueprintUtility_FloatCmpBranch, ValueA) == 0x000000, "Member 'EndBlueprintUtility_FloatCmpBranch::ValueA' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_FloatCmpBranch, ValueB) == 0x000004, "Member 'EndBlueprintUtility_FloatCmpBranch::ValueB' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_FloatCmpBranch, Cmp) == 0x000008, "Member 'EndBlueprintUtility_FloatCmpBranch::Cmp' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_FloatCmpBranch, OutSignal) == 0x000009, "Member 'EndBlueprintUtility_FloatCmpBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.GetRatioSwitch
// 0x0018 (0x0018 - 0x0000)
struct EndBlueprintUtility_GetRatioSwitch final
{
public:
	TArray<int32>                                 inArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_GetRatioSwitch) == 0x000008, "Wrong alignment on EndBlueprintUtility_GetRatioSwitch");
static_assert(sizeof(EndBlueprintUtility_GetRatioSwitch) == 0x000018, "Wrong size on EndBlueprintUtility_GetRatioSwitch");
static_assert(offsetof(EndBlueprintUtility_GetRatioSwitch, inArray) == 0x000000, "Member 'EndBlueprintUtility_GetRatioSwitch::inArray' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetRatioSwitch, ReturnValue) == 0x000010, "Member 'EndBlueprintUtility_GetRatioSwitch::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.GetRatioSwitch2
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_GetRatioSwitch2 final
{
public:
	int32                                         Switch0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Switch1;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_GetRatioSwitch2) == 0x000004, "Wrong alignment on EndBlueprintUtility_GetRatioSwitch2");
static_assert(sizeof(EndBlueprintUtility_GetRatioSwitch2) == 0x00000C, "Wrong size on EndBlueprintUtility_GetRatioSwitch2");
static_assert(offsetof(EndBlueprintUtility_GetRatioSwitch2, Switch0) == 0x000000, "Member 'EndBlueprintUtility_GetRatioSwitch2::Switch0' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetRatioSwitch2, Switch1) == 0x000004, "Member 'EndBlueprintUtility_GetRatioSwitch2::Switch1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetRatioSwitch2, ReturnValue) == 0x000008, "Member 'EndBlueprintUtility_GetRatioSwitch2::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.GetRatioSwitch3
// 0x0010 (0x0010 - 0x0000)
struct EndBlueprintUtility_GetRatioSwitch3 final
{
public:
	int32                                         Switch0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Switch1;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Switch2;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_GetRatioSwitch3) == 0x000004, "Wrong alignment on EndBlueprintUtility_GetRatioSwitch3");
static_assert(sizeof(EndBlueprintUtility_GetRatioSwitch3) == 0x000010, "Wrong size on EndBlueprintUtility_GetRatioSwitch3");
static_assert(offsetof(EndBlueprintUtility_GetRatioSwitch3, Switch0) == 0x000000, "Member 'EndBlueprintUtility_GetRatioSwitch3::Switch0' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetRatioSwitch3, Switch1) == 0x000004, "Member 'EndBlueprintUtility_GetRatioSwitch3::Switch1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetRatioSwitch3, Switch2) == 0x000008, "Member 'EndBlueprintUtility_GetRatioSwitch3::Switch2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetRatioSwitch3, ReturnValue) == 0x00000C, "Member 'EndBlueprintUtility_GetRatioSwitch3::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.GetVectorRange
// 0x0024 (0x0024 - 0x0000)
struct EndBlueprintUtility_GetVectorRange final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreX;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreY;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreZ;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_GetVectorRange) == 0x000004, "Wrong alignment on EndBlueprintUtility_GetVectorRange");
static_assert(sizeof(EndBlueprintUtility_GetVectorRange) == 0x000024, "Wrong size on EndBlueprintUtility_GetVectorRange");
static_assert(offsetof(EndBlueprintUtility_GetVectorRange, X) == 0x000000, "Member 'EndBlueprintUtility_GetVectorRange::X' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetVectorRange, Y) == 0x000004, "Member 'EndBlueprintUtility_GetVectorRange::Y' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetVectorRange, Z) == 0x000008, "Member 'EndBlueprintUtility_GetVectorRange::Z' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetVectorRange, IgnoreX) == 0x00000C, "Member 'EndBlueprintUtility_GetVectorRange::IgnoreX' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetVectorRange, IgnoreY) == 0x000010, "Member 'EndBlueprintUtility_GetVectorRange::IgnoreY' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetVectorRange, IgnoreZ) == 0x000014, "Member 'EndBlueprintUtility_GetVectorRange::IgnoreZ' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_GetVectorRange, ReturnValue) == 0x000018, "Member 'EndBlueprintUtility_GetVectorRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.IntCmpBranch
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_IntCmpBranch final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 Cmp;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_IntCmpBranch) == 0x000004, "Wrong alignment on EndBlueprintUtility_IntCmpBranch");
static_assert(sizeof(EndBlueprintUtility_IntCmpBranch) == 0x00000C, "Wrong size on EndBlueprintUtility_IntCmpBranch");
static_assert(offsetof(EndBlueprintUtility_IntCmpBranch, ValueA) == 0x000000, "Member 'EndBlueprintUtility_IntCmpBranch::ValueA' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_IntCmpBranch, ValueB) == 0x000004, "Member 'EndBlueprintUtility_IntCmpBranch::ValueB' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_IntCmpBranch, Cmp) == 0x000008, "Member 'EndBlueprintUtility_IntCmpBranch::Cmp' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_IntCmpBranch, OutSignal) == 0x000009, "Member 'EndBlueprintUtility_IntCmpBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.MinusEqualFloat
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_MinusEqualFloat final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_MinusEqualFloat) == 0x000004, "Wrong alignment on EndBlueprintUtility_MinusEqualFloat");
static_assert(sizeof(EndBlueprintUtility_MinusEqualFloat) == 0x00000C, "Wrong size on EndBlueprintUtility_MinusEqualFloat");
static_assert(offsetof(EndBlueprintUtility_MinusEqualFloat, ValueA) == 0x000000, "Member 'EndBlueprintUtility_MinusEqualFloat::ValueA' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_MinusEqualFloat, ValueB) == 0x000004, "Member 'EndBlueprintUtility_MinusEqualFloat::ValueB' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_MinusEqualFloat, ReturnValue) == 0x000008, "Member 'EndBlueprintUtility_MinusEqualFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.MinusEqualInterger
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_MinusEqualInterger final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_MinusEqualInterger) == 0x000004, "Wrong alignment on EndBlueprintUtility_MinusEqualInterger");
static_assert(sizeof(EndBlueprintUtility_MinusEqualInterger) == 0x00000C, "Wrong size on EndBlueprintUtility_MinusEqualInterger");
static_assert(offsetof(EndBlueprintUtility_MinusEqualInterger, ValueA) == 0x000000, "Member 'EndBlueprintUtility_MinusEqualInterger::ValueA' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_MinusEqualInterger, ValueB) == 0x000004, "Member 'EndBlueprintUtility_MinusEqualInterger::ValueB' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_MinusEqualInterger, ReturnValue) == 0x000008, "Member 'EndBlueprintUtility_MinusEqualInterger::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.MulEqualFloat
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_MulEqualFloat final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_MulEqualFloat) == 0x000004, "Wrong alignment on EndBlueprintUtility_MulEqualFloat");
static_assert(sizeof(EndBlueprintUtility_MulEqualFloat) == 0x00000C, "Wrong size on EndBlueprintUtility_MulEqualFloat");
static_assert(offsetof(EndBlueprintUtility_MulEqualFloat, ValueA) == 0x000000, "Member 'EndBlueprintUtility_MulEqualFloat::ValueA' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_MulEqualFloat, ValueB) == 0x000004, "Member 'EndBlueprintUtility_MulEqualFloat::ValueB' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_MulEqualFloat, ReturnValue) == 0x000008, "Member 'EndBlueprintUtility_MulEqualFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.MulEqualInterger
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_MulEqualInterger final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_MulEqualInterger) == 0x000004, "Wrong alignment on EndBlueprintUtility_MulEqualInterger");
static_assert(sizeof(EndBlueprintUtility_MulEqualInterger) == 0x00000C, "Wrong size on EndBlueprintUtility_MulEqualInterger");
static_assert(offsetof(EndBlueprintUtility_MulEqualInterger, ValueA) == 0x000000, "Member 'EndBlueprintUtility_MulEqualInterger::ValueA' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_MulEqualInterger, ValueB) == 0x000004, "Member 'EndBlueprintUtility_MulEqualInterger::ValueB' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_MulEqualInterger, ReturnValue) == 0x000008, "Member 'EndBlueprintUtility_MulEqualInterger::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.PlusEqualFloat
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_PlusEqualFloat final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_PlusEqualFloat) == 0x000004, "Wrong alignment on EndBlueprintUtility_PlusEqualFloat");
static_assert(sizeof(EndBlueprintUtility_PlusEqualFloat) == 0x00000C, "Wrong size on EndBlueprintUtility_PlusEqualFloat");
static_assert(offsetof(EndBlueprintUtility_PlusEqualFloat, ValueA) == 0x000000, "Member 'EndBlueprintUtility_PlusEqualFloat::ValueA' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_PlusEqualFloat, ValueB) == 0x000004, "Member 'EndBlueprintUtility_PlusEqualFloat::ValueB' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_PlusEqualFloat, ReturnValue) == 0x000008, "Member 'EndBlueprintUtility_PlusEqualFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.PlusEqualInterger
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_PlusEqualInterger final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_PlusEqualInterger) == 0x000004, "Wrong alignment on EndBlueprintUtility_PlusEqualInterger");
static_assert(sizeof(EndBlueprintUtility_PlusEqualInterger) == 0x00000C, "Wrong size on EndBlueprintUtility_PlusEqualInterger");
static_assert(offsetof(EndBlueprintUtility_PlusEqualInterger, ValueA) == 0x000000, "Member 'EndBlueprintUtility_PlusEqualInterger::ValueA' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_PlusEqualInterger, ValueB) == 0x000004, "Member 'EndBlueprintUtility_PlusEqualInterger::ValueB' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_PlusEqualInterger, ReturnValue) == 0x000008, "Member 'EndBlueprintUtility_PlusEqualInterger::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.RangeSwitch2
// 0x0018 (0x0018 - 0x0000)
struct EndBlueprintUtility_RangeSwitch2 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min1;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max1;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min2;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max2;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainEqual;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch2Other                            OutSignal;                                         // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_RangeSwitch2) == 0x000004, "Wrong alignment on EndBlueprintUtility_RangeSwitch2");
static_assert(sizeof(EndBlueprintUtility_RangeSwitch2) == 0x000018, "Wrong size on EndBlueprintUtility_RangeSwitch2");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch2, Value) == 0x000000, "Member 'EndBlueprintUtility_RangeSwitch2::Value' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch2, Min1) == 0x000004, "Member 'EndBlueprintUtility_RangeSwitch2::Min1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch2, Max1) == 0x000008, "Member 'EndBlueprintUtility_RangeSwitch2::Max1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch2, Min2) == 0x00000C, "Member 'EndBlueprintUtility_RangeSwitch2::Min2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch2, Max2) == 0x000010, "Member 'EndBlueprintUtility_RangeSwitch2::Max2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch2, bContainEqual) == 0x000014, "Member 'EndBlueprintUtility_RangeSwitch2::bContainEqual' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch2, OutSignal) == 0x000015, "Member 'EndBlueprintUtility_RangeSwitch2::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.RangeSwitch3
// 0x0020 (0x0020 - 0x0000)
struct EndBlueprintUtility_RangeSwitch3 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min1;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max1;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min2;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max2;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min3;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max3;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainEqual;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch3Other                            OutSignal;                                         // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_RangeSwitch3) == 0x000004, "Wrong alignment on EndBlueprintUtility_RangeSwitch3");
static_assert(sizeof(EndBlueprintUtility_RangeSwitch3) == 0x000020, "Wrong size on EndBlueprintUtility_RangeSwitch3");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch3, Value) == 0x000000, "Member 'EndBlueprintUtility_RangeSwitch3::Value' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch3, Min1) == 0x000004, "Member 'EndBlueprintUtility_RangeSwitch3::Min1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch3, Max1) == 0x000008, "Member 'EndBlueprintUtility_RangeSwitch3::Max1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch3, Min2) == 0x00000C, "Member 'EndBlueprintUtility_RangeSwitch3::Min2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch3, Max2) == 0x000010, "Member 'EndBlueprintUtility_RangeSwitch3::Max2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch3, Min3) == 0x000014, "Member 'EndBlueprintUtility_RangeSwitch3::Min3' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch3, Max3) == 0x000018, "Member 'EndBlueprintUtility_RangeSwitch3::Max3' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch3, bContainEqual) == 0x00001C, "Member 'EndBlueprintUtility_RangeSwitch3::bContainEqual' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch3, OutSignal) == 0x00001D, "Member 'EndBlueprintUtility_RangeSwitch3::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.RangeSwitch4
// 0x0028 (0x0028 - 0x0000)
struct EndBlueprintUtility_RangeSwitch4 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min1;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max1;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min2;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max2;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min3;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max3;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min4;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max4;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainEqual;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch4Other                            OutSignal;                                         // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_RangeSwitch4) == 0x000004, "Wrong alignment on EndBlueprintUtility_RangeSwitch4");
static_assert(sizeof(EndBlueprintUtility_RangeSwitch4) == 0x000028, "Wrong size on EndBlueprintUtility_RangeSwitch4");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, Value) == 0x000000, "Member 'EndBlueprintUtility_RangeSwitch4::Value' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, Min1) == 0x000004, "Member 'EndBlueprintUtility_RangeSwitch4::Min1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, Max1) == 0x000008, "Member 'EndBlueprintUtility_RangeSwitch4::Max1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, Min2) == 0x00000C, "Member 'EndBlueprintUtility_RangeSwitch4::Min2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, Max2) == 0x000010, "Member 'EndBlueprintUtility_RangeSwitch4::Max2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, Min3) == 0x000014, "Member 'EndBlueprintUtility_RangeSwitch4::Min3' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, Max3) == 0x000018, "Member 'EndBlueprintUtility_RangeSwitch4::Max3' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, Min4) == 0x00001C, "Member 'EndBlueprintUtility_RangeSwitch4::Min4' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, Max4) == 0x000020, "Member 'EndBlueprintUtility_RangeSwitch4::Max4' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, bContainEqual) == 0x000024, "Member 'EndBlueprintUtility_RangeSwitch4::bContainEqual' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RangeSwitch4, OutSignal) == 0x000025, "Member 'EndBlueprintUtility_RangeSwitch4::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.RatioBranch2
// 0x000C (0x000C - 0x0000)
struct EndBlueprintUtility_RatioBranch2 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch2                                 OutSignal;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_RatioBranch2) == 0x000004, "Wrong alignment on EndBlueprintUtility_RatioBranch2");
static_assert(sizeof(EndBlueprintUtility_RatioBranch2) == 0x00000C, "Wrong size on EndBlueprintUtility_RatioBranch2");
static_assert(offsetof(EndBlueprintUtility_RatioBranch2, Case1) == 0x000000, "Member 'EndBlueprintUtility_RatioBranch2::Case1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch2, Case2) == 0x000004, "Member 'EndBlueprintUtility_RatioBranch2::Case2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch2, OutSignal) == 0x000008, "Member 'EndBlueprintUtility_RatioBranch2::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.RatioBranch3
// 0x0010 (0x0010 - 0x0000)
struct EndBlueprintUtility_RatioBranch3 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch3                                 OutSignal;                                         // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_RatioBranch3) == 0x000004, "Wrong alignment on EndBlueprintUtility_RatioBranch3");
static_assert(sizeof(EndBlueprintUtility_RatioBranch3) == 0x000010, "Wrong size on EndBlueprintUtility_RatioBranch3");
static_assert(offsetof(EndBlueprintUtility_RatioBranch3, Case1) == 0x000000, "Member 'EndBlueprintUtility_RatioBranch3::Case1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch3, Case2) == 0x000004, "Member 'EndBlueprintUtility_RatioBranch3::Case2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch3, Case3) == 0x000008, "Member 'EndBlueprintUtility_RatioBranch3::Case3' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch3, OutSignal) == 0x00000C, "Member 'EndBlueprintUtility_RatioBranch3::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.RatioBranch4
// 0x0014 (0x0014 - 0x0000)
struct EndBlueprintUtility_RatioBranch4 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case4;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch4                                 OutSignal;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_RatioBranch4) == 0x000004, "Wrong alignment on EndBlueprintUtility_RatioBranch4");
static_assert(sizeof(EndBlueprintUtility_RatioBranch4) == 0x000014, "Wrong size on EndBlueprintUtility_RatioBranch4");
static_assert(offsetof(EndBlueprintUtility_RatioBranch4, Case1) == 0x000000, "Member 'EndBlueprintUtility_RatioBranch4::Case1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch4, Case2) == 0x000004, "Member 'EndBlueprintUtility_RatioBranch4::Case2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch4, Case3) == 0x000008, "Member 'EndBlueprintUtility_RatioBranch4::Case3' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch4, Case4) == 0x00000C, "Member 'EndBlueprintUtility_RatioBranch4::Case4' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch4, OutSignal) == 0x000010, "Member 'EndBlueprintUtility_RatioBranch4::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.RatioBranch5
// 0x0018 (0x0018 - 0x0000)
struct EndBlueprintUtility_RatioBranch5 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case4;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case5;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch5                                 OutSignal;                                         // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_RatioBranch5) == 0x000004, "Wrong alignment on EndBlueprintUtility_RatioBranch5");
static_assert(sizeof(EndBlueprintUtility_RatioBranch5) == 0x000018, "Wrong size on EndBlueprintUtility_RatioBranch5");
static_assert(offsetof(EndBlueprintUtility_RatioBranch5, Case1) == 0x000000, "Member 'EndBlueprintUtility_RatioBranch5::Case1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch5, Case2) == 0x000004, "Member 'EndBlueprintUtility_RatioBranch5::Case2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch5, Case3) == 0x000008, "Member 'EndBlueprintUtility_RatioBranch5::Case3' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch5, Case4) == 0x00000C, "Member 'EndBlueprintUtility_RatioBranch5::Case4' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch5, Case5) == 0x000010, "Member 'EndBlueprintUtility_RatioBranch5::Case5' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch5, OutSignal) == 0x000014, "Member 'EndBlueprintUtility_RatioBranch5::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.RatioBranch6
// 0x001C (0x001C - 0x0000)
struct EndBlueprintUtility_RatioBranch6 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case4;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case5;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case6;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch6                                 OutSignal;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_RatioBranch6) == 0x000004, "Wrong alignment on EndBlueprintUtility_RatioBranch6");
static_assert(sizeof(EndBlueprintUtility_RatioBranch6) == 0x00001C, "Wrong size on EndBlueprintUtility_RatioBranch6");
static_assert(offsetof(EndBlueprintUtility_RatioBranch6, Case1) == 0x000000, "Member 'EndBlueprintUtility_RatioBranch6::Case1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch6, Case2) == 0x000004, "Member 'EndBlueprintUtility_RatioBranch6::Case2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch6, Case3) == 0x000008, "Member 'EndBlueprintUtility_RatioBranch6::Case3' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch6, Case4) == 0x00000C, "Member 'EndBlueprintUtility_RatioBranch6::Case4' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch6, Case5) == 0x000010, "Member 'EndBlueprintUtility_RatioBranch6::Case5' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch6, Case6) == 0x000014, "Member 'EndBlueprintUtility_RatioBranch6::Case6' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch6, OutSignal) == 0x000018, "Member 'EndBlueprintUtility_RatioBranch6::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.RatioBranch7
// 0x0020 (0x0020 - 0x0000)
struct EndBlueprintUtility_RatioBranch7 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case4;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case5;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case6;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case7;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch7                                 OutSignal;                                         // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_RatioBranch7) == 0x000004, "Wrong alignment on EndBlueprintUtility_RatioBranch7");
static_assert(sizeof(EndBlueprintUtility_RatioBranch7) == 0x000020, "Wrong size on EndBlueprintUtility_RatioBranch7");
static_assert(offsetof(EndBlueprintUtility_RatioBranch7, Case1) == 0x000000, "Member 'EndBlueprintUtility_RatioBranch7::Case1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch7, Case2) == 0x000004, "Member 'EndBlueprintUtility_RatioBranch7::Case2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch7, Case3) == 0x000008, "Member 'EndBlueprintUtility_RatioBranch7::Case3' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch7, Case4) == 0x00000C, "Member 'EndBlueprintUtility_RatioBranch7::Case4' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch7, Case5) == 0x000010, "Member 'EndBlueprintUtility_RatioBranch7::Case5' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch7, Case6) == 0x000014, "Member 'EndBlueprintUtility_RatioBranch7::Case6' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch7, Case7) == 0x000018, "Member 'EndBlueprintUtility_RatioBranch7::Case7' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch7, OutSignal) == 0x00001C, "Member 'EndBlueprintUtility_RatioBranch7::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.RatioBranch8
// 0x0024 (0x0024 - 0x0000)
struct EndBlueprintUtility_RatioBranch8 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case4;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case5;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case6;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case7;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case8;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch8                                 OutSignal;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBlueprintUtility_RatioBranch8) == 0x000004, "Wrong alignment on EndBlueprintUtility_RatioBranch8");
static_assert(sizeof(EndBlueprintUtility_RatioBranch8) == 0x000024, "Wrong size on EndBlueprintUtility_RatioBranch8");
static_assert(offsetof(EndBlueprintUtility_RatioBranch8, Case1) == 0x000000, "Member 'EndBlueprintUtility_RatioBranch8::Case1' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch8, Case2) == 0x000004, "Member 'EndBlueprintUtility_RatioBranch8::Case2' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch8, Case3) == 0x000008, "Member 'EndBlueprintUtility_RatioBranch8::Case3' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch8, Case4) == 0x00000C, "Member 'EndBlueprintUtility_RatioBranch8::Case4' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch8, Case5) == 0x000010, "Member 'EndBlueprintUtility_RatioBranch8::Case5' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch8, Case6) == 0x000014, "Member 'EndBlueprintUtility_RatioBranch8::Case6' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch8, Case7) == 0x000018, "Member 'EndBlueprintUtility_RatioBranch8::Case7' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch8, Case8) == 0x00001C, "Member 'EndBlueprintUtility_RatioBranch8::Case8' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_RatioBranch8, OutSignal) == 0x000020, "Member 'EndBlueprintUtility_RatioBranch8::OutSignal' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.VecToPitch
// 0x0010 (0x0010 - 0x0000)
struct EndBlueprintUtility_VecToPitch final
{
public:
	struct FVector                                InVec;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_VecToPitch) == 0x000004, "Wrong alignment on EndBlueprintUtility_VecToPitch");
static_assert(sizeof(EndBlueprintUtility_VecToPitch) == 0x000010, "Wrong size on EndBlueprintUtility_VecToPitch");
static_assert(offsetof(EndBlueprintUtility_VecToPitch, InVec) == 0x000000, "Member 'EndBlueprintUtility_VecToPitch::InVec' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_VecToPitch, ReturnValue) == 0x00000C, "Member 'EndBlueprintUtility_VecToPitch::ReturnValue' has a wrong offset!");

// Function EndGame.EndBlueprintUtility.VecToYaw
// 0x0010 (0x0010 - 0x0000)
struct EndBlueprintUtility_VecToYaw final
{
public:
	struct FVector                                InVec;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBlueprintUtility_VecToYaw) == 0x000004, "Wrong alignment on EndBlueprintUtility_VecToYaw");
static_assert(sizeof(EndBlueprintUtility_VecToYaw) == 0x000010, "Wrong size on EndBlueprintUtility_VecToYaw");
static_assert(offsetof(EndBlueprintUtility_VecToYaw, InVec) == 0x000000, "Member 'EndBlueprintUtility_VecToYaw::InVec' has a wrong offset!");
static_assert(offsetof(EndBlueprintUtility_VecToYaw, ReturnValue) == 0x00000C, "Member 'EndBlueprintUtility_VecToYaw::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameLiftLeverActor.SetLiftRootActor
// 0x0008 (0x0008 - 0x0000)
struct EndCrashBoxMiniGameLiftLeverActor_SetLiftRootActor final
{
public:
	class AEndCrashBoxMiniGameLiftRootActor*      LiftRootActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameLiftLeverActor_SetLiftRootActor) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameLiftLeverActor_SetLiftRootActor");
static_assert(sizeof(EndCrashBoxMiniGameLiftLeverActor_SetLiftRootActor) == 0x000008, "Wrong size on EndCrashBoxMiniGameLiftLeverActor_SetLiftRootActor");
static_assert(offsetof(EndCrashBoxMiniGameLiftLeverActor_SetLiftRootActor, LiftRootActor) == 0x000000, "Member 'EndCrashBoxMiniGameLiftLeverActor_SetLiftRootActor::LiftRootActor' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameBoxActor.ApplyBoxType
// 0x0001 (0x0001 - 0x0000)
struct EndCrashBoxMiniGameBoxActor_ApplyBoxType final
{
public:
	EEndCrashBoxMiniGameBoxType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameBoxActor_ApplyBoxType) == 0x000001, "Wrong alignment on EndCrashBoxMiniGameBoxActor_ApplyBoxType");
static_assert(sizeof(EndCrashBoxMiniGameBoxActor_ApplyBoxType) == 0x000001, "Wrong size on EndCrashBoxMiniGameBoxActor_ApplyBoxType");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_ApplyBoxType, ReturnValue) == 0x000000, "Member 'EndCrashBoxMiniGameBoxActor_ApplyBoxType::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameBoxActor.GetBoxType
// 0x0001 (0x0001 - 0x0000)
struct EndCrashBoxMiniGameBoxActor_GetBoxType final
{
public:
	EEndCrashBoxMiniGameBoxType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameBoxActor_GetBoxType) == 0x000001, "Wrong alignment on EndCrashBoxMiniGameBoxActor_GetBoxType");
static_assert(sizeof(EndCrashBoxMiniGameBoxActor_GetBoxType) == 0x000001, "Wrong size on EndCrashBoxMiniGameBoxActor_GetBoxType");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_GetBoxType, ReturnValue) == 0x000000, "Member 'EndCrashBoxMiniGameBoxActor_GetBoxType::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameBoxActor.IsElectricBox
// 0x0001 (0x0001 - 0x0000)
struct EndCrashBoxMiniGameBoxActor_IsElectricBox final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameBoxActor_IsElectricBox) == 0x000001, "Wrong alignment on EndCrashBoxMiniGameBoxActor_IsElectricBox");
static_assert(sizeof(EndCrashBoxMiniGameBoxActor_IsElectricBox) == 0x000001, "Wrong size on EndCrashBoxMiniGameBoxActor_IsElectricBox");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_IsElectricBox, ReturnValue) == 0x000000, "Member 'EndCrashBoxMiniGameBoxActor_IsElectricBox::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameBoxActor.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndCrashBoxMiniGameBoxActor_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCrashBoxMiniGameBoxActor_OnComponentHit) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameBoxActor_OnComponentHit");
static_assert(sizeof(EndCrashBoxMiniGameBoxActor_OnComponentHit) == 0x0000B8, "Wrong size on EndCrashBoxMiniGameBoxActor_OnComponentHit");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_OnComponentHit, HitComponent) == 0x000000, "Member 'EndCrashBoxMiniGameBoxActor_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_OnComponentHit, OtherActor) == 0x000008, "Member 'EndCrashBoxMiniGameBoxActor_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_OnComponentHit, OtherComp) == 0x000010, "Member 'EndCrashBoxMiniGameBoxActor_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndCrashBoxMiniGameBoxActor_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_OnComponentHit, Hit) == 0x000024, "Member 'EndCrashBoxMiniGameBoxActor_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameBoxActor.SetEffectDummyPoint
// 0x0010 (0x0010 - 0x0000)
struct EndCrashBoxMiniGameBoxActor_SetEffectDummyPoint final
{
public:
	EEndCrashBoxMiniGameEffect                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameBoxActor_SetEffectDummyPoint) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameBoxActor_SetEffectDummyPoint");
static_assert(sizeof(EndCrashBoxMiniGameBoxActor_SetEffectDummyPoint) == 0x000010, "Wrong size on EndCrashBoxMiniGameBoxActor_SetEffectDummyPoint");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_SetEffectDummyPoint, Type) == 0x000000, "Member 'EndCrashBoxMiniGameBoxActor_SetEffectDummyPoint::Type' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_SetEffectDummyPoint, Component) == 0x000008, "Member 'EndCrashBoxMiniGameBoxActor_SetEffectDummyPoint::Component' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameBoxActor.SetImpulseRadius
// 0x0004 (0x0004 - 0x0000)
struct EndCrashBoxMiniGameBoxActor_SetImpulseRadius final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameBoxActor_SetImpulseRadius) == 0x000004, "Wrong alignment on EndCrashBoxMiniGameBoxActor_SetImpulseRadius");
static_assert(sizeof(EndCrashBoxMiniGameBoxActor_SetImpulseRadius) == 0x000004, "Wrong size on EndCrashBoxMiniGameBoxActor_SetImpulseRadius");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_SetImpulseRadius, InRadius) == 0x000000, "Member 'EndCrashBoxMiniGameBoxActor_SetImpulseRadius::InRadius' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameBoxActor.SetMaterialParameter
// 0x0008 (0x0008 - 0x0000)
struct EndCrashBoxMiniGameBoxActor_SetMaterialParameter final
{
public:
	class UMaterialParameterLightPlacedComponent* MaterialParameter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameBoxActor_SetMaterialParameter) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameBoxActor_SetMaterialParameter");
static_assert(sizeof(EndCrashBoxMiniGameBoxActor_SetMaterialParameter) == 0x000008, "Wrong size on EndCrashBoxMiniGameBoxActor_SetMaterialParameter");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_SetMaterialParameter, MaterialParameter) == 0x000000, "Member 'EndCrashBoxMiniGameBoxActor_SetMaterialParameter::MaterialParameter' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameBoxActor.SetReferenceStaticMesh
// 0x0010 (0x0010 - 0x0000)
struct EndCrashBoxMiniGameBoxActor_SetReferenceStaticMesh final
{
public:
	EEndCrashBoxMiniGameBoxType                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameBoxActor_SetReferenceStaticMesh) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameBoxActor_SetReferenceStaticMesh");
static_assert(sizeof(EndCrashBoxMiniGameBoxActor_SetReferenceStaticMesh) == 0x000010, "Wrong size on EndCrashBoxMiniGameBoxActor_SetReferenceStaticMesh");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_SetReferenceStaticMesh, Type) == 0x000000, "Member 'EndCrashBoxMiniGameBoxActor_SetReferenceStaticMesh::Type' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameBoxActor_SetReferenceStaticMesh, StaticMeshComp) == 0x000008, "Member 'EndCrashBoxMiniGameBoxActor_SetReferenceStaticMesh::StaticMeshComp' has a wrong offset!");

// Function EndGame.EndDebugGameBootMenu.OnCompleteShowDebugListBox
// 0x0010 (0x0010 - 0x0000)
struct EndDebugGameBootMenu_OnCompleteShowDebugListBox final
{
public:
	class FString                                 SelectString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugGameBootMenu_OnCompleteShowDebugListBox) == 0x000008, "Wrong alignment on EndDebugGameBootMenu_OnCompleteShowDebugListBox");
static_assert(sizeof(EndDebugGameBootMenu_OnCompleteShowDebugListBox) == 0x000010, "Wrong size on EndDebugGameBootMenu_OnCompleteShowDebugListBox");
static_assert(offsetof(EndDebugGameBootMenu_OnCompleteShowDebugListBox, SelectString) == 0x000000, "Member 'EndDebugGameBootMenu_OnCompleteShowDebugListBox::SelectString' has a wrong offset!");

// Function EndGame.EndBorder.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndBorder_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndBorder_GetDynamicMaterial");
static_assert(sizeof(EndBorder_GetDynamicMaterial) == 0x000008, "Wrong size on EndBorder_GetDynamicMaterial");
static_assert(offsetof(EndBorder_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndBorder_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndBorder.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct EndBorder_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetBrush) == 0x000008, "Wrong alignment on EndBorder_SetBrush");
static_assert(sizeof(EndBorder_SetBrush) == 0x000088, "Wrong size on EndBorder_SetBrush");
static_assert(offsetof(EndBorder_SetBrush, InBrush) == 0x000000, "Member 'EndBorder_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndBorder.SetBrushColor
// 0x0010 (0x0010 - 0x0000)
struct EndBorder_SetBrushColor final
{
public:
	struct FLinearColor                           InBrushColor;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetBrushColor) == 0x000004, "Wrong alignment on EndBorder_SetBrushColor");
static_assert(sizeof(EndBorder_SetBrushColor) == 0x000010, "Wrong size on EndBorder_SetBrushColor");
static_assert(offsetof(EndBorder_SetBrushColor, InBrushColor) == 0x000000, "Member 'EndBorder_SetBrushColor::InBrushColor' has a wrong offset!");

// Function EndGame.EndBorder.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndBorder_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndBorder_SetBrushFromAsset");
static_assert(sizeof(EndBorder_SetBrushFromAsset) == 0x000008, "Wrong size on EndBorder_SetBrushFromAsset");
static_assert(offsetof(EndBorder_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndBorder_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndBorder.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndBorder_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndBorder_SetBrushFromMaterial");
static_assert(sizeof(EndBorder_SetBrushFromMaterial) == 0x000008, "Wrong size on EndBorder_SetBrushFromMaterial");
static_assert(offsetof(EndBorder_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndBorder_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndBorder.SetBrushFromTexture
// 0x0008 (0x0008 - 0x0000)
struct EndBorder_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndBorder_SetBrushFromTexture");
static_assert(sizeof(EndBorder_SetBrushFromTexture) == 0x000008, "Wrong size on EndBorder_SetBrushFromTexture");
static_assert(offsetof(EndBorder_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndBorder_SetBrushFromTexture::Texture' has a wrong offset!");

// Function EndGame.EndBorder.SetContentColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndBorder_SetContentColorAndOpacity final
{
public:
	struct FLinearColor                           InContentColorAndOpacity;                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetContentColorAndOpacity) == 0x000004, "Wrong alignment on EndBorder_SetContentColorAndOpacity");
static_assert(sizeof(EndBorder_SetContentColorAndOpacity) == 0x000010, "Wrong size on EndBorder_SetContentColorAndOpacity");
static_assert(offsetof(EndBorder_SetContentColorAndOpacity, InContentColorAndOpacity) == 0x000000, "Member 'EndBorder_SetContentColorAndOpacity::InContentColorAndOpacity' has a wrong offset!");

// Function EndGame.EndBorder.SetDesiredSizeScale
// 0x0008 (0x0008 - 0x0000)
struct EndBorder_SetDesiredSizeScale final
{
public:
	struct FVector2D                              InScale;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetDesiredSizeScale) == 0x000004, "Wrong alignment on EndBorder_SetDesiredSizeScale");
static_assert(sizeof(EndBorder_SetDesiredSizeScale) == 0x000008, "Wrong size on EndBorder_SetDesiredSizeScale");
static_assert(offsetof(EndBorder_SetDesiredSizeScale, InScale) == 0x000000, "Member 'EndBorder_SetDesiredSizeScale::InScale' has a wrong offset!");

// Function EndGame.EndBorder.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndBorder_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetHorizontalAlignment) == 0x000001, "Wrong alignment on EndBorder_SetHorizontalAlignment");
static_assert(sizeof(EndBorder_SetHorizontalAlignment) == 0x000001, "Wrong size on EndBorder_SetHorizontalAlignment");
static_assert(offsetof(EndBorder_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'EndBorder_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function EndGame.EndBorder.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndBorder_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetPadding) == 0x000004, "Wrong alignment on EndBorder_SetPadding");
static_assert(sizeof(EndBorder_SetPadding) == 0x000010, "Wrong size on EndBorder_SetPadding");
static_assert(offsetof(EndBorder_SetPadding, InPadding) == 0x000000, "Member 'EndBorder_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndBorder.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndBorder_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetVerticalAlignment) == 0x000001, "Wrong alignment on EndBorder_SetVerticalAlignment");
static_assert(sizeof(EndBorder_SetVerticalAlignment) == 0x000001, "Wrong size on EndBorder_SetVerticalAlignment");
static_assert(offsetof(EndBorder_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'EndBorder_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function EndGame.EndBoxing3DBattlerResult.OnPrizeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBoxing3DBattlerResult_OnPrizeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBoxing3DBattlerResult_OnPrizeListSetupItem) == 0x000008, "Wrong alignment on EndBoxing3DBattlerResult_OnPrizeListSetupItem");
static_assert(sizeof(EndBoxing3DBattlerResult_OnPrizeListSetupItem) == 0x000010, "Wrong size on EndBoxing3DBattlerResult_OnPrizeListSetupItem");
static_assert(offsetof(EndBoxing3DBattlerResult_OnPrizeListSetupItem, ItemWidget) == 0x000000, "Member 'EndBoxing3DBattlerResult_OnPrizeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBoxing3DBattlerResult_OnPrizeListSetupItem, ItemIndex) == 0x000008, "Member 'EndBoxing3DBattlerResult_OnPrizeListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnAbilityListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusWindow_OnAbilityListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnAbilityListMeasureItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnAbilityListMeasureItem");
static_assert(sizeof(EndStatusWindow_OnAbilityListMeasureItem) == 0x00000C, "Wrong size on EndStatusWindow_OnAbilityListMeasureItem");
static_assert(offsetof(EndStatusWindow_OnAbilityListMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnAbilityListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnAbilityListMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusWindow_OnAbilityListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnAbilityListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusWindow_OnAbilityListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusWindow_OnAbilityListSetupItem) == 0x000008, "Wrong alignment on EndStatusWindow_OnAbilityListSetupItem");
static_assert(sizeof(EndStatusWindow_OnAbilityListSetupItem) == 0x000010, "Wrong size on EndStatusWindow_OnAbilityListSetupItem");
static_assert(offsetof(EndStatusWindow_OnAbilityListSetupItem, ItemWidget) == 0x000000, "Member 'EndStatusWindow_OnAbilityListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnAbilityListSetupItem, CellIndex) == 0x000008, "Member 'EndStatusWindow_OnAbilityListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnAbilityMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusWindow_OnAbilityMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnAbilityMeasureItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnAbilityMeasureItem");
static_assert(sizeof(EndStatusWindow_OnAbilityMeasureItem) == 0x00000C, "Wrong size on EndStatusWindow_OnAbilityMeasureItem");
static_assert(offsetof(EndStatusWindow_OnAbilityMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnAbilityMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnAbilityMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusWindow_OnAbilityMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnAbilitySetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusWindow_OnAbilitySetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusWindow_OnAbilitySetupItem) == 0x000008, "Wrong alignment on EndStatusWindow_OnAbilitySetupItem");
static_assert(sizeof(EndStatusWindow_OnAbilitySetupItem) == 0x000010, "Wrong size on EndStatusWindow_OnAbilitySetupItem");
static_assert(offsetof(EndStatusWindow_OnAbilitySetupItem, ItemWidget) == 0x000000, "Member 'EndStatusWindow_OnAbilitySetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnAbilitySetupItem, CellIndex) == 0x000008, "Member 'EndStatusWindow_OnAbilitySetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnChainAbilityMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusWindow_OnChainAbilityMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnChainAbilityMeasureItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnChainAbilityMeasureItem");
static_assert(sizeof(EndStatusWindow_OnChainAbilityMeasureItem) == 0x00000C, "Wrong size on EndStatusWindow_OnChainAbilityMeasureItem");
static_assert(offsetof(EndStatusWindow_OnChainAbilityMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnChainAbilityMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnChainAbilityMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusWindow_OnChainAbilityMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnChainAbilitySetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusWindow_OnChainAbilitySetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusWindow_OnChainAbilitySetupItem) == 0x000008, "Wrong alignment on EndStatusWindow_OnChainAbilitySetupItem");
static_assert(sizeof(EndStatusWindow_OnChainAbilitySetupItem) == 0x000010, "Wrong size on EndStatusWindow_OnChainAbilitySetupItem");
static_assert(offsetof(EndStatusWindow_OnChainAbilitySetupItem, ItemWidget) == 0x000000, "Member 'EndStatusWindow_OnChainAbilitySetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnChainAbilitySetupItem, CellIndex) == 0x000008, "Member 'EndStatusWindow_OnChainAbilitySetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnChainActionMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusWindow_OnChainActionMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnChainActionMeasureItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnChainActionMeasureItem");
static_assert(sizeof(EndStatusWindow_OnChainActionMeasureItem) == 0x00000C, "Wrong size on EndStatusWindow_OnChainActionMeasureItem");
static_assert(offsetof(EndStatusWindow_OnChainActionMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnChainActionMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnChainActionMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusWindow_OnChainActionMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnChainActionSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusWindow_OnChainActionSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusWindow_OnChainActionSetupItem) == 0x000008, "Wrong alignment on EndStatusWindow_OnChainActionSetupItem");
static_assert(sizeof(EndStatusWindow_OnChainActionSetupItem) == 0x000010, "Wrong size on EndStatusWindow_OnChainActionSetupItem");
static_assert(offsetof(EndStatusWindow_OnChainActionSetupItem, ItemWidget) == 0x000000, "Member 'EndStatusWindow_OnChainActionSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnChainActionSetupItem, CellIndex) == 0x000008, "Member 'EndStatusWindow_OnChainActionSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnLimitMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusWindow_OnLimitMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnLimitMeasureItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnLimitMeasureItem");
static_assert(sizeof(EndStatusWindow_OnLimitMeasureItem) == 0x00000C, "Wrong size on EndStatusWindow_OnLimitMeasureItem");
static_assert(offsetof(EndStatusWindow_OnLimitMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnLimitMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnLimitMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusWindow_OnLimitMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnLimitSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusWindow_OnLimitSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusWindow_OnLimitSetupItem) == 0x000008, "Wrong alignment on EndStatusWindow_OnLimitSetupItem");
static_assert(sizeof(EndStatusWindow_OnLimitSetupItem) == 0x000010, "Wrong size on EndStatusWindow_OnLimitSetupItem");
static_assert(offsetof(EndStatusWindow_OnLimitSetupItem, ItemWidget) == 0x000000, "Member 'EndStatusWindow_OnLimitSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnLimitSetupItem, CellIndex) == 0x000008, "Member 'EndStatusWindow_OnLimitSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnMagicMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusWindow_OnMagicMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnMagicMeasureItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnMagicMeasureItem");
static_assert(sizeof(EndStatusWindow_OnMagicMeasureItem) == 0x00000C, "Wrong size on EndStatusWindow_OnMagicMeasureItem");
static_assert(offsetof(EndStatusWindow_OnMagicMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnMagicMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnMagicMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusWindow_OnMagicMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnMagicSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusWindow_OnMagicSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusWindow_OnMagicSetupItem) == 0x000008, "Wrong alignment on EndStatusWindow_OnMagicSetupItem");
static_assert(sizeof(EndStatusWindow_OnMagicSetupItem) == 0x000010, "Wrong size on EndStatusWindow_OnMagicSetupItem");
static_assert(offsetof(EndStatusWindow_OnMagicSetupItem, ItemWidget) == 0x000000, "Member 'EndStatusWindow_OnMagicSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnMagicSetupItem, CellIndex) == 0x000008, "Member 'EndStatusWindow_OnMagicSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnMemberListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusWindow_OnMemberListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnMemberListMeasureItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnMemberListMeasureItem");
static_assert(sizeof(EndStatusWindow_OnMemberListMeasureItem) == 0x00000C, "Wrong size on EndStatusWindow_OnMemberListMeasureItem");
static_assert(offsetof(EndStatusWindow_OnMemberListMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnMemberListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnMemberListMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusWindow_OnMemberListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnMemberListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndStatusWindow_OnMemberListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnMemberListPressedItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnMemberListPressedItem");
static_assert(sizeof(EndStatusWindow_OnMemberListPressedItem) == 0x000004, "Wrong size on EndStatusWindow_OnMemberListPressedItem");
static_assert(offsetof(EndStatusWindow_OnMemberListPressedItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnMemberListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnMemberListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndStatusWindow_OnMemberListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndStatusWindow_OnMemberListSelectedIndexChanged");
static_assert(sizeof(EndStatusWindow_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong size on EndStatusWindow_OnMemberListSelectedIndexChanged");
static_assert(offsetof(EndStatusWindow_OnMemberListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnMemberListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnMemberListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusWindow_OnMemberListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusWindow_OnMemberListSetupItem) == 0x000008, "Wrong alignment on EndStatusWindow_OnMemberListSetupItem");
static_assert(sizeof(EndStatusWindow_OnMemberListSetupItem) == 0x000010, "Wrong size on EndStatusWindow_OnMemberListSetupItem");
static_assert(offsetof(EndStatusWindow_OnMemberListSetupItem, ItemWidget) == 0x000000, "Member 'EndStatusWindow_OnMemberListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnMemberListSetupItem, CellIndex) == 0x000008, "Member 'EndStatusWindow_OnMemberListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnPassiveListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusWindow_OnPassiveListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnPassiveListMeasureItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnPassiveListMeasureItem");
static_assert(sizeof(EndStatusWindow_OnPassiveListMeasureItem) == 0x00000C, "Wrong size on EndStatusWindow_OnPassiveListMeasureItem");
static_assert(offsetof(EndStatusWindow_OnPassiveListMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnPassiveListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnPassiveListMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusWindow_OnPassiveListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnPassiveListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusWindow_OnPassiveListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusWindow_OnPassiveListSetupItem) == 0x000008, "Wrong alignment on EndStatusWindow_OnPassiveListSetupItem");
static_assert(sizeof(EndStatusWindow_OnPassiveListSetupItem) == 0x000010, "Wrong size on EndStatusWindow_OnPassiveListSetupItem");
static_assert(offsetof(EndStatusWindow_OnPassiveListSetupItem, ItemWidget) == 0x000000, "Member 'EndStatusWindow_OnPassiveListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnPassiveListSetupItem, CellIndex) == 0x000008, "Member 'EndStatusWindow_OnPassiveListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnSummonMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusWindow_OnSummonMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnSummonMeasureItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnSummonMeasureItem");
static_assert(sizeof(EndStatusWindow_OnSummonMeasureItem) == 0x00000C, "Wrong size on EndStatusWindow_OnSummonMeasureItem");
static_assert(offsetof(EndStatusWindow_OnSummonMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnSummonMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnSummonMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusWindow_OnSummonMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnSummonSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusWindow_OnSummonSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusWindow_OnSummonSetupItem) == 0x000008, "Wrong alignment on EndStatusWindow_OnSummonSetupItem");
static_assert(sizeof(EndStatusWindow_OnSummonSetupItem) == 0x000010, "Wrong size on EndStatusWindow_OnSummonSetupItem");
static_assert(offsetof(EndStatusWindow_OnSummonSetupItem, ItemWidget) == 0x000000, "Member 'EndStatusWindow_OnSummonSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnSummonSetupItem, CellIndex) == 0x000008, "Member 'EndStatusWindow_OnSummonSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnWeaponCoreMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusWindow_OnWeaponCoreMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusWindow_OnWeaponCoreMeasureItem) == 0x000004, "Wrong alignment on EndStatusWindow_OnWeaponCoreMeasureItem");
static_assert(sizeof(EndStatusWindow_OnWeaponCoreMeasureItem) == 0x00000C, "Wrong size on EndStatusWindow_OnWeaponCoreMeasureItem");
static_assert(offsetof(EndStatusWindow_OnWeaponCoreMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusWindow_OnWeaponCoreMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnWeaponCoreMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusWindow_OnWeaponCoreMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusWindow.OnWeaponCoreSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusWindow_OnWeaponCoreSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusWindow_OnWeaponCoreSetupItem) == 0x000008, "Wrong alignment on EndStatusWindow_OnWeaponCoreSetupItem");
static_assert(sizeof(EndStatusWindow_OnWeaponCoreSetupItem) == 0x000010, "Wrong size on EndStatusWindow_OnWeaponCoreSetupItem");
static_assert(offsetof(EndStatusWindow_OnWeaponCoreSetupItem, ItemWidget) == 0x000000, "Member 'EndStatusWindow_OnWeaponCoreSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusWindow_OnWeaponCoreSetupItem, CellIndex) == 0x000008, "Member 'EndStatusWindow_OnWeaponCoreSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndSwitchableBodySkeletalMeshComponent.SetSkeletalMeshByIndex
// 0x0008 (0x0008 - 0x0000)
struct EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitPose;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByIndex) == 0x000004, "Wrong alignment on EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByIndex");
static_assert(sizeof(EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByIndex) == 0x000008, "Wrong size on EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByIndex");
static_assert(offsetof(EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByIndex, Index_0) == 0x000000, "Member 'EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByIndex, bReinitPose) == 0x000004, "Member 'EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByIndex::bReinitPose' has a wrong offset!");

// Function EndGame.EndSwitchableBodySkeletalMeshComponent.SetSkeletalMeshByLabel
// 0x000C (0x000C - 0x0000)
struct EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByLabel final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitPose;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByLabel) == 0x000004, "Wrong alignment on EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByLabel");
static_assert(sizeof(EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByLabel) == 0x00000C, "Wrong size on EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByLabel");
static_assert(offsetof(EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByLabel, Label) == 0x000000, "Member 'EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByLabel::Label' has a wrong offset!");
static_assert(offsetof(EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByLabel, bReinitPose) == 0x000008, "Member 'EndSwitchableBodySkeletalMeshComponent_SetSkeletalMeshByLabel::bReinitPose' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnAbilityList00SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnAbilityList00SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnAbilityList00SetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnAbilityList00SetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnAbilityList00SetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnAbilityList00SetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnAbilityList00SetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnAbilityList00SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnAbilityList00SetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnAbilityList00SetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnAbilityList01SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnAbilityList01SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnAbilityList01SetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnAbilityList01SetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnAbilityList01SetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnAbilityList01SetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnAbilityList01SetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnAbilityList01SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnAbilityList01SetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnAbilityList01SetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnActionTypeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnActionTypeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnActionTypeListSetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnActionTypeListSetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnActionTypeListSetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnActionTypeListSetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnActionTypeListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnActionTypeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnActionTypeListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnActionTypeListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnBpReinforceList03SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnBpReinforceList03SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnBpReinforceList03SetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnBpReinforceList03SetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnBpReinforceList03SetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnBpReinforceList03SetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnBpReinforceList03SetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnBpReinforceList03SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnBpReinforceList03SetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnBpReinforceList03SetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnBpReinforceListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnBpReinforceListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnBpReinforceListSetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnBpReinforceListSetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnBpReinforceListSetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnBpReinforceListSetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnBpReinforceListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnBpReinforceListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnBpReinforceListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnBpReinforceListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnBufferSetup
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnBufferSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnBufferSetup) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnBufferSetup");
static_assert(sizeof(EndNewSenseDetailWindow_OnBufferSetup) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnBufferSetup");
static_assert(offsetof(EndNewSenseDetailWindow_OnBufferSetup, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnBufferSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnBufferSetup, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnBufferSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnChangeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnChangeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnChangeListSetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnChangeListSetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnChangeListSetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnChangeListSetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnChangeListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnChangeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnChangeListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnChangeListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnDetailOrAreaListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnDetailOrAreaListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnDetailOrAreaListSetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnDetailOrAreaListSetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnDetailOrAreaListSetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnDetailOrAreaListSetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnDetailOrAreaListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnDetailOrAreaListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnDetailOrAreaListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnDetailOrAreaListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnDropItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnDropItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnDropItemListSetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnDropItemListSetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnDropItemListSetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnDropItemListSetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnDropItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnDropItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnDropItemListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnDropItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnIconInfoList01SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnIconInfoList01SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnIconInfoList01SetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnIconInfoList01SetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnIconInfoList01SetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnIconInfoList01SetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnIconInfoList01SetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnIconInfoList01SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnIconInfoList01SetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnIconInfoList01SetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnIconInfoList02SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnIconInfoList02SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnIconInfoList02SetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnIconInfoList02SetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnIconInfoList02SetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnIconInfoList02SetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnIconInfoList02SetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnIconInfoList02SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnIconInfoList02SetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnIconInfoList02SetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnLogListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnLogListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnLogListSetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnLogListSetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnLogListSetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnLogListSetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnLogListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnLogListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnLogListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnLogListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnRareDropItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnRareDropItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnRareDropItemListSetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnRareDropItemListSetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnRareDropItemListSetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnRareDropItemListSetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnRareDropItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnRareDropItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnRareDropItemListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnRareDropItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnResistanceIconListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnResistanceIconListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnResistanceIconListSetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnResistanceIconListSetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnResistanceIconListSetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnResistanceIconListSetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnResistanceIconListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnResistanceIconListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnResistanceIconListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnResistanceIconListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnResistancesListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnResistancesListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnResistancesListSetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnResistancesListSetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnResistancesListSetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnResistancesListSetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnResistancesListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnResistancesListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnResistancesListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnResistancesListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSenseDetailWindow.OnStealListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSenseDetailWindow_OnStealListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSenseDetailWindow_OnStealListSetupItem) == 0x000008, "Wrong alignment on EndNewSenseDetailWindow_OnStealListSetupItem");
static_assert(sizeof(EndNewSenseDetailWindow_OnStealListSetupItem) == 0x000010, "Wrong size on EndNewSenseDetailWindow_OnStealListSetupItem");
static_assert(offsetof(EndNewSenseDetailWindow_OnStealListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSenseDetailWindow_OnStealListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSenseDetailWindow_OnStealListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSenseDetailWindow_OnStealListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMiniGameFunctionLibrary.GetLifeGaugeRate
// 0x0004 (0x0004 - 0x0000)
struct EndMiniGameFunctionLibrary_GetLifeGaugeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMiniGameFunctionLibrary_GetLifeGaugeRate) == 0x000004, "Wrong alignment on EndMiniGameFunctionLibrary_GetLifeGaugeRate");
static_assert(sizeof(EndMiniGameFunctionLibrary_GetLifeGaugeRate) == 0x000004, "Wrong size on EndMiniGameFunctionLibrary_GetLifeGaugeRate");
static_assert(offsetof(EndMiniGameFunctionLibrary_GetLifeGaugeRate, ReturnValue) == 0x000000, "Member 'EndMiniGameFunctionLibrary_GetLifeGaugeRate::ReturnValue' has a wrong offset!");

// Function EndGame.EndMiniGameFunctionLibrary.GetLifestreamValue
// 0x0004 (0x0004 - 0x0000)
struct EndMiniGameFunctionLibrary_GetLifestreamValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMiniGameFunctionLibrary_GetLifestreamValue) == 0x000004, "Wrong alignment on EndMiniGameFunctionLibrary_GetLifestreamValue");
static_assert(sizeof(EndMiniGameFunctionLibrary_GetLifestreamValue) == 0x000004, "Wrong size on EndMiniGameFunctionLibrary_GetLifestreamValue");
static_assert(offsetof(EndMiniGameFunctionLibrary_GetLifestreamValue, ReturnValue) == 0x000000, "Member 'EndMiniGameFunctionLibrary_GetLifestreamValue::ReturnValue' has a wrong offset!");

// Function EndGame.EndMiniGameFunctionLibrary.PlayLifeGaugeAnimation
// 0x0008 (0x0008 - 0x0000)
struct EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForward;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation) == 0x000004, "Wrong alignment on EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation");
static_assert(sizeof(EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation) == 0x000008, "Wrong size on EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation");
static_assert(offsetof(EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation, idx) == 0x000000, "Member 'EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation::idx' has a wrong offset!");
static_assert(offsetof(EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation, bForward) == 0x000004, "Member 'EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation::bForward' has a wrong offset!");
static_assert(offsetof(EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation, ReturnValue) == 0x000005, "Member 'EndMiniGameFunctionLibrary_PlayLifeGaugeAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.GetCurrentStage
// 0x0004 (0x0004 - 0x0000)
struct EndMoogleCaptureAIController_GetCurrentStage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleCaptureAIController_GetCurrentStage) == 0x000004, "Wrong alignment on EndMoogleCaptureAIController_GetCurrentStage");
static_assert(sizeof(EndMoogleCaptureAIController_GetCurrentStage) == 0x000004, "Wrong size on EndMoogleCaptureAIController_GetCurrentStage");
static_assert(offsetof(EndMoogleCaptureAIController_GetCurrentStage, ReturnValue) == 0x000000, "Member 'EndMoogleCaptureAIController_GetCurrentStage::ReturnValue' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.GetStageClearCount
// 0x0004 (0x0004 - 0x0000)
struct EndMoogleCaptureAIController_GetStageClearCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleCaptureAIController_GetStageClearCount) == 0x000004, "Wrong alignment on EndMoogleCaptureAIController_GetStageClearCount");
static_assert(sizeof(EndMoogleCaptureAIController_GetStageClearCount) == 0x000004, "Wrong size on EndMoogleCaptureAIController_GetStageClearCount");
static_assert(offsetof(EndMoogleCaptureAIController_GetStageClearCount, ReturnValue) == 0x000000, "Member 'EndMoogleCaptureAIController_GetStageClearCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.BranchTrickType
// 0x0001 (0x0001 - 0x0000)
struct EndMoogleCaptureAIController_BranchTrickType final
{
public:
	EMoogleAITrickType                            OutTrickType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleCaptureAIController_BranchTrickType) == 0x000001, "Wrong alignment on EndMoogleCaptureAIController_BranchTrickType");
static_assert(sizeof(EndMoogleCaptureAIController_BranchTrickType) == 0x000001, "Wrong size on EndMoogleCaptureAIController_BranchTrickType");
static_assert(offsetof(EndMoogleCaptureAIController_BranchTrickType, OutTrickType) == 0x000000, "Member 'EndMoogleCaptureAIController_BranchTrickType::OutTrickType' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.FireBullet
// 0x001C (0x001C - 0x0000)
struct EndMoogleCaptureAIController_FireBullet final
{
public:
	struct FVector                                launchPos;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                initvel;                                           // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMoogleCaptureAIController_FireBullet) == 0x000004, "Wrong alignment on EndMoogleCaptureAIController_FireBullet");
static_assert(sizeof(EndMoogleCaptureAIController_FireBullet) == 0x00001C, "Wrong size on EndMoogleCaptureAIController_FireBullet");
static_assert(offsetof(EndMoogleCaptureAIController_FireBullet, launchPos) == 0x000000, "Member 'EndMoogleCaptureAIController_FireBullet::launchPos' has a wrong offset!");
static_assert(offsetof(EndMoogleCaptureAIController_FireBullet, initvel) == 0x00000C, "Member 'EndMoogleCaptureAIController_FireBullet::initvel' has a wrong offset!");
static_assert(offsetof(EndMoogleCaptureAIController_FireBullet, ReturnValue) == 0x000018, "Member 'EndMoogleCaptureAIController_FireBullet::ReturnValue' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.GetOwnerMoogle
// 0x0008 (0x0008 - 0x0000)
struct EndMoogleCaptureAIController_GetOwnerMoogle final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleCaptureAIController_GetOwnerMoogle) == 0x000008, "Wrong alignment on EndMoogleCaptureAIController_GetOwnerMoogle");
static_assert(sizeof(EndMoogleCaptureAIController_GetOwnerMoogle) == 0x000008, "Wrong size on EndMoogleCaptureAIController_GetOwnerMoogle");
static_assert(offsetof(EndMoogleCaptureAIController_GetOwnerMoogle, ReturnValue) == 0x000000, "Member 'EndMoogleCaptureAIController_GetOwnerMoogle::ReturnValue' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.PlayTrickBarrageAnim
// 0x0008 (0x0008 - 0x0000)
struct EndMoogleCaptureAIController_PlayTrickBarrageAnim final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleCaptureAIController_PlayTrickBarrageAnim) == 0x000004, "Wrong alignment on EndMoogleCaptureAIController_PlayTrickBarrageAnim");
static_assert(sizeof(EndMoogleCaptureAIController_PlayTrickBarrageAnim) == 0x000008, "Wrong size on EndMoogleCaptureAIController_PlayTrickBarrageAnim");
static_assert(offsetof(EndMoogleCaptureAIController_PlayTrickBarrageAnim, AnimName) == 0x000000, "Member 'EndMoogleCaptureAIController_PlayTrickBarrageAnim::AnimName' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.SetAccel
// 0x000C (0x000C - 0x0000)
struct EndMoogleCaptureAIController_SetAccel final
{
public:
	struct FVector                                Accel;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleCaptureAIController_SetAccel) == 0x000004, "Wrong alignment on EndMoogleCaptureAIController_SetAccel");
static_assert(sizeof(EndMoogleCaptureAIController_SetAccel) == 0x00000C, "Wrong size on EndMoogleCaptureAIController_SetAccel");
static_assert(offsetof(EndMoogleCaptureAIController_SetAccel, Accel) == 0x000000, "Member 'EndMoogleCaptureAIController_SetAccel::Accel' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.ShootBullet
// 0x001C (0x001C - 0x0000)
struct EndMoogleCaptureAIController_ShootBullet final
{
public:
	struct FVector                                launchPos;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                aimLoc;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMoogleCaptureAIController_ShootBullet) == 0x000004, "Wrong alignment on EndMoogleCaptureAIController_ShootBullet");
static_assert(sizeof(EndMoogleCaptureAIController_ShootBullet) == 0x00001C, "Wrong size on EndMoogleCaptureAIController_ShootBullet");
static_assert(offsetof(EndMoogleCaptureAIController_ShootBullet, launchPos) == 0x000000, "Member 'EndMoogleCaptureAIController_ShootBullet::launchPos' has a wrong offset!");
static_assert(offsetof(EndMoogleCaptureAIController_ShootBullet, aimLoc) == 0x00000C, "Member 'EndMoogleCaptureAIController_ShootBullet::aimLoc' has a wrong offset!");
static_assert(offsetof(EndMoogleCaptureAIController_ShootBullet, ReturnValue) == 0x000018, "Member 'EndMoogleCaptureAIController_ShootBullet::ReturnValue' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.ThrowSpawnedTrick
// 0x0020 (0x0020 - 0x0000)
struct EndMoogleCaptureAIController_ThrowSpawnedTrick final
{
public:
	struct FVector                                launchOffset;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                initvel;                                           // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         usingidx;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMoogleCaptureAIController_ThrowSpawnedTrick) == 0x000004, "Wrong alignment on EndMoogleCaptureAIController_ThrowSpawnedTrick");
static_assert(sizeof(EndMoogleCaptureAIController_ThrowSpawnedTrick) == 0x000020, "Wrong size on EndMoogleCaptureAIController_ThrowSpawnedTrick");
static_assert(offsetof(EndMoogleCaptureAIController_ThrowSpawnedTrick, launchOffset) == 0x000000, "Member 'EndMoogleCaptureAIController_ThrowSpawnedTrick::launchOffset' has a wrong offset!");
static_assert(offsetof(EndMoogleCaptureAIController_ThrowSpawnedTrick, initvel) == 0x00000C, "Member 'EndMoogleCaptureAIController_ThrowSpawnedTrick::initvel' has a wrong offset!");
static_assert(offsetof(EndMoogleCaptureAIController_ThrowSpawnedTrick, usingidx) == 0x000018, "Member 'EndMoogleCaptureAIController_ThrowSpawnedTrick::usingidx' has a wrong offset!");
static_assert(offsetof(EndMoogleCaptureAIController_ThrowSpawnedTrick, ReturnValue) == 0x00001C, "Member 'EndMoogleCaptureAIController_ThrowSpawnedTrick::ReturnValue' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.GetTrickParameter
// 0x0004 (0x0004 - 0x0000)
struct EndMoogleCaptureAIController_GetTrickParameter final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleCaptureAIController_GetTrickParameter) == 0x000004, "Wrong alignment on EndMoogleCaptureAIController_GetTrickParameter");
static_assert(sizeof(EndMoogleCaptureAIController_GetTrickParameter) == 0x000004, "Wrong size on EndMoogleCaptureAIController_GetTrickParameter");
static_assert(offsetof(EndMoogleCaptureAIController_GetTrickParameter, ReturnValue) == 0x000000, "Member 'EndMoogleCaptureAIController_GetTrickParameter::ReturnValue' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.IsArrested
// 0x0001 (0x0001 - 0x0000)
struct EndMoogleCaptureAIController_IsArrested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleCaptureAIController_IsArrested) == 0x000001, "Wrong alignment on EndMoogleCaptureAIController_IsArrested");
static_assert(sizeof(EndMoogleCaptureAIController_IsArrested) == 0x000001, "Wrong size on EndMoogleCaptureAIController_IsArrested");
static_assert(offsetof(EndMoogleCaptureAIController_IsArrested, ReturnValue) == 0x000000, "Member 'EndMoogleCaptureAIController_IsArrested::ReturnValue' has a wrong offset!");

// Function EndGame.EndMoogleCaptureAIController.IsBarrage
// 0x0001 (0x0001 - 0x0000)
struct EndMoogleCaptureAIController_IsBarrage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleCaptureAIController_IsBarrage) == 0x000001, "Wrong alignment on EndMoogleCaptureAIController_IsBarrage");
static_assert(sizeof(EndMoogleCaptureAIController_IsBarrage) == 0x000001, "Wrong size on EndMoogleCaptureAIController_IsBarrage");
static_assert(offsetof(EndMoogleCaptureAIController_IsBarrage, ReturnValue) == 0x000000, "Member 'EndMoogleCaptureAIController_IsBarrage::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuTalkItemRankList.OnList01SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMenuTalkItemRankList_OnList01SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuTalkItemRankList_OnList01SetupItem) == 0x000008, "Wrong alignment on EndMenuTalkItemRankList_OnList01SetupItem");
static_assert(sizeof(EndMenuTalkItemRankList_OnList01SetupItem) == 0x000010, "Wrong size on EndMenuTalkItemRankList_OnList01SetupItem");
static_assert(offsetof(EndMenuTalkItemRankList_OnList01SetupItem, ItemWidget) == 0x000000, "Member 'EndMenuTalkItemRankList_OnList01SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMenuTalkItemRankList_OnList01SetupItem, ItemIndex) == 0x000008, "Member 'EndMenuTalkItemRankList_OnList01SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMenuTalkItemRankList.OnList0SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMenuTalkItemRankList_OnList0SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuTalkItemRankList_OnList0SetupItem) == 0x000008, "Wrong alignment on EndMenuTalkItemRankList_OnList0SetupItem");
static_assert(sizeof(EndMenuTalkItemRankList_OnList0SetupItem) == 0x000010, "Wrong size on EndMenuTalkItemRankList_OnList0SetupItem");
static_assert(offsetof(EndMenuTalkItemRankList_OnList0SetupItem, ItemWidget) == 0x000000, "Member 'EndMenuTalkItemRankList_OnList0SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMenuTalkItemRankList_OnList0SetupItem, ItemIndex) == 0x000008, "Member 'EndMenuTalkItemRankList_OnList0SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMenuTalkItemRankList.OnList1SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMenuTalkItemRankList_OnList1SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuTalkItemRankList_OnList1SetupItem) == 0x000008, "Wrong alignment on EndMenuTalkItemRankList_OnList1SetupItem");
static_assert(sizeof(EndMenuTalkItemRankList_OnList1SetupItem) == 0x000010, "Wrong size on EndMenuTalkItemRankList_OnList1SetupItem");
static_assert(offsetof(EndMenuTalkItemRankList_OnList1SetupItem, ItemWidget) == 0x000000, "Member 'EndMenuTalkItemRankList_OnList1SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMenuTalkItemRankList_OnList1SetupItem, ItemIndex) == 0x000008, "Member 'EndMenuTalkItemRankList_OnList1SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMenuTalkItemRankList.OnList2SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMenuTalkItemRankList_OnList2SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuTalkItemRankList_OnList2SetupItem) == 0x000008, "Wrong alignment on EndMenuTalkItemRankList_OnList2SetupItem");
static_assert(sizeof(EndMenuTalkItemRankList_OnList2SetupItem) == 0x000010, "Wrong size on EndMenuTalkItemRankList_OnList2SetupItem");
static_assert(offsetof(EndMenuTalkItemRankList_OnList2SetupItem, ItemWidget) == 0x000000, "Member 'EndMenuTalkItemRankList_OnList2SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMenuTalkItemRankList_OnList2SetupItem, ItemIndex) == 0x000008, "Member 'EndMenuTalkItemRankList_OnList2SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMenuTalkItemRankList.OnList3SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMenuTalkItemRankList_OnList3SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuTalkItemRankList_OnList3SetupItem) == 0x000008, "Wrong alignment on EndMenuTalkItemRankList_OnList3SetupItem");
static_assert(sizeof(EndMenuTalkItemRankList_OnList3SetupItem) == 0x000010, "Wrong size on EndMenuTalkItemRankList_OnList3SetupItem");
static_assert(offsetof(EndMenuTalkItemRankList_OnList3SetupItem, ItemWidget) == 0x000000, "Member 'EndMenuTalkItemRankList_OnList3SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMenuTalkItemRankList_OnList3SetupItem, ItemIndex) == 0x000008, "Member 'EndMenuTalkItemRankList_OnList3SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMenuTalkItemRankList.OnRankListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMenuTalkItemRankList_OnRankListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuTalkItemRankList_OnRankListSetupItem) == 0x000008, "Wrong alignment on EndMenuTalkItemRankList_OnRankListSetupItem");
static_assert(sizeof(EndMenuTalkItemRankList_OnRankListSetupItem) == 0x000010, "Wrong size on EndMenuTalkItemRankList_OnRankListSetupItem");
static_assert(offsetof(EndMenuTalkItemRankList_OnRankListSetupItem, ItemWidget) == 0x000000, "Member 'EndMenuTalkItemRankList_OnRankListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMenuTalkItemRankList_OnRankListSetupItem, ItemIndex) == 0x000008, "Member 'EndMenuTalkItemRankList_OnRankListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaListBoxWindow.OnCommandMateriaCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup) == 0x000008, "Wrong alignment on EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup");
static_assert(sizeof(EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup) == 0x000010, "Wrong size on EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup, ItemWidget) == 0x000000, "Member 'EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup, ItemIndex) == 0x000008, "Member 'EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaListBoxWindow.OnMateriaCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainMateriaListBoxWindow_OnMateriaCellPressed final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMateriaListBoxWindow_OnMateriaCellPressed) == 0x000004, "Wrong alignment on EndMainMateriaListBoxWindow_OnMateriaCellPressed");
static_assert(sizeof(EndMainMateriaListBoxWindow_OnMateriaCellPressed) == 0x000004, "Wrong size on EndMainMateriaListBoxWindow_OnMateriaCellPressed");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnMateriaCellPressed, CellIndex) == 0x000000, "Member 'EndMainMateriaListBoxWindow_OnMateriaCellPressed::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaListBoxWindow.OnMateriaCellSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged");
static_assert(sizeof(EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged) == 0x000004, "Wrong size on EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaListBoxWindow.OnSetupItemForShop
// 0x0010 (0x0010 - 0x0000)
struct EndMainMateriaListBoxWindow_OnSetupItemForShop final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMateriaListBoxWindow_OnSetupItemForShop) == 0x000008, "Wrong alignment on EndMainMateriaListBoxWindow_OnSetupItemForShop");
static_assert(sizeof(EndMainMateriaListBoxWindow_OnSetupItemForShop) == 0x000010, "Wrong size on EndMainMateriaListBoxWindow_OnSetupItemForShop");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnSetupItemForShop, ItemWidget) == 0x000000, "Member 'EndMainMateriaListBoxWindow_OnSetupItemForShop::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnSetupItemForShop, ItemIndex) == 0x000008, "Member 'EndMainMateriaListBoxWindow_OnSetupItemForShop::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainManualMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainManualMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainManualMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainManualMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainManualMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainManualMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainManualMenu_OnLeftMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainManualMenu_OnLeftMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainManualMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainManualMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainManualMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainManualMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndMainManualMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainManualMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndMainManualMenu_OnLeftMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainManualMenu_OnLeftMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainManualMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainManualMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainManualMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainManualMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainManualMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainManualMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainManualMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainManualMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainManualMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainManualMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainManualMenu.OnStoneBoxSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainManualMenu_OnStoneBoxSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainManualMenu_OnStoneBoxSetupItem) == 0x000008, "Wrong alignment on EndMainManualMenu_OnStoneBoxSetupItem");
static_assert(sizeof(EndMainManualMenu_OnStoneBoxSetupItem) == 0x000010, "Wrong size on EndMainManualMenu_OnStoneBoxSetupItem");
static_assert(offsetof(EndMainManualMenu_OnStoneBoxSetupItem, ItemWidget) == 0x000000, "Member 'EndMainManualMenu_OnStoneBoxSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainManualMenu_OnStoneBoxSetupItem, CellIndex) == 0x000008, "Member 'EndMainManualMenu_OnStoneBoxSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndButton.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct EndButton_SetBackgroundColor final
{
public:
	struct FLinearColor                           InBackgroundColor;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetBackgroundColor) == 0x000004, "Wrong alignment on EndButton_SetBackgroundColor");
static_assert(sizeof(EndButton_SetBackgroundColor) == 0x000010, "Wrong size on EndButton_SetBackgroundColor");
static_assert(offsetof(EndButton_SetBackgroundColor, InBackgroundColor) == 0x000000, "Member 'EndButton_SetBackgroundColor::InBackgroundColor' has a wrong offset!");

// Function EndGame.EndButton.SetCanPress
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetCanPress final
{
public:
	bool                                          bInCanPress;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetCanPress) == 0x000001, "Wrong alignment on EndButton_SetCanPress");
static_assert(sizeof(EndButton_SetCanPress) == 0x000001, "Wrong size on EndButton_SetCanPress");
static_assert(offsetof(EndButton_SetCanPress, bInCanPress) == 0x000000, "Member 'EndButton_SetCanPress::bInCanPress' has a wrong offset!");

// Function EndGame.EndButton.SetClickMethod
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetClickMethod final
{
public:
	EButtonClickMethod                            InClickMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetClickMethod) == 0x000001, "Wrong alignment on EndButton_SetClickMethod");
static_assert(sizeof(EndButton_SetClickMethod) == 0x000001, "Wrong size on EndButton_SetClickMethod");
static_assert(offsetof(EndButton_SetClickMethod, InClickMethod) == 0x000000, "Member 'EndButton_SetClickMethod::InClickMethod' has a wrong offset!");

// Function EndGame.EndButton.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndButton_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndButton_SetColorAndOpacity");
static_assert(sizeof(EndButton_SetColorAndOpacity) == 0x000010, "Wrong size on EndButton_SetColorAndOpacity");
static_assert(offsetof(EndButton_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndButton_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndButton.SetFakeDisabled
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetFakeDisabled final
{
public:
	bool                                          bInFakeDisabled;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetFakeDisabled) == 0x000001, "Wrong alignment on EndButton_SetFakeDisabled");
static_assert(sizeof(EndButton_SetFakeDisabled) == 0x000001, "Wrong size on EndButton_SetFakeDisabled");
static_assert(offsetof(EndButton_SetFakeDisabled, bInFakeDisabled) == 0x000000, "Member 'EndButton_SetFakeDisabled::bInFakeDisabled' has a wrong offset!");

// Function EndGame.EndButton.SetForceHovered
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetForceHovered final
{
public:
	bool                                          bInHovered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetForceHovered) == 0x000001, "Wrong alignment on EndButton_SetForceHovered");
static_assert(sizeof(EndButton_SetForceHovered) == 0x000001, "Wrong size on EndButton_SetForceHovered");
static_assert(offsetof(EndButton_SetForceHovered, bInHovered) == 0x000000, "Member 'EndButton_SetForceHovered::bInHovered' has a wrong offset!");

// Function EndGame.EndButton.SetGuideText
// 0x0010 (0x0010 - 0x0000)
struct EndButton_SetGuideText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetGuideText) == 0x000008, "Wrong alignment on EndButton_SetGuideText");
static_assert(sizeof(EndButton_SetGuideText) == 0x000010, "Wrong size on EndButton_SetGuideText");
static_assert(offsetof(EndButton_SetGuideText, InText) == 0x000000, "Member 'EndButton_SetGuideText::InText' has a wrong offset!");

// Function EndGame.EndButton.SetHelpText
// 0x0010 (0x0010 - 0x0000)
struct EndButton_SetHelpText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetHelpText) == 0x000008, "Wrong alignment on EndButton_SetHelpText");
static_assert(sizeof(EndButton_SetHelpText) == 0x000010, "Wrong size on EndButton_SetHelpText");
static_assert(offsetof(EndButton_SetHelpText, InText) == 0x000000, "Member 'EndButton_SetHelpText::InText' has a wrong offset!");

// Function EndGame.EndButton.SetIgnoreKeyRepeat
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetIgnoreKeyRepeat final
{
public:
	bool                                          bInIgnoreKeyRepeat;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetIgnoreKeyRepeat) == 0x000001, "Wrong alignment on EndButton_SetIgnoreKeyRepeat");
static_assert(sizeof(EndButton_SetIgnoreKeyRepeat) == 0x000001, "Wrong size on EndButton_SetIgnoreKeyRepeat");
static_assert(offsetof(EndButton_SetIgnoreKeyRepeat, bInIgnoreKeyRepeat) == 0x000000, "Member 'EndButton_SetIgnoreKeyRepeat::bInIgnoreKeyRepeat' has a wrong offset!");

// Function EndGame.EndButton.SetIsFocusable
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetIsFocusable final
{
public:
	bool                                          bInIsFocusable;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetIsFocusable) == 0x000001, "Wrong alignment on EndButton_SetIsFocusable");
static_assert(sizeof(EndButton_SetIsFocusable) == 0x000001, "Wrong size on EndButton_SetIsFocusable");
static_assert(offsetof(EndButton_SetIsFocusable, bInIsFocusable) == 0x000000, "Member 'EndButton_SetIsFocusable::bInIsFocusable' has a wrong offset!");

// Function EndGame.EndButton.SetPressMethod
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetPressMethod final
{
public:
	EButtonPressMethod                            InPressMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetPressMethod) == 0x000001, "Wrong alignment on EndButton_SetPressMethod");
static_assert(sizeof(EndButton_SetPressMethod) == 0x000001, "Wrong size on EndButton_SetPressMethod");
static_assert(offsetof(EndButton_SetPressMethod, InPressMethod) == 0x000000, "Member 'EndButton_SetPressMethod::InPressMethod' has a wrong offset!");

// Function EndGame.EndButton.SetStyle
// 0x0278 (0x0278 - 0x0000)
struct EndButton_SetStyle final
{
public:
	struct FButtonStyle                           InStyle;                                           // 0x0000(0x0278)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetStyle) == 0x000008, "Wrong alignment on EndButton_SetStyle");
static_assert(sizeof(EndButton_SetStyle) == 0x000278, "Wrong size on EndButton_SetStyle");
static_assert(offsetof(EndButton_SetStyle, InStyle) == 0x000000, "Member 'EndButton_SetStyle::InStyle' has a wrong offset!");

// Function EndGame.EndButton.SetTouchMethod
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetTouchMethod final
{
public:
	EButtonTouchMethod                            InTouchMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetTouchMethod) == 0x000001, "Wrong alignment on EndButton_SetTouchMethod");
static_assert(sizeof(EndButton_SetTouchMethod) == 0x000001, "Wrong size on EndButton_SetTouchMethod");
static_assert(offsetof(EndButton_SetTouchMethod, InTouchMethod) == 0x000000, "Member 'EndButton_SetTouchMethod::InTouchMethod' has a wrong offset!");

// Function EndGame.EndButton.GetCanPress
// 0x0001 (0x0001 - 0x0000)
struct EndButton_GetCanPress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_GetCanPress) == 0x000001, "Wrong alignment on EndButton_GetCanPress");
static_assert(sizeof(EndButton_GetCanPress) == 0x000001, "Wrong size on EndButton_GetCanPress");
static_assert(offsetof(EndButton_GetCanPress, ReturnValue) == 0x000000, "Member 'EndButton_GetCanPress::ReturnValue' has a wrong offset!");

// Function EndGame.EndButton.GetIgnoreKeyRepeat
// 0x0001 (0x0001 - 0x0000)
struct EndButton_GetIgnoreKeyRepeat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_GetIgnoreKeyRepeat) == 0x000001, "Wrong alignment on EndButton_GetIgnoreKeyRepeat");
static_assert(sizeof(EndButton_GetIgnoreKeyRepeat) == 0x000001, "Wrong size on EndButton_GetIgnoreKeyRepeat");
static_assert(offsetof(EndButton_GetIgnoreKeyRepeat, ReturnValue) == 0x000000, "Member 'EndButton_GetIgnoreKeyRepeat::ReturnValue' has a wrong offset!");

// Function EndGame.EndButton.GetIsFocusable
// 0x0001 (0x0001 - 0x0000)
struct EndButton_GetIsFocusable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_GetIsFocusable) == 0x000001, "Wrong alignment on EndButton_GetIsFocusable");
static_assert(sizeof(EndButton_GetIsFocusable) == 0x000001, "Wrong size on EndButton_GetIsFocusable");
static_assert(offsetof(EndButton_GetIsFocusable, ReturnValue) == 0x000000, "Member 'EndButton_GetIsFocusable::ReturnValue' has a wrong offset!");

// Function EndGame.EndButton.GetIsForceHovered
// 0x0001 (0x0001 - 0x0000)
struct EndButton_GetIsForceHovered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_GetIsForceHovered) == 0x000001, "Wrong alignment on EndButton_GetIsForceHovered");
static_assert(sizeof(EndButton_GetIsForceHovered) == 0x000001, "Wrong size on EndButton_GetIsForceHovered");
static_assert(offsetof(EndButton_GetIsForceHovered, ReturnValue) == 0x000000, "Member 'EndButton_GetIsForceHovered::ReturnValue' has a wrong offset!");

// Function EndGame.EndButton.IsFakeDisabled
// 0x0001 (0x0001 - 0x0000)
struct EndButton_IsFakeDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_IsFakeDisabled) == 0x000001, "Wrong alignment on EndButton_IsFakeDisabled");
static_assert(sizeof(EndButton_IsFakeDisabled) == 0x000001, "Wrong size on EndButton_IsFakeDisabled");
static_assert(offsetof(EndButton_IsFakeDisabled, ReturnValue) == 0x000000, "Member 'EndButton_IsFakeDisabled::ReturnValue' has a wrong offset!");

// Function EndGame.EndButton.IsPressed
// 0x0001 (0x0001 - 0x0000)
struct EndButton_IsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_IsPressed) == 0x000001, "Wrong alignment on EndButton_IsPressed");
static_assert(sizeof(EndButton_IsPressed) == 0x000001, "Wrong size on EndButton_IsPressed");
static_assert(offsetof(EndButton_IsPressed, ReturnValue) == 0x000000, "Member 'EndButton_IsPressed::ReturnValue' has a wrong offset!");

// Function EndGame.EndButtonSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndButtonSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButtonSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on EndButtonSlot_SetHorizontalAlignment");
static_assert(sizeof(EndButtonSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on EndButtonSlot_SetHorizontalAlignment");
static_assert(offsetof(EndButtonSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'EndButtonSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function EndGame.EndButtonSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndButtonSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButtonSlot_SetPadding) == 0x000004, "Wrong alignment on EndButtonSlot_SetPadding");
static_assert(sizeof(EndButtonSlot_SetPadding) == 0x000010, "Wrong size on EndButtonSlot_SetPadding");
static_assert(offsetof(EndButtonSlot_SetPadding, InPadding) == 0x000000, "Member 'EndButtonSlot_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndButtonSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndButtonSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButtonSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on EndButtonSlot_SetVerticalAlignment");
static_assert(sizeof(EndButtonSlot_SetVerticalAlignment) == 0x000001, "Wrong size on EndButtonSlot_SetVerticalAlignment");
static_assert(offsetof(EndButtonSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'EndButtonSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function EndGame.EndCameraAPI.ActivateLookAtCamera
// 0x0018 (0x0018 - 0x0000)
struct EndCameraAPI_ActivateLookAtCamera final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DatatableName;                                     // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInputRotation;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndCameraLookAtDeactivateType                deactivateType;                                    // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTurnBack;                                       // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCameraAPI_ActivateLookAtCamera) == 0x000004, "Wrong alignment on EndCameraAPI_ActivateLookAtCamera");
static_assert(sizeof(EndCameraAPI_ActivateLookAtCamera) == 0x000018, "Wrong size on EndCameraAPI_ActivateLookAtCamera");
static_assert(offsetof(EndCameraAPI_ActivateLookAtCamera, TargetLocation) == 0x000000, "Member 'EndCameraAPI_ActivateLookAtCamera::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndCameraAPI_ActivateLookAtCamera, DatatableName) == 0x00000C, "Member 'EndCameraAPI_ActivateLookAtCamera::DatatableName' has a wrong offset!");
static_assert(offsetof(EndCameraAPI_ActivateLookAtCamera, bEnableInputRotation) == 0x000014, "Member 'EndCameraAPI_ActivateLookAtCamera::bEnableInputRotation' has a wrong offset!");
static_assert(offsetof(EndCameraAPI_ActivateLookAtCamera, deactivateType) == 0x000015, "Member 'EndCameraAPI_ActivateLookAtCamera::deactivateType' has a wrong offset!");
static_assert(offsetof(EndCameraAPI_ActivateLookAtCamera, bIsTurnBack) == 0x000016, "Member 'EndCameraAPI_ActivateLookAtCamera::bIsTurnBack' has a wrong offset!");

// Function EndGame.EndCameraAPI.DeactivateFieldCameraModule
// 0x0001 (0x0001 - 0x0000)
struct EndCameraAPI_DeactivateFieldCameraModule final
{
public:
	EEndCameraModuleLayer                         moduleType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraAPI_DeactivateFieldCameraModule) == 0x000001, "Wrong alignment on EndCameraAPI_DeactivateFieldCameraModule");
static_assert(sizeof(EndCameraAPI_DeactivateFieldCameraModule) == 0x000001, "Wrong size on EndCameraAPI_DeactivateFieldCameraModule");
static_assert(offsetof(EndCameraAPI_DeactivateFieldCameraModule, moduleType) == 0x000000, "Member 'EndCameraAPI_DeactivateFieldCameraModule::moduleType' has a wrong offset!");

// Function EndGame.EndCameraAPI.ResetOverrideAdjustLengthBattleCamera
// 0x0008 (0x0008 - 0x0000)
struct EndCameraAPI_ResetOverrideAdjustLengthBattleCamera final
{
public:
	class FName                                   CharaSpecID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraAPI_ResetOverrideAdjustLengthBattleCamera) == 0x000004, "Wrong alignment on EndCameraAPI_ResetOverrideAdjustLengthBattleCamera");
static_assert(sizeof(EndCameraAPI_ResetOverrideAdjustLengthBattleCamera) == 0x000008, "Wrong size on EndCameraAPI_ResetOverrideAdjustLengthBattleCamera");
static_assert(offsetof(EndCameraAPI_ResetOverrideAdjustLengthBattleCamera, CharaSpecID) == 0x000000, "Member 'EndCameraAPI_ResetOverrideAdjustLengthBattleCamera::CharaSpecID' has a wrong offset!");

// Function EndGame.EndCameraAPI.SetOverrideAdjustLengthBattleCamera
// 0x0014 (0x0014 - 0x0000)
struct EndCameraAPI_SetOverrideAdjustLengthBattleCamera final
{
public:
	class FName                                   CharaSpecID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraModuleID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToLockOnCamera;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCameraAPI_SetOverrideAdjustLengthBattleCamera) == 0x000004, "Wrong alignment on EndCameraAPI_SetOverrideAdjustLengthBattleCamera");
static_assert(sizeof(EndCameraAPI_SetOverrideAdjustLengthBattleCamera) == 0x000014, "Wrong size on EndCameraAPI_SetOverrideAdjustLengthBattleCamera");
static_assert(offsetof(EndCameraAPI_SetOverrideAdjustLengthBattleCamera, CharaSpecID) == 0x000000, "Member 'EndCameraAPI_SetOverrideAdjustLengthBattleCamera::CharaSpecID' has a wrong offset!");
static_assert(offsetof(EndCameraAPI_SetOverrideAdjustLengthBattleCamera, CameraModuleID) == 0x000008, "Member 'EndCameraAPI_SetOverrideAdjustLengthBattleCamera::CameraModuleID' has a wrong offset!");
static_assert(offsetof(EndCameraAPI_SetOverrideAdjustLengthBattleCamera, bApplyToLockOnCamera) == 0x000010, "Member 'EndCameraAPI_SetOverrideAdjustLengthBattleCamera::bApplyToLockOnCamera' has a wrong offset!");

// Function EndGame.EndCameraRig_Rail.OnBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct EndCameraRig_Rail_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraRig_Rail_OnBeginOverlap) == 0x000008, "Wrong alignment on EndCameraRig_Rail_OnBeginOverlap");
static_assert(sizeof(EndCameraRig_Rail_OnBeginOverlap) == 0x0000B0, "Wrong size on EndCameraRig_Rail_OnBeginOverlap");
static_assert(offsetof(EndCameraRig_Rail_OnBeginOverlap, OverlappedComp) == 0x000000, "Member 'EndCameraRig_Rail_OnBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(EndCameraRig_Rail_OnBeginOverlap, Other) == 0x000008, "Member 'EndCameraRig_Rail_OnBeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(EndCameraRig_Rail_OnBeginOverlap, OtherComp) == 0x000010, "Member 'EndCameraRig_Rail_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndCameraRig_Rail_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'EndCameraRig_Rail_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EndCameraRig_Rail_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'EndCameraRig_Rail_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EndCameraRig_Rail_OnBeginOverlap, SweepResult) == 0x000020, "Member 'EndCameraRig_Rail_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function EndGame.EndCameraRig_Rail.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct EndCameraRig_Rail_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCameraRig_Rail_OnEndOverlap) == 0x000008, "Wrong alignment on EndCameraRig_Rail_OnEndOverlap");
static_assert(sizeof(EndCameraRig_Rail_OnEndOverlap) == 0x000020, "Wrong size on EndCameraRig_Rail_OnEndOverlap");
static_assert(offsetof(EndCameraRig_Rail_OnEndOverlap, OverlappedComp) == 0x000000, "Member 'EndCameraRig_Rail_OnEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(EndCameraRig_Rail_OnEndOverlap, Other) == 0x000008, "Member 'EndCameraRig_Rail_OnEndOverlap::Other' has a wrong offset!");
static_assert(offsetof(EndCameraRig_Rail_OnEndOverlap, OtherComp) == 0x000010, "Member 'EndCameraRig_Rail_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndCameraRig_Rail_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'EndCameraRig_Rail_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function EndGame.EndMenuViewport.SetViewLocation
// 0x000C (0x000C - 0x0000)
struct EndMenuViewport_SetViewLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_SetViewLocation) == 0x000004, "Wrong alignment on EndMenuViewport_SetViewLocation");
static_assert(sizeof(EndMenuViewport_SetViewLocation) == 0x00000C, "Wrong size on EndMenuViewport_SetViewLocation");
static_assert(offsetof(EndMenuViewport_SetViewLocation, Location) == 0x000000, "Member 'EndMenuViewport_SetViewLocation::Location' has a wrong offset!");

// Function EndGame.EndMenuViewport.SetViewRotation
// 0x000C (0x000C - 0x0000)
struct EndMenuViewport_SetViewRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_SetViewRotation) == 0x000004, "Wrong alignment on EndMenuViewport_SetViewRotation");
static_assert(sizeof(EndMenuViewport_SetViewRotation) == 0x00000C, "Wrong size on EndMenuViewport_SetViewRotation");
static_assert(offsetof(EndMenuViewport_SetViewRotation, Rotation) == 0x000000, "Member 'EndMenuViewport_SetViewRotation::Rotation' has a wrong offset!");

// Function EndGame.EndMenuViewport.Spawn
// 0x0010 (0x0010 - 0x0000)
struct EndMenuViewport_Spawn final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_Spawn) == 0x000008, "Wrong alignment on EndMenuViewport_Spawn");
static_assert(sizeof(EndMenuViewport_Spawn) == 0x000010, "Wrong size on EndMenuViewport_Spawn");
static_assert(offsetof(EndMenuViewport_Spawn, ActorClass) == 0x000000, "Member 'EndMenuViewport_Spawn::ActorClass' has a wrong offset!");
static_assert(offsetof(EndMenuViewport_Spawn, ReturnValue) == 0x000008, "Member 'EndMenuViewport_Spawn::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuViewport.GetViewLocation
// 0x000C (0x000C - 0x0000)
struct EndMenuViewport_GetViewLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_GetViewLocation) == 0x000004, "Wrong alignment on EndMenuViewport_GetViewLocation");
static_assert(sizeof(EndMenuViewport_GetViewLocation) == 0x00000C, "Wrong size on EndMenuViewport_GetViewLocation");
static_assert(offsetof(EndMenuViewport_GetViewLocation, ReturnValue) == 0x000000, "Member 'EndMenuViewport_GetViewLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuViewport.GetViewportWorld
// 0x0008 (0x0008 - 0x0000)
struct EndMenuViewport_GetViewportWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_GetViewportWorld) == 0x000008, "Wrong alignment on EndMenuViewport_GetViewportWorld");
static_assert(sizeof(EndMenuViewport_GetViewportWorld) == 0x000008, "Wrong size on EndMenuViewport_GetViewportWorld");
static_assert(offsetof(EndMenuViewport_GetViewportWorld, ReturnValue) == 0x000000, "Member 'EndMenuViewport_GetViewportWorld::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuViewport.GetViewRotation
// 0x000C (0x000C - 0x0000)
struct EndMenuViewport_GetViewRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_GetViewRotation) == 0x000004, "Wrong alignment on EndMenuViewport_GetViewRotation");
static_assert(sizeof(EndMenuViewport_GetViewRotation) == 0x00000C, "Wrong size on EndMenuViewport_GetViewRotation");
static_assert(offsetof(EndMenuViewport_GetViewRotation, ReturnValue) == 0x000000, "Member 'EndMenuViewport_GetViewRotation::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanel.AddChildToCanvas
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanel_AddChildToCanvas final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndCanvasPanelSlot*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanel_AddChildToCanvas) == 0x000008, "Wrong alignment on EndCanvasPanel_AddChildToCanvas");
static_assert(sizeof(EndCanvasPanel_AddChildToCanvas) == 0x000010, "Wrong size on EndCanvasPanel_AddChildToCanvas");
static_assert(offsetof(EndCanvasPanel_AddChildToCanvas, Content) == 0x000000, "Member 'EndCanvasPanel_AddChildToCanvas::Content' has a wrong offset!");
static_assert(offsetof(EndCanvasPanel_AddChildToCanvas, ReturnValue) == 0x000008, "Member 'EndCanvasPanel_AddChildToCanvas::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanel.SetContentColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanel_SetContentColorAndOpacity final
{
public:
	struct FLinearColor                           InContentColorAndOpacity;                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanel_SetContentColorAndOpacity) == 0x000004, "Wrong alignment on EndCanvasPanel_SetContentColorAndOpacity");
static_assert(sizeof(EndCanvasPanel_SetContentColorAndOpacity) == 0x000010, "Wrong size on EndCanvasPanel_SetContentColorAndOpacity");
static_assert(offsetof(EndCanvasPanel_SetContentColorAndOpacity, InContentColorAndOpacity) == 0x000000, "Member 'EndCanvasPanel_SetContentColorAndOpacity::InContentColorAndOpacity' has a wrong offset!");

// Function EndGame.EndCanvasPanel.SetExplicitChildZOrder
// 0x0001 (0x0001 - 0x0000)
struct EndCanvasPanel_SetExplicitChildZOrder final
{
public:
	bool                                          bInExplicitChildZOrder;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanel_SetExplicitChildZOrder) == 0x000001, "Wrong alignment on EndCanvasPanel_SetExplicitChildZOrder");
static_assert(sizeof(EndCanvasPanel_SetExplicitChildZOrder) == 0x000001, "Wrong size on EndCanvasPanel_SetExplicitChildZOrder");
static_assert(offsetof(EndCanvasPanel_SetExplicitChildZOrder, bInExplicitChildZOrder) == 0x000000, "Member 'EndCanvasPanel_SetExplicitChildZOrder::bInExplicitChildZOrder' has a wrong offset!");

// Function EndGame.EndCanvasPanel.SetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanel_SetFieldOfView final
{
public:
	float                                         InFieldOfView;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanel_SetFieldOfView) == 0x000004, "Wrong alignment on EndCanvasPanel_SetFieldOfView");
static_assert(sizeof(EndCanvasPanel_SetFieldOfView) == 0x000004, "Wrong size on EndCanvasPanel_SetFieldOfView");
static_assert(offsetof(EndCanvasPanel_SetFieldOfView, InFieldOfView) == 0x000000, "Member 'EndCanvasPanel_SetFieldOfView::InFieldOfView' has a wrong offset!");

// Function EndGame.EndCanvasPanel.SetProjectionMode
// 0x0001 (0x0001 - 0x0000)
struct EndCanvasPanel_SetProjectionMode final
{
public:
	ECameraProjectionMode                         InProjectionMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanel_SetProjectionMode) == 0x000001, "Wrong alignment on EndCanvasPanel_SetProjectionMode");
static_assert(sizeof(EndCanvasPanel_SetProjectionMode) == 0x000001, "Wrong size on EndCanvasPanel_SetProjectionMode");
static_assert(offsetof(EndCanvasPanel_SetProjectionMode, InProjectionMode) == 0x000000, "Member 'EndCanvasPanel_SetProjectionMode::InProjectionMode' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetAlignment
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_SetAlignment final
{
public:
	struct FVector2D                              InAlignment;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetAlignment) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetAlignment");
static_assert(sizeof(EndCanvasPanelSlot_SetAlignment) == 0x000008, "Wrong size on EndCanvasPanelSlot_SetAlignment");
static_assert(offsetof(EndCanvasPanelSlot_SetAlignment, InAlignment) == 0x000000, "Member 'EndCanvasPanelSlot_SetAlignment::InAlignment' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetAnchors
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanelSlot_SetAnchors final
{
public:
	struct FAnchors                               InAnchors;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetAnchors) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetAnchors");
static_assert(sizeof(EndCanvasPanelSlot_SetAnchors) == 0x000010, "Wrong size on EndCanvasPanelSlot_SetAnchors");
static_assert(offsetof(EndCanvasPanelSlot_SetAnchors, InAnchors) == 0x000000, "Member 'EndCanvasPanelSlot_SetAnchors::InAnchors' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetAutoSize
// 0x0001 (0x0001 - 0x0000)
struct EndCanvasPanelSlot_SetAutoSize final
{
public:
	bool                                          InbAutoSize;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetAutoSize) == 0x000001, "Wrong alignment on EndCanvasPanelSlot_SetAutoSize");
static_assert(sizeof(EndCanvasPanelSlot_SetAutoSize) == 0x000001, "Wrong size on EndCanvasPanelSlot_SetAutoSize");
static_assert(offsetof(EndCanvasPanelSlot_SetAutoSize, InbAutoSize) == 0x000000, "Member 'EndCanvasPanelSlot_SetAutoSize::InbAutoSize' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetLayout
// 0x0028 (0x0028 - 0x0000)
struct EndCanvasPanelSlot_SetLayout final
{
public:
	struct FAnchorData                            InLayoutData;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetLayout) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetLayout");
static_assert(sizeof(EndCanvasPanelSlot_SetLayout) == 0x000028, "Wrong size on EndCanvasPanelSlot_SetLayout");
static_assert(offsetof(EndCanvasPanelSlot_SetLayout, InLayoutData) == 0x000000, "Member 'EndCanvasPanelSlot_SetLayout::InLayoutData' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetMaximum
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_SetMaximum final
{
public:
	struct FVector2D                              InMaximumAnchors;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetMaximum) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetMaximum");
static_assert(sizeof(EndCanvasPanelSlot_SetMaximum) == 0x000008, "Wrong size on EndCanvasPanelSlot_SetMaximum");
static_assert(offsetof(EndCanvasPanelSlot_SetMaximum, InMaximumAnchors) == 0x000000, "Member 'EndCanvasPanelSlot_SetMaximum::InMaximumAnchors' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetMinimum
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_SetMinimum final
{
public:
	struct FVector2D                              InMinimumAnchors;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetMinimum) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetMinimum");
static_assert(sizeof(EndCanvasPanelSlot_SetMinimum) == 0x000008, "Wrong size on EndCanvasPanelSlot_SetMinimum");
static_assert(offsetof(EndCanvasPanelSlot_SetMinimum, InMinimumAnchors) == 0x000000, "Member 'EndCanvasPanelSlot_SetMinimum::InMinimumAnchors' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetOffsets
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanelSlot_SetOffsets final
{
public:
	struct FMargin                                InOffset;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetOffsets) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetOffsets");
static_assert(sizeof(EndCanvasPanelSlot_SetOffsets) == 0x000010, "Wrong size on EndCanvasPanelSlot_SetOffsets");
static_assert(offsetof(EndCanvasPanelSlot_SetOffsets, InOffset) == 0x000000, "Member 'EndCanvasPanelSlot_SetOffsets::InOffset' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_SetPosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetPosition) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetPosition");
static_assert(sizeof(EndCanvasPanelSlot_SetPosition) == 0x000008, "Wrong size on EndCanvasPanelSlot_SetPosition");
static_assert(offsetof(EndCanvasPanelSlot_SetPosition, InPosition) == 0x000000, "Member 'EndCanvasPanelSlot_SetPosition::InPosition' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetSize
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_SetSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetSize) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetSize");
static_assert(sizeof(EndCanvasPanelSlot_SetSize) == 0x000008, "Wrong size on EndCanvasPanelSlot_SetSize");
static_assert(offsetof(EndCanvasPanelSlot_SetSize, InSize) == 0x000000, "Member 'EndCanvasPanelSlot_SetSize::InSize' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetXAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_SetXAngle final
{
public:
	float                                         InYAngle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetXAngle) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetXAngle");
static_assert(sizeof(EndCanvasPanelSlot_SetXAngle) == 0x000004, "Wrong size on EndCanvasPanelSlot_SetXAngle");
static_assert(offsetof(EndCanvasPanelSlot_SetXAngle, InYAngle) == 0x000000, "Member 'EndCanvasPanelSlot_SetXAngle::InYAngle' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetYAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_SetYAngle final
{
public:
	float                                         InYAngle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetYAngle) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetYAngle");
static_assert(sizeof(EndCanvasPanelSlot_SetYAngle) == 0x000004, "Wrong size on EndCanvasPanelSlot_SetYAngle");
static_assert(offsetof(EndCanvasPanelSlot_SetYAngle, InYAngle) == 0x000000, "Member 'EndCanvasPanelSlot_SetYAngle::InYAngle' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetZOrder
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_SetZOrder final
{
public:
	int32                                         InZOrder;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetZOrder) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetZOrder");
static_assert(sizeof(EndCanvasPanelSlot_SetZOrder) == 0x000004, "Wrong size on EndCanvasPanelSlot_SetZOrder");
static_assert(offsetof(EndCanvasPanelSlot_SetZOrder, InZOrder) == 0x000000, "Member 'EndCanvasPanelSlot_SetZOrder::InZOrder' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetAlignment
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_GetAlignment final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetAlignment) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetAlignment");
static_assert(sizeof(EndCanvasPanelSlot_GetAlignment) == 0x000008, "Wrong size on EndCanvasPanelSlot_GetAlignment");
static_assert(offsetof(EndCanvasPanelSlot_GetAlignment, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetAlignment::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetAnchors
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanelSlot_GetAnchors final
{
public:
	struct FAnchors                               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetAnchors) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetAnchors");
static_assert(sizeof(EndCanvasPanelSlot_GetAnchors) == 0x000010, "Wrong size on EndCanvasPanelSlot_GetAnchors");
static_assert(offsetof(EndCanvasPanelSlot_GetAnchors, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetAnchors::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetAutoSize
// 0x0001 (0x0001 - 0x0000)
struct EndCanvasPanelSlot_GetAutoSize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetAutoSize) == 0x000001, "Wrong alignment on EndCanvasPanelSlot_GetAutoSize");
static_assert(sizeof(EndCanvasPanelSlot_GetAutoSize) == 0x000001, "Wrong size on EndCanvasPanelSlot_GetAutoSize");
static_assert(offsetof(EndCanvasPanelSlot_GetAutoSize, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetAutoSize::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetLayout
// 0x0028 (0x0028 - 0x0000)
struct EndCanvasPanelSlot_GetLayout final
{
public:
	struct FAnchorData                            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetLayout) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetLayout");
static_assert(sizeof(EndCanvasPanelSlot_GetLayout) == 0x000028, "Wrong size on EndCanvasPanelSlot_GetLayout");
static_assert(offsetof(EndCanvasPanelSlot_GetLayout, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetLayout::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetOffsets
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanelSlot_GetOffsets final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetOffsets) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetOffsets");
static_assert(sizeof(EndCanvasPanelSlot_GetOffsets) == 0x000010, "Wrong size on EndCanvasPanelSlot_GetOffsets");
static_assert(offsetof(EndCanvasPanelSlot_GetOffsets, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetOffsets::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetPosition
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_GetPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetPosition) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetPosition");
static_assert(sizeof(EndCanvasPanelSlot_GetPosition) == 0x000008, "Wrong size on EndCanvasPanelSlot_GetPosition");
static_assert(offsetof(EndCanvasPanelSlot_GetPosition, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetSize
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_GetSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetSize) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetSize");
static_assert(sizeof(EndCanvasPanelSlot_GetSize) == 0x000008, "Wrong size on EndCanvasPanelSlot_GetSize");
static_assert(offsetof(EndCanvasPanelSlot_GetSize, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetSize::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetXAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_GetXAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetXAngle) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetXAngle");
static_assert(sizeof(EndCanvasPanelSlot_GetXAngle) == 0x000004, "Wrong size on EndCanvasPanelSlot_GetXAngle");
static_assert(offsetof(EndCanvasPanelSlot_GetXAngle, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetXAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetYAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_GetYAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetYAngle) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetYAngle");
static_assert(sizeof(EndCanvasPanelSlot_GetYAngle) == 0x000004, "Wrong size on EndCanvasPanelSlot_GetYAngle");
static_assert(offsetof(EndCanvasPanelSlot_GetYAngle, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetYAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetZOrder
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_GetZOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetZOrder) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetZOrder");
static_assert(sizeof(EndCanvasPanelSlot_GetZOrder) == 0x000004, "Wrong size on EndCanvasPanelSlot_GetZOrder");
static_assert(offsetof(EndCanvasPanelSlot_GetZOrder, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetZOrder::ReturnValue' has a wrong offset!");

// Function EndGame.EndCardChallengeMenu.OnSelectListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndCardChallengeMenu_OnSelectListPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardChallengeMenu_OnSelectListPressedItem) == 0x000004, "Wrong alignment on EndCardChallengeMenu_OnSelectListPressedItem");
static_assert(sizeof(EndCardChallengeMenu_OnSelectListPressedItem) == 0x000004, "Wrong size on EndCardChallengeMenu_OnSelectListPressedItem");
static_assert(offsetof(EndCardChallengeMenu_OnSelectListPressedItem, ItemIndex) == 0x000000, "Member 'EndCardChallengeMenu_OnSelectListPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndCardChallengeMenu.OnSelectListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndCardChallengeMenu_OnSelectListSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCardChallengeMenu_OnSelectListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndCardChallengeMenu_OnSelectListSelectedIndexChanged");
static_assert(sizeof(EndCardChallengeMenu_OnSelectListSelectedIndexChanged) == 0x000004, "Wrong size on EndCardChallengeMenu_OnSelectListSelectedIndexChanged");
static_assert(offsetof(EndCardChallengeMenu_OnSelectListSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndCardChallengeMenu_OnSelectListSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndCardChallengeMenu.OnSelectListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCardChallengeMenu_OnSelectListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCardChallengeMenu_OnSelectListSetupItem) == 0x000008, "Wrong alignment on EndCardChallengeMenu_OnSelectListSetupItem");
static_assert(sizeof(EndCardChallengeMenu_OnSelectListSetupItem) == 0x000010, "Wrong size on EndCardChallengeMenu_OnSelectListSetupItem");
static_assert(offsetof(EndCardChallengeMenu_OnSelectListSetupItem, ItemWidget) == 0x000000, "Member 'EndCardChallengeMenu_OnSelectListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCardChallengeMenu_OnSelectListSetupItem, ItemIndex) == 0x000008, "Member 'EndCardChallengeMenu_OnSelectListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndCardChallengeMenu.OnTabMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCardChallengeMenu_OnTabMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCardChallengeMenu_OnTabMenuSetupItem) == 0x000008, "Wrong alignment on EndCardChallengeMenu_OnTabMenuSetupItem");
static_assert(sizeof(EndCardChallengeMenu_OnTabMenuSetupItem) == 0x000010, "Wrong size on EndCardChallengeMenu_OnTabMenuSetupItem");
static_assert(offsetof(EndCardChallengeMenu_OnTabMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndCardChallengeMenu_OnTabMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCardChallengeMenu_OnTabMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndCardChallengeMenu_OnTabMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndCardChallengeMenu.OnTermListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCardChallengeMenu_OnTermListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCardChallengeMenu_OnTermListSetupItem) == 0x000008, "Wrong alignment on EndCardChallengeMenu_OnTermListSetupItem");
static_assert(sizeof(EndCardChallengeMenu_OnTermListSetupItem) == 0x000010, "Wrong size on EndCardChallengeMenu_OnTermListSetupItem");
static_assert(offsetof(EndCardChallengeMenu_OnTermListSetupItem, ItemWidget) == 0x000000, "Member 'EndCardChallengeMenu_OnTermListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCardChallengeMenu_OnTermListSetupItem, ItemIndex) == 0x000008, "Member 'EndCardChallengeMenu_OnTermListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMateriaSetAllWindow.OnMateriaSetMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMateriaSetAllWindow_OnMateriaSetMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMateriaSetAllWindow_OnMateriaSetMeasureItem) == 0x000004, "Wrong alignment on EndMateriaSetAllWindow_OnMateriaSetMeasureItem");
static_assert(sizeof(EndMateriaSetAllWindow_OnMateriaSetMeasureItem) == 0x00000C, "Wrong size on EndMateriaSetAllWindow_OnMateriaSetMeasureItem");
static_assert(offsetof(EndMateriaSetAllWindow_OnMateriaSetMeasureItem, CellIndex) == 0x000000, "Member 'EndMateriaSetAllWindow_OnMateriaSetMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMateriaSetAllWindow_OnMateriaSetMeasureItem, ReturnValue) == 0x000004, "Member 'EndMateriaSetAllWindow_OnMateriaSetMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMateriaSetAllWindow.OnMateriaSetPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMateriaSetAllWindow_OnMateriaSetPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMateriaSetAllWindow_OnMateriaSetPressedItem) == 0x000004, "Wrong alignment on EndMateriaSetAllWindow_OnMateriaSetPressedItem");
static_assert(sizeof(EndMateriaSetAllWindow_OnMateriaSetPressedItem) == 0x000004, "Wrong size on EndMateriaSetAllWindow_OnMateriaSetPressedItem");
static_assert(offsetof(EndMateriaSetAllWindow_OnMateriaSetPressedItem, CellIndex) == 0x000000, "Member 'EndMateriaSetAllWindow_OnMateriaSetPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMateriaSetAllWindow.OnMateriaSetSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMateriaSetAllWindow_OnMateriaSetSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMateriaSetAllWindow_OnMateriaSetSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMateriaSetAllWindow_OnMateriaSetSelectedIndexChanged");
static_assert(sizeof(EndMateriaSetAllWindow_OnMateriaSetSelectedIndexChanged) == 0x000004, "Wrong size on EndMateriaSetAllWindow_OnMateriaSetSelectedIndexChanged");
static_assert(offsetof(EndMateriaSetAllWindow_OnMateriaSetSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMateriaSetAllWindow_OnMateriaSetSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMateriaSetAllWindow.OnMateriaSetSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMateriaSetAllWindow_OnMateriaSetSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMateriaSetAllWindow_OnMateriaSetSetupItem) == 0x000008, "Wrong alignment on EndMateriaSetAllWindow_OnMateriaSetSetupItem");
static_assert(sizeof(EndMateriaSetAllWindow_OnMateriaSetSetupItem) == 0x000010, "Wrong size on EndMateriaSetAllWindow_OnMateriaSetSetupItem");
static_assert(offsetof(EndMateriaSetAllWindow_OnMateriaSetSetupItem, ItemWidget) == 0x000000, "Member 'EndMateriaSetAllWindow_OnMateriaSetSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMateriaSetAllWindow_OnMateriaSetSetupItem, CellIndex) == 0x000008, "Member 'EndMateriaSetAllWindow_OnMateriaSetSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipMenu.OnCommandEquipCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipMenu_OnCommandEquipCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipMenu_OnCommandEquipCellSetup) == 0x000008, "Wrong alignment on EndMainEquipMenu_OnCommandEquipCellSetup");
static_assert(sizeof(EndMainEquipMenu_OnCommandEquipCellSetup) == 0x000010, "Wrong size on EndMainEquipMenu_OnCommandEquipCellSetup");
static_assert(offsetof(EndMainEquipMenu_OnCommandEquipCellSetup, ItemWidget) == 0x000000, "Member 'EndMainEquipMenu_OnCommandEquipCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipMenu_OnCommandEquipCellSetup, ItemIndex) == 0x000008, "Member 'EndMainEquipMenu_OnCommandEquipCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainEquipMenu.OnCommandEquipStatusCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipMenu_OnCommandEquipStatusCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipMenu_OnCommandEquipStatusCellSetup) == 0x000008, "Wrong alignment on EndMainEquipMenu_OnCommandEquipStatusCellSetup");
static_assert(sizeof(EndMainEquipMenu_OnCommandEquipStatusCellSetup) == 0x000010, "Wrong size on EndMainEquipMenu_OnCommandEquipStatusCellSetup");
static_assert(offsetof(EndMainEquipMenu_OnCommandEquipStatusCellSetup, ItemWidget) == 0x000000, "Member 'EndMainEquipMenu_OnCommandEquipStatusCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipMenu_OnCommandEquipStatusCellSetup, ItemIndex) == 0x000008, "Member 'EndMainEquipMenu_OnCommandEquipStatusCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainEquipMenu.OnCommandMemberCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipMenu_OnCommandMemberCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipMenu_OnCommandMemberCellSetup) == 0x000008, "Wrong alignment on EndMainEquipMenu_OnCommandMemberCellSetup");
static_assert(sizeof(EndMainEquipMenu_OnCommandMemberCellSetup) == 0x000010, "Wrong size on EndMainEquipMenu_OnCommandMemberCellSetup");
static_assert(offsetof(EndMainEquipMenu_OnCommandMemberCellSetup, ItemWidget) == 0x000000, "Member 'EndMainEquipMenu_OnCommandMemberCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipMenu_OnCommandMemberCellSetup, ItemIndex) == 0x000008, "Member 'EndMainEquipMenu_OnCommandMemberCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndCategoryTitleMember.OnSelectItemMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndCategoryTitleMember_OnSelectItemMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCategoryTitleMember_OnSelectItemMeasureItem) == 0x000004, "Wrong alignment on EndCategoryTitleMember_OnSelectItemMeasureItem");
static_assert(sizeof(EndCategoryTitleMember_OnSelectItemMeasureItem) == 0x00000C, "Wrong size on EndCategoryTitleMember_OnSelectItemMeasureItem");
static_assert(offsetof(EndCategoryTitleMember_OnSelectItemMeasureItem, CellIndex) == 0x000000, "Member 'EndCategoryTitleMember_OnSelectItemMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndCategoryTitleMember_OnSelectItemMeasureItem, ReturnValue) == 0x000004, "Member 'EndCategoryTitleMember_OnSelectItemMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndCategoryTitleMember.OnSelectItemSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCategoryTitleMember_OnSelectItemSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCategoryTitleMember_OnSelectItemSetupItem) == 0x000008, "Wrong alignment on EndCategoryTitleMember_OnSelectItemSetupItem");
static_assert(sizeof(EndCategoryTitleMember_OnSelectItemSetupItem) == 0x000010, "Wrong size on EndCategoryTitleMember_OnSelectItemSetupItem");
static_assert(offsetof(EndCategoryTitleMember_OnSelectItemSetupItem, ItemWidget) == 0x000000, "Member 'EndCategoryTitleMember_OnSelectItemSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCategoryTitleMember_OnSelectItemSetupItem, CellIndex) == 0x000008, "Member 'EndCategoryTitleMember_OnSelectItemSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMenuMigration.GetTextFromTextBlock
// 0x0020 (0x0020 - 0x0000)
struct EndMenuMigration_GetTextFromTextBlock final
{
public:
	class UWidget*                                InTextBlock;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMigration_GetTextFromTextBlock) == 0x000008, "Wrong alignment on EndMenuMigration_GetTextFromTextBlock");
static_assert(sizeof(EndMenuMigration_GetTextFromTextBlock) == 0x000020, "Wrong size on EndMenuMigration_GetTextFromTextBlock");
static_assert(offsetof(EndMenuMigration_GetTextFromTextBlock, InTextBlock) == 0x000000, "Member 'EndMenuMigration_GetTextFromTextBlock::InTextBlock' has a wrong offset!");
static_assert(offsetof(EndMenuMigration_GetTextFromTextBlock, ReturnValue) == 0x000008, "Member 'EndMenuMigration_GetTextFromTextBlock::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuMigration.SetTextToTextBlock
// 0x0020 (0x0020 - 0x0000)
struct EndMenuMigration_SetTextToTextBlock final
{
public:
	class UWidget*                                InTextBlock;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InText;                                            // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMigration_SetTextToTextBlock) == 0x000008, "Wrong alignment on EndMenuMigration_SetTextToTextBlock");
static_assert(sizeof(EndMenuMigration_SetTextToTextBlock) == 0x000020, "Wrong size on EndMenuMigration_SetTextToTextBlock");
static_assert(offsetof(EndMenuMigration_SetTextToTextBlock, InTextBlock) == 0x000000, "Member 'EndMenuMigration_SetTextToTextBlock::InTextBlock' has a wrong offset!");
static_assert(offsetof(EndMenuMigration_SetTextToTextBlock, InText) == 0x000008, "Member 'EndMenuMigration_SetTextToTextBlock::InText' has a wrong offset!");

// Function EndGame.EndChapterSelectMenu.OnChapterListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndChapterSelectMenu_OnChapterListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChapterSelectMenu_OnChapterListPressedItem) == 0x000004, "Wrong alignment on EndChapterSelectMenu_OnChapterListPressedItem");
static_assert(sizeof(EndChapterSelectMenu_OnChapterListPressedItem) == 0x000004, "Wrong size on EndChapterSelectMenu_OnChapterListPressedItem");
static_assert(offsetof(EndChapterSelectMenu_OnChapterListPressedItem, CellIndex) == 0x000000, "Member 'EndChapterSelectMenu_OnChapterListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndChapterSelectMenu.OnChapterListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndChapterSelectMenu_OnChapterListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChapterSelectMenu_OnChapterListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndChapterSelectMenu_OnChapterListSelectedIndexChanged");
static_assert(sizeof(EndChapterSelectMenu_OnChapterListSelectedIndexChanged) == 0x000004, "Wrong size on EndChapterSelectMenu_OnChapterListSelectedIndexChanged");
static_assert(offsetof(EndChapterSelectMenu_OnChapterListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndChapterSelectMenu_OnChapterListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndChapterSelectMenu.OnChapterListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChapterSelectMenu_OnChapterListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChapterSelectMenu_OnChapterListSetupItem) == 0x000008, "Wrong alignment on EndChapterSelectMenu_OnChapterListSetupItem");
static_assert(sizeof(EndChapterSelectMenu_OnChapterListSetupItem) == 0x000010, "Wrong size on EndChapterSelectMenu_OnChapterListSetupItem");
static_assert(offsetof(EndChapterSelectMenu_OnChapterListSetupItem, ItemWidget) == 0x000000, "Member 'EndChapterSelectMenu_OnChapterListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChapterSelectMenu_OnChapterListSetupItem, CellIndex) == 0x000008, "Member 'EndChapterSelectMenu_OnChapterListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndChapterSelectMenu.SetCellImage
// 0x0010 (0x0010 - 0x0000)
struct EndChapterSelectMenu_SetCellImage final
{
public:
	class UEndImage*                              Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           Sprite;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChapterSelectMenu_SetCellImage) == 0x000008, "Wrong alignment on EndChapterSelectMenu_SetCellImage");
static_assert(sizeof(EndChapterSelectMenu_SetCellImage) == 0x000010, "Wrong size on EndChapterSelectMenu_SetCellImage");
static_assert(offsetof(EndChapterSelectMenu_SetCellImage, Widget) == 0x000000, "Member 'EndChapterSelectMenu_SetCellImage::Widget' has a wrong offset!");
static_assert(offsetof(EndChapterSelectMenu_SetCellImage, Sprite) == 0x000008, "Member 'EndChapterSelectMenu_SetCellImage::Sprite' has a wrong offset!");

// Function EndGame.EndMenuMateriaEquipCell.OnUpdateEquipStatus
// 0x0020 (0x0020 - 0x0000)
struct EndMenuMateriaEquipCell_OnUpdateEquipStatus final
{
public:
	struct FEndDataObjectEquipmentAccessor        dataObjectEquipment;                               // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMateriaEquipCell_OnUpdateEquipStatus) == 0x000008, "Wrong alignment on EndMenuMateriaEquipCell_OnUpdateEquipStatus");
static_assert(sizeof(EndMenuMateriaEquipCell_OnUpdateEquipStatus) == 0x000020, "Wrong size on EndMenuMateriaEquipCell_OnUpdateEquipStatus");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipStatus, dataObjectEquipment) == 0x000000, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipStatus::dataObjectEquipment' has a wrong offset!");

// Function EndGame.EndMenuMateriaEquipCell.OnUpdateEquipUpgradedStatus
// 0x0020 (0x0020 - 0x0000)
struct EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus final
{
public:
	int32                                         Attack;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Defense;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefense;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackAdd;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseAdd;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttackAdd;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefenseAdd;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus) == 0x000004, "Wrong alignment on EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus");
static_assert(sizeof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus) == 0x000020, "Wrong size on EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, Attack) == 0x000000, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::Attack' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, Defense) == 0x000004, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::Defense' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, MagicAttack) == 0x000008, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::MagicAttack' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, MagicDefense) == 0x00000C, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::MagicDefense' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, AttackAdd) == 0x000010, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::AttackAdd' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, DefenseAdd) == 0x000014, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::DefenseAdd' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, MagicAttackAdd) == 0x000018, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::MagicAttackAdd' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, MagicDefenseAdd) == 0x00001C, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::MagicDefenseAdd' has a wrong offset!");

// Function EndGame.EndMenuMateriaEquipCell.OnUpdateMaterialStatus
// 0x0018 (0x0018 - 0x0000)
struct EndMenuMateriaEquipCell_OnUpdateMaterialStatus final
{
public:
	class FString                                 ApStr;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuMateriaEquipCell_OnUpdateMaterialStatus) == 0x000008, "Wrong alignment on EndMenuMateriaEquipCell_OnUpdateMaterialStatus");
static_assert(sizeof(EndMenuMateriaEquipCell_OnUpdateMaterialStatus) == 0x000018, "Wrong size on EndMenuMateriaEquipCell_OnUpdateMaterialStatus");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateMaterialStatus, ApStr) == 0x000000, "Member 'EndMenuMateriaEquipCell_OnUpdateMaterialStatus::ApStr' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateMaterialStatus, Percent) == 0x000010, "Member 'EndMenuMateriaEquipCell_OnUpdateMaterialStatus::Percent' has a wrong offset!");

// Function EndGame.EndChickenLureMiniGameRopeRootActor.SetReferenceSkeletalCanStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct EndChickenLureMiniGameRopeRootActor_SetReferenceSkeletalCanStaticMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChickenLureMiniGameRopeRootActor_SetReferenceSkeletalCanStaticMesh) == 0x000008, "Wrong alignment on EndChickenLureMiniGameRopeRootActor_SetReferenceSkeletalCanStaticMesh");
static_assert(sizeof(EndChickenLureMiniGameRopeRootActor_SetReferenceSkeletalCanStaticMesh) == 0x000008, "Wrong size on EndChickenLureMiniGameRopeRootActor_SetReferenceSkeletalCanStaticMesh");
static_assert(offsetof(EndChickenLureMiniGameRopeRootActor_SetReferenceSkeletalCanStaticMesh, SkeletalMeshComp) == 0x000000, "Member 'EndChickenLureMiniGameRopeRootActor_SetReferenceSkeletalCanStaticMesh::SkeletalMeshComp' has a wrong offset!");

// Function EndGame.EndChickenLureMiniGameRopeRootActor.SetRopeActor
// 0x0008 (0x0008 - 0x0000)
struct EndChickenLureMiniGameRopeRootActor_SetRopeActor final
{
public:
	class AActor*                                 RopeActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChickenLureMiniGameRopeRootActor_SetRopeActor) == 0x000008, "Wrong alignment on EndChickenLureMiniGameRopeRootActor_SetRopeActor");
static_assert(sizeof(EndChickenLureMiniGameRopeRootActor_SetRopeActor) == 0x000008, "Wrong size on EndChickenLureMiniGameRopeRootActor_SetRopeActor");
static_assert(offsetof(EndChickenLureMiniGameRopeRootActor_SetRopeActor, RopeActor) == 0x000000, "Member 'EndChickenLureMiniGameRopeRootActor_SetRopeActor::RopeActor' has a wrong offset!");

// Function EndGame.EndChickenLureMiniGameRopeRootActor.SetSkeletalCanActor
// 0x0008 (0x0008 - 0x0000)
struct EndChickenLureMiniGameRopeRootActor_SetSkeletalCanActor final
{
public:
	class AEndChickenLureMiniGameSkeletalCanActor* CanActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChickenLureMiniGameRopeRootActor_SetSkeletalCanActor) == 0x000008, "Wrong alignment on EndChickenLureMiniGameRopeRootActor_SetSkeletalCanActor");
static_assert(sizeof(EndChickenLureMiniGameRopeRootActor_SetSkeletalCanActor) == 0x000008, "Wrong size on EndChickenLureMiniGameRopeRootActor_SetSkeletalCanActor");
static_assert(offsetof(EndChickenLureMiniGameRopeRootActor_SetSkeletalCanActor, CanActor) == 0x000000, "Member 'EndChickenLureMiniGameRopeRootActor_SetSkeletalCanActor::CanActor' has a wrong offset!");

// Function EndGame.EndChickenLureMiniGameSkeletalCanActor.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndChickenLureMiniGameSkeletalCanActor_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChickenLureMiniGameSkeletalCanActor_OnComponentHit) == 0x000008, "Wrong alignment on EndChickenLureMiniGameSkeletalCanActor_OnComponentHit");
static_assert(sizeof(EndChickenLureMiniGameSkeletalCanActor_OnComponentHit) == 0x0000B8, "Wrong size on EndChickenLureMiniGameSkeletalCanActor_OnComponentHit");
static_assert(offsetof(EndChickenLureMiniGameSkeletalCanActor_OnComponentHit, HitComponent) == 0x000000, "Member 'EndChickenLureMiniGameSkeletalCanActor_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndChickenLureMiniGameSkeletalCanActor_OnComponentHit, OtherActor) == 0x000008, "Member 'EndChickenLureMiniGameSkeletalCanActor_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndChickenLureMiniGameSkeletalCanActor_OnComponentHit, OtherComp) == 0x000010, "Member 'EndChickenLureMiniGameSkeletalCanActor_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndChickenLureMiniGameSkeletalCanActor_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndChickenLureMiniGameSkeletalCanActor_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndChickenLureMiniGameSkeletalCanActor_OnComponentHit, Hit) == 0x000024, "Member 'EndChickenLureMiniGameSkeletalCanActor_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndChickenLureMiniGameSkeletalCanActor.SetReferenceSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct EndChickenLureMiniGameSkeletalCanActor_SetReferenceSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChickenLureMiniGameSkeletalCanActor_SetReferenceSkeletalMesh) == 0x000008, "Wrong alignment on EndChickenLureMiniGameSkeletalCanActor_SetReferenceSkeletalMesh");
static_assert(sizeof(EndChickenLureMiniGameSkeletalCanActor_SetReferenceSkeletalMesh) == 0x000008, "Wrong size on EndChickenLureMiniGameSkeletalCanActor_SetReferenceSkeletalMesh");
static_assert(offsetof(EndChickenLureMiniGameSkeletalCanActor_SetReferenceSkeletalMesh, SkeletalMeshComp) == 0x000000, "Member 'EndChickenLureMiniGameSkeletalCanActor_SetReferenceSkeletalMesh::SkeletalMeshComp' has a wrong offset!");

// Function EndGame.EndChickenLureMiniGameSkeletalCanActor.SetRopeLootActor
// 0x0008 (0x0008 - 0x0000)
struct EndChickenLureMiniGameSkeletalCanActor_SetRopeLootActor final
{
public:
	class AEndEnvironmentSkeletalMeshActor*       RopeLootActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChickenLureMiniGameSkeletalCanActor_SetRopeLootActor) == 0x000008, "Wrong alignment on EndChickenLureMiniGameSkeletalCanActor_SetRopeLootActor");
static_assert(sizeof(EndChickenLureMiniGameSkeletalCanActor_SetRopeLootActor) == 0x000008, "Wrong size on EndChickenLureMiniGameSkeletalCanActor_SetRopeLootActor");
static_assert(offsetof(EndChickenLureMiniGameSkeletalCanActor_SetRopeLootActor, RopeLootActor) == 0x000000, "Member 'EndChickenLureMiniGameSkeletalCanActor_SetRopeLootActor::RopeLootActor' has a wrong offset!");

// Function EndGame.EndChocoboCaptureCommandMenu.OnSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboCaptureCommandMenu_OnSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboCaptureCommandMenu_OnSetupItem) == 0x000008, "Wrong alignment on EndChocoboCaptureCommandMenu_OnSetupItem");
static_assert(sizeof(EndChocoboCaptureCommandMenu_OnSetupItem) == 0x000010, "Wrong size on EndChocoboCaptureCommandMenu_OnSetupItem");
static_assert(offsetof(EndChocoboCaptureCommandMenu_OnSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboCaptureCommandMenu_OnSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboCaptureCommandMenu_OnSetupItem, ItemIndex) == 0x000008, "Member 'EndChocoboCaptureCommandMenu_OnSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboColorEditWindow.OnTabMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboColorEditWindow_OnTabMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboColorEditWindow_OnTabMenuSetupItem) == 0x000008, "Wrong alignment on EndChocoboColorEditWindow_OnTabMenuSetupItem");
static_assert(sizeof(EndChocoboColorEditWindow_OnTabMenuSetupItem) == 0x000010, "Wrong size on EndChocoboColorEditWindow_OnTabMenuSetupItem");
static_assert(offsetof(EndChocoboColorEditWindow_OnTabMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboColorEditWindow_OnTabMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboColorEditWindow_OnTabMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndChocoboColorEditWindow_OnTabMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboCustomizeStatusWindow.OnStatusListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboCustomizeStatusWindow_OnStatusListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboCustomizeStatusWindow_OnStatusListSetupItem) == 0x000008, "Wrong alignment on EndChocoboCustomizeStatusWindow_OnStatusListSetupItem");
static_assert(sizeof(EndChocoboCustomizeStatusWindow_OnStatusListSetupItem) == 0x000010, "Wrong size on EndChocoboCustomizeStatusWindow_OnStatusListSetupItem");
static_assert(offsetof(EndChocoboCustomizeStatusWindow_OnStatusListSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboCustomizeStatusWindow_OnStatusListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboCustomizeStatusWindow_OnStatusListSetupItem, InItemIndex) == 0x000008, "Member 'EndChocoboCustomizeStatusWindow_OnStatusListSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndMenuBattleFriendStatusPane.OnFriendStatusCell
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBattleFriendStatusPane_OnFriendStatusCell final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuBattleFriendStatusPane_OnFriendStatusCell) == 0x000008, "Wrong alignment on EndMenuBattleFriendStatusPane_OnFriendStatusCell");
static_assert(sizeof(EndMenuBattleFriendStatusPane_OnFriendStatusCell) == 0x000010, "Wrong size on EndMenuBattleFriendStatusPane_OnFriendStatusCell");
static_assert(offsetof(EndMenuBattleFriendStatusPane_OnFriendStatusCell, ItemWidget) == 0x000000, "Member 'EndMenuBattleFriendStatusPane_OnFriendStatusCell::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMenuBattleFriendStatusPane_OnFriendStatusCell, ItemIndex) == 0x000008, "Member 'EndMenuBattleFriendStatusPane_OnFriendStatusCell::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboRaceMenu.OnCourseListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndChocoboRaceMenu_OnCourseListSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChocoboRaceMenu_OnCourseListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndChocoboRaceMenu_OnCourseListSelectedIndexChanged");
static_assert(sizeof(EndChocoboRaceMenu_OnCourseListSelectedIndexChanged) == 0x000004, "Wrong size on EndChocoboRaceMenu_OnCourseListSelectedIndexChanged");
static_assert(offsetof(EndChocoboRaceMenu_OnCourseListSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndChocoboRaceMenu_OnCourseListSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboRaceMenu.OnCourseListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboRaceMenu_OnCourseListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboRaceMenu_OnCourseListSetupItem) == 0x000008, "Wrong alignment on EndChocoboRaceMenu_OnCourseListSetupItem");
static_assert(sizeof(EndChocoboRaceMenu_OnCourseListSetupItem) == 0x000010, "Wrong size on EndChocoboRaceMenu_OnCourseListSetupItem");
static_assert(offsetof(EndChocoboRaceMenu_OnCourseListSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboRaceMenu_OnCourseListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboRaceMenu_OnCourseListSetupItem, InItemIndex) == 0x000008, "Member 'EndChocoboRaceMenu_OnCourseListSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndWheeledVehiclePlayerController.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndWheeledVehiclePlayerController_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWheeledVehiclePlayerController_OnComponentHit) == 0x000008, "Wrong alignment on EndWheeledVehiclePlayerController_OnComponentHit");
static_assert(sizeof(EndWheeledVehiclePlayerController_OnComponentHit) == 0x0000B8, "Wrong size on EndWheeledVehiclePlayerController_OnComponentHit");
static_assert(offsetof(EndWheeledVehiclePlayerController_OnComponentHit, HitComponent) == 0x000000, "Member 'EndWheeledVehiclePlayerController_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndWheeledVehiclePlayerController_OnComponentHit, OtherActor) == 0x000008, "Member 'EndWheeledVehiclePlayerController_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndWheeledVehiclePlayerController_OnComponentHit, OtherComp) == 0x000010, "Member 'EndWheeledVehiclePlayerController_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndWheeledVehiclePlayerController_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndWheeledVehiclePlayerController_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndWheeledVehiclePlayerController_OnComponentHit, Hit) == 0x000024, "Member 'EndWheeledVehiclePlayerController_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndGameState.SendGameTrigger
// 0x0028 (0x0028 - 0x0000)
struct EndGameState_SendGameTrigger final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameTrigger                                  Trigger;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    toState;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_SendGameTrigger) == 0x000008, "Wrong alignment on EndGameState_SendGameTrigger");
static_assert(sizeof(EndGameState_SendGameTrigger) == 0x000028, "Wrong size on EndGameState_SendGameTrigger");
static_assert(offsetof(EndGameState_SendGameTrigger, WorldContextObject) == 0x000000, "Member 'EndGameState_SendGameTrigger::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndGameState_SendGameTrigger, Trigger) == 0x000008, "Member 'EndGameState_SendGameTrigger::Trigger' has a wrong offset!");
static_assert(offsetof(EndGameState_SendGameTrigger, toState) == 0x000009, "Member 'EndGameState_SendGameTrigger::toState' has a wrong offset!");
static_assert(offsetof(EndGameState_SendGameTrigger, LatentInfo) == 0x000010, "Member 'EndGameState_SendGameTrigger::LatentInfo' has a wrong offset!");

// Function EndGame.EndGameState.ActivateLocation
// 0x0008 (0x0008 - 0x0000)
struct EndGameState_ActivateLocation final
{
public:
	class FName                                   TargetLocation;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_ActivateLocation) == 0x000004, "Wrong alignment on EndGameState_ActivateLocation");
static_assert(sizeof(EndGameState_ActivateLocation) == 0x000008, "Wrong size on EndGameState_ActivateLocation");
static_assert(offsetof(EndGameState_ActivateLocation, TargetLocation) == 0x000000, "Member 'EndGameState_ActivateLocation::TargetLocation' has a wrong offset!");

// Function EndGame.EndGameState.GetGameSpeed
// 0x0004 (0x0004 - 0x0000)
struct EndGameState_GetGameSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_GetGameSpeed) == 0x000004, "Wrong alignment on EndGameState_GetGameSpeed");
static_assert(sizeof(EndGameState_GetGameSpeed) == 0x000004, "Wrong size on EndGameState_GetGameSpeed");
static_assert(offsetof(EndGameState_GetGameSpeed, ReturnValue) == 0x000000, "Member 'EndGameState_GetGameSpeed::ReturnValue' has a wrong offset!");

// Function EndGame.EndGameState.IsGamePause
// 0x0001 (0x0001 - 0x0000)
struct EndGameState_IsGamePause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_IsGamePause) == 0x000001, "Wrong alignment on EndGameState_IsGamePause");
static_assert(sizeof(EndGameState_IsGamePause) == 0x000001, "Wrong size on EndGameState_IsGamePause");
static_assert(offsetof(EndGameState_IsGamePause, ReturnValue) == 0x000000, "Member 'EndGameState_IsGamePause::ReturnValue' has a wrong offset!");

// Function EndGame.EndGameState.IsGameStatus
// 0x0002 (0x0002 - 0x0000)
struct EndGameState_IsGameStatus final
{
public:
	EGameStatus                                   Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_IsGameStatus) == 0x000001, "Wrong alignment on EndGameState_IsGameStatus");
static_assert(sizeof(EndGameState_IsGameStatus) == 0x000002, "Wrong size on EndGameState_IsGameStatus");
static_assert(offsetof(EndGameState_IsGameStatus, Status) == 0x000000, "Member 'EndGameState_IsGameStatus::Status' has a wrong offset!");
static_assert(offsetof(EndGameState_IsGameStatus, ReturnValue) == 0x000001, "Member 'EndGameState_IsGameStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndGameState.SetGameStatus
// 0x0002 (0x0002 - 0x0000)
struct EndGameState_SetGameStatus final
{
public:
	EGameStatus                                   Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Set;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_SetGameStatus) == 0x000001, "Wrong alignment on EndGameState_SetGameStatus");
static_assert(sizeof(EndGameState_SetGameStatus) == 0x000002, "Wrong size on EndGameState_SetGameStatus");
static_assert(offsetof(EndGameState_SetGameStatus, Status) == 0x000000, "Member 'EndGameState_SetGameStatus::Status' has a wrong offset!");
static_assert(offsetof(EndGameState_SetGameStatus, Set) == 0x000001, "Member 'EndGameState_SetGameStatus::Set' has a wrong offset!");

// Function EndGame.EndGameState.SetRequestGamePauseOn
// 0x0001 (0x0001 - 0x0000)
struct EndGameState_SetRequestGamePauseOn final
{
public:
	EGamePause                                    Pause;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_SetRequestGamePauseOn) == 0x000001, "Wrong alignment on EndGameState_SetRequestGamePauseOn");
static_assert(sizeof(EndGameState_SetRequestGamePauseOn) == 0x000001, "Wrong size on EndGameState_SetRequestGamePauseOn");
static_assert(offsetof(EndGameState_SetRequestGamePauseOn, Pause) == 0x000000, "Member 'EndGameState_SetRequestGamePauseOn::Pause' has a wrong offset!");

// Function EndGame.EndGameState.GetGameState
// 0x0001 (0x0001 - 0x0000)
struct EndGameState_GetGameState final
{
public:
	EGameState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_GetGameState) == 0x000001, "Wrong alignment on EndGameState_GetGameState");
static_assert(sizeof(EndGameState_GetGameState) == 0x000001, "Wrong size on EndGameState_GetGameState");
static_assert(offsetof(EndGameState_GetGameState, ReturnValue) == 0x000000, "Member 'EndGameState_GetGameState::ReturnValue' has a wrong offset!");

// Function EndGame.EndCondorFortConfirmWindow.OnSetup_Options
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortConfirmWindow_OnSetup_Options final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortConfirmWindow_OnSetup_Options) == 0x000008, "Wrong alignment on EndCondorFortConfirmWindow_OnSetup_Options");
static_assert(sizeof(EndCondorFortConfirmWindow_OnSetup_Options) == 0x000010, "Wrong size on EndCondorFortConfirmWindow_OnSetup_Options");
static_assert(offsetof(EndCondorFortConfirmWindow_OnSetup_Options, ItemWidget) == 0x000000, "Member 'EndCondorFortConfirmWindow_OnSetup_Options::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortConfirmWindow_OnSetup_Options, ItemIndex) == 0x000008, "Member 'EndCondorFortConfirmWindow_OnSetup_Options::ItemIndex' has a wrong offset!");

// Function EndGame.EndCinemaCameraManagerSettingActor.SetLightClippingDistance
// 0x0004 (0x0004 - 0x0000)
struct EndCinemaCameraManagerSettingActor_SetLightClippingDistance final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCinemaCameraManagerSettingActor_SetLightClippingDistance) == 0x000004, "Wrong alignment on EndCinemaCameraManagerSettingActor_SetLightClippingDistance");
static_assert(sizeof(EndCinemaCameraManagerSettingActor_SetLightClippingDistance) == 0x000004, "Wrong size on EndCinemaCameraManagerSettingActor_SetLightClippingDistance");
static_assert(offsetof(EndCinemaCameraManagerSettingActor_SetLightClippingDistance, InValue) == 0x000000, "Member 'EndCinemaCameraManagerSettingActor_SetLightClippingDistance::InValue' has a wrong offset!");

// Function EndGame.EndWorldReportMenu.OnEndVirtualScrollBox224SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMenu_OnEndVirtualScrollBox224SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMenu_OnEndVirtualScrollBox224SetupItem) == 0x000008, "Wrong alignment on EndWorldReportMenu_OnEndVirtualScrollBox224SetupItem");
static_assert(sizeof(EndWorldReportMenu_OnEndVirtualScrollBox224SetupItem) == 0x000010, "Wrong size on EndWorldReportMenu_OnEndVirtualScrollBox224SetupItem");
static_assert(offsetof(EndWorldReportMenu_OnEndVirtualScrollBox224SetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportMenu_OnEndVirtualScrollBox224SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMenu_OnEndVirtualScrollBox224SetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportMenu_OnEndVirtualScrollBox224SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMenu.OnListTerm2SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMenu_OnListTerm2SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMenu_OnListTerm2SetupItem) == 0x000008, "Wrong alignment on EndWorldReportMenu_OnListTerm2SetupItem");
static_assert(sizeof(EndWorldReportMenu_OnListTerm2SetupItem) == 0x000010, "Wrong size on EndWorldReportMenu_OnListTerm2SetupItem");
static_assert(offsetof(EndWorldReportMenu_OnListTerm2SetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportMenu_OnListTerm2SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMenu_OnListTerm2SetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportMenu_OnListTerm2SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMenu.OnListTerm3SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMenu_OnListTerm3SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMenu_OnListTerm3SetupItem) == 0x000008, "Wrong alignment on EndWorldReportMenu_OnListTerm3SetupItem");
static_assert(sizeof(EndWorldReportMenu_OnListTerm3SetupItem) == 0x000010, "Wrong size on EndWorldReportMenu_OnListTerm3SetupItem");
static_assert(offsetof(EndWorldReportMenu_OnListTerm3SetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportMenu_OnListTerm3SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMenu_OnListTerm3SetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportMenu_OnListTerm3SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMenu.OnReportAreaChangeBtnSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMenu_OnReportAreaChangeBtnSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMenu_OnReportAreaChangeBtnSetupItem) == 0x000008, "Wrong alignment on EndWorldReportMenu_OnReportAreaChangeBtnSetupItem");
static_assert(sizeof(EndWorldReportMenu_OnReportAreaChangeBtnSetupItem) == 0x000010, "Wrong size on EndWorldReportMenu_OnReportAreaChangeBtnSetupItem");
static_assert(offsetof(EndWorldReportMenu_OnReportAreaChangeBtnSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportMenu_OnReportAreaChangeBtnSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMenu_OnReportAreaChangeBtnSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportMenu_OnReportAreaChangeBtnSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMenu.OnReportListCleanupItem
// 0x0008 (0x0008 - 0x0000)
struct EndWorldReportMenu_OnReportListCleanupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWorldReportMenu_OnReportListCleanupItem) == 0x000008, "Wrong alignment on EndWorldReportMenu_OnReportListCleanupItem");
static_assert(sizeof(EndWorldReportMenu_OnReportListCleanupItem) == 0x000008, "Wrong size on EndWorldReportMenu_OnReportListCleanupItem");
static_assert(offsetof(EndWorldReportMenu_OnReportListCleanupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportMenu_OnReportListCleanupItem::ItemWidget' has a wrong offset!");

// Function EndGame.EndWorldReportMenu.OnReportListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWorldReportMenu_OnReportListSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWorldReportMenu_OnReportListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWorldReportMenu_OnReportListSelectedIndexChanged");
static_assert(sizeof(EndWorldReportMenu_OnReportListSelectedIndexChanged) == 0x000004, "Wrong size on EndWorldReportMenu_OnReportListSelectedIndexChanged");
static_assert(offsetof(EndWorldReportMenu_OnReportListSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndWorldReportMenu_OnReportListSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMenu.OnReportListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMenu_OnReportListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMenu_OnReportListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportMenu_OnReportListSetupItem");
static_assert(sizeof(EndWorldReportMenu_OnReportListSetupItem) == 0x000010, "Wrong size on EndWorldReportMenu_OnReportListSetupItem");
static_assert(offsetof(EndWorldReportMenu_OnReportListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportMenu_OnReportListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMenu_OnReportListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportMenu_OnReportListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMenuListBase.OnCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainMenuListBase_OnCellPressed final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMenuListBase_OnCellPressed) == 0x000004, "Wrong alignment on EndMainMenuListBase_OnCellPressed");
static_assert(sizeof(EndMainMenuListBase_OnCellPressed) == 0x000004, "Wrong size on EndMainMenuListBase_OnCellPressed");
static_assert(offsetof(EndMainMenuListBase_OnCellPressed, CellIndex) == 0x000000, "Member 'EndMainMenuListBase_OnCellPressed::CellIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnBtnListSetupItemCorel
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMateriaPage_OnBtnListSetupItemCorel final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMateriaPage_OnBtnListSetupItemCorel) == 0x000008, "Wrong alignment on EndWorldReportMateriaPage_OnBtnListSetupItemCorel");
static_assert(sizeof(EndWorldReportMateriaPage_OnBtnListSetupItemCorel) == 0x000010, "Wrong size on EndWorldReportMateriaPage_OnBtnListSetupItemCorel");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemCorel, ItemWidget) == 0x000000, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemCorel::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemCorel, ItemIndex) == 0x000008, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemCorel::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnBtnListSetupItemCosmo
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMateriaPage_OnBtnListSetupItemCosmo final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMateriaPage_OnBtnListSetupItemCosmo) == 0x000008, "Wrong alignment on EndWorldReportMateriaPage_OnBtnListSetupItemCosmo");
static_assert(sizeof(EndWorldReportMateriaPage_OnBtnListSetupItemCosmo) == 0x000010, "Wrong size on EndWorldReportMateriaPage_OnBtnListSetupItemCosmo");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemCosmo, ItemWidget) == 0x000000, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemCosmo::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemCosmo, ItemIndex) == 0x000008, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemCosmo::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnBtnListSetupItemGlasslands
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMateriaPage_OnBtnListSetupItemGlasslands final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMateriaPage_OnBtnListSetupItemGlasslands) == 0x000008, "Wrong alignment on EndWorldReportMateriaPage_OnBtnListSetupItemGlasslands");
static_assert(sizeof(EndWorldReportMateriaPage_OnBtnListSetupItemGlasslands) == 0x000010, "Wrong size on EndWorldReportMateriaPage_OnBtnListSetupItemGlasslands");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemGlasslands, ItemWidget) == 0x000000, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemGlasslands::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemGlasslands, ItemIndex) == 0x000008, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemGlasslands::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnBtnListSetupItemGongaga
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMateriaPage_OnBtnListSetupItemGongaga final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMateriaPage_OnBtnListSetupItemGongaga) == 0x000008, "Wrong alignment on EndWorldReportMateriaPage_OnBtnListSetupItemGongaga");
static_assert(sizeof(EndWorldReportMateriaPage_OnBtnListSetupItemGongaga) == 0x000010, "Wrong size on EndWorldReportMateriaPage_OnBtnListSetupItemGongaga");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemGongaga, ItemWidget) == 0x000000, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemGongaga::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemGongaga, ItemIndex) == 0x000008, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemGongaga::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnBtnListSetupItemJunon
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMateriaPage_OnBtnListSetupItemJunon final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMateriaPage_OnBtnListSetupItemJunon) == 0x000008, "Wrong alignment on EndWorldReportMateriaPage_OnBtnListSetupItemJunon");
static_assert(sizeof(EndWorldReportMateriaPage_OnBtnListSetupItemJunon) == 0x000010, "Wrong size on EndWorldReportMateriaPage_OnBtnListSetupItemJunon");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemJunon, ItemWidget) == 0x000000, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemJunon::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemJunon, ItemIndex) == 0x000008, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemJunon::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnBtnListSetupItemNibel
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMateriaPage_OnBtnListSetupItemNibel final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMateriaPage_OnBtnListSetupItemNibel) == 0x000008, "Wrong alignment on EndWorldReportMateriaPage_OnBtnListSetupItemNibel");
static_assert(sizeof(EndWorldReportMateriaPage_OnBtnListSetupItemNibel) == 0x000010, "Wrong size on EndWorldReportMateriaPage_OnBtnListSetupItemNibel");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemNibel, ItemWidget) == 0x000000, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemNibel::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemNibel, ItemIndex) == 0x000008, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemNibel::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnBtnListSetupItemSea
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMateriaPage_OnBtnListSetupItemSea final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMateriaPage_OnBtnListSetupItemSea) == 0x000008, "Wrong alignment on EndWorldReportMateriaPage_OnBtnListSetupItemSea");
static_assert(sizeof(EndWorldReportMateriaPage_OnBtnListSetupItemSea) == 0x000010, "Wrong size on EndWorldReportMateriaPage_OnBtnListSetupItemSea");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemSea, ItemWidget) == 0x000000, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemSea::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemSea, ItemIndex) == 0x000008, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemSea::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnBtnListSetupItemSummon
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMateriaPage_OnBtnListSetupItemSummon final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMateriaPage_OnBtnListSetupItemSummon) == 0x000008, "Wrong alignment on EndWorldReportMateriaPage_OnBtnListSetupItemSummon");
static_assert(sizeof(EndWorldReportMateriaPage_OnBtnListSetupItemSummon) == 0x000010, "Wrong size on EndWorldReportMateriaPage_OnBtnListSetupItemSummon");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemSummon, ItemWidget) == 0x000000, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemSummon::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnBtnListSetupItemSummon, ItemIndex) == 0x000008, "Member 'EndWorldReportMateriaPage_OnBtnListSetupItemSummon::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnMateriaDevelopListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMateriaPage_OnMateriaDevelopListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMateriaPage_OnMateriaDevelopListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportMateriaPage_OnMateriaDevelopListSetupItem");
static_assert(sizeof(EndWorldReportMateriaPage_OnMateriaDevelopListSetupItem) == 0x000010, "Wrong size on EndWorldReportMateriaPage_OnMateriaDevelopListSetupItem");
static_assert(offsetof(EndWorldReportMateriaPage_OnMateriaDevelopListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportMateriaPage_OnMateriaDevelopListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnMateriaDevelopListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportMateriaPage_OnMateriaDevelopListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnMateriaInfoListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWorldReportMateriaPage_OnMateriaInfoListMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWorldReportMateriaPage_OnMateriaInfoListMeasureItem) == 0x000004, "Wrong alignment on EndWorldReportMateriaPage_OnMateriaInfoListMeasureItem");
static_assert(sizeof(EndWorldReportMateriaPage_OnMateriaInfoListMeasureItem) == 0x00000C, "Wrong size on EndWorldReportMateriaPage_OnMateriaInfoListMeasureItem");
static_assert(offsetof(EndWorldReportMateriaPage_OnMateriaInfoListMeasureItem, ItemIndex) == 0x000000, "Member 'EndWorldReportMateriaPage_OnMateriaInfoListMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnMateriaInfoListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWorldReportMateriaPage_OnMateriaInfoListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWorldReportMateriaPage.OnMateriaInfoListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportMateriaPage_OnMateriaInfoListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportMateriaPage_OnMateriaInfoListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportMateriaPage_OnMateriaInfoListSetupItem");
static_assert(sizeof(EndWorldReportMateriaPage_OnMateriaInfoListSetupItem) == 0x000010, "Wrong size on EndWorldReportMateriaPage_OnMateriaInfoListSetupItem");
static_assert(offsetof(EndWorldReportMateriaPage_OnMateriaInfoListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportMateriaPage_OnMateriaInfoListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportMateriaPage_OnMateriaInfoListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportMateriaPage_OnMateriaInfoListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndJukeboxMenu.OnSoundListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndJukeboxMenu_OnSoundListPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndJukeboxMenu_OnSoundListPressedItem) == 0x000004, "Wrong alignment on EndJukeboxMenu_OnSoundListPressedItem");
static_assert(sizeof(EndJukeboxMenu_OnSoundListPressedItem) == 0x000004, "Wrong size on EndJukeboxMenu_OnSoundListPressedItem");
static_assert(offsetof(EndJukeboxMenu_OnSoundListPressedItem, ItemIndex) == 0x000000, "Member 'EndJukeboxMenu_OnSoundListPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndJukeboxMenu.OnSoundListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndJukeboxMenu_OnSoundListSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndJukeboxMenu_OnSoundListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndJukeboxMenu_OnSoundListSelectedIndexChanged");
static_assert(sizeof(EndJukeboxMenu_OnSoundListSelectedIndexChanged) == 0x000004, "Wrong size on EndJukeboxMenu_OnSoundListSelectedIndexChanged");
static_assert(offsetof(EndJukeboxMenu_OnSoundListSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndJukeboxMenu_OnSoundListSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndJukeboxMenu.OnSoundListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndJukeboxMenu_OnSoundListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndJukeboxMenu_OnSoundListSetupItem) == 0x000008, "Wrong alignment on EndJukeboxMenu_OnSoundListSetupItem");
static_assert(sizeof(EndJukeboxMenu_OnSoundListSetupItem) == 0x000010, "Wrong size on EndJukeboxMenu_OnSoundListSetupItem");
static_assert(offsetof(EndJukeboxMenu_OnSoundListSetupItem, ItemWidget) == 0x000000, "Member 'EndJukeboxMenu_OnSoundListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndJukeboxMenu_OnSoundListSetupItem, ItemIndex) == 0x000008, "Member 'EndJukeboxMenu_OnSoundListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxSkeletalMeshActor.GetBoxType
// 0x0001 (0x0001 - 0x0000)
struct EndCrashBoxMiniGameGearBoxSkeletalMeshActor_GetBoxType final
{
public:
	EEndCrashBoxMiniGameBoxType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_GetBoxType) == 0x000001, "Wrong alignment on EndCrashBoxMiniGameGearBoxSkeletalMeshActor_GetBoxType");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_GetBoxType) == 0x000001, "Wrong size on EndCrashBoxMiniGameGearBoxSkeletalMeshActor_GetBoxType");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_GetBoxType, ReturnValue) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxSkeletalMeshActor_GetBoxType::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxSkeletalMeshActor.IsElectricBox
// 0x0001 (0x0001 - 0x0000)
struct EndCrashBoxMiniGameGearBoxSkeletalMeshActor_IsElectricBox final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_IsElectricBox) == 0x000001, "Wrong alignment on EndCrashBoxMiniGameGearBoxSkeletalMeshActor_IsElectricBox");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_IsElectricBox) == 0x000001, "Wrong size on EndCrashBoxMiniGameGearBoxSkeletalMeshActor_IsElectricBox");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_IsElectricBox, ReturnValue) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxSkeletalMeshActor_IsElectricBox::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxSkeletalMeshActor.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit) == 0x0000B8, "Wrong size on EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit, HitComponent) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit, OtherActor) == 0x000008, "Member 'EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit, OtherComp) == 0x000010, "Member 'EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit, Hit) == 0x000024, "Member 'EndCrashBoxMiniGameGearBoxSkeletalMeshActor_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxSkeletalMeshActor.SetEffectDummyPoint
// 0x0010 (0x0010 - 0x0000)
struct EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetEffectDummyPoint final
{
public:
	EEndCrashBoxMiniGameGearBoxSkeletalMeshActorEffect Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetEffectDummyPoint) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetEffectDummyPoint");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetEffectDummyPoint) == 0x000010, "Wrong size on EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetEffectDummyPoint");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetEffectDummyPoint, Type) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetEffectDummyPoint::Type' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetEffectDummyPoint, Component) == 0x000008, "Member 'EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetEffectDummyPoint::Component' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxSkeletalMeshActor.SetImpulseRadius
// 0x0004 (0x0004 - 0x0000)
struct EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetImpulseRadius final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetImpulseRadius) == 0x000004, "Wrong alignment on EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetImpulseRadius");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetImpulseRadius) == 0x000004, "Wrong size on EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetImpulseRadius");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetImpulseRadius, InRadius) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxSkeletalMeshActor_SetImpulseRadius::InRadius' has a wrong offset!");

// Function EndGame.EndGambitMinigameAIControllerBase.ResetWaitNextSec
// 0x0001 (0x0001 - 0x0000)
struct EndGambitMinigameAIControllerBase_ResetWaitNextSec final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitMinigameAIControllerBase_ResetWaitNextSec) == 0x000001, "Wrong alignment on EndGambitMinigameAIControllerBase_ResetWaitNextSec");
static_assert(sizeof(EndGambitMinigameAIControllerBase_ResetWaitNextSec) == 0x000001, "Wrong size on EndGambitMinigameAIControllerBase_ResetWaitNextSec");
static_assert(offsetof(EndGambitMinigameAIControllerBase_ResetWaitNextSec, ReturnValue) == 0x000000, "Member 'EndGambitMinigameAIControllerBase_ResetWaitNextSec::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataObjectAPI.DebugReimportDataObject
// 0x0010 (0x0010 - 0x0000)
struct EndDataObjectAPI_DebugReimportDataObject final
{
public:
	class FString                                 residentOrLocation;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataObjectAPI_DebugReimportDataObject) == 0x000008, "Wrong alignment on EndDataObjectAPI_DebugReimportDataObject");
static_assert(sizeof(EndDataObjectAPI_DebugReimportDataObject) == 0x000010, "Wrong size on EndDataObjectAPI_DebugReimportDataObject");
static_assert(offsetof(EndDataObjectAPI_DebugReimportDataObject, residentOrLocation) == 0x000000, "Member 'EndDataObjectAPI_DebugReimportDataObject::residentOrLocation' has a wrong offset!");

// Function EndGame.EndDataObjectAPI.InitDataObject
// 0x0018 (0x0018 - 0x0000)
struct EndDataObjectAPI_InitDataObject final
{
public:
	EDataObjectType                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LocationId;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndAssetActor*                         Asset;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataObjectAPI_InitDataObject) == 0x000008, "Wrong alignment on EndDataObjectAPI_InitDataObject");
static_assert(sizeof(EndDataObjectAPI_InitDataObject) == 0x000018, "Wrong size on EndDataObjectAPI_InitDataObject");
static_assert(offsetof(EndDataObjectAPI_InitDataObject, Type) == 0x000000, "Member 'EndDataObjectAPI_InitDataObject::Type' has a wrong offset!");
static_assert(offsetof(EndDataObjectAPI_InitDataObject, LocationId) == 0x000004, "Member 'EndDataObjectAPI_InitDataObject::LocationId' has a wrong offset!");
static_assert(offsetof(EndDataObjectAPI_InitDataObject, Asset) == 0x000010, "Member 'EndDataObjectAPI_InitDataObject::Asset' has a wrong offset!");

// Function EndGame.EndDataObjectAPI.UnInitDataObject
// 0x0018 (0x0018 - 0x0000)
struct EndDataObjectAPI_UnInitDataObject final
{
public:
	EDataObjectType                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LocationId;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndAssetActor*                         Asset;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataObjectAPI_UnInitDataObject) == 0x000008, "Wrong alignment on EndDataObjectAPI_UnInitDataObject");
static_assert(sizeof(EndDataObjectAPI_UnInitDataObject) == 0x000018, "Wrong size on EndDataObjectAPI_UnInitDataObject");
static_assert(offsetof(EndDataObjectAPI_UnInitDataObject, Type) == 0x000000, "Member 'EndDataObjectAPI_UnInitDataObject::Type' has a wrong offset!");
static_assert(offsetof(EndDataObjectAPI_UnInitDataObject, LocationId) == 0x000004, "Member 'EndDataObjectAPI_UnInitDataObject::LocationId' has a wrong offset!");
static_assert(offsetof(EndDataObjectAPI_UnInitDataObject, Asset) == 0x000010, "Member 'EndDataObjectAPI_UnInitDataObject::Asset' has a wrong offset!");

// Function EndGame.EndCircle.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndCircle_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndCircle_GetDynamicMaterial");
static_assert(sizeof(EndCircle_GetDynamicMaterial) == 0x000008, "Wrong size on EndCircle_GetDynamicMaterial");
static_assert(offsetof(EndCircle_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndCircle_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndCircle.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndCircle_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetBlendMode) == 0x000001, "Wrong alignment on EndCircle_SetBlendMode");
static_assert(sizeof(EndCircle_SetBlendMode) == 0x000001, "Wrong size on EndCircle_SetBlendMode");
static_assert(offsetof(EndCircle_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndCircle_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndCircle.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct EndCircle_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetBrush) == 0x000008, "Wrong alignment on EndCircle_SetBrush");
static_assert(sizeof(EndCircle_SetBrush) == 0x000088, "Wrong size on EndCircle_SetBrush");
static_assert(offsetof(EndCircle_SetBrush, InBrush) == 0x000000, "Member 'EndCircle_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndCircle.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndCircle_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndCircle_SetBrushFromAsset");
static_assert(sizeof(EndCircle_SetBrushFromAsset) == 0x000008, "Wrong size on EndCircle_SetBrushFromAsset");
static_assert(offsetof(EndCircle_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndCircle_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndCircle.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndCircle_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndCircle_SetBrushFromMaterial");
static_assert(sizeof(EndCircle_SetBrushFromMaterial) == 0x000008, "Wrong size on EndCircle_SetBrushFromMaterial");
static_assert(offsetof(EndCircle_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndCircle_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndCircle.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct EndCircle_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCircle_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndCircle_SetBrushFromTexture");
static_assert(sizeof(EndCircle_SetBrushFromTexture) == 0x000010, "Wrong size on EndCircle_SetBrushFromTexture");
static_assert(offsetof(EndCircle_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndCircle_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(EndCircle_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'EndCircle_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function EndGame.EndCircle.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct EndCircle_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCircle_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on EndCircle_SetBrushFromTextureDynamic");
static_assert(sizeof(EndCircle_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on EndCircle_SetBrushFromTextureDynamic");
static_assert(offsetof(EndCircle_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'EndCircle_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(EndCircle_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'EndCircle_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function EndGame.EndCircle.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndCircle_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndCircle_SetColorAndOpacity");
static_assert(sizeof(EndCircle_SetColorAndOpacity) == 0x000010, "Wrong size on EndCircle_SetColorAndOpacity");
static_assert(offsetof(EndCircle_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndCircle_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndCircle.SetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCircle_SetEndAngle final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetEndAngle) == 0x000004, "Wrong alignment on EndCircle_SetEndAngle");
static_assert(sizeof(EndCircle_SetEndAngle) == 0x000004, "Wrong size on EndCircle_SetEndAngle");
static_assert(offsetof(EndCircle_SetEndAngle, InAngle) == 0x000000, "Member 'EndCircle_SetEndAngle::InAngle' has a wrong offset!");

// Function EndGame.EndCircle.SetNumSides
// 0x0004 (0x0004 - 0x0000)
struct EndCircle_SetNumSides final
{
public:
	int32                                         InNumSides;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetNumSides) == 0x000004, "Wrong alignment on EndCircle_SetNumSides");
static_assert(sizeof(EndCircle_SetNumSides) == 0x000004, "Wrong size on EndCircle_SetNumSides");
static_assert(offsetof(EndCircle_SetNumSides, InNumSides) == 0x000000, "Member 'EndCircle_SetNumSides::InNumSides' has a wrong offset!");

// Function EndGame.EndCircle.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndCircle_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetOpacity) == 0x000004, "Wrong alignment on EndCircle_SetOpacity");
static_assert(sizeof(EndCircle_SetOpacity) == 0x000004, "Wrong size on EndCircle_SetOpacity");
static_assert(offsetof(EndCircle_SetOpacity, InOpacity) == 0x000000, "Member 'EndCircle_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndCircle.SetRadius
// 0x0004 (0x0004 - 0x0000)
struct EndCircle_SetRadius final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetRadius) == 0x000004, "Wrong alignment on EndCircle_SetRadius");
static_assert(sizeof(EndCircle_SetRadius) == 0x000004, "Wrong size on EndCircle_SetRadius");
static_assert(offsetof(EndCircle_SetRadius, InRadius) == 0x000000, "Member 'EndCircle_SetRadius::InRadius' has a wrong offset!");

// Function EndGame.EndCircle.SetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCircle_SetStartAngle final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetStartAngle) == 0x000004, "Wrong alignment on EndCircle_SetStartAngle");
static_assert(sizeof(EndCircle_SetStartAngle) == 0x000004, "Wrong size on EndCircle_SetStartAngle");
static_assert(offsetof(EndCircle_SetStartAngle, InAngle) == 0x000000, "Member 'EndCircle_SetStartAngle::InAngle' has a wrong offset!");

// Function EndGame.EndCmdLinkupPane.OnLinkupCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndCmdLinkupPane_OnLinkupCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCmdLinkupPane_OnLinkupCellSetup) == 0x000008, "Wrong alignment on EndCmdLinkupPane_OnLinkupCellSetup");
static_assert(sizeof(EndCmdLinkupPane_OnLinkupCellSetup) == 0x000010, "Wrong size on EndCmdLinkupPane_OnLinkupCellSetup");
static_assert(offsetof(EndCmdLinkupPane_OnLinkupCellSetup, ItemWidget) == 0x000000, "Member 'EndCmdLinkupPane_OnLinkupCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCmdLinkupPane_OnLinkupCellSetup, ItemIndex) == 0x000008, "Member 'EndCmdLinkupPane_OnLinkupCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndColorPickerBar.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndColorPickerBar_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColorPickerBar_SetBlendMode) == 0x000001, "Wrong alignment on EndColorPickerBar_SetBlendMode");
static_assert(sizeof(EndColorPickerBar_SetBlendMode) == 0x000001, "Wrong size on EndColorPickerBar_SetBlendMode");
static_assert(offsetof(EndColorPickerBar_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndColorPickerBar_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndColorPickerBar.SetChannel
// 0x0001 (0x0001 - 0x0000)
struct EndColorPickerBar_SetChannel final
{
public:
	EEndMenuSlateColorPickerChannels              InChannel;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColorPickerBar_SetChannel) == 0x000001, "Wrong alignment on EndColorPickerBar_SetChannel");
static_assert(sizeof(EndColorPickerBar_SetChannel) == 0x000001, "Wrong size on EndColorPickerBar_SetChannel");
static_assert(offsetof(EndColorPickerBar_SetChannel, InChannel) == 0x000000, "Member 'EndColorPickerBar_SetChannel::InChannel' has a wrong offset!");

// Function EndGame.EndColorPickerBar.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndColorPickerBar_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColorPickerBar_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndColorPickerBar_SetColorAndOpacity");
static_assert(sizeof(EndColorPickerBar_SetColorAndOpacity) == 0x000010, "Wrong size on EndColorPickerBar_SetColorAndOpacity");
static_assert(offsetof(EndColorPickerBar_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndColorPickerBar_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndColorPickerBar.SetHue
// 0x0004 (0x0004 - 0x0000)
struct EndColorPickerBar_SetHue final
{
public:
	float                                         InHue;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColorPickerBar_SetHue) == 0x000004, "Wrong alignment on EndColorPickerBar_SetHue");
static_assert(sizeof(EndColorPickerBar_SetHue) == 0x000004, "Wrong size on EndColorPickerBar_SetHue");
static_assert(offsetof(EndColorPickerBar_SetHue, InHue) == 0x000000, "Member 'EndColorPickerBar_SetHue::InHue' has a wrong offset!");

// Function EndGame.EndColorPickerBar.SetNumBlocks
// 0x0004 (0x0004 - 0x0000)
struct EndColorPickerBar_SetNumBlocks final
{
public:
	int32                                         InNumBlocks;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColorPickerBar_SetNumBlocks) == 0x000004, "Wrong alignment on EndColorPickerBar_SetNumBlocks");
static_assert(sizeof(EndColorPickerBar_SetNumBlocks) == 0x000004, "Wrong size on EndColorPickerBar_SetNumBlocks");
static_assert(offsetof(EndColorPickerBar_SetNumBlocks, InNumBlocks) == 0x000000, "Member 'EndColorPickerBar_SetNumBlocks::InNumBlocks' has a wrong offset!");

// Function EndGame.EndColorPickerBar.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndColorPickerBar_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColorPickerBar_SetOpacity) == 0x000004, "Wrong alignment on EndColorPickerBar_SetOpacity");
static_assert(sizeof(EndColorPickerBar_SetOpacity) == 0x000004, "Wrong size on EndColorPickerBar_SetOpacity");
static_assert(offsetof(EndColorPickerBar_SetOpacity, InOpacity) == 0x000000, "Member 'EndColorPickerBar_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndColorPickerBar.SetSaturation
// 0x0004 (0x0004 - 0x0000)
struct EndColorPickerBar_SetSaturation final
{
public:
	float                                         InSaturation;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColorPickerBar_SetSaturation) == 0x000004, "Wrong alignment on EndColorPickerBar_SetSaturation");
static_assert(sizeof(EndColorPickerBar_SetSaturation) == 0x000004, "Wrong size on EndColorPickerBar_SetSaturation");
static_assert(offsetof(EndColorPickerBar_SetSaturation, InSaturation) == 0x000000, "Member 'EndColorPickerBar_SetSaturation::InSaturation' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnBattleInfoWindowMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndColosseumMenu_OnBattleInfoWindowMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnBattleInfoWindowMeasureItem) == 0x000004, "Wrong alignment on EndColosseumMenu_OnBattleInfoWindowMeasureItem");
static_assert(sizeof(EndColosseumMenu_OnBattleInfoWindowMeasureItem) == 0x00000C, "Wrong size on EndColosseumMenu_OnBattleInfoWindowMeasureItem");
static_assert(offsetof(EndColosseumMenu_OnBattleInfoWindowMeasureItem, ItemIndex) == 0x000000, "Member 'EndColosseumMenu_OnBattleInfoWindowMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnBattleInfoWindowMeasureItem, ReturnValue) == 0x000004, "Member 'EndColosseumMenu_OnBattleInfoWindowMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnBattleInfoWindowSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnBattleInfoWindowSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnBattleInfoWindowSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnBattleInfoWindowSetupItem");
static_assert(sizeof(EndColosseumMenu_OnBattleInfoWindowSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnBattleInfoWindowSetupItem");
static_assert(offsetof(EndColosseumMenu_OnBattleInfoWindowSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnBattleInfoWindowSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnBattleInfoWindowSetupItem, CellIndex) == 0x000008, "Member 'EndColosseumMenu_OnBattleInfoWindowSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCharaSelectMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnCharaSelectMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnCharaSelectMenuPressedItem) == 0x000004, "Wrong alignment on EndColosseumMenu_OnCharaSelectMenuPressedItem");
static_assert(sizeof(EndColosseumMenu_OnCharaSelectMenuPressedItem) == 0x000004, "Wrong size on EndColosseumMenu_OnCharaSelectMenuPressedItem");
static_assert(offsetof(EndColosseumMenu_OnCharaSelectMenuPressedItem, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnCharaSelectMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCharaSelectMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnCharaSelectMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnCharaSelectMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndColosseumMenu_OnCharaSelectMenuSelectedIndexChanged");
static_assert(sizeof(EndColosseumMenu_OnCharaSelectMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndColosseumMenu_OnCharaSelectMenuSelectedIndexChanged");
static_assert(offsetof(EndColosseumMenu_OnCharaSelectMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnCharaSelectMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCharaSelectMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnCharaSelectMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnCharaSelectMenuSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnCharaSelectMenuSetupItem");
static_assert(sizeof(EndColosseumMenu_OnCharaSelectMenuSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnCharaSelectMenuSetupItem");
static_assert(offsetof(EndColosseumMenu_OnCharaSelectMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnCharaSelectMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnCharaSelectMenuSetupItem, CellIndex) == 0x000008, "Member 'EndColosseumMenu_OnCharaSelectMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCourseMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnCourseMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnCourseMenuPressedItem) == 0x000004, "Wrong alignment on EndColosseumMenu_OnCourseMenuPressedItem");
static_assert(sizeof(EndColosseumMenu_OnCourseMenuPressedItem) == 0x000004, "Wrong size on EndColosseumMenu_OnCourseMenuPressedItem");
static_assert(offsetof(EndColosseumMenu_OnCourseMenuPressedItem, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnCourseMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCourseMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnCourseMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnCourseMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndColosseumMenu_OnCourseMenuSelectedIndexChanged");
static_assert(sizeof(EndColosseumMenu_OnCourseMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndColosseumMenu_OnCourseMenuSelectedIndexChanged");
static_assert(offsetof(EndColosseumMenu_OnCourseMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnCourseMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCourseMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnCourseMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnCourseMenuSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnCourseMenuSetupItem");
static_assert(sizeof(EndColosseumMenu_OnCourseMenuSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnCourseMenuSetupItem");
static_assert(offsetof(EndColosseumMenu_OnCourseMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnCourseMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnCourseMenuSetupItem, CellIndex) == 0x000008, "Member 'EndColosseumMenu_OnCourseMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnMissionListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnMissionListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnMissionListSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnMissionListSetupItem");
static_assert(sizeof(EndColosseumMenu_OnMissionListSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnMissionListSetupItem");
static_assert(offsetof(EndColosseumMenu_OnMissionListSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnMissionListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnMissionListSetupItem, ItemIndex) == 0x000008, "Member 'EndColosseumMenu_OnMissionListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnSummonLevelSelectMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnSummonLevelSelectMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnSummonLevelSelectMenuPressedItem) == 0x000004, "Wrong alignment on EndColosseumMenu_OnSummonLevelSelectMenuPressedItem");
static_assert(sizeof(EndColosseumMenu_OnSummonLevelSelectMenuPressedItem) == 0x000004, "Wrong size on EndColosseumMenu_OnSummonLevelSelectMenuPressedItem");
static_assert(offsetof(EndColosseumMenu_OnSummonLevelSelectMenuPressedItem, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnSummonLevelSelectMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnSummonLevelSelectMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnSummonLevelSelectMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnSummonLevelSelectMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndColosseumMenu_OnSummonLevelSelectMenuSelectedIndexChanged");
static_assert(sizeof(EndColosseumMenu_OnSummonLevelSelectMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndColosseumMenu_OnSummonLevelSelectMenuSelectedIndexChanged");
static_assert(offsetof(EndColosseumMenu_OnSummonLevelSelectMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnSummonLevelSelectMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnSummonLevelSelectMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnSummonLevelSelectMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnSummonLevelSelectMenuSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnSummonLevelSelectMenuSetupItem");
static_assert(sizeof(EndColosseumMenu_OnSummonLevelSelectMenuSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnSummonLevelSelectMenuSetupItem");
static_assert(offsetof(EndColosseumMenu_OnSummonLevelSelectMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnSummonLevelSelectMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnSummonLevelSelectMenuSetupItem, CellIndex) == 0x000008, "Member 'EndColosseumMenu_OnSummonLevelSelectMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnTagMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndColosseumMenu_OnTagMenuMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnTagMenuMeasureItem) == 0x000004, "Wrong alignment on EndColosseumMenu_OnTagMenuMeasureItem");
static_assert(sizeof(EndColosseumMenu_OnTagMenuMeasureItem) == 0x00000C, "Wrong size on EndColosseumMenu_OnTagMenuMeasureItem");
static_assert(offsetof(EndColosseumMenu_OnTagMenuMeasureItem, ItemIndex) == 0x000000, "Member 'EndColosseumMenu_OnTagMenuMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnTagMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndColosseumMenu_OnTagMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnTagMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnTagMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnTagMenuSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnTagMenuSetupItem");
static_assert(sizeof(EndColosseumMenu_OnTagMenuSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnTagMenuSetupItem");
static_assert(offsetof(EndColosseumMenu_OnTagMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnTagMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnTagMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndColosseumMenu_OnTagMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnTermListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnTermListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnTermListSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnTermListSetupItem");
static_assert(sizeof(EndColosseumMenu_OnTermListSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnTermListSetupItem");
static_assert(offsetof(EndColosseumMenu_OnTermListSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnTermListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnTermListSetupItem, ItemIndex) == 0x000008, "Member 'EndColosseumMenu_OnTermListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortATBGauge.OnMeasureItem_GaugeDivisions
// 0x000C (0x000C - 0x0000)
struct EndCondorFortATBGauge_OnMeasureItem_GaugeDivisions final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortATBGauge_OnMeasureItem_GaugeDivisions) == 0x000004, "Wrong alignment on EndCondorFortATBGauge_OnMeasureItem_GaugeDivisions");
static_assert(sizeof(EndCondorFortATBGauge_OnMeasureItem_GaugeDivisions) == 0x00000C, "Wrong size on EndCondorFortATBGauge_OnMeasureItem_GaugeDivisions");
static_assert(offsetof(EndCondorFortATBGauge_OnMeasureItem_GaugeDivisions, ItemIndex) == 0x000000, "Member 'EndCondorFortATBGauge_OnMeasureItem_GaugeDivisions::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndCondorFortATBGauge_OnMeasureItem_GaugeDivisions, ReturnValue) == 0x000004, "Member 'EndCondorFortATBGauge_OnMeasureItem_GaugeDivisions::ReturnValue' has a wrong offset!");

// Function EndGame.EndCondorFortUnitList.OnSetup_List_BossUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitList_OnSetup_List_BossUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitList_OnSetup_List_BossUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitList_OnSetup_List_BossUnit");
static_assert(sizeof(EndCondorFortUnitList_OnSetup_List_BossUnit) == 0x000010, "Wrong size on EndCondorFortUnitList_OnSetup_List_BossUnit");
static_assert(offsetof(EndCondorFortUnitList_OnSetup_List_BossUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitList_OnSetup_List_BossUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitList_OnSetup_List_BossUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitList_OnSetup_List_BossUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitList.OnSetup_List_EnemyUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitList_OnSetup_List_EnemyUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitList_OnSetup_List_EnemyUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitList_OnSetup_List_EnemyUnit");
static_assert(sizeof(EndCondorFortUnitList_OnSetup_List_EnemyUnit) == 0x000010, "Wrong size on EndCondorFortUnitList_OnSetup_List_EnemyUnit");
static_assert(offsetof(EndCondorFortUnitList_OnSetup_List_EnemyUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitList_OnSetup_List_EnemyUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitList_OnSetup_List_EnemyUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitList_OnSetup_List_EnemyUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitList.OnSetup_List_PlayerUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitList_OnSetup_List_PlayerUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitList_OnSetup_List_PlayerUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitList_OnSetup_List_PlayerUnit");
static_assert(sizeof(EndCondorFortUnitList_OnSetup_List_PlayerUnit) == 0x000010, "Wrong size on EndCondorFortUnitList_OnSetup_List_PlayerUnit");
static_assert(offsetof(EndCondorFortUnitList_OnSetup_List_PlayerUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitList_OnSetup_List_PlayerUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitList_OnSetup_List_PlayerUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitList_OnSetup_List_PlayerUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitList.OnSetup_List_Switch
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitList_OnSetup_List_Switch final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitList_OnSetup_List_Switch) == 0x000008, "Wrong alignment on EndCondorFortUnitList_OnSetup_List_Switch");
static_assert(sizeof(EndCondorFortUnitList_OnSetup_List_Switch) == 0x000010, "Wrong size on EndCondorFortUnitList_OnSetup_List_Switch");
static_assert(offsetof(EndCondorFortUnitList_OnSetup_List_Switch, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitList_OnSetup_List_Switch::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitList_OnSetup_List_Switch, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitList_OnSetup_List_Switch::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitList.OnSetup_List_UniqueUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitList_OnSetup_List_UniqueUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitList_OnSetup_List_UniqueUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitList_OnSetup_List_UniqueUnit");
static_assert(sizeof(EndCondorFortUnitList_OnSetup_List_UniqueUnit) == 0x000010, "Wrong size on EndCondorFortUnitList_OnSetup_List_UniqueUnit");
static_assert(offsetof(EndCondorFortUnitList_OnSetup_List_UniqueUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitList_OnSetup_List_UniqueUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitList_OnSetup_List_UniqueUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitList_OnSetup_List_UniqueUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitSelect.OnDecided_ConfirmWindow
// 0x0004 (0x0004 - 0x0000)
struct EndCondorFortUnitSelect_OnDecided_ConfirmWindow final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortUnitSelect_OnDecided_ConfirmWindow) == 0x000004, "Wrong alignment on EndCondorFortUnitSelect_OnDecided_ConfirmWindow");
static_assert(sizeof(EndCondorFortUnitSelect_OnDecided_ConfirmWindow) == 0x000004, "Wrong size on EndCondorFortUnitSelect_OnDecided_ConfirmWindow");
static_assert(offsetof(EndCondorFortUnitSelect_OnDecided_ConfirmWindow, SelectedIndex) == 0x000000, "Member 'EndCondorFortUnitSelect_OnDecided_ConfirmWindow::SelectedIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitSelect.OnSetup_List_BossUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitSelect_OnSetup_List_BossUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitSelect_OnSetup_List_BossUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitSelect_OnSetup_List_BossUnit");
static_assert(sizeof(EndCondorFortUnitSelect_OnSetup_List_BossUnit) == 0x000010, "Wrong size on EndCondorFortUnitSelect_OnSetup_List_BossUnit");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_List_BossUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitSelect_OnSetup_List_BossUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_List_BossUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitSelect_OnSetup_List_BossUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitSelect.OnSetup_List_EnemyUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitSelect_OnSetup_List_EnemyUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitSelect_OnSetup_List_EnemyUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitSelect_OnSetup_List_EnemyUnit");
static_assert(sizeof(EndCondorFortUnitSelect_OnSetup_List_EnemyUnit) == 0x000010, "Wrong size on EndCondorFortUnitSelect_OnSetup_List_EnemyUnit");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_List_EnemyUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitSelect_OnSetup_List_EnemyUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_List_EnemyUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitSelect_OnSetup_List_EnemyUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitSelect.OnSetup_List_PlayerUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitSelect_OnSetup_List_PlayerUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitSelect_OnSetup_List_PlayerUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitSelect_OnSetup_List_PlayerUnit");
static_assert(sizeof(EndCondorFortUnitSelect_OnSetup_List_PlayerUnit) == 0x000010, "Wrong size on EndCondorFortUnitSelect_OnSetup_List_PlayerUnit");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_List_PlayerUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitSelect_OnSetup_List_PlayerUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_List_PlayerUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitSelect_OnSetup_List_PlayerUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitSelect.OnSetup_List_TowerUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitSelect_OnSetup_List_TowerUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitSelect_OnSetup_List_TowerUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitSelect_OnSetup_List_TowerUnit");
static_assert(sizeof(EndCondorFortUnitSelect_OnSetup_List_TowerUnit) == 0x000010, "Wrong size on EndCondorFortUnitSelect_OnSetup_List_TowerUnit");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_List_TowerUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitSelect_OnSetup_List_TowerUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_List_TowerUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitSelect_OnSetup_List_TowerUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitSelect.OnSetup_List_UniqueUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitSelect_OnSetup_List_UniqueUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitSelect_OnSetup_List_UniqueUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitSelect_OnSetup_List_UniqueUnit");
static_assert(sizeof(EndCondorFortUnitSelect_OnSetup_List_UniqueUnit) == 0x000010, "Wrong size on EndCondorFortUnitSelect_OnSetup_List_UniqueUnit");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_List_UniqueUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitSelect_OnSetup_List_UniqueUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_List_UniqueUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitSelect_OnSetup_List_UniqueUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitSelect.OnSetup_Switch_PlayerUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitSelect_OnSetup_Switch_PlayerUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitSelect_OnSetup_Switch_PlayerUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitSelect_OnSetup_Switch_PlayerUnit");
static_assert(sizeof(EndCondorFortUnitSelect_OnSetup_Switch_PlayerUnit) == 0x000010, "Wrong size on EndCondorFortUnitSelect_OnSetup_Switch_PlayerUnit");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_Switch_PlayerUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitSelect_OnSetup_Switch_PlayerUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_Switch_PlayerUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitSelect_OnSetup_Switch_PlayerUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortUnitSelect.OnSetup_Switch_UniqueUnit
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortUnitSelect_OnSetup_Switch_UniqueUnit final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortUnitSelect_OnSetup_Switch_UniqueUnit) == 0x000008, "Wrong alignment on EndCondorFortUnitSelect_OnSetup_Switch_UniqueUnit");
static_assert(sizeof(EndCondorFortUnitSelect_OnSetup_Switch_UniqueUnit) == 0x000010, "Wrong size on EndCondorFortUnitSelect_OnSetup_Switch_UniqueUnit");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_Switch_UniqueUnit, ItemWidget) == 0x000000, "Member 'EndCondorFortUnitSelect_OnSetup_Switch_UniqueUnit::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortUnitSelect_OnSetup_Switch_UniqueUnit, ItemIndex) == 0x000008, "Member 'EndCondorFortUnitSelect_OnSetup_Switch_UniqueUnit::ItemIndex' has a wrong offset!");

// Function EndGame.EndNaviMapCircle.ConvertToPosition2D
// 0x0014 (0x0014 - 0x0000)
struct EndNaviMapCircle_ConvertToPosition2D final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapCircle_ConvertToPosition2D) == 0x000004, "Wrong alignment on EndNaviMapCircle_ConvertToPosition2D");
static_assert(sizeof(EndNaviMapCircle_ConvertToPosition2D) == 0x000014, "Wrong size on EndNaviMapCircle_ConvertToPosition2D");
static_assert(offsetof(EndNaviMapCircle_ConvertToPosition2D, InPos) == 0x000000, "Member 'EndNaviMapCircle_ConvertToPosition2D::InPos' has a wrong offset!");
static_assert(offsetof(EndNaviMapCircle_ConvertToPosition2D, ReturnValue) == 0x00000C, "Member 'EndNaviMapCircle_ConvertToPosition2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndNaviMapCircle.SetPosition3D
// 0x000C (0x000C - 0x0000)
struct EndNaviMapCircle_SetPosition3D final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapCircle_SetPosition3D) == 0x000004, "Wrong alignment on EndNaviMapCircle_SetPosition3D");
static_assert(sizeof(EndNaviMapCircle_SetPosition3D) == 0x00000C, "Wrong size on EndNaviMapCircle_SetPosition3D");
static_assert(offsetof(EndNaviMapCircle_SetPosition3D, InPos) == 0x000000, "Member 'EndNaviMapCircle_SetPosition3D::InPos' has a wrong offset!");

// Function EndGame.EndCostumeMenu.OnScrollBoxClothesMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndCostumeMenu_OnScrollBoxClothesMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCostumeMenu_OnScrollBoxClothesMeasureItem) == 0x000004, "Wrong alignment on EndCostumeMenu_OnScrollBoxClothesMeasureItem");
static_assert(sizeof(EndCostumeMenu_OnScrollBoxClothesMeasureItem) == 0x00000C, "Wrong size on EndCostumeMenu_OnScrollBoxClothesMeasureItem");
static_assert(offsetof(EndCostumeMenu_OnScrollBoxClothesMeasureItem, ItemIndex) == 0x000000, "Member 'EndCostumeMenu_OnScrollBoxClothesMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndCostumeMenu_OnScrollBoxClothesMeasureItem, ReturnValue) == 0x000004, "Member 'EndCostumeMenu_OnScrollBoxClothesMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndCostumeMenu.OnScrollBoxClothesPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndCostumeMenu_OnScrollBoxClothesPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCostumeMenu_OnScrollBoxClothesPressedItem) == 0x000004, "Wrong alignment on EndCostumeMenu_OnScrollBoxClothesPressedItem");
static_assert(sizeof(EndCostumeMenu_OnScrollBoxClothesPressedItem) == 0x000004, "Wrong size on EndCostumeMenu_OnScrollBoxClothesPressedItem");
static_assert(offsetof(EndCostumeMenu_OnScrollBoxClothesPressedItem, ItemIndex) == 0x000000, "Member 'EndCostumeMenu_OnScrollBoxClothesPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndCostumeMenu.OnScrollBoxClothesSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndCostumeMenu_OnScrollBoxClothesSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCostumeMenu_OnScrollBoxClothesSelectedIndexChanged) == 0x000004, "Wrong alignment on EndCostumeMenu_OnScrollBoxClothesSelectedIndexChanged");
static_assert(sizeof(EndCostumeMenu_OnScrollBoxClothesSelectedIndexChanged) == 0x000004, "Wrong size on EndCostumeMenu_OnScrollBoxClothesSelectedIndexChanged");
static_assert(offsetof(EndCostumeMenu_OnScrollBoxClothesSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndCostumeMenu_OnScrollBoxClothesSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndCostumeMenu.OnScrollBoxClothesSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCostumeMenu_OnScrollBoxClothesSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCostumeMenu_OnScrollBoxClothesSetupItem) == 0x000008, "Wrong alignment on EndCostumeMenu_OnScrollBoxClothesSetupItem");
static_assert(sizeof(EndCostumeMenu_OnScrollBoxClothesSetupItem) == 0x000010, "Wrong size on EndCostumeMenu_OnScrollBoxClothesSetupItem");
static_assert(offsetof(EndCostumeMenu_OnScrollBoxClothesSetupItem, ItemWidget) == 0x000000, "Member 'EndCostumeMenu_OnScrollBoxClothesSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCostumeMenu_OnScrollBoxClothesSetupItem, ItemIndex) == 0x000008, "Member 'EndCostumeMenu_OnScrollBoxClothesSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndCostumeMenu.OnScrollBoxMemberPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndCostumeMenu_OnScrollBoxMemberPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCostumeMenu_OnScrollBoxMemberPressedItem) == 0x000004, "Wrong alignment on EndCostumeMenu_OnScrollBoxMemberPressedItem");
static_assert(sizeof(EndCostumeMenu_OnScrollBoxMemberPressedItem) == 0x000004, "Wrong size on EndCostumeMenu_OnScrollBoxMemberPressedItem");
static_assert(offsetof(EndCostumeMenu_OnScrollBoxMemberPressedItem, ItemIndex) == 0x000000, "Member 'EndCostumeMenu_OnScrollBoxMemberPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndCostumeMenu.OnScrollBoxMemberSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndCostumeMenu_OnScrollBoxMemberSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCostumeMenu_OnScrollBoxMemberSelectedIndexChanged) == 0x000004, "Wrong alignment on EndCostumeMenu_OnScrollBoxMemberSelectedIndexChanged");
static_assert(sizeof(EndCostumeMenu_OnScrollBoxMemberSelectedIndexChanged) == 0x000004, "Wrong size on EndCostumeMenu_OnScrollBoxMemberSelectedIndexChanged");
static_assert(offsetof(EndCostumeMenu_OnScrollBoxMemberSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndCostumeMenu_OnScrollBoxMemberSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndCostumeMenu.OnScrollBoxMemberSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndCostumeMenu_OnScrollBoxMemberSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCostumeMenu_OnScrollBoxMemberSetupItem) == 0x000008, "Wrong alignment on EndCostumeMenu_OnScrollBoxMemberSetupItem");
static_assert(sizeof(EndCostumeMenu_OnScrollBoxMemberSetupItem) == 0x000010, "Wrong size on EndCostumeMenu_OnScrollBoxMemberSetupItem");
static_assert(offsetof(EndCostumeMenu_OnScrollBoxMemberSetupItem, ItemWidget) == 0x000000, "Member 'EndCostumeMenu_OnScrollBoxMemberSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCostumeMenu_OnScrollBoxMemberSetupItem, ItemIndex) == 0x000008, "Member 'EndCostumeMenu_OnScrollBoxMemberSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStaticMeshActor.PlayEmissiveColorAnimation
// 0x0048 (0x0048 - 0x0000)
struct EndStaticMeshActor_PlayEmissiveColorAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EmissiveColorSettingsId;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationModifierType                     ModifierType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimationCurveType                        CurveType;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveAsset;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveEvaluateInLogarithmicSpace;                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomAdditiveDuration;                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomOffset;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimComponentControlLayer                 Layer;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStaticMeshActor_PlayEmissiveColorAnimation) == 0x000008, "Wrong alignment on EndStaticMeshActor_PlayEmissiveColorAnimation");
static_assert(sizeof(EndStaticMeshActor_PlayEmissiveColorAnimation) == 0x000048, "Wrong size on EndStaticMeshActor_PlayEmissiveColorAnimation");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, RequestID) == 0x000000, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::RequestID' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, EmissiveColorSettingsId) == 0x000008, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::EmissiveColorSettingsId' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, ModifierType) == 0x000010, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::ModifierType' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, CurveType) == 0x000011, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::CurveType' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, CurveAsset) == 0x000018, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::CurveAsset' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, bCurveEvaluateInLogarithmicSpace) == 0x000020, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::bCurveEvaluateInLogarithmicSpace' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, bLoop) == 0x000021, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::bLoop' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, Duration) == 0x000024, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::Duration' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, RandomAdditiveDuration) == 0x000028, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::RandomAdditiveDuration' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, RandomOffset) == 0x00002C, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::RandomOffset' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, BlendInTime) == 0x000030, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, BlendOutTime) == 0x000034, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, StartOffset) == 0x000038, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::StartOffset' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, EndOffset) == 0x00003C, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::EndOffset' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_PlayEmissiveColorAnimation, Layer) == 0x000040, "Member 'EndStaticMeshActor_PlayEmissiveColorAnimation::Layer' has a wrong offset!");

// Function EndGame.EndStaticMeshActor.ResetDirectEmissiveColor
// 0x0008 (0x0008 - 0x0000)
struct EndStaticMeshActor_ResetDirectEmissiveColor final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStaticMeshActor_ResetDirectEmissiveColor) == 0x000004, "Wrong alignment on EndStaticMeshActor_ResetDirectEmissiveColor");
static_assert(sizeof(EndStaticMeshActor_ResetDirectEmissiveColor) == 0x000008, "Wrong size on EndStaticMeshActor_ResetDirectEmissiveColor");
static_assert(offsetof(EndStaticMeshActor_ResetDirectEmissiveColor, RequestID) == 0x000000, "Member 'EndStaticMeshActor_ResetDirectEmissiveColor::RequestID' has a wrong offset!");

// Function EndGame.EndStaticMeshActor.SetDirectEmissiveColor
// 0x0014 (0x0014 - 0x0000)
struct EndStaticMeshActor_SetDirectEmissiveColor final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EmissiveColorSettingsId;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityAlpha;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStaticMeshActor_SetDirectEmissiveColor) == 0x000004, "Wrong alignment on EndStaticMeshActor_SetDirectEmissiveColor");
static_assert(sizeof(EndStaticMeshActor_SetDirectEmissiveColor) == 0x000014, "Wrong size on EndStaticMeshActor_SetDirectEmissiveColor");
static_assert(offsetof(EndStaticMeshActor_SetDirectEmissiveColor, RequestID) == 0x000000, "Member 'EndStaticMeshActor_SetDirectEmissiveColor::RequestID' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_SetDirectEmissiveColor, EmissiveColorSettingsId) == 0x000008, "Member 'EndStaticMeshActor_SetDirectEmissiveColor::EmissiveColorSettingsId' has a wrong offset!");
static_assert(offsetof(EndStaticMeshActor_SetDirectEmissiveColor, IntensityAlpha) == 0x000010, "Member 'EndStaticMeshActor_SetDirectEmissiveColor::IntensityAlpha' has a wrong offset!");

// Function EndGame.EndStaticMeshActor.StopEmissiveColorAnimation
// 0x0008 (0x0008 - 0x0000)
struct EndStaticMeshActor_StopEmissiveColorAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStaticMeshActor_StopEmissiveColorAnimation) == 0x000004, "Wrong alignment on EndStaticMeshActor_StopEmissiveColorAnimation");
static_assert(sizeof(EndStaticMeshActor_StopEmissiveColorAnimation) == 0x000008, "Wrong size on EndStaticMeshActor_StopEmissiveColorAnimation");
static_assert(offsetof(EndStaticMeshActor_StopEmissiveColorAnimation, RequestID) == 0x000000, "Member 'EndStaticMeshActor_StopEmissiveColorAnimation::RequestID' has a wrong offset!");

// Function EndGame.EndStaticMeshActor.IsActiveEmissiveColorAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndStaticMeshActor_IsActiveEmissiveColorAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStaticMeshActor_IsActiveEmissiveColorAnimation) == 0x000001, "Wrong alignment on EndStaticMeshActor_IsActiveEmissiveColorAnimation");
static_assert(sizeof(EndStaticMeshActor_IsActiveEmissiveColorAnimation) == 0x000001, "Wrong size on EndStaticMeshActor_IsActiveEmissiveColorAnimation");
static_assert(offsetof(EndStaticMeshActor_IsActiveEmissiveColorAnimation, ReturnValue) == 0x000000, "Member 'EndStaticMeshActor_IsActiveEmissiveColorAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameElectricCableActor.ApplyCableType
// 0x0001 (0x0001 - 0x0000)
struct EndCrashBoxMiniGameElectricCableActor_ApplyCableType final
{
public:
	EEndCrashBoxMiniGameCableType                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameElectricCableActor_ApplyCableType) == 0x000001, "Wrong alignment on EndCrashBoxMiniGameElectricCableActor_ApplyCableType");
static_assert(sizeof(EndCrashBoxMiniGameElectricCableActor_ApplyCableType) == 0x000001, "Wrong size on EndCrashBoxMiniGameElectricCableActor_ApplyCableType");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_ApplyCableType, ReturnValue) == 0x000000, "Member 'EndCrashBoxMiniGameElectricCableActor_ApplyCableType::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameElectricCableActor.GetBoxType
// 0x0001 (0x0001 - 0x0000)
struct EndCrashBoxMiniGameElectricCableActor_GetBoxType final
{
public:
	EEndCrashBoxMiniGameCableType                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameElectricCableActor_GetBoxType) == 0x000001, "Wrong alignment on EndCrashBoxMiniGameElectricCableActor_GetBoxType");
static_assert(sizeof(EndCrashBoxMiniGameElectricCableActor_GetBoxType) == 0x000001, "Wrong size on EndCrashBoxMiniGameElectricCableActor_GetBoxType");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_GetBoxType, ReturnValue) == 0x000000, "Member 'EndCrashBoxMiniGameElectricCableActor_GetBoxType::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameElectricCableActor.OnBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap");
static_assert(sizeof(EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap) == 0x0000B0, "Wrong size on EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap, OtherActor) == 0x000008, "Member 'EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap, OtherComp) == 0x000010, "Member 'EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap, SweepResult) == 0x000020, "Member 'EndCrashBoxMiniGameElectricCableActor_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameElectricCableActor.SetEffectDummyPoint
// 0x0010 (0x0010 - 0x0000)
struct EndCrashBoxMiniGameElectricCableActor_SetEffectDummyPoint final
{
public:
	EEndCrashBoxMiniGameEffectCable               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameElectricCableActor_SetEffectDummyPoint) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameElectricCableActor_SetEffectDummyPoint");
static_assert(sizeof(EndCrashBoxMiniGameElectricCableActor_SetEffectDummyPoint) == 0x000010, "Wrong size on EndCrashBoxMiniGameElectricCableActor_SetEffectDummyPoint");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_SetEffectDummyPoint, Type) == 0x000000, "Member 'EndCrashBoxMiniGameElectricCableActor_SetEffectDummyPoint::Type' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_SetEffectDummyPoint, Component) == 0x000008, "Member 'EndCrashBoxMiniGameElectricCableActor_SetEffectDummyPoint::Component' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameElectricCableActor.SetReferenceMainStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct EndCrashBoxMiniGameElectricCableActor_SetReferenceMainStaticMesh final
{
public:
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameElectricCableActor_SetReferenceMainStaticMesh) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameElectricCableActor_SetReferenceMainStaticMesh");
static_assert(sizeof(EndCrashBoxMiniGameElectricCableActor_SetReferenceMainStaticMesh) == 0x000008, "Wrong size on EndCrashBoxMiniGameElectricCableActor_SetReferenceMainStaticMesh");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_SetReferenceMainStaticMesh, StaticMeshComp) == 0x000000, "Member 'EndCrashBoxMiniGameElectricCableActor_SetReferenceMainStaticMesh::StaticMeshComp' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameElectricCableActor.SetReferenceStaticMesh
// 0x0010 (0x0010 - 0x0000)
struct EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMesh final
{
public:
	EEndCrashBoxMiniGameCableType                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMesh) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMesh");
static_assert(sizeof(EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMesh) == 0x000010, "Wrong size on EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMesh");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMesh, Type) == 0x000000, "Member 'EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMesh::Type' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMesh, StaticMeshComp) == 0x000008, "Member 'EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMesh::StaticMeshComp' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameElectricCableActor.SetReferenceStaticMeshTrigger
// 0x0010 (0x0010 - 0x0000)
struct EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMeshTrigger final
{
public:
	EEndCrashBoxMiniGameCableType                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMeshTrigger) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMeshTrigger");
static_assert(sizeof(EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMeshTrigger) == 0x000010, "Wrong size on EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMeshTrigger");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMeshTrigger, Type) == 0x000000, "Member 'EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMeshTrigger::Type' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMeshTrigger, StaticMeshComp) == 0x000008, "Member 'EndCrashBoxMiniGameElectricCableActor_SetReferenceStaticMeshTrigger::StaticMeshComp' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxActor.GetBoxType
// 0x0001 (0x0001 - 0x0000)
struct EndCrashBoxMiniGameGearBoxActor_GetBoxType final
{
public:
	EEndCrashBoxMiniGameBoxType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxActor_GetBoxType) == 0x000001, "Wrong alignment on EndCrashBoxMiniGameGearBoxActor_GetBoxType");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxActor_GetBoxType) == 0x000001, "Wrong size on EndCrashBoxMiniGameGearBoxActor_GetBoxType");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_GetBoxType, ReturnValue) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxActor_GetBoxType::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxActor.IsElectricBox
// 0x0001 (0x0001 - 0x0000)
struct EndCrashBoxMiniGameGearBoxActor_IsElectricBox final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxActor_IsElectricBox) == 0x000001, "Wrong alignment on EndCrashBoxMiniGameGearBoxActor_IsElectricBox");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxActor_IsElectricBox) == 0x000001, "Wrong size on EndCrashBoxMiniGameGearBoxActor_IsElectricBox");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_IsElectricBox, ReturnValue) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxActor_IsElectricBox::ReturnValue' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxActor.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndCrashBoxMiniGameGearBoxActor_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxActor_OnComponentHit) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameGearBoxActor_OnComponentHit");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxActor_OnComponentHit) == 0x0000B8, "Wrong size on EndCrashBoxMiniGameGearBoxActor_OnComponentHit");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_OnComponentHit, HitComponent) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxActor_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_OnComponentHit, OtherActor) == 0x000008, "Member 'EndCrashBoxMiniGameGearBoxActor_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_OnComponentHit, OtherComp) == 0x000010, "Member 'EndCrashBoxMiniGameGearBoxActor_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndCrashBoxMiniGameGearBoxActor_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_OnComponentHit, Hit) == 0x000024, "Member 'EndCrashBoxMiniGameGearBoxActor_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxActor.SetEffectDummyPoint
// 0x0010 (0x0010 - 0x0000)
struct EndCrashBoxMiniGameGearBoxActor_SetEffectDummyPoint final
{
public:
	EEndCrashBoxMiniGameGearBoxEffect             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxActor_SetEffectDummyPoint) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameGearBoxActor_SetEffectDummyPoint");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxActor_SetEffectDummyPoint) == 0x000010, "Wrong size on EndCrashBoxMiniGameGearBoxActor_SetEffectDummyPoint");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_SetEffectDummyPoint, Type) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxActor_SetEffectDummyPoint::Type' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_SetEffectDummyPoint, Component) == 0x000008, "Member 'EndCrashBoxMiniGameGearBoxActor_SetEffectDummyPoint::Component' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxActor.SetImpulseRadius
// 0x0004 (0x0004 - 0x0000)
struct EndCrashBoxMiniGameGearBoxActor_SetImpulseRadius final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxActor_SetImpulseRadius) == 0x000004, "Wrong alignment on EndCrashBoxMiniGameGearBoxActor_SetImpulseRadius");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxActor_SetImpulseRadius) == 0x000004, "Wrong size on EndCrashBoxMiniGameGearBoxActor_SetImpulseRadius");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_SetImpulseRadius, InRadius) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxActor_SetImpulseRadius::InRadius' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxActor.SetMaterialParameter
// 0x0008 (0x0008 - 0x0000)
struct EndCrashBoxMiniGameGearBoxActor_SetMaterialParameter final
{
public:
	class UMaterialParameterLightPlacedComponent* MaterialParameter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxActor_SetMaterialParameter) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameGearBoxActor_SetMaterialParameter");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxActor_SetMaterialParameter) == 0x000008, "Wrong size on EndCrashBoxMiniGameGearBoxActor_SetMaterialParameter");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_SetMaterialParameter, MaterialParameter) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxActor_SetMaterialParameter::MaterialParameter' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameGearBoxActor.SetPoseableMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct EndCrashBoxMiniGameGearBoxActor_SetPoseableMeshComponent final
{
public:
	class UPoseableMeshComponent*                 _PoseableMeshComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameGearBoxActor_SetPoseableMeshComponent) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameGearBoxActor_SetPoseableMeshComponent");
static_assert(sizeof(EndCrashBoxMiniGameGearBoxActor_SetPoseableMeshComponent) == 0x000008, "Wrong size on EndCrashBoxMiniGameGearBoxActor_SetPoseableMeshComponent");
static_assert(offsetof(EndCrashBoxMiniGameGearBoxActor_SetPoseableMeshComponent, _PoseableMeshComponent) == 0x000000, "Member 'EndCrashBoxMiniGameGearBoxActor_SetPoseableMeshComponent::_PoseableMeshComponent' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameLiftRootActor.OnBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap");
static_assert(sizeof(EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap) == 0x0000B0, "Wrong size on EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap, OtherActor) == 0x000008, "Member 'EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap, OtherComp) == 0x000010, "Member 'EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap, SweepResult) == 0x000020, "Member 'EndCrashBoxMiniGameLiftRootActor_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameLiftRootActor.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct EndCrashBoxMiniGameLiftRootActor_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCrashBoxMiniGameLiftRootActor_OnEndOverlap) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameLiftRootActor_OnEndOverlap");
static_assert(sizeof(EndCrashBoxMiniGameLiftRootActor_OnEndOverlap) == 0x000020, "Wrong size on EndCrashBoxMiniGameLiftRootActor_OnEndOverlap");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'EndCrashBoxMiniGameLiftRootActor_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_OnEndOverlap, OtherActor) == 0x000008, "Member 'EndCrashBoxMiniGameLiftRootActor_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_OnEndOverlap, OtherComp) == 0x000010, "Member 'EndCrashBoxMiniGameLiftRootActor_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'EndCrashBoxMiniGameLiftRootActor_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameLiftRootActor.SetLeverActor
// 0x0008 (0x0008 - 0x0000)
struct EndCrashBoxMiniGameLiftRootActor_SetLeverActor final
{
public:
	class AEndCrashBoxMiniGameLiftLeverActor*     LeverActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameLiftRootActor_SetLeverActor) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameLiftRootActor_SetLeverActor");
static_assert(sizeof(EndCrashBoxMiniGameLiftRootActor_SetLeverActor) == 0x000008, "Wrong size on EndCrashBoxMiniGameLiftRootActor_SetLeverActor");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_SetLeverActor, LeverActor) == 0x000000, "Member 'EndCrashBoxMiniGameLiftRootActor_SetLeverActor::LeverActor' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameLiftRootActor.SetLiftActor
// 0x0008 (0x0008 - 0x0000)
struct EndCrashBoxMiniGameLiftRootActor_SetLiftActor final
{
public:
	class AEndEnvironmentSkeletalMeshActor*       LiftActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameLiftRootActor_SetLiftActor) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameLiftRootActor_SetLiftActor");
static_assert(sizeof(EndCrashBoxMiniGameLiftRootActor_SetLiftActor) == 0x000008, "Wrong size on EndCrashBoxMiniGameLiftRootActor_SetLiftActor");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_SetLiftActor, LiftActor) == 0x000000, "Member 'EndCrashBoxMiniGameLiftRootActor_SetLiftActor::LiftActor' has a wrong offset!");

// Function EndGame.EndCrashBoxMiniGameLiftRootActor.SetReferenceStaticMesh
// 0x0010 (0x0010 - 0x0000)
struct EndCrashBoxMiniGameLiftRootActor_SetReferenceStaticMesh final
{
public:
	EEndCrashBoxMiniGameLiftPartsType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCrashBoxMiniGameLiftRootActor_SetReferenceStaticMesh) == 0x000008, "Wrong alignment on EndCrashBoxMiniGameLiftRootActor_SetReferenceStaticMesh");
static_assert(sizeof(EndCrashBoxMiniGameLiftRootActor_SetReferenceStaticMesh) == 0x000010, "Wrong size on EndCrashBoxMiniGameLiftRootActor_SetReferenceStaticMesh");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_SetReferenceStaticMesh, Type) == 0x000000, "Member 'EndCrashBoxMiniGameLiftRootActor_SetReferenceStaticMesh::Type' has a wrong offset!");
static_assert(offsetof(EndCrashBoxMiniGameLiftRootActor_SetReferenceStaticMesh, StaticMeshComp) == 0x000008, "Member 'EndCrashBoxMiniGameLiftRootActor_SetReferenceStaticMesh::StaticMeshComp' has a wrong offset!");

// Function EndGame.EndDebugAPI.AddAction
// 0x0008 (0x0008 - 0x0000)
struct EndDebugAPI_AddAction final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_AddAction) == 0x000004, "Wrong alignment on EndDebugAPI_AddAction");
static_assert(sizeof(EndDebugAPI_AddAction) == 0x000008, "Wrong size on EndDebugAPI_AddAction");
static_assert(offsetof(EndDebugAPI_AddAction, Action) == 0x000000, "Member 'EndDebugAPI_AddAction::Action' has a wrong offset!");

// Function EndGame.EndDebugAPI.AddSelectHistory
// 0x0010 (0x0010 - 0x0000)
struct EndDebugAPI_AddSelectHistory final
{
public:
	class FString                                 str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_AddSelectHistory) == 0x000008, "Wrong alignment on EndDebugAPI_AddSelectHistory");
static_assert(sizeof(EndDebugAPI_AddSelectHistory) == 0x000010, "Wrong size on EndDebugAPI_AddSelectHistory");
static_assert(offsetof(EndDebugAPI_AddSelectHistory, str) == 0x000000, "Member 'EndDebugAPI_AddSelectHistory::str' has a wrong offset!");

// Function EndGame.EndDebugAPI.GetCutSceneActionID
// 0x0018 (0x0018 - 0x0000)
struct EndDebugAPI_GetCutSceneActionID final
{
public:
	class FName                                   CutSceneID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_GetCutSceneActionID) == 0x000008, "Wrong alignment on EndDebugAPI_GetCutSceneActionID");
static_assert(sizeof(EndDebugAPI_GetCutSceneActionID) == 0x000018, "Wrong size on EndDebugAPI_GetCutSceneActionID");
static_assert(offsetof(EndDebugAPI_GetCutSceneActionID, CutSceneID) == 0x000000, "Member 'EndDebugAPI_GetCutSceneActionID::CutSceneID' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetCutSceneActionID, ReturnValue) == 0x000008, "Member 'EndDebugAPI_GetCutSceneActionID::ReturnValue' has a wrong offset!");

// Function EndGame.EndDebugAPI.GetCutSceneEventID
// 0x0018 (0x0018 - 0x0000)
struct EndDebugAPI_GetCutSceneEventID final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_GetCutSceneEventID) == 0x000008, "Wrong alignment on EndDebugAPI_GetCutSceneEventID");
static_assert(sizeof(EndDebugAPI_GetCutSceneEventID) == 0x000018, "Wrong size on EndDebugAPI_GetCutSceneEventID");
static_assert(offsetof(EndDebugAPI_GetCutSceneEventID, Action) == 0x000000, "Member 'EndDebugAPI_GetCutSceneEventID::Action' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetCutSceneEventID, ReturnValue) == 0x000008, "Member 'EndDebugAPI_GetCutSceneEventID::ReturnValue' has a wrong offset!");

// Function EndGame.EndDebugAPI.GetDebugState
// 0x0028 (0x0028 - 0x0000)
struct EndDebugAPI_GetDebugState final
{
public:
	class FName                                   TableID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 defaultState;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_GetDebugState) == 0x000008, "Wrong alignment on EndDebugAPI_GetDebugState");
static_assert(sizeof(EndDebugAPI_GetDebugState) == 0x000028, "Wrong size on EndDebugAPI_GetDebugState");
static_assert(offsetof(EndDebugAPI_GetDebugState, TableID) == 0x000000, "Member 'EndDebugAPI_GetDebugState::TableID' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetDebugState, defaultState) == 0x000008, "Member 'EndDebugAPI_GetDebugState::defaultState' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetDebugState, ReturnValue) == 0x000018, "Member 'EndDebugAPI_GetDebugState::ReturnValue' has a wrong offset!");

// Function EndGame.EndDebugAPI.GetDebugStateBool
// 0x000C (0x000C - 0x0000)
struct EndDebugAPI_GetDebugStateBool final
{
public:
	class FName                                   TableID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          defaultBool;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndDebugAPI_GetDebugStateBool) == 0x000004, "Wrong alignment on EndDebugAPI_GetDebugStateBool");
static_assert(sizeof(EndDebugAPI_GetDebugStateBool) == 0x00000C, "Wrong size on EndDebugAPI_GetDebugStateBool");
static_assert(offsetof(EndDebugAPI_GetDebugStateBool, TableID) == 0x000000, "Member 'EndDebugAPI_GetDebugStateBool::TableID' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetDebugStateBool, defaultBool) == 0x000008, "Member 'EndDebugAPI_GetDebugStateBool::defaultBool' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetDebugStateBool, ReturnValue) == 0x000009, "Member 'EndDebugAPI_GetDebugStateBool::ReturnValue' has a wrong offset!");

// Function EndGame.EndDebugAPI.GetPVActionID
// 0x0018 (0x0018 - 0x0000)
struct EndDebugAPI_GetPVActionID final
{
public:
	class FName                                   PVID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_GetPVActionID) == 0x000008, "Wrong alignment on EndDebugAPI_GetPVActionID");
static_assert(sizeof(EndDebugAPI_GetPVActionID) == 0x000018, "Wrong size on EndDebugAPI_GetPVActionID");
static_assert(offsetof(EndDebugAPI_GetPVActionID, PVID) == 0x000000, "Member 'EndDebugAPI_GetPVActionID::PVID' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetPVActionID, ReturnValue) == 0x000008, "Member 'EndDebugAPI_GetPVActionID::ReturnValue' has a wrong offset!");

// Function EndGame.EndDebugAPI.IsCompletedTrace
// 0x0001 (0x0001 - 0x0000)
struct EndDebugAPI_IsCompletedTrace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_IsCompletedTrace) == 0x000001, "Wrong alignment on EndDebugAPI_IsCompletedTrace");
static_assert(sizeof(EndDebugAPI_IsCompletedTrace) == 0x000001, "Wrong size on EndDebugAPI_IsCompletedTrace");
static_assert(offsetof(EndDebugAPI_IsCompletedTrace, ReturnValue) == 0x000000, "Member 'EndDebugAPI_IsCompletedTrace::ReturnValue' has a wrong offset!");

// Function EndGame.EndDebugAPI.SetControlRotation
// 0x000C (0x000C - 0x0000)
struct EndDebugAPI_SetControlRotation final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_SetControlRotation) == 0x000004, "Wrong alignment on EndDebugAPI_SetControlRotation");
static_assert(sizeof(EndDebugAPI_SetControlRotation) == 0x00000C, "Wrong size on EndDebugAPI_SetControlRotation");
static_assert(offsetof(EndDebugAPI_SetControlRotation, Pitch) == 0x000000, "Member 'EndDebugAPI_SetControlRotation::Pitch' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_SetControlRotation, Yaw) == 0x000004, "Member 'EndDebugAPI_SetControlRotation::Yaw' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_SetControlRotation, Roll) == 0x000008, "Member 'EndDebugAPI_SetControlRotation::Roll' has a wrong offset!");

// Function EndGame.EndDebugAPI.UpdateSelectHistory
// 0x0028 (0x0028 - 0x0000)
struct EndDebugAPI_UpdateSelectHistory final
{
public:
	TArray<class FString>                         List;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          changeOrder;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_UpdateSelectHistory) == 0x000008, "Wrong alignment on EndDebugAPI_UpdateSelectHistory");
static_assert(sizeof(EndDebugAPI_UpdateSelectHistory) == 0x000028, "Wrong size on EndDebugAPI_UpdateSelectHistory");
static_assert(offsetof(EndDebugAPI_UpdateSelectHistory, List) == 0x000000, "Member 'EndDebugAPI_UpdateSelectHistory::List' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_UpdateSelectHistory, changeOrder) == 0x000010, "Member 'EndDebugAPI_UpdateSelectHistory::changeOrder' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_UpdateSelectHistory, ReturnValue) == 0x000018, "Member 'EndDebugAPI_UpdateSelectHistory::ReturnValue' has a wrong offset!");

// Function EndGame.EndWorldMapMenu.OnLeftMenuScrollBoxPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndWorldMapMenu_OnLeftMenuScrollBoxPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWorldMapMenu_OnLeftMenuScrollBoxPressedItem) == 0x000004, "Wrong alignment on EndWorldMapMenu_OnLeftMenuScrollBoxPressedItem");
static_assert(sizeof(EndWorldMapMenu_OnLeftMenuScrollBoxPressedItem) == 0x000004, "Wrong size on EndWorldMapMenu_OnLeftMenuScrollBoxPressedItem");
static_assert(offsetof(EndWorldMapMenu_OnLeftMenuScrollBoxPressedItem, ItemIndex) == 0x000000, "Member 'EndWorldMapMenu_OnLeftMenuScrollBoxPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldMapMenu.OnLeftMenuScrollBoxSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWorldMapMenu_OnLeftMenuScrollBoxSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWorldMapMenu_OnLeftMenuScrollBoxSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWorldMapMenu_OnLeftMenuScrollBoxSelectedIndexChanged");
static_assert(sizeof(EndWorldMapMenu_OnLeftMenuScrollBoxSelectedIndexChanged) == 0x000004, "Wrong size on EndWorldMapMenu_OnLeftMenuScrollBoxSelectedIndexChanged");
static_assert(offsetof(EndWorldMapMenu_OnLeftMenuScrollBoxSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndWorldMapMenu_OnLeftMenuScrollBoxSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldMapMenu.OnLeftMenuScrollBoxSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldMapMenu_OnLeftMenuScrollBoxSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldMapMenu_OnLeftMenuScrollBoxSetupItem) == 0x000008, "Wrong alignment on EndWorldMapMenu_OnLeftMenuScrollBoxSetupItem");
static_assert(sizeof(EndWorldMapMenu_OnLeftMenuScrollBoxSetupItem) == 0x000010, "Wrong size on EndWorldMapMenu_OnLeftMenuScrollBoxSetupItem");
static_assert(offsetof(EndWorldMapMenu_OnLeftMenuScrollBoxSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldMapMenu_OnLeftMenuScrollBoxSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldMapMenu_OnLeftMenuScrollBoxSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldMapMenu_OnLeftMenuScrollBoxSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldAPI.SwitchStreamingVolume
// 0x0014 (0x0014 - 0x0000)
struct EndWorldAPI_SwitchStreamingVolume final
{
public:
	class FName                                   VolumeLabel;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchLabel;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndStreamingSwitchType                       SwitchType;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldAPI_SwitchStreamingVolume) == 0x000004, "Wrong alignment on EndWorldAPI_SwitchStreamingVolume");
static_assert(sizeof(EndWorldAPI_SwitchStreamingVolume) == 0x000014, "Wrong size on EndWorldAPI_SwitchStreamingVolume");
static_assert(offsetof(EndWorldAPI_SwitchStreamingVolume, VolumeLabel) == 0x000000, "Member 'EndWorldAPI_SwitchStreamingVolume::VolumeLabel' has a wrong offset!");
static_assert(offsetof(EndWorldAPI_SwitchStreamingVolume, SwitchLabel) == 0x000008, "Member 'EndWorldAPI_SwitchStreamingVolume::SwitchLabel' has a wrong offset!");
static_assert(offsetof(EndWorldAPI_SwitchStreamingVolume, SwitchType) == 0x000010, "Member 'EndWorldAPI_SwitchStreamingVolume::SwitchType' has a wrong offset!");

// Function EndGame.EndNaviMapStateRenderTarget.GetPixel
// 0x000C (0x000C - 0x0000)
struct EndNaviMapStateRenderTarget_GetPixel final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapStateRenderTarget_GetPixel) == 0x000004, "Wrong alignment on EndNaviMapStateRenderTarget_GetPixel");
static_assert(sizeof(EndNaviMapStateRenderTarget_GetPixel) == 0x00000C, "Wrong size on EndNaviMapStateRenderTarget_GetPixel");
static_assert(offsetof(EndNaviMapStateRenderTarget_GetPixel, X) == 0x000000, "Member 'EndNaviMapStateRenderTarget_GetPixel::X' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTarget_GetPixel, Y) == 0x000004, "Member 'EndNaviMapStateRenderTarget_GetPixel::Y' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTarget_GetPixel, ReturnValue) == 0x000008, "Member 'EndNaviMapStateRenderTarget_GetPixel::ReturnValue' has a wrong offset!");

// Function EndGame.EndNaviMapStateRenderTarget.IsVisited
// 0x000C (0x000C - 0x0000)
struct EndNaviMapStateRenderTarget_IsVisited final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNaviMapStateRenderTarget_IsVisited) == 0x000004, "Wrong alignment on EndNaviMapStateRenderTarget_IsVisited");
static_assert(sizeof(EndNaviMapStateRenderTarget_IsVisited) == 0x00000C, "Wrong size on EndNaviMapStateRenderTarget_IsVisited");
static_assert(offsetof(EndNaviMapStateRenderTarget_IsVisited, X) == 0x000000, "Member 'EndNaviMapStateRenderTarget_IsVisited::X' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTarget_IsVisited, Y) == 0x000004, "Member 'EndNaviMapStateRenderTarget_IsVisited::Y' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTarget_IsVisited, ReturnValue) == 0x000008, "Member 'EndNaviMapStateRenderTarget_IsVisited::ReturnValue' has a wrong offset!");

// Function EndGame.EndNaviMapStateRenderTarget.SetPixel
// 0x000C (0x000C - 0x0000)
struct EndNaviMapStateRenderTarget_SetPixel final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapStateRenderTarget_SetPixel) == 0x000004, "Wrong alignment on EndNaviMapStateRenderTarget_SetPixel");
static_assert(sizeof(EndNaviMapStateRenderTarget_SetPixel) == 0x00000C, "Wrong size on EndNaviMapStateRenderTarget_SetPixel");
static_assert(offsetof(EndNaviMapStateRenderTarget_SetPixel, X) == 0x000000, "Member 'EndNaviMapStateRenderTarget_SetPixel::X' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTarget_SetPixel, Y) == 0x000004, "Member 'EndNaviMapStateRenderTarget_SetPixel::Y' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTarget_SetPixel, Color) == 0x000008, "Member 'EndNaviMapStateRenderTarget_SetPixel::Color' has a wrong offset!");

// Function EndGame.EndNaviMapStateRenderTarget.SetVisited
// 0x000C (0x000C - 0x0000)
struct EndNaviMapStateRenderTarget_SetVisited final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncTexture;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNaviMapStateRenderTarget_SetVisited) == 0x000004, "Wrong alignment on EndNaviMapStateRenderTarget_SetVisited");
static_assert(sizeof(EndNaviMapStateRenderTarget_SetVisited) == 0x00000C, "Wrong size on EndNaviMapStateRenderTarget_SetVisited");
static_assert(offsetof(EndNaviMapStateRenderTarget_SetVisited, X) == 0x000000, "Member 'EndNaviMapStateRenderTarget_SetVisited::X' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTarget_SetVisited, Y) == 0x000004, "Member 'EndNaviMapStateRenderTarget_SetVisited::Y' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTarget_SetVisited, bSyncTexture) == 0x000008, "Member 'EndNaviMapStateRenderTarget_SetVisited::bSyncTexture' has a wrong offset!");

// Function EndGame.EndNewSkillTreeTop.OnList00PressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewSkillTreeTop_OnList00PressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewSkillTreeTop_OnList00PressedItem) == 0x000004, "Wrong alignment on EndNewSkillTreeTop_OnList00PressedItem");
static_assert(sizeof(EndNewSkillTreeTop_OnList00PressedItem) == 0x000004, "Wrong size on EndNewSkillTreeTop_OnList00PressedItem");
static_assert(offsetof(EndNewSkillTreeTop_OnList00PressedItem, InItemIndex) == 0x000000, "Member 'EndNewSkillTreeTop_OnList00PressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewSkillTreeTop.OnList00SelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewSkillTreeTop_OnList00SelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewSkillTreeTop_OnList00SelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewSkillTreeTop_OnList00SelectedIndexChanged");
static_assert(sizeof(EndNewSkillTreeTop_OnList00SelectedIndexChanged) == 0x000004, "Wrong size on EndNewSkillTreeTop_OnList00SelectedIndexChanged");
static_assert(offsetof(EndNewSkillTreeTop_OnList00SelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndNewSkillTreeTop_OnList00SelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndNewSkillTreeTop.OnList00SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSkillTreeTop_OnList00SetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSkillTreeTop_OnList00SetupItem) == 0x000008, "Wrong alignment on EndNewSkillTreeTop_OnList00SetupItem");
static_assert(sizeof(EndNewSkillTreeTop_OnList00SetupItem) == 0x000010, "Wrong size on EndNewSkillTreeTop_OnList00SetupItem");
static_assert(offsetof(EndNewSkillTreeTop_OnList00SetupItem, InItemWidget) == 0x000000, "Member 'EndNewSkillTreeTop_OnList00SetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSkillTreeTop_OnList00SetupItem, InItemIndex) == 0x000008, "Member 'EndNewSkillTreeTop_OnList00SetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewSkillTreeTop.OnMemberListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewSkillTreeTop_OnMemberListPressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewSkillTreeTop_OnMemberListPressedItem) == 0x000004, "Wrong alignment on EndNewSkillTreeTop_OnMemberListPressedItem");
static_assert(sizeof(EndNewSkillTreeTop_OnMemberListPressedItem) == 0x000004, "Wrong size on EndNewSkillTreeTop_OnMemberListPressedItem");
static_assert(offsetof(EndNewSkillTreeTop_OnMemberListPressedItem, InItemIndex) == 0x000000, "Member 'EndNewSkillTreeTop_OnMemberListPressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewSkillTreeTop.OnMemberListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewSkillTreeTop_OnMemberListSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewSkillTreeTop_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewSkillTreeTop_OnMemberListSelectedIndexChanged");
static_assert(sizeof(EndNewSkillTreeTop_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewSkillTreeTop_OnMemberListSelectedIndexChanged");
static_assert(offsetof(EndNewSkillTreeTop_OnMemberListSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndNewSkillTreeTop_OnMemberListSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndNewSkillTreeTop.OnMemberListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSkillTreeTop_OnMemberListSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSkillTreeTop_OnMemberListSetupItem) == 0x000008, "Wrong alignment on EndNewSkillTreeTop_OnMemberListSetupItem");
static_assert(sizeof(EndNewSkillTreeTop_OnMemberListSetupItem) == 0x000010, "Wrong size on EndNewSkillTreeTop_OnMemberListSetupItem");
static_assert(offsetof(EndNewSkillTreeTop_OnMemberListSetupItem, InItemWidget) == 0x000000, "Member 'EndNewSkillTreeTop_OnMemberListSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSkillTreeTop_OnMemberListSetupItem, InItemIndex) == 0x000008, "Member 'EndNewSkillTreeTop_OnMemberListSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnAutoSettingMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWeaponStatusWindow_OnAutoSettingMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnAutoSettingMeasureItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnAutoSettingMeasureItem");
static_assert(sizeof(EndWeaponStatusWindow_OnAutoSettingMeasureItem) == 0x00000C, "Wrong size on EndWeaponStatusWindow_OnAutoSettingMeasureItem");
static_assert(offsetof(EndWeaponStatusWindow_OnAutoSettingMeasureItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnAutoSettingMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnAutoSettingMeasureItem, ReturnValue) == 0x000004, "Member 'EndWeaponStatusWindow_OnAutoSettingMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnAutoSettingPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnAutoSettingPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnAutoSettingPressedItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnAutoSettingPressedItem");
static_assert(sizeof(EndWeaponStatusWindow_OnAutoSettingPressedItem) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnAutoSettingPressedItem");
static_assert(offsetof(EndWeaponStatusWindow_OnAutoSettingPressedItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnAutoSettingPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnAutoSettingSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnAutoSettingSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnAutoSettingSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnAutoSettingSelectedIndexChanged");
static_assert(sizeof(EndWeaponStatusWindow_OnAutoSettingSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnAutoSettingSelectedIndexChanged");
static_assert(offsetof(EndWeaponStatusWindow_OnAutoSettingSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnAutoSettingSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnAutoSettingSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponStatusWindow_OnAutoSettingSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponStatusWindow_OnAutoSettingSetupItem) == 0x000008, "Wrong alignment on EndWeaponStatusWindow_OnAutoSettingSetupItem");
static_assert(sizeof(EndWeaponStatusWindow_OnAutoSettingSetupItem) == 0x000010, "Wrong size on EndWeaponStatusWindow_OnAutoSettingSetupItem");
static_assert(offsetof(EndWeaponStatusWindow_OnAutoSettingSetupItem, ItemWidget) == 0x000000, "Member 'EndWeaponStatusWindow_OnAutoSettingSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnAutoSettingSetupItem, CellIndex) == 0x000008, "Member 'EndWeaponStatusWindow_OnAutoSettingSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnEquipIdListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWeaponStatusWindow_OnEquipIdListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnEquipIdListMeasureItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnEquipIdListMeasureItem");
static_assert(sizeof(EndWeaponStatusWindow_OnEquipIdListMeasureItem) == 0x00000C, "Wrong size on EndWeaponStatusWindow_OnEquipIdListMeasureItem");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipIdListMeasureItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnEquipIdListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipIdListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWeaponStatusWindow_OnEquipIdListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnEquipIdListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnEquipIdListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnEquipIdListPressedItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnEquipIdListPressedItem");
static_assert(sizeof(EndWeaponStatusWindow_OnEquipIdListPressedItem) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnEquipIdListPressedItem");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipIdListPressedItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnEquipIdListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnEquipIdListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnEquipIdListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnEquipIdListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnEquipIdListSelectedIndexChanged");
static_assert(sizeof(EndWeaponStatusWindow_OnEquipIdListSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnEquipIdListSelectedIndexChanged");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipIdListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnEquipIdListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnEquipIdListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponStatusWindow_OnEquipIdListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponStatusWindow_OnEquipIdListSetupItem) == 0x000008, "Wrong alignment on EndWeaponStatusWindow_OnEquipIdListSetupItem");
static_assert(sizeof(EndWeaponStatusWindow_OnEquipIdListSetupItem) == 0x000010, "Wrong size on EndWeaponStatusWindow_OnEquipIdListSetupItem");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipIdListSetupItem, ItemWidget) == 0x000000, "Member 'EndWeaponStatusWindow_OnEquipIdListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipIdListSetupItem, CellIndex) == 0x000008, "Member 'EndWeaponStatusWindow_OnEquipIdListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnEquipWeaponCoreListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWeaponStatusWindow_OnEquipWeaponCoreListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnEquipWeaponCoreListMeasureItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnEquipWeaponCoreListMeasureItem");
static_assert(sizeof(EndWeaponStatusWindow_OnEquipWeaponCoreListMeasureItem) == 0x00000C, "Wrong size on EndWeaponStatusWindow_OnEquipWeaponCoreListMeasureItem");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipWeaponCoreListMeasureItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnEquipWeaponCoreListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipWeaponCoreListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWeaponStatusWindow_OnEquipWeaponCoreListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnEquipWeaponCoreListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnEquipWeaponCoreListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnEquipWeaponCoreListPressedItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnEquipWeaponCoreListPressedItem");
static_assert(sizeof(EndWeaponStatusWindow_OnEquipWeaponCoreListPressedItem) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnEquipWeaponCoreListPressedItem");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipWeaponCoreListPressedItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnEquipWeaponCoreListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnEquipWeaponCoreListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnEquipWeaponCoreListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnEquipWeaponCoreListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnEquipWeaponCoreListSelectedIndexChanged");
static_assert(sizeof(EndWeaponStatusWindow_OnEquipWeaponCoreListSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnEquipWeaponCoreListSelectedIndexChanged");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipWeaponCoreListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnEquipWeaponCoreListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnEquipWeaponCoreListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponStatusWindow_OnEquipWeaponCoreListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponStatusWindow_OnEquipWeaponCoreListSetupItem) == 0x000008, "Wrong alignment on EndWeaponStatusWindow_OnEquipWeaponCoreListSetupItem");
static_assert(sizeof(EndWeaponStatusWindow_OnEquipWeaponCoreListSetupItem) == 0x000010, "Wrong size on EndWeaponStatusWindow_OnEquipWeaponCoreListSetupItem");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipWeaponCoreListSetupItem, ItemWidget) == 0x000000, "Member 'EndWeaponStatusWindow_OnEquipWeaponCoreListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnEquipWeaponCoreListSetupItem, CellIndex) == 0x000008, "Member 'EndWeaponStatusWindow_OnEquipWeaponCoreListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnMemberListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWeaponStatusWindow_OnMemberListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnMemberListMeasureItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnMemberListMeasureItem");
static_assert(sizeof(EndWeaponStatusWindow_OnMemberListMeasureItem) == 0x00000C, "Wrong size on EndWeaponStatusWindow_OnMemberListMeasureItem");
static_assert(offsetof(EndWeaponStatusWindow_OnMemberListMeasureItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnMemberListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnMemberListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWeaponStatusWindow_OnMemberListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnMemberListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnMemberListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnMemberListPressedItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnMemberListPressedItem");
static_assert(sizeof(EndWeaponStatusWindow_OnMemberListPressedItem) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnMemberListPressedItem");
static_assert(offsetof(EndWeaponStatusWindow_OnMemberListPressedItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnMemberListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnMemberListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnMemberListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnMemberListSelectedIndexChanged");
static_assert(sizeof(EndWeaponStatusWindow_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnMemberListSelectedIndexChanged");
static_assert(offsetof(EndWeaponStatusWindow_OnMemberListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnMemberListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnMemberListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponStatusWindow_OnMemberListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponStatusWindow_OnMemberListSetupItem) == 0x000008, "Wrong alignment on EndWeaponStatusWindow_OnMemberListSetupItem");
static_assert(sizeof(EndWeaponStatusWindow_OnMemberListSetupItem) == 0x000010, "Wrong size on EndWeaponStatusWindow_OnMemberListSetupItem");
static_assert(offsetof(EndWeaponStatusWindow_OnMemberListSetupItem, ItemWidget) == 0x000000, "Member 'EndWeaponStatusWindow_OnMemberListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnMemberListSetupItem, CellIndex) == 0x000008, "Member 'EndWeaponStatusWindow_OnMemberListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnNextWeaponCoreSkillListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWeaponStatusWindow_OnNextWeaponCoreSkillListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListMeasureItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnNextWeaponCoreSkillListMeasureItem");
static_assert(sizeof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListMeasureItem) == 0x00000C, "Wrong size on EndWeaponStatusWindow_OnNextWeaponCoreSkillListMeasureItem");
static_assert(offsetof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListMeasureItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnNextWeaponCoreSkillListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWeaponStatusWindow_OnNextWeaponCoreSkillListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnNextWeaponCoreSkillListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnNextWeaponCoreSkillListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListPressedItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnNextWeaponCoreSkillListPressedItem");
static_assert(sizeof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListPressedItem) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnNextWeaponCoreSkillListPressedItem");
static_assert(offsetof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListPressedItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnNextWeaponCoreSkillListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnNextWeaponCoreSkillListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnNextWeaponCoreSkillListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnNextWeaponCoreSkillListSelectedIndexChanged");
static_assert(sizeof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnNextWeaponCoreSkillListSelectedIndexChanged");
static_assert(offsetof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnNextWeaponCoreSkillListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnNextWeaponCoreSkillListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponStatusWindow_OnNextWeaponCoreSkillListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListSetupItem) == 0x000008, "Wrong alignment on EndWeaponStatusWindow_OnNextWeaponCoreSkillListSetupItem");
static_assert(sizeof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListSetupItem) == 0x000010, "Wrong size on EndWeaponStatusWindow_OnNextWeaponCoreSkillListSetupItem");
static_assert(offsetof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListSetupItem, ItemWidget) == 0x000000, "Member 'EndWeaponStatusWindow_OnNextWeaponCoreSkillListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnNextWeaponCoreSkillListSetupItem, CellIndex) == 0x000008, "Member 'EndWeaponStatusWindow_OnNextWeaponCoreSkillListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreEditListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreEditListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreEditListMeasureItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreEditListMeasureItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreEditListMeasureItem) == 0x00000C, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreEditListMeasureItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreEditListMeasureItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreEditListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreEditListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWeaponStatusWindow_OnWeaponCoreEditListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreEditListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreEditListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreEditListPressedItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreEditListPressedItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreEditListPressedItem) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreEditListPressedItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreEditListPressedItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreEditListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreEditListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreEditListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreEditListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreEditListSelectedIndexChanged");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreEditListSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreEditListSelectedIndexChanged");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreEditListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreEditListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreEditListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreEditListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreEditListSetupItem) == 0x000008, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreEditListSetupItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreEditListSetupItem) == 0x000010, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreEditListSetupItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreEditListSetupItem, ItemWidget) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreEditListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreEditListSetupItem, CellIndex) == 0x000008, "Member 'EndWeaponStatusWindow_OnWeaponCoreEditListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreMeasureItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreMeasureItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreMeasureItem) == 0x00000C, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreMeasureItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreMeasureItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreMeasureItem, ReturnValue) == 0x000004, "Member 'EndWeaponStatusWindow_OnWeaponCoreMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCorePressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCorePressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCorePressedItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCorePressedItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCorePressedItem) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnWeaponCorePressedItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCorePressedItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCorePressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreSelectedIndexChanged");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreSelectedIndexChanged");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreSetupItem) == 0x000008, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreSetupItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreSetupItem) == 0x000010, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreSetupItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSetupItem, ItemWidget) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSetupItem, CellIndex) == 0x000008, "Member 'EndWeaponStatusWindow_OnWeaponCoreSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreSkillAllListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreSkillAllListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListMeasureItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreSkillAllListMeasureItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListMeasureItem) == 0x00000C, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreSkillAllListMeasureItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListMeasureItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillAllListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillAllListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreSkillAllListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreSkillAllListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListPressedItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreSkillAllListPressedItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListPressedItem) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreSkillAllListPressedItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListPressedItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillAllListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreSkillAllListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreSkillAllListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreSkillAllListSelectedIndexChanged");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreSkillAllListSelectedIndexChanged");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillAllListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreSkillAllListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreSkillAllListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListSetupItem) == 0x000008, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreSkillAllListSetupItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListSetupItem) == 0x000010, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreSkillAllListSetupItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListSetupItem, ItemWidget) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillAllListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillAllListSetupItem, CellIndex) == 0x000008, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillAllListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreSkillListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreSkillListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreSkillListMeasureItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreSkillListMeasureItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreSkillListMeasureItem) == 0x00000C, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreSkillListMeasureItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillListMeasureItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreSkillListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreSkillListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreSkillListPressedItem) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreSkillListPressedItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreSkillListPressedItem) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreSkillListPressedItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillListPressedItem, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreSkillListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreSkillListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreSkillListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreSkillListSelectedIndexChanged");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreSkillListSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreSkillListSelectedIndexChanged");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponStatusWindow.OnWeaponCoreSkillListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponStatusWindow_OnWeaponCoreSkillListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponStatusWindow_OnWeaponCoreSkillListSetupItem) == 0x000008, "Wrong alignment on EndWeaponStatusWindow_OnWeaponCoreSkillListSetupItem");
static_assert(sizeof(EndWeaponStatusWindow_OnWeaponCoreSkillListSetupItem) == 0x000010, "Wrong size on EndWeaponStatusWindow_OnWeaponCoreSkillListSetupItem");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillListSetupItem, ItemWidget) == 0x000000, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponStatusWindow_OnWeaponCoreSkillListSetupItem, CellIndex) == 0x000008, "Member 'EndWeaponStatusWindow_OnWeaponCoreSkillListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEffectManagerSubsystem.OnNiagaraSystemFinished
// 0x0008 (0x0008 - 0x0000)
struct EndEffectManagerSubsystem_OnNiagaraSystemFinished final
{
public:
	class UNiagaraComponent*                      FinishedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEffectManagerSubsystem_OnNiagaraSystemFinished) == 0x000008, "Wrong alignment on EndEffectManagerSubsystem_OnNiagaraSystemFinished");
static_assert(sizeof(EndEffectManagerSubsystem_OnNiagaraSystemFinished) == 0x000008, "Wrong size on EndEffectManagerSubsystem_OnNiagaraSystemFinished");
static_assert(offsetof(EndEffectManagerSubsystem_OnNiagaraSystemFinished, FinishedComponent) == 0x000000, "Member 'EndEffectManagerSubsystem_OnNiagaraSystemFinished::FinishedComponent' has a wrong offset!");

// Function EndGame.EndEffectManagerSubsystem.OnParticleSystemFinished
// 0x0008 (0x0008 - 0x0000)
struct EndEffectManagerSubsystem_OnParticleSystemFinished final
{
public:
	class UParticleSystemComponent*               FinishedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEffectManagerSubsystem_OnParticleSystemFinished) == 0x000008, "Wrong alignment on EndEffectManagerSubsystem_OnParticleSystemFinished");
static_assert(sizeof(EndEffectManagerSubsystem_OnParticleSystemFinished) == 0x000008, "Wrong size on EndEffectManagerSubsystem_OnParticleSystemFinished");
static_assert(offsetof(EndEffectManagerSubsystem_OnParticleSystemFinished, FinishedComponent) == 0x000000, "Member 'EndEffectManagerSubsystem_OnParticleSystemFinished::FinishedComponent' has a wrong offset!");

// Function EndGame.EndWheeledVehicle.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndWheeledVehicle_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWheeledVehicle_OnComponentHit) == 0x000008, "Wrong alignment on EndWheeledVehicle_OnComponentHit");
static_assert(sizeof(EndWheeledVehicle_OnComponentHit) == 0x0000B8, "Wrong size on EndWheeledVehicle_OnComponentHit");
static_assert(offsetof(EndWheeledVehicle_OnComponentHit, HitComponent) == 0x000000, "Member 'EndWheeledVehicle_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndWheeledVehicle_OnComponentHit, OtherActor) == 0x000008, "Member 'EndWheeledVehicle_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndWheeledVehicle_OnComponentHit, OtherComp) == 0x000010, "Member 'EndWheeledVehicle_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndWheeledVehicle_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndWheeledVehicle_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndWheeledVehicle_OnComponentHit, Hit) == 0x000024, "Member 'EndWheeledVehicle_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndWeaponUpgradeCoreListBoxWindow.OnCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponUpgradeCoreListBoxWindow_OnCellPressed final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponUpgradeCoreListBoxWindow_OnCellPressed) == 0x000004, "Wrong alignment on EndWeaponUpgradeCoreListBoxWindow_OnCellPressed");
static_assert(sizeof(EndWeaponUpgradeCoreListBoxWindow_OnCellPressed) == 0x000004, "Wrong size on EndWeaponUpgradeCoreListBoxWindow_OnCellPressed");
static_assert(offsetof(EndWeaponUpgradeCoreListBoxWindow_OnCellPressed, CellIndex) == 0x000000, "Member 'EndWeaponUpgradeCoreListBoxWindow_OnCellPressed::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponUpgradeCoreListBoxWindow.OnCellSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponUpgradeCoreListBoxWindow_OnCellSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponUpgradeCoreListBoxWindow_OnCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponUpgradeCoreListBoxWindow_OnCellSelectedIndexChanged");
static_assert(sizeof(EndWeaponUpgradeCoreListBoxWindow_OnCellSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponUpgradeCoreListBoxWindow_OnCellSelectedIndexChanged");
static_assert(offsetof(EndWeaponUpgradeCoreListBoxWindow_OnCellSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponUpgradeCoreListBoxWindow_OnCellSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponUpgradeCoreListBoxWindow.OnCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponUpgradeCoreListBoxWindow_OnCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponUpgradeCoreListBoxWindow_OnCellSetup) == 0x000008, "Wrong alignment on EndWeaponUpgradeCoreListBoxWindow_OnCellSetup");
static_assert(sizeof(EndWeaponUpgradeCoreListBoxWindow_OnCellSetup) == 0x000010, "Wrong size on EndWeaponUpgradeCoreListBoxWindow_OnCellSetup");
static_assert(offsetof(EndWeaponUpgradeCoreListBoxWindow_OnCellSetup, ItemWidget) == 0x000000, "Member 'EndWeaponUpgradeCoreListBoxWindow_OnCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponUpgradeCoreListBoxWindow_OnCellSetup, CellIndex) == 0x000008, "Member 'EndWeaponUpgradeCoreListBoxWindow_OnCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnAcquisionSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnAcquisionSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnAcquisionSetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnAcquisionSetup");
static_assert(sizeof(EndEnemyDetailWindow_OnAcquisionSetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnAcquisionSetup");
static_assert(offsetof(EndEnemyDetailWindow_OnAcquisionSetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnAcquisionSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnAcquisionSetup, ItemIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnAcquisionSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnBattleAbilitySetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnBattleAbilitySetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnBattleAbilitySetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnBattleAbilitySetup");
static_assert(sizeof(EndEnemyDetailWindow_OnBattleAbilitySetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnBattleAbilitySetup");
static_assert(offsetof(EndEnemyDetailWindow_OnBattleAbilitySetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnBattleAbilitySetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnBattleAbilitySetup, ItemIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnBattleAbilitySetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnBattleLogSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnBattleLogSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnBattleLogSetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnBattleLogSetup");
static_assert(sizeof(EndEnemyDetailWindow_OnBattleLogSetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnBattleLogSetup");
static_assert(offsetof(EndEnemyDetailWindow_OnBattleLogSetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnBattleLogSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnBattleLogSetup, ItemIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnBattleLogSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnBufferSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnBufferSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnBufferSetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnBufferSetup");
static_assert(sizeof(EndEnemyDetailWindow_OnBufferSetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnBufferSetup");
static_assert(offsetof(EndEnemyDetailWindow_OnBufferSetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnBufferSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnBufferSetup, ItemIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnBufferSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnBuffIconSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnBuffIconSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnBuffIconSetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnBuffIconSetup");
static_assert(sizeof(EndEnemyDetailWindow_OnBuffIconSetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnBuffIconSetup");
static_assert(offsetof(EndEnemyDetailWindow_OnBuffIconSetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnBuffIconSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnBuffIconSetup, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnBuffIconSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnDebuffIconSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnDebuffIconSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnDebuffIconSetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnDebuffIconSetup");
static_assert(sizeof(EndEnemyDetailWindow_OnDebuffIconSetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnDebuffIconSetup");
static_assert(offsetof(EndEnemyDetailWindow_OnDebuffIconSetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnDebuffIconSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnDebuffIconSetup, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnDebuffIconSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnDropItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnDropItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnDropItemListSetupItem) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnDropItemListSetupItem");
static_assert(sizeof(EndEnemyDetailWindow_OnDropItemListSetupItem) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnDropItemListSetupItem");
static_assert(offsetof(EndEnemyDetailWindow_OnDropItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnDropItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnDropItemListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnDropItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnRareDropItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnRareDropItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnRareDropItemListSetupItem) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnRareDropItemListSetupItem");
static_assert(sizeof(EndEnemyDetailWindow_OnRareDropItemListSetupItem) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnRareDropItemListSetupItem");
static_assert(offsetof(EndEnemyDetailWindow_OnRareDropItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnRareDropItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnRareDropItemListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnRareDropItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnResistanceIconListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnResistanceIconListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnResistanceIconListSetupItem) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnResistanceIconListSetupItem");
static_assert(sizeof(EndEnemyDetailWindow_OnResistanceIconListSetupItem) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnResistanceIconListSetupItem");
static_assert(offsetof(EndEnemyDetailWindow_OnResistanceIconListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnResistanceIconListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnResistanceIconListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnResistanceIconListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnResistanceListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnResistanceListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnResistanceListSetupItem) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnResistanceListSetupItem");
static_assert(sizeof(EndEnemyDetailWindow_OnResistanceListSetupItem) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnResistanceListSetupItem");
static_assert(offsetof(EndEnemyDetailWindow_OnResistanceListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnResistanceListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnResistanceListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnResistanceListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnStealListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnStealListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnStealListSetupItem) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnStealListSetupItem");
static_assert(sizeof(EndEnemyDetailWindow_OnStealListSetupItem) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnStealListSetupItem");
static_assert(offsetof(EndEnemyDetailWindow_OnStealListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnStealListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnStealListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnStealListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnAbilityListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnAbilityListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnAbilityListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnAbilityListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnAbilityListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnAbilityListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnAbilityListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnAbilityListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnAbilityListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnAbilityListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnActionTypeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnActionTypeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnActionTypeListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnActionTypeListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnActionTypeListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnActionTypeListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnActionTypeListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnActionTypeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnActionTypeListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnActionTypeListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnAreaListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnAreaListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnAreaListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnAreaListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnAreaListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnAreaListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnAreaListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnAreaListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnAreaListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnAreaListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnBattleLogListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnBattleLogListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnBattleLogListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnBattleLogListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnBattleLogListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnBattleLogListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnBattleLogListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnBattleLogListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnBattleLogListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnBattleLogListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnBuffIconSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnBuffIconSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnBuffIconSetup) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnBuffIconSetup");
static_assert(sizeof(EndEnemyReportMenu_OnBuffIconSetup) == 0x000010, "Wrong size on EndEnemyReportMenu_OnBuffIconSetup");
static_assert(offsetof(EndEnemyReportMenu_OnBuffIconSetup, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnBuffIconSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnBuffIconSetup, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnBuffIconSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnDebuffIconSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnDebuffIconSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnDebuffIconSetup) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnDebuffIconSetup");
static_assert(sizeof(EndEnemyReportMenu_OnDebuffIconSetup) == 0x000010, "Wrong size on EndEnemyReportMenu_OnDebuffIconSetup");
static_assert(offsetof(EndEnemyReportMenu_OnDebuffIconSetup, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnDebuffIconSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnDebuffIconSetup, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnDebuffIconSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnDetailAreaListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnDetailAreaListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnDetailAreaListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnDetailAreaListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnDetailAreaListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnDetailAreaListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnDetailAreaListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnDetailAreaListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnDetailAreaListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnDetailAreaListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnDetailBattleLogListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnDetailBattleLogListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnDetailBattleLogListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnDetailBattleLogListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnDetailBattleLogListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnDetailBattleLogListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnDetailBattleLogListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnDetailBattleLogListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnDetailBattleLogListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnDetailBattleLogListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnDropItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnDropItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnDropItemListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnDropItemListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnDropItemListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnDropItemListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnDropItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnDropItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnDropItemListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnDropItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnEnemyListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEnemyReportMenu_OnEnemyListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnemyReportMenu_OnEnemyListMeasureItem) == 0x000004, "Wrong alignment on EndEnemyReportMenu_OnEnemyListMeasureItem");
static_assert(sizeof(EndEnemyReportMenu_OnEnemyListMeasureItem) == 0x00000C, "Wrong size on EndEnemyReportMenu_OnEnemyListMeasureItem");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListMeasureItem, CellIndex) == 0x000000, "Member 'EndEnemyReportMenu_OnEnemyListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListMeasureItem, ReturnValue) == 0x000004, "Member 'EndEnemyReportMenu_OnEnemyListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnEnemyListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEnemyReportMenu_OnEnemyListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnemyReportMenu_OnEnemyListPressedItem) == 0x000004, "Wrong alignment on EndEnemyReportMenu_OnEnemyListPressedItem");
static_assert(sizeof(EndEnemyReportMenu_OnEnemyListPressedItem) == 0x000004, "Wrong size on EndEnemyReportMenu_OnEnemyListPressedItem");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListPressedItem, CellIndex) == 0x000000, "Member 'EndEnemyReportMenu_OnEnemyListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnEnemyListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEnemyReportMenu_OnEnemyListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnemyReportMenu_OnEnemyListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEnemyReportMenu_OnEnemyListSelectedIndexChanged");
static_assert(sizeof(EndEnemyReportMenu_OnEnemyListSelectedIndexChanged) == 0x000004, "Wrong size on EndEnemyReportMenu_OnEnemyListSelectedIndexChanged");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEnemyReportMenu_OnEnemyListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnEnemyListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnEnemyListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnEnemyListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnEnemyListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnEnemyListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnEnemyListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnEnemyListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnEnemyListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnRareDropItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnRareDropItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnRareDropItemListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnRareDropItemListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnRareDropItemListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnRareDropItemListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnRareDropItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnRareDropItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnRareDropItemListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnRareDropItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnResistanceIconListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnResistanceIconListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnResistanceIconListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnResistanceIconListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnResistanceIconListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnResistanceIconListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnResistanceIconListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnResistanceIconListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnResistanceIconListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnResistanceIconListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnResistanceListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnResistanceListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnResistanceListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnResistanceListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnResistanceListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnResistanceListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnResistanceListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnResistanceListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnResistanceListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnResistanceListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnStealListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnStealListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnStealListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnStealListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnStealListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnStealListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnStealListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnStealListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnStealListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnStealListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportWindow.OnActionTypeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportWindow_OnActionTypeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportWindow_OnActionTypeListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportWindow_OnActionTypeListSetupItem");
static_assert(sizeof(EndEnemyReportWindow_OnActionTypeListSetupItem) == 0x000010, "Wrong size on EndEnemyReportWindow_OnActionTypeListSetupItem");
static_assert(offsetof(EndEnemyReportWindow_OnActionTypeListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportWindow_OnActionTypeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportWindow_OnActionTypeListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportWindow_OnActionTypeListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportWindow.OnAreaListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportWindow_OnAreaListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportWindow_OnAreaListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportWindow_OnAreaListSetupItem");
static_assert(sizeof(EndEnemyReportWindow_OnAreaListSetupItem) == 0x000010, "Wrong size on EndEnemyReportWindow_OnAreaListSetupItem");
static_assert(offsetof(EndEnemyReportWindow_OnAreaListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportWindow_OnAreaListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportWindow_OnAreaListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportWindow_OnAreaListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportWindow.OnBattleLogListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportWindow_OnBattleLogListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportWindow_OnBattleLogListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportWindow_OnBattleLogListSetupItem");
static_assert(sizeof(EndEnemyReportWindow_OnBattleLogListSetupItem) == 0x000010, "Wrong size on EndEnemyReportWindow_OnBattleLogListSetupItem");
static_assert(offsetof(EndEnemyReportWindow_OnBattleLogListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportWindow_OnBattleLogListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportWindow_OnBattleLogListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportWindow_OnBattleLogListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportWindow.OnEnemyBookListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEnemyReportWindow_OnEnemyBookListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnemyReportWindow_OnEnemyBookListMeasureItem) == 0x000004, "Wrong alignment on EndEnemyReportWindow_OnEnemyBookListMeasureItem");
static_assert(sizeof(EndEnemyReportWindow_OnEnemyBookListMeasureItem) == 0x00000C, "Wrong size on EndEnemyReportWindow_OnEnemyBookListMeasureItem");
static_assert(offsetof(EndEnemyReportWindow_OnEnemyBookListMeasureItem, CellIndex) == 0x000000, "Member 'EndEnemyReportWindow_OnEnemyBookListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEnemyReportWindow_OnEnemyBookListMeasureItem, ReturnValue) == 0x000004, "Member 'EndEnemyReportWindow_OnEnemyBookListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEnemyReportWindow.OnEnemyBookListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEnemyReportWindow_OnEnemyBookListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnemyReportWindow_OnEnemyBookListPressedItem) == 0x000004, "Wrong alignment on EndEnemyReportWindow_OnEnemyBookListPressedItem");
static_assert(sizeof(EndEnemyReportWindow_OnEnemyBookListPressedItem) == 0x000004, "Wrong size on EndEnemyReportWindow_OnEnemyBookListPressedItem");
static_assert(offsetof(EndEnemyReportWindow_OnEnemyBookListPressedItem, CellIndex) == 0x000000, "Member 'EndEnemyReportWindow_OnEnemyBookListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportWindow.OnEnemyBookListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEnemyReportWindow_OnEnemyBookListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnemyReportWindow_OnEnemyBookListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEnemyReportWindow_OnEnemyBookListSelectedIndexChanged");
static_assert(sizeof(EndEnemyReportWindow_OnEnemyBookListSelectedIndexChanged) == 0x000004, "Wrong size on EndEnemyReportWindow_OnEnemyBookListSelectedIndexChanged");
static_assert(offsetof(EndEnemyReportWindow_OnEnemyBookListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEnemyReportWindow_OnEnemyBookListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportWindow.OnEnemyBookListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportWindow_OnEnemyBookListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportWindow_OnEnemyBookListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportWindow_OnEnemyBookListSetupItem");
static_assert(sizeof(EndEnemyReportWindow_OnEnemyBookListSetupItem) == 0x000010, "Wrong size on EndEnemyReportWindow_OnEnemyBookListSetupItem");
static_assert(offsetof(EndEnemyReportWindow_OnEnemyBookListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportWindow_OnEnemyBookListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportWindow_OnEnemyBookListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportWindow_OnEnemyBookListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnAreaReportListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrExPage_OnAreaReportListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrExPage_OnAreaReportListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportVrExPage_OnAreaReportListSetupItem");
static_assert(sizeof(EndWorldReportVrExPage_OnAreaReportListSetupItem) == 0x000010, "Wrong size on EndWorldReportVrExPage_OnAreaReportListSetupItem");
static_assert(offsetof(EndWorldReportVrExPage_OnAreaReportListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportVrExPage_OnAreaReportListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnAreaReportListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportVrExPage_OnAreaReportListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnBtnListSetupItem0
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrExPage_OnBtnListSetupItem0 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrExPage_OnBtnListSetupItem0) == 0x000008, "Wrong alignment on EndWorldReportVrExPage_OnBtnListSetupItem0");
static_assert(sizeof(EndWorldReportVrExPage_OnBtnListSetupItem0) == 0x000010, "Wrong size on EndWorldReportVrExPage_OnBtnListSetupItem0");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem0, ItemWidget) == 0x000000, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem0::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem0, ItemIndex) == 0x000008, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem0::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnBtnListSetupItem1
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrExPage_OnBtnListSetupItem1 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrExPage_OnBtnListSetupItem1) == 0x000008, "Wrong alignment on EndWorldReportVrExPage_OnBtnListSetupItem1");
static_assert(sizeof(EndWorldReportVrExPage_OnBtnListSetupItem1) == 0x000010, "Wrong size on EndWorldReportVrExPage_OnBtnListSetupItem1");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem1, ItemWidget) == 0x000000, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem1::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem1, ItemIndex) == 0x000008, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem1::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnBtnListSetupItem2
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrExPage_OnBtnListSetupItem2 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrExPage_OnBtnListSetupItem2) == 0x000008, "Wrong alignment on EndWorldReportVrExPage_OnBtnListSetupItem2");
static_assert(sizeof(EndWorldReportVrExPage_OnBtnListSetupItem2) == 0x000010, "Wrong size on EndWorldReportVrExPage_OnBtnListSetupItem2");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem2, ItemWidget) == 0x000000, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem2::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem2, ItemIndex) == 0x000008, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem2::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnBtnListSetupItem3
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrExPage_OnBtnListSetupItem3 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrExPage_OnBtnListSetupItem3) == 0x000008, "Wrong alignment on EndWorldReportVrExPage_OnBtnListSetupItem3");
static_assert(sizeof(EndWorldReportVrExPage_OnBtnListSetupItem3) == 0x000010, "Wrong size on EndWorldReportVrExPage_OnBtnListSetupItem3");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem3, ItemWidget) == 0x000000, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem3::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem3, ItemIndex) == 0x000008, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem3::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnBtnListSetupItem4
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrExPage_OnBtnListSetupItem4 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrExPage_OnBtnListSetupItem4) == 0x000008, "Wrong alignment on EndWorldReportVrExPage_OnBtnListSetupItem4");
static_assert(sizeof(EndWorldReportVrExPage_OnBtnListSetupItem4) == 0x000010, "Wrong size on EndWorldReportVrExPage_OnBtnListSetupItem4");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem4, ItemWidget) == 0x000000, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem4::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem4, ItemIndex) == 0x000008, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem4::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnBtnListSetupItem5
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrExPage_OnBtnListSetupItem5 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrExPage_OnBtnListSetupItem5) == 0x000008, "Wrong alignment on EndWorldReportVrExPage_OnBtnListSetupItem5");
static_assert(sizeof(EndWorldReportVrExPage_OnBtnListSetupItem5) == 0x000010, "Wrong size on EndWorldReportVrExPage_OnBtnListSetupItem5");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem5, ItemWidget) == 0x000000, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem5::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem5, ItemIndex) == 0x000008, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem5::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnBtnListSetupItem6
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrExPage_OnBtnListSetupItem6 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrExPage_OnBtnListSetupItem6) == 0x000008, "Wrong alignment on EndWorldReportVrExPage_OnBtnListSetupItem6");
static_assert(sizeof(EndWorldReportVrExPage_OnBtnListSetupItem6) == 0x000010, "Wrong size on EndWorldReportVrExPage_OnBtnListSetupItem6");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem6, ItemWidget) == 0x000000, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem6::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnBtnListSetupItem6, ItemIndex) == 0x000008, "Member 'EndWorldReportVrExPage_OnBtnListSetupItem6::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnPrizeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrExPage_OnPrizeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrExPage_OnPrizeListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportVrExPage_OnPrizeListSetupItem");
static_assert(sizeof(EndWorldReportVrExPage_OnPrizeListSetupItem) == 0x000010, "Wrong size on EndWorldReportVrExPage_OnPrizeListSetupItem");
static_assert(offsetof(EndWorldReportVrExPage_OnPrizeListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportVrExPage_OnPrizeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnPrizeListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportVrExPage_OnPrizeListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnTermListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWorldReportVrExPage_OnTermListMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWorldReportVrExPage_OnTermListMeasureItem) == 0x000004, "Wrong alignment on EndWorldReportVrExPage_OnTermListMeasureItem");
static_assert(sizeof(EndWorldReportVrExPage_OnTermListMeasureItem) == 0x00000C, "Wrong size on EndWorldReportVrExPage_OnTermListMeasureItem");
static_assert(offsetof(EndWorldReportVrExPage_OnTermListMeasureItem, ItemIndex) == 0x000000, "Member 'EndWorldReportVrExPage_OnTermListMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnTermListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWorldReportVrExPage_OnTermListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWorldReportVrExPage.OnTermListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrExPage_OnTermListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrExPage_OnTermListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportVrExPage_OnTermListSetupItem");
static_assert(sizeof(EndWorldReportVrExPage_OnTermListSetupItem) == 0x000010, "Wrong size on EndWorldReportVrExPage_OnTermListSetupItem");
static_assert(offsetof(EndWorldReportVrExPage_OnTermListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportVrExPage_OnTermListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrExPage_OnTermListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportVrExPage_OnTermListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMidgarMenu.ShowLegend
// 0x0001 (0x0001 - 0x0000)
struct EndMidgarMenu_ShowLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMidgarMenu_ShowLegend) == 0x000001, "Wrong alignment on EndMidgarMenu_ShowLegend");
static_assert(sizeof(EndMidgarMenu_ShowLegend) == 0x000001, "Wrong size on EndMidgarMenu_ShowLegend");
static_assert(offsetof(EndMidgarMenu_ShowLegend, Show) == 0x000000, "Member 'EndMidgarMenu_ShowLegend::Show' has a wrong offset!");

// Function EndGame.EndMobCrowdActor.Play
// 0x0008 (0x0008 - 0x0000)
struct EndMobCrowdActor_Play final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMobCrowdActor_Play) == 0x000004, "Wrong alignment on EndMobCrowdActor_Play");
static_assert(sizeof(EndMobCrowdActor_Play) == 0x000008, "Wrong size on EndMobCrowdActor_Play");
static_assert(offsetof(EndMobCrowdActor_Play, BlendTime) == 0x000000, "Member 'EndMobCrowdActor_Play::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobCrowdActor_Play, bUseFade) == 0x000004, "Member 'EndMobCrowdActor_Play::bUseFade' has a wrong offset!");

// Function EndGame.EndMobCrowdActor.SetCustomSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct EndMobCrowdActor_SetCustomSkeletalMesh final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacterBase*                      Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobCrowdActor_SetCustomSkeletalMesh) == 0x000008, "Wrong alignment on EndMobCrowdActor_SetCustomSkeletalMesh");
static_assert(sizeof(EndMobCrowdActor_SetCustomSkeletalMesh) == 0x000010, "Wrong size on EndMobCrowdActor_SetCustomSkeletalMesh");
static_assert(offsetof(EndMobCrowdActor_SetCustomSkeletalMesh, Index_0) == 0x000000, "Member 'EndMobCrowdActor_SetCustomSkeletalMesh::Index_0' has a wrong offset!");
static_assert(offsetof(EndMobCrowdActor_SetCustomSkeletalMesh, Character) == 0x000008, "Member 'EndMobCrowdActor_SetCustomSkeletalMesh::Character' has a wrong offset!");

// Function EndGame.EndMobCrowdActor.SetOverride
// 0x0008 (0x0008 - 0x0000)
struct EndMobCrowdActor_SetOverride final
{
public:
	class FName                                   OverrideName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobCrowdActor_SetOverride) == 0x000004, "Wrong alignment on EndMobCrowdActor_SetOverride");
static_assert(sizeof(EndMobCrowdActor_SetOverride) == 0x000008, "Wrong size on EndMobCrowdActor_SetOverride");
static_assert(offsetof(EndMobCrowdActor_SetOverride, OverrideName) == 0x000000, "Member 'EndMobCrowdActor_SetOverride::OverrideName' has a wrong offset!");

// Function EndGame.EndMobCrowdActor.SetSkeletalMeshVisibility
// 0x0008 (0x0008 - 0x0000)
struct EndMobCrowdActor_SetSkeletalMeshVisibility final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisiblity;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMobCrowdActor_SetSkeletalMeshVisibility) == 0x000004, "Wrong alignment on EndMobCrowdActor_SetSkeletalMeshVisibility");
static_assert(sizeof(EndMobCrowdActor_SetSkeletalMeshVisibility) == 0x000008, "Wrong size on EndMobCrowdActor_SetSkeletalMeshVisibility");
static_assert(offsetof(EndMobCrowdActor_SetSkeletalMeshVisibility, Index_0) == 0x000000, "Member 'EndMobCrowdActor_SetSkeletalMeshVisibility::Index_0' has a wrong offset!");
static_assert(offsetof(EndMobCrowdActor_SetSkeletalMeshVisibility, bVisiblity) == 0x000004, "Member 'EndMobCrowdActor_SetSkeletalMeshVisibility::bVisiblity' has a wrong offset!");

// Function EndGame.EndMobCrowdActor.Stop
// 0x0008 (0x0008 - 0x0000)
struct EndMobCrowdActor_Stop final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFade;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMobCrowdActor_Stop) == 0x000004, "Wrong alignment on EndMobCrowdActor_Stop");
static_assert(sizeof(EndMobCrowdActor_Stop) == 0x000008, "Wrong size on EndMobCrowdActor_Stop");
static_assert(offsetof(EndMobCrowdActor_Stop, BlendTime) == 0x000000, "Member 'EndMobCrowdActor_Stop::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobCrowdActor_Stop, bUseFade) == 0x000004, "Member 'EndMobCrowdActor_Stop::bUseFade' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.RefreshItem
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_RefreshItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_RefreshItem) == 0x000004, "Wrong alignment on EndVirtualScrollBox_RefreshItem");
static_assert(sizeof(EndVirtualScrollBox_RefreshItem) == 0x000004, "Wrong size on EndVirtualScrollBox_RefreshItem");
static_assert(offsetof(EndVirtualScrollBox_RefreshItem, Index_0) == 0x000000, "Member 'EndVirtualScrollBox_RefreshItem::Index_0' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.ScrollWidgetIntoView
// 0x0010 (0x0010 - 0x0000)
struct EndVirtualScrollBox_ScrollWidgetIntoView final
{
public:
	class UWidget*                                WidgetToFind;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnimateScroll;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndVirtualScrollBox_ScrollWidgetIntoView) == 0x000008, "Wrong alignment on EndVirtualScrollBox_ScrollWidgetIntoView");
static_assert(sizeof(EndVirtualScrollBox_ScrollWidgetIntoView) == 0x000010, "Wrong size on EndVirtualScrollBox_ScrollWidgetIntoView");
static_assert(offsetof(EndVirtualScrollBox_ScrollWidgetIntoView, WidgetToFind) == 0x000000, "Member 'EndVirtualScrollBox_ScrollWidgetIntoView::WidgetToFind' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_ScrollWidgetIntoView, AnimateScroll) == 0x000008, "Member 'EndVirtualScrollBox_ScrollWidgetIntoView::AnimateScroll' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetCullingBoundsExtension
// 0x0010 (0x0010 - 0x0000)
struct EndVirtualScrollBox_SetCullingBoundsExtension final
{
public:
	struct FMargin                                InCullingBoundsExtension;                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetCullingBoundsExtension) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetCullingBoundsExtension");
static_assert(sizeof(EndVirtualScrollBox_SetCullingBoundsExtension) == 0x000010, "Wrong size on EndVirtualScrollBox_SetCullingBoundsExtension");
static_assert(offsetof(EndVirtualScrollBox_SetCullingBoundsExtension, InCullingBoundsExtension) == 0x000000, "Member 'EndVirtualScrollBox_SetCullingBoundsExtension::InCullingBoundsExtension' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetCursorBoundsExtension
// 0x0010 (0x0010 - 0x0000)
struct EndVirtualScrollBox_SetCursorBoundsExtension final
{
public:
	struct FMargin                                InCursorBoundsExtension;                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetCursorBoundsExtension) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetCursorBoundsExtension");
static_assert(sizeof(EndVirtualScrollBox_SetCursorBoundsExtension) == 0x000010, "Wrong size on EndVirtualScrollBox_SetCursorBoundsExtension");
static_assert(offsetof(EndVirtualScrollBox_SetCursorBoundsExtension, InCursorBoundsExtension) == 0x000000, "Member 'EndVirtualScrollBox_SetCursorBoundsExtension::InCursorBoundsExtension' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetDesiredCount
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_SetDesiredCount final
{
public:
	int32                                         InDesiredCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetDesiredCount) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetDesiredCount");
static_assert(sizeof(EndVirtualScrollBox_SetDesiredCount) == 0x000004, "Wrong size on EndVirtualScrollBox_SetDesiredCount");
static_assert(offsetof(EndVirtualScrollBox_SetDesiredCount, InDesiredCount) == 0x000000, "Member 'EndVirtualScrollBox_SetDesiredCount::InDesiredCount' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetForceHovered
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_SetForceHovered final
{
public:
	bool                                          bInHovered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetForceHovered) == 0x000001, "Wrong alignment on EndVirtualScrollBox_SetForceHovered");
static_assert(sizeof(EndVirtualScrollBox_SetForceHovered) == 0x000001, "Wrong size on EndVirtualScrollBox_SetForceHovered");
static_assert(offsetof(EndVirtualScrollBox_SetForceHovered, bInHovered) == 0x000000, "Member 'EndVirtualScrollBox_SetForceHovered::bInHovered' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetHasVariableSizeItem
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_SetHasVariableSizeItem final
{
public:
	bool                                          bInVariableSizeItem;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetHasVariableSizeItem) == 0x000001, "Wrong alignment on EndVirtualScrollBox_SetHasVariableSizeItem");
static_assert(sizeof(EndVirtualScrollBox_SetHasVariableSizeItem) == 0x000001, "Wrong size on EndVirtualScrollBox_SetHasVariableSizeItem");
static_assert(offsetof(EndVirtualScrollBox_SetHasVariableSizeItem, bInVariableSizeItem) == 0x000000, "Member 'EndVirtualScrollBox_SetHasVariableSizeItem::bInVariableSizeItem' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetItemCount
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_SetItemCount final
{
public:
	int32                                         InItemCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetItemCount) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetItemCount");
static_assert(sizeof(EndVirtualScrollBox_SetItemCount) == 0x000004, "Wrong size on EndVirtualScrollBox_SetItemCount");
static_assert(offsetof(EndVirtualScrollBox_SetItemCount, InItemCount) == 0x000000, "Member 'EndVirtualScrollBox_SetItemCount::InItemCount' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndVirtualScrollBox_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetPadding) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetPadding");
static_assert(sizeof(EndVirtualScrollBox_SetPadding) == 0x000010, "Wrong size on EndVirtualScrollBox_SetPadding");
static_assert(offsetof(EndVirtualScrollBox_SetPadding, InPadding) == 0x000000, "Member 'EndVirtualScrollBox_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetScrollBarPosition
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_SetScrollBarPosition final
{
public:
	EEndMenuScrollBarPosition                     InScrollBarPosition;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetScrollBarPosition) == 0x000001, "Wrong alignment on EndVirtualScrollBox_SetScrollBarPosition");
static_assert(sizeof(EndVirtualScrollBox_SetScrollBarPosition) == 0x000001, "Wrong size on EndVirtualScrollBox_SetScrollBarPosition");
static_assert(offsetof(EndVirtualScrollBox_SetScrollBarPosition, InScrollBarPosition) == 0x000000, "Member 'EndVirtualScrollBox_SetScrollBarPosition::InScrollBarPosition' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetScrollOffset
// 0x0008 (0x0008 - 0x0000)
struct EndVirtualScrollBox_SetScrollOffset final
{
public:
	float                                         NewScrollOffset;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnimateScroll;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndVirtualScrollBox_SetScrollOffset) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetScrollOffset");
static_assert(sizeof(EndVirtualScrollBox_SetScrollOffset) == 0x000008, "Wrong size on EndVirtualScrollBox_SetScrollOffset");
static_assert(offsetof(EndVirtualScrollBox_SetScrollOffset, NewScrollOffset) == 0x000000, "Member 'EndVirtualScrollBox_SetScrollOffset::NewScrollOffset' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetScrollOffset, AnimateScroll) == 0x000004, "Member 'EndVirtualScrollBox_SetScrollOffset::AnimateScroll' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetSelectedIndex
// 0x0018 (0x0018 - 0x0000)
struct EndVirtualScrollBox_SetSelectedIndex final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAnimateScroll;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceCallback;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                InRootWidget;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetSelectedIndex) == 0x000008, "Wrong alignment on EndVirtualScrollBox_SetSelectedIndex");
static_assert(sizeof(EndVirtualScrollBox_SetSelectedIndex) == 0x000018, "Wrong size on EndVirtualScrollBox_SetSelectedIndex");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndex, UserIndex) == 0x000000, "Member 'EndVirtualScrollBox_SetSelectedIndex::UserIndex' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndex, SlotIndex) == 0x000004, "Member 'EndVirtualScrollBox_SetSelectedIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndex, InAnimateScroll) == 0x000008, "Member 'EndVirtualScrollBox_SetSelectedIndex::InAnimateScroll' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndex, ForceCallback) == 0x000009, "Member 'EndVirtualScrollBox_SetSelectedIndex::ForceCallback' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndex, InRootWidget) == 0x000010, "Member 'EndVirtualScrollBox_SetSelectedIndex::InRootWidget' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetSelectedIndexWithCause
// 0x0018 (0x0018 - 0x0000)
struct EndVirtualScrollBox_SetSelectedIndexWithCause final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFocusCause                                   FocusCause;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAnimateScroll;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceCallback;                                     // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                InRootWidget;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetSelectedIndexWithCause) == 0x000008, "Wrong alignment on EndVirtualScrollBox_SetSelectedIndexWithCause");
static_assert(sizeof(EndVirtualScrollBox_SetSelectedIndexWithCause) == 0x000018, "Wrong size on EndVirtualScrollBox_SetSelectedIndexWithCause");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, UserIndex) == 0x000000, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::UserIndex' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, SlotIndex) == 0x000004, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, FocusCause) == 0x000008, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::FocusCause' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, InAnimateScroll) == 0x000009, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::InAnimateScroll' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, ForceCallback) == 0x00000A, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::ForceCallback' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, InRootWidget) == 0x000010, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::InRootWidget' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetSupportsFocus
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_SetSupportsFocus final
{
public:
	bool                                          bInSupportsFocus;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetSupportsFocus) == 0x000001, "Wrong alignment on EndVirtualScrollBox_SetSupportsFocus");
static_assert(sizeof(EndVirtualScrollBox_SetSupportsFocus) == 0x000001, "Wrong size on EndVirtualScrollBox_SetSupportsFocus");
static_assert(offsetof(EndVirtualScrollBox_SetSupportsFocus, bInSupportsFocus) == 0x000000, "Member 'EndVirtualScrollBox_SetSupportsFocus::bInSupportsFocus' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetSupportsKeyDown
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_SetSupportsKeyDown final
{
public:
	bool                                          bInSupportsKeyDown;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetSupportsKeyDown) == 0x000001, "Wrong alignment on EndVirtualScrollBox_SetSupportsKeyDown");
static_assert(sizeof(EndVirtualScrollBox_SetSupportsKeyDown) == 0x000001, "Wrong size on EndVirtualScrollBox_SetSupportsKeyDown");
static_assert(offsetof(EndVirtualScrollBox_SetSupportsKeyDown, bInSupportsKeyDown) == 0x000000, "Member 'EndVirtualScrollBox_SetSupportsKeyDown::bInSupportsKeyDown' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetSupportsPageScroll
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_SetSupportsPageScroll final
{
public:
	bool                                          bInSupportsPageScroll;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetSupportsPageScroll) == 0x000001, "Wrong alignment on EndVirtualScrollBox_SetSupportsPageScroll");
static_assert(sizeof(EndVirtualScrollBox_SetSupportsPageScroll) == 0x000001, "Wrong size on EndVirtualScrollBox_SetSupportsPageScroll");
static_assert(offsetof(EndVirtualScrollBox_SetSupportsPageScroll, bInSupportsPageScroll) == 0x000000, "Member 'EndVirtualScrollBox_SetSupportsPageScroll::bInSupportsPageScroll' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetChildAt
// 0x0010 (0x0010 - 0x0000)
struct EndVirtualScrollBox_GetChildAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetChildAt) == 0x000008, "Wrong alignment on EndVirtualScrollBox_GetChildAt");
static_assert(sizeof(EndVirtualScrollBox_GetChildAt) == 0x000010, "Wrong size on EndVirtualScrollBox_GetChildAt");
static_assert(offsetof(EndVirtualScrollBox_GetChildAt, Index_0) == 0x000000, "Member 'EndVirtualScrollBox_GetChildAt::Index_0' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_GetChildAt, ReturnValue) == 0x000008, "Member 'EndVirtualScrollBox_GetChildAt::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetCursorWidget
// 0x0008 (0x0008 - 0x0000)
struct EndVirtualScrollBox_GetCursorWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetCursorWidget) == 0x000008, "Wrong alignment on EndVirtualScrollBox_GetCursorWidget");
static_assert(sizeof(EndVirtualScrollBox_GetCursorWidget) == 0x000008, "Wrong size on EndVirtualScrollBox_GetCursorWidget");
static_assert(offsetof(EndVirtualScrollBox_GetCursorWidget, ReturnValue) == 0x000000, "Member 'EndVirtualScrollBox_GetCursorWidget::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetIsForceHovered
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_GetIsForceHovered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetIsForceHovered) == 0x000001, "Wrong alignment on EndVirtualScrollBox_GetIsForceHovered");
static_assert(sizeof(EndVirtualScrollBox_GetIsForceHovered) == 0x000001, "Wrong size on EndVirtualScrollBox_GetIsForceHovered");
static_assert(offsetof(EndVirtualScrollBox_GetIsForceHovered, ReturnValue) == 0x000000, "Member 'EndVirtualScrollBox_GetIsForceHovered::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetMaxScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_GetMaxScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetMaxScrollOffset) == 0x000004, "Wrong alignment on EndVirtualScrollBox_GetMaxScrollOffset");
static_assert(sizeof(EndVirtualScrollBox_GetMaxScrollOffset) == 0x000004, "Wrong size on EndVirtualScrollBox_GetMaxScrollOffset");
static_assert(offsetof(EndVirtualScrollBox_GetMaxScrollOffset, ReturnValue) == 0x000000, "Member 'EndVirtualScrollBox_GetMaxScrollOffset::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetScrollBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_GetScrollBarVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetScrollBarVisibility) == 0x000001, "Wrong alignment on EndVirtualScrollBox_GetScrollBarVisibility");
static_assert(sizeof(EndVirtualScrollBox_GetScrollBarVisibility) == 0x000001, "Wrong size on EndVirtualScrollBox_GetScrollBarVisibility");
static_assert(offsetof(EndVirtualScrollBox_GetScrollBarVisibility, ReturnValue) == 0x000000, "Member 'EndVirtualScrollBox_GetScrollBarVisibility::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_GetScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetScrollOffset) == 0x000004, "Wrong alignment on EndVirtualScrollBox_GetScrollOffset");
static_assert(sizeof(EndVirtualScrollBox_GetScrollOffset) == 0x000004, "Wrong size on EndVirtualScrollBox_GetScrollOffset");
static_assert(offsetof(EndVirtualScrollBox_GetScrollOffset, ReturnValue) == 0x000000, "Member 'EndVirtualScrollBox_GetScrollOffset::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct EndVirtualScrollBox_GetSelectedIndex final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetSelectedIndex) == 0x000004, "Wrong alignment on EndVirtualScrollBox_GetSelectedIndex");
static_assert(sizeof(EndVirtualScrollBox_GetSelectedIndex) == 0x000008, "Wrong size on EndVirtualScrollBox_GetSelectedIndex");
static_assert(offsetof(EndVirtualScrollBox_GetSelectedIndex, UserIndex) == 0x000000, "Member 'EndVirtualScrollBox_GetSelectedIndex::UserIndex' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_GetSelectedIndex, ReturnValue) == 0x000004, "Member 'EndVirtualScrollBox_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainPlaylogList.OnCharaList1SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainPlaylogList_OnCharaList1SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainPlaylogList_OnCharaList1SetupItem) == 0x000008, "Wrong alignment on EndMainPlaylogList_OnCharaList1SetupItem");
static_assert(sizeof(EndMainPlaylogList_OnCharaList1SetupItem) == 0x000010, "Wrong size on EndMainPlaylogList_OnCharaList1SetupItem");
static_assert(offsetof(EndMainPlaylogList_OnCharaList1SetupItem, ItemWidget) == 0x000000, "Member 'EndMainPlaylogList_OnCharaList1SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainPlaylogList_OnCharaList1SetupItem, ItemIndex) == 0x000008, "Member 'EndMainPlaylogList_OnCharaList1SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainPlaylogList.OnCharaList2SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainPlaylogList_OnCharaList2SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainPlaylogList_OnCharaList2SetupItem) == 0x000008, "Wrong alignment on EndMainPlaylogList_OnCharaList2SetupItem");
static_assert(sizeof(EndMainPlaylogList_OnCharaList2SetupItem) == 0x000010, "Wrong size on EndMainPlaylogList_OnCharaList2SetupItem");
static_assert(offsetof(EndMainPlaylogList_OnCharaList2SetupItem, ItemWidget) == 0x000000, "Member 'EndMainPlaylogList_OnCharaList2SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainPlaylogList_OnCharaList2SetupItem, ItemIndex) == 0x000008, "Member 'EndMainPlaylogList_OnCharaList2SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainPlaylogList.OnLogListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainPlaylogList_OnLogListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainPlaylogList_OnLogListSetupItem) == 0x000008, "Wrong alignment on EndMainPlaylogList_OnLogListSetupItem");
static_assert(sizeof(EndMainPlaylogList_OnLogListSetupItem) == 0x000010, "Wrong size on EndMainPlaylogList_OnLogListSetupItem");
static_assert(offsetof(EndMainPlaylogList_OnLogListSetupItem, ItemWidget) == 0x000000, "Member 'EndMainPlaylogList_OnLogListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainPlaylogList_OnLogListSetupItem, ItemIndex) == 0x000008, "Member 'EndMainPlaylogList_OnLogListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainSystemMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainSystemMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainSystemMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainSystemMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainSystemMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainSystemMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainSystemMenu_OnLeftMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndMainSystemMenu_OnLeftMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainSystemMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainSystemMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainSystemMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainSystemMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainSystemMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainSystemMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainSystemMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainSystemMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainSystemMenu_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndMainSystemMenu_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStatusList.OnAdditionalStatusListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusList_OnAdditionalStatusListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusList_OnAdditionalStatusListSetupItem) == 0x000008, "Wrong alignment on EndStatusList_OnAdditionalStatusListSetupItem");
static_assert(sizeof(EndStatusList_OnAdditionalStatusListSetupItem) == 0x000010, "Wrong size on EndStatusList_OnAdditionalStatusListSetupItem");
static_assert(offsetof(EndStatusList_OnAdditionalStatusListSetupItem, ItemWidget) == 0x000000, "Member 'EndStatusList_OnAdditionalStatusListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusList_OnAdditionalStatusListSetupItem, CellIndex) == 0x000008, "Member 'EndStatusList_OnAdditionalStatusListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStatusList.OnStatusListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStatusList_OnStatusListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStatusList_OnStatusListMeasureItem) == 0x000004, "Wrong alignment on EndStatusList_OnStatusListMeasureItem");
static_assert(sizeof(EndStatusList_OnStatusListMeasureItem) == 0x00000C, "Wrong size on EndStatusList_OnStatusListMeasureItem");
static_assert(offsetof(EndStatusList_OnStatusListMeasureItem, CellIndex) == 0x000000, "Member 'EndStatusList_OnStatusListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndStatusList_OnStatusListMeasureItem, ReturnValue) == 0x000004, "Member 'EndStatusList_OnStatusListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStatusList.OnStatusListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStatusList_OnStatusListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStatusList_OnStatusListSetupItem) == 0x000008, "Wrong alignment on EndStatusList_OnStatusListSetupItem");
static_assert(sizeof(EndStatusList_OnStatusListSetupItem) == 0x000010, "Wrong size on EndStatusList_OnStatusListSetupItem");
static_assert(offsetof(EndStatusList_OnStatusListSetupItem, ItemWidget) == 0x000000, "Member 'EndStatusList_OnStatusListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStatusList_OnStatusListSetupItem, CellIndex) == 0x000008, "Member 'EndStatusList_OnStatusListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeMenu.OnCoreMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem");
static_assert(sizeof(EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem) == 0x000010, "Wrong size on EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem");
static_assert(offsetof(EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeMenu.OnSkillListMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem");
static_assert(sizeof(EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem) == 0x000010, "Wrong size on EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem");
static_assert(offsetof(EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndListBox.RefreshItem
// 0x0004 (0x0004 - 0x0000)
struct EndListBox_RefreshItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_RefreshItem) == 0x000004, "Wrong alignment on EndListBox_RefreshItem");
static_assert(sizeof(EndListBox_RefreshItem) == 0x000004, "Wrong size on EndListBox_RefreshItem");
static_assert(offsetof(EndListBox_RefreshItem, Index_0) == 0x000000, "Member 'EndListBox_RefreshItem::Index_0' has a wrong offset!");

// Function EndGame.EndListBox.SetCursorBoundsExtension
// 0x0010 (0x0010 - 0x0000)
struct EndListBox_SetCursorBoundsExtension final
{
public:
	struct FMargin                                InCursorBoundsExtension;                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_SetCursorBoundsExtension) == 0x000004, "Wrong alignment on EndListBox_SetCursorBoundsExtension");
static_assert(sizeof(EndListBox_SetCursorBoundsExtension) == 0x000010, "Wrong size on EndListBox_SetCursorBoundsExtension");
static_assert(offsetof(EndListBox_SetCursorBoundsExtension, InCursorBoundsExtension) == 0x000000, "Member 'EndListBox_SetCursorBoundsExtension::InCursorBoundsExtension' has a wrong offset!");

// Function EndGame.EndListBox.SetDesiredCount
// 0x0004 (0x0004 - 0x0000)
struct EndListBox_SetDesiredCount final
{
public:
	int32                                         InDesiredCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_SetDesiredCount) == 0x000004, "Wrong alignment on EndListBox_SetDesiredCount");
static_assert(sizeof(EndListBox_SetDesiredCount) == 0x000004, "Wrong size on EndListBox_SetDesiredCount");
static_assert(offsetof(EndListBox_SetDesiredCount, InDesiredCount) == 0x000000, "Member 'EndListBox_SetDesiredCount::InDesiredCount' has a wrong offset!");

// Function EndGame.EndListBox.SetForceHovered
// 0x0001 (0x0001 - 0x0000)
struct EndListBox_SetForceHovered final
{
public:
	bool                                          bInHovered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_SetForceHovered) == 0x000001, "Wrong alignment on EndListBox_SetForceHovered");
static_assert(sizeof(EndListBox_SetForceHovered) == 0x000001, "Wrong size on EndListBox_SetForceHovered");
static_assert(offsetof(EndListBox_SetForceHovered, bInHovered) == 0x000000, "Member 'EndListBox_SetForceHovered::bInHovered' has a wrong offset!");

// Function EndGame.EndListBox.SetItemCount
// 0x0004 (0x0004 - 0x0000)
struct EndListBox_SetItemCount final
{
public:
	int32                                         InItemCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_SetItemCount) == 0x000004, "Wrong alignment on EndListBox_SetItemCount");
static_assert(sizeof(EndListBox_SetItemCount) == 0x000004, "Wrong size on EndListBox_SetItemCount");
static_assert(offsetof(EndListBox_SetItemCount, InItemCount) == 0x000000, "Member 'EndListBox_SetItemCount::InItemCount' has a wrong offset!");

// Function EndGame.EndListBox.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndListBox_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_SetPadding) == 0x000004, "Wrong alignment on EndListBox_SetPadding");
static_assert(sizeof(EndListBox_SetPadding) == 0x000010, "Wrong size on EndListBox_SetPadding");
static_assert(offsetof(EndListBox_SetPadding, InPadding) == 0x000000, "Member 'EndListBox_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndListBox.SetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct EndListBox_SetSelectedIndex final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_SetSelectedIndex) == 0x000004, "Wrong alignment on EndListBox_SetSelectedIndex");
static_assert(sizeof(EndListBox_SetSelectedIndex) == 0x000008, "Wrong size on EndListBox_SetSelectedIndex");
static_assert(offsetof(EndListBox_SetSelectedIndex, UserIndex) == 0x000000, "Member 'EndListBox_SetSelectedIndex::UserIndex' has a wrong offset!");
static_assert(offsetof(EndListBox_SetSelectedIndex, SlotIndex) == 0x000004, "Member 'EndListBox_SetSelectedIndex::SlotIndex' has a wrong offset!");

// Function EndGame.EndListBox.SetSelectedIndexWithCause
// 0x000C (0x000C - 0x0000)
struct EndListBox_SetSelectedIndexWithCause final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFocusCause                                   FocusCause;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndListBox_SetSelectedIndexWithCause) == 0x000004, "Wrong alignment on EndListBox_SetSelectedIndexWithCause");
static_assert(sizeof(EndListBox_SetSelectedIndexWithCause) == 0x00000C, "Wrong size on EndListBox_SetSelectedIndexWithCause");
static_assert(offsetof(EndListBox_SetSelectedIndexWithCause, UserIndex) == 0x000000, "Member 'EndListBox_SetSelectedIndexWithCause::UserIndex' has a wrong offset!");
static_assert(offsetof(EndListBox_SetSelectedIndexWithCause, SlotIndex) == 0x000004, "Member 'EndListBox_SetSelectedIndexWithCause::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndListBox_SetSelectedIndexWithCause, FocusCause) == 0x000008, "Member 'EndListBox_SetSelectedIndexWithCause::FocusCause' has a wrong offset!");

// Function EndGame.EndListBox.GetChildAt
// 0x0010 (0x0010 - 0x0000)
struct EndListBox_GetChildAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_GetChildAt) == 0x000008, "Wrong alignment on EndListBox_GetChildAt");
static_assert(sizeof(EndListBox_GetChildAt) == 0x000010, "Wrong size on EndListBox_GetChildAt");
static_assert(offsetof(EndListBox_GetChildAt, Index_0) == 0x000000, "Member 'EndListBox_GetChildAt::Index_0' has a wrong offset!");
static_assert(offsetof(EndListBox_GetChildAt, ReturnValue) == 0x000008, "Member 'EndListBox_GetChildAt::ReturnValue' has a wrong offset!");

// Function EndGame.EndListBox.GetCursorWidget
// 0x0008 (0x0008 - 0x0000)
struct EndListBox_GetCursorWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_GetCursorWidget) == 0x000008, "Wrong alignment on EndListBox_GetCursorWidget");
static_assert(sizeof(EndListBox_GetCursorWidget) == 0x000008, "Wrong size on EndListBox_GetCursorWidget");
static_assert(offsetof(EndListBox_GetCursorWidget, ReturnValue) == 0x000000, "Member 'EndListBox_GetCursorWidget::ReturnValue' has a wrong offset!");

// Function EndGame.EndListBox.GetIsForceHovered
// 0x0001 (0x0001 - 0x0000)
struct EndListBox_GetIsForceHovered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_GetIsForceHovered) == 0x000001, "Wrong alignment on EndListBox_GetIsForceHovered");
static_assert(sizeof(EndListBox_GetIsForceHovered) == 0x000001, "Wrong size on EndListBox_GetIsForceHovered");
static_assert(offsetof(EndListBox_GetIsForceHovered, ReturnValue) == 0x000000, "Member 'EndListBox_GetIsForceHovered::ReturnValue' has a wrong offset!");

// Function EndGame.EndListBox.GetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct EndListBox_GetSelectedIndex final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_GetSelectedIndex) == 0x000004, "Wrong alignment on EndListBox_GetSelectedIndex");
static_assert(sizeof(EndListBox_GetSelectedIndex) == 0x000008, "Wrong size on EndListBox_GetSelectedIndex");
static_assert(offsetof(EndListBox_GetSelectedIndex, UserIndex) == 0x000000, "Member 'EndListBox_GetSelectedIndex::UserIndex' has a wrong offset!");
static_assert(offsetof(EndListBox_GetSelectedIndex, ReturnValue) == 0x000004, "Member 'EndListBox_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndLocationVolume.EnableLocationVolume
// 0x0001 (0x0001 - 0x0000)
struct EndLocationVolume_EnableLocationVolume final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLocationVolume_EnableLocationVolume) == 0x000001, "Wrong alignment on EndLocationVolume_EnableLocationVolume");
static_assert(sizeof(EndLocationVolume_EnableLocationVolume) == 0x000001, "Wrong size on EndLocationVolume_EnableLocationVolume");
static_assert(offsetof(EndLocationVolume_EnableLocationVolume, bEnable) == 0x000000, "Member 'EndLocationVolume_EnableLocationVolume::bEnable' has a wrong offset!");

// Function EndGame.EndPlayerTinyBroncoCoordinator.GetVehicleCharacter
// 0x0008 (0x0008 - 0x0000)
struct EndPlayerTinyBroncoCoordinator_GetVehicleCharacter final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayerTinyBroncoCoordinator_GetVehicleCharacter) == 0x000008, "Wrong alignment on EndPlayerTinyBroncoCoordinator_GetVehicleCharacter");
static_assert(sizeof(EndPlayerTinyBroncoCoordinator_GetVehicleCharacter) == 0x000008, "Wrong size on EndPlayerTinyBroncoCoordinator_GetVehicleCharacter");
static_assert(offsetof(EndPlayerTinyBroncoCoordinator_GetVehicleCharacter, ReturnValue) == 0x000000, "Member 'EndPlayerTinyBroncoCoordinator_GetVehicleCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnItemMenuIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainItemMenu_OnItemMenuIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnItemMenuIndexChanged) == 0x000004, "Wrong alignment on EndMainItemMenu_OnItemMenuIndexChanged");
static_assert(sizeof(EndMainItemMenu_OnItemMenuIndexChanged) == 0x000004, "Wrong size on EndMainItemMenu_OnItemMenuIndexChanged");
static_assert(offsetof(EndMainItemMenu_OnItemMenuIndexChanged, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnItemMenuIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnItemMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMainItemMenu_OnItemMenuMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnItemMenuMeasureItem) == 0x000004, "Wrong alignment on EndMainItemMenu_OnItemMenuMeasureItem");
static_assert(sizeof(EndMainItemMenu_OnItemMenuMeasureItem) == 0x00000C, "Wrong size on EndMainItemMenu_OnItemMenuMeasureItem");
static_assert(offsetof(EndMainItemMenu_OnItemMenuMeasureItem, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnItemMenuMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainItemMenu_OnItemMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndMainItemMenu_OnItemMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnItemMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainItemMenu_OnItemMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnItemMenuPressedItem) == 0x000004, "Wrong alignment on EndMainItemMenu_OnItemMenuPressedItem");
static_assert(sizeof(EndMainItemMenu_OnItemMenuPressedItem) == 0x000004, "Wrong size on EndMainItemMenu_OnItemMenuPressedItem");
static_assert(offsetof(EndMainItemMenu_OnItemMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnItemMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnItemMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainItemMenu_OnItemMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainItemMenu_OnItemMenuSetupItem) == 0x000008, "Wrong alignment on EndMainItemMenu_OnItemMenuSetupItem");
static_assert(sizeof(EndMainItemMenu_OnItemMenuSetupItem) == 0x000010, "Wrong size on EndMainItemMenu_OnItemMenuSetupItem");
static_assert(offsetof(EndMainItemMenu_OnItemMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainItemMenu_OnItemMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainItemMenu_OnItemMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainItemMenu_OnItemMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnLeftMenuIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainItemMenu_OnLeftMenuIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnLeftMenuIndexChanged) == 0x000004, "Wrong alignment on EndMainItemMenu_OnLeftMenuIndexChanged");
static_assert(sizeof(EndMainItemMenu_OnLeftMenuIndexChanged) == 0x000004, "Wrong size on EndMainItemMenu_OnLeftMenuIndexChanged");
static_assert(offsetof(EndMainItemMenu_OnLeftMenuIndexChanged, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnLeftMenuIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainItemMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainItemMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainItemMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainItemMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainItemMenu_OnLeftMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnLeftMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainItemMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainItemMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainItemMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainItemMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainItemMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainItemMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainItemMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainItemMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainItemMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnMemberMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainItemMenu_OnMemberMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnMemberMenuPressedItem) == 0x000004, "Wrong alignment on EndMainItemMenu_OnMemberMenuPressedItem");
static_assert(sizeof(EndMainItemMenu_OnMemberMenuPressedItem) == 0x000004, "Wrong size on EndMainItemMenu_OnMemberMenuPressedItem");
static_assert(offsetof(EndMainItemMenu_OnMemberMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnMemberMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnMemberMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainItemMenu_OnMemberMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainItemMenu_OnMemberMenuSetupItem) == 0x000008, "Wrong alignment on EndMainItemMenu_OnMemberMenuSetupItem");
static_assert(sizeof(EndMainItemMenu_OnMemberMenuSetupItem) == 0x000010, "Wrong size on EndMainItemMenu_OnMemberMenuSetupItem");
static_assert(offsetof(EndMainItemMenu_OnMemberMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainItemMenu_OnMemberMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainItemMenu_OnMemberMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainItemMenu_OnMemberMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndShopItemInfoWindow.OnCoreListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndShopItemInfoWindow_OnCoreListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopItemInfoWindow_OnCoreListSetupItem) == 0x000008, "Wrong alignment on EndShopItemInfoWindow_OnCoreListSetupItem");
static_assert(sizeof(EndShopItemInfoWindow_OnCoreListSetupItem) == 0x000010, "Wrong size on EndShopItemInfoWindow_OnCoreListSetupItem");
static_assert(offsetof(EndShopItemInfoWindow_OnCoreListSetupItem, ItemWidget) == 0x000000, "Member 'EndShopItemInfoWindow_OnCoreListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopItemInfoWindow_OnCoreListSetupItem, CellIndex) == 0x000008, "Member 'EndShopItemInfoWindow_OnCoreListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndShopItemInfoWindow.OnListCompare1Item
// 0x0010 (0x0010 - 0x0000)
struct EndShopItemInfoWindow_OnListCompare1Item final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopItemInfoWindow_OnListCompare1Item) == 0x000008, "Wrong alignment on EndShopItemInfoWindow_OnListCompare1Item");
static_assert(sizeof(EndShopItemInfoWindow_OnListCompare1Item) == 0x000010, "Wrong size on EndShopItemInfoWindow_OnListCompare1Item");
static_assert(offsetof(EndShopItemInfoWindow_OnListCompare1Item, ItemWidget) == 0x000000, "Member 'EndShopItemInfoWindow_OnListCompare1Item::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopItemInfoWindow_OnListCompare1Item, CellIndex) == 0x000008, "Member 'EndShopItemInfoWindow_OnListCompare1Item::CellIndex' has a wrong offset!");

// Function EndGame.EndShopItemInfoWindow.OnListCompareItem
// 0x0010 (0x0010 - 0x0000)
struct EndShopItemInfoWindow_OnListCompareItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopItemInfoWindow_OnListCompareItem) == 0x000008, "Wrong alignment on EndShopItemInfoWindow_OnListCompareItem");
static_assert(sizeof(EndShopItemInfoWindow_OnListCompareItem) == 0x000010, "Wrong size on EndShopItemInfoWindow_OnListCompareItem");
static_assert(offsetof(EndShopItemInfoWindow_OnListCompareItem, ItemWidget) == 0x000000, "Member 'EndShopItemInfoWindow_OnListCompareItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopItemInfoWindow_OnListCompareItem, CellIndex) == 0x000008, "Member 'EndShopItemInfoWindow_OnListCompareItem::CellIndex' has a wrong offset!");

// Function EndGame.EndShopItemInfoWindow.OnMateriaInfoListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndShopItemInfoWindow_OnMateriaInfoListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopItemInfoWindow_OnMateriaInfoListSetupItem) == 0x000008, "Wrong alignment on EndShopItemInfoWindow_OnMateriaInfoListSetupItem");
static_assert(sizeof(EndShopItemInfoWindow_OnMateriaInfoListSetupItem) == 0x000010, "Wrong size on EndShopItemInfoWindow_OnMateriaInfoListSetupItem");
static_assert(offsetof(EndShopItemInfoWindow_OnMateriaInfoListSetupItem, ItemWidget) == 0x000000, "Member 'EndShopItemInfoWindow_OnMateriaInfoListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopItemInfoWindow_OnMateriaInfoListSetupItem, CellIndex) == 0x000008, "Member 'EndShopItemInfoWindow_OnMateriaInfoListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndShopItemInfoWindow.OnMeasureInfoListSize
// 0x000C (0x000C - 0x0000)
struct EndShopItemInfoWindow_OnMeasureInfoListSize final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndShopItemInfoWindow_OnMeasureInfoListSize) == 0x000004, "Wrong alignment on EndShopItemInfoWindow_OnMeasureInfoListSize");
static_assert(sizeof(EndShopItemInfoWindow_OnMeasureInfoListSize) == 0x00000C, "Wrong size on EndShopItemInfoWindow_OnMeasureInfoListSize");
static_assert(offsetof(EndShopItemInfoWindow_OnMeasureInfoListSize, CellIndex) == 0x000000, "Member 'EndShopItemInfoWindow_OnMeasureInfoListSize::CellIndex' has a wrong offset!");
static_assert(offsetof(EndShopItemInfoWindow_OnMeasureInfoListSize, ReturnValue) == 0x000004, "Member 'EndShopItemInfoWindow_OnMeasureInfoListSize::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainMateriaChangeSelectWindow.OnEndEquipChangeEquipCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup) == 0x000008, "Wrong alignment on EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup");
static_assert(sizeof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup) == 0x000010, "Wrong size on EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup, ItemWidget) == 0x000000, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup, ItemIndex) == 0x000008, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaChangeSelectWindow.OnEndEquipChangeMateriaCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup) == 0x000008, "Wrong alignment on EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup");
static_assert(sizeof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup) == 0x000010, "Wrong size on EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup, ItemWidget) == 0x000000, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup, ItemIndex) == 0x000008, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaChangeSelectWindow.OnEndEquipChangeWeaponCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup) == 0x000008, "Wrong alignment on EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup");
static_assert(sizeof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup) == 0x000010, "Wrong size on EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup, ItemWidget) == 0x000000, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup, ItemIndex) == 0x000008, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMenuTalkItemList.OnList00MeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMenuTalkItemList_OnList00MeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuTalkItemList_OnList00MeasureItem) == 0x000004, "Wrong alignment on EndMenuTalkItemList_OnList00MeasureItem");
static_assert(sizeof(EndMenuTalkItemList_OnList00MeasureItem) == 0x00000C, "Wrong size on EndMenuTalkItemList_OnList00MeasureItem");
static_assert(offsetof(EndMenuTalkItemList_OnList00MeasureItem, ItemIndex) == 0x000000, "Member 'EndMenuTalkItemList_OnList00MeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndMenuTalkItemList_OnList00MeasureItem, ReturnValue) == 0x000004, "Member 'EndMenuTalkItemList_OnList00MeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuTalkItemList.OnList00SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMenuTalkItemList_OnList00SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuTalkItemList_OnList00SetupItem) == 0x000008, "Wrong alignment on EndMenuTalkItemList_OnList00SetupItem");
static_assert(sizeof(EndMenuTalkItemList_OnList00SetupItem) == 0x000010, "Wrong size on EndMenuTalkItemList_OnList00SetupItem");
static_assert(offsetof(EndMenuTalkItemList_OnList00SetupItem, ItemWidget) == 0x000000, "Member 'EndMenuTalkItemList_OnList00SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMenuTalkItemList_OnList00SetupItem, ItemIndex) == 0x000008, "Member 'EndMenuTalkItemList_OnList00SetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupChainAbilityPane
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupChainAbilityPane final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupChainAbilityPane) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupChainAbilityPane");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupChainAbilityPane) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupChainAbilityPane");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupChainAbilityPane, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupChainAbilityPane::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupChainAbilityPane, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupChainAbilityPane::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupChocoboRace
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupChocoboRace final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupChocoboRace) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupChocoboRace");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupChocoboRace) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupChocoboRace");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupChocoboRace, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupChocoboRace::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupChocoboRace, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupChocoboRace::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupChocoboRaceTutorial
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupChocoboRaceTutorial final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupChocoboRaceTutorial) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupChocoboRaceTutorial");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupChocoboRaceTutorial) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupChocoboRaceTutorial");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupChocoboRaceTutorial, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupChocoboRaceTutorial::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupChocoboRaceTutorial, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupChocoboRaceTutorial::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupField
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupField final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupField) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupField");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupField) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupField");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupField, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupField::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupField, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupField::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupGBike
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupGBike final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupGBike) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupGBike");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupGBike) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupGBike");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupGBike, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupGBike::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupGBike, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupGBike::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupMiniGameBuggy
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupMiniGameBuggy final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupMiniGameBuggy) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupMiniGameBuggy");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupMiniGameBuggy) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupMiniGameBuggy");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupMiniGameBuggy, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupMiniGameBuggy::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupMiniGameBuggy, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupMiniGameBuggy::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupPlayFeel
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupPlayFeel final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupPlayFeel) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupPlayFeel");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupPlayFeel) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupPlayFeel");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupPlayFeel, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupPlayFeel::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupPlayFeel, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupPlayFeel::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupSelectByCamera
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupSelectByCamera final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupSelectByCamera) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupSelectByCamera");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupSelectByCamera) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupSelectByCamera");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupSelectByCamera, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupSelectByCamera::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupSelectByCamera, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupSelectByCamera::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupShortcutAbilityPane
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupShortcutAbilityPane final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupShortcutAbilityPane) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupShortcutAbilityPane");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupShortcutAbilityPane) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupShortcutAbilityPane");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupShortcutAbilityPane, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupShortcutAbilityPane::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupShortcutAbilityPane, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupShortcutAbilityPane::ItemIndex' has a wrong offset!");

// Function EndGame.EndStreamingSwitchVolume.SwitchStreamingVolume
// 0x000C (0x000C - 0x0000)
struct EndStreamingSwitchVolume_SwitchStreamingVolume final
{
public:
	class FName                                   InSwitchLabel;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndStreamingSwitchType                       InSwitchType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoErrMsg;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStreamingSwitchVolume_SwitchStreamingVolume) == 0x000004, "Wrong alignment on EndStreamingSwitchVolume_SwitchStreamingVolume");
static_assert(sizeof(EndStreamingSwitchVolume_SwitchStreamingVolume) == 0x00000C, "Wrong size on EndStreamingSwitchVolume_SwitchStreamingVolume");
static_assert(offsetof(EndStreamingSwitchVolume_SwitchStreamingVolume, InSwitchLabel) == 0x000000, "Member 'EndStreamingSwitchVolume_SwitchStreamingVolume::InSwitchLabel' has a wrong offset!");
static_assert(offsetof(EndStreamingSwitchVolume_SwitchStreamingVolume, InSwitchType) == 0x000008, "Member 'EndStreamingSwitchVolume_SwitchStreamingVolume::InSwitchType' has a wrong offset!");
static_assert(offsetof(EndStreamingSwitchVolume_SwitchStreamingVolume, NoErrMsg) == 0x000009, "Member 'EndStreamingSwitchVolume_SwitchStreamingVolume::NoErrMsg' has a wrong offset!");

// Function EndGame.EndMateriaListNew.OnMateriaListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMateriaListNew_OnMateriaListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMateriaListNew_OnMateriaListSetupItem) == 0x000008, "Wrong alignment on EndMateriaListNew_OnMateriaListSetupItem");
static_assert(sizeof(EndMateriaListNew_OnMateriaListSetupItem) == 0x000010, "Wrong size on EndMateriaListNew_OnMateriaListSetupItem");
static_assert(offsetof(EndMateriaListNew_OnMateriaListSetupItem, ItemWidget) == 0x000000, "Member 'EndMateriaListNew_OnMateriaListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMateriaListNew_OnMateriaListSetupItem, CellIndex) == 0x000008, "Member 'EndMateriaListNew_OnMateriaListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMateriaListNew.OnMateriaListSetupItemLegacy
// 0x0010 (0x0010 - 0x0000)
struct EndMateriaListNew_OnMateriaListSetupItemLegacy final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMateriaListNew_OnMateriaListSetupItemLegacy) == 0x000008, "Wrong alignment on EndMateriaListNew_OnMateriaListSetupItemLegacy");
static_assert(sizeof(EndMateriaListNew_OnMateriaListSetupItemLegacy) == 0x000010, "Wrong size on EndMateriaListNew_OnMateriaListSetupItemLegacy");
static_assert(offsetof(EndMateriaListNew_OnMateriaListSetupItemLegacy, ItemWidget) == 0x000000, "Member 'EndMateriaListNew_OnMateriaListSetupItemLegacy::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMateriaListNew_OnMateriaListSetupItemLegacy, CellIndex) == 0x000008, "Member 'EndMateriaListNew_OnMateriaListSetupItemLegacy::CellIndex' has a wrong offset!");

// Function EndGame.EndMainDlcTopMenu.OnPressedItemInternal
// 0x0004 (0x0004 - 0x0000)
struct EndMainDlcTopMenu_OnPressedItemInternal final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainDlcTopMenu_OnPressedItemInternal) == 0x000004, "Wrong alignment on EndMainDlcTopMenu_OnPressedItemInternal");
static_assert(sizeof(EndMainDlcTopMenu_OnPressedItemInternal) == 0x000004, "Wrong size on EndMainDlcTopMenu_OnPressedItemInternal");
static_assert(offsetof(EndMainDlcTopMenu_OnPressedItemInternal, CellIndex) == 0x000000, "Member 'EndMainDlcTopMenu_OnPressedItemInternal::CellIndex' has a wrong offset!");

// Function EndGame.EndMainDlcTopMenu.OnSelectedIndexChangedInternal
// 0x0004 (0x0004 - 0x0000)
struct EndMainDlcTopMenu_OnSelectedIndexChangedInternal final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainDlcTopMenu_OnSelectedIndexChangedInternal) == 0x000004, "Wrong alignment on EndMainDlcTopMenu_OnSelectedIndexChangedInternal");
static_assert(sizeof(EndMainDlcTopMenu_OnSelectedIndexChangedInternal) == 0x000004, "Wrong size on EndMainDlcTopMenu_OnSelectedIndexChangedInternal");
static_assert(offsetof(EndMainDlcTopMenu_OnSelectedIndexChangedInternal, CellIndex) == 0x000000, "Member 'EndMainDlcTopMenu_OnSelectedIndexChangedInternal::CellIndex' has a wrong offset!");

// Function EndGame.EndMainDlcTopMenu.OnSetupItemInternal
// 0x0010 (0x0010 - 0x0000)
struct EndMainDlcTopMenu_OnSetupItemInternal final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainDlcTopMenu_OnSetupItemInternal) == 0x000008, "Wrong alignment on EndMainDlcTopMenu_OnSetupItemInternal");
static_assert(sizeof(EndMainDlcTopMenu_OnSetupItemInternal) == 0x000010, "Wrong size on EndMainDlcTopMenu_OnSetupItemInternal");
static_assert(offsetof(EndMainDlcTopMenu_OnSetupItemInternal, ItemWidget) == 0x000000, "Member 'EndMainDlcTopMenu_OnSetupItemInternal::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainDlcTopMenu_OnSetupItemInternal, CellIndex) == 0x000008, "Member 'EndMainDlcTopMenu_OnSetupItemInternal::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnCharaMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnCharaMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnCharaMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem) == 0x000008, "Wrong alignment on EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipCategoryMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipCategoryMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipCategoryMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem) == 0x000008, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem) == 0x00000C, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem, ItemIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem) == 0x000008, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnMateriaMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem) == 0x00000C, "Wrong size on EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem, ItemIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnMateriaMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnMateriaMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnMateriaMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem) == 0x000008, "Wrong alignment on EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnSortListPressedItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnSortListPressedItem) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnSortListPressedItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.UpdateStatusPanel
// 0x0001 (0x0001 - 0x0000)
struct EndMainEquipmentMateriaMenu_UpdateStatusPanel final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_UpdateStatusPanel) == 0x000001, "Wrong alignment on EndMainEquipmentMateriaMenu_UpdateStatusPanel");
static_assert(sizeof(EndMainEquipmentMateriaMenu_UpdateStatusPanel) == 0x000001, "Wrong size on EndMainEquipmentMateriaMenu_UpdateStatusPanel");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanel, PlayerType) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanel::PlayerType' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.UpdateStatusPanelWithEquipment
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentCategoryMain                        EquipType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EquipID;                                           // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipIndex;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment");
static_assert(sizeof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment, PlayerType) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment, EquipType) == 0x000001, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment::EquipType' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment, EquipID) == 0x000004, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment::EquipID' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment, EquipIndex) == 0x00000C, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment::EquipIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.UpdateStatusPanelWithMateria
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentCategoryMain                        EquipType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrigMateriaIndex;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetMateriaIndex;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria");
static_assert(sizeof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria, PlayerType) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria, EquipType) == 0x000001, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria::EquipType' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria, SlotIndex) == 0x000004, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria, OrigMateriaIndex) == 0x000008, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria::OrigMateriaIndex' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria, TargetMateriaIndex) == 0x00000C, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria::TargetMateriaIndex' has a wrong offset!");

// Function EndGame.EndTinyBroncoCharacter.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndTinyBroncoCharacter_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTinyBroncoCharacter_OnComponentHit) == 0x000008, "Wrong alignment on EndTinyBroncoCharacter_OnComponentHit");
static_assert(sizeof(EndTinyBroncoCharacter_OnComponentHit) == 0x0000B8, "Wrong size on EndTinyBroncoCharacter_OnComponentHit");
static_assert(offsetof(EndTinyBroncoCharacter_OnComponentHit, HitComponent) == 0x000000, "Member 'EndTinyBroncoCharacter_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndTinyBroncoCharacter_OnComponentHit, OtherActor) == 0x000008, "Member 'EndTinyBroncoCharacter_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndTinyBroncoCharacter_OnComponentHit, OtherComp) == 0x000010, "Member 'EndTinyBroncoCharacter_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndTinyBroncoCharacter_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndTinyBroncoCharacter_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndTinyBroncoCharacter_OnComponentHit, Hit) == 0x000024, "Member 'EndTinyBroncoCharacter_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndMenuGameOverHandler.OnCommandCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMenuGameOverHandler_OnCommandCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuGameOverHandler_OnCommandCellSetup) == 0x000008, "Wrong alignment on EndMenuGameOverHandler_OnCommandCellSetup");
static_assert(sizeof(EndMenuGameOverHandler_OnCommandCellSetup) == 0x000010, "Wrong size on EndMenuGameOverHandler_OnCommandCellSetup");
static_assert(offsetof(EndMenuGameOverHandler_OnCommandCellSetup, ItemWidget) == 0x000000, "Member 'EndMenuGameOverHandler_OnCommandCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMenuGameOverHandler_OnCommandCellSetup, ItemIndex) == 0x000008, "Member 'EndMenuGameOverHandler_OnCommandCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMenuGameOverHandler.OnCommandClicked
// 0x0004 (0x0004 - 0x0000)
struct EndMenuGameOverHandler_OnCommandClicked final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuGameOverHandler_OnCommandClicked) == 0x000004, "Wrong alignment on EndMenuGameOverHandler_OnCommandClicked");
static_assert(sizeof(EndMenuGameOverHandler_OnCommandClicked) == 0x000004, "Wrong size on EndMenuGameOverHandler_OnCommandClicked");
static_assert(offsetof(EndMenuGameOverHandler_OnCommandClicked, ItemIndex) == 0x000000, "Member 'EndMenuGameOverHandler_OnCommandClicked::ItemIndex' has a wrong offset!");

// Function EndGame.EndEquipInfoDetailMateria.OnMateriaMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipInfoDetailMateria_OnMateriaMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipInfoDetailMateria_OnMateriaMeasureItem) == 0x000004, "Wrong alignment on EndEquipInfoDetailMateria_OnMateriaMeasureItem");
static_assert(sizeof(EndEquipInfoDetailMateria_OnMateriaMeasureItem) == 0x00000C, "Wrong size on EndEquipInfoDetailMateria_OnMateriaMeasureItem");
static_assert(offsetof(EndEquipInfoDetailMateria_OnMateriaMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipInfoDetailMateria_OnMateriaMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipInfoDetailMateria_OnMateriaMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipInfoDetailMateria_OnMateriaMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipInfoDetailMateria.OnMateriaSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipInfoDetailMateria_OnMateriaSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipInfoDetailMateria_OnMateriaSetupItem) == 0x000008, "Wrong alignment on EndEquipInfoDetailMateria_OnMateriaSetupItem");
static_assert(sizeof(EndEquipInfoDetailMateria_OnMateriaSetupItem) == 0x000010, "Wrong size on EndEquipInfoDetailMateria_OnMateriaSetupItem");
static_assert(offsetof(EndEquipInfoDetailMateria_OnMateriaSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipInfoDetailMateria_OnMateriaSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipInfoDetailMateria_OnMateriaSetupItem, CellIndex) == 0x000008, "Member 'EndEquipInfoDetailMateria_OnMateriaSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipmentCell.UpdateEquipStatus
// 0x0010 (0x0010 - 0x0000)
struct EndEquipmentCell_UpdateEquipStatus final
{
public:
	int32                                         Attack;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Defense;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefense;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipmentCell_UpdateEquipStatus) == 0x000004, "Wrong alignment on EndEquipmentCell_UpdateEquipStatus");
static_assert(sizeof(EndEquipmentCell_UpdateEquipStatus) == 0x000010, "Wrong size on EndEquipmentCell_UpdateEquipStatus");
static_assert(offsetof(EndEquipmentCell_UpdateEquipStatus, Attack) == 0x000000, "Member 'EndEquipmentCell_UpdateEquipStatus::Attack' has a wrong offset!");
static_assert(offsetof(EndEquipmentCell_UpdateEquipStatus, Defense) == 0x000004, "Member 'EndEquipmentCell_UpdateEquipStatus::Defense' has a wrong offset!");
static_assert(offsetof(EndEquipmentCell_UpdateEquipStatus, MagicAttack) == 0x000008, "Member 'EndEquipmentCell_UpdateEquipStatus::MagicAttack' has a wrong offset!");
static_assert(offsetof(EndEquipmentCell_UpdateEquipStatus, MagicDefense) == 0x00000C, "Member 'EndEquipmentCell_UpdateEquipStatus::MagicDefense' has a wrong offset!");

// Function EndGame.EndEquipmentMateriaInfoWindow.OnCoreListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipmentMateriaInfoWindow_OnCoreListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipmentMateriaInfoWindow_OnCoreListSetupItem) == 0x000008, "Wrong alignment on EndEquipmentMateriaInfoWindow_OnCoreListSetupItem");
static_assert(sizeof(EndEquipmentMateriaInfoWindow_OnCoreListSetupItem) == 0x000010, "Wrong size on EndEquipmentMateriaInfoWindow_OnCoreListSetupItem");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnCoreListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipmentMateriaInfoWindow_OnCoreListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnCoreListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipmentMateriaInfoWindow_OnCoreListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipmentMateriaInfoWindow.OnMateriaInfoListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem) == 0x000008, "Wrong alignment on EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem");
static_assert(sizeof(EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem) == 0x000010, "Wrong size on EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipmentMateriaInfoWindow.OnMeasureInfoListSize
// 0x000C (0x000C - 0x0000)
struct EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize) == 0x000004, "Wrong alignment on EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize");
static_assert(sizeof(EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize) == 0x00000C, "Wrong size on EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize, CellIndex) == 0x000000, "Member 'EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize, ReturnValue) == 0x000004, "Member 'EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuMemberSelectBtn.OnChangeCharacterCell
// 0x0001 (0x0001 - 0x0000)
struct EndMenuMemberSelectBtn_OnChangeCharacterCell final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMemberSelectBtn_OnChangeCharacterCell) == 0x000001, "Wrong alignment on EndMenuMemberSelectBtn_OnChangeCharacterCell");
static_assert(sizeof(EndMenuMemberSelectBtn_OnChangeCharacterCell) == 0x000001, "Wrong size on EndMenuMemberSelectBtn_OnChangeCharacterCell");
static_assert(offsetof(EndMenuMemberSelectBtn_OnChangeCharacterCell, PlayerType) == 0x000000, "Member 'EndMenuMemberSelectBtn_OnChangeCharacterCell::PlayerType' has a wrong offset!");

// Function EndGame.EndMenuMemberSelectBtn.OnSetupCharacterCell
// 0x0001 (0x0001 - 0x0000)
struct EndMenuMemberSelectBtn_OnSetupCharacterCell final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMemberSelectBtn_OnSetupCharacterCell) == 0x000001, "Wrong alignment on EndMenuMemberSelectBtn_OnSetupCharacterCell");
static_assert(sizeof(EndMenuMemberSelectBtn_OnSetupCharacterCell) == 0x000001, "Wrong size on EndMenuMemberSelectBtn_OnSetupCharacterCell");
static_assert(offsetof(EndMenuMemberSelectBtn_OnSetupCharacterCell, PlayerType) == 0x000000, "Member 'EndMenuMemberSelectBtn_OnSetupCharacterCell::PlayerType' has a wrong offset!");

// Function EndGame.EndMenuMemberSelectBtn.OnSetupSelectBtn
// 0x0001 (0x0001 - 0x0000)
struct EndMenuMemberSelectBtn_OnSetupSelectBtn final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMemberSelectBtn_OnSetupSelectBtn) == 0x000001, "Wrong alignment on EndMenuMemberSelectBtn_OnSetupSelectBtn");
static_assert(sizeof(EndMenuMemberSelectBtn_OnSetupSelectBtn) == 0x000001, "Wrong size on EndMenuMemberSelectBtn_OnSetupSelectBtn");
static_assert(offsetof(EndMenuMemberSelectBtn_OnSetupSelectBtn, PlayerType) == 0x000000, "Member 'EndMenuMemberSelectBtn_OnSetupSelectBtn::PlayerType' has a wrong offset!");

// Function EndGame.EndFieldAPI.CallbackCreatePlayerActor
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_CallbackCreatePlayerActor final
{
public:
	class FName                                   partyActorName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_CallbackCreatePlayerActor) == 0x000008, "Wrong alignment on EndFieldAPI_CallbackCreatePlayerActor");
static_assert(sizeof(EndFieldAPI_CallbackCreatePlayerActor) == 0x000010, "Wrong size on EndFieldAPI_CallbackCreatePlayerActor");
static_assert(offsetof(EndFieldAPI_CallbackCreatePlayerActor, partyActorName) == 0x000000, "Member 'EndFieldAPI_CallbackCreatePlayerActor::partyActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_CallbackCreatePlayerActor, Actor) == 0x000008, "Member 'EndFieldAPI_CallbackCreatePlayerActor::Actor' has a wrong offset!");

// Function EndGame.EndFieldAPI.ChangeChapter
// 0x0018 (0x0018 - 0x0000)
struct EndFieldAPI_ChangeChapter final
{
public:
	class FName                                   ChapterID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   nextLocationRequestCurrentLocationId;              // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          selectChapter;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndChapterQuestResetType                     questResetType;                                    // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          debugReserve;                                      // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_ChangeChapter) == 0x000004, "Wrong alignment on EndFieldAPI_ChangeChapter");
static_assert(sizeof(EndFieldAPI_ChangeChapter) == 0x000018, "Wrong size on EndFieldAPI_ChangeChapter");
static_assert(offsetof(EndFieldAPI_ChangeChapter, ChapterID) == 0x000000, "Member 'EndFieldAPI_ChangeChapter::ChapterID' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_ChangeChapter, Debug) == 0x000008, "Member 'EndFieldAPI_ChangeChapter::Debug' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_ChangeChapter, nextLocationRequestCurrentLocationId) == 0x00000C, "Member 'EndFieldAPI_ChangeChapter::nextLocationRequestCurrentLocationId' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_ChangeChapter, selectChapter) == 0x000014, "Member 'EndFieldAPI_ChangeChapter::selectChapter' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_ChangeChapter, questResetType) == 0x000015, "Member 'EndFieldAPI_ChangeChapter::questResetType' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_ChangeChapter, debugReserve) == 0x000016, "Member 'EndFieldAPI_ChangeChapter::debugReserve' has a wrong offset!");

// Function EndGame.EndFieldAPI.CheckExclusion
// 0x0002 (0x0002 - 0x0000)
struct EndFieldAPI_CheckExclusion final
{
public:
	EndFieldExclusion                             enumValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_CheckExclusion) == 0x000001, "Wrong alignment on EndFieldAPI_CheckExclusion");
static_assert(sizeof(EndFieldAPI_CheckExclusion) == 0x000002, "Wrong size on EndFieldAPI_CheckExclusion");
static_assert(offsetof(EndFieldAPI_CheckExclusion, enumValue) == 0x000000, "Member 'EndFieldAPI_CheckExclusion::enumValue' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_CheckExclusion, ReturnValue) == 0x000001, "Member 'EndFieldAPI_CheckExclusion::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.ClearDebugFlag
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_ClearDebugFlag final
{
public:
	EEndDebugFlag                                 Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_ClearDebugFlag) == 0x000001, "Wrong alignment on EndFieldAPI_ClearDebugFlag");
static_assert(sizeof(EndFieldAPI_ClearDebugFlag) == 0x000001, "Wrong size on EndFieldAPI_ClearDebugFlag");
static_assert(offsetof(EndFieldAPI_ClearDebugFlag, Flag) == 0x000000, "Member 'EndFieldAPI_ClearDebugFlag::Flag' has a wrong offset!");

// Function EndGame.EndFieldAPI.EntryLocation
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_EntryLocation final
{
public:
	class FName                                   LocationName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_EntryLocation) == 0x000004, "Wrong alignment on EndFieldAPI_EntryLocation");
static_assert(sizeof(EndFieldAPI_EntryLocation) == 0x000008, "Wrong size on EndFieldAPI_EntryLocation");
static_assert(offsetof(EndFieldAPI_EntryLocation, LocationName) == 0x000000, "Member 'EndFieldAPI_EntryLocation::LocationName' has a wrong offset!");

// Function EndGame.EndFieldAPI.FieldAiLookAtTarget
// 0x0024 (0x0024 - 0x0000)
struct EndFieldAPI_FieldAiLookAtTarget final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtTargetActorName;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookAtTargetLocation;                              // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionDistance;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIgnoreLookAtDeactiveAngle;                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsLookAwayFromActor;                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_FieldAiLookAtTarget) == 0x000004, "Wrong alignment on EndFieldAPI_FieldAiLookAtTarget");
static_assert(sizeof(EndFieldAPI_FieldAiLookAtTarget) == 0x000024, "Wrong size on EndFieldAPI_FieldAiLookAtTarget");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, TargetActorName) == 0x000000, "Member 'EndFieldAPI_FieldAiLookAtTarget::TargetActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, LookAtTargetActorName) == 0x000008, "Member 'EndFieldAPI_FieldAiLookAtTarget::LookAtTargetActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, LookAtTargetLocation) == 0x000010, "Member 'EndFieldAPI_FieldAiLookAtTarget::LookAtTargetLocation' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, ReactionDistance) == 0x00001C, "Member 'EndFieldAPI_FieldAiLookAtTarget::ReactionDistance' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, InIgnoreLookAtDeactiveAngle) == 0x000020, "Member 'EndFieldAPI_FieldAiLookAtTarget::InIgnoreLookAtDeactiveAngle' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, InIsLookAwayFromActor) == 0x000021, "Member 'EndFieldAPI_FieldAiLookAtTarget::InIsLookAwayFromActor' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, ReturnValue) == 0x000022, "Member 'EndFieldAPI_FieldAiLookAtTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.FindEndTargetPoint
// 0x0040 (0x0040 - 0x0000)
struct EndFieldAPI_FindEndTargetPoint final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_FindEndTargetPoint) == 0x000010, "Wrong alignment on EndFieldAPI_FindEndTargetPoint");
static_assert(sizeof(EndFieldAPI_FindEndTargetPoint) == 0x000040, "Wrong size on EndFieldAPI_FindEndTargetPoint");
static_assert(offsetof(EndFieldAPI_FindEndTargetPoint, NodeName) == 0x000000, "Member 'EndFieldAPI_FindEndTargetPoint::NodeName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FindEndTargetPoint, ReturnValue) == 0x000010, "Member 'EndFieldAPI_FindEndTargetPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.GetActionReportInteger
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_GetActionReportInteger final
{
public:
	EEndActionReportType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_GetActionReportInteger) == 0x000004, "Wrong alignment on EndFieldAPI_GetActionReportInteger");
static_assert(sizeof(EndFieldAPI_GetActionReportInteger) == 0x000008, "Wrong size on EndFieldAPI_GetActionReportInteger");
static_assert(offsetof(EndFieldAPI_GetActionReportInteger, Type) == 0x000000, "Member 'EndFieldAPI_GetActionReportInteger::Type' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_GetActionReportInteger, ReturnValue) == 0x000004, "Member 'EndFieldAPI_GetActionReportInteger::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.GetEndTargetPointLocation
// 0x0014 (0x0014 - 0x0000)
struct EndFieldAPI_GetEndTargetPointLocation final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_GetEndTargetPointLocation) == 0x000004, "Wrong alignment on EndFieldAPI_GetEndTargetPointLocation");
static_assert(sizeof(EndFieldAPI_GetEndTargetPointLocation) == 0x000014, "Wrong size on EndFieldAPI_GetEndTargetPointLocation");
static_assert(offsetof(EndFieldAPI_GetEndTargetPointLocation, NodeName) == 0x000000, "Member 'EndFieldAPI_GetEndTargetPointLocation::NodeName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_GetEndTargetPointLocation, ReturnValue) == 0x000008, "Member 'EndFieldAPI_GetEndTargetPointLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.GetEndTargetPointTransform
// 0x0040 (0x0040 - 0x0000)
struct EndFieldAPI_GetEndTargetPointTransform final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_GetEndTargetPointTransform) == 0x000010, "Wrong alignment on EndFieldAPI_GetEndTargetPointTransform");
static_assert(sizeof(EndFieldAPI_GetEndTargetPointTransform) == 0x000040, "Wrong size on EndFieldAPI_GetEndTargetPointTransform");
static_assert(offsetof(EndFieldAPI_GetEndTargetPointTransform, NodeName) == 0x000000, "Member 'EndFieldAPI_GetEndTargetPointTransform::NodeName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_GetEndTargetPointTransform, ReturnValue) == 0x000010, "Member 'EndFieldAPI_GetEndTargetPointTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.GetTerritoryIdFromActorName
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_GetTerritoryIdFromActorName final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_GetTerritoryIdFromActorName) == 0x000004, "Wrong alignment on EndFieldAPI_GetTerritoryIdFromActorName");
static_assert(sizeof(EndFieldAPI_GetTerritoryIdFromActorName) == 0x000010, "Wrong size on EndFieldAPI_GetTerritoryIdFromActorName");
static_assert(offsetof(EndFieldAPI_GetTerritoryIdFromActorName, ActorName) == 0x000000, "Member 'EndFieldAPI_GetTerritoryIdFromActorName::ActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_GetTerritoryIdFromActorName, ReturnValue) == 0x000008, "Member 'EndFieldAPI_GetTerritoryIdFromActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.InvalidateTerritoryEncount
// 0x000C (0x000C - 0x0000)
struct EndFieldAPI_InvalidateTerritoryEncount final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Invalidate;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_InvalidateTerritoryEncount) == 0x000004, "Wrong alignment on EndFieldAPI_InvalidateTerritoryEncount");
static_assert(sizeof(EndFieldAPI_InvalidateTerritoryEncount) == 0x00000C, "Wrong size on EndFieldAPI_InvalidateTerritoryEncount");
static_assert(offsetof(EndFieldAPI_InvalidateTerritoryEncount, territoryID) == 0x000000, "Member 'EndFieldAPI_InvalidateTerritoryEncount::territoryID' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_InvalidateTerritoryEncount, Invalidate) == 0x000008, "Member 'EndFieldAPI_InvalidateTerritoryEncount::Invalidate' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_InvalidateTerritoryEncount, ReturnValue) == 0x000009, "Member 'EndFieldAPI_InvalidateTerritoryEncount::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsCharacterInsideAnyBattleArea
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_IsCharacterInsideAnyBattleArea final
{
public:
	const class AActor*                           Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_IsCharacterInsideAnyBattleArea) == 0x000008, "Wrong alignment on EndFieldAPI_IsCharacterInsideAnyBattleArea");
static_assert(sizeof(EndFieldAPI_IsCharacterInsideAnyBattleArea) == 0x000010, "Wrong size on EndFieldAPI_IsCharacterInsideAnyBattleArea");
static_assert(offsetof(EndFieldAPI_IsCharacterInsideAnyBattleArea, Character) == 0x000000, "Member 'EndFieldAPI_IsCharacterInsideAnyBattleArea::Character' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_IsCharacterInsideAnyBattleArea, ReturnValue) == 0x000008, "Member 'EndFieldAPI_IsCharacterInsideAnyBattleArea::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsDuringBattle
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsDuringBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsDuringBattle) == 0x000001, "Wrong alignment on EndFieldAPI_IsDuringBattle");
static_assert(sizeof(EndFieldAPI_IsDuringBattle) == 0x000001, "Wrong size on EndFieldAPI_IsDuringBattle");
static_assert(offsetof(EndFieldAPI_IsDuringBattle, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsDuringBattle::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEnableFieldControler
// 0x0002 (0x0002 - 0x0000)
struct EndFieldAPI_IsEnableFieldControler final
{
public:
	bool                                          bEncount;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsEnableFieldControler) == 0x000001, "Wrong alignment on EndFieldAPI_IsEnableFieldControler");
static_assert(sizeof(EndFieldAPI_IsEnableFieldControler) == 0x000002, "Wrong size on EndFieldAPI_IsEnableFieldControler");
static_assert(offsetof(EndFieldAPI_IsEnableFieldControler, bEncount) == 0x000000, "Member 'EndFieldAPI_IsEnableFieldControler::bEncount' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_IsEnableFieldControler, ReturnValue) == 0x000001, "Member 'EndFieldAPI_IsEnableFieldControler::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEnableFieldFullScreenMainMenu
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsEnableFieldFullScreenMainMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsEnableFieldFullScreenMainMenu) == 0x000001, "Wrong alignment on EndFieldAPI_IsEnableFieldFullScreenMainMenu");
static_assert(sizeof(EndFieldAPI_IsEnableFieldFullScreenMainMenu) == 0x000001, "Wrong size on EndFieldAPI_IsEnableFieldFullScreenMainMenu");
static_assert(offsetof(EndFieldAPI_IsEnableFieldFullScreenMainMenu, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsEnableFieldFullScreenMainMenu::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEnableSkipPauseMenu
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsEnableSkipPauseMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsEnableSkipPauseMenu) == 0x000001, "Wrong alignment on EndFieldAPI_IsEnableSkipPauseMenu");
static_assert(sizeof(EndFieldAPI_IsEnableSkipPauseMenu) == 0x000001, "Wrong size on EndFieldAPI_IsEnableSkipPauseMenu");
static_assert(offsetof(EndFieldAPI_IsEnableSkipPauseMenu, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsEnableSkipPauseMenu::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEnableUpdateBattleParameter
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsEnableUpdateBattleParameter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsEnableUpdateBattleParameter) == 0x000001, "Wrong alignment on EndFieldAPI_IsEnableUpdateBattleParameter");
static_assert(sizeof(EndFieldAPI_IsEnableUpdateBattleParameter) == 0x000001, "Wrong size on EndFieldAPI_IsEnableUpdateBattleParameter");
static_assert(offsetof(EndFieldAPI_IsEnableUpdateBattleParameter, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsEnableUpdateBattleParameter::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEscaping
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsEscaping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsEscaping) == 0x000001, "Wrong alignment on EndFieldAPI_IsEscaping");
static_assert(sizeof(EndFieldAPI_IsEscaping) == 0x000001, "Wrong size on EndFieldAPI_IsEscaping");
static_assert(offsetof(EndFieldAPI_IsEscaping, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsEscaping::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsPreloadedWaveReinforcementLoaded
// 0x0014 (0x0014 - 0x0000)
struct EndFieldAPI_IsPreloadedWaveReinforcementLoaded final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   reinforcementActorName;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_IsPreloadedWaveReinforcementLoaded) == 0x000004, "Wrong alignment on EndFieldAPI_IsPreloadedWaveReinforcementLoaded");
static_assert(sizeof(EndFieldAPI_IsPreloadedWaveReinforcementLoaded) == 0x000014, "Wrong size on EndFieldAPI_IsPreloadedWaveReinforcementLoaded");
static_assert(offsetof(EndFieldAPI_IsPreloadedWaveReinforcementLoaded, territoryID) == 0x000000, "Member 'EndFieldAPI_IsPreloadedWaveReinforcementLoaded::territoryID' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_IsPreloadedWaveReinforcementLoaded, reinforcementActorName) == 0x000008, "Member 'EndFieldAPI_IsPreloadedWaveReinforcementLoaded::reinforcementActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_IsPreloadedWaveReinforcementLoaded, ReturnValue) == 0x000010, "Member 'EndFieldAPI_IsPreloadedWaveReinforcementLoaded::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsStable
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsStable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsStable) == 0x000001, "Wrong alignment on EndFieldAPI_IsStable");
static_assert(sizeof(EndFieldAPI_IsStable) == 0x000001, "Wrong size on EndFieldAPI_IsStable");
static_assert(offsetof(EndFieldAPI_IsStable, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsStable::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsWaveCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_IsWaveCharacter final
{
public:
	class AEndCharacter*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_IsWaveCharacter) == 0x000008, "Wrong alignment on EndFieldAPI_IsWaveCharacter");
static_assert(sizeof(EndFieldAPI_IsWaveCharacter) == 0x000010, "Wrong size on EndFieldAPI_IsWaveCharacter");
static_assert(offsetof(EndFieldAPI_IsWaveCharacter, Chara) == 0x000000, "Member 'EndFieldAPI_IsWaveCharacter::Chara' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_IsWaveCharacter, ReturnValue) == 0x000008, "Member 'EndFieldAPI_IsWaveCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.PlayBGM
// 0x0018 (0x0018 - 0x0000)
struct EndFieldAPI_PlayBGM final
{
public:
	EndFieldBGMLayer                              Layer;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BGM;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeStartTime;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeEndTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CrossFade;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_PlayBGM) == 0x000004, "Wrong alignment on EndFieldAPI_PlayBGM");
static_assert(sizeof(EndFieldAPI_PlayBGM) == 0x000018, "Wrong size on EndFieldAPI_PlayBGM");
static_assert(offsetof(EndFieldAPI_PlayBGM, Layer) == 0x000000, "Member 'EndFieldAPI_PlayBGM::Layer' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_PlayBGM, BGM) == 0x000004, "Member 'EndFieldAPI_PlayBGM::BGM' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_PlayBGM, fadeStartTime) == 0x00000C, "Member 'EndFieldAPI_PlayBGM::fadeStartTime' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_PlayBGM, fadeEndTime) == 0x000010, "Member 'EndFieldAPI_PlayBGM::fadeEndTime' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_PlayBGM, CrossFade) == 0x000014, "Member 'EndFieldAPI_PlayBGM::CrossFade' has a wrong offset!");

// Function EndGame.EndFieldAPI.RefreshCacheBGM
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_RefreshCacheBGM final
{
public:
	class FString                                 cacheBGM;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_RefreshCacheBGM) == 0x000008, "Wrong alignment on EndFieldAPI_RefreshCacheBGM");
static_assert(sizeof(EndFieldAPI_RefreshCacheBGM) == 0x000010, "Wrong size on EndFieldAPI_RefreshCacheBGM");
static_assert(offsetof(EndFieldAPI_RefreshCacheBGM, cacheBGM) == 0x000000, "Member 'EndFieldAPI_RefreshCacheBGM::cacheBGM' has a wrong offset!");

// Function EndGame.EndFieldAPI.RequestDestroyEnemyInTerritory
// 0x0014 (0x0014 - 0x0000)
struct EndFieldAPI_RequestDestroyEnemyInTerritory final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          setAsDead;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_RequestDestroyEnemyInTerritory) == 0x000004, "Wrong alignment on EndFieldAPI_RequestDestroyEnemyInTerritory");
static_assert(sizeof(EndFieldAPI_RequestDestroyEnemyInTerritory) == 0x000014, "Wrong size on EndFieldAPI_RequestDestroyEnemyInTerritory");
static_assert(offsetof(EndFieldAPI_RequestDestroyEnemyInTerritory, territoryID) == 0x000000, "Member 'EndFieldAPI_RequestDestroyEnemyInTerritory::territoryID' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_RequestDestroyEnemyInTerritory, ActorName) == 0x000008, "Member 'EndFieldAPI_RequestDestroyEnemyInTerritory::ActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_RequestDestroyEnemyInTerritory, setAsDead) == 0x000010, "Member 'EndFieldAPI_RequestDestroyEnemyInTerritory::setAsDead' has a wrong offset!");

// Function EndGame.EndFieldAPI.RequestFinishUnusedWaveEnemiesFromTerritory
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_RequestFinishUnusedWaveEnemiesFromTerritory final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_RequestFinishUnusedWaveEnemiesFromTerritory) == 0x000004, "Wrong alignment on EndFieldAPI_RequestFinishUnusedWaveEnemiesFromTerritory");
static_assert(sizeof(EndFieldAPI_RequestFinishUnusedWaveEnemiesFromTerritory) == 0x000008, "Wrong size on EndFieldAPI_RequestFinishUnusedWaveEnemiesFromTerritory");
static_assert(offsetof(EndFieldAPI_RequestFinishUnusedWaveEnemiesFromTerritory, territoryID) == 0x000000, "Member 'EndFieldAPI_RequestFinishUnusedWaveEnemiesFromTerritory::territoryID' has a wrong offset!");

// Function EndGame.EndFieldAPI.ResetFieldAiLookAtTarget
// 0x000C (0x000C - 0x0000)
struct EndFieldAPI_ResetFieldAiLookAtTarget final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_ResetFieldAiLookAtTarget) == 0x000004, "Wrong alignment on EndFieldAPI_ResetFieldAiLookAtTarget");
static_assert(sizeof(EndFieldAPI_ResetFieldAiLookAtTarget) == 0x00000C, "Wrong size on EndFieldAPI_ResetFieldAiLookAtTarget");
static_assert(offsetof(EndFieldAPI_ResetFieldAiLookAtTarget, TargetActorName) == 0x000000, "Member 'EndFieldAPI_ResetFieldAiLookAtTarget::TargetActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_ResetFieldAiLookAtTarget, ReturnValue) == 0x000008, "Member 'EndFieldAPI_ResetFieldAiLookAtTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.SendPlannerEventTrigger
// 0x0018 (0x0018 - 0x0000)
struct EndFieldAPI_SendPlannerEventTrigger final
{
public:
	class FName                                   PlannerEventId;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TriggerID;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SendPlannerEventTrigger) == 0x000008, "Wrong alignment on EndFieldAPI_SendPlannerEventTrigger");
static_assert(sizeof(EndFieldAPI_SendPlannerEventTrigger) == 0x000018, "Wrong size on EndFieldAPI_SendPlannerEventTrigger");
static_assert(offsetof(EndFieldAPI_SendPlannerEventTrigger, PlannerEventId) == 0x000000, "Member 'EndFieldAPI_SendPlannerEventTrigger::PlannerEventId' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_SendPlannerEventTrigger, TriggerID) == 0x000008, "Member 'EndFieldAPI_SendPlannerEventTrigger::TriggerID' has a wrong offset!");

// Function EndGame.EndFieldAPI.SendStateTrigger
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_SendStateTrigger final
{
public:
	class FString                                 StateTriggerName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SendStateTrigger) == 0x000008, "Wrong alignment on EndFieldAPI_SendStateTrigger");
static_assert(sizeof(EndFieldAPI_SendStateTrigger) == 0x000010, "Wrong size on EndFieldAPI_SendStateTrigger");
static_assert(offsetof(EndFieldAPI_SendStateTrigger, StateTriggerName) == 0x000000, "Member 'EndFieldAPI_SendStateTrigger::StateTriggerName' has a wrong offset!");

// Function EndGame.EndFieldAPI.SendStateTriggerByName
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_SendStateTriggerByName final
{
public:
	class FName                                   StateTriggerName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SendStateTriggerByName) == 0x000004, "Wrong alignment on EndFieldAPI_SendStateTriggerByName");
static_assert(sizeof(EndFieldAPI_SendStateTriggerByName) == 0x000008, "Wrong size on EndFieldAPI_SendStateTriggerByName");
static_assert(offsetof(EndFieldAPI_SendStateTriggerByName, StateTriggerName) == 0x000000, "Member 'EndFieldAPI_SendStateTriggerByName::StateTriggerName' has a wrong offset!");

// Function EndGame.EndFieldAPI.SendStateTriggerDelay
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_SendStateTriggerDelay final
{
public:
	class FName                                   StateTriggerName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SendStateTriggerDelay) == 0x000004, "Wrong alignment on EndFieldAPI_SendStateTriggerDelay");
static_assert(sizeof(EndFieldAPI_SendStateTriggerDelay) == 0x000008, "Wrong size on EndFieldAPI_SendStateTriggerDelay");
static_assert(offsetof(EndFieldAPI_SendStateTriggerDelay, StateTriggerName) == 0x000000, "Member 'EndFieldAPI_SendStateTriggerDelay::StateTriggerName' has a wrong offset!");

// Function EndGame.EndFieldAPI.SendStateTriggerDirect
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_SendStateTriggerDirect final
{
public:
	class FString                                 StateTriggerName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SendStateTriggerDirect) == 0x000008, "Wrong alignment on EndFieldAPI_SendStateTriggerDirect");
static_assert(sizeof(EndFieldAPI_SendStateTriggerDirect) == 0x000010, "Wrong size on EndFieldAPI_SendStateTriggerDirect");
static_assert(offsetof(EndFieldAPI_SendStateTriggerDirect, StateTriggerName) == 0x000000, "Member 'EndFieldAPI_SendStateTriggerDirect::StateTriggerName' has a wrong offset!");

// Function EndGame.EndFieldAPI.SetDebugFlag
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_SetDebugFlag final
{
public:
	EEndDebugFlag                                 Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SetDebugFlag) == 0x000001, "Wrong alignment on EndFieldAPI_SetDebugFlag");
static_assert(sizeof(EndFieldAPI_SetDebugFlag) == 0x000001, "Wrong size on EndFieldAPI_SetDebugFlag");
static_assert(offsetof(EndFieldAPI_SetDebugFlag, Flag) == 0x000000, "Member 'EndFieldAPI_SetDebugFlag::Flag' has a wrong offset!");

// Function EndGame.EndFieldAPI.SetExecSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct EndFieldAPI_SetExecSlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SetExecSlotIndex) == 0x000004, "Wrong alignment on EndFieldAPI_SetExecSlotIndex");
static_assert(sizeof(EndFieldAPI_SetExecSlotIndex) == 0x000004, "Wrong size on EndFieldAPI_SetExecSlotIndex");
static_assert(offsetof(EndFieldAPI_SetExecSlotIndex, SlotIndex) == 0x000000, "Member 'EndFieldAPI_SetExecSlotIndex::SlotIndex' has a wrong offset!");

// Function EndGame.EndFieldAPI.SetTruthLocationName
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_SetTruthLocationName final
{
public:
	class FName                                   truthLocationName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SetTruthLocationName) == 0x000004, "Wrong alignment on EndFieldAPI_SetTruthLocationName");
static_assert(sizeof(EndFieldAPI_SetTruthLocationName) == 0x000008, "Wrong size on EndFieldAPI_SetTruthLocationName");
static_assert(offsetof(EndFieldAPI_SetTruthLocationName, truthLocationName) == 0x000000, "Member 'EndFieldAPI_SetTruthLocationName::truthLocationName' has a wrong offset!");

// Function EndGame.EndFieldAPI.ShowPreloadedWaveReinforcement
// 0x0040 (0x0040 - 0x0000)
struct EndFieldAPI_ShowPreloadedWaveReinforcement final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   reinforcementActorName;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             reinforcementStartPoint;                           // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_ShowPreloadedWaveReinforcement) == 0x000010, "Wrong alignment on EndFieldAPI_ShowPreloadedWaveReinforcement");
static_assert(sizeof(EndFieldAPI_ShowPreloadedWaveReinforcement) == 0x000040, "Wrong size on EndFieldAPI_ShowPreloadedWaveReinforcement");
static_assert(offsetof(EndFieldAPI_ShowPreloadedWaveReinforcement, territoryID) == 0x000000, "Member 'EndFieldAPI_ShowPreloadedWaveReinforcement::territoryID' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_ShowPreloadedWaveReinforcement, reinforcementActorName) == 0x000008, "Member 'EndFieldAPI_ShowPreloadedWaveReinforcement::reinforcementActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_ShowPreloadedWaveReinforcement, reinforcementStartPoint) == 0x000010, "Member 'EndFieldAPI_ShowPreloadedWaveReinforcement::reinforcementStartPoint' has a wrong offset!");

// Function EndGame.EndFieldAPI.StartReinforcementsWave
// 0x0030 (0x0030 - 0x0000)
struct EndFieldAPI_StartReinforcementsWave final
{
public:
	class FName                                   territoryID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEnemyTerritoryWaveType                    Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEnemyTerritoryWavePopSettingOverwrite     overwritePopSettings;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntegerArgument00;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument01;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument02;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument03;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_StartReinforcementsWave) == 0x000008, "Wrong alignment on EndFieldAPI_StartReinforcementsWave");
static_assert(sizeof(EndFieldAPI_StartReinforcementsWave) == 0x000030, "Wrong size on EndFieldAPI_StartReinforcementsWave");
static_assert(offsetof(EndFieldAPI_StartReinforcementsWave, territoryID) == 0x000000, "Member 'EndFieldAPI_StartReinforcementsWave::territoryID' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartReinforcementsWave, Type) == 0x000008, "Member 'EndFieldAPI_StartReinforcementsWave::Type' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartReinforcementsWave, overwritePopSettings) == 0x000009, "Member 'EndFieldAPI_StartReinforcementsWave::overwritePopSettings' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartReinforcementsWave, IntegerArgument00) == 0x00000C, "Member 'EndFieldAPI_StartReinforcementsWave::IntegerArgument00' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartReinforcementsWave, IntegerArgument01) == 0x000010, "Member 'EndFieldAPI_StartReinforcementsWave::IntegerArgument01' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartReinforcementsWave, IntegerArgument02) == 0x000014, "Member 'EndFieldAPI_StartReinforcementsWave::IntegerArgument02' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartReinforcementsWave, IntegerArgument03) == 0x000018, "Member 'EndFieldAPI_StartReinforcementsWave::IntegerArgument03' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartReinforcementsWave, ReturnValue) == 0x000020, "Member 'EndFieldAPI_StartReinforcementsWave::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.WaitStable
// 0x0020 (0x0020 - 0x0000)
struct EndFieldAPI_WaitStable final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_WaitStable) == 0x000008, "Wrong alignment on EndFieldAPI_WaitStable");
static_assert(sizeof(EndFieldAPI_WaitStable) == 0x000020, "Wrong size on EndFieldAPI_WaitStable");
static_assert(offsetof(EndFieldAPI_WaitStable, WorldContextObject) == 0x000000, "Member 'EndFieldAPI_WaitStable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_WaitStable, LatentInfo) == 0x000008, "Member 'EndFieldAPI_WaitStable::LatentInfo' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnArmorMateriaMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipWindow_OnArmorMateriaMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnArmorMateriaMeasureItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnArmorMateriaMeasureItem");
static_assert(sizeof(EndEquipWindow_OnArmorMateriaMeasureItem) == 0x00000C, "Wrong size on EndEquipWindow_OnArmorMateriaMeasureItem");
static_assert(offsetof(EndEquipWindow_OnArmorMateriaMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnArmorMateriaMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnArmorMateriaMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipWindow_OnArmorMateriaMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnArmorMateriaPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnArmorMateriaPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnArmorMateriaPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnArmorMateriaPressedItem");
static_assert(sizeof(EndEquipWindow_OnArmorMateriaPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnArmorMateriaPressedItem");
static_assert(offsetof(EndEquipWindow_OnArmorMateriaPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnArmorMateriaPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnArmorMateriaSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnArmorMateriaSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnArmorMateriaSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnArmorMateriaSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnArmorMateriaSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnArmorMateriaSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnArmorMateriaSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnArmorMateriaSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnArmorMateriaSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnArmorMateriaSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnArmorMateriaSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnArmorMateriaSetupItem");
static_assert(sizeof(EndEquipWindow_OnArmorMateriaSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnArmorMateriaSetupItem");
static_assert(offsetof(EndEquipWindow_OnArmorMateriaSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnArmorMateriaSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnArmorMateriaSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnArmorMateriaSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnAutoSettingMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipWindow_OnAutoSettingMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnAutoSettingMeasureItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnAutoSettingMeasureItem");
static_assert(sizeof(EndEquipWindow_OnAutoSettingMeasureItem) == 0x00000C, "Wrong size on EndEquipWindow_OnAutoSettingMeasureItem");
static_assert(offsetof(EndEquipWindow_OnAutoSettingMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnAutoSettingMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnAutoSettingMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipWindow_OnAutoSettingMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnAutoSettingPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnAutoSettingPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnAutoSettingPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnAutoSettingPressedItem");
static_assert(sizeof(EndEquipWindow_OnAutoSettingPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnAutoSettingPressedItem");
static_assert(offsetof(EndEquipWindow_OnAutoSettingPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnAutoSettingPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnAutoSettingSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnAutoSettingSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnAutoSettingSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnAutoSettingSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnAutoSettingSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnAutoSettingSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnAutoSettingSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnAutoSettingSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnAutoSettingSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnAutoSettingSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnAutoSettingSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnAutoSettingSetupItem");
static_assert(sizeof(EndEquipWindow_OnAutoSettingSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnAutoSettingSetupItem");
static_assert(offsetof(EndEquipWindow_OnAutoSettingSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnAutoSettingSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnAutoSettingSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnAutoSettingSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEditListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipWindow_OnEditListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnEditListMeasureItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnEditListMeasureItem");
static_assert(sizeof(EndEquipWindow_OnEditListMeasureItem) == 0x00000C, "Wrong size on EndEquipWindow_OnEditListMeasureItem");
static_assert(offsetof(EndEquipWindow_OnEditListMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnEditListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnEditListMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipWindow_OnEditListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEditListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnEditListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnEditListPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnEditListPressedItem");
static_assert(sizeof(EndEquipWindow_OnEditListPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnEditListPressedItem");
static_assert(offsetof(EndEquipWindow_OnEditListPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnEditListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEditListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnEditListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnEditListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnEditListSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnEditListSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnEditListSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnEditListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnEditListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEditListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnEditListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnEditListSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnEditListSetupItem");
static_assert(sizeof(EndEquipWindow_OnEditListSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnEditListSetupItem");
static_assert(offsetof(EndEquipWindow_OnEditListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnEditListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnEditListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnEditListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEquipCategoryMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipWindow_OnEquipCategoryMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnEquipCategoryMeasureItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnEquipCategoryMeasureItem");
static_assert(sizeof(EndEquipWindow_OnEquipCategoryMeasureItem) == 0x00000C, "Wrong size on EndEquipWindow_OnEquipCategoryMeasureItem");
static_assert(offsetof(EndEquipWindow_OnEquipCategoryMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnEquipCategoryMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnEquipCategoryMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipWindow_OnEquipCategoryMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEquipCategoryPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnEquipCategoryPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnEquipCategoryPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnEquipCategoryPressedItem");
static_assert(sizeof(EndEquipWindow_OnEquipCategoryPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnEquipCategoryPressedItem");
static_assert(offsetof(EndEquipWindow_OnEquipCategoryPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnEquipCategoryPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEquipCategorySelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnEquipCategorySelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnEquipCategorySelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnEquipCategorySelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnEquipCategorySelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnEquipCategorySelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnEquipCategorySelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnEquipCategorySelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEquipCategorySetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnEquipCategorySetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnEquipCategorySetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnEquipCategorySetupItem");
static_assert(sizeof(EndEquipWindow_OnEquipCategorySetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnEquipCategorySetupItem");
static_assert(offsetof(EndEquipWindow_OnEquipCategorySetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnEquipCategorySetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnEquipCategorySetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnEquipCategorySetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEquipIdListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipWindow_OnEquipIdListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnEquipIdListMeasureItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnEquipIdListMeasureItem");
static_assert(sizeof(EndEquipWindow_OnEquipIdListMeasureItem) == 0x00000C, "Wrong size on EndEquipWindow_OnEquipIdListMeasureItem");
static_assert(offsetof(EndEquipWindow_OnEquipIdListMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnEquipIdListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnEquipIdListMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipWindow_OnEquipIdListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEquipIdListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnEquipIdListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnEquipIdListPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnEquipIdListPressedItem");
static_assert(sizeof(EndEquipWindow_OnEquipIdListPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnEquipIdListPressedItem");
static_assert(offsetof(EndEquipWindow_OnEquipIdListPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnEquipIdListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEquipIdListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnEquipIdListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnEquipIdListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnEquipIdListSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnEquipIdListSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnEquipIdListSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnEquipIdListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnEquipIdListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnEquipIdListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnEquipIdListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnEquipIdListSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnEquipIdListSetupItem");
static_assert(sizeof(EndEquipWindow_OnEquipIdListSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnEquipIdListSetupItem");
static_assert(offsetof(EndEquipWindow_OnEquipIdListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnEquipIdListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnEquipIdListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnEquipIdListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMateriaEditCategoryListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipWindow_OnMateriaEditCategoryListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnMateriaEditCategoryListMeasureItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnMateriaEditCategoryListMeasureItem");
static_assert(sizeof(EndEquipWindow_OnMateriaEditCategoryListMeasureItem) == 0x00000C, "Wrong size on EndEquipWindow_OnMateriaEditCategoryListMeasureItem");
static_assert(offsetof(EndEquipWindow_OnMateriaEditCategoryListMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnMateriaEditCategoryListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnMateriaEditCategoryListMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipWindow_OnMateriaEditCategoryListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMateriaEditCategoryListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnMateriaEditCategoryListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnMateriaEditCategoryListPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnMateriaEditCategoryListPressedItem");
static_assert(sizeof(EndEquipWindow_OnMateriaEditCategoryListPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnMateriaEditCategoryListPressedItem");
static_assert(offsetof(EndEquipWindow_OnMateriaEditCategoryListPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnMateriaEditCategoryListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMateriaEditCategoryListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnMateriaEditCategoryListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnMateriaEditCategoryListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnMateriaEditCategoryListSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnMateriaEditCategoryListSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnMateriaEditCategoryListSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnMateriaEditCategoryListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnMateriaEditCategoryListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMateriaEditCategoryListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnMateriaEditCategoryListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnMateriaEditCategoryListSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnMateriaEditCategoryListSetupItem");
static_assert(sizeof(EndEquipWindow_OnMateriaEditCategoryListSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnMateriaEditCategoryListSetupItem");
static_assert(offsetof(EndEquipWindow_OnMateriaEditCategoryListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnMateriaEditCategoryListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnMateriaEditCategoryListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnMateriaEditCategoryListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMateriaEditListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnMateriaEditListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnMateriaEditListPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnMateriaEditListPressedItem");
static_assert(sizeof(EndEquipWindow_OnMateriaEditListPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnMateriaEditListPressedItem");
static_assert(offsetof(EndEquipWindow_OnMateriaEditListPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnMateriaEditListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMateriaEditListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnMateriaEditListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnMateriaEditListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnMateriaEditListSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnMateriaEditListSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnMateriaEditListSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnMateriaEditListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnMateriaEditListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMateriaEditListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnMateriaEditListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnMateriaEditListSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnMateriaEditListSetupItem");
static_assert(sizeof(EndEquipWindow_OnMateriaEditListSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnMateriaEditListSetupItem");
static_assert(offsetof(EndEquipWindow_OnMateriaEditListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnMateriaEditListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnMateriaEditListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnMateriaEditListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMemberListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipWindow_OnMemberListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnMemberListMeasureItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnMemberListMeasureItem");
static_assert(sizeof(EndEquipWindow_OnMemberListMeasureItem) == 0x00000C, "Wrong size on EndEquipWindow_OnMemberListMeasureItem");
static_assert(offsetof(EndEquipWindow_OnMemberListMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnMemberListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnMemberListMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipWindow_OnMemberListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMemberListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnMemberListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnMemberListPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnMemberListPressedItem");
static_assert(sizeof(EndEquipWindow_OnMemberListPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnMemberListPressedItem");
static_assert(offsetof(EndEquipWindow_OnMemberListPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnMemberListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMemberListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnMemberListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnMemberListSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnMemberListSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnMemberListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnMemberListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnMemberListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnMemberListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnMemberListSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnMemberListSetupItem");
static_assert(sizeof(EndEquipWindow_OnMemberListSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnMemberListSetupItem");
static_assert(offsetof(EndEquipWindow_OnMemberListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnMemberListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnMemberListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnMemberListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnSortListPressedItem");
static_assert(sizeof(EndEquipWindow_OnSortListPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnSortListPressedItem");
static_assert(offsetof(EndEquipWindow_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnSummonMateriaEditListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnSummonMateriaEditListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnSummonMateriaEditListPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnSummonMateriaEditListPressedItem");
static_assert(sizeof(EndEquipWindow_OnSummonMateriaEditListPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnSummonMateriaEditListPressedItem");
static_assert(offsetof(EndEquipWindow_OnSummonMateriaEditListPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnSummonMateriaEditListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnSummonMateriaEditListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnSummonMateriaEditListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnSummonMateriaEditListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnSummonMateriaEditListSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnSummonMateriaEditListSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnSummonMateriaEditListSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnSummonMateriaEditListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnSummonMateriaEditListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnSummonMateriaEditListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnSummonMateriaEditListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnSummonMateriaEditListSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnSummonMateriaEditListSetupItem");
static_assert(sizeof(EndEquipWindow_OnSummonMateriaEditListSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnSummonMateriaEditListSetupItem");
static_assert(offsetof(EndEquipWindow_OnSummonMateriaEditListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnSummonMateriaEditListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnSummonMateriaEditListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnSummonMateriaEditListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCoreEditListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnWeaponCoreEditListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponCoreEditListPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponCoreEditListPressedItem");
static_assert(sizeof(EndEquipWindow_OnWeaponCoreEditListPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnWeaponCoreEditListPressedItem");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreEditListPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponCoreEditListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCoreEditListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnWeaponCoreEditListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponCoreEditListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponCoreEditListSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnWeaponCoreEditListSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnWeaponCoreEditListSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreEditListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponCoreEditListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCoreEditListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnWeaponCoreEditListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnWeaponCoreEditListSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnWeaponCoreEditListSetupItem");
static_assert(sizeof(EndEquipWindow_OnWeaponCoreEditListSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnWeaponCoreEditListSetupItem");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreEditListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnWeaponCoreEditListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreEditListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnWeaponCoreEditListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCoreMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipWindow_OnWeaponCoreMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponCoreMeasureItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponCoreMeasureItem");
static_assert(sizeof(EndEquipWindow_OnWeaponCoreMeasureItem) == 0x00000C, "Wrong size on EndEquipWindow_OnWeaponCoreMeasureItem");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponCoreMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipWindow_OnWeaponCoreMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCorePressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnWeaponCorePressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponCorePressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponCorePressedItem");
static_assert(sizeof(EndEquipWindow_OnWeaponCorePressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnWeaponCorePressedItem");
static_assert(offsetof(EndEquipWindow_OnWeaponCorePressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponCorePressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCoreSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnWeaponCoreSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponCoreSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponCoreSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnWeaponCoreSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnWeaponCoreSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponCoreSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCoreSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnWeaponCoreSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnWeaponCoreSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnWeaponCoreSetupItem");
static_assert(sizeof(EndEquipWindow_OnWeaponCoreSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnWeaponCoreSetupItem");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnWeaponCoreSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnWeaponCoreSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCoreSkillInfoListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipWindow_OnWeaponCoreSkillInfoListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponCoreSkillInfoListMeasureItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponCoreSkillInfoListMeasureItem");
static_assert(sizeof(EndEquipWindow_OnWeaponCoreSkillInfoListMeasureItem) == 0x00000C, "Wrong size on EndEquipWindow_OnWeaponCoreSkillInfoListMeasureItem");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreSkillInfoListMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponCoreSkillInfoListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreSkillInfoListMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipWindow_OnWeaponCoreSkillInfoListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCoreSkillInfoListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnWeaponCoreSkillInfoListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponCoreSkillInfoListPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponCoreSkillInfoListPressedItem");
static_assert(sizeof(EndEquipWindow_OnWeaponCoreSkillInfoListPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnWeaponCoreSkillInfoListPressedItem");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreSkillInfoListPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponCoreSkillInfoListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCoreSkillInfoListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnWeaponCoreSkillInfoListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponCoreSkillInfoListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponCoreSkillInfoListSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnWeaponCoreSkillInfoListSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnWeaponCoreSkillInfoListSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreSkillInfoListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponCoreSkillInfoListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponCoreSkillInfoListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnWeaponCoreSkillInfoListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnWeaponCoreSkillInfoListSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnWeaponCoreSkillInfoListSetupItem");
static_assert(sizeof(EndEquipWindow_OnWeaponCoreSkillInfoListSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnWeaponCoreSkillInfoListSetupItem");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreSkillInfoListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnWeaponCoreSkillInfoListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnWeaponCoreSkillInfoListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnWeaponCoreSkillInfoListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponMateriaMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEquipWindow_OnWeaponMateriaMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponMateriaMeasureItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponMateriaMeasureItem");
static_assert(sizeof(EndEquipWindow_OnWeaponMateriaMeasureItem) == 0x00000C, "Wrong size on EndEquipWindow_OnWeaponMateriaMeasureItem");
static_assert(offsetof(EndEquipWindow_OnWeaponMateriaMeasureItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponMateriaMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnWeaponMateriaMeasureItem, ReturnValue) == 0x000004, "Member 'EndEquipWindow_OnWeaponMateriaMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponMateriaPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnWeaponMateriaPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponMateriaPressedItem) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponMateriaPressedItem");
static_assert(sizeof(EndEquipWindow_OnWeaponMateriaPressedItem) == 0x000004, "Wrong size on EndEquipWindow_OnWeaponMateriaPressedItem");
static_assert(offsetof(EndEquipWindow_OnWeaponMateriaPressedItem, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponMateriaPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponMateriaSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEquipWindow_OnWeaponMateriaSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipWindow_OnWeaponMateriaSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEquipWindow_OnWeaponMateriaSelectedIndexChanged");
static_assert(sizeof(EndEquipWindow_OnWeaponMateriaSelectedIndexChanged) == 0x000004, "Wrong size on EndEquipWindow_OnWeaponMateriaSelectedIndexChanged");
static_assert(offsetof(EndEquipWindow_OnWeaponMateriaSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEquipWindow_OnWeaponMateriaSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipWindow.OnWeaponMateriaSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipWindow_OnWeaponMateriaSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipWindow_OnWeaponMateriaSetupItem) == 0x000008, "Wrong alignment on EndEquipWindow_OnWeaponMateriaSetupItem");
static_assert(sizeof(EndEquipWindow_OnWeaponMateriaSetupItem) == 0x000010, "Wrong size on EndEquipWindow_OnWeaponMateriaSetupItem");
static_assert(offsetof(EndEquipWindow_OnWeaponMateriaSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipWindow_OnWeaponMateriaSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipWindow_OnWeaponMateriaSetupItem, CellIndex) == 0x000008, "Member 'EndEquipWindow_OnWeaponMateriaSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndFieldCommandMenu.OnCommandCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndFieldCommandMenu_OnCommandCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldCommandMenu_OnCommandCellSetup) == 0x000008, "Wrong alignment on EndFieldCommandMenu_OnCommandCellSetup");
static_assert(sizeof(EndFieldCommandMenu_OnCommandCellSetup) == 0x000010, "Wrong size on EndFieldCommandMenu_OnCommandCellSetup");
static_assert(offsetof(EndFieldCommandMenu_OnCommandCellSetup, ItemWidget) == 0x000000, "Member 'EndFieldCommandMenu_OnCommandCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldCommandMenu_OnCommandCellSetup, ItemIndex) == 0x000008, "Member 'EndFieldCommandMenu_OnCommandCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldCommandMenu.OnCommandHelpAbilityIcon
// 0x0010 (0x0010 - 0x0000)
struct EndFieldCommandMenu_OnCommandHelpAbilityIcon final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldCommandMenu_OnCommandHelpAbilityIcon) == 0x000008, "Wrong alignment on EndFieldCommandMenu_OnCommandHelpAbilityIcon");
static_assert(sizeof(EndFieldCommandMenu_OnCommandHelpAbilityIcon) == 0x000010, "Wrong size on EndFieldCommandMenu_OnCommandHelpAbilityIcon");
static_assert(offsetof(EndFieldCommandMenu_OnCommandHelpAbilityIcon, ItemWidget) == 0x000000, "Member 'EndFieldCommandMenu_OnCommandHelpAbilityIcon::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldCommandMenu_OnCommandHelpAbilityIcon, ItemIndex) == 0x000008, "Member 'EndFieldCommandMenu_OnCommandHelpAbilityIcon::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldCommandMenu.OnCommandMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndFieldCommandMenu_OnCommandMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldCommandMenu_OnCommandMeasureItem) == 0x000004, "Wrong alignment on EndFieldCommandMenu_OnCommandMeasureItem");
static_assert(sizeof(EndFieldCommandMenu_OnCommandMeasureItem) == 0x00000C, "Wrong size on EndFieldCommandMenu_OnCommandMeasureItem");
static_assert(offsetof(EndFieldCommandMenu_OnCommandMeasureItem, CellIndex) == 0x000000, "Member 'EndFieldCommandMenu_OnCommandMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndFieldCommandMenu_OnCommandMeasureItem, ReturnValue) == 0x000004, "Member 'EndFieldCommandMenu_OnCommandMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldCommandMenu.OnCommandMemberSelecterIconSetup
// 0x0010 (0x0010 - 0x0000)
struct EndFieldCommandMenu_OnCommandMemberSelecterIconSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldCommandMenu_OnCommandMemberSelecterIconSetup) == 0x000008, "Wrong alignment on EndFieldCommandMenu_OnCommandMemberSelecterIconSetup");
static_assert(sizeof(EndFieldCommandMenu_OnCommandMemberSelecterIconSetup) == 0x000010, "Wrong size on EndFieldCommandMenu_OnCommandMemberSelecterIconSetup");
static_assert(offsetof(EndFieldCommandMenu_OnCommandMemberSelecterIconSetup, ItemWidget) == 0x000000, "Member 'EndFieldCommandMenu_OnCommandMemberSelecterIconSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldCommandMenu_OnCommandMemberSelecterIconSetup, ItemIndex) == 0x000008, "Member 'EndFieldCommandMenu_OnCommandMemberSelecterIconSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldCommandMenu.OnPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndFieldCommandMenu_OnPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldCommandMenu_OnPressedItem) == 0x000004, "Wrong alignment on EndFieldCommandMenu_OnPressedItem");
static_assert(sizeof(EndFieldCommandMenu_OnPressedItem) == 0x000004, "Wrong size on EndFieldCommandMenu_OnPressedItem");
static_assert(offsetof(EndFieldCommandMenu_OnPressedItem, ItemIndex) == 0x000000, "Member 'EndFieldCommandMenu_OnPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndQuickMateriaMenu.OnMateriaMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndQuickMateriaMenu_OnMateriaMenuMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuickMateriaMenu_OnMateriaMenuMeasureItem) == 0x000004, "Wrong alignment on EndQuickMateriaMenu_OnMateriaMenuMeasureItem");
static_assert(sizeof(EndQuickMateriaMenu_OnMateriaMenuMeasureItem) == 0x00000C, "Wrong size on EndQuickMateriaMenu_OnMateriaMenuMeasureItem");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuMeasureItem, CellIndex) == 0x000000, "Member 'EndQuickMateriaMenu_OnMateriaMenuMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndQuickMateriaMenu_OnMateriaMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndQuickMateriaMenu.OnMateriaMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndQuickMateriaMenu_OnMateriaMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuickMateriaMenu_OnMateriaMenuPressedItem) == 0x000004, "Wrong alignment on EndQuickMateriaMenu_OnMateriaMenuPressedItem");
static_assert(sizeof(EndQuickMateriaMenu_OnMateriaMenuPressedItem) == 0x000004, "Wrong size on EndQuickMateriaMenu_OnMateriaMenuPressedItem");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuPressedItem, CellIndex) == 0x000000, "Member 'EndQuickMateriaMenu_OnMateriaMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndQuickMateriaMenu.OnMateriaMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged");
static_assert(sizeof(EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndQuickMateriaMenu.OnMateriaMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndQuickMateriaMenu_OnMateriaMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndQuickMateriaMenu_OnMateriaMenuSetupItem) == 0x000008, "Wrong alignment on EndQuickMateriaMenu_OnMateriaMenuSetupItem");
static_assert(sizeof(EndQuickMateriaMenu_OnMateriaMenuSetupItem) == 0x000010, "Wrong size on EndQuickMateriaMenu_OnMateriaMenuSetupItem");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndQuickMateriaMenu_OnMateriaMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuSetupItem, CellIndex) == 0x000008, "Member 'EndQuickMateriaMenu_OnMateriaMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndQuickMateriaMenu.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndQuickMateriaMenu_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuickMateriaMenu_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndQuickMateriaMenu_OnSortListPressedItem");
static_assert(sizeof(EndQuickMateriaMenu_OnSortListPressedItem) == 0x000004, "Wrong size on EndQuickMateriaMenu_OnSortListPressedItem");
static_assert(offsetof(EndQuickMateriaMenu_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndQuickMateriaMenu_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndFieldStatusMenu.OnPartySetIcon
// 0x0010 (0x0010 - 0x0000)
struct EndFieldStatusMenu_OnPartySetIcon final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldStatusMenu_OnPartySetIcon) == 0x000008, "Wrong alignment on EndFieldStatusMenu_OnPartySetIcon");
static_assert(sizeof(EndFieldStatusMenu_OnPartySetIcon) == 0x000010, "Wrong size on EndFieldStatusMenu_OnPartySetIcon");
static_assert(offsetof(EndFieldStatusMenu_OnPartySetIcon, ItemWidget) == 0x000000, "Member 'EndFieldStatusMenu_OnPartySetIcon::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldStatusMenu_OnPartySetIcon, ItemIndex) == 0x000008, "Member 'EndFieldStatusMenu_OnPartySetIcon::ItemIndex' has a wrong offset!");

// Function EndGame.EndMemberChangeWindow.OnBattleMemberListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMemberChangeWindow_OnBattleMemberListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMemberChangeWindow_OnBattleMemberListSetupItem) == 0x000008, "Wrong alignment on EndMemberChangeWindow_OnBattleMemberListSetupItem");
static_assert(sizeof(EndMemberChangeWindow_OnBattleMemberListSetupItem) == 0x000010, "Wrong size on EndMemberChangeWindow_OnBattleMemberListSetupItem");
static_assert(offsetof(EndMemberChangeWindow_OnBattleMemberListSetupItem, ItemWidget) == 0x000000, "Member 'EndMemberChangeWindow_OnBattleMemberListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMemberChangeWindow_OnBattleMemberListSetupItem, CellIndex) == 0x000008, "Member 'EndMemberChangeWindow_OnBattleMemberListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMemberChangeWindow.OnBattleMemberMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMemberChangeWindow_OnBattleMemberMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMemberChangeWindow_OnBattleMemberMeasureItem) == 0x000004, "Wrong alignment on EndMemberChangeWindow_OnBattleMemberMeasureItem");
static_assert(sizeof(EndMemberChangeWindow_OnBattleMemberMeasureItem) == 0x00000C, "Wrong size on EndMemberChangeWindow_OnBattleMemberMeasureItem");
static_assert(offsetof(EndMemberChangeWindow_OnBattleMemberMeasureItem, CellIndex) == 0x000000, "Member 'EndMemberChangeWindow_OnBattleMemberMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMemberChangeWindow_OnBattleMemberMeasureItem, ReturnValue) == 0x000004, "Member 'EndMemberChangeWindow_OnBattleMemberMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMemberChangeWindow.OnBattleMemberPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMemberChangeWindow_OnBattleMemberPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMemberChangeWindow_OnBattleMemberPressedItem) == 0x000004, "Wrong alignment on EndMemberChangeWindow_OnBattleMemberPressedItem");
static_assert(sizeof(EndMemberChangeWindow_OnBattleMemberPressedItem) == 0x000004, "Wrong size on EndMemberChangeWindow_OnBattleMemberPressedItem");
static_assert(offsetof(EndMemberChangeWindow_OnBattleMemberPressedItem, CellIndex) == 0x000000, "Member 'EndMemberChangeWindow_OnBattleMemberPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMemberChangeWindow.OnBattleMemberSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMemberChangeWindow_OnBattleMemberSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMemberChangeWindow_OnBattleMemberSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMemberChangeWindow_OnBattleMemberSelectedIndexChanged");
static_assert(sizeof(EndMemberChangeWindow_OnBattleMemberSelectedIndexChanged) == 0x000004, "Wrong size on EndMemberChangeWindow_OnBattleMemberSelectedIndexChanged");
static_assert(offsetof(EndMemberChangeWindow_OnBattleMemberSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMemberChangeWindow_OnBattleMemberSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMemberChangeWindow.OnReserveMemberListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMemberChangeWindow_OnReserveMemberListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMemberChangeWindow_OnReserveMemberListSetupItem) == 0x000008, "Wrong alignment on EndMemberChangeWindow_OnReserveMemberListSetupItem");
static_assert(sizeof(EndMemberChangeWindow_OnReserveMemberListSetupItem) == 0x000010, "Wrong size on EndMemberChangeWindow_OnReserveMemberListSetupItem");
static_assert(offsetof(EndMemberChangeWindow_OnReserveMemberListSetupItem, ItemWidget) == 0x000000, "Member 'EndMemberChangeWindow_OnReserveMemberListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMemberChangeWindow_OnReserveMemberListSetupItem, CellIndex) == 0x000008, "Member 'EndMemberChangeWindow_OnReserveMemberListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMemberChangeWindow.OnReserveMemberMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMemberChangeWindow_OnReserveMemberMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMemberChangeWindow_OnReserveMemberMeasureItem) == 0x000004, "Wrong alignment on EndMemberChangeWindow_OnReserveMemberMeasureItem");
static_assert(sizeof(EndMemberChangeWindow_OnReserveMemberMeasureItem) == 0x00000C, "Wrong size on EndMemberChangeWindow_OnReserveMemberMeasureItem");
static_assert(offsetof(EndMemberChangeWindow_OnReserveMemberMeasureItem, CellIndex) == 0x000000, "Member 'EndMemberChangeWindow_OnReserveMemberMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMemberChangeWindow_OnReserveMemberMeasureItem, ReturnValue) == 0x000004, "Member 'EndMemberChangeWindow_OnReserveMemberMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMemberChangeWindow.OnReserveMemberPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMemberChangeWindow_OnReserveMemberPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMemberChangeWindow_OnReserveMemberPressedItem) == 0x000004, "Wrong alignment on EndMemberChangeWindow_OnReserveMemberPressedItem");
static_assert(sizeof(EndMemberChangeWindow_OnReserveMemberPressedItem) == 0x000004, "Wrong size on EndMemberChangeWindow_OnReserveMemberPressedItem");
static_assert(offsetof(EndMemberChangeWindow_OnReserveMemberPressedItem, CellIndex) == 0x000000, "Member 'EndMemberChangeWindow_OnReserveMemberPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMemberChangeWindow.OnReserveMemberSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMemberChangeWindow_OnReserveMemberSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMemberChangeWindow_OnReserveMemberSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMemberChangeWindow_OnReserveMemberSelectedIndexChanged");
static_assert(sizeof(EndMemberChangeWindow_OnReserveMemberSelectedIndexChanged) == 0x000004, "Wrong size on EndMemberChangeWindow_OnReserveMemberSelectedIndexChanged");
static_assert(offsetof(EndMemberChangeWindow_OnReserveMemberSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMemberChangeWindow_OnReserveMemberSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndThrowableReceiverEnvironmentSkeletalMeshActor.OnThrownObjectHitEvent
// 0x0090 (0x0090 - 0x0000)
struct EndThrowableReceiverEnvironmentSkeletalMeshActor_OnThrownObjectHitEvent final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndThrowableReceiverEnvironmentSkeletalMeshActor_OnThrownObjectHitEvent) == 0x000004, "Wrong alignment on EndThrowableReceiverEnvironmentSkeletalMeshActor_OnThrownObjectHitEvent");
static_assert(sizeof(EndThrowableReceiverEnvironmentSkeletalMeshActor_OnThrownObjectHitEvent) == 0x000090, "Wrong size on EndThrowableReceiverEnvironmentSkeletalMeshActor_OnThrownObjectHitEvent");
static_assert(offsetof(EndThrowableReceiverEnvironmentSkeletalMeshActor_OnThrownObjectHitEvent, HitResult) == 0x000000, "Member 'EndThrowableReceiverEnvironmentSkeletalMeshActor_OnThrownObjectHitEvent::HitResult' has a wrong offset!");

// Function EndGame.EndPhysicsSEComponent.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndPhysicsSEComponent_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPhysicsSEComponent_OnComponentHit) == 0x000008, "Wrong alignment on EndPhysicsSEComponent_OnComponentHit");
static_assert(sizeof(EndPhysicsSEComponent_OnComponentHit) == 0x0000B8, "Wrong size on EndPhysicsSEComponent_OnComponentHit");
static_assert(offsetof(EndPhysicsSEComponent_OnComponentHit, HitComponent) == 0x000000, "Member 'EndPhysicsSEComponent_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndPhysicsSEComponent_OnComponentHit, OtherActor) == 0x000008, "Member 'EndPhysicsSEComponent_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndPhysicsSEComponent_OnComponentHit, OtherComp) == 0x000010, "Member 'EndPhysicsSEComponent_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndPhysicsSEComponent_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndPhysicsSEComponent_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndPhysicsSEComponent_OnComponentHit, Hit) == 0x000024, "Member 'EndPhysicsSEComponent_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndPolygon.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndPolygon_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndPolygon_GetDynamicMaterial");
static_assert(sizeof(EndPolygon_GetDynamicMaterial) == 0x000008, "Wrong size on EndPolygon_GetDynamicMaterial");
static_assert(offsetof(EndPolygon_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndPolygon_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndPolygon.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndPolygon_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetBlendMode) == 0x000001, "Wrong alignment on EndPolygon_SetBlendMode");
static_assert(sizeof(EndPolygon_SetBlendMode) == 0x000001, "Wrong size on EndPolygon_SetBlendMode");
static_assert(offsetof(EndPolygon_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndPolygon_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndPolygon.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct EndPolygon_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetBrush) == 0x000008, "Wrong alignment on EndPolygon_SetBrush");
static_assert(sizeof(EndPolygon_SetBrush) == 0x000088, "Wrong size on EndPolygon_SetBrush");
static_assert(offsetof(EndPolygon_SetBrush, InBrush) == 0x000000, "Member 'EndPolygon_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndPolygon.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndPolygon_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndPolygon_SetBrushFromAsset");
static_assert(sizeof(EndPolygon_SetBrushFromAsset) == 0x000008, "Wrong size on EndPolygon_SetBrushFromAsset");
static_assert(offsetof(EndPolygon_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndPolygon_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndPolygon.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndPolygon_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndPolygon_SetBrushFromMaterial");
static_assert(sizeof(EndPolygon_SetBrushFromMaterial) == 0x000008, "Wrong size on EndPolygon_SetBrushFromMaterial");
static_assert(offsetof(EndPolygon_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndPolygon_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndPolygon.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct EndPolygon_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPolygon_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndPolygon_SetBrushFromTexture");
static_assert(sizeof(EndPolygon_SetBrushFromTexture) == 0x000010, "Wrong size on EndPolygon_SetBrushFromTexture");
static_assert(offsetof(EndPolygon_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndPolygon_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(EndPolygon_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'EndPolygon_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function EndGame.EndPolygon.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct EndPolygon_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPolygon_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on EndPolygon_SetBrushFromTextureDynamic");
static_assert(sizeof(EndPolygon_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on EndPolygon_SetBrushFromTextureDynamic");
static_assert(offsetof(EndPolygon_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'EndPolygon_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(EndPolygon_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'EndPolygon_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function EndGame.EndPolygon.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndPolygon_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndPolygon_SetColorAndOpacity");
static_assert(sizeof(EndPolygon_SetColorAndOpacity) == 0x000010, "Wrong size on EndPolygon_SetColorAndOpacity");
static_assert(offsetof(EndPolygon_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndPolygon_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndPolygon.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndPolygon_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetOpacity) == 0x000004, "Wrong alignment on EndPolygon_SetOpacity");
static_assert(sizeof(EndPolygon_SetOpacity) == 0x000004, "Wrong size on EndPolygon_SetOpacity");
static_assert(offsetof(EndPolygon_SetOpacity, InOpacity) == 0x000000, "Member 'EndPolygon_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndShopTopMenu.OnPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndShopTopMenu_OnPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndShopTopMenu_OnPressedItem) == 0x000004, "Wrong alignment on EndShopTopMenu_OnPressedItem");
static_assert(sizeof(EndShopTopMenu_OnPressedItem) == 0x000004, "Wrong size on EndShopTopMenu_OnPressedItem");
static_assert(offsetof(EndShopTopMenu_OnPressedItem, ItemIndex) == 0x000000, "Member 'EndShopTopMenu_OnPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopTopMenu.OnShopTopCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopTopMenu_OnShopTopCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopTopMenu_OnShopTopCellSetup) == 0x000008, "Wrong alignment on EndShopTopMenu_OnShopTopCellSetup");
static_assert(sizeof(EndShopTopMenu_OnShopTopCellSetup) == 0x000010, "Wrong size on EndShopTopMenu_OnShopTopCellSetup");
static_assert(offsetof(EndShopTopMenu_OnShopTopCellSetup, ItemWidget) == 0x000000, "Member 'EndShopTopMenu_OnShopTopCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopTopMenu_OnShopTopCellSetup, ItemIndex) == 0x000008, "Member 'EndShopTopMenu_OnShopTopCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndSoundAPI.CallEvent
// 0x0001 (0x0001 - 0x0000)
struct EndSoundAPI_CallEvent final
{
public:
	EEndSoundLayer                                TargetLayer;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSoundAPI_CallEvent) == 0x000001, "Wrong alignment on EndSoundAPI_CallEvent");
static_assert(sizeof(EndSoundAPI_CallEvent) == 0x000001, "Wrong size on EndSoundAPI_CallEvent");
static_assert(offsetof(EndSoundAPI_CallEvent, TargetLayer) == 0x000000, "Member 'EndSoundAPI_CallEvent::TargetLayer' has a wrong offset!");

// Function EndGame.EndSoundAPI.SendAudioVolumeEvent
// 0x0010 (0x0010 - 0x0000)
struct EndSoundAPI_SendAudioVolumeEvent final
{
public:
	class FName                                   AudioVolumeEventID;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSoundAPI_SendAudioVolumeEvent) == 0x000004, "Wrong alignment on EndSoundAPI_SendAudioVolumeEvent");
static_assert(sizeof(EndSoundAPI_SendAudioVolumeEvent) == 0x000010, "Wrong size on EndSoundAPI_SendAudioVolumeEvent");
static_assert(offsetof(EndSoundAPI_SendAudioVolumeEvent, AudioVolumeEventID) == 0x000000, "Member 'EndSoundAPI_SendAudioVolumeEvent::AudioVolumeEventID' has a wrong offset!");
static_assert(offsetof(EndSoundAPI_SendAudioVolumeEvent, ActorName) == 0x000008, "Member 'EndSoundAPI_SendAudioVolumeEvent::ActorName' has a wrong offset!");

// Function EndGame.EndSoundAPI.SetExternalParameter
// 0x000C (0x000C - 0x0000)
struct EndSoundAPI_SetExternalParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSoundAPI_SetExternalParameter) == 0x000004, "Wrong alignment on EndSoundAPI_SetExternalParameter");
static_assert(sizeof(EndSoundAPI_SetExternalParameter) == 0x00000C, "Wrong size on EndSoundAPI_SetExternalParameter");
static_assert(offsetof(EndSoundAPI_SetExternalParameter, ParameterName) == 0x000000, "Member 'EndSoundAPI_SetExternalParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(EndSoundAPI_SetExternalParameter, Value) == 0x000008, "Member 'EndSoundAPI_SetExternalParameter::Value' has a wrong offset!");

// Function EndGame.EndSoldierFormationMenu.OnEditListItemSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndSoldierFormationMenu_OnEditListItemSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSoldierFormationMenu_OnEditListItemSetupItem) == 0x000008, "Wrong alignment on EndSoldierFormationMenu_OnEditListItemSetupItem");
static_assert(sizeof(EndSoldierFormationMenu_OnEditListItemSetupItem) == 0x000010, "Wrong size on EndSoldierFormationMenu_OnEditListItemSetupItem");
static_assert(offsetof(EndSoldierFormationMenu_OnEditListItemSetupItem, ItemWidget) == 0x000000, "Member 'EndSoldierFormationMenu_OnEditListItemSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndSoldierFormationMenu_OnEditListItemSetupItem, ItemIndex) == 0x000008, "Member 'EndSoldierFormationMenu_OnEditListItemSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndSoldierFormationMenu.OnEditListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndSoldierFormationMenu_OnEditListMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSoldierFormationMenu_OnEditListMeasureItem) == 0x000004, "Wrong alignment on EndSoldierFormationMenu_OnEditListMeasureItem");
static_assert(sizeof(EndSoldierFormationMenu_OnEditListMeasureItem) == 0x00000C, "Wrong size on EndSoldierFormationMenu_OnEditListMeasureItem");
static_assert(offsetof(EndSoldierFormationMenu_OnEditListMeasureItem, ItemIndex) == 0x000000, "Member 'EndSoldierFormationMenu_OnEditListMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndSoldierFormationMenu_OnEditListMeasureItem, ReturnValue) == 0x000004, "Member 'EndSoldierFormationMenu_OnEditListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndSoldierFormationMenu.OnReserveListItemSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndSoldierFormationMenu_OnReserveListItemSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSoldierFormationMenu_OnReserveListItemSetupItem) == 0x000008, "Wrong alignment on EndSoldierFormationMenu_OnReserveListItemSetupItem");
static_assert(sizeof(EndSoldierFormationMenu_OnReserveListItemSetupItem) == 0x000010, "Wrong size on EndSoldierFormationMenu_OnReserveListItemSetupItem");
static_assert(offsetof(EndSoldierFormationMenu_OnReserveListItemSetupItem, ItemWidget) == 0x000000, "Member 'EndSoldierFormationMenu_OnReserveListItemSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndSoldierFormationMenu_OnReserveListItemSetupItem, ItemIndex) == 0x000008, "Member 'EndSoldierFormationMenu_OnReserveListItemSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndSoldierFormationMenu.OnReserveListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndSoldierFormationMenu_OnReserveListMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSoldierFormationMenu_OnReserveListMeasureItem) == 0x000004, "Wrong alignment on EndSoldierFormationMenu_OnReserveListMeasureItem");
static_assert(sizeof(EndSoldierFormationMenu_OnReserveListMeasureItem) == 0x00000C, "Wrong size on EndSoldierFormationMenu_OnReserveListMeasureItem");
static_assert(offsetof(EndSoldierFormationMenu_OnReserveListMeasureItem, ItemIndex) == 0x000000, "Member 'EndSoldierFormationMenu_OnReserveListMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndSoldierFormationMenu_OnReserveListMeasureItem, ReturnValue) == 0x000004, "Member 'EndSoldierFormationMenu_OnReserveListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.AddRopeContactIgnoreActor
// 0x0008 (0x0008 - 0x0000)
struct EndRopeAnimInstance_AddRopeContactIgnoreActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_AddRopeContactIgnoreActor) == 0x000008, "Wrong alignment on EndRopeAnimInstance_AddRopeContactIgnoreActor");
static_assert(sizeof(EndRopeAnimInstance_AddRopeContactIgnoreActor) == 0x000008, "Wrong size on EndRopeAnimInstance_AddRopeContactIgnoreActor");
static_assert(offsetof(EndRopeAnimInstance_AddRopeContactIgnoreActor, Actor) == 0x000000, "Member 'EndRopeAnimInstance_AddRopeContactIgnoreActor::Actor' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.AttachEndPoint
// 0x0018 (0x0018 - 0x0000)
struct EndRopeAnimInstance_AttachEndPoint final
{
public:
	struct FVector                                EndPointLocation;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPointVector;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_AttachEndPoint) == 0x000004, "Wrong alignment on EndRopeAnimInstance_AttachEndPoint");
static_assert(sizeof(EndRopeAnimInstance_AttachEndPoint) == 0x000018, "Wrong size on EndRopeAnimInstance_AttachEndPoint");
static_assert(offsetof(EndRopeAnimInstance_AttachEndPoint, EndPointLocation) == 0x000000, "Member 'EndRopeAnimInstance_AttachEndPoint::EndPointLocation' has a wrong offset!");
static_assert(offsetof(EndRopeAnimInstance_AttachEndPoint, EndPointVector) == 0x00000C, "Member 'EndRopeAnimInstance_AttachEndPoint::EndPointVector' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.RegisterAttachPoint
// 0x0008 (0x0008 - 0x0000)
struct EndRopeAnimInstance_RegisterAttachPoint final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_RegisterAttachPoint) == 0x000004, "Wrong alignment on EndRopeAnimInstance_RegisterAttachPoint");
static_assert(sizeof(EndRopeAnimInstance_RegisterAttachPoint) == 0x000008, "Wrong size on EndRopeAnimInstance_RegisterAttachPoint");
static_assert(offsetof(EndRopeAnimInstance_RegisterAttachPoint, Distance) == 0x000000, "Member 'EndRopeAnimInstance_RegisterAttachPoint::Distance' has a wrong offset!");
static_assert(offsetof(EndRopeAnimInstance_RegisterAttachPoint, ReturnValue) == 0x000004, "Member 'EndRopeAnimInstance_RegisterAttachPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.RemoveRopeContactIgnoreActor
// 0x0008 (0x0008 - 0x0000)
struct EndRopeAnimInstance_RemoveRopeContactIgnoreActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_RemoveRopeContactIgnoreActor) == 0x000008, "Wrong alignment on EndRopeAnimInstance_RemoveRopeContactIgnoreActor");
static_assert(sizeof(EndRopeAnimInstance_RemoveRopeContactIgnoreActor) == 0x000008, "Wrong size on EndRopeAnimInstance_RemoveRopeContactIgnoreActor");
static_assert(offsetof(EndRopeAnimInstance_RemoveRopeContactIgnoreActor, Actor) == 0x000000, "Member 'EndRopeAnimInstance_RemoveRopeContactIgnoreActor::Actor' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.SetAttachPointLocation
// 0x0010 (0x0010 - 0x0000)
struct EndRopeAnimInstance_SetAttachPointLocation final
{
public:
	int32                                         AttachPointHandle;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_SetAttachPointLocation) == 0x000004, "Wrong alignment on EndRopeAnimInstance_SetAttachPointLocation");
static_assert(sizeof(EndRopeAnimInstance_SetAttachPointLocation) == 0x000010, "Wrong size on EndRopeAnimInstance_SetAttachPointLocation");
static_assert(offsetof(EndRopeAnimInstance_SetAttachPointLocation, AttachPointHandle) == 0x000000, "Member 'EndRopeAnimInstance_SetAttachPointLocation::AttachPointHandle' has a wrong offset!");
static_assert(offsetof(EndRopeAnimInstance_SetAttachPointLocation, Location) == 0x000004, "Member 'EndRopeAnimInstance_SetAttachPointLocation::Location' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.SetFixedRoot
// 0x0001 (0x0001 - 0x0000)
struct EndRopeAnimInstance_SetFixedRoot final
{
public:
	bool                                          bFixed;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_SetFixedRoot) == 0x000001, "Wrong alignment on EndRopeAnimInstance_SetFixedRoot");
static_assert(sizeof(EndRopeAnimInstance_SetFixedRoot) == 0x000001, "Wrong size on EndRopeAnimInstance_SetFixedRoot");
static_assert(offsetof(EndRopeAnimInstance_SetFixedRoot, bFixed) == 0x000000, "Member 'EndRopeAnimInstance_SetFixedRoot::bFixed' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.SetOverrideRopeLength
// 0x0004 (0x0004 - 0x0000)
struct EndRopeAnimInstance_SetOverrideRopeLength final
{
public:
	float                                         InRopeLength;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_SetOverrideRopeLength) == 0x000004, "Wrong alignment on EndRopeAnimInstance_SetOverrideRopeLength");
static_assert(sizeof(EndRopeAnimInstance_SetOverrideRopeLength) == 0x000004, "Wrong size on EndRopeAnimInstance_SetOverrideRopeLength");
static_assert(offsetof(EndRopeAnimInstance_SetOverrideRopeLength, InRopeLength) == 0x000000, "Member 'EndRopeAnimInstance_SetOverrideRopeLength::InRopeLength' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.SetRopeDistanceBias
// 0x0004 (0x0004 - 0x0000)
struct EndRopeAnimInstance_SetRopeDistanceBias final
{
public:
	float                                         InDistanceBias;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_SetRopeDistanceBias) == 0x000004, "Wrong alignment on EndRopeAnimInstance_SetRopeDistanceBias");
static_assert(sizeof(EndRopeAnimInstance_SetRopeDistanceBias) == 0x000004, "Wrong size on EndRopeAnimInstance_SetRopeDistanceBias");
static_assert(offsetof(EndRopeAnimInstance_SetRopeDistanceBias, InDistanceBias) == 0x000000, "Member 'EndRopeAnimInstance_SetRopeDistanceBias::InDistanceBias' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.UnregisterAttachPoint
// 0x0008 (0x0008 - 0x0000)
struct EndRopeAnimInstance_UnregisterAttachPoint final
{
public:
	int32                                         AttachPointHandle;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndRopeAnimInstance_UnregisterAttachPoint) == 0x000004, "Wrong alignment on EndRopeAnimInstance_UnregisterAttachPoint");
static_assert(sizeof(EndRopeAnimInstance_UnregisterAttachPoint) == 0x000008, "Wrong size on EndRopeAnimInstance_UnregisterAttachPoint");
static_assert(offsetof(EndRopeAnimInstance_UnregisterAttachPoint, AttachPointHandle) == 0x000000, "Member 'EndRopeAnimInstance_UnregisterAttachPoint::AttachPointHandle' has a wrong offset!");
static_assert(offsetof(EndRopeAnimInstance_UnregisterAttachPoint, ReturnValue) == 0x000004, "Member 'EndRopeAnimInstance_UnregisterAttachPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetEndLocation
// 0x000C (0x000C - 0x0000)
struct EndRopeAnimInstance_GetEndLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetEndLocation) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetEndLocation");
static_assert(sizeof(EndRopeAnimInstance_GetEndLocation) == 0x00000C, "Wrong size on EndRopeAnimInstance_GetEndLocation");
static_assert(offsetof(EndRopeAnimInstance_GetEndLocation, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetEndLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetEndPullLimitLength
// 0x0004 (0x0004 - 0x0000)
struct EndRopeAnimInstance_GetEndPullLimitLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetEndPullLimitLength) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetEndPullLimitLength");
static_assert(sizeof(EndRopeAnimInstance_GetEndPullLimitLength) == 0x000004, "Wrong size on EndRopeAnimInstance_GetEndPullLimitLength");
static_assert(offsetof(EndRopeAnimInstance_GetEndPullLimitLength, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetEndPullLimitLength::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetEndPullLimitLength2D
// 0x0004 (0x0004 - 0x0000)
struct EndRopeAnimInstance_GetEndPullLimitLength2D final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetEndPullLimitLength2D) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetEndPullLimitLength2D");
static_assert(sizeof(EndRopeAnimInstance_GetEndPullLimitLength2D) == 0x000004, "Wrong size on EndRopeAnimInstance_GetEndPullLimitLength2D");
static_assert(offsetof(EndRopeAnimInstance_GetEndPullLimitLength2D, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetEndPullLimitLength2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetEndPullLocation
// 0x000C (0x000C - 0x0000)
struct EndRopeAnimInstance_GetEndPullLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetEndPullLocation) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetEndPullLocation");
static_assert(sizeof(EndRopeAnimInstance_GetEndPullLocation) == 0x00000C, "Wrong size on EndRopeAnimInstance_GetEndPullLocation");
static_assert(offsetof(EndRopeAnimInstance_GetEndPullLocation, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetEndPullLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetEndPullVector
// 0x000C (0x000C - 0x0000)
struct EndRopeAnimInstance_GetEndPullVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetEndPullVector) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetEndPullVector");
static_assert(sizeof(EndRopeAnimInstance_GetEndPullVector) == 0x00000C, "Wrong size on EndRopeAnimInstance_GetEndPullVector");
static_assert(offsetof(EndRopeAnimInstance_GetEndPullVector, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetEndPullVector::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetEndPullVector2D
// 0x000C (0x000C - 0x0000)
struct EndRopeAnimInstance_GetEndPullVector2D final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetEndPullVector2D) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetEndPullVector2D");
static_assert(sizeof(EndRopeAnimInstance_GetEndPullVector2D) == 0x00000C, "Wrong size on EndRopeAnimInstance_GetEndPullVector2D");
static_assert(offsetof(EndRopeAnimInstance_GetEndPullVector2D, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetEndPullVector2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetRootLocation
// 0x000C (0x000C - 0x0000)
struct EndRopeAnimInstance_GetRootLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetRootLocation) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetRootLocation");
static_assert(sizeof(EndRopeAnimInstance_GetRootLocation) == 0x00000C, "Wrong size on EndRopeAnimInstance_GetRootLocation");
static_assert(offsetof(EndRopeAnimInstance_GetRootLocation, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetRootLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetRootPullLimitLength
// 0x0004 (0x0004 - 0x0000)
struct EndRopeAnimInstance_GetRootPullLimitLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetRootPullLimitLength) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetRootPullLimitLength");
static_assert(sizeof(EndRopeAnimInstance_GetRootPullLimitLength) == 0x000004, "Wrong size on EndRopeAnimInstance_GetRootPullLimitLength");
static_assert(offsetof(EndRopeAnimInstance_GetRootPullLimitLength, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetRootPullLimitLength::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetRootPullLimitLength2D
// 0x0004 (0x0004 - 0x0000)
struct EndRopeAnimInstance_GetRootPullLimitLength2D final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetRootPullLimitLength2D) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetRootPullLimitLength2D");
static_assert(sizeof(EndRopeAnimInstance_GetRootPullLimitLength2D) == 0x000004, "Wrong size on EndRopeAnimInstance_GetRootPullLimitLength2D");
static_assert(offsetof(EndRopeAnimInstance_GetRootPullLimitLength2D, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetRootPullLimitLength2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetRootPullLocation
// 0x000C (0x000C - 0x0000)
struct EndRopeAnimInstance_GetRootPullLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetRootPullLocation) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetRootPullLocation");
static_assert(sizeof(EndRopeAnimInstance_GetRootPullLocation) == 0x00000C, "Wrong size on EndRopeAnimInstance_GetRootPullLocation");
static_assert(offsetof(EndRopeAnimInstance_GetRootPullLocation, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetRootPullLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetRootPullVector
// 0x000C (0x000C - 0x0000)
struct EndRopeAnimInstance_GetRootPullVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetRootPullVector) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetRootPullVector");
static_assert(sizeof(EndRopeAnimInstance_GetRootPullVector) == 0x00000C, "Wrong size on EndRopeAnimInstance_GetRootPullVector");
static_assert(offsetof(EndRopeAnimInstance_GetRootPullVector, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetRootPullVector::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetRootPullVector2D
// 0x000C (0x000C - 0x0000)
struct EndRopeAnimInstance_GetRootPullVector2D final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetRootPullVector2D) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetRootPullVector2D");
static_assert(sizeof(EndRopeAnimInstance_GetRootPullVector2D) == 0x00000C, "Wrong size on EndRopeAnimInstance_GetRootPullVector2D");
static_assert(offsetof(EndRopeAnimInstance_GetRootPullVector2D, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetRootPullVector2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.GetTotalParticleLength
// 0x0004 (0x0004 - 0x0000)
struct EndRopeAnimInstance_GetTotalParticleLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_GetTotalParticleLength) == 0x000004, "Wrong alignment on EndRopeAnimInstance_GetTotalParticleLength");
static_assert(sizeof(EndRopeAnimInstance_GetTotalParticleLength) == 0x000004, "Wrong size on EndRopeAnimInstance_GetTotalParticleLength");
static_assert(offsetof(EndRopeAnimInstance_GetTotalParticleLength, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_GetTotalParticleLength::ReturnValue' has a wrong offset!");

// Function EndGame.EndRopeAnimInstance.IsAppearedRope
// 0x0001 (0x0001 - 0x0000)
struct EndRopeAnimInstance_IsAppearedRope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeAnimInstance_IsAppearedRope) == 0x000001, "Wrong alignment on EndRopeAnimInstance_IsAppearedRope");
static_assert(sizeof(EndRopeAnimInstance_IsAppearedRope) == 0x000001, "Wrong size on EndRopeAnimInstance_IsAppearedRope");
static_assert(offsetof(EndRopeAnimInstance_IsAppearedRope, ReturnValue) == 0x000000, "Member 'EndRopeAnimInstance_IsAppearedRope::ReturnValue' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemButtonHover
// 0x0001 (0x0001 - 0x0000)
struct EndItemWindow_OnItemButtonHover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnItemButtonHover) == 0x000001, "Wrong alignment on EndItemWindow_OnItemButtonHover");
static_assert(sizeof(EndItemWindow_OnItemButtonHover) == 0x000001, "Wrong size on EndItemWindow_OnItemButtonHover");
static_assert(offsetof(EndItemWindow_OnItemButtonHover, ReturnValue) == 0x000000, "Member 'EndItemWindow_OnItemButtonHover::ReturnValue' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemButtonUnhover
// 0x0001 (0x0001 - 0x0000)
struct EndItemWindow_OnItemButtonUnhover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnItemButtonUnhover) == 0x000001, "Wrong alignment on EndItemWindow_OnItemButtonUnhover");
static_assert(sizeof(EndItemWindow_OnItemButtonUnhover) == 0x000001, "Wrong size on EndItemWindow_OnItemButtonUnhover");
static_assert(offsetof(EndItemWindow_OnItemButtonUnhover, ReturnValue) == 0x000000, "Member 'EndItemWindow_OnItemButtonUnhover::ReturnValue' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemCategoryListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndItemWindow_OnItemCategoryListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnItemCategoryListMeasureItem) == 0x000004, "Wrong alignment on EndItemWindow_OnItemCategoryListMeasureItem");
static_assert(sizeof(EndItemWindow_OnItemCategoryListMeasureItem) == 0x00000C, "Wrong size on EndItemWindow_OnItemCategoryListMeasureItem");
static_assert(offsetof(EndItemWindow_OnItemCategoryListMeasureItem, CellIndex) == 0x000000, "Member 'EndItemWindow_OnItemCategoryListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndItemWindow_OnItemCategoryListMeasureItem, ReturnValue) == 0x000004, "Member 'EndItemWindow_OnItemCategoryListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemCategoryListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndItemWindow_OnItemCategoryListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnItemCategoryListPressedItem) == 0x000004, "Wrong alignment on EndItemWindow_OnItemCategoryListPressedItem");
static_assert(sizeof(EndItemWindow_OnItemCategoryListPressedItem) == 0x000004, "Wrong size on EndItemWindow_OnItemCategoryListPressedItem");
static_assert(offsetof(EndItemWindow_OnItemCategoryListPressedItem, CellIndex) == 0x000000, "Member 'EndItemWindow_OnItemCategoryListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemCategoryListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndItemWindow_OnItemCategoryListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnItemCategoryListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndItemWindow_OnItemCategoryListSelectedIndexChanged");
static_assert(sizeof(EndItemWindow_OnItemCategoryListSelectedIndexChanged) == 0x000004, "Wrong size on EndItemWindow_OnItemCategoryListSelectedIndexChanged");
static_assert(offsetof(EndItemWindow_OnItemCategoryListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndItemWindow_OnItemCategoryListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemCategoryListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndItemWindow_OnItemCategoryListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndItemWindow_OnItemCategoryListSetupItem) == 0x000008, "Wrong alignment on EndItemWindow_OnItemCategoryListSetupItem");
static_assert(sizeof(EndItemWindow_OnItemCategoryListSetupItem) == 0x000010, "Wrong size on EndItemWindow_OnItemCategoryListSetupItem");
static_assert(offsetof(EndItemWindow_OnItemCategoryListSetupItem, ItemWidget) == 0x000000, "Member 'EndItemWindow_OnItemCategoryListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndItemWindow_OnItemCategoryListSetupItem, CellIndex) == 0x000008, "Member 'EndItemWindow_OnItemCategoryListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndItemWindow_OnItemListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnItemListMeasureItem) == 0x000004, "Wrong alignment on EndItemWindow_OnItemListMeasureItem");
static_assert(sizeof(EndItemWindow_OnItemListMeasureItem) == 0x00000C, "Wrong size on EndItemWindow_OnItemListMeasureItem");
static_assert(offsetof(EndItemWindow_OnItemListMeasureItem, CellIndex) == 0x000000, "Member 'EndItemWindow_OnItemListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndItemWindow_OnItemListMeasureItem, ReturnValue) == 0x000004, "Member 'EndItemWindow_OnItemListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndItemWindow_OnItemListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnItemListPressedItem) == 0x000004, "Wrong alignment on EndItemWindow_OnItemListPressedItem");
static_assert(sizeof(EndItemWindow_OnItemListPressedItem) == 0x000004, "Wrong size on EndItemWindow_OnItemListPressedItem");
static_assert(offsetof(EndItemWindow_OnItemListPressedItem, CellIndex) == 0x000000, "Member 'EndItemWindow_OnItemListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndItemWindow_OnItemListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnItemListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndItemWindow_OnItemListSelectedIndexChanged");
static_assert(sizeof(EndItemWindow_OnItemListSelectedIndexChanged) == 0x000004, "Wrong size on EndItemWindow_OnItemListSelectedIndexChanged");
static_assert(offsetof(EndItemWindow_OnItemListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndItemWindow_OnItemListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndItemWindow_OnItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndItemWindow_OnItemListSetupItem) == 0x000008, "Wrong alignment on EndItemWindow_OnItemListSetupItem");
static_assert(sizeof(EndItemWindow_OnItemListSetupItem) == 0x000010, "Wrong size on EndItemWindow_OnItemListSetupItem");
static_assert(offsetof(EndItemWindow_OnItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndItemWindow_OnItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndItemWindow_OnItemListSetupItem, CellIndex) == 0x000008, "Member 'EndItemWindow_OnItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemTabListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndItemWindow_OnItemTabListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnItemTabListMeasureItem) == 0x000004, "Wrong alignment on EndItemWindow_OnItemTabListMeasureItem");
static_assert(sizeof(EndItemWindow_OnItemTabListMeasureItem) == 0x00000C, "Wrong size on EndItemWindow_OnItemTabListMeasureItem");
static_assert(offsetof(EndItemWindow_OnItemTabListMeasureItem, CellIndex) == 0x000000, "Member 'EndItemWindow_OnItemTabListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndItemWindow_OnItemTabListMeasureItem, ReturnValue) == 0x000004, "Member 'EndItemWindow_OnItemTabListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemTabListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndItemWindow_OnItemTabListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnItemTabListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndItemWindow_OnItemTabListSelectedIndexChanged");
static_assert(sizeof(EndItemWindow_OnItemTabListSelectedIndexChanged) == 0x000004, "Wrong size on EndItemWindow_OnItemTabListSelectedIndexChanged");
static_assert(offsetof(EndItemWindow_OnItemTabListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndItemWindow_OnItemTabListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndItemWindow.OnItemTabListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndItemWindow_OnItemTabListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndItemWindow_OnItemTabListSetupItem) == 0x000008, "Wrong alignment on EndItemWindow_OnItemTabListSetupItem");
static_assert(sizeof(EndItemWindow_OnItemTabListSetupItem) == 0x000010, "Wrong size on EndItemWindow_OnItemTabListSetupItem");
static_assert(offsetof(EndItemWindow_OnItemTabListSetupItem, ItemWidget) == 0x000000, "Member 'EndItemWindow_OnItemTabListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndItemWindow_OnItemTabListSetupItem, CellIndex) == 0x000008, "Member 'EndItemWindow_OnItemTabListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndItemWindow.OnRecoverListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndItemWindow_OnRecoverListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnRecoverListMeasureItem) == 0x000004, "Wrong alignment on EndItemWindow_OnRecoverListMeasureItem");
static_assert(sizeof(EndItemWindow_OnRecoverListMeasureItem) == 0x00000C, "Wrong size on EndItemWindow_OnRecoverListMeasureItem");
static_assert(offsetof(EndItemWindow_OnRecoverListMeasureItem, CellIndex) == 0x000000, "Member 'EndItemWindow_OnRecoverListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndItemWindow_OnRecoverListMeasureItem, ReturnValue) == 0x000004, "Member 'EndItemWindow_OnRecoverListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndItemWindow.OnRecoverListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndItemWindow_OnRecoverListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnRecoverListPressedItem) == 0x000004, "Wrong alignment on EndItemWindow_OnRecoverListPressedItem");
static_assert(sizeof(EndItemWindow_OnRecoverListPressedItem) == 0x000004, "Wrong size on EndItemWindow_OnRecoverListPressedItem");
static_assert(offsetof(EndItemWindow_OnRecoverListPressedItem, CellIndex) == 0x000000, "Member 'EndItemWindow_OnRecoverListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndItemWindow.OnRecoverListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndItemWindow_OnRecoverListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemWindow_OnRecoverListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndItemWindow_OnRecoverListSelectedIndexChanged");
static_assert(sizeof(EndItemWindow_OnRecoverListSelectedIndexChanged) == 0x000004, "Wrong size on EndItemWindow_OnRecoverListSelectedIndexChanged");
static_assert(offsetof(EndItemWindow_OnRecoverListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndItemWindow_OnRecoverListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndItemWindow.OnRecoverListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndItemWindow_OnRecoverListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndItemWindow_OnRecoverListSetupItem) == 0x000008, "Wrong alignment on EndItemWindow_OnRecoverListSetupItem");
static_assert(sizeof(EndItemWindow_OnRecoverListSetupItem) == 0x000010, "Wrong size on EndItemWindow_OnRecoverListSetupItem");
static_assert(offsetof(EndItemWindow_OnRecoverListSetupItem, ItemWidget) == 0x000000, "Member 'EndItemWindow_OnRecoverListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndItemWindow_OnRecoverListSetupItem, CellIndex) == 0x000008, "Member 'EndItemWindow_OnRecoverListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndLevelScriptActor.OnSetChapterProgress
// 0x0004 (0x0004 - 0x0000)
struct EndLevelScriptActor_OnSetChapterProgress final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelScriptActor_OnSetChapterProgress) == 0x000004, "Wrong alignment on EndLevelScriptActor_OnSetChapterProgress");
static_assert(sizeof(EndLevelScriptActor_OnSetChapterProgress) == 0x000004, "Wrong size on EndLevelScriptActor_OnSetChapterProgress");
static_assert(offsetof(EndLevelScriptActor_OnSetChapterProgress, Value) == 0x000000, "Member 'EndLevelScriptActor_OnSetChapterProgress::Value' has a wrong offset!");

// Function EndGame.EndLevelScriptActor.OnSetStoryFlag
// 0x000C (0x000C - 0x0000)
struct EndLevelScriptActor_OnSetStoryFlag final
{
public:
	class FName                                   StoryFlagId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndLevelScriptActor_OnSetStoryFlag) == 0x000004, "Wrong alignment on EndLevelScriptActor_OnSetStoryFlag");
static_assert(sizeof(EndLevelScriptActor_OnSetStoryFlag) == 0x00000C, "Wrong size on EndLevelScriptActor_OnSetStoryFlag");
static_assert(offsetof(EndLevelScriptActor_OnSetStoryFlag, StoryFlagId) == 0x000000, "Member 'EndLevelScriptActor_OnSetStoryFlag::StoryFlagId' has a wrong offset!");
static_assert(offsetof(EndLevelScriptActor_OnSetStoryFlag, Value) == 0x000008, "Member 'EndLevelScriptActor_OnSetStoryFlag::Value' has a wrong offset!");

// Function EndGame.EndSceneAPI.AttachWeapon
// 0x0018 (0x0018 - 0x0000)
struct EndSceneAPI_AttachWeapon final
{
public:
	class AActor*                                 CharacterActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 WeaponActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   Slot;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_AttachWeapon) == 0x000008, "Wrong alignment on EndSceneAPI_AttachWeapon");
static_assert(sizeof(EndSceneAPI_AttachWeapon) == 0x000018, "Wrong size on EndSceneAPI_AttachWeapon");
static_assert(offsetof(EndSceneAPI_AttachWeapon, CharacterActor) == 0x000000, "Member 'EndSceneAPI_AttachWeapon::CharacterActor' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_AttachWeapon, WeaponActor) == 0x000008, "Member 'EndSceneAPI_AttachWeapon::WeaponActor' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_AttachWeapon, Slot) == 0x000010, "Member 'EndSceneAPI_AttachWeapon::Slot' has a wrong offset!");

// Function EndGame.EndSceneAPI.CreateActorBP
// 0x002C (0x002C - 0x0000)
struct EndSceneAPI_CreateActorBP final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaSpec;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_CreateActorBP) == 0x000004, "Wrong alignment on EndSceneAPI_CreateActorBP");
static_assert(sizeof(EndSceneAPI_CreateActorBP) == 0x00002C, "Wrong size on EndSceneAPI_CreateActorBP");
static_assert(offsetof(EndSceneAPI_CreateActorBP, Name_0) == 0x000000, "Member 'EndSceneAPI_CreateActorBP::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_CreateActorBP, CharaSpec) == 0x000008, "Member 'EndSceneAPI_CreateActorBP::CharaSpec' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_CreateActorBP, Location) == 0x000010, "Member 'EndSceneAPI_CreateActorBP::Location' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_CreateActorBP, Rotation) == 0x00001C, "Member 'EndSceneAPI_CreateActorBP::Rotation' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_CreateActorBP, ReturnValue) == 0x000028, "Member 'EndSceneAPI_CreateActorBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.DestroyActorBP
// 0x000C (0x000C - 0x0000)
struct EndSceneAPI_DestroyActorBP final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_DestroyActorBP) == 0x000004, "Wrong alignment on EndSceneAPI_DestroyActorBP");
static_assert(sizeof(EndSceneAPI_DestroyActorBP) == 0x00000C, "Wrong size on EndSceneAPI_DestroyActorBP");
static_assert(offsetof(EndSceneAPI_DestroyActorBP, Name_0) == 0x000000, "Member 'EndSceneAPI_DestroyActorBP::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_DestroyActorBP, ReturnValue) == 0x000008, "Member 'EndSceneAPI_DestroyActorBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.DetachWeapon
// 0x0010 (0x0010 - 0x0000)
struct EndSceneAPI_DetachWeapon final
{
public:
	class AActor*                                 CharacterActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_DetachWeapon) == 0x000008, "Wrong alignment on EndSceneAPI_DetachWeapon");
static_assert(sizeof(EndSceneAPI_DetachWeapon) == 0x000010, "Wrong size on EndSceneAPI_DetachWeapon");
static_assert(offsetof(EndSceneAPI_DetachWeapon, CharacterActor) == 0x000000, "Member 'EndSceneAPI_DetachWeapon::CharacterActor' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_DetachWeapon, Slot) == 0x000008, "Member 'EndSceneAPI_DetachWeapon::Slot' has a wrong offset!");

// Function EndGame.EndSceneAPI.FindActorFromAccessorBP
// 0x0020 (0x0020 - 0x0000)
struct EndSceneAPI_FindActorFromAccessorBP final
{
public:
	class FName                                   InAccessId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLevelName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAccsessorActorName;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_FindActorFromAccessorBP) == 0x000008, "Wrong alignment on EndSceneAPI_FindActorFromAccessorBP");
static_assert(sizeof(EndSceneAPI_FindActorFromAccessorBP) == 0x000020, "Wrong size on EndSceneAPI_FindActorFromAccessorBP");
static_assert(offsetof(EndSceneAPI_FindActorFromAccessorBP, InAccessId) == 0x000000, "Member 'EndSceneAPI_FindActorFromAccessorBP::InAccessId' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_FindActorFromAccessorBP, InLevelName) == 0x000008, "Member 'EndSceneAPI_FindActorFromAccessorBP::InLevelName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_FindActorFromAccessorBP, InAccsessorActorName) == 0x000010, "Member 'EndSceneAPI_FindActorFromAccessorBP::InAccsessorActorName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_FindActorFromAccessorBP, ReturnValue) == 0x000018, "Member 'EndSceneAPI_FindActorFromAccessorBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.FindMaterialByName
// 0x0018 (0x0018 - 0x0000)
struct EndSceneAPI_FindMaterialByName final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_FindMaterialByName) == 0x000008, "Wrong alignment on EndSceneAPI_FindMaterialByName");
static_assert(sizeof(EndSceneAPI_FindMaterialByName) == 0x000018, "Wrong size on EndSceneAPI_FindMaterialByName");
static_assert(offsetof(EndSceneAPI_FindMaterialByName, Actor) == 0x000000, "Member 'EndSceneAPI_FindMaterialByName::Actor' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_FindMaterialByName, MaterialName) == 0x000008, "Member 'EndSceneAPI_FindMaterialByName::MaterialName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_FindMaterialByName, ReturnValue) == 0x000010, "Member 'EndSceneAPI_FindMaterialByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.FindMediaPlayer
// 0x0020 (0x0020 - 0x0000)
struct EndSceneAPI_FindMediaPlayer final
{
public:
	const class UMaterialInterface*               MovieMaterial;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaPlayer*                           OutMediaPlayer;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaTexture*                          OutMediaTexture;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_FindMediaPlayer) == 0x000008, "Wrong alignment on EndSceneAPI_FindMediaPlayer");
static_assert(sizeof(EndSceneAPI_FindMediaPlayer) == 0x000020, "Wrong size on EndSceneAPI_FindMediaPlayer");
static_assert(offsetof(EndSceneAPI_FindMediaPlayer, MovieMaterial) == 0x000000, "Member 'EndSceneAPI_FindMediaPlayer::MovieMaterial' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_FindMediaPlayer, OutMediaPlayer) == 0x000008, "Member 'EndSceneAPI_FindMediaPlayer::OutMediaPlayer' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_FindMediaPlayer, OutMediaTexture) == 0x000010, "Member 'EndSceneAPI_FindMediaPlayer::OutMediaTexture' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_FindMediaPlayer, ReturnValue) == 0x000018, "Member 'EndSceneAPI_FindMediaPlayer::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavFromNameAndLevel
// 0x0018 (0x0018 - 0x0000)
struct EndSceneAPI_GetNavFromNameAndLevel final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndNavModifierVolume*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavFromNameAndLevel) == 0x000008, "Wrong alignment on EndSceneAPI_GetNavFromNameAndLevel");
static_assert(sizeof(EndSceneAPI_GetNavFromNameAndLevel) == 0x000018, "Wrong size on EndSceneAPI_GetNavFromNameAndLevel");
static_assert(offsetof(EndSceneAPI_GetNavFromNameAndLevel, Level) == 0x000000, "Member 'EndSceneAPI_GetNavFromNameAndLevel::Level' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavFromNameAndLevel, Name_0) == 0x000008, "Member 'EndSceneAPI_GetNavFromNameAndLevel::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavFromNameAndLevel, ReturnValue) == 0x000010, "Member 'EndSceneAPI_GetNavFromNameAndLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavLocation
// 0x0014 (0x0014 - 0x0000)
struct EndSceneAPI_GetNavLocation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavLocation) == 0x000004, "Wrong alignment on EndSceneAPI_GetNavLocation");
static_assert(sizeof(EndSceneAPI_GetNavLocation) == 0x000014, "Wrong size on EndSceneAPI_GetNavLocation");
static_assert(offsetof(EndSceneAPI_GetNavLocation, Name_0) == 0x000000, "Member 'EndSceneAPI_GetNavLocation::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavLocation, ReturnValue) == 0x000008, "Member 'EndSceneAPI_GetNavLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavLocationFromLevel
// 0x001C (0x001C - 0x0000)
struct EndSceneAPI_GetNavLocationFromLevel final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavLocationFromLevel) == 0x000004, "Wrong alignment on EndSceneAPI_GetNavLocationFromLevel");
static_assert(sizeof(EndSceneAPI_GetNavLocationFromLevel) == 0x00001C, "Wrong size on EndSceneAPI_GetNavLocationFromLevel");
static_assert(offsetof(EndSceneAPI_GetNavLocationFromLevel, Level) == 0x000000, "Member 'EndSceneAPI_GetNavLocationFromLevel::Level' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavLocationFromLevel, Name_0) == 0x000008, "Member 'EndSceneAPI_GetNavLocationFromLevel::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavLocationFromLevel, ReturnValue) == 0x000010, "Member 'EndSceneAPI_GetNavLocationFromLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavRotation
// 0x0014 (0x0014 - 0x0000)
struct EndSceneAPI_GetNavRotation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavRotation) == 0x000004, "Wrong alignment on EndSceneAPI_GetNavRotation");
static_assert(sizeof(EndSceneAPI_GetNavRotation) == 0x000014, "Wrong size on EndSceneAPI_GetNavRotation");
static_assert(offsetof(EndSceneAPI_GetNavRotation, Name_0) == 0x000000, "Member 'EndSceneAPI_GetNavRotation::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavRotation, ReturnValue) == 0x000008, "Member 'EndSceneAPI_GetNavRotation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavRotationFromLevel
// 0x001C (0x001C - 0x0000)
struct EndSceneAPI_GetNavRotationFromLevel final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavRotationFromLevel) == 0x000004, "Wrong alignment on EndSceneAPI_GetNavRotationFromLevel");
static_assert(sizeof(EndSceneAPI_GetNavRotationFromLevel) == 0x00001C, "Wrong size on EndSceneAPI_GetNavRotationFromLevel");
static_assert(offsetof(EndSceneAPI_GetNavRotationFromLevel, Level) == 0x000000, "Member 'EndSceneAPI_GetNavRotationFromLevel::Level' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavRotationFromLevel, Name_0) == 0x000008, "Member 'EndSceneAPI_GetNavRotationFromLevel::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavRotationFromLevel, ReturnValue) == 0x000010, "Member 'EndSceneAPI_GetNavRotationFromLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavTransform
// 0x0040 (0x0040 - 0x0000)
struct EndSceneAPI_GetNavTransform final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavTransform) == 0x000010, "Wrong alignment on EndSceneAPI_GetNavTransform");
static_assert(sizeof(EndSceneAPI_GetNavTransform) == 0x000040, "Wrong size on EndSceneAPI_GetNavTransform");
static_assert(offsetof(EndSceneAPI_GetNavTransform, Name_0) == 0x000000, "Member 'EndSceneAPI_GetNavTransform::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavTransform, ReturnValue) == 0x000010, "Member 'EndSceneAPI_GetNavTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavTransformFromLevel
// 0x0040 (0x0040 - 0x0000)
struct EndSceneAPI_GetNavTransformFromLevel final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavTransformFromLevel) == 0x000010, "Wrong alignment on EndSceneAPI_GetNavTransformFromLevel");
static_assert(sizeof(EndSceneAPI_GetNavTransformFromLevel) == 0x000040, "Wrong size on EndSceneAPI_GetNavTransformFromLevel");
static_assert(offsetof(EndSceneAPI_GetNavTransformFromLevel, Level) == 0x000000, "Member 'EndSceneAPI_GetNavTransformFromLevel::Level' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavTransformFromLevel, Name_0) == 0x000008, "Member 'EndSceneAPI_GetNavTransformFromLevel::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavTransformFromLevel, ReturnValue) == 0x000010, "Member 'EndSceneAPI_GetNavTransformFromLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.InvalidateSimpleCameraWall
// 0x000C (0x000C - 0x0000)
struct EndSceneAPI_InvalidateSimpleCameraWall final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_InvalidateSimpleCameraWall) == 0x000004, "Wrong alignment on EndSceneAPI_InvalidateSimpleCameraWall");
static_assert(sizeof(EndSceneAPI_InvalidateSimpleCameraWall) == 0x00000C, "Wrong size on EndSceneAPI_InvalidateSimpleCameraWall");
static_assert(offsetof(EndSceneAPI_InvalidateSimpleCameraWall, TargetActorName) == 0x000000, "Member 'EndSceneAPI_InvalidateSimpleCameraWall::TargetActorName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_InvalidateSimpleCameraWall, ReturnValue) == 0x000008, "Member 'EndSceneAPI_InvalidateSimpleCameraWall::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.IsDrawPause
// 0x0010 (0x0010 - 0x0000)
struct EndSceneAPI_IsDrawPause final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_IsDrawPause) == 0x000008, "Wrong alignment on EndSceneAPI_IsDrawPause");
static_assert(sizeof(EndSceneAPI_IsDrawPause) == 0x000010, "Wrong size on EndSceneAPI_IsDrawPause");
static_assert(offsetof(EndSceneAPI_IsDrawPause, Actor) == 0x000000, "Member 'EndSceneAPI_IsDrawPause::Actor' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_IsDrawPause, ReturnValue) == 0x000008, "Member 'EndSceneAPI_IsDrawPause::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.TeleportActor
// 0x0020 (0x0020 - 0x0000)
struct EndSceneAPI_TeleportActor final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDestRotation;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_TeleportActor) == 0x000008, "Wrong alignment on EndSceneAPI_TeleportActor");
static_assert(sizeof(EndSceneAPI_TeleportActor) == 0x000020, "Wrong size on EndSceneAPI_TeleportActor");
static_assert(offsetof(EndSceneAPI_TeleportActor, LevelName) == 0x000000, "Member 'EndSceneAPI_TeleportActor::LevelName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_TeleportActor, ActorName) == 0x000008, "Member 'EndSceneAPI_TeleportActor::ActorName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_TeleportActor, TargetActor) == 0x000010, "Member 'EndSceneAPI_TeleportActor::TargetActor' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_TeleportActor, bApplyDestRotation) == 0x000018, "Member 'EndSceneAPI_TeleportActor::bApplyDestRotation' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_TeleportActor, ReturnValue) == 0x000019, "Member 'EndSceneAPI_TeleportActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.ValidateSimpleCameraWall
// 0x000C (0x000C - 0x0000)
struct EndSceneAPI_ValidateSimpleCameraWall final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_ValidateSimpleCameraWall) == 0x000004, "Wrong alignment on EndSceneAPI_ValidateSimpleCameraWall");
static_assert(sizeof(EndSceneAPI_ValidateSimpleCameraWall) == 0x00000C, "Wrong size on EndSceneAPI_ValidateSimpleCameraWall");
static_assert(offsetof(EndSceneAPI_ValidateSimpleCameraWall, TargetActorName) == 0x000000, "Member 'EndSceneAPI_ValidateSimpleCameraWall::TargetActorName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_ValidateSimpleCameraWall, ReturnValue) == 0x000008, "Member 'EndSceneAPI_ValidateSimpleCameraWall::ReturnValue' has a wrong offset!");

// Function EndGame.EndPlayBlendSpaceActionActorInterface.OnGetCurrentBlendSpaceInput
// 0x0004 (0x0004 - 0x0000)
struct EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput) == 0x000004, "Wrong alignment on EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput");
static_assert(sizeof(EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput) == 0x000004, "Wrong size on EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput");
static_assert(offsetof(EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput, ReturnValue) == 0x000000, "Member 'EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput::ReturnValue' has a wrong offset!");

// Function EndGame.EndGambitAIController.GetLaneUnits
// 0x0018 (0x0018 - 0x0000)
struct EndGambitAIController_GetLaneUnits final
{
public:
	EGambitTargetLaneType                         Lanetype;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpposing;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitAIController_GetLaneUnits) == 0x000008, "Wrong alignment on EndGambitAIController_GetLaneUnits");
static_assert(sizeof(EndGambitAIController_GetLaneUnits) == 0x000018, "Wrong size on EndGambitAIController_GetLaneUnits");
static_assert(offsetof(EndGambitAIController_GetLaneUnits, Lanetype) == 0x000000, "Member 'EndGambitAIController_GetLaneUnits::Lanetype' has a wrong offset!");
static_assert(offsetof(EndGambitAIController_GetLaneUnits, bOpposing) == 0x000001, "Member 'EndGambitAIController_GetLaneUnits::bOpposing' has a wrong offset!");
static_assert(offsetof(EndGambitAIController_GetLaneUnits, ReturnValue) == 0x000008, "Member 'EndGambitAIController_GetLaneUnits::ReturnValue' has a wrong offset!");

// Function EndGame.EndGambitAIController.GetOwnerUnit
// 0x0008 (0x0008 - 0x0000)
struct EndGambitAIController_GetOwnerUnit final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitAIController_GetOwnerUnit) == 0x000008, "Wrong alignment on EndGambitAIController_GetOwnerUnit");
static_assert(sizeof(EndGambitAIController_GetOwnerUnit) == 0x000008, "Wrong size on EndGambitAIController_GetOwnerUnit");
static_assert(offsetof(EndGambitAIController_GetOwnerUnit, ReturnValue) == 0x000000, "Member 'EndGambitAIController_GetOwnerUnit::ReturnValue' has a wrong offset!");

// Function EndGame.EndGambitAIController.OnGameSet
// 0x0004 (0x0004 - 0x0000)
struct EndGambitAIController_OnGameSet final
{
public:
	int32                                         endState;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitAIController_OnGameSet) == 0x000004, "Wrong alignment on EndGambitAIController_OnGameSet");
static_assert(sizeof(EndGambitAIController_OnGameSet) == 0x000004, "Wrong size on EndGambitAIController_OnGameSet");
static_assert(offsetof(EndGambitAIController_OnGameSet, endState) == 0x000000, "Member 'EndGambitAIController_OnGameSet::endState' has a wrong offset!");

// Function EndGame.EndGambitAIController.OnRoleChange
// 0x0008 (0x0008 - 0x0000)
struct EndGambitAIController_OnRoleChange final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitAIController_OnRoleChange) == 0x000004, "Wrong alignment on EndGambitAIController_OnRoleChange");
static_assert(sizeof(EndGambitAIController_OnRoleChange) == 0x000008, "Wrong size on EndGambitAIController_OnRoleChange");
static_assert(offsetof(EndGambitAIController_OnRoleChange, ActionID) == 0x000000, "Member 'EndGambitAIController_OnRoleChange::ActionID' has a wrong offset!");

// Function EndGame.EndGambitAIController.SetDisableLastActionFooter
// 0x0001 (0x0001 - 0x0000)
struct EndGambitAIController_SetDisableLastActionFooter final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitAIController_SetDisableLastActionFooter) == 0x000001, "Wrong alignment on EndGambitAIController_SetDisableLastActionFooter");
static_assert(sizeof(EndGambitAIController_SetDisableLastActionFooter) == 0x000001, "Wrong size on EndGambitAIController_SetDisableLastActionFooter");
static_assert(offsetof(EndGambitAIController_SetDisableLastActionFooter, bDisable) == 0x000000, "Member 'EndGambitAIController_SetDisableLastActionFooter::bDisable' has a wrong offset!");

// Function EndGame.EndGambitAIController.GetGeneratedLaneIdx
// 0x0001 (0x0001 - 0x0000)
struct EndGambitAIController_GetGeneratedLaneIdx final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitAIController_GetGeneratedLaneIdx) == 0x000001, "Wrong alignment on EndGambitAIController_GetGeneratedLaneIdx");
static_assert(sizeof(EndGambitAIController_GetGeneratedLaneIdx) == 0x000001, "Wrong size on EndGambitAIController_GetGeneratedLaneIdx");
static_assert(offsetof(EndGambitAIController_GetGeneratedLaneIdx, ReturnValue) == 0x000000, "Member 'EndGambitAIController_GetGeneratedLaneIdx::ReturnValue' has a wrong offset!");

// Function EndGame.EndGambitAIController.GetLastAction
// 0x0008 (0x0008 - 0x0000)
struct EndGambitAIController_GetLastAction final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitAIController_GetLastAction) == 0x000004, "Wrong alignment on EndGambitAIController_GetLastAction");
static_assert(sizeof(EndGambitAIController_GetLastAction) == 0x000008, "Wrong size on EndGambitAIController_GetLastAction");
static_assert(offsetof(EndGambitAIController_GetLastAction, ReturnValue) == 0x000000, "Member 'EndGambitAIController_GetLastAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndGambitAIController.GetStageIndex
// 0x0004 (0x0004 - 0x0000)
struct EndGambitAIController_GetStageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitAIController_GetStageIndex) == 0x000004, "Wrong alignment on EndGambitAIController_GetStageIndex");
static_assert(sizeof(EndGambitAIController_GetStageIndex) == 0x000004, "Wrong size on EndGambitAIController_GetStageIndex");
static_assert(offsetof(EndGambitAIController_GetStageIndex, ReturnValue) == 0x000000, "Member 'EndGambitAIController_GetStageIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndPlayerChocoboCoordinator.GetRiderCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndPlayerChocoboCoordinator_GetRiderCharacter final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacterBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayerChocoboCoordinator_GetRiderCharacter) == 0x000008, "Wrong alignment on EndPlayerChocoboCoordinator_GetRiderCharacter");
static_assert(sizeof(EndPlayerChocoboCoordinator_GetRiderCharacter) == 0x000010, "Wrong size on EndPlayerChocoboCoordinator_GetRiderCharacter");
static_assert(offsetof(EndPlayerChocoboCoordinator_GetRiderCharacter, Index_0) == 0x000000, "Member 'EndPlayerChocoboCoordinator_GetRiderCharacter::Index_0' has a wrong offset!");
static_assert(offsetof(EndPlayerChocoboCoordinator_GetRiderCharacter, ReturnValue) == 0x000008, "Member 'EndPlayerChocoboCoordinator_GetRiderCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndPlayerChocoboCoordinator.GetVehicleCharacter
// 0x0008 (0x0008 - 0x0000)
struct EndPlayerChocoboCoordinator_GetVehicleCharacter final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayerChocoboCoordinator_GetVehicleCharacter) == 0x000008, "Wrong alignment on EndPlayerChocoboCoordinator_GetVehicleCharacter");
static_assert(sizeof(EndPlayerChocoboCoordinator_GetVehicleCharacter) == 0x000008, "Wrong size on EndPlayerChocoboCoordinator_GetVehicleCharacter");
static_assert(offsetof(EndPlayerChocoboCoordinator_GetVehicleCharacter, ReturnValue) == 0x000000, "Member 'EndPlayerChocoboCoordinator_GetVehicleCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldEnemyTerritoryActor.OnBeginDisableEscapeCollision
// 0x00B0 (0x00B0 - 0x0000)
struct EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision final
{
public:
	class AActor*                                 disableWall;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision) == 0x000008, "Wrong alignment on EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision");
static_assert(sizeof(EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision) == 0x0000B0, "Wrong size on EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision");
static_assert(offsetof(EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision, disableWall) == 0x000000, "Member 'EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision::disableWall' has a wrong offset!");
static_assert(offsetof(EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision, Actor) == 0x000008, "Member 'EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision::Actor' has a wrong offset!");
static_assert(offsetof(EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision, NormalImpulse) == 0x000010, "Member 'EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision, Hit) == 0x00001C, "Member 'EndFieldEnemyTerritoryActor_OnBeginDisableEscapeCollision::Hit' has a wrong offset!");

// Function EndGame.EndFieldMovementComponent.SetVelocityInLocalSpace
// 0x000C (0x000C - 0x0000)
struct EndFieldMovementComponent_SetVelocityInLocalSpace final
{
public:
	struct FVector                                NewVelocity;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldMovementComponent_SetVelocityInLocalSpace) == 0x000004, "Wrong alignment on EndFieldMovementComponent_SetVelocityInLocalSpace");
static_assert(sizeof(EndFieldMovementComponent_SetVelocityInLocalSpace) == 0x00000C, "Wrong size on EndFieldMovementComponent_SetVelocityInLocalSpace");
static_assert(offsetof(EndFieldMovementComponent_SetVelocityInLocalSpace, NewVelocity) == 0x000000, "Member 'EndFieldMovementComponent_SetVelocityInLocalSpace::NewVelocity' has a wrong offset!");

// Function EndGame.EndFieldMovementComponent.LimitVelocity
// 0x0018 (0x0018 - 0x0000)
struct EndFieldMovementComponent_LimitVelocity final
{
public:
	struct FVector                                NewVelocity;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldMovementComponent_LimitVelocity) == 0x000004, "Wrong alignment on EndFieldMovementComponent_LimitVelocity");
static_assert(sizeof(EndFieldMovementComponent_LimitVelocity) == 0x000018, "Wrong size on EndFieldMovementComponent_LimitVelocity");
static_assert(offsetof(EndFieldMovementComponent_LimitVelocity, NewVelocity) == 0x000000, "Member 'EndFieldMovementComponent_LimitVelocity::NewVelocity' has a wrong offset!");
static_assert(offsetof(EndFieldMovementComponent_LimitVelocity, ReturnValue) == 0x00000C, "Member 'EndFieldMovementComponent_LimitVelocity::ReturnValue' has a wrong offset!");

// Function EndGame.EndSwitchableSkeletalMeshComponent.SetSkeletalMeshByIndex
// 0x0008 (0x0008 - 0x0000)
struct EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitPose;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex) == 0x000004, "Wrong alignment on EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex");
static_assert(sizeof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex) == 0x000008, "Wrong size on EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex");
static_assert(offsetof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex, Index_0) == 0x000000, "Member 'EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex, bReinitPose) == 0x000004, "Member 'EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex::bReinitPose' has a wrong offset!");

// Function EndGame.EndSwitchableSkeletalMeshComponent.SetSkeletalMeshByLabel
// 0x000C (0x000C - 0x0000)
struct EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitPose;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel) == 0x000004, "Wrong alignment on EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel");
static_assert(sizeof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel) == 0x00000C, "Wrong size on EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel");
static_assert(offsetof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel, Label) == 0x000000, "Member 'EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel::Label' has a wrong offset!");
static_assert(offsetof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel, bReinitPose) == 0x000008, "Member 'EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel::bReinitPose' has a wrong offset!");

// Function EndGame.EndFrogGuysSeesawGimmickActor.OnBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct EndFrogGuysSeesawGimmickActor_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFrogGuysSeesawGimmickActor_OnBeginOverlap) == 0x000008, "Wrong alignment on EndFrogGuysSeesawGimmickActor_OnBeginOverlap");
static_assert(sizeof(EndFrogGuysSeesawGimmickActor_OnBeginOverlap) == 0x0000B0, "Wrong size on EndFrogGuysSeesawGimmickActor_OnBeginOverlap");
static_assert(offsetof(EndFrogGuysSeesawGimmickActor_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'EndFrogGuysSeesawGimmickActor_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndFrogGuysSeesawGimmickActor_OnBeginOverlap, OtherActor) == 0x000008, "Member 'EndFrogGuysSeesawGimmickActor_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndFrogGuysSeesawGimmickActor_OnBeginOverlap, OtherComp) == 0x000010, "Member 'EndFrogGuysSeesawGimmickActor_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndFrogGuysSeesawGimmickActor_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'EndFrogGuysSeesawGimmickActor_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EndFrogGuysSeesawGimmickActor_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'EndFrogGuysSeesawGimmickActor_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EndFrogGuysSeesawGimmickActor_OnBeginOverlap, SweepResult) == 0x000020, "Member 'EndFrogGuysSeesawGimmickActor_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function EndGame.EndFrogGuysSeesawGimmickActor.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct EndFrogGuysSeesawGimmickActor_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFrogGuysSeesawGimmickActor_OnEndOverlap) == 0x000008, "Wrong alignment on EndFrogGuysSeesawGimmickActor_OnEndOverlap");
static_assert(sizeof(EndFrogGuysSeesawGimmickActor_OnEndOverlap) == 0x000020, "Wrong size on EndFrogGuysSeesawGimmickActor_OnEndOverlap");
static_assert(offsetof(EndFrogGuysSeesawGimmickActor_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'EndFrogGuysSeesawGimmickActor_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndFrogGuysSeesawGimmickActor_OnEndOverlap, OtherActor) == 0x000008, "Member 'EndFrogGuysSeesawGimmickActor_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndFrogGuysSeesawGimmickActor_OnEndOverlap, OtherComp) == 0x000010, "Member 'EndFrogGuysSeesawGimmickActor_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndFrogGuysSeesawGimmickActor_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'EndFrogGuysSeesawGimmickActor_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function EndGame.EndFrogGuysTriggerComponent.OnBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct EndFrogGuysTriggerComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFrogGuysTriggerComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on EndFrogGuysTriggerComponent_OnBeginOverlap");
static_assert(sizeof(EndFrogGuysTriggerComponent_OnBeginOverlap) == 0x0000B0, "Wrong size on EndFrogGuysTriggerComponent_OnBeginOverlap");
static_assert(offsetof(EndFrogGuysTriggerComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'EndFrogGuysTriggerComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndFrogGuysTriggerComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'EndFrogGuysTriggerComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndFrogGuysTriggerComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'EndFrogGuysTriggerComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndFrogGuysTriggerComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'EndFrogGuysTriggerComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EndFrogGuysTriggerComponent_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'EndFrogGuysTriggerComponent_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EndFrogGuysTriggerComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'EndFrogGuysTriggerComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function EndGame.EndFrogGuysTriggerComponent.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct EndFrogGuysTriggerComponent_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFrogGuysTriggerComponent_OnEndOverlap) == 0x000008, "Wrong alignment on EndFrogGuysTriggerComponent_OnEndOverlap");
static_assert(sizeof(EndFrogGuysTriggerComponent_OnEndOverlap) == 0x000020, "Wrong size on EndFrogGuysTriggerComponent_OnEndOverlap");
static_assert(offsetof(EndFrogGuysTriggerComponent_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'EndFrogGuysTriggerComponent_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndFrogGuysTriggerComponent_OnEndOverlap, OtherActor) == 0x000008, "Member 'EndFrogGuysTriggerComponent_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EndFrogGuysTriggerComponent_OnEndOverlap, OtherComp) == 0x000010, "Member 'EndFrogGuysTriggerComponent_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndFrogGuysTriggerComponent_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'EndFrogGuysTriggerComponent_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnActionListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndGambitEditMenuWidget_OnActionListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitEditMenuWidget_OnActionListPressedItem) == 0x000004, "Wrong alignment on EndGambitEditMenuWidget_OnActionListPressedItem");
static_assert(sizeof(EndGambitEditMenuWidget_OnActionListPressedItem) == 0x000004, "Wrong size on EndGambitEditMenuWidget_OnActionListPressedItem");
static_assert(offsetof(EndGambitEditMenuWidget_OnActionListPressedItem, CellIndex) == 0x000000, "Member 'EndGambitEditMenuWidget_OnActionListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnActionListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndGambitEditMenuWidget_OnActionListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitEditMenuWidget_OnActionListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndGambitEditMenuWidget_OnActionListSelectedIndexChanged");
static_assert(sizeof(EndGambitEditMenuWidget_OnActionListSelectedIndexChanged) == 0x000004, "Wrong size on EndGambitEditMenuWidget_OnActionListSelectedIndexChanged");
static_assert(offsetof(EndGambitEditMenuWidget_OnActionListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndGambitEditMenuWidget_OnActionListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnActionListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndGambitEditMenuWidget_OnActionListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitEditMenuWidget_OnActionListSetupItem) == 0x000008, "Wrong alignment on EndGambitEditMenuWidget_OnActionListSetupItem");
static_assert(sizeof(EndGambitEditMenuWidget_OnActionListSetupItem) == 0x000010, "Wrong size on EndGambitEditMenuWidget_OnActionListSetupItem");
static_assert(offsetof(EndGambitEditMenuWidget_OnActionListSetupItem, ItemWidget) == 0x000000, "Member 'EndGambitEditMenuWidget_OnActionListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitEditMenuWidget_OnActionListSetupItem, CellIndex) == 0x000008, "Member 'EndGambitEditMenuWidget_OnActionListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnActionNeedListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndGambitEditMenuWidget_OnActionNeedListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitEditMenuWidget_OnActionNeedListSetupItem) == 0x000008, "Wrong alignment on EndGambitEditMenuWidget_OnActionNeedListSetupItem");
static_assert(sizeof(EndGambitEditMenuWidget_OnActionNeedListSetupItem) == 0x000010, "Wrong size on EndGambitEditMenuWidget_OnActionNeedListSetupItem");
static_assert(offsetof(EndGambitEditMenuWidget_OnActionNeedListSetupItem, ItemWidget) == 0x000000, "Member 'EndGambitEditMenuWidget_OnActionNeedListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitEditMenuWidget_OnActionNeedListSetupItem, CellIndex) == 0x000008, "Member 'EndGambitEditMenuWidget_OnActionNeedListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnActionNeedListSetupItem2
// 0x0010 (0x0010 - 0x0000)
struct EndGambitEditMenuWidget_OnActionNeedListSetupItem2 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitEditMenuWidget_OnActionNeedListSetupItem2) == 0x000008, "Wrong alignment on EndGambitEditMenuWidget_OnActionNeedListSetupItem2");
static_assert(sizeof(EndGambitEditMenuWidget_OnActionNeedListSetupItem2) == 0x000010, "Wrong size on EndGambitEditMenuWidget_OnActionNeedListSetupItem2");
static_assert(offsetof(EndGambitEditMenuWidget_OnActionNeedListSetupItem2, ItemWidget) == 0x000000, "Member 'EndGambitEditMenuWidget_OnActionNeedListSetupItem2::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitEditMenuWidget_OnActionNeedListSetupItem2, CellIndex) == 0x000008, "Member 'EndGambitEditMenuWidget_OnActionNeedListSetupItem2::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnConditionListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndGambitEditMenuWidget_OnConditionListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitEditMenuWidget_OnConditionListPressedItem) == 0x000004, "Wrong alignment on EndGambitEditMenuWidget_OnConditionListPressedItem");
static_assert(sizeof(EndGambitEditMenuWidget_OnConditionListPressedItem) == 0x000004, "Wrong size on EndGambitEditMenuWidget_OnConditionListPressedItem");
static_assert(offsetof(EndGambitEditMenuWidget_OnConditionListPressedItem, CellIndex) == 0x000000, "Member 'EndGambitEditMenuWidget_OnConditionListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnConditionListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndGambitEditMenuWidget_OnConditionListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitEditMenuWidget_OnConditionListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndGambitEditMenuWidget_OnConditionListSelectedIndexChanged");
static_assert(sizeof(EndGambitEditMenuWidget_OnConditionListSelectedIndexChanged) == 0x000004, "Wrong size on EndGambitEditMenuWidget_OnConditionListSelectedIndexChanged");
static_assert(offsetof(EndGambitEditMenuWidget_OnConditionListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndGambitEditMenuWidget_OnConditionListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnConditionListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndGambitEditMenuWidget_OnConditionListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitEditMenuWidget_OnConditionListSetupItem) == 0x000008, "Wrong alignment on EndGambitEditMenuWidget_OnConditionListSetupItem");
static_assert(sizeof(EndGambitEditMenuWidget_OnConditionListSetupItem) == 0x000010, "Wrong size on EndGambitEditMenuWidget_OnConditionListSetupItem");
static_assert(offsetof(EndGambitEditMenuWidget_OnConditionListSetupItem, ItemWidget) == 0x000000, "Member 'EndGambitEditMenuWidget_OnConditionListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitEditMenuWidget_OnConditionListSetupItem, CellIndex) == 0x000008, "Member 'EndGambitEditMenuWidget_OnConditionListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnConfirmPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndGambitEditMenuWidget_OnConfirmPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitEditMenuWidget_OnConfirmPressedItem) == 0x000004, "Wrong alignment on EndGambitEditMenuWidget_OnConfirmPressedItem");
static_assert(sizeof(EndGambitEditMenuWidget_OnConfirmPressedItem) == 0x000004, "Wrong size on EndGambitEditMenuWidget_OnConfirmPressedItem");
static_assert(offsetof(EndGambitEditMenuWidget_OnConfirmPressedItem, CellIndex) == 0x000000, "Member 'EndGambitEditMenuWidget_OnConfirmPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnConfirmSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndGambitEditMenuWidget_OnConfirmSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGambitEditMenuWidget_OnConfirmSelectedIndexChanged) == 0x000004, "Wrong alignment on EndGambitEditMenuWidget_OnConfirmSelectedIndexChanged");
static_assert(sizeof(EndGambitEditMenuWidget_OnConfirmSelectedIndexChanged) == 0x000004, "Wrong size on EndGambitEditMenuWidget_OnConfirmSelectedIndexChanged");
static_assert(offsetof(EndGambitEditMenuWidget_OnConfirmSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndGambitEditMenuWidget_OnConfirmSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnIconListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndGambitEditMenuWidget_OnIconListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitEditMenuWidget_OnIconListSetupItem) == 0x000008, "Wrong alignment on EndGambitEditMenuWidget_OnIconListSetupItem");
static_assert(sizeof(EndGambitEditMenuWidget_OnIconListSetupItem) == 0x000010, "Wrong size on EndGambitEditMenuWidget_OnIconListSetupItem");
static_assert(offsetof(EndGambitEditMenuWidget_OnIconListSetupItem, ItemWidget) == 0x000000, "Member 'EndGambitEditMenuWidget_OnIconListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitEditMenuWidget_OnIconListSetupItem, CellIndex) == 0x000008, "Member 'EndGambitEditMenuWidget_OnIconListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnIconListSetupItem2
// 0x0010 (0x0010 - 0x0000)
struct EndGambitEditMenuWidget_OnIconListSetupItem2 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitEditMenuWidget_OnIconListSetupItem2) == 0x000008, "Wrong alignment on EndGambitEditMenuWidget_OnIconListSetupItem2");
static_assert(sizeof(EndGambitEditMenuWidget_OnIconListSetupItem2) == 0x000010, "Wrong size on EndGambitEditMenuWidget_OnIconListSetupItem2");
static_assert(offsetof(EndGambitEditMenuWidget_OnIconListSetupItem2, ItemWidget) == 0x000000, "Member 'EndGambitEditMenuWidget_OnIconListSetupItem2::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitEditMenuWidget_OnIconListSetupItem2, CellIndex) == 0x000008, "Member 'EndGambitEditMenuWidget_OnIconListSetupItem2::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnIconListSetupItem3
// 0x0010 (0x0010 - 0x0000)
struct EndGambitEditMenuWidget_OnIconListSetupItem3 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitEditMenuWidget_OnIconListSetupItem3) == 0x000008, "Wrong alignment on EndGambitEditMenuWidget_OnIconListSetupItem3");
static_assert(sizeof(EndGambitEditMenuWidget_OnIconListSetupItem3) == 0x000010, "Wrong size on EndGambitEditMenuWidget_OnIconListSetupItem3");
static_assert(offsetof(EndGambitEditMenuWidget_OnIconListSetupItem3, ItemWidget) == 0x000000, "Member 'EndGambitEditMenuWidget_OnIconListSetupItem3::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitEditMenuWidget_OnIconListSetupItem3, CellIndex) == 0x000008, "Member 'EndGambitEditMenuWidget_OnIconListSetupItem3::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnIconListSetupItem4
// 0x0010 (0x0010 - 0x0000)
struct EndGambitEditMenuWidget_OnIconListSetupItem4 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitEditMenuWidget_OnIconListSetupItem4) == 0x000008, "Wrong alignment on EndGambitEditMenuWidget_OnIconListSetupItem4");
static_assert(sizeof(EndGambitEditMenuWidget_OnIconListSetupItem4) == 0x000010, "Wrong size on EndGambitEditMenuWidget_OnIconListSetupItem4");
static_assert(offsetof(EndGambitEditMenuWidget_OnIconListSetupItem4, ItemWidget) == 0x000000, "Member 'EndGambitEditMenuWidget_OnIconListSetupItem4::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitEditMenuWidget_OnIconListSetupItem4, CellIndex) == 0x000008, "Member 'EndGambitEditMenuWidget_OnIconListSetupItem4::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnPresetListBSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndGambitEditMenuWidget_OnPresetListBSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitEditMenuWidget_OnPresetListBSetupItem) == 0x000008, "Wrong alignment on EndGambitEditMenuWidget_OnPresetListBSetupItem");
static_assert(sizeof(EndGambitEditMenuWidget_OnPresetListBSetupItem) == 0x000010, "Wrong size on EndGambitEditMenuWidget_OnPresetListBSetupItem");
static_assert(offsetof(EndGambitEditMenuWidget_OnPresetListBSetupItem, ItemWidget) == 0x000000, "Member 'EndGambitEditMenuWidget_OnPresetListBSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitEditMenuWidget_OnPresetListBSetupItem, CellIndex) == 0x000008, "Member 'EndGambitEditMenuWidget_OnPresetListBSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitEditMenuWidget.OnPresetListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndGambitEditMenuWidget_OnPresetListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitEditMenuWidget_OnPresetListSetupItem) == 0x000008, "Wrong alignment on EndGambitEditMenuWidget_OnPresetListSetupItem");
static_assert(sizeof(EndGambitEditMenuWidget_OnPresetListSetupItem) == 0x000010, "Wrong size on EndGambitEditMenuWidget_OnPresetListSetupItem");
static_assert(offsetof(EndGambitEditMenuWidget_OnPresetListSetupItem, ItemWidget) == 0x000000, "Member 'EndGambitEditMenuWidget_OnPresetListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitEditMenuWidget_OnPresetListSetupItem, CellIndex) == 0x000008, "Member 'EndGambitEditMenuWidget_OnPresetListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndGambitInGameMenuWidget.OnResultInfoSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndGambitInGameMenuWidget_OnResultInfoSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGambitInGameMenuWidget_OnResultInfoSetupItem) == 0x000008, "Wrong alignment on EndGambitInGameMenuWidget_OnResultInfoSetupItem");
static_assert(sizeof(EndGambitInGameMenuWidget_OnResultInfoSetupItem) == 0x000010, "Wrong size on EndGambitInGameMenuWidget_OnResultInfoSetupItem");
static_assert(offsetof(EndGambitInGameMenuWidget_OnResultInfoSetupItem, ItemWidget) == 0x000000, "Member 'EndGambitInGameMenuWidget_OnResultInfoSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGambitInGameMenuWidget_OnResultInfoSetupItem, CellIndex) == 0x000008, "Member 'EndGambitInGameMenuWidget_OnResultInfoSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndGameMode.InitEditorGameMode
// 0x0038 (0x0038 - 0x0000)
struct EndGameMode_InitEditorGameMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuickStart;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InCutName;                                         // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameMode_InitEditorGameMode) == 0x000008, "Wrong alignment on EndGameMode_InitEditorGameMode");
static_assert(sizeof(EndGameMode_InitEditorGameMode) == 0x000038, "Wrong size on EndGameMode_InitEditorGameMode");
static_assert(offsetof(EndGameMode_InitEditorGameMode, WorldContextObject) == 0x000000, "Member 'EndGameMode_InitEditorGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorGameMode, LocationName) == 0x000008, "Member 'EndGameMode_InitEditorGameMode::LocationName' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorGameMode, QuickStart) == 0x000010, "Member 'EndGameMode_InitEditorGameMode::QuickStart' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorGameMode, InCutName) == 0x000014, "Member 'EndGameMode_InitEditorGameMode::InCutName' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorGameMode, LatentInfo) == 0x000020, "Member 'EndGameMode_InitEditorGameMode::LatentInfo' has a wrong offset!");

// Function EndGame.EndGameMode.InitEditorPreviewGameMode
// 0x0020 (0x0020 - 0x0000)
struct EndGameMode_InitEditorPreviewGameMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameMode_InitEditorPreviewGameMode) == 0x000008, "Wrong alignment on EndGameMode_InitEditorPreviewGameMode");
static_assert(sizeof(EndGameMode_InitEditorPreviewGameMode) == 0x000020, "Wrong size on EndGameMode_InitEditorPreviewGameMode");
static_assert(offsetof(EndGameMode_InitEditorPreviewGameMode, WorldContextObject) == 0x000000, "Member 'EndGameMode_InitEditorPreviewGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorPreviewGameMode, LatentInfo) == 0x000008, "Member 'EndGameMode_InitEditorPreviewGameMode::LatentInfo' has a wrong offset!");

// Function EndGame.EndGauge.SetFillColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndGauge_SetFillColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetFillColorAndOpacity) == 0x000004, "Wrong alignment on EndGauge_SetFillColorAndOpacity");
static_assert(sizeof(EndGauge_SetFillColorAndOpacity) == 0x000010, "Wrong size on EndGauge_SetFillColorAndOpacity");
static_assert(offsetof(EndGauge_SetFillColorAndOpacity, InColor) == 0x000000, "Member 'EndGauge_SetFillColorAndOpacity::InColor' has a wrong offset!");

// Function EndGame.EndGauge.SetFillEndColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndGauge_SetFillEndColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetFillEndColorAndOpacity) == 0x000004, "Wrong alignment on EndGauge_SetFillEndColorAndOpacity");
static_assert(sizeof(EndGauge_SetFillEndColorAndOpacity) == 0x000010, "Wrong size on EndGauge_SetFillEndColorAndOpacity");
static_assert(offsetof(EndGauge_SetFillEndColorAndOpacity, InColor) == 0x000000, "Member 'EndGauge_SetFillEndColorAndOpacity::InColor' has a wrong offset!");

// Function EndGame.EndGauge.SetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct EndGauge_SetMaxValue final
{
public:
	float                                         InMaxValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetMaxValue) == 0x000004, "Wrong alignment on EndGauge_SetMaxValue");
static_assert(sizeof(EndGauge_SetMaxValue) == 0x000004, "Wrong size on EndGauge_SetMaxValue");
static_assert(offsetof(EndGauge_SetMaxValue, InMaxValue) == 0x000000, "Member 'EndGauge_SetMaxValue::InMaxValue' has a wrong offset!");

// Function EndGame.EndGauge.SetPreviewColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndGauge_SetPreviewColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetPreviewColorAndOpacity) == 0x000004, "Wrong alignment on EndGauge_SetPreviewColorAndOpacity");
static_assert(sizeof(EndGauge_SetPreviewColorAndOpacity) == 0x000010, "Wrong size on EndGauge_SetPreviewColorAndOpacity");
static_assert(offsetof(EndGauge_SetPreviewColorAndOpacity, InColor) == 0x000000, "Member 'EndGauge_SetPreviewColorAndOpacity::InColor' has a wrong offset!");

// Function EndGame.EndGauge.SetPreviewValue
// 0x0004 (0x0004 - 0x0000)
struct EndGauge_SetPreviewValue final
{
public:
	float                                         InPreviewValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetPreviewValue) == 0x000004, "Wrong alignment on EndGauge_SetPreviewValue");
static_assert(sizeof(EndGauge_SetPreviewValue) == 0x000004, "Wrong size on EndGauge_SetPreviewValue");
static_assert(offsetof(EndGauge_SetPreviewValue, InPreviewValue) == 0x000000, "Member 'EndGauge_SetPreviewValue::InPreviewValue' has a wrong offset!");

// Function EndGame.EndGauge.SetValue
// 0x0004 (0x0004 - 0x0000)
struct EndGauge_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetValue) == 0x000004, "Wrong alignment on EndGauge_SetValue");
static_assert(sizeof(EndGauge_SetValue) == 0x000004, "Wrong size on EndGauge_SetValue");
static_assert(offsetof(EndGauge_SetValue, InValue) == 0x000000, "Member 'EndGauge_SetValue::InValue' has a wrong offset!");

// Function EndGame.EndWireReelActor.SetWireState
// 0x0001 (0x0001 - 0x0000)
struct EndWireReelActor_SetWireState final
{
public:
	EEndWireReelState                             InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWireReelActor_SetWireState) == 0x000001, "Wrong alignment on EndWireReelActor_SetWireState");
static_assert(sizeof(EndWireReelActor_SetWireState) == 0x000001, "Wrong size on EndWireReelActor_SetWireState");
static_assert(offsetof(EndWireReelActor_SetWireState, InState) == 0x000000, "Member 'EndWireReelActor_SetWireState::InState' has a wrong offset!");

// Function EndGame.EndImage.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndImage_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndImage_GetDynamicMaterial");
static_assert(sizeof(EndImage_GetDynamicMaterial) == 0x000008, "Wrong size on EndImage_GetDynamicMaterial");
static_assert(offsetof(EndImage_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndImage_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndImage.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndImage_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetBlendMode) == 0x000001, "Wrong alignment on EndImage_SetBlendMode");
static_assert(sizeof(EndImage_SetBlendMode) == 0x000001, "Wrong size on EndImage_SetBlendMode");
static_assert(offsetof(EndImage_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndImage_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndImage.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct EndImage_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetBrush) == 0x000008, "Wrong alignment on EndImage_SetBrush");
static_assert(sizeof(EndImage_SetBrush) == 0x000088, "Wrong size on EndImage_SetBrush");
static_assert(offsetof(EndImage_SetBrush, InBrush) == 0x000000, "Member 'EndImage_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndImage.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndImage_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndImage_SetBrushFromAsset");
static_assert(sizeof(EndImage_SetBrushFromAsset) == 0x000008, "Wrong size on EndImage_SetBrushFromAsset");
static_assert(offsetof(EndImage_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndImage_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndImage.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndImage_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndImage_SetBrushFromMaterial");
static_assert(sizeof(EndImage_SetBrushFromMaterial) == 0x000008, "Wrong size on EndImage_SetBrushFromMaterial");
static_assert(offsetof(EndImage_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndImage_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndImage.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct EndImage_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndImage_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndImage_SetBrushFromTexture");
static_assert(sizeof(EndImage_SetBrushFromTexture) == 0x000010, "Wrong size on EndImage_SetBrushFromTexture");
static_assert(offsetof(EndImage_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndImage_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(EndImage_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'EndImage_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function EndGame.EndImage.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct EndImage_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndImage_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on EndImage_SetBrushFromTextureDynamic");
static_assert(sizeof(EndImage_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on EndImage_SetBrushFromTextureDynamic");
static_assert(offsetof(EndImage_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'EndImage_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(EndImage_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'EndImage_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function EndGame.EndImage.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndImage_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndImage_SetColorAndOpacity");
static_assert(sizeof(EndImage_SetColorAndOpacity) == 0x000010, "Wrong size on EndImage_SetColorAndOpacity");
static_assert(offsetof(EndImage_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndImage_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndImage.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndImage_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetOpacity) == 0x000004, "Wrong alignment on EndImage_SetOpacity");
static_assert(sizeof(EndImage_SetOpacity) == 0x000004, "Wrong size on EndImage_SetOpacity");
static_assert(offsetof(EndImage_SetOpacity, InOpacity) == 0x000000, "Member 'EndImage_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndImageSet.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndImageSet_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetBlendMode) == 0x000001, "Wrong alignment on EndImageSet_SetBlendMode");
static_assert(sizeof(EndImageSet_SetBlendMode) == 0x000001, "Wrong size on EndImageSet_SetBlendMode");
static_assert(offsetof(EndImageSet_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndImageSet_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndImageSet.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndImageSet_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndImageSet_SetColorAndOpacity");
static_assert(sizeof(EndImageSet_SetColorAndOpacity) == 0x000010, "Wrong size on EndImageSet_SetColorAndOpacity");
static_assert(offsetof(EndImageSet_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndImageSet_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndImageSet.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndImageSet_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetOpacity) == 0x000004, "Wrong alignment on EndImageSet_SetOpacity");
static_assert(sizeof(EndImageSet_SetOpacity) == 0x000004, "Wrong size on EndImageSet_SetOpacity");
static_assert(offsetof(EndImageSet_SetOpacity, InOpacity) == 0x000000, "Member 'EndImageSet_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndImageSet.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct EndImageSet_SetSelectedIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetSelectedIndex) == 0x000004, "Wrong alignment on EndImageSet_SetSelectedIndex");
static_assert(sizeof(EndImageSet_SetSelectedIndex) == 0x000004, "Wrong size on EndImageSet_SetSelectedIndex");
static_assert(offsetof(EndImageSet_SetSelectedIndex, Index_0) == 0x000000, "Member 'EndImageSet_SetSelectedIndex::Index_0' has a wrong offset!");

// Function EndGame.EndImageSet.SetSimpleMode
// 0x0001 (0x0001 - 0x0000)
struct EndImageSet_SetSimpleMode final
{
public:
	bool                                          bInSimpleMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetSimpleMode) == 0x000001, "Wrong alignment on EndImageSet_SetSimpleMode");
static_assert(sizeof(EndImageSet_SetSimpleMode) == 0x000001, "Wrong size on EndImageSet_SetSimpleMode");
static_assert(offsetof(EndImageSet_SetSimpleMode, bInSimpleMode) == 0x000000, "Member 'EndImageSet_SetSimpleMode::bInSimpleMode' has a wrong offset!");

// Function EndGame.EndImageSet.SetSize
// 0x0008 (0x0008 - 0x0000)
struct EndImageSet_SetSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetSize) == 0x000004, "Wrong alignment on EndImageSet_SetSize");
static_assert(sizeof(EndImageSet_SetSize) == 0x000008, "Wrong size on EndImageSet_SetSize");
static_assert(offsetof(EndImageSet_SetSize, InSize) == 0x000000, "Member 'EndImageSet_SetSize::InSize' has a wrong offset!");

// Function EndGame.EndInstancedLightweightPhysicsComponent.AddPhysicsInstance
// 0x0050 (0x0050 - 0x0000)
struct EndInstancedLightweightPhysicsComponent_AddPhysicsInstance final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Impulse;                                           // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance) == 0x000010, "Wrong alignment on EndInstancedLightweightPhysicsComponent_AddPhysicsInstance");
static_assert(sizeof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance) == 0x000050, "Wrong size on EndInstancedLightweightPhysicsComponent_AddPhysicsInstance");
static_assert(offsetof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance, Transform) == 0x000000, "Member 'EndInstancedLightweightPhysicsComponent_AddPhysicsInstance::Transform' has a wrong offset!");
static_assert(offsetof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance, Impulse) == 0x000030, "Member 'EndInstancedLightweightPhysicsComponent_AddPhysicsInstance::Impulse' has a wrong offset!");
static_assert(offsetof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance, DelayTime) == 0x00003C, "Member 'EndInstancedLightweightPhysicsComponent_AddPhysicsInstance::DelayTime' has a wrong offset!");
static_assert(offsetof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance, LifeTime) == 0x000040, "Member 'EndInstancedLightweightPhysicsComponent_AddPhysicsInstance::LifeTime' has a wrong offset!");

// Function EndGame.EndItemCraftMenu.OnCategorySwitch2SetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndItemCraftMenu_OnCategorySwitch2SetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndItemCraftMenu_OnCategorySwitch2SetupItem) == 0x000008, "Wrong alignment on EndItemCraftMenu_OnCategorySwitch2SetupItem");
static_assert(sizeof(EndItemCraftMenu_OnCategorySwitch2SetupItem) == 0x000010, "Wrong size on EndItemCraftMenu_OnCategorySwitch2SetupItem");
static_assert(offsetof(EndItemCraftMenu_OnCategorySwitch2SetupItem, ItemWidget) == 0x000000, "Member 'EndItemCraftMenu_OnCategorySwitch2SetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndItemCraftMenu_OnCategorySwitch2SetupItem, CellIndex) == 0x000008, "Member 'EndItemCraftMenu_OnCategorySwitch2SetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndItemCraftMenu.OnCraftRecipeMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndItemCraftMenu_OnCraftRecipeMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemCraftMenu_OnCraftRecipeMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndItemCraftMenu_OnCraftRecipeMenuSelectedIndexChanged");
static_assert(sizeof(EndItemCraftMenu_OnCraftRecipeMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndItemCraftMenu_OnCraftRecipeMenuSelectedIndexChanged");
static_assert(offsetof(EndItemCraftMenu_OnCraftRecipeMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndItemCraftMenu_OnCraftRecipeMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndItemCraftMenu.OnCraftRecipeMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndItemCraftMenu_OnCraftRecipeMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndItemCraftMenu_OnCraftRecipeMenuSetupItem) == 0x000008, "Wrong alignment on EndItemCraftMenu_OnCraftRecipeMenuSetupItem");
static_assert(sizeof(EndItemCraftMenu_OnCraftRecipeMenuSetupItem) == 0x000010, "Wrong size on EndItemCraftMenu_OnCraftRecipeMenuSetupItem");
static_assert(offsetof(EndItemCraftMenu_OnCraftRecipeMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndItemCraftMenu_OnCraftRecipeMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndItemCraftMenu_OnCraftRecipeMenuSetupItem, CellIndex) == 0x000008, "Member 'EndItemCraftMenu_OnCraftRecipeMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndItemCraftMenu.OnLeftMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndItemCraftMenu_OnLeftMenuMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemCraftMenu_OnLeftMenuMeasureItem) == 0x000004, "Wrong alignment on EndItemCraftMenu_OnLeftMenuMeasureItem");
static_assert(sizeof(EndItemCraftMenu_OnLeftMenuMeasureItem) == 0x00000C, "Wrong size on EndItemCraftMenu_OnLeftMenuMeasureItem");
static_assert(offsetof(EndItemCraftMenu_OnLeftMenuMeasureItem, CellIndex) == 0x000000, "Member 'EndItemCraftMenu_OnLeftMenuMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndItemCraftMenu_OnLeftMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndItemCraftMenu_OnLeftMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndItemCraftMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndItemCraftMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemCraftMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndItemCraftMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndItemCraftMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndItemCraftMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndItemCraftMenu_OnLeftMenuPressedItem, CellIndex) == 0x000000, "Member 'EndItemCraftMenu_OnLeftMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndItemCraftMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndItemCraftMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndItemCraftMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndItemCraftMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndItemCraftMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndItemCraftMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndItemCraftMenu_OnLeftMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndItemCraftMenu_OnLeftMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndItemCraftMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndItemCraftMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndItemCraftMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndItemCraftMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndItemCraftMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndItemCraftMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndItemCraftMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndItemCraftMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndItemCraftMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndItemCraftMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndItemCraftMenu.OnStatusListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndItemCraftMenu_OnStatusListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndItemCraftMenu_OnStatusListSetupItem) == 0x000008, "Wrong alignment on EndItemCraftMenu_OnStatusListSetupItem");
static_assert(sizeof(EndItemCraftMenu_OnStatusListSetupItem) == 0x000010, "Wrong size on EndItemCraftMenu_OnStatusListSetupItem");
static_assert(offsetof(EndItemCraftMenu_OnStatusListSetupItem, ItemWidget) == 0x000000, "Member 'EndItemCraftMenu_OnStatusListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndItemCraftMenu_OnStatusListSetupItem, CellIndex) == 0x000008, "Member 'EndItemCraftMenu_OnStatusListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndLevelLoader.FindActorFromLevel
// 0x0020 (0x0020 - 0x0000)
struct EndLevelLoader_FindActorFromLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndRenderingScene                            rendering_scene;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_FindActorFromLevel) == 0x000008, "Wrong alignment on EndLevelLoader_FindActorFromLevel");
static_assert(sizeof(EndLevelLoader_FindActorFromLevel) == 0x000020, "Wrong size on EndLevelLoader_FindActorFromLevel");
static_assert(offsetof(EndLevelLoader_FindActorFromLevel, LevelName) == 0x000000, "Member 'EndLevelLoader_FindActorFromLevel::LevelName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindActorFromLevel, ActorName) == 0x000008, "Member 'EndLevelLoader_FindActorFromLevel::ActorName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindActorFromLevel, rendering_scene) == 0x000010, "Member 'EndLevelLoader_FindActorFromLevel::rendering_scene' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindActorFromLevel, ReturnValue) == 0x000018, "Member 'EndLevelLoader_FindActorFromLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.FindActorFromWorld
// 0x0018 (0x0018 - 0x0000)
struct EndLevelLoader_FindActorFromWorld final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndRenderingScene                            rendering_scene;                                   // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_FindActorFromWorld) == 0x000008, "Wrong alignment on EndLevelLoader_FindActorFromWorld");
static_assert(sizeof(EndLevelLoader_FindActorFromWorld) == 0x000018, "Wrong size on EndLevelLoader_FindActorFromWorld");
static_assert(offsetof(EndLevelLoader_FindActorFromWorld, ActorName) == 0x000000, "Member 'EndLevelLoader_FindActorFromWorld::ActorName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindActorFromWorld, rendering_scene) == 0x000008, "Member 'EndLevelLoader_FindActorFromWorld::rendering_scene' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindActorFromWorld, ReturnValue) == 0x000010, "Member 'EndLevelLoader_FindActorFromWorld::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.FindCharacterFromLevel
// 0x0018 (0x0018 - 0x0000)
struct EndLevelLoader_FindCharacterFromLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacterBase*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_FindCharacterFromLevel) == 0x000008, "Wrong alignment on EndLevelLoader_FindCharacterFromLevel");
static_assert(sizeof(EndLevelLoader_FindCharacterFromLevel) == 0x000018, "Wrong size on EndLevelLoader_FindCharacterFromLevel");
static_assert(offsetof(EndLevelLoader_FindCharacterFromLevel, LevelName) == 0x000000, "Member 'EndLevelLoader_FindCharacterFromLevel::LevelName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindCharacterFromLevel, ActorName) == 0x000008, "Member 'EndLevelLoader_FindCharacterFromLevel::ActorName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindCharacterFromLevel, ReturnValue) == 0x000010, "Member 'EndLevelLoader_FindCharacterFromLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.FindCharacterFromWorld
// 0x0010 (0x0010 - 0x0000)
struct EndLevelLoader_FindCharacterFromWorld final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacterBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_FindCharacterFromWorld) == 0x000008, "Wrong alignment on EndLevelLoader_FindCharacterFromWorld");
static_assert(sizeof(EndLevelLoader_FindCharacterFromWorld) == 0x000010, "Wrong size on EndLevelLoader_FindCharacterFromWorld");
static_assert(offsetof(EndLevelLoader_FindCharacterFromWorld, ActorName) == 0x000000, "Member 'EndLevelLoader_FindCharacterFromWorld::ActorName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindCharacterFromWorld, ReturnValue) == 0x000008, "Member 'EndLevelLoader_FindCharacterFromWorld::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevelGroups
// 0x0038 (0x0038 - 0x0000)
struct EndLevelLoader_LoadStreamLevelGroups final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelNames;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevelGroups) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevelGroups");
static_assert(sizeof(EndLevelLoader_LoadStreamLevelGroups) == 0x000038, "Wrong size on EndLevelLoader_LoadStreamLevelGroups");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroups, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevelGroups::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroups, Priority) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevelGroups::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroups, LevelNames) == 0x000010, "Member 'EndLevelLoader_LoadStreamLevelGroups::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroups, LatentInfo) == 0x000020, "Member 'EndLevelLoader_LoadStreamLevelGroups::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevelSingle
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_LoadStreamLevelSingle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelNames;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevelSingle) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevelSingle");
static_assert(sizeof(EndLevelLoader_LoadStreamLevelSingle) == 0x000030, "Wrong size on EndLevelLoader_LoadStreamLevelSingle");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingle, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevelSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingle, Priority) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevelSingle::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingle, LevelNames) == 0x00000C, "Member 'EndLevelLoader_LoadStreamLevelSingle::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingle, LatentInfo) == 0x000018, "Member 'EndLevelLoader_LoadStreamLevelSingle::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevelSpec
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_LoadStreamLevelSpec final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevelSpec) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevelSpec");
static_assert(sizeof(EndLevelLoader_LoadStreamLevelSpec) == 0x000030, "Wrong size on EndLevelLoader_LoadStreamLevelSpec");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpec, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevelSpec::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpec, Priority) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevelSpec::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpec, SpecName) == 0x00000C, "Member 'EndLevelLoader_LoadStreamLevelSpec::SpecName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpec, LatentInfo) == 0x000018, "Member 'EndLevelLoader_LoadStreamLevelSpec::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.MakeLongLevelName
// 0x0020 (0x0020 - 0x0000)
struct EndLevelLoader_MakeLongLevelName final
{
public:
	class FString                                 ShortName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_MakeLongLevelName) == 0x000008, "Wrong alignment on EndLevelLoader_MakeLongLevelName");
static_assert(sizeof(EndLevelLoader_MakeLongLevelName) == 0x000020, "Wrong size on EndLevelLoader_MakeLongLevelName");
static_assert(offsetof(EndLevelLoader_MakeLongLevelName, ShortName) == 0x000000, "Member 'EndLevelLoader_MakeLongLevelName::ShortName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_MakeLongLevelName, ReturnValue) == 0x000010, "Member 'EndLevelLoader_MakeLongLevelName::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.UnloadStreamLevelGroups
// 0x0038 (0x0038 - 0x0000)
struct EndLevelLoader_UnloadStreamLevelGroups final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelNames;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_UnloadStreamLevelGroups) == 0x000008, "Wrong alignment on EndLevelLoader_UnloadStreamLevelGroups");
static_assert(sizeof(EndLevelLoader_UnloadStreamLevelGroups) == 0x000038, "Wrong size on EndLevelLoader_UnloadStreamLevelGroups");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelGroups, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_UnloadStreamLevelGroups::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelGroups, Priority) == 0x000008, "Member 'EndLevelLoader_UnloadStreamLevelGroups::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelGroups, LevelNames) == 0x000010, "Member 'EndLevelLoader_UnloadStreamLevelGroups::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelGroups, LatentInfo) == 0x000020, "Member 'EndLevelLoader_UnloadStreamLevelGroups::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.UnloadStreamLevelSingle
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_UnloadStreamLevelSingle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelNames;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_UnloadStreamLevelSingle) == 0x000008, "Wrong alignment on EndLevelLoader_UnloadStreamLevelSingle");
static_assert(sizeof(EndLevelLoader_UnloadStreamLevelSingle) == 0x000030, "Wrong size on EndLevelLoader_UnloadStreamLevelSingle");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelSingle, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_UnloadStreamLevelSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelSingle, Priority) == 0x000008, "Member 'EndLevelLoader_UnloadStreamLevelSingle::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelSingle, LevelNames) == 0x00000C, "Member 'EndLevelLoader_UnloadStreamLevelSingle::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelSingle, LatentInfo) == 0x000018, "Member 'EndLevelLoader_UnloadStreamLevelSingle::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.UnLoadStreamLevelSpec
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_UnLoadStreamLevelSpec final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_UnLoadStreamLevelSpec) == 0x000008, "Wrong alignment on EndLevelLoader_UnLoadStreamLevelSpec");
static_assert(sizeof(EndLevelLoader_UnLoadStreamLevelSpec) == 0x000030, "Wrong size on EndLevelLoader_UnLoadStreamLevelSpec");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpec, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_UnLoadStreamLevelSpec::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpec, Priority) == 0x000008, "Member 'EndLevelLoader_UnLoadStreamLevelSpec::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpec, SpecName) == 0x00000C, "Member 'EndLevelLoader_UnLoadStreamLevelSpec::SpecName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpec, LatentInfo) == 0x000018, "Member 'EndLevelLoader_UnLoadStreamLevelSpec::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.WaitStreamLevelEmpty
// 0x0020 (0x0020 - 0x0000)
struct EndLevelLoader_WaitStreamLevelEmpty final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_WaitStreamLevelEmpty) == 0x000008, "Wrong alignment on EndLevelLoader_WaitStreamLevelEmpty");
static_assert(sizeof(EndLevelLoader_WaitStreamLevelEmpty) == 0x000020, "Wrong size on EndLevelLoader_WaitStreamLevelEmpty");
static_assert(offsetof(EndLevelLoader_WaitStreamLevelEmpty, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_WaitStreamLevelEmpty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_WaitStreamLevelEmpty, LatentInfo) == 0x000008, "Member 'EndLevelLoader_WaitStreamLevelEmpty::LatentInfo' has a wrong offset!");

// Function EndGame.EndLoadingScreen.OnTipListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndLoadingScreen_OnTipListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLoadingScreen_OnTipListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndLoadingScreen_OnTipListSelectedIndexChanged");
static_assert(sizeof(EndLoadingScreen_OnTipListSelectedIndexChanged) == 0x000004, "Wrong size on EndLoadingScreen_OnTipListSelectedIndexChanged");
static_assert(offsetof(EndLoadingScreen_OnTipListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndLoadingScreen_OnTipListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndLoadingScreen.OnTipListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndLoadingScreen_OnTipListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndLoadingScreen_OnTipListSetupItem) == 0x000008, "Wrong alignment on EndLoadingScreen_OnTipListSetupItem");
static_assert(sizeof(EndLoadingScreen_OnTipListSetupItem) == 0x000010, "Wrong size on EndLoadingScreen_OnTipListSetupItem");
static_assert(offsetof(EndLoadingScreen_OnTipListSetupItem, ItemWidget) == 0x000000, "Member 'EndLoadingScreen_OnTipListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndLoadingScreen_OnTipListSetupItem, CellIndex) == 0x000008, "Member 'EndLoadingScreen_OnTipListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnMagicButtonHover
// 0x0001 (0x0001 - 0x0000)
struct EndMagicWindow_OnMagicButtonHover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnMagicButtonHover) == 0x000001, "Wrong alignment on EndMagicWindow_OnMagicButtonHover");
static_assert(sizeof(EndMagicWindow_OnMagicButtonHover) == 0x000001, "Wrong size on EndMagicWindow_OnMagicButtonHover");
static_assert(offsetof(EndMagicWindow_OnMagicButtonHover, ReturnValue) == 0x000000, "Member 'EndMagicWindow_OnMagicButtonHover::ReturnValue' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnMagicButtonUnhover
// 0x0001 (0x0001 - 0x0000)
struct EndMagicWindow_OnMagicButtonUnhover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnMagicButtonUnhover) == 0x000001, "Wrong alignment on EndMagicWindow_OnMagicButtonUnhover");
static_assert(sizeof(EndMagicWindow_OnMagicButtonUnhover) == 0x000001, "Wrong size on EndMagicWindow_OnMagicButtonUnhover");
static_assert(offsetof(EndMagicWindow_OnMagicButtonUnhover, ReturnValue) == 0x000000, "Member 'EndMagicWindow_OnMagicButtonUnhover::ReturnValue' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnMagicListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMagicWindow_OnMagicListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnMagicListMeasureItem) == 0x000004, "Wrong alignment on EndMagicWindow_OnMagicListMeasureItem");
static_assert(sizeof(EndMagicWindow_OnMagicListMeasureItem) == 0x00000C, "Wrong size on EndMagicWindow_OnMagicListMeasureItem");
static_assert(offsetof(EndMagicWindow_OnMagicListMeasureItem, CellIndex) == 0x000000, "Member 'EndMagicWindow_OnMagicListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMagicWindow_OnMagicListMeasureItem, ReturnValue) == 0x000004, "Member 'EndMagicWindow_OnMagicListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnMagicListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMagicWindow_OnMagicListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnMagicListPressedItem) == 0x000004, "Wrong alignment on EndMagicWindow_OnMagicListPressedItem");
static_assert(sizeof(EndMagicWindow_OnMagicListPressedItem) == 0x000004, "Wrong size on EndMagicWindow_OnMagicListPressedItem");
static_assert(offsetof(EndMagicWindow_OnMagicListPressedItem, CellIndex) == 0x000000, "Member 'EndMagicWindow_OnMagicListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnMagicListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMagicWindow_OnMagicListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnMagicListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMagicWindow_OnMagicListSelectedIndexChanged");
static_assert(sizeof(EndMagicWindow_OnMagicListSelectedIndexChanged) == 0x000004, "Wrong size on EndMagicWindow_OnMagicListSelectedIndexChanged");
static_assert(offsetof(EndMagicWindow_OnMagicListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMagicWindow_OnMagicListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnMagicListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMagicWindow_OnMagicListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMagicWindow_OnMagicListSetupItem) == 0x000008, "Wrong alignment on EndMagicWindow_OnMagicListSetupItem");
static_assert(sizeof(EndMagicWindow_OnMagicListSetupItem) == 0x000010, "Wrong size on EndMagicWindow_OnMagicListSetupItem");
static_assert(offsetof(EndMagicWindow_OnMagicListSetupItem, ItemWidget) == 0x000000, "Member 'EndMagicWindow_OnMagicListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMagicWindow_OnMagicListSetupItem, CellIndex) == 0x000008, "Member 'EndMagicWindow_OnMagicListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnMemberListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMagicWindow_OnMemberListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnMemberListMeasureItem) == 0x000004, "Wrong alignment on EndMagicWindow_OnMemberListMeasureItem");
static_assert(sizeof(EndMagicWindow_OnMemberListMeasureItem) == 0x00000C, "Wrong size on EndMagicWindow_OnMemberListMeasureItem");
static_assert(offsetof(EndMagicWindow_OnMemberListMeasureItem, CellIndex) == 0x000000, "Member 'EndMagicWindow_OnMemberListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMagicWindow_OnMemberListMeasureItem, ReturnValue) == 0x000004, "Member 'EndMagicWindow_OnMemberListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnMemberListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMagicWindow_OnMemberListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnMemberListPressedItem) == 0x000004, "Wrong alignment on EndMagicWindow_OnMemberListPressedItem");
static_assert(sizeof(EndMagicWindow_OnMemberListPressedItem) == 0x000004, "Wrong size on EndMagicWindow_OnMemberListPressedItem");
static_assert(offsetof(EndMagicWindow_OnMemberListPressedItem, CellIndex) == 0x000000, "Member 'EndMagicWindow_OnMemberListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnMemberListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMagicWindow_OnMemberListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMagicWindow_OnMemberListSelectedIndexChanged");
static_assert(sizeof(EndMagicWindow_OnMemberListSelectedIndexChanged) == 0x000004, "Wrong size on EndMagicWindow_OnMemberListSelectedIndexChanged");
static_assert(offsetof(EndMagicWindow_OnMemberListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMagicWindow_OnMemberListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnMemberListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMagicWindow_OnMemberListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMagicWindow_OnMemberListSetupItem) == 0x000008, "Wrong alignment on EndMagicWindow_OnMemberListSetupItem");
static_assert(sizeof(EndMagicWindow_OnMemberListSetupItem) == 0x000010, "Wrong size on EndMagicWindow_OnMemberListSetupItem");
static_assert(offsetof(EndMagicWindow_OnMemberListSetupItem, ItemWidget) == 0x000000, "Member 'EndMagicWindow_OnMemberListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMagicWindow_OnMemberListSetupItem, CellIndex) == 0x000008, "Member 'EndMagicWindow_OnMemberListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnRecoverListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMagicWindow_OnRecoverListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnRecoverListMeasureItem) == 0x000004, "Wrong alignment on EndMagicWindow_OnRecoverListMeasureItem");
static_assert(sizeof(EndMagicWindow_OnRecoverListMeasureItem) == 0x00000C, "Wrong size on EndMagicWindow_OnRecoverListMeasureItem");
static_assert(offsetof(EndMagicWindow_OnRecoverListMeasureItem, CellIndex) == 0x000000, "Member 'EndMagicWindow_OnRecoverListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMagicWindow_OnRecoverListMeasureItem, ReturnValue) == 0x000004, "Member 'EndMagicWindow_OnRecoverListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnRecoverListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMagicWindow_OnRecoverListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnRecoverListPressedItem) == 0x000004, "Wrong alignment on EndMagicWindow_OnRecoverListPressedItem");
static_assert(sizeof(EndMagicWindow_OnRecoverListPressedItem) == 0x000004, "Wrong size on EndMagicWindow_OnRecoverListPressedItem");
static_assert(offsetof(EndMagicWindow_OnRecoverListPressedItem, CellIndex) == 0x000000, "Member 'EndMagicWindow_OnRecoverListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnRecoverListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMagicWindow_OnRecoverListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMagicWindow_OnRecoverListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMagicWindow_OnRecoverListSelectedIndexChanged");
static_assert(sizeof(EndMagicWindow_OnRecoverListSelectedIndexChanged) == 0x000004, "Wrong size on EndMagicWindow_OnRecoverListSelectedIndexChanged");
static_assert(offsetof(EndMagicWindow_OnRecoverListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMagicWindow_OnRecoverListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMagicWindow.OnRecoverListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMagicWindow_OnRecoverListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMagicWindow_OnRecoverListSetupItem) == 0x000008, "Wrong alignment on EndMagicWindow_OnRecoverListSetupItem");
static_assert(sizeof(EndMagicWindow_OnRecoverListSetupItem) == 0x000010, "Wrong size on EndMagicWindow_OnRecoverListSetupItem");
static_assert(offsetof(EndMagicWindow_OnRecoverListSetupItem, ItemWidget) == 0x000000, "Member 'EndMagicWindow_OnRecoverListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMagicWindow_OnRecoverListSetupItem, CellIndex) == 0x000008, "Member 'EndMagicWindow_OnRecoverListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingLimitList.OnEndBattleSettingLimitListLevel
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel) == 0x000008, "Wrong alignment on EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel");
static_assert(sizeof(EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel) == 0x000010, "Wrong size on EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel");
static_assert(offsetof(EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel, ItemIndex) == 0x000008, "Member 'EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainExtraOptionsMenu.OnGaugeSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainExtraOptionsMenu_OnGaugeSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainExtraOptionsMenu_OnGaugeSetupItem) == 0x000008, "Wrong alignment on EndMainExtraOptionsMenu_OnGaugeSetupItem");
static_assert(sizeof(EndMainExtraOptionsMenu_OnGaugeSetupItem) == 0x000010, "Wrong size on EndMainExtraOptionsMenu_OnGaugeSetupItem");
static_assert(offsetof(EndMainExtraOptionsMenu_OnGaugeSetupItem, InItemWidget) == 0x000000, "Member 'EndMainExtraOptionsMenu_OnGaugeSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainExtraOptionsMenu_OnGaugeSetupItem, InItemIndex) == 0x000008, "Member 'EndMainExtraOptionsMenu_OnGaugeSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndMainExtraOptionsMenu.OnLeftMenuScrollBoxPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainExtraOptionsMenu_OnLeftMenuScrollBoxPressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainExtraOptionsMenu_OnLeftMenuScrollBoxPressedItem) == 0x000004, "Wrong alignment on EndMainExtraOptionsMenu_OnLeftMenuScrollBoxPressedItem");
static_assert(sizeof(EndMainExtraOptionsMenu_OnLeftMenuScrollBoxPressedItem) == 0x000004, "Wrong size on EndMainExtraOptionsMenu_OnLeftMenuScrollBoxPressedItem");
static_assert(offsetof(EndMainExtraOptionsMenu_OnLeftMenuScrollBoxPressedItem, InItemIndex) == 0x000000, "Member 'EndMainExtraOptionsMenu_OnLeftMenuScrollBoxPressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndMainExtraOptionsMenu.OnLeftMenuScrollBoxSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSelectedIndexChanged");
static_assert(sizeof(EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSelectedIndexChanged) == 0x000004, "Wrong size on EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSelectedIndexChanged");
static_assert(offsetof(EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainExtraOptionsMenu.OnLeftMenuScrollBoxSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSetupItem) == 0x000008, "Wrong alignment on EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSetupItem");
static_assert(sizeof(EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSetupItem) == 0x000010, "Wrong size on EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSetupItem");
static_assert(offsetof(EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSetupItem, InItemWidget) == 0x000000, "Member 'EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSetupItem, InItemIndex) == 0x000008, "Member 'EndMainExtraOptionsMenu_OnLeftMenuScrollBoxSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndMainExtraOptionsMenu.OnSelectListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainExtraOptionsMenu_OnSelectListPressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainExtraOptionsMenu_OnSelectListPressedItem) == 0x000004, "Wrong alignment on EndMainExtraOptionsMenu_OnSelectListPressedItem");
static_assert(sizeof(EndMainExtraOptionsMenu_OnSelectListPressedItem) == 0x000004, "Wrong size on EndMainExtraOptionsMenu_OnSelectListPressedItem");
static_assert(offsetof(EndMainExtraOptionsMenu_OnSelectListPressedItem, InItemIndex) == 0x000000, "Member 'EndMainExtraOptionsMenu_OnSelectListPressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndMainExtraOptionsMenu.OnSelectListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainExtraOptionsMenu_OnSelectListSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainExtraOptionsMenu_OnSelectListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainExtraOptionsMenu_OnSelectListSelectedIndexChanged");
static_assert(sizeof(EndMainExtraOptionsMenu_OnSelectListSelectedIndexChanged) == 0x000004, "Wrong size on EndMainExtraOptionsMenu_OnSelectListSelectedIndexChanged");
static_assert(offsetof(EndMainExtraOptionsMenu_OnSelectListSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndMainExtraOptionsMenu_OnSelectListSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainExtraOptionsMenu.OnSelectListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainExtraOptionsMenu_OnSelectListSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainExtraOptionsMenu_OnSelectListSetupItem) == 0x000008, "Wrong alignment on EndMainExtraOptionsMenu_OnSelectListSetupItem");
static_assert(sizeof(EndMainExtraOptionsMenu_OnSelectListSetupItem) == 0x000010, "Wrong size on EndMainExtraOptionsMenu_OnSelectListSetupItem");
static_assert(offsetof(EndMainExtraOptionsMenu_OnSelectListSetupItem, InItemWidget) == 0x000000, "Member 'EndMainExtraOptionsMenu_OnSelectListSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainExtraOptionsMenu_OnSelectListSetupItem, InItemIndex) == 0x000008, "Member 'EndMainExtraOptionsMenu_OnSelectListSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndMainExtraOptionsMenu.OnSettingListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainExtraOptionsMenu_OnSettingListPressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainExtraOptionsMenu_OnSettingListPressedItem) == 0x000004, "Wrong alignment on EndMainExtraOptionsMenu_OnSettingListPressedItem");
static_assert(sizeof(EndMainExtraOptionsMenu_OnSettingListPressedItem) == 0x000004, "Wrong size on EndMainExtraOptionsMenu_OnSettingListPressedItem");
static_assert(offsetof(EndMainExtraOptionsMenu_OnSettingListPressedItem, InItemIndex) == 0x000000, "Member 'EndMainExtraOptionsMenu_OnSettingListPressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndMainExtraOptionsMenu.OnSettingListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainExtraOptionsMenu_OnSettingListSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainExtraOptionsMenu_OnSettingListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainExtraOptionsMenu_OnSettingListSelectedIndexChanged");
static_assert(sizeof(EndMainExtraOptionsMenu_OnSettingListSelectedIndexChanged) == 0x000004, "Wrong size on EndMainExtraOptionsMenu_OnSettingListSelectedIndexChanged");
static_assert(offsetof(EndMainExtraOptionsMenu_OnSettingListSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndMainExtraOptionsMenu_OnSettingListSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainExtraOptionsMenu.OnSettingListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainExtraOptionsMenu_OnSettingListSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainExtraOptionsMenu_OnSettingListSetupItem) == 0x000008, "Wrong alignment on EndMainExtraOptionsMenu_OnSettingListSetupItem");
static_assert(sizeof(EndMainExtraOptionsMenu_OnSettingListSetupItem) == 0x000010, "Wrong size on EndMainExtraOptionsMenu_OnSettingListSetupItem");
static_assert(offsetof(EndMainExtraOptionsMenu_OnSettingListSetupItem, InItemWidget) == 0x000000, "Member 'EndMainExtraOptionsMenu_OnSettingListSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainExtraOptionsMenu_OnSettingListSetupItem, InItemIndex) == 0x000008, "Member 'EndMainExtraOptionsMenu_OnSettingListSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndMainMenuTopWindow.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainMenuTopWindow_OnLeftMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMenuTopWindow_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainMenuTopWindow_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainMenuTopWindow_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainMenuTopWindow_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainMenuTopWindow_OnLeftMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndMainMenuTopWindow_OnLeftMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMenuTopWindow.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainMenuTopWindow_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMenuTopWindow_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainMenuTopWindow_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndMainMenuTopWindow_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainMenuTopWindow_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndMainMenuTopWindow_OnLeftMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndMainMenuTopWindow_OnLeftMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMenuTopWindow.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainMenuTopWindow_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMenuTopWindow_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainMenuTopWindow_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainMenuTopWindow_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainMenuTopWindow_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainMenuTopWindow_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainMenuTopWindow_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMenuTopWindow_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndMainMenuTopWindow_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMenuTopWindow.OnPlaySlotAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndMainMenuTopWindow_OnPlaySlotAnimation final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMenuTopWindow_OnPlaySlotAnimation) == 0x000001, "Wrong alignment on EndMainMenuTopWindow_OnPlaySlotAnimation");
static_assert(sizeof(EndMainMenuTopWindow_OnPlaySlotAnimation) == 0x000001, "Wrong size on EndMainMenuTopWindow_OnPlaySlotAnimation");
static_assert(offsetof(EndMainMenuTopWindow_OnPlaySlotAnimation, IsShow) == 0x000000, "Member 'EndMainMenuTopWindow_OnPlaySlotAnimation::IsShow' has a wrong offset!");

// Function EndGame.EndMainMenuTopWindow.SetupPartySlot
// 0x0008 (0x0008 - 0x0000)
struct EndMainMenuTopWindow_SetupPartySlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMenuTopWindow_SetupPartySlot) == 0x000004, "Wrong alignment on EndMainMenuTopWindow_SetupPartySlot");
static_assert(sizeof(EndMainMenuTopWindow_SetupPartySlot) == 0x000008, "Wrong size on EndMainMenuTopWindow_SetupPartySlot");
static_assert(offsetof(EndMainMenuTopWindow_SetupPartySlot, SlotIndex) == 0x000000, "Member 'EndMainMenuTopWindow_SetupPartySlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndMainMenuTopWindow_SetupPartySlot, ReturnValue) == 0x000004, "Member 'EndMainMenuTopWindow_SetupPartySlot::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainMiniGameOptionsMenu.OnOptionListKeyboardMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMainMiniGameOptionsMenu_OnOptionListKeyboardMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardMeasureItem) == 0x000004, "Wrong alignment on EndMainMiniGameOptionsMenu_OnOptionListKeyboardMeasureItem");
static_assert(sizeof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardMeasureItem) == 0x00000C, "Wrong size on EndMainMiniGameOptionsMenu_OnOptionListKeyboardMeasureItem");
static_assert(offsetof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardMeasureItem, ItemIndex) == 0x000000, "Member 'EndMainMiniGameOptionsMenu_OnOptionListKeyboardMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardMeasureItem, ReturnValue) == 0x000004, "Member 'EndMainMiniGameOptionsMenu_OnOptionListKeyboardMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainMiniGameOptionsMenu.OnOptionListKeyboardPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainMiniGameOptionsMenu_OnOptionListKeyboardPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardPressedItem) == 0x000004, "Wrong alignment on EndMainMiniGameOptionsMenu_OnOptionListKeyboardPressedItem");
static_assert(sizeof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardPressedItem) == 0x000004, "Wrong size on EndMainMiniGameOptionsMenu_OnOptionListKeyboardPressedItem");
static_assert(offsetof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardPressedItem, CellIndex) == 0x000000, "Member 'EndMainMiniGameOptionsMenu_OnOptionListKeyboardPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMiniGameOptionsMenu.OnOptionListKeyboardSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainMiniGameOptionsMenu_OnOptionListKeyboardSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainMiniGameOptionsMenu_OnOptionListKeyboardSelectedIndexChanged");
static_assert(sizeof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardSelectedIndexChanged) == 0x000004, "Wrong size on EndMainMiniGameOptionsMenu_OnOptionListKeyboardSelectedIndexChanged");
static_assert(offsetof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainMiniGameOptionsMenu_OnOptionListKeyboardSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMiniGameOptionsMenu.OnOptionListKeyboardSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainMiniGameOptionsMenu_OnOptionListKeyboardSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardSetupItem) == 0x000008, "Wrong alignment on EndMainMiniGameOptionsMenu_OnOptionListKeyboardSetupItem");
static_assert(sizeof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardSetupItem) == 0x000010, "Wrong size on EndMainMiniGameOptionsMenu_OnOptionListKeyboardSetupItem");
static_assert(offsetof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardSetupItem, ItemWidget) == 0x000000, "Member 'EndMainMiniGameOptionsMenu_OnOptionListKeyboardSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMiniGameOptionsMenu_OnOptionListKeyboardSetupItem, CellIndex) == 0x000008, "Member 'EndMainMiniGameOptionsMenu_OnOptionListKeyboardSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnButtonTypeListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainOptionsMenu_OnButtonTypeListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnButtonTypeListPressedItem) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnButtonTypeListPressedItem");
static_assert(sizeof(EndMainOptionsMenu_OnButtonTypeListPressedItem) == 0x000004, "Wrong size on EndMainOptionsMenu_OnButtonTypeListPressedItem");
static_assert(offsetof(EndMainOptionsMenu_OnButtonTypeListPressedItem, CellIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnButtonTypeListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnButtonTypeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainOptionsMenu_OnButtonTypeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainOptionsMenu_OnButtonTypeListSetupItem) == 0x000008, "Wrong alignment on EndMainOptionsMenu_OnButtonTypeListSetupItem");
static_assert(sizeof(EndMainOptionsMenu_OnButtonTypeListSetupItem) == 0x000010, "Wrong size on EndMainOptionsMenu_OnButtonTypeListSetupItem");
static_assert(offsetof(EndMainOptionsMenu_OnButtonTypeListSetupItem, ItemWidget) == 0x000000, "Member 'EndMainOptionsMenu_OnButtonTypeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainOptionsMenu_OnButtonTypeListSetupItem, CellIndex) == 0x000008, "Member 'EndMainOptionsMenu_OnButtonTypeListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnCategoryListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainOptionsMenu_OnCategoryListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnCategoryListPressedItem) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnCategoryListPressedItem");
static_assert(sizeof(EndMainOptionsMenu_OnCategoryListPressedItem) == 0x000004, "Wrong size on EndMainOptionsMenu_OnCategoryListPressedItem");
static_assert(offsetof(EndMainOptionsMenu_OnCategoryListPressedItem, CellIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnCategoryListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnCategoryListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainOptionsMenu_OnCategoryListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnCategoryListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnCategoryListSelectedIndexChanged");
static_assert(sizeof(EndMainOptionsMenu_OnCategoryListSelectedIndexChanged) == 0x000004, "Wrong size on EndMainOptionsMenu_OnCategoryListSelectedIndexChanged");
static_assert(offsetof(EndMainOptionsMenu_OnCategoryListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnCategoryListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnCategoryListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainOptionsMenu_OnCategoryListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainOptionsMenu_OnCategoryListSetupItem) == 0x000008, "Wrong alignment on EndMainOptionsMenu_OnCategoryListSetupItem");
static_assert(sizeof(EndMainOptionsMenu_OnCategoryListSetupItem) == 0x000010, "Wrong size on EndMainOptionsMenu_OnCategoryListSetupItem");
static_assert(offsetof(EndMainOptionsMenu_OnCategoryListSetupItem, ItemWidget) == 0x000000, "Member 'EndMainOptionsMenu_OnCategoryListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainOptionsMenu_OnCategoryListSetupItem, CellIndex) == 0x000008, "Member 'EndMainOptionsMenu_OnCategoryListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnControllerListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainOptionsMenu_OnControllerListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnControllerListPressedItem) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnControllerListPressedItem");
static_assert(sizeof(EndMainOptionsMenu_OnControllerListPressedItem) == 0x000004, "Wrong size on EndMainOptionsMenu_OnControllerListPressedItem");
static_assert(offsetof(EndMainOptionsMenu_OnControllerListPressedItem, CellIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnControllerListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnControllerListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainOptionsMenu_OnControllerListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainOptionsMenu_OnControllerListSetupItem) == 0x000008, "Wrong alignment on EndMainOptionsMenu_OnControllerListSetupItem");
static_assert(sizeof(EndMainOptionsMenu_OnControllerListSetupItem) == 0x000010, "Wrong size on EndMainOptionsMenu_OnControllerListSetupItem");
static_assert(offsetof(EndMainOptionsMenu_OnControllerListSetupItem, ItemWidget) == 0x000000, "Member 'EndMainOptionsMenu_OnControllerListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainOptionsMenu_OnControllerListSetupItem, CellIndex) == 0x000008, "Member 'EndMainOptionsMenu_OnControllerListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnOptionListKeyboardMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMainOptionsMenu_OnOptionListKeyboardMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnOptionListKeyboardMeasureItem) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnOptionListKeyboardMeasureItem");
static_assert(sizeof(EndMainOptionsMenu_OnOptionListKeyboardMeasureItem) == 0x00000C, "Wrong size on EndMainOptionsMenu_OnOptionListKeyboardMeasureItem");
static_assert(offsetof(EndMainOptionsMenu_OnOptionListKeyboardMeasureItem, ItemIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnOptionListKeyboardMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndMainOptionsMenu_OnOptionListKeyboardMeasureItem, ReturnValue) == 0x000004, "Member 'EndMainOptionsMenu_OnOptionListKeyboardMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnOptionListKeyboardPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainOptionsMenu_OnOptionListKeyboardPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnOptionListKeyboardPressedItem) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnOptionListKeyboardPressedItem");
static_assert(sizeof(EndMainOptionsMenu_OnOptionListKeyboardPressedItem) == 0x000004, "Wrong size on EndMainOptionsMenu_OnOptionListKeyboardPressedItem");
static_assert(offsetof(EndMainOptionsMenu_OnOptionListKeyboardPressedItem, CellIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnOptionListKeyboardPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnOptionListKeyboardSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainOptionsMenu_OnOptionListKeyboardSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnOptionListKeyboardSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnOptionListKeyboardSelectedIndexChanged");
static_assert(sizeof(EndMainOptionsMenu_OnOptionListKeyboardSelectedIndexChanged) == 0x000004, "Wrong size on EndMainOptionsMenu_OnOptionListKeyboardSelectedIndexChanged");
static_assert(offsetof(EndMainOptionsMenu_OnOptionListKeyboardSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnOptionListKeyboardSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnOptionListKeyboardSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainOptionsMenu_OnOptionListKeyboardSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainOptionsMenu_OnOptionListKeyboardSetupItem) == 0x000008, "Wrong alignment on EndMainOptionsMenu_OnOptionListKeyboardSetupItem");
static_assert(sizeof(EndMainOptionsMenu_OnOptionListKeyboardSetupItem) == 0x000010, "Wrong size on EndMainOptionsMenu_OnOptionListKeyboardSetupItem");
static_assert(offsetof(EndMainOptionsMenu_OnOptionListKeyboardSetupItem, ItemWidget) == 0x000000, "Member 'EndMainOptionsMenu_OnOptionListKeyboardSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainOptionsMenu_OnOptionListKeyboardSetupItem, CellIndex) == 0x000008, "Member 'EndMainOptionsMenu_OnOptionListKeyboardSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnOptionListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainOptionsMenu_OnOptionListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnOptionListPressedItem) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnOptionListPressedItem");
static_assert(sizeof(EndMainOptionsMenu_OnOptionListPressedItem) == 0x000004, "Wrong size on EndMainOptionsMenu_OnOptionListPressedItem");
static_assert(offsetof(EndMainOptionsMenu_OnOptionListPressedItem, CellIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnOptionListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnOptionListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainOptionsMenu_OnOptionListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnOptionListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnOptionListSelectedIndexChanged");
static_assert(sizeof(EndMainOptionsMenu_OnOptionListSelectedIndexChanged) == 0x000004, "Wrong size on EndMainOptionsMenu_OnOptionListSelectedIndexChanged");
static_assert(offsetof(EndMainOptionsMenu_OnOptionListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnOptionListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnOptionListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainOptionsMenu_OnOptionListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainOptionsMenu_OnOptionListSetupItem) == 0x000008, "Wrong alignment on EndMainOptionsMenu_OnOptionListSetupItem");
static_assert(sizeof(EndMainOptionsMenu_OnOptionListSetupItem) == 0x000010, "Wrong size on EndMainOptionsMenu_OnOptionListSetupItem");
static_assert(offsetof(EndMainOptionsMenu_OnOptionListSetupItem, ItemWidget) == 0x000000, "Member 'EndMainOptionsMenu_OnOptionListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainOptionsMenu_OnOptionListSetupItem, CellIndex) == 0x000008, "Member 'EndMainOptionsMenu_OnOptionListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnSelectListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainOptionsMenu_OnSelectListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnSelectListPressedItem) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnSelectListPressedItem");
static_assert(sizeof(EndMainOptionsMenu_OnSelectListPressedItem) == 0x000004, "Wrong size on EndMainOptionsMenu_OnSelectListPressedItem");
static_assert(offsetof(EndMainOptionsMenu_OnSelectListPressedItem, CellIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnSelectListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnSelectListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainOptionsMenu_OnSelectListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainOptionsMenu_OnSelectListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainOptionsMenu_OnSelectListSelectedIndexChanged");
static_assert(sizeof(EndMainOptionsMenu_OnSelectListSelectedIndexChanged) == 0x000004, "Wrong size on EndMainOptionsMenu_OnSelectListSelectedIndexChanged");
static_assert(offsetof(EndMainOptionsMenu_OnSelectListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainOptionsMenu_OnSelectListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnSelectListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainOptionsMenu_OnSelectListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainOptionsMenu_OnSelectListSetupItem) == 0x000008, "Wrong alignment on EndMainOptionsMenu_OnSelectListSetupItem");
static_assert(sizeof(EndMainOptionsMenu_OnSelectListSetupItem) == 0x000010, "Wrong size on EndMainOptionsMenu_OnSelectListSetupItem");
static_assert(offsetof(EndMainOptionsMenu_OnSelectListSetupItem, ItemWidget) == 0x000000, "Member 'EndMainOptionsMenu_OnSelectListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainOptionsMenu_OnSelectListSetupItem, CellIndex) == 0x000008, "Member 'EndMainOptionsMenu_OnSelectListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainOptionsMenu.OnSetupGaugeItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainOptionsMenu_OnSetupGaugeItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainOptionsMenu_OnSetupGaugeItem) == 0x000008, "Wrong alignment on EndMainOptionsMenu_OnSetupGaugeItem");
static_assert(sizeof(EndMainOptionsMenu_OnSetupGaugeItem) == 0x000010, "Wrong size on EndMainOptionsMenu_OnSetupGaugeItem");
static_assert(offsetof(EndMainOptionsMenu_OnSetupGaugeItem, ItemWidget) == 0x000000, "Member 'EndMainOptionsMenu_OnSetupGaugeItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainOptionsMenu_OnSetupGaugeItem, CellIndex) == 0x000008, "Member 'EndMainOptionsMenu_OnSetupGaugeItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainSaveLoadMenu.OnSaveDataPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainSaveLoadMenu_OnSaveDataPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainSaveLoadMenu_OnSaveDataPressedItem) == 0x000004, "Wrong alignment on EndMainSaveLoadMenu_OnSaveDataPressedItem");
static_assert(sizeof(EndMainSaveLoadMenu_OnSaveDataPressedItem) == 0x000004, "Wrong size on EndMainSaveLoadMenu_OnSaveDataPressedItem");
static_assert(offsetof(EndMainSaveLoadMenu_OnSaveDataPressedItem, ItemIndex) == 0x000000, "Member 'EndMainSaveLoadMenu_OnSaveDataPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainSaveLoadMenu.OnSaveDataSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged");
static_assert(sizeof(EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged) == 0x000004, "Wrong size on EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged");
static_assert(offsetof(EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainSaveLoadMenu.OnSaveDataSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainSaveLoadMenu_OnSaveDataSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainSaveLoadMenu_OnSaveDataSetupItem) == 0x000008, "Wrong alignment on EndMainSaveLoadMenu_OnSaveDataSetupItem");
static_assert(sizeof(EndMainSaveLoadMenu_OnSaveDataSetupItem) == 0x000010, "Wrong size on EndMainSaveLoadMenu_OnSaveDataSetupItem");
static_assert(offsetof(EndMainSaveLoadMenu_OnSaveDataSetupItem, ItemWidget) == 0x000000, "Member 'EndMainSaveLoadMenu_OnSaveDataSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainSaveLoadMenu_OnSaveDataSetupItem, ItemIndex) == 0x000008, "Member 'EndMainSaveLoadMenu_OnSaveDataSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainStatusMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndMainStatusMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainStatusMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndMainStatusMenu_OnLeftMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_OnLeftMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainStatusMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainStatusMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnMeasureAbilityItem
// 0x000C (0x000C - 0x0000)
struct EndMainStatusMenu_OnMeasureAbilityItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnMeasureAbilityItem) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnMeasureAbilityItem");
static_assert(sizeof(EndMainStatusMenu_OnMeasureAbilityItem) == 0x00000C, "Wrong size on EndMainStatusMenu_OnMeasureAbilityItem");
static_assert(offsetof(EndMainStatusMenu_OnMeasureAbilityItem, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_OnMeasureAbilityItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnMeasureAbilityItem, ReturnValue) == 0x000004, "Member 'EndMainStatusMenu_OnMeasureAbilityItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnMeasureLimitItem
// 0x000C (0x000C - 0x0000)
struct EndMainStatusMenu_OnMeasureLimitItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnMeasureLimitItem) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnMeasureLimitItem");
static_assert(sizeof(EndMainStatusMenu_OnMeasureLimitItem) == 0x00000C, "Wrong size on EndMainStatusMenu_OnMeasureLimitItem");
static_assert(offsetof(EndMainStatusMenu_OnMeasureLimitItem, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_OnMeasureLimitItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnMeasureLimitItem, ReturnValue) == 0x000004, "Member 'EndMainStatusMenu_OnMeasureLimitItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnMeasureMagicItem
// 0x000C (0x000C - 0x0000)
struct EndMainStatusMenu_OnMeasureMagicItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnMeasureMagicItem) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnMeasureMagicItem");
static_assert(sizeof(EndMainStatusMenu_OnMeasureMagicItem) == 0x00000C, "Wrong size on EndMainStatusMenu_OnMeasureMagicItem");
static_assert(offsetof(EndMainStatusMenu_OnMeasureMagicItem, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_OnMeasureMagicItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnMeasureMagicItem, ReturnValue) == 0x000004, "Member 'EndMainStatusMenu_OnMeasureMagicItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnMeasureStatusItem
// 0x000C (0x000C - 0x0000)
struct EndMainStatusMenu_OnMeasureStatusItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnMeasureStatusItem) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnMeasureStatusItem");
static_assert(sizeof(EndMainStatusMenu_OnMeasureStatusItem) == 0x00000C, "Wrong size on EndMainStatusMenu_OnMeasureStatusItem");
static_assert(offsetof(EndMainStatusMenu_OnMeasureStatusItem, ItemIndex) == 0x000000, "Member 'EndMainStatusMenu_OnMeasureStatusItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnMeasureStatusItem, ReturnValue) == 0x000004, "Member 'EndMainStatusMenu_OnMeasureStatusItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnMeasureSummonItem
// 0x000C (0x000C - 0x0000)
struct EndMainStatusMenu_OnMeasureSummonItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnMeasureSummonItem) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnMeasureSummonItem");
static_assert(sizeof(EndMainStatusMenu_OnMeasureSummonItem) == 0x00000C, "Wrong size on EndMainStatusMenu_OnMeasureSummonItem");
static_assert(offsetof(EndMainStatusMenu_OnMeasureSummonItem, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_OnMeasureSummonItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnMeasureSummonItem, ReturnValue) == 0x000004, "Member 'EndMainStatusMenu_OnMeasureSummonItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnSetupAbilityItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnSetupAbilityItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnSetupAbilityItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnSetupAbilityItem");
static_assert(sizeof(EndMainStatusMenu_OnSetupAbilityItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnSetupAbilityItem");
static_assert(offsetof(EndMainStatusMenu_OnSetupAbilityItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnSetupAbilityItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnSetupAbilityItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnSetupAbilityItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnSetupLimitItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnSetupLimitItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnSetupLimitItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnSetupLimitItem");
static_assert(sizeof(EndMainStatusMenu_OnSetupLimitItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnSetupLimitItem");
static_assert(offsetof(EndMainStatusMenu_OnSetupLimitItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnSetupLimitItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnSetupLimitItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnSetupLimitItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnSetupMagicItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnSetupMagicItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnSetupMagicItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnSetupMagicItem");
static_assert(sizeof(EndMainStatusMenu_OnSetupMagicItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnSetupMagicItem");
static_assert(offsetof(EndMainStatusMenu_OnSetupMagicItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnSetupMagicItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnSetupMagicItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnSetupMagicItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnSetupStatusItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnSetupStatusItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnSetupStatusItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnSetupStatusItem");
static_assert(sizeof(EndMainStatusMenu_OnSetupStatusItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnSetupStatusItem");
static_assert(offsetof(EndMainStatusMenu_OnSetupStatusItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnSetupStatusItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnSetupStatusItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnSetupStatusItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnSetupSummonItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnSetupSummonItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnSetupSummonItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnSetupSummonItem");
static_assert(sizeof(EndMainStatusMenu_OnSetupSummonItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnSetupSummonItem");
static_assert(offsetof(EndMainStatusMenu_OnSetupSummonItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnSetupSummonItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnSetupSummonItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnSetupSummonItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.UpdateDescription
// 0x0001 (0x0001 - 0x0000)
struct EndMainStatusMenu_UpdateDescription final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_UpdateDescription) == 0x000001, "Wrong alignment on EndMainStatusMenu_UpdateDescription");
static_assert(sizeof(EndMainStatusMenu_UpdateDescription) == 0x000001, "Wrong size on EndMainStatusMenu_UpdateDescription");
static_assert(offsetof(EndMainStatusMenu_UpdateDescription, PlayerType) == 0x000000, "Member 'EndMainStatusMenu_UpdateDescription::PlayerType' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.UpdateEquipmentInfo
// 0x0008 (0x0008 - 0x0000)
struct EndMainStatusMenu_UpdateEquipmentInfo final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_UpdateEquipmentInfo) == 0x000004, "Wrong alignment on EndMainStatusMenu_UpdateEquipmentInfo");
static_assert(sizeof(EndMainStatusMenu_UpdateEquipmentInfo) == 0x000008, "Wrong size on EndMainStatusMenu_UpdateEquipmentInfo");
static_assert(offsetof(EndMainStatusMenu_UpdateEquipmentInfo, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_UpdateEquipmentInfo::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_UpdateEquipmentInfo, PlayerType) == 0x000004, "Member 'EndMainStatusMenu_UpdateEquipmentInfo::PlayerType' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.UpdatePlayerStatusInfo
// 0x0008 (0x0008 - 0x0000)
struct EndMainStatusMenu_UpdatePlayerStatusInfo final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_UpdatePlayerStatusInfo) == 0x000004, "Wrong alignment on EndMainStatusMenu_UpdatePlayerStatusInfo");
static_assert(sizeof(EndMainStatusMenu_UpdatePlayerStatusInfo) == 0x000008, "Wrong size on EndMainStatusMenu_UpdatePlayerStatusInfo");
static_assert(offsetof(EndMainStatusMenu_UpdatePlayerStatusInfo, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_UpdatePlayerStatusInfo::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_UpdatePlayerStatusInfo, PlayerType) == 0x000004, "Member 'EndMainStatusMenu_UpdatePlayerStatusInfo::PlayerType' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.UpdateStatusPanel
// 0x0001 (0x0001 - 0x0000)
struct EndMainStatusMenu_UpdateStatusPanel final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_UpdateStatusPanel) == 0x000001, "Wrong alignment on EndMainStatusMenu_UpdateStatusPanel");
static_assert(sizeof(EndMainStatusMenu_UpdateStatusPanel) == 0x000001, "Wrong size on EndMainStatusMenu_UpdateStatusPanel");
static_assert(offsetof(EndMainStatusMenu_UpdateStatusPanel, PlayerType) == 0x000000, "Member 'EndMainStatusMenu_UpdateStatusPanel::PlayerType' has a wrong offset!");

// Function EndGame.EndMainTopMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainTopMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainTopMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainTopMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainTopMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainTopMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainTopMenu_OnLeftMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndMainTopMenu_OnLeftMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainTopMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainTopMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainTopMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainTopMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndMainTopMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainTopMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndMainTopMenu_OnLeftMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndMainTopMenu_OnLeftMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainTopMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainTopMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainTopMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainTopMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainTopMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainTopMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainTopMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainTopMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainTopMenu_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndMainTopMenu_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainTopMenu.OnPlaySlotAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndMainTopMenu_OnPlaySlotAnimation final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainTopMenu_OnPlaySlotAnimation) == 0x000001, "Wrong alignment on EndMainTopMenu_OnPlaySlotAnimation");
static_assert(sizeof(EndMainTopMenu_OnPlaySlotAnimation) == 0x000001, "Wrong size on EndMainTopMenu_OnPlaySlotAnimation");
static_assert(offsetof(EndMainTopMenu_OnPlaySlotAnimation, IsShow) == 0x000000, "Member 'EndMainTopMenu_OnPlaySlotAnimation::IsShow' has a wrong offset!");

// Function EndGame.EndMainTopMenu.SetupPartySlot
// 0x0008 (0x0008 - 0x0000)
struct EndMainTopMenu_SetupPartySlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainTopMenu_SetupPartySlot) == 0x000004, "Wrong alignment on EndMainTopMenu_SetupPartySlot");
static_assert(sizeof(EndMainTopMenu_SetupPartySlot) == 0x000008, "Wrong size on EndMainTopMenu_SetupPartySlot");
static_assert(offsetof(EndMainTopMenu_SetupPartySlot, SlotIndex) == 0x000000, "Member 'EndMainTopMenu_SetupPartySlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndMainTopMenu_SetupPartySlot, ReturnValue) == 0x000004, "Member 'EndMainTopMenu_SetupPartySlot::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemAerith
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemBarret
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemCloud
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemRedxiii
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemRedxiii final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemRedxiii) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemRedxiii");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemRedxiii) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemRedxiii");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemRedxiii, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemRedxiii::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemRedxiii, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemRedxiii::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemSonon
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemTifa
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemYuffie
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnEquipMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnEquipMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnEquipMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnMemberMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnMemberMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnMemberMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnSpListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnSpListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnSpListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.UpdateCharaImage
// 0x0018 (0x0018 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_UpdateCharaImage final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEndImage*                              Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           Sprite;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_UpdateCharaImage) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_UpdateCharaImage");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_UpdateCharaImage) == 0x000018, "Wrong size on EndMainWeaponUpgradeEquipMenu_UpdateCharaImage");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_UpdateCharaImage, PlayerType) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_UpdateCharaImage::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_UpdateCharaImage, Widget) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_UpdateCharaImage::Widget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_UpdateCharaImage, Sprite) == 0x000010, "Member 'EndMainWeaponUpgradeEquipMenu_UpdateCharaImage::Sprite' has a wrong offset!");

// Function EndGame.EndMemberRejoinMenu.OnCellCleanup
// 0x0008 (0x0008 - 0x0000)
struct EndMemberRejoinMenu_OnCellCleanup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMemberRejoinMenu_OnCellCleanup) == 0x000008, "Wrong alignment on EndMemberRejoinMenu_OnCellCleanup");
static_assert(sizeof(EndMemberRejoinMenu_OnCellCleanup) == 0x000008, "Wrong size on EndMemberRejoinMenu_OnCellCleanup");
static_assert(offsetof(EndMemberRejoinMenu_OnCellCleanup, ItemWidget) == 0x000000, "Member 'EndMemberRejoinMenu_OnCellCleanup::ItemWidget' has a wrong offset!");

// Function EndGame.EndMemberRejoinMenu.OnLeftCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMemberRejoinMenu_OnLeftCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMemberRejoinMenu_OnLeftCellSetup) == 0x000008, "Wrong alignment on EndMemberRejoinMenu_OnLeftCellSetup");
static_assert(sizeof(EndMemberRejoinMenu_OnLeftCellSetup) == 0x000010, "Wrong size on EndMemberRejoinMenu_OnLeftCellSetup");
static_assert(offsetof(EndMemberRejoinMenu_OnLeftCellSetup, ItemWidget) == 0x000000, "Member 'EndMemberRejoinMenu_OnLeftCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMemberRejoinMenu_OnLeftCellSetup, ItemIndex) == 0x000008, "Member 'EndMemberRejoinMenu_OnLeftCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMemberRejoinMenu.OnRejoinCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMemberRejoinMenu_OnRejoinCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMemberRejoinMenu_OnRejoinCellSetup) == 0x000008, "Wrong alignment on EndMemberRejoinMenu_OnRejoinCellSetup");
static_assert(sizeof(EndMemberRejoinMenu_OnRejoinCellSetup) == 0x000010, "Wrong size on EndMemberRejoinMenu_OnRejoinCellSetup");
static_assert(offsetof(EndMemberRejoinMenu_OnRejoinCellSetup, ItemWidget) == 0x000000, "Member 'EndMemberRejoinMenu_OnRejoinCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMemberRejoinMenu_OnRejoinCellSetup, ItemIndex) == 0x000008, "Member 'EndMemberRejoinMenu_OnRejoinCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMemberRejoinMenu.OnReserveCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMemberRejoinMenu_OnReserveCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMemberRejoinMenu_OnReserveCellSetup) == 0x000008, "Wrong alignment on EndMemberRejoinMenu_OnReserveCellSetup");
static_assert(sizeof(EndMemberRejoinMenu_OnReserveCellSetup) == 0x000010, "Wrong size on EndMemberRejoinMenu_OnReserveCellSetup");
static_assert(offsetof(EndMemberRejoinMenu_OnReserveCellSetup, ItemWidget) == 0x000000, "Member 'EndMemberRejoinMenu_OnReserveCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMemberRejoinMenu_OnReserveCellSetup, ItemIndex) == 0x000008, "Member 'EndMemberRejoinMenu_OnReserveCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMessageLogs.AddMessage
// 0x0010 (0x0010 - 0x0000)
struct EndMessageLogs_AddMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMessageLogs_AddMessage) == 0x000008, "Wrong alignment on EndMessageLogs_AddMessage");
static_assert(sizeof(EndMessageLogs_AddMessage) == 0x000010, "Wrong size on EndMessageLogs_AddMessage");
static_assert(offsetof(EndMessageLogs_AddMessage, Message) == 0x000000, "Member 'EndMessageLogs_AddMessage::Message' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddActorPositionConditionCommand
// 0x0040 (0x0040 - 0x0000)
struct EndMobPrefabActor_AddActorPositionConditionCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor0;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor1;                                            // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor2;                                            // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor3;                                            // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceThreshold;                                 // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleThreshold;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightThreshold;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuationTime;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddActorPositionConditionCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddActorPositionConditionCommand");
static_assert(sizeof(EndMobPrefabActor_AddActorPositionConditionCommand) == 0x000040, "Wrong size on EndMobPrefabActor_AddActorPositionConditionCommand");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, Actor0) == 0x00000C, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::Actor0' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, Actor1) == 0x000014, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::Actor1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, Actor2) == 0x00001C, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::Actor2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, Actor3) == 0x000024, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::Actor3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, DistanceThreshold) == 0x00002C, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, AngleThreshold) == 0x000030, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::AngleThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, HeightThreshold) == 0x000034, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::HeightThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, ContinuationTime) == 0x000038, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::ContinuationTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddActorPositionConditionCommand, ReturnValue) == 0x00003C, "Member 'EndMobPrefabActor_AddActorPositionConditionCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddAllowContactExecuteCommand
// 0x0034 (0x0034 - 0x0000)
struct EndMobPrefabActor_AddAllowContactExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowedDuringPlayMotion;                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ForwardLeftMotion;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ForwardRightMotion;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackLeftMotion;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackRightMotion;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddAllowContactExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddAllowContactExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddAllowContactExecuteCommand) == 0x000034, "Wrong size on EndMobPrefabActor_AddAllowContactExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddAllowContactExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddAllowContactExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactExecuteCommand, bAllowedDuringPlayMotion) == 0x00000C, "Member 'EndMobPrefabActor_AddAllowContactExecuteCommand::bAllowedDuringPlayMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactExecuteCommand, ForwardLeftMotion) == 0x000010, "Member 'EndMobPrefabActor_AddAllowContactExecuteCommand::ForwardLeftMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactExecuteCommand, ForwardRightMotion) == 0x000018, "Member 'EndMobPrefabActor_AddAllowContactExecuteCommand::ForwardRightMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactExecuteCommand, BackLeftMotion) == 0x000020, "Member 'EndMobPrefabActor_AddAllowContactExecuteCommand::BackLeftMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactExecuteCommand, BackRightMotion) == 0x000028, "Member 'EndMobPrefabActor_AddAllowContactExecuteCommand::BackRightMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactExecuteCommand, ReturnValue) == 0x000030, "Member 'EndMobPrefabActor_AddAllowContactExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddAllowContactPropagateExecuteCommand
// 0x01E0 (0x01E0 - 0x0000)
struct EndMobPrefabActor_AddAllowContactPropagateExecuteCommand final
{
public:
	TMap<class FName, class FName>                PropagateMotionTable;                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                PropagateForwardLeftMotionTable;                   // 0x0050(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                PropagateForawrdRightMotionTable;                  // 0x00A0(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                PropagateBackLeftMotionTable;                      // 0x00F0(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                PropagateBackRightMotionTable;                     // 0x0140(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   MobId;                                             // 0x0190(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0198(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowedDuringPlayMotion;                          // 0x019C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ForwardLeftMotion;                                 // 0x01A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ForwardRightMotion;                                // 0x01A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackLeftMotion;                                    // 0x01B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackRightMotion;                                   // 0x01B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactMotionBlendTime;                            // 0x01C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropagateMotionBlendTime;                          // 0x01C4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutMotion;                                         // 0x01C8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBlendTime;                                      // 0x01D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutReplaceBaseMotion;                              // 0x01D4(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x01DC(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand) == 0x000008, "Wrong alignment on EndMobPrefabActor_AddAllowContactPropagateExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand) == 0x0001E0, "Wrong size on EndMobPrefabActor_AddAllowContactPropagateExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, PropagateMotionTable) == 0x000000, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::PropagateMotionTable' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, PropagateForwardLeftMotionTable) == 0x000050, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::PropagateForwardLeftMotionTable' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, PropagateForawrdRightMotionTable) == 0x0000A0, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::PropagateForawrdRightMotionTable' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, PropagateBackLeftMotionTable) == 0x0000F0, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::PropagateBackLeftMotionTable' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, PropagateBackRightMotionTable) == 0x000140, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::PropagateBackRightMotionTable' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, MobId) == 0x000190, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, ChainCommandId) == 0x000198, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, bAllowedDuringPlayMotion) == 0x00019C, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::bAllowedDuringPlayMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, ForwardLeftMotion) == 0x0001A0, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::ForwardLeftMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, ForwardRightMotion) == 0x0001A8, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::ForwardRightMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, BackLeftMotion) == 0x0001B0, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::BackLeftMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, BackRightMotion) == 0x0001B8, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::BackRightMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, ContactMotionBlendTime) == 0x0001C0, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::ContactMotionBlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, PropagateMotionBlendTime) == 0x0001C4, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::PropagateMotionBlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, OutMotion) == 0x0001C8, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::OutMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, OutBlendTime) == 0x0001D0, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::OutBlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, OutReplaceBaseMotion) == 0x0001D4, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::OutReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAllowContactPropagateExecuteCommand, ReturnValue) == 0x0001DC, "Member 'EndMobPrefabActor_AddAllowContactPropagateExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddAnimationExecuteCommand
// 0x0044 (0x0044 - 0x0000)
struct EndMobPrefabActor_AddAnimationExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CompleteTimeRange;                                 // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel;                                // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddAnimationExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddAnimationExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddAnimationExecuteCommand) == 0x000044, "Wrong size on EndMobPrefabActor_AddAnimationExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, Motion) == 0x00000C, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::Motion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, bLooping) == 0x000014, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, BlendTime) == 0x000018, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, Layer) == 0x00001C, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, ReplaceBaseMotion) == 0x000024, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, ReplaceBaseLookAtTarget) == 0x00002C, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, CompleteTimeRange) == 0x000034, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, bAllowMotionCancel) == 0x00003C, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::bAllowMotionCancel' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationExecuteCommand, ReturnValue) == 0x000040, "Member 'EndMobPrefabActor_AddAnimationExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddAnimationWithLookAtExecuteCommand
// 0x0054 (0x0054 - 0x0000)
struct EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtTargetMob;                                   // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtBlendRate;                                   // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookAway;                                         // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CompleteTimeRange;                                 // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel;                                // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand) == 0x000054, "Wrong size on EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, Motion) == 0x00000C, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::Motion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, bLooping) == 0x000014, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, BlendTime) == 0x000018, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, Layer) == 0x00001C, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, ReplaceBaseMotion) == 0x000024, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, ReplaceBaseLookAtTarget) == 0x00002C, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, LookAtTargetMob) == 0x000034, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::LookAtTargetMob' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, LookAtBlendRate) == 0x00003C, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::LookAtBlendRate' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, bLookAway) == 0x000040, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::bLookAway' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, CompleteTimeRange) == 0x000044, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, bAllowMotionCancel) == 0x00004C, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::bAllowMotionCancel' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand, ReturnValue) == 0x000050, "Member 'EndMobPrefabActor_AddAnimationWithLookAtExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddAutoLookAtActorExecuteCommand
// 0x0044 (0x0044 - 0x0000)
struct EndMobPrefabActor_AddAutoLookAtActorExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor0;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor1;                                            // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor2;                                            // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor3;                                            // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceThreshold;                                 // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleThreshold;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightThreshold;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuationTime;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromCenter;                                       // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddAutoLookAtActorExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand) == 0x000044, "Wrong size on EndMobPrefabActor_AddAutoLookAtActorExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, Actor0) == 0x00000C, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::Actor0' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, Actor1) == 0x000014, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::Actor1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, Actor2) == 0x00001C, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::Actor2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, Actor3) == 0x000024, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::Actor3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, DistanceThreshold) == 0x00002C, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, AngleThreshold) == 0x000030, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::AngleThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, HeightThreshold) == 0x000034, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::HeightThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, ContinuationTime) == 0x000038, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::ContinuationTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, bFromCenter) == 0x00003C, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::bFromCenter' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtActorExecuteCommand, ReturnValue) == 0x000040, "Member 'EndMobPrefabActor_AddAutoLookAtActorExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddAutoLookAtPartyExecuteCommand
// 0x0030 (0x0030 - 0x0000)
struct EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceThreshold;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleThreshold;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightThreshold;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuationTime;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromCenter;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetName;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookAway;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand) == 0x000030, "Wrong size on EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand, DistanceThreshold) == 0x00000C, "Member 'EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand, AngleThreshold) == 0x000010, "Member 'EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand::AngleThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand, HeightThreshold) == 0x000014, "Member 'EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand::HeightThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand, ContinuationTime) == 0x000018, "Member 'EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand::ContinuationTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand, bFromCenter) == 0x00001C, "Member 'EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand::bFromCenter' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand, TargetName) == 0x000020, "Member 'EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand::TargetName' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand, bLookAway) == 0x000028, "Member 'EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand::bLookAway' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand, ReturnValue) == 0x00002C, "Member 'EndMobPrefabActor_AddAutoLookAtPartyExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddAutoReactionToPartyExecuteCommand
// 0x0058 (0x0058 - 0x0000)
struct EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceThreshold;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleThreshold;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightThreshold;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuationTime;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromCenter;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetName;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion;                                            // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutMotion;                                         // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBlendTime;                                      // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutReplaceBaseMotion;                              // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayMotionOnce;                                   // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand) == 0x000058, "Wrong size on EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, DistanceThreshold) == 0x00000C, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, AngleThreshold) == 0x000010, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::AngleThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, HeightThreshold) == 0x000014, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::HeightThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, ContinuationTime) == 0x000018, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::ContinuationTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, bFromCenter) == 0x00001C, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::bFromCenter' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, TargetName) == 0x000020, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::TargetName' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, Motion) == 0x000028, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::Motion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, BlendTime) == 0x000030, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, ReplaceBaseMotion) == 0x000034, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, OutMotion) == 0x00003C, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::OutMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, OutBlendTime) == 0x000044, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::OutBlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, OutReplaceBaseMotion) == 0x000048, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::OutReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, bPlayMotionOnce) == 0x000050, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::bPlayMotionOnce' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand, ReturnValue) == 0x000054, "Member 'EndMobPrefabActor_AddAutoReactionToPartyExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddContactAnimationExecuteCommand
// 0x006C (0x006C - 0x0000)
struct EndMobPrefabActor_AddContactAnimationExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ForwardLeftMotion;                                 // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ForwardRightMotion;                                // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackLeftMotion;                                    // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackRightMotion;                                   // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtTargetMob;                                   // 0x004C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtBlendRate;                                   // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookAway;                                         // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CompleteTimeRange;                                 // 0x005C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel;                                // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddContactAnimationExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddContactAnimationExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddContactAnimationExecuteCommand) == 0x00006C, "Wrong size on EndMobPrefabActor_AddContactAnimationExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, ForwardLeftMotion) == 0x00000C, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::ForwardLeftMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, ForwardRightMotion) == 0x000014, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::ForwardRightMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, BackLeftMotion) == 0x00001C, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::BackLeftMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, BackRightMotion) == 0x000024, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::BackRightMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, bLooping) == 0x00002C, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, BlendTime) == 0x000030, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, Layer) == 0x000034, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, ReplaceBaseMotion) == 0x00003C, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, ReplaceBaseLookAtTarget) == 0x000044, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, LookAtTargetMob) == 0x00004C, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::LookAtTargetMob' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, LookAtBlendRate) == 0x000054, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::LookAtBlendRate' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, bLookAway) == 0x000058, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::bLookAway' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, CompleteTimeRange) == 0x00005C, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, bAllowMotionCancel) == 0x000064, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::bAllowMotionCancel' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactAnimationExecuteCommand, ReturnValue) == 0x000068, "Member 'EndMobPrefabActor_AddContactAnimationExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddContactConditionCommand
// 0x0018 (0x0018 - 0x0000)
struct EndMobPrefabActor_AddContactConditionCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForwardLeft;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForwardRight;                                     // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackLeft;                                         // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackRight;                                        // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuationTime;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddContactConditionCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddContactConditionCommand");
static_assert(sizeof(EndMobPrefabActor_AddContactConditionCommand) == 0x000018, "Wrong size on EndMobPrefabActor_AddContactConditionCommand");
static_assert(offsetof(EndMobPrefabActor_AddContactConditionCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddContactConditionCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactConditionCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddContactConditionCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactConditionCommand, bForwardLeft) == 0x00000C, "Member 'EndMobPrefabActor_AddContactConditionCommand::bForwardLeft' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactConditionCommand, bForwardRight) == 0x00000D, "Member 'EndMobPrefabActor_AddContactConditionCommand::bForwardRight' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactConditionCommand, bBackLeft) == 0x00000E, "Member 'EndMobPrefabActor_AddContactConditionCommand::bBackLeft' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactConditionCommand, bBackRight) == 0x00000F, "Member 'EndMobPrefabActor_AddContactConditionCommand::bBackRight' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactConditionCommand, ContinuationTime) == 0x000010, "Member 'EndMobPrefabActor_AddContactConditionCommand::ContinuationTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddContactConditionCommand, ReturnValue) == 0x000014, "Member 'EndMobPrefabActor_AddContactConditionCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddEmptyConditionCommand
// 0x0010 (0x0010 - 0x0000)
struct EndMobPrefabActor_AddEmptyConditionCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddEmptyConditionCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddEmptyConditionCommand");
static_assert(sizeof(EndMobPrefabActor_AddEmptyConditionCommand) == 0x000010, "Wrong size on EndMobPrefabActor_AddEmptyConditionCommand");
static_assert(offsetof(EndMobPrefabActor_AddEmptyConditionCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddEmptyConditionCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddEmptyConditionCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddEmptyConditionCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddEmptyConditionCommand, ReturnValue) == 0x00000C, "Member 'EndMobPrefabActor_AddEmptyConditionCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddEventStateTriggerMessageCommand
// 0x0014 (0x0014 - 0x0000)
struct EndMobPrefabActor_AddEventStateTriggerMessageCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMobPrefabStateTrigger                     Trigger;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddEventStateTriggerMessageCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddEventStateTriggerMessageCommand");
static_assert(sizeof(EndMobPrefabActor_AddEventStateTriggerMessageCommand) == 0x000014, "Wrong size on EndMobPrefabActor_AddEventStateTriggerMessageCommand");
static_assert(offsetof(EndMobPrefabActor_AddEventStateTriggerMessageCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddEventStateTriggerMessageCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddEventStateTriggerMessageCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddEventStateTriggerMessageCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddEventStateTriggerMessageCommand, Trigger) == 0x00000C, "Member 'EndMobPrefabActor_AddEventStateTriggerMessageCommand::Trigger' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddEventStateTriggerMessageCommand, ReturnValue) == 0x000010, "Member 'EndMobPrefabActor_AddEventStateTriggerMessageCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddEventUnbindMessageCommand
// 0x0010 (0x0010 - 0x0000)
struct EndMobPrefabActor_AddEventUnbindMessageCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddEventUnbindMessageCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddEventUnbindMessageCommand");
static_assert(sizeof(EndMobPrefabActor_AddEventUnbindMessageCommand) == 0x000010, "Wrong size on EndMobPrefabActor_AddEventUnbindMessageCommand");
static_assert(offsetof(EndMobPrefabActor_AddEventUnbindMessageCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddEventUnbindMessageCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddEventUnbindMessageCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddEventUnbindMessageCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddEventUnbindMessageCommand, ReturnValue) == 0x00000C, "Member 'EndMobPrefabActor_AddEventUnbindMessageCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddLookAtEndExecuteCommand
// 0x0010 (0x0010 - 0x0000)
struct EndMobPrefabActor_AddLookAtEndExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddLookAtEndExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddLookAtEndExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddLookAtEndExecuteCommand) == 0x000010, "Wrong size on EndMobPrefabActor_AddLookAtEndExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddLookAtEndExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddLookAtEndExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtEndExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddLookAtEndExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtEndExecuteCommand, ReturnValue) == 0x00000C, "Member 'EndMobPrefabActor_AddLookAtEndExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddLookAtExecuteCommand
// 0x0028 (0x0028 - 0x0000)
struct EndMobPrefabActor_AddLookAtExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtTargetMob;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtBlendRate;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookAway;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CompleteTimeRange;                                 // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddLookAtExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddLookAtExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddLookAtExecuteCommand) == 0x000028, "Wrong size on EndMobPrefabActor_AddLookAtExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddLookAtExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddLookAtExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddLookAtExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtExecuteCommand, LookAtTargetMob) == 0x00000C, "Member 'EndMobPrefabActor_AddLookAtExecuteCommand::LookAtTargetMob' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtExecuteCommand, LookAtBlendRate) == 0x000014, "Member 'EndMobPrefabActor_AddLookAtExecuteCommand::LookAtBlendRate' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtExecuteCommand, bLookAway) == 0x000018, "Member 'EndMobPrefabActor_AddLookAtExecuteCommand::bLookAway' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtExecuteCommand, CompleteTimeRange) == 0x00001C, "Member 'EndMobPrefabActor_AddLookAtExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtExecuteCommand, ReturnValue) == 0x000024, "Member 'EndMobPrefabActor_AddLookAtExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddLookAtStartExecuteCommand
// 0x0020 (0x0020 - 0x0000)
struct EndMobPrefabActor_AddLookAtStartExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtTargetMob;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtBlendRate;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookAway;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddLookAtStartExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddLookAtStartExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddLookAtStartExecuteCommand) == 0x000020, "Wrong size on EndMobPrefabActor_AddLookAtStartExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddLookAtStartExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddLookAtStartExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtStartExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddLookAtStartExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtStartExecuteCommand, LookAtTargetMob) == 0x00000C, "Member 'EndMobPrefabActor_AddLookAtStartExecuteCommand::LookAtTargetMob' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtStartExecuteCommand, LookAtBlendRate) == 0x000014, "Member 'EndMobPrefabActor_AddLookAtStartExecuteCommand::LookAtBlendRate' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtStartExecuteCommand, bLookAway) == 0x000018, "Member 'EndMobPrefabActor_AddLookAtStartExecuteCommand::bLookAway' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddLookAtStartExecuteCommand, ReturnValue) == 0x00001C, "Member 'EndMobPrefabActor_AddLookAtStartExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddMoveArroundExecuteCommand
// 0x0030 (0x0030 - 0x0000)
struct EndMobPrefabActor_AddMoveArroundExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRadius;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunRate;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MoveDistanceRange;                                 // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MoveWaitTimeRange;                                 // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTimeOut;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CautionDistance;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddMoveArroundExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddMoveArroundExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddMoveArroundExecuteCommand) == 0x000030, "Wrong size on EndMobPrefabActor_AddMoveArroundExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddMoveArroundExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddMoveArroundExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddMoveArroundExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddMoveArroundExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddMoveArroundExecuteCommand, MoveRadius) == 0x00000C, "Member 'EndMobPrefabActor_AddMoveArroundExecuteCommand::MoveRadius' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddMoveArroundExecuteCommand, RunRate) == 0x000010, "Member 'EndMobPrefabActor_AddMoveArroundExecuteCommand::RunRate' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddMoveArroundExecuteCommand, MoveDistanceRange) == 0x000014, "Member 'EndMobPrefabActor_AddMoveArroundExecuteCommand::MoveDistanceRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddMoveArroundExecuteCommand, MoveWaitTimeRange) == 0x00001C, "Member 'EndMobPrefabActor_AddMoveArroundExecuteCommand::MoveWaitTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddMoveArroundExecuteCommand, MoveTimeOut) == 0x000024, "Member 'EndMobPrefabActor_AddMoveArroundExecuteCommand::MoveTimeOut' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddMoveArroundExecuteCommand, CautionDistance) == 0x000028, "Member 'EndMobPrefabActor_AddMoveArroundExecuteCommand::CautionDistance' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddMoveArroundExecuteCommand, ReturnValue) == 0x00002C, "Member 'EndMobPrefabActor_AddMoveArroundExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddOnceConditionCommand
// 0x0014 (0x0014 - 0x0000)
struct EndMobPrefabActor_AddOnceConditionCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowReset;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddOnceConditionCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddOnceConditionCommand");
static_assert(sizeof(EndMobPrefabActor_AddOnceConditionCommand) == 0x000014, "Wrong size on EndMobPrefabActor_AddOnceConditionCommand");
static_assert(offsetof(EndMobPrefabActor_AddOnceConditionCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddOnceConditionCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddOnceConditionCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddOnceConditionCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddOnceConditionCommand, bAllowReset) == 0x00000C, "Member 'EndMobPrefabActor_AddOnceConditionCommand::bAllowReset' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddOnceConditionCommand, ReturnValue) == 0x000010, "Member 'EndMobPrefabActor_AddOnceConditionCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddPartyPositionConditionCommand
// 0x0028 (0x0028 - 0x0000)
struct EndMobPrefabActor_AddPartyPositionConditionCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceThreshold;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleThreshold;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightThreshold;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuationTime;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddPartyPositionConditionCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddPartyPositionConditionCommand");
static_assert(sizeof(EndMobPrefabActor_AddPartyPositionConditionCommand) == 0x000028, "Wrong size on EndMobPrefabActor_AddPartyPositionConditionCommand");
static_assert(offsetof(EndMobPrefabActor_AddPartyPositionConditionCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddPartyPositionConditionCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPartyPositionConditionCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddPartyPositionConditionCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPartyPositionConditionCommand, DistanceThreshold) == 0x00000C, "Member 'EndMobPrefabActor_AddPartyPositionConditionCommand::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPartyPositionConditionCommand, AngleThreshold) == 0x000010, "Member 'EndMobPrefabActor_AddPartyPositionConditionCommand::AngleThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPartyPositionConditionCommand, HeightThreshold) == 0x000014, "Member 'EndMobPrefabActor_AddPartyPositionConditionCommand::HeightThreshold' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPartyPositionConditionCommand, ContinuationTime) == 0x000018, "Member 'EndMobPrefabActor_AddPartyPositionConditionCommand::ContinuationTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPartyPositionConditionCommand, TargetName) == 0x00001C, "Member 'EndMobPrefabActor_AddPartyPositionConditionCommand::TargetName' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPartyPositionConditionCommand, ReturnValue) == 0x000024, "Member 'EndMobPrefabActor_AddPartyPositionConditionCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddPlayingAnimationConditionCommand
// 0x0030 (0x0030 - 0x0000)
struct EndMobPrefabActor_AddPlayingAnimationConditionCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion0;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion1;                                           // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion2;                                           // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion3;                                           // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddPlayingAnimationConditionCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddPlayingAnimationConditionCommand");
static_assert(sizeof(EndMobPrefabActor_AddPlayingAnimationConditionCommand) == 0x000030, "Wrong size on EndMobPrefabActor_AddPlayingAnimationConditionCommand");
static_assert(offsetof(EndMobPrefabActor_AddPlayingAnimationConditionCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddPlayingAnimationConditionCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPlayingAnimationConditionCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddPlayingAnimationConditionCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPlayingAnimationConditionCommand, Motion0) == 0x00000C, "Member 'EndMobPrefabActor_AddPlayingAnimationConditionCommand::Motion0' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPlayingAnimationConditionCommand, Motion1) == 0x000014, "Member 'EndMobPrefabActor_AddPlayingAnimationConditionCommand::Motion1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPlayingAnimationConditionCommand, Motion2) == 0x00001C, "Member 'EndMobPrefabActor_AddPlayingAnimationConditionCommand::Motion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPlayingAnimationConditionCommand, Motion3) == 0x000024, "Member 'EndMobPrefabActor_AddPlayingAnimationConditionCommand::Motion3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddPlayingAnimationConditionCommand, ReturnValue) == 0x00002C, "Member 'EndMobPrefabActor_AddPlayingAnimationConditionCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddRandom4AnimationExecuteCommand
// 0x0074 (0x0074 - 0x0000)
struct EndMobPrefabActor_AddRandom4AnimationExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion1;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight1;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel1;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion2;                                           // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight2;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel2;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion3;                                           // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight3;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel3;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion4;                                           // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight4;                                           // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel4;                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CompleteTimeRange;                                 // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddRandom4AnimationExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand) == 0x000074, "Wrong size on EndMobPrefabActor_AddRandom4AnimationExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, Motion1) == 0x00000C, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::Motion1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, Weight1) == 0x000014, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::Weight1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, bAllowMotionCancel1) == 0x000018, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::bAllowMotionCancel1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, Motion2) == 0x00001C, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::Motion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, Weight2) == 0x000024, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::Weight2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, bAllowMotionCancel2) == 0x000028, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::bAllowMotionCancel2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, Motion3) == 0x00002C, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::Motion3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, Weight3) == 0x000034, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::Weight3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, bAllowMotionCancel3) == 0x000038, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::bAllowMotionCancel3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, Motion4) == 0x00003C, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::Motion4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, Weight4) == 0x000044, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::Weight4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, bAllowMotionCancel4) == 0x000048, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::bAllowMotionCancel4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, bLooping) == 0x000049, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, BlendTime) == 0x00004C, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, Layer) == 0x000050, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, ReplaceBaseMotion) == 0x000058, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, ReplaceBaseLookAtTarget) == 0x000060, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, CompleteTimeRange) == 0x000068, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationExecuteCommand, ReturnValue) == 0x000070, "Member 'EndMobPrefabActor_AddRandom4AnimationExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddRandom4AnimationWithLookAtExecuteCommand
// 0x0084 (0x0084 - 0x0000)
struct EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion1;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight1;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel1;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion2;                                           // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight2;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel2;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion3;                                           // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight3;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel3;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion4;                                           // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight4;                                           // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel4;                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtTargetMob;                                   // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtBlendRate;                                   // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookAway;                                         // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CompleteTimeRange;                                 // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand) == 0x000084, "Wrong size on EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, Motion1) == 0x00000C, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::Motion1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, Weight1) == 0x000014, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::Weight1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, bAllowMotionCancel1) == 0x000018, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::bAllowMotionCancel1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, Motion2) == 0x00001C, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::Motion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, Weight2) == 0x000024, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::Weight2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, bAllowMotionCancel2) == 0x000028, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::bAllowMotionCancel2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, Motion3) == 0x00002C, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::Motion3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, Weight3) == 0x000034, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::Weight3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, bAllowMotionCancel3) == 0x000038, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::bAllowMotionCancel3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, Motion4) == 0x00003C, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::Motion4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, Weight4) == 0x000044, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::Weight4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, bAllowMotionCancel4) == 0x000048, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::bAllowMotionCancel4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, bLooping) == 0x000049, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, BlendTime) == 0x00004C, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, Layer) == 0x000050, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, ReplaceBaseMotion) == 0x000058, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, ReplaceBaseLookAtTarget) == 0x000060, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, LookAtTargetMob) == 0x000068, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::LookAtTargetMob' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, LookAtBlendRate) == 0x000070, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::LookAtBlendRate' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, bLookAway) == 0x000074, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::bLookAway' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, CompleteTimeRange) == 0x000078, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand, ReturnValue) == 0x000080, "Member 'EndMobPrefabActor_AddRandom4AnimationWithLookAtExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddRandom8AnimationExecuteCommand
// 0x00B4 (0x00B4 - 0x0000)
struct EndMobPrefabActor_AddRandom8AnimationExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion1;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight1;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel1;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion2;                                           // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight2;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel2;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion3;                                           // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight3;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel3;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion4;                                           // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight4;                                           // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel4;                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion5;                                           // 0x004C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight5;                                           // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel5;                               // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion6;                                           // 0x005C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight6;                                           // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel6;                               // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion7;                                           // 0x006C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight7;                                           // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel7;                               // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion8;                                           // 0x007C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight8;                                           // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel8;                               // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0089(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CompleteTimeRange;                                 // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00B0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddRandom8AnimationExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand) == 0x0000B4, "Wrong size on EndMobPrefabActor_AddRandom8AnimationExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Motion1) == 0x00000C, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Motion1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Weight1) == 0x000014, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Weight1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, bAllowMotionCancel1) == 0x000018, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::bAllowMotionCancel1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Motion2) == 0x00001C, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Motion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Weight2) == 0x000024, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Weight2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, bAllowMotionCancel2) == 0x000028, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::bAllowMotionCancel2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Motion3) == 0x00002C, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Motion3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Weight3) == 0x000034, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Weight3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, bAllowMotionCancel3) == 0x000038, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::bAllowMotionCancel3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Motion4) == 0x00003C, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Motion4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Weight4) == 0x000044, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Weight4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, bAllowMotionCancel4) == 0x000048, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::bAllowMotionCancel4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Motion5) == 0x00004C, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Motion5' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Weight5) == 0x000054, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Weight5' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, bAllowMotionCancel5) == 0x000058, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::bAllowMotionCancel5' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Motion6) == 0x00005C, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Motion6' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Weight6) == 0x000064, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Weight6' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, bAllowMotionCancel6) == 0x000068, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::bAllowMotionCancel6' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Motion7) == 0x00006C, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Motion7' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Weight7) == 0x000074, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Weight7' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, bAllowMotionCancel7) == 0x000078, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::bAllowMotionCancel7' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Motion8) == 0x00007C, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Motion8' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Weight8) == 0x000084, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Weight8' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, bAllowMotionCancel8) == 0x000088, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::bAllowMotionCancel8' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, bLooping) == 0x000089, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, BlendTime) == 0x00008C, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, Layer) == 0x000090, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, ReplaceBaseMotion) == 0x000098, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, ReplaceBaseLookAtTarget) == 0x0000A0, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, CompleteTimeRange) == 0x0000A8, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationExecuteCommand, ReturnValue) == 0x0000B0, "Member 'EndMobPrefabActor_AddRandom8AnimationExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddRandom8AnimationWithLookAtExecuteCommand
// 0x00C4 (0x00C4 - 0x0000)
struct EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion1;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight1;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel1;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion2;                                           // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight2;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel2;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion3;                                           // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight3;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel3;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion4;                                           // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight4;                                           // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel4;                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion5;                                           // 0x004C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight5;                                           // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel5;                               // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion6;                                           // 0x005C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight6;                                           // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel6;                               // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion7;                                           // 0x006C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight7;                                           // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel7;                               // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Motion8;                                           // 0x007C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight8;                                           // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel8;                               // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0089(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtTargetMob;                                   // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtBlendRate;                                   // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookAway;                                         // 0x00B4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CompleteTimeRange;                                 // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00C0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand) == 0x0000C4, "Wrong size on EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Motion1) == 0x00000C, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Motion1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Weight1) == 0x000014, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Weight1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, bAllowMotionCancel1) == 0x000018, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::bAllowMotionCancel1' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Motion2) == 0x00001C, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Motion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Weight2) == 0x000024, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Weight2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, bAllowMotionCancel2) == 0x000028, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::bAllowMotionCancel2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Motion3) == 0x00002C, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Motion3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Weight3) == 0x000034, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Weight3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, bAllowMotionCancel3) == 0x000038, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::bAllowMotionCancel3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Motion4) == 0x00003C, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Motion4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Weight4) == 0x000044, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Weight4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, bAllowMotionCancel4) == 0x000048, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::bAllowMotionCancel4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Motion5) == 0x00004C, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Motion5' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Weight5) == 0x000054, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Weight5' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, bAllowMotionCancel5) == 0x000058, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::bAllowMotionCancel5' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Motion6) == 0x00005C, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Motion6' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Weight6) == 0x000064, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Weight6' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, bAllowMotionCancel6) == 0x000068, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::bAllowMotionCancel6' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Motion7) == 0x00006C, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Motion7' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Weight7) == 0x000074, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Weight7' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, bAllowMotionCancel7) == 0x000078, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::bAllowMotionCancel7' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Motion8) == 0x00007C, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Motion8' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Weight8) == 0x000084, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Weight8' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, bAllowMotionCancel8) == 0x000088, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::bAllowMotionCancel8' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, bLooping) == 0x000089, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, BlendTime) == 0x00008C, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, Layer) == 0x000090, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, ReplaceBaseMotion) == 0x000098, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, ReplaceBaseLookAtTarget) == 0x0000A0, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, LookAtTargetMob) == 0x0000A8, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::LookAtTargetMob' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, LookAtBlendRate) == 0x0000B0, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::LookAtBlendRate' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, bLookAway) == 0x0000B4, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::bLookAway' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, CompleteTimeRange) == 0x0000B8, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand, ReturnValue) == 0x0000C0, "Member 'EndMobPrefabActor_AddRandom8AnimationWithLookAtExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddRandomAnimationExecuteCommand
// 0x0050 (0x0050 - 0x0000)
struct EndMobPrefabActor_AddRandomAnimationExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndMobPrefabRandomAnimationExecuteItem> Items;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CompleteTimeRange;                                 // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMobPrefabActor_AddRandomAnimationExecuteCommand) == 0x000008, "Wrong alignment on EndMobPrefabActor_AddRandomAnimationExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddRandomAnimationExecuteCommand) == 0x000050, "Wrong size on EndMobPrefabActor_AddRandomAnimationExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddRandomAnimationExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddRandomAnimationExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationExecuteCommand, Items) == 0x000010, "Member 'EndMobPrefabActor_AddRandomAnimationExecuteCommand::Items' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationExecuteCommand, bLooping) == 0x000020, "Member 'EndMobPrefabActor_AddRandomAnimationExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationExecuteCommand, BlendTime) == 0x000024, "Member 'EndMobPrefabActor_AddRandomAnimationExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationExecuteCommand, Layer) == 0x000028, "Member 'EndMobPrefabActor_AddRandomAnimationExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationExecuteCommand, ReplaceBaseMotion) == 0x000030, "Member 'EndMobPrefabActor_AddRandomAnimationExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationExecuteCommand, ReplaceBaseLookAtTarget) == 0x000038, "Member 'EndMobPrefabActor_AddRandomAnimationExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationExecuteCommand, CompleteTimeRange) == 0x000040, "Member 'EndMobPrefabActor_AddRandomAnimationExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationExecuteCommand, ReturnValue) == 0x000048, "Member 'EndMobPrefabActor_AddRandomAnimationExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddRandomAnimationWithLookAtExecuteCommand
// 0x0060 (0x0060 - 0x0000)
struct EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndMobPrefabRandomAnimationExecuteItem> Items;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtTargetMob;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtBlendRate;                                   // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookAway;                                         // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CompleteTimeRange;                                 // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand) == 0x000008, "Wrong alignment on EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand) == 0x000060, "Wrong size on EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, Items) == 0x000010, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::Items' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, bLooping) == 0x000020, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, BlendTime) == 0x000024, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, Layer) == 0x000028, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, ReplaceBaseMotion) == 0x000030, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, ReplaceBaseLookAtTarget) == 0x000038, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, LookAtTargetMob) == 0x000040, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::LookAtTargetMob' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, LookAtBlendRate) == 0x000048, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::LookAtBlendRate' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, bLookAway) == 0x00004C, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::bLookAway' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, CompleteTimeRange) == 0x000050, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand, ReturnValue) == 0x000058, "Member 'EndMobPrefabActor_AddRandomAnimationWithLookAtExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddRandomConditionCommand
// 0x0014 (0x0014 - 0x0000)
struct EndMobPrefabActor_AddRandomConditionCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddRandomConditionCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddRandomConditionCommand");
static_assert(sizeof(EndMobPrefabActor_AddRandomConditionCommand) == 0x000014, "Wrong size on EndMobPrefabActor_AddRandomConditionCommand");
static_assert(offsetof(EndMobPrefabActor_AddRandomConditionCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddRandomConditionCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomConditionCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddRandomConditionCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomConditionCommand, Rate) == 0x00000C, "Member 'EndMobPrefabActor_AddRandomConditionCommand::Rate' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddRandomConditionCommand, ReturnValue) == 0x000010, "Member 'EndMobPrefabActor_AddRandomConditionCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddTimeLink2AnimationExecuteCommand
// 0x005C (0x005C - 0x0000)
struct EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CompleteTimeRange;                                 // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel;                                // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LinkedMobId2;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion2;                                     // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion2;                          // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand) == 0x00005C, "Wrong size on EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, Motion) == 0x00000C, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::Motion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, bLooping) == 0x000014, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, BlendTime) == 0x000018, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, Layer) == 0x00001C, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, ReplaceBaseMotion) == 0x000024, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, ReplaceBaseLookAtTarget) == 0x00002C, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, CompleteTimeRange) == 0x000034, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, bAllowMotionCancel) == 0x00003C, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::bAllowMotionCancel' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, LinkedMobId2) == 0x000040, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::LinkedMobId2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, LinkedMotion2) == 0x000048, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::LinkedMotion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, LinkedReplaceBaseMotion2) == 0x000050, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::LinkedReplaceBaseMotion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand, ReturnValue) == 0x000058, "Member 'EndMobPrefabActor_AddTimeLink2AnimationExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddTimeLink4AnimationExecuteCommand
// 0x008C (0x008C - 0x0000)
struct EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CompleteTimeRange;                                 // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel;                                // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LinkedMobId2;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion2;                                     // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion2;                          // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMobId3;                                      // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion3;                                     // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion3;                          // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMobId4;                                      // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion4;                                     // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion4;                          // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand) == 0x00008C, "Wrong size on EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, Motion) == 0x00000C, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::Motion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, bLooping) == 0x000014, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, BlendTime) == 0x000018, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, Layer) == 0x00001C, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, ReplaceBaseMotion) == 0x000024, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, ReplaceBaseLookAtTarget) == 0x00002C, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, CompleteTimeRange) == 0x000034, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, bAllowMotionCancel) == 0x00003C, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::bAllowMotionCancel' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, LinkedMobId2) == 0x000040, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::LinkedMobId2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, LinkedMotion2) == 0x000048, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::LinkedMotion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, LinkedReplaceBaseMotion2) == 0x000050, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::LinkedReplaceBaseMotion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, LinkedMobId3) == 0x000058, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::LinkedMobId3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, LinkedMotion3) == 0x000060, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::LinkedMotion3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, LinkedReplaceBaseMotion3) == 0x000068, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::LinkedReplaceBaseMotion3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, LinkedMobId4) == 0x000070, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::LinkedMobId4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, LinkedMotion4) == 0x000078, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::LinkedMotion4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, LinkedReplaceBaseMotion4) == 0x000080, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::LinkedReplaceBaseMotion4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand, ReturnValue) == 0x000088, "Member 'EndMobPrefabActor_AddTimeLink4AnimationExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddTimeLink8AnimationExecuteCommand
// 0x00EC (0x00EC - 0x0000)
struct EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Motion;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Layer;                                             // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseMotion;                                 // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceBaseLookAtTarget;                           // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CompleteTimeRange;                                 // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMotionCancel;                                // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LinkedMobId2;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion2;                                     // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion2;                          // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMobId3;                                      // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion3;                                     // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion3;                          // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMobId4;                                      // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion4;                                     // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion4;                          // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMobId5;                                      // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion5;                                     // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion5;                          // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMobId6;                                      // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion6;                                     // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion6;                          // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMobId7;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion7;                                     // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion7;                          // 0x00C8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMobId8;                                      // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedMotion8;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkedReplaceBaseMotion8;                          // 0x00E0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00E8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand");
static_assert(sizeof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand) == 0x0000EC, "Wrong size on EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, Motion) == 0x00000C, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::Motion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, bLooping) == 0x000014, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::bLooping' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, BlendTime) == 0x000018, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::BlendTime' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, Layer) == 0x00001C, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::Layer' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, ReplaceBaseMotion) == 0x000024, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::ReplaceBaseMotion' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, ReplaceBaseLookAtTarget) == 0x00002C, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::ReplaceBaseLookAtTarget' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, CompleteTimeRange) == 0x000034, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::CompleteTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, bAllowMotionCancel) == 0x00003C, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::bAllowMotionCancel' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMobId2) == 0x000040, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMobId2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMotion2) == 0x000048, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMotion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedReplaceBaseMotion2) == 0x000050, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedReplaceBaseMotion2' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMobId3) == 0x000058, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMobId3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMotion3) == 0x000060, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMotion3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedReplaceBaseMotion3) == 0x000068, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedReplaceBaseMotion3' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMobId4) == 0x000070, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMobId4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMotion4) == 0x000078, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMotion4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedReplaceBaseMotion4) == 0x000080, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedReplaceBaseMotion4' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMobId5) == 0x000088, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMobId5' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMotion5) == 0x000090, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMotion5' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedReplaceBaseMotion5) == 0x000098, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedReplaceBaseMotion5' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMobId6) == 0x0000A0, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMobId6' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMotion6) == 0x0000A8, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMotion6' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedReplaceBaseMotion6) == 0x0000B0, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedReplaceBaseMotion6' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMobId7) == 0x0000B8, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMobId7' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMotion7) == 0x0000C0, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMotion7' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedReplaceBaseMotion7) == 0x0000C8, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedReplaceBaseMotion7' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMobId8) == 0x0000D0, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMobId8' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedMotion8) == 0x0000D8, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedMotion8' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, LinkedReplaceBaseMotion8) == 0x0000E0, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::LinkedReplaceBaseMotion8' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand, ReturnValue) == 0x0000E8, "Member 'EndMobPrefabActor_AddTimeLink8AnimationExecuteCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.AddTimerConditionCommand
// 0x0018 (0x0018 - 0x0000)
struct EndMobPrefabActor_AddTimerConditionCommand final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainCommandId;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WaitTimeRange;                                     // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_AddTimerConditionCommand) == 0x000004, "Wrong alignment on EndMobPrefabActor_AddTimerConditionCommand");
static_assert(sizeof(EndMobPrefabActor_AddTimerConditionCommand) == 0x000018, "Wrong size on EndMobPrefabActor_AddTimerConditionCommand");
static_assert(offsetof(EndMobPrefabActor_AddTimerConditionCommand, MobId) == 0x000000, "Member 'EndMobPrefabActor_AddTimerConditionCommand::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimerConditionCommand, ChainCommandId) == 0x000008, "Member 'EndMobPrefabActor_AddTimerConditionCommand::ChainCommandId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimerConditionCommand, WaitTimeRange) == 0x00000C, "Member 'EndMobPrefabActor_AddTimerConditionCommand::WaitTimeRange' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_AddTimerConditionCommand, ReturnValue) == 0x000014, "Member 'EndMobPrefabActor_AddTimerConditionCommand::ReturnValue' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.RemoveRegistryBoneFilterWhenMoving
// 0x0010 (0x0010 - 0x0000)
struct EndMobPrefabActor_RemoveRegistryBoneFilterWhenMoving final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_RemoveRegistryBoneFilterWhenMoving) == 0x000004, "Wrong alignment on EndMobPrefabActor_RemoveRegistryBoneFilterWhenMoving");
static_assert(sizeof(EndMobPrefabActor_RemoveRegistryBoneFilterWhenMoving) == 0x000010, "Wrong size on EndMobPrefabActor_RemoveRegistryBoneFilterWhenMoving");
static_assert(offsetof(EndMobPrefabActor_RemoveRegistryBoneFilterWhenMoving, MobId) == 0x000000, "Member 'EndMobPrefabActor_RemoveRegistryBoneFilterWhenMoving::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_RemoveRegistryBoneFilterWhenMoving, MotionName) == 0x000008, "Member 'EndMobPrefabActor_RemoveRegistryBoneFilterWhenMoving::MotionName' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.RemoveRegistryMotionLookupTable
// 0x0010 (0x0010 - 0x0000)
struct EndMobPrefabActor_RemoveRegistryMotionLookupTable final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_RemoveRegistryMotionLookupTable) == 0x000004, "Wrong alignment on EndMobPrefabActor_RemoveRegistryMotionLookupTable");
static_assert(sizeof(EndMobPrefabActor_RemoveRegistryMotionLookupTable) == 0x000010, "Wrong size on EndMobPrefabActor_RemoveRegistryMotionLookupTable");
static_assert(offsetof(EndMobPrefabActor_RemoveRegistryMotionLookupTable, MobId) == 0x000000, "Member 'EndMobPrefabActor_RemoveRegistryMotionLookupTable::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_RemoveRegistryMotionLookupTable, MotionName) == 0x000008, "Member 'EndMobPrefabActor_RemoveRegistryMotionLookupTable::MotionName' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.RemoveWeaponRegistry
// 0x000C (0x000C - 0x0000)
struct EndMobPrefabActor_RemoveWeaponRegistry final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   WeaponSlot;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMobPrefabActor_RemoveWeaponRegistry) == 0x000004, "Wrong alignment on EndMobPrefabActor_RemoveWeaponRegistry");
static_assert(sizeof(EndMobPrefabActor_RemoveWeaponRegistry) == 0x00000C, "Wrong size on EndMobPrefabActor_RemoveWeaponRegistry");
static_assert(offsetof(EndMobPrefabActor_RemoveWeaponRegistry, MobId) == 0x000000, "Member 'EndMobPrefabActor_RemoveWeaponRegistry::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_RemoveWeaponRegistry, WeaponSlot) == 0x000008, "Member 'EndMobPrefabActor_RemoveWeaponRegistry::WeaponSlot' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetRegistryAnimSetName
// 0x0010 (0x0010 - 0x0000)
struct EndMobPrefabActor_SetRegistryAnimSetName final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimSetName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetRegistryAnimSetName) == 0x000004, "Wrong alignment on EndMobPrefabActor_SetRegistryAnimSetName");
static_assert(sizeof(EndMobPrefabActor_SetRegistryAnimSetName) == 0x000010, "Wrong size on EndMobPrefabActor_SetRegistryAnimSetName");
static_assert(offsetof(EndMobPrefabActor_SetRegistryAnimSetName, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetRegistryAnimSetName::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetRegistryAnimSetName, AnimSetName) == 0x000008, "Member 'EndMobPrefabActor_SetRegistryAnimSetName::AnimSetName' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetRegistryBoneFilterWhenMoving
// 0x0018 (0x0018 - 0x0000)
struct EndMobPrefabActor_SetRegistryBoneFilterWhenMoving final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneFilter;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetRegistryBoneFilterWhenMoving) == 0x000004, "Wrong alignment on EndMobPrefabActor_SetRegistryBoneFilterWhenMoving");
static_assert(sizeof(EndMobPrefabActor_SetRegistryBoneFilterWhenMoving) == 0x000018, "Wrong size on EndMobPrefabActor_SetRegistryBoneFilterWhenMoving");
static_assert(offsetof(EndMobPrefabActor_SetRegistryBoneFilterWhenMoving, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetRegistryBoneFilterWhenMoving::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetRegistryBoneFilterWhenMoving, MotionName) == 0x000008, "Member 'EndMobPrefabActor_SetRegistryBoneFilterWhenMoving::MotionName' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetRegistryBoneFilterWhenMoving, BoneFilter) == 0x000010, "Member 'EndMobPrefabActor_SetRegistryBoneFilterWhenMoving::BoneFilter' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetRegistryCharacterClass
// 0x0030 (0x0030 - 0x0000)
struct EndMobPrefabActor_SetRegistryCharacterClass final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetRegistryCharacterClass) == 0x000008, "Wrong alignment on EndMobPrefabActor_SetRegistryCharacterClass");
static_assert(sizeof(EndMobPrefabActor_SetRegistryCharacterClass) == 0x000030, "Wrong size on EndMobPrefabActor_SetRegistryCharacterClass");
static_assert(offsetof(EndMobPrefabActor_SetRegistryCharacterClass, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetRegistryCharacterClass::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetRegistryCharacterClass, CharacterClass) == 0x000008, "Member 'EndMobPrefabActor_SetRegistryCharacterClass::CharacterClass' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetRegistryInitialLookAtBlendRate
// 0x000C (0x000C - 0x0000)
struct EndMobPrefabActor_SetRegistryInitialLookAtBlendRate final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialLookAtBlendRate;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetRegistryInitialLookAtBlendRate) == 0x000004, "Wrong alignment on EndMobPrefabActor_SetRegistryInitialLookAtBlendRate");
static_assert(sizeof(EndMobPrefabActor_SetRegistryInitialLookAtBlendRate) == 0x00000C, "Wrong size on EndMobPrefabActor_SetRegistryInitialLookAtBlendRate");
static_assert(offsetof(EndMobPrefabActor_SetRegistryInitialLookAtBlendRate, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetRegistryInitialLookAtBlendRate::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetRegistryInitialLookAtBlendRate, InitialLookAtBlendRate) == 0x000008, "Member 'EndMobPrefabActor_SetRegistryInitialLookAtBlendRate::InitialLookAtBlendRate' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetRegistryInitialLookAtTargetMobId
// 0x0010 (0x0010 - 0x0000)
struct EndMobPrefabActor_SetRegistryInitialLookAtTargetMobId final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InitialLookAtTargetMobId;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetRegistryInitialLookAtTargetMobId) == 0x000004, "Wrong alignment on EndMobPrefabActor_SetRegistryInitialLookAtTargetMobId");
static_assert(sizeof(EndMobPrefabActor_SetRegistryInitialLookAtTargetMobId) == 0x000010, "Wrong size on EndMobPrefabActor_SetRegistryInitialLookAtTargetMobId");
static_assert(offsetof(EndMobPrefabActor_SetRegistryInitialLookAtTargetMobId, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetRegistryInitialLookAtTargetMobId::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetRegistryInitialLookAtTargetMobId, InitialLookAtTargetMobId) == 0x000008, "Member 'EndMobPrefabActor_SetRegistryInitialLookAtTargetMobId::InitialLookAtTargetMobId' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetRegistryInitialLoopMotionName
// 0x0010 (0x0010 - 0x0000)
struct EndMobPrefabActor_SetRegistryInitialLoopMotionName final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InitialLoopMotionName;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetRegistryInitialLoopMotionName) == 0x000004, "Wrong alignment on EndMobPrefabActor_SetRegistryInitialLoopMotionName");
static_assert(sizeof(EndMobPrefabActor_SetRegistryInitialLoopMotionName) == 0x000010, "Wrong size on EndMobPrefabActor_SetRegistryInitialLoopMotionName");
static_assert(offsetof(EndMobPrefabActor_SetRegistryInitialLoopMotionName, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetRegistryInitialLoopMotionName::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetRegistryInitialLoopMotionName, InitialLoopMotionName) == 0x000008, "Member 'EndMobPrefabActor_SetRegistryInitialLoopMotionName::InitialLoopMotionName' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetRegistryInitialLoopMotionTimeLinkParentMobId
// 0x0010 (0x0010 - 0x0000)
struct EndMobPrefabActor_SetRegistryInitialLoopMotionTimeLinkParentMobId final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InitialLoopMotionTimeLinkParentMobId;              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetRegistryInitialLoopMotionTimeLinkParentMobId) == 0x000004, "Wrong alignment on EndMobPrefabActor_SetRegistryInitialLoopMotionTimeLinkParentMobId");
static_assert(sizeof(EndMobPrefabActor_SetRegistryInitialLoopMotionTimeLinkParentMobId) == 0x000010, "Wrong size on EndMobPrefabActor_SetRegistryInitialLoopMotionTimeLinkParentMobId");
static_assert(offsetof(EndMobPrefabActor_SetRegistryInitialLoopMotionTimeLinkParentMobId, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetRegistryInitialLoopMotionTimeLinkParentMobId::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetRegistryInitialLoopMotionTimeLinkParentMobId, InitialLoopMotionTimeLinkParentMobId) == 0x000008, "Member 'EndMobPrefabActor_SetRegistryInitialLoopMotionTimeLinkParentMobId::InitialLoopMotionTimeLinkParentMobId' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetRegistryMotionLookupTable
// 0x0018 (0x0018 - 0x0000)
struct EndMobPrefabActor_SetRegistryMotionLookupTable final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActualMotionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetRegistryMotionLookupTable) == 0x000004, "Wrong alignment on EndMobPrefabActor_SetRegistryMotionLookupTable");
static_assert(sizeof(EndMobPrefabActor_SetRegistryMotionLookupTable) == 0x000018, "Wrong size on EndMobPrefabActor_SetRegistryMotionLookupTable");
static_assert(offsetof(EndMobPrefabActor_SetRegistryMotionLookupTable, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetRegistryMotionLookupTable::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetRegistryMotionLookupTable, MotionName) == 0x000008, "Member 'EndMobPrefabActor_SetRegistryMotionLookupTable::MotionName' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetRegistryMotionLookupTable, ActualMotionName) == 0x000010, "Member 'EndMobPrefabActor_SetRegistryMotionLookupTable::ActualMotionName' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetWeaponRegistryAttachOffset
// 0x0024 (0x0024 - 0x0000)
struct EndMobPrefabActor_SetWeaponRegistryAttachOffset final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   WeaponSlot;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttachOffsetLocation;                              // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AttachOffsetRotation;                              // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetWeaponRegistryAttachOffset) == 0x000004, "Wrong alignment on EndMobPrefabActor_SetWeaponRegistryAttachOffset");
static_assert(sizeof(EndMobPrefabActor_SetWeaponRegistryAttachOffset) == 0x000024, "Wrong size on EndMobPrefabActor_SetWeaponRegistryAttachOffset");
static_assert(offsetof(EndMobPrefabActor_SetWeaponRegistryAttachOffset, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetWeaponRegistryAttachOffset::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetWeaponRegistryAttachOffset, WeaponSlot) == 0x000008, "Member 'EndMobPrefabActor_SetWeaponRegistryAttachOffset::WeaponSlot' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetWeaponRegistryAttachOffset, AttachOffsetLocation) == 0x00000C, "Member 'EndMobPrefabActor_SetWeaponRegistryAttachOffset::AttachOffsetLocation' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetWeaponRegistryAttachOffset, AttachOffsetRotation) == 0x000018, "Member 'EndMobPrefabActor_SetWeaponRegistryAttachOffset::AttachOffsetRotation' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetWeaponRegistryAttachSocketName
// 0x0014 (0x0014 - 0x0000)
struct EndMobPrefabActor_SetWeaponRegistryAttachSocketName final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   WeaponSlot;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocketName;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetWeaponRegistryAttachSocketName) == 0x000004, "Wrong alignment on EndMobPrefabActor_SetWeaponRegistryAttachSocketName");
static_assert(sizeof(EndMobPrefabActor_SetWeaponRegistryAttachSocketName) == 0x000014, "Wrong size on EndMobPrefabActor_SetWeaponRegistryAttachSocketName");
static_assert(offsetof(EndMobPrefabActor_SetWeaponRegistryAttachSocketName, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetWeaponRegistryAttachSocketName::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetWeaponRegistryAttachSocketName, WeaponSlot) == 0x000008, "Member 'EndMobPrefabActor_SetWeaponRegistryAttachSocketName::WeaponSlot' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetWeaponRegistryAttachSocketName, AttachSocketName) == 0x00000C, "Member 'EndMobPrefabActor_SetWeaponRegistryAttachSocketName::AttachSocketName' has a wrong offset!");

// Function EndGame.EndMobPrefabActor.SetWeaponRegistryWeaponClass
// 0x0038 (0x0038 - 0x0000)
struct EndMobPrefabActor_SetWeaponRegistryWeaponClass final
{
public:
	class FName                                   MobId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   WeaponSlot;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   WeaponClass;                                       // 0x0010(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMobPrefabActor_SetWeaponRegistryWeaponClass) == 0x000008, "Wrong alignment on EndMobPrefabActor_SetWeaponRegistryWeaponClass");
static_assert(sizeof(EndMobPrefabActor_SetWeaponRegistryWeaponClass) == 0x000038, "Wrong size on EndMobPrefabActor_SetWeaponRegistryWeaponClass");
static_assert(offsetof(EndMobPrefabActor_SetWeaponRegistryWeaponClass, MobId) == 0x000000, "Member 'EndMobPrefabActor_SetWeaponRegistryWeaponClass::MobId' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetWeaponRegistryWeaponClass, WeaponSlot) == 0x000008, "Member 'EndMobPrefabActor_SetWeaponRegistryWeaponClass::WeaponSlot' has a wrong offset!");
static_assert(offsetof(EndMobPrefabActor_SetWeaponRegistryWeaponClass, WeaponClass) == 0x000010, "Member 'EndMobPrefabActor_SetWeaponRegistryWeaponClass::WeaponClass' has a wrong offset!");

// Function EndGame.EndMoogleCaptureGimmick.SetRestartBlock
// 0x0001 (0x0001 - 0x0000)
struct EndMoogleCaptureGimmick_SetRestartBlock final
{
public:
	bool                                          bBlock;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleCaptureGimmick_SetRestartBlock) == 0x000001, "Wrong alignment on EndMoogleCaptureGimmick_SetRestartBlock");
static_assert(sizeof(EndMoogleCaptureGimmick_SetRestartBlock) == 0x000001, "Wrong size on EndMoogleCaptureGimmick_SetRestartBlock");
static_assert(offsetof(EndMoogleCaptureGimmick_SetRestartBlock, bBlock) == 0x000000, "Member 'EndMoogleCaptureGimmick_SetRestartBlock::bBlock' has a wrong offset!");

// Function EndGame.EndMoogleGimmickSwitchActor.PlayAnim
// 0x0008 (0x0008 - 0x0000)
struct EndMoogleGimmickSwitchActor_PlayAnim final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMoogleGimmickSwitchActor_PlayAnim) == 0x000004, "Wrong alignment on EndMoogleGimmickSwitchActor_PlayAnim");
static_assert(sizeof(EndMoogleGimmickSwitchActor_PlayAnim) == 0x000008, "Wrong size on EndMoogleGimmickSwitchActor_PlayAnim");
static_assert(offsetof(EndMoogleGimmickSwitchActor_PlayAnim, AnimName) == 0x000000, "Member 'EndMoogleGimmickSwitchActor_PlayAnim::AnimName' has a wrong offset!");

// Function EndGame.EndShopListItemPane.OnShopAreaTubListIconSet
// 0x0010 (0x0010 - 0x0000)
struct EndShopListItemPane_OnShopAreaTubListIconSet final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopListItemPane_OnShopAreaTubListIconSet) == 0x000008, "Wrong alignment on EndShopListItemPane_OnShopAreaTubListIconSet");
static_assert(sizeof(EndShopListItemPane_OnShopAreaTubListIconSet) == 0x000010, "Wrong size on EndShopListItemPane_OnShopAreaTubListIconSet");
static_assert(offsetof(EndShopListItemPane_OnShopAreaTubListIconSet, ItemWidget) == 0x000000, "Member 'EndShopListItemPane_OnShopAreaTubListIconSet::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopListItemPane_OnShopAreaTubListIconSet, ItemIndex) == 0x000008, "Member 'EndShopListItemPane_OnShopAreaTubListIconSet::ItemIndex' has a wrong offset!");

// Function EndGame.EndNavAPI.DisableNavStreaming
// 0x0001 (0x0001 - 0x0000)
struct EndNavAPI_DisableNavStreaming final
{
public:
	bool                                          Disabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNavAPI_DisableNavStreaming) == 0x000001, "Wrong alignment on EndNavAPI_DisableNavStreaming");
static_assert(sizeof(EndNavAPI_DisableNavStreaming) == 0x000001, "Wrong size on EndNavAPI_DisableNavStreaming");
static_assert(offsetof(EndNavAPI_DisableNavStreaming, Disabled) == 0x000000, "Member 'EndNavAPI_DisableNavStreaming::Disabled' has a wrong offset!");

// Function EndGame.EndNavAPI.FindNearestNavMeshPoint
// 0x0030 (0x0030 - 0x0000)
struct EndNavAPI_FindNearestNavMeshPoint final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InModifierName;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SearchRange;                                       // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndQueryFilterType                           FilterType;                                        // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_FindNearestNavMeshPoint) == 0x000004, "Wrong alignment on EndNavAPI_FindNearestNavMeshPoint");
static_assert(sizeof(EndNavAPI_FindNearestNavMeshPoint) == 0x000030, "Wrong size on EndNavAPI_FindNearestNavMeshPoint");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, TargetLocation) == 0x000000, "Member 'EndNavAPI_FindNearestNavMeshPoint::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, OutLocation) == 0x00000C, "Member 'EndNavAPI_FindNearestNavMeshPoint::OutLocation' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, InModifierName) == 0x000018, "Member 'EndNavAPI_FindNearestNavMeshPoint::InModifierName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, SearchRange) == 0x000020, "Member 'EndNavAPI_FindNearestNavMeshPoint::SearchRange' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, FilterType) == 0x00002C, "Member 'EndNavAPI_FindNearestNavMeshPoint::FilterType' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, ReturnValue) == 0x00002D, "Member 'EndNavAPI_FindNearestNavMeshPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.FindNearestNavMeshPointAgent
// 0x0060 (0x0060 - 0x0000)
struct EndNavAPI_FindNearestNavMeshPointAgent final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InModifierName;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAgentProperties                    InAgentProperty;                                   // 0x0020(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SearchRange;                                       // 0x0050(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndQueryFilterType                           FilterType;                                        // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_FindNearestNavMeshPointAgent) == 0x000008, "Wrong alignment on EndNavAPI_FindNearestNavMeshPointAgent");
static_assert(sizeof(EndNavAPI_FindNearestNavMeshPointAgent) == 0x000060, "Wrong size on EndNavAPI_FindNearestNavMeshPointAgent");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, TargetLocation) == 0x000000, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, OutLocation) == 0x00000C, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::OutLocation' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, InModifierName) == 0x000018, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::InModifierName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, InAgentProperty) == 0x000020, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::InAgentProperty' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, SearchRange) == 0x000050, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::SearchRange' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, FilterType) == 0x00005C, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::FilterType' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, ReturnValue) == 0x00005D, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.GetAgentPropety
// 0x0038 (0x0038 - 0x0000)
struct EndNavAPI_GetAgentPropety final
{
public:
	EEndNavLayerType                              InLayerType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNavAgentProperties                    ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNavAPI_GetAgentPropety) == 0x000008, "Wrong alignment on EndNavAPI_GetAgentPropety");
static_assert(sizeof(EndNavAPI_GetAgentPropety) == 0x000038, "Wrong size on EndNavAPI_GetAgentPropety");
static_assert(offsetof(EndNavAPI_GetAgentPropety, InLayerType) == 0x000000, "Member 'EndNavAPI_GetAgentPropety::InLayerType' has a wrong offset!");
static_assert(offsetof(EndNavAPI_GetAgentPropety, ReturnValue) == 0x000008, "Member 'EndNavAPI_GetAgentPropety::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.GetNavFromName
// 0x0010 (0x0010 - 0x0000)
struct EndNavAPI_GetNavFromName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndNavModifierVolume*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNavAPI_GetNavFromName) == 0x000008, "Wrong alignment on EndNavAPI_GetNavFromName");
static_assert(sizeof(EndNavAPI_GetNavFromName) == 0x000010, "Wrong size on EndNavAPI_GetNavFromName");
static_assert(offsetof(EndNavAPI_GetNavFromName, Name_0) == 0x000000, "Member 'EndNavAPI_GetNavFromName::Name_0' has a wrong offset!");
static_assert(offsetof(EndNavAPI_GetNavFromName, ReturnValue) == 0x000008, "Member 'EndNavAPI_GetNavFromName::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.GetNavModifierTransform
// 0x0040 (0x0040 - 0x0000)
struct EndNavAPI_GetNavModifierTransform final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNavAPI_GetNavModifierTransform) == 0x000010, "Wrong alignment on EndNavAPI_GetNavModifierTransform");
static_assert(sizeof(EndNavAPI_GetNavModifierTransform) == 0x000040, "Wrong size on EndNavAPI_GetNavModifierTransform");
static_assert(offsetof(EndNavAPI_GetNavModifierTransform, Name_0) == 0x000000, "Member 'EndNavAPI_GetNavModifierTransform::Name_0' has a wrong offset!");
static_assert(offsetof(EndNavAPI_GetNavModifierTransform, ReturnValue) == 0x000010, "Member 'EndNavAPI_GetNavModifierTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.InvalidateAerialIgnoreVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_InvalidateAerialIgnoreVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_InvalidateAerialIgnoreVolume) == 0x000004, "Wrong alignment on EndNavAPI_InvalidateAerialIgnoreVolume");
static_assert(sizeof(EndNavAPI_InvalidateAerialIgnoreVolume) == 0x00000C, "Wrong size on EndNavAPI_InvalidateAerialIgnoreVolume");
static_assert(offsetof(EndNavAPI_InvalidateAerialIgnoreVolume, ActorName) == 0x000000, "Member 'EndNavAPI_InvalidateAerialIgnoreVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_InvalidateAerialIgnoreVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_InvalidateAerialIgnoreVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.InvalidateBlockingModifierVolume
// 0x0014 (0x0014 - 0x0000)
struct EndNavAPI_InvalidateBlockingModifierVolume final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_InvalidateBlockingModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_InvalidateBlockingModifierVolume");
static_assert(sizeof(EndNavAPI_InvalidateBlockingModifierVolume) == 0x000014, "Wrong size on EndNavAPI_InvalidateBlockingModifierVolume");
static_assert(offsetof(EndNavAPI_InvalidateBlockingModifierVolume, LevelName) == 0x000000, "Member 'EndNavAPI_InvalidateBlockingModifierVolume::LevelName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_InvalidateBlockingModifierVolume, ActorName) == 0x000008, "Member 'EndNavAPI_InvalidateBlockingModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_InvalidateBlockingModifierVolume, ReturnValue) == 0x000010, "Member 'EndNavAPI_InvalidateBlockingModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.InvalidateFieldActionModifierVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_InvalidateFieldActionModifierVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_InvalidateFieldActionModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_InvalidateFieldActionModifierVolume");
static_assert(sizeof(EndNavAPI_InvalidateFieldActionModifierVolume) == 0x00000C, "Wrong size on EndNavAPI_InvalidateFieldActionModifierVolume");
static_assert(offsetof(EndNavAPI_InvalidateFieldActionModifierVolume, ActorName) == 0x000000, "Member 'EndNavAPI_InvalidateFieldActionModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_InvalidateFieldActionModifierVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_InvalidateFieldActionModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.InvalidateNavModifierVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_InvalidateNavModifierVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_InvalidateNavModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_InvalidateNavModifierVolume");
static_assert(sizeof(EndNavAPI_InvalidateNavModifierVolume) == 0x00000C, "Wrong size on EndNavAPI_InvalidateNavModifierVolume");
static_assert(offsetof(EndNavAPI_InvalidateNavModifierVolume, ActorName) == 0x000000, "Member 'EndNavAPI_InvalidateNavModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_InvalidateNavModifierVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_InvalidateNavModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.ValidateAerialIgnoreVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_ValidateAerialIgnoreVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_ValidateAerialIgnoreVolume) == 0x000004, "Wrong alignment on EndNavAPI_ValidateAerialIgnoreVolume");
static_assert(sizeof(EndNavAPI_ValidateAerialIgnoreVolume) == 0x00000C, "Wrong size on EndNavAPI_ValidateAerialIgnoreVolume");
static_assert(offsetof(EndNavAPI_ValidateAerialIgnoreVolume, ActorName) == 0x000000, "Member 'EndNavAPI_ValidateAerialIgnoreVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_ValidateAerialIgnoreVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_ValidateAerialIgnoreVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.ValidateBlockingModifierVolume
// 0x0014 (0x0014 - 0x0000)
struct EndNavAPI_ValidateBlockingModifierVolume final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_ValidateBlockingModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_ValidateBlockingModifierVolume");
static_assert(sizeof(EndNavAPI_ValidateBlockingModifierVolume) == 0x000014, "Wrong size on EndNavAPI_ValidateBlockingModifierVolume");
static_assert(offsetof(EndNavAPI_ValidateBlockingModifierVolume, LevelName) == 0x000000, "Member 'EndNavAPI_ValidateBlockingModifierVolume::LevelName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_ValidateBlockingModifierVolume, ActorName) == 0x000008, "Member 'EndNavAPI_ValidateBlockingModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_ValidateBlockingModifierVolume, ReturnValue) == 0x000010, "Member 'EndNavAPI_ValidateBlockingModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.ValidateFieldActionModifierVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_ValidateFieldActionModifierVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_ValidateFieldActionModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_ValidateFieldActionModifierVolume");
static_assert(sizeof(EndNavAPI_ValidateFieldActionModifierVolume) == 0x00000C, "Wrong size on EndNavAPI_ValidateFieldActionModifierVolume");
static_assert(offsetof(EndNavAPI_ValidateFieldActionModifierVolume, ActorName) == 0x000000, "Member 'EndNavAPI_ValidateFieldActionModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_ValidateFieldActionModifierVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_ValidateFieldActionModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.ValidateNavModifierVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_ValidateNavModifierVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_ValidateNavModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_ValidateNavModifierVolume");
static_assert(sizeof(EndNavAPI_ValidateNavModifierVolume) == 0x00000C, "Wrong size on EndNavAPI_ValidateNavModifierVolume");
static_assert(offsetof(EndNavAPI_ValidateNavModifierVolume, ActorName) == 0x000000, "Member 'EndNavAPI_ValidateNavModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_ValidateNavModifierVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_ValidateNavModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndStoryDetailWindow.OnQuestInfoListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStoryDetailWindow_OnQuestInfoListMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStoryDetailWindow_OnQuestInfoListMeasureItem) == 0x000004, "Wrong alignment on EndStoryDetailWindow_OnQuestInfoListMeasureItem");
static_assert(sizeof(EndStoryDetailWindow_OnQuestInfoListMeasureItem) == 0x00000C, "Wrong size on EndStoryDetailWindow_OnQuestInfoListMeasureItem");
static_assert(offsetof(EndStoryDetailWindow_OnQuestInfoListMeasureItem, ItemIndex) == 0x000000, "Member 'EndStoryDetailWindow_OnQuestInfoListMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndStoryDetailWindow_OnQuestInfoListMeasureItem, ReturnValue) == 0x000004, "Member 'EndStoryDetailWindow_OnQuestInfoListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStoryDetailWindow.OnQuestInfoListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStoryDetailWindow_OnQuestInfoListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStoryDetailWindow_OnQuestInfoListSetupItem) == 0x000008, "Wrong alignment on EndStoryDetailWindow_OnQuestInfoListSetupItem");
static_assert(sizeof(EndStoryDetailWindow_OnQuestInfoListSetupItem) == 0x000010, "Wrong size on EndStoryDetailWindow_OnQuestInfoListSetupItem");
static_assert(offsetof(EndStoryDetailWindow_OnQuestInfoListSetupItem, ItemWidget) == 0x000000, "Member 'EndStoryDetailWindow_OnQuestInfoListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStoryDetailWindow_OnQuestInfoListSetupItem, ItemIndex) == 0x000008, "Member 'EndStoryDetailWindow_OnQuestInfoListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndPauseMenu.OnListMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndPauseMenu_OnListMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPauseMenu_OnListMenuPressedItem) == 0x000004, "Wrong alignment on EndPauseMenu_OnListMenuPressedItem");
static_assert(sizeof(EndPauseMenu_OnListMenuPressedItem) == 0x000004, "Wrong size on EndPauseMenu_OnListMenuPressedItem");
static_assert(offsetof(EndPauseMenu_OnListMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndPauseMenu_OnListMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndPauseMenu.OnListMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndPauseMenu_OnListMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPauseMenu_OnListMenuSetupItem) == 0x000008, "Wrong alignment on EndPauseMenu_OnListMenuSetupItem");
static_assert(sizeof(EndPauseMenu_OnListMenuSetupItem) == 0x000010, "Wrong size on EndPauseMenu_OnListMenuSetupItem");
static_assert(offsetof(EndPauseMenu_OnListMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndPauseMenu_OnListMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndPauseMenu_OnListMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndPauseMenu_OnListMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndNaviMap.ConvertToPosition2D
// 0x0014 (0x0014 - 0x0000)
struct EndNaviMap_ConvertToPosition2D final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMap_ConvertToPosition2D) == 0x000004, "Wrong alignment on EndNaviMap_ConvertToPosition2D");
static_assert(sizeof(EndNaviMap_ConvertToPosition2D) == 0x000014, "Wrong size on EndNaviMap_ConvertToPosition2D");
static_assert(offsetof(EndNaviMap_ConvertToPosition2D, InPos) == 0x000000, "Member 'EndNaviMap_ConvertToPosition2D::InPos' has a wrong offset!");
static_assert(offsetof(EndNaviMap_ConvertToPosition2D, ReturnValue) == 0x00000C, "Member 'EndNaviMap_ConvertToPosition2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndNaviMap.SetPosition3D
// 0x000C (0x000C - 0x0000)
struct EndNaviMap_SetPosition3D final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMap_SetPosition3D) == 0x000004, "Wrong alignment on EndNaviMap_SetPosition3D");
static_assert(sizeof(EndNaviMap_SetPosition3D) == 0x00000C, "Wrong size on EndNaviMap_SetPosition3D");
static_assert(offsetof(EndNaviMap_SetPosition3D, InPos) == 0x000000, "Member 'EndNaviMap_SetPosition3D::InPos' has a wrong offset!");

// Function EndGame.EndNaviMapIcon.SetDistance
// 0x0004 (0x0004 - 0x0000)
struct EndNaviMapIcon_SetDistance final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapIcon_SetDistance) == 0x000004, "Wrong alignment on EndNaviMapIcon_SetDistance");
static_assert(sizeof(EndNaviMapIcon_SetDistance) == 0x000004, "Wrong size on EndNaviMapIcon_SetDistance");
static_assert(offsetof(EndNaviMapIcon_SetDistance, InDistance) == 0x000000, "Member 'EndNaviMapIcon_SetDistance::InDistance' has a wrong offset!");

// Function EndGame.EndNaviMapStateRenderTargetLibrary.CreateStateGradationRenderTarget
// 0x0010 (0x0010 - 0x0000)
struct EndNaviMapStateRenderTargetLibrary_CreateStateGradationRenderTarget final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndNaviMapStateRenderTarget*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapStateRenderTargetLibrary_CreateStateGradationRenderTarget) == 0x000008, "Wrong alignment on EndNaviMapStateRenderTargetLibrary_CreateStateGradationRenderTarget");
static_assert(sizeof(EndNaviMapStateRenderTargetLibrary_CreateStateGradationRenderTarget) == 0x000010, "Wrong size on EndNaviMapStateRenderTargetLibrary_CreateStateGradationRenderTarget");
static_assert(offsetof(EndNaviMapStateRenderTargetLibrary_CreateStateGradationRenderTarget, WorldContextObject) == 0x000000, "Member 'EndNaviMapStateRenderTargetLibrary_CreateStateGradationRenderTarget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTargetLibrary_CreateStateGradationRenderTarget, ReturnValue) == 0x000008, "Member 'EndNaviMapStateRenderTargetLibrary_CreateStateGradationRenderTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndNaviMapStateRenderTargetLibrary.CreateStateRenderTarget
// 0x0018 (0x0018 - 0x0000)
struct EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndNaviMapStateRenderTarget*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget) == 0x000008, "Wrong alignment on EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget");
static_assert(sizeof(EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget) == 0x000018, "Wrong size on EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget");
static_assert(offsetof(EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget, WorldContextObject) == 0x000000, "Member 'EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget, Width) == 0x000008, "Member 'EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget::Width' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget, Height) == 0x00000C, "Member 'EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget::Height' has a wrong offset!");
static_assert(offsetof(EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget, ReturnValue) == 0x000010, "Member 'EndNaviMapStateRenderTargetLibrary_CreateStateRenderTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndPointWarpMenu.OnListItemPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndPointWarpMenu_OnListItemPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPointWarpMenu_OnListItemPressedItem) == 0x000004, "Wrong alignment on EndPointWarpMenu_OnListItemPressedItem");
static_assert(sizeof(EndPointWarpMenu_OnListItemPressedItem) == 0x000004, "Wrong size on EndPointWarpMenu_OnListItemPressedItem");
static_assert(offsetof(EndPointWarpMenu_OnListItemPressedItem, ItemIndex) == 0x000000, "Member 'EndPointWarpMenu_OnListItemPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndPointWarpMenu.OnListItemSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndPointWarpMenu_OnListItemSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPointWarpMenu_OnListItemSelectedIndexChanged) == 0x000004, "Wrong alignment on EndPointWarpMenu_OnListItemSelectedIndexChanged");
static_assert(sizeof(EndPointWarpMenu_OnListItemSelectedIndexChanged) == 0x000004, "Wrong size on EndPointWarpMenu_OnListItemSelectedIndexChanged");
static_assert(offsetof(EndPointWarpMenu_OnListItemSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndPointWarpMenu_OnListItemSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndPointWarpMenu.OnListItemSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndPointWarpMenu_OnListItemSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPointWarpMenu_OnListItemSetupItem) == 0x000008, "Wrong alignment on EndPointWarpMenu_OnListItemSetupItem");
static_assert(sizeof(EndPointWarpMenu_OnListItemSetupItem) == 0x000010, "Wrong size on EndPointWarpMenu_OnListItemSetupItem");
static_assert(offsetof(EndPointWarpMenu_OnListItemSetupItem, ItemWidget) == 0x000000, "Member 'EndPointWarpMenu_OnListItemSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndPointWarpMenu_OnListItemSetupItem, ItemIndex) == 0x000008, "Member 'EndPointWarpMenu_OnListItemSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardDeckListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewCardDeckWindow_OnCardDeckListMeasureItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardDeckListMeasureItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardDeckListMeasureItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardDeckListMeasureItem) == 0x00000C, "Wrong size on EndNewCardDeckWindow_OnCardDeckListMeasureItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardDeckListMeasureItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardDeckListMeasureItem::InItemIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardDeckListMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewCardDeckWindow_OnCardDeckListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardDeckListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnCardDeckListPressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardDeckListPressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardDeckListPressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardDeckListPressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnCardDeckListPressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardDeckListPressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardDeckListPressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardDeckListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnCardDeckListSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardDeckListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardDeckListSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnCardDeckListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnCardDeckListSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnCardDeckListSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardDeckListSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardDeckListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewCardDeckWindow_OnCardDeckListSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnCardDeckListSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnCardDeckListSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardDeckListSetupItem) == 0x000010, "Wrong size on EndNewCardDeckWindow_OnCardDeckListSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardDeckListSetupItem, InItemWidget) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardDeckListSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardDeckListSetupItem, InItemIndex) == 0x000008, "Member 'EndNewCardDeckWindow_OnCardDeckListSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListAllCellSelectedIndexChanged
// 0x0008 (0x0008 - 0x0000)
struct EndNewCardDeckWindow_OnCardListAllCellSelectedIndexChanged final
{
public:
	int32                                         InRowIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListAllCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardListAllCellSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListAllCellSelectedIndexChanged) == 0x000008, "Wrong size on EndNewCardDeckWindow_OnCardListAllCellSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListAllCellSelectedIndexChanged, InRowIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListAllCellSelectedIndexChanged::InRowIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListAllCellSelectedIndexChanged, InItemIndex) == 0x000004, "Member 'EndNewCardDeckWindow_OnCardListAllCellSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListAllCellSetupItem
// 0x0018 (0x0018 - 0x0000)
struct EndNewCardDeckWindow_OnCardListAllCellSetupItem final
{
public:
	int32                                         InRowIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                InItemWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListAllCellSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnCardListAllCellSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListAllCellSetupItem) == 0x000018, "Wrong size on EndNewCardDeckWindow_OnCardListAllCellSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListAllCellSetupItem, InRowIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListAllCellSetupItem::InRowIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListAllCellSetupItem, InItemWidget) == 0x000008, "Member 'EndNewCardDeckWindow_OnCardListAllCellSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListAllCellSetupItem, InItemIndex) == 0x000010, "Member 'EndNewCardDeckWindow_OnCardListAllCellSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListAllRowMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewCardDeckWindow_OnCardListAllRowMeasureItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListAllRowMeasureItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardListAllRowMeasureItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListAllRowMeasureItem) == 0x00000C, "Wrong size on EndNewCardDeckWindow_OnCardListAllRowMeasureItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListAllRowMeasureItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListAllRowMeasureItem::InItemIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListAllRowMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewCardDeckWindow_OnCardListAllRowMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListAllRowSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnCardListAllRowSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListAllRowSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardListAllRowSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListAllRowSelectedIndexChanged) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnCardListAllRowSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListAllRowSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListAllRowSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListAllRowSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewCardDeckWindow_OnCardListAllRowSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListAllRowSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnCardListAllRowSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListAllRowSetupItem) == 0x000010, "Wrong size on EndNewCardDeckWindow_OnCardListAllRowSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListAllRowSetupItem, InItemWidget) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListAllRowSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListAllRowSetupItem, InItemIndex) == 0x000008, "Member 'EndNewCardDeckWindow_OnCardListAllRowSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListEditCellPressedItem
// 0x0008 (0x0008 - 0x0000)
struct EndNewCardDeckWindow_OnCardListEditCellPressedItem final
{
public:
	int32                                         InRowIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListEditCellPressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardListEditCellPressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListEditCellPressedItem) == 0x000008, "Wrong size on EndNewCardDeckWindow_OnCardListEditCellPressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditCellPressedItem, InRowIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListEditCellPressedItem::InRowIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditCellPressedItem, InItemIndex) == 0x000004, "Member 'EndNewCardDeckWindow_OnCardListEditCellPressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListEditCellSelectedIndexChanged
// 0x0008 (0x0008 - 0x0000)
struct EndNewCardDeckWindow_OnCardListEditCellSelectedIndexChanged final
{
public:
	int32                                         InRowIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListEditCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardListEditCellSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListEditCellSelectedIndexChanged) == 0x000008, "Wrong size on EndNewCardDeckWindow_OnCardListEditCellSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditCellSelectedIndexChanged, InRowIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListEditCellSelectedIndexChanged::InRowIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditCellSelectedIndexChanged, InItemIndex) == 0x000004, "Member 'EndNewCardDeckWindow_OnCardListEditCellSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListEditCellSetupItem
// 0x0018 (0x0018 - 0x0000)
struct EndNewCardDeckWindow_OnCardListEditCellSetupItem final
{
public:
	int32                                         InRowIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                InItemWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListEditCellSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnCardListEditCellSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListEditCellSetupItem) == 0x000018, "Wrong size on EndNewCardDeckWindow_OnCardListEditCellSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditCellSetupItem, InRowIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListEditCellSetupItem::InRowIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditCellSetupItem, InItemWidget) == 0x000008, "Member 'EndNewCardDeckWindow_OnCardListEditCellSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditCellSetupItem, InItemIndex) == 0x000010, "Member 'EndNewCardDeckWindow_OnCardListEditCellSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListEditRowMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewCardDeckWindow_OnCardListEditRowMeasureItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListEditRowMeasureItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardListEditRowMeasureItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListEditRowMeasureItem) == 0x00000C, "Wrong size on EndNewCardDeckWindow_OnCardListEditRowMeasureItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditRowMeasureItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListEditRowMeasureItem::InItemIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditRowMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewCardDeckWindow_OnCardListEditRowMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListEditRowSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnCardListEditRowSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListEditRowSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardListEditRowSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListEditRowSelectedIndexChanged) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnCardListEditRowSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditRowSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListEditRowSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListEditRowSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewCardDeckWindow_OnCardListEditRowSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListEditRowSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnCardListEditRowSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListEditRowSetupItem) == 0x000010, "Wrong size on EndNewCardDeckWindow_OnCardListEditRowSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditRowSetupItem, InItemWidget) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListEditRowSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListEditRowSetupItem, InItemIndex) == 0x000008, "Member 'EndNewCardDeckWindow_OnCardListEditRowSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListPlayerCellSelectedIndexChanged
// 0x0008 (0x0008 - 0x0000)
struct EndNewCardDeckWindow_OnCardListPlayerCellSelectedIndexChanged final
{
public:
	int32                                         InRowIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListPlayerCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardListPlayerCellSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListPlayerCellSelectedIndexChanged) == 0x000008, "Wrong size on EndNewCardDeckWindow_OnCardListPlayerCellSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListPlayerCellSelectedIndexChanged, InRowIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListPlayerCellSelectedIndexChanged::InRowIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListPlayerCellSelectedIndexChanged, InItemIndex) == 0x000004, "Member 'EndNewCardDeckWindow_OnCardListPlayerCellSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListPlayerCellSetupItem
// 0x0018 (0x0018 - 0x0000)
struct EndNewCardDeckWindow_OnCardListPlayerCellSetupItem final
{
public:
	int32                                         InRowIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                InItemWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListPlayerCellSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnCardListPlayerCellSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListPlayerCellSetupItem) == 0x000018, "Wrong size on EndNewCardDeckWindow_OnCardListPlayerCellSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListPlayerCellSetupItem, InRowIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListPlayerCellSetupItem::InRowIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListPlayerCellSetupItem, InItemWidget) == 0x000008, "Member 'EndNewCardDeckWindow_OnCardListPlayerCellSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListPlayerCellSetupItem, InItemIndex) == 0x000010, "Member 'EndNewCardDeckWindow_OnCardListPlayerCellSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListPlayerRowMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewCardDeckWindow_OnCardListPlayerRowMeasureItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListPlayerRowMeasureItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardListPlayerRowMeasureItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListPlayerRowMeasureItem) == 0x00000C, "Wrong size on EndNewCardDeckWindow_OnCardListPlayerRowMeasureItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListPlayerRowMeasureItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListPlayerRowMeasureItem::InItemIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListPlayerRowMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewCardDeckWindow_OnCardListPlayerRowMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListPlayerRowSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnCardListPlayerRowSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListPlayerRowSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnCardListPlayerRowSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListPlayerRowSelectedIndexChanged) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnCardListPlayerRowSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListPlayerRowSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListPlayerRowSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnCardListPlayerRowSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewCardDeckWindow_OnCardListPlayerRowSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnCardListPlayerRowSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnCardListPlayerRowSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnCardListPlayerRowSetupItem) == 0x000010, "Wrong size on EndNewCardDeckWindow_OnCardListPlayerRowSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListPlayerRowSetupItem, InItemWidget) == 0x000000, "Member 'EndNewCardDeckWindow_OnCardListPlayerRowSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnCardListPlayerRowSetupItem, InItemIndex) == 0x000008, "Member 'EndNewCardDeckWindow_OnCardListPlayerRowSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnDeckListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewCardDeckWindow_OnDeckListMeasureItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnDeckListMeasureItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnDeckListMeasureItem");
static_assert(sizeof(EndNewCardDeckWindow_OnDeckListMeasureItem) == 0x00000C, "Wrong size on EndNewCardDeckWindow_OnDeckListMeasureItem");
static_assert(offsetof(EndNewCardDeckWindow_OnDeckListMeasureItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnDeckListMeasureItem::InItemIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnDeckListMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewCardDeckWindow_OnDeckListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnDeckListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewCardDeckWindow_OnDeckListSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnDeckListSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnDeckListSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnDeckListSetupItem) == 0x000010, "Wrong size on EndNewCardDeckWindow_OnDeckListSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnDeckListSetupItem, InItemWidget) == 0x000000, "Member 'EndNewCardDeckWindow_OnDeckListSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnDeckListSetupItem, InItemIndex) == 0x000008, "Member 'EndNewCardDeckWindow_OnDeckListSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnDeckScrollListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnDeckScrollListPressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnDeckScrollListPressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnDeckScrollListPressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnDeckScrollListPressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnDeckScrollListPressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnDeckScrollListPressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnDeckScrollListPressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnDeckScrollListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnDeckScrollListSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnDeckScrollListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnDeckScrollListSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnDeckScrollListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnDeckScrollListSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnDeckScrollListSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnDeckScrollListSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnDeckScrollListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewCardDeckWindow_OnDeckScrollListSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnDeckScrollListSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnDeckScrollListSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnDeckScrollListSetupItem) == 0x000010, "Wrong size on EndNewCardDeckWindow_OnDeckScrollListSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnDeckScrollListSetupItem, InItemWidget) == 0x000000, "Member 'EndNewCardDeckWindow_OnDeckScrollListSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnDeckScrollListSetupItem, InItemIndex) == 0x000008, "Member 'EndNewCardDeckWindow_OnDeckScrollListSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnEditingDeckSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnEditingDeckSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnEditingDeckSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnEditingDeckSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnEditingDeckSelectedIndexChanged) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnEditingDeckSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnEditingDeckSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnEditingDeckSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxFilter01PressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxFilter01PressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxFilter01PressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxFilter01PressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxFilter01PressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxFilter01PressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxFilter01PressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxFilter01PressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxFilter02PressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxFilter02PressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxFilter02PressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxFilter02PressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxFilter02PressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxFilter02PressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxFilter02PressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxFilter02PressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxFilter03PressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxFilter03PressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxFilter03PressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxFilter03PressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxFilter03PressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxFilter03PressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxFilter03PressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxFilter03PressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxFilter04PressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxFilter04PressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxFilter04PressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxFilter04PressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxFilter04PressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxFilter04PressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxFilter04PressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxFilter04PressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxFilter05PressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxFilter05PressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxFilter05PressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxFilter05PressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxFilter05PressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxFilter05PressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxFilter05PressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxFilter05PressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxFilter06PressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxFilter06PressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxFilter06PressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxFilter06PressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxFilter06PressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxFilter06PressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxFilter06PressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxFilter06PressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxFilter07PressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxFilter07PressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxFilter07PressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxFilter07PressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxFilter07PressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxFilter07PressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxFilter07PressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxFilter07PressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxFilterSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxFilterSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxFilterSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxFilterSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxFilterSelectedIndexChanged) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxFilterSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxFilterSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxFilterSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxSort01PressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxSort01PressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxSort01PressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxSort01PressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxSort01PressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxSort01PressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxSort01PressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxSort01PressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxSort02PressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxSort02PressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxSort02PressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxSort02PressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxSort02PressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxSort02PressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxSort02PressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxSort02PressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnListBoxSortSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnListBoxSortSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnListBoxSortSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnListBoxSortSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnListBoxSortSelectedIndexChanged) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnListBoxSortSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnListBoxSortSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnListBoxSortSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnOriginDeckDeckListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewCardDeckWindow_OnOriginDeckDeckListMeasureItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnOriginDeckDeckListMeasureItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnOriginDeckDeckListMeasureItem");
static_assert(sizeof(EndNewCardDeckWindow_OnOriginDeckDeckListMeasureItem) == 0x00000C, "Wrong size on EndNewCardDeckWindow_OnOriginDeckDeckListMeasureItem");
static_assert(offsetof(EndNewCardDeckWindow_OnOriginDeckDeckListMeasureItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnOriginDeckDeckListMeasureItem::InItemIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnOriginDeckDeckListMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewCardDeckWindow_OnOriginDeckDeckListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnOriginDeckDeckListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewCardDeckWindow_OnOriginDeckDeckListSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnOriginDeckDeckListSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnOriginDeckDeckListSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnOriginDeckDeckListSetupItem) == 0x000010, "Wrong size on EndNewCardDeckWindow_OnOriginDeckDeckListSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnOriginDeckDeckListSetupItem, InItemWidget) == 0x000000, "Member 'EndNewCardDeckWindow_OnOriginDeckDeckListSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnOriginDeckDeckListSetupItem, InItemIndex) == 0x000008, "Member 'EndNewCardDeckWindow_OnOriginDeckDeckListSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnOriginDeckMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewCardDeckWindow_OnOriginDeckMeasureItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnOriginDeckMeasureItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnOriginDeckMeasureItem");
static_assert(sizeof(EndNewCardDeckWindow_OnOriginDeckMeasureItem) == 0x00000C, "Wrong size on EndNewCardDeckWindow_OnOriginDeckMeasureItem");
static_assert(offsetof(EndNewCardDeckWindow_OnOriginDeckMeasureItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnOriginDeckMeasureItem::InItemIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnOriginDeckMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewCardDeckWindow_OnOriginDeckMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnOriginDeckPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnOriginDeckPressedItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnOriginDeckPressedItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnOriginDeckPressedItem");
static_assert(sizeof(EndNewCardDeckWindow_OnOriginDeckPressedItem) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnOriginDeckPressedItem");
static_assert(offsetof(EndNewCardDeckWindow_OnOriginDeckPressedItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnOriginDeckPressedItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnOriginDeckSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnOriginDeckSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnOriginDeckSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnOriginDeckSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnOriginDeckSelectedIndexChanged) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnOriginDeckSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnOriginDeckSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnOriginDeckSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnOriginDeckSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewCardDeckWindow_OnOriginDeckSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnOriginDeckSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnOriginDeckSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnOriginDeckSetupItem) == 0x000010, "Wrong size on EndNewCardDeckWindow_OnOriginDeckSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnOriginDeckSetupItem, InItemWidget) == 0x000000, "Member 'EndNewCardDeckWindow_OnOriginDeckSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnOriginDeckSetupItem, InItemIndex) == 0x000008, "Member 'EndNewCardDeckWindow_OnOriginDeckSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnPresetDeckListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewCardDeckWindow_OnPresetDeckListMeasureItem final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnPresetDeckListMeasureItem) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnPresetDeckListMeasureItem");
static_assert(sizeof(EndNewCardDeckWindow_OnPresetDeckListMeasureItem) == 0x00000C, "Wrong size on EndNewCardDeckWindow_OnPresetDeckListMeasureItem");
static_assert(offsetof(EndNewCardDeckWindow_OnPresetDeckListMeasureItem, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnPresetDeckListMeasureItem::InItemIndex' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnPresetDeckListMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewCardDeckWindow_OnPresetDeckListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnPresetDeckListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewCardDeckWindow_OnPresetDeckListSelectedIndexChanged final
{
public:
	int32                                         InItemIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewCardDeckWindow_OnPresetDeckListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewCardDeckWindow_OnPresetDeckListSelectedIndexChanged");
static_assert(sizeof(EndNewCardDeckWindow_OnPresetDeckListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewCardDeckWindow_OnPresetDeckListSelectedIndexChanged");
static_assert(offsetof(EndNewCardDeckWindow_OnPresetDeckListSelectedIndexChanged, InItemIndex) == 0x000000, "Member 'EndNewCardDeckWindow_OnPresetDeckListSelectedIndexChanged::InItemIndex' has a wrong offset!");

// Function EndGame.EndNewCardDeckWindow.OnPresetDeckListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewCardDeckWindow_OnPresetDeckListSetupItem final
{
public:
	class UWidget*                                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewCardDeckWindow_OnPresetDeckListSetupItem) == 0x000008, "Wrong alignment on EndNewCardDeckWindow_OnPresetDeckListSetupItem");
static_assert(sizeof(EndNewCardDeckWindow_OnPresetDeckListSetupItem) == 0x000010, "Wrong size on EndNewCardDeckWindow_OnPresetDeckListSetupItem");
static_assert(offsetof(EndNewCardDeckWindow_OnPresetDeckListSetupItem, InItemWidget) == 0x000000, "Member 'EndNewCardDeckWindow_OnPresetDeckListSetupItem::InItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewCardDeckWindow_OnPresetDeckListSetupItem, InItemIndex) == 0x000008, "Member 'EndNewCardDeckWindow_OnPresetDeckListSetupItem::InItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnPressedShopTopMenu
// 0x0004 (0x0004 - 0x0000)
struct EndShopMenu_OnPressedShopTopMenu final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndShopMenu_OnPressedShopTopMenu) == 0x000004, "Wrong alignment on EndShopMenu_OnPressedShopTopMenu");
static_assert(sizeof(EndShopMenu_OnPressedShopTopMenu) == 0x000004, "Wrong size on EndShopMenu_OnPressedShopTopMenu");
static_assert(offsetof(EndShopMenu_OnPressedShopTopMenu, ItemIndex) == 0x000000, "Member 'EndShopMenu_OnPressedShopTopMenu::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopChadolyCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopChadolyCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopChadolyCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopChadolyCellSetup");
static_assert(sizeof(EndShopMenu_OnShopChadolyCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopChadolyCellSetup");
static_assert(offsetof(EndShopMenu_OnShopChadolyCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopChadolyCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopChadolyCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopChadolyCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopChocoboCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopChocoboCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopChocoboCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopChocoboCellSetup");
static_assert(sizeof(EndShopMenu_OnShopChocoboCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopChocoboCellSetup");
static_assert(offsetof(EndShopMenu_OnShopChocoboCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopChocoboCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopChocoboCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopChocoboCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopDefaultCellCategolySetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopDefaultCellCategolySetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopDefaultCellCategolySetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopDefaultCellCategolySetup");
static_assert(sizeof(EndShopMenu_OnShopDefaultCellCategolySetup) == 0x000010, "Wrong size on EndShopMenu_OnShopDefaultCellCategolySetup");
static_assert(offsetof(EndShopMenu_OnShopDefaultCellCategolySetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopDefaultCellCategolySetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopDefaultCellCategolySetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopDefaultCellCategolySetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopDefaultCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopDefaultCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopDefaultCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopDefaultCellSetup");
static_assert(sizeof(EndShopMenu_OnShopDefaultCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopDefaultCellSetup");
static_assert(offsetof(EndShopMenu_OnShopDefaultCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopDefaultCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopDefaultCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopDefaultCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopEstCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopEstCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopEstCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopEstCellSetup");
static_assert(sizeof(EndShopMenu_OnShopEstCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopEstCellSetup");
static_assert(offsetof(EndShopMenu_OnShopEstCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopEstCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopEstCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopEstCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopGoldSaucerCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopGoldSaucerCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopGoldSaucerCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopGoldSaucerCellSetup");
static_assert(sizeof(EndShopMenu_OnShopGoldSaucerCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopGoldSaucerCellSetup");
static_assert(offsetof(EndShopMenu_OnShopGoldSaucerCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopGoldSaucerCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopGoldSaucerCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopGoldSaucerCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopListCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopListCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopListCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopListCellSetup");
static_assert(sizeof(EndShopMenu_OnShopListCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopListCellSetup");
static_assert(offsetof(EndShopMenu_OnShopListCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopListCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopListCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopListCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopMoogleInfraIconSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopMoogleInfraIconSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopMoogleInfraIconSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopMoogleInfraIconSetup");
static_assert(sizeof(EndShopMenu_OnShopMoogleInfraIconSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopMoogleInfraIconSetup");
static_assert(offsetof(EndShopMenu_OnShopMoogleInfraIconSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopMoogleInfraIconSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopMoogleInfraIconSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopMoogleInfraIconSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopSwimAerithCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopSwimAerithCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopSwimAerithCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopSwimAerithCellSetup");
static_assert(sizeof(EndShopMenu_OnShopSwimAerithCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopSwimAerithCellSetup");
static_assert(offsetof(EndShopMenu_OnShopSwimAerithCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopSwimAerithCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopSwimAerithCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopSwimAerithCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopSwimCloudCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopSwimCloudCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopSwimCloudCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopSwimCloudCellSetup");
static_assert(sizeof(EndShopMenu_OnShopSwimCloudCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopSwimCloudCellSetup");
static_assert(offsetof(EndShopMenu_OnShopSwimCloudCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopSwimCloudCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopSwimCloudCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopSwimCloudCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnArmorMateriaMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewQuickMateriaMenu_OnArmorMateriaMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnArmorMateriaMeasureItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnArmorMateriaMeasureItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnArmorMateriaMeasureItem) == 0x00000C, "Wrong size on EndNewQuickMateriaMenu_OnArmorMateriaMeasureItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnArmorMateriaMeasureItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnArmorMateriaMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnArmorMateriaMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewQuickMateriaMenu_OnArmorMateriaMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnArmorMateriaPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnArmorMateriaPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnArmorMateriaPressedItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnArmorMateriaPressedItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnArmorMateriaPressedItem) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnArmorMateriaPressedItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnArmorMateriaPressedItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnArmorMateriaPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnArmorMateriaSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnArmorMateriaSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnArmorMateriaSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnArmorMateriaSelectedIndexChanged");
static_assert(sizeof(EndNewQuickMateriaMenu_OnArmorMateriaSelectedIndexChanged) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnArmorMateriaSelectedIndexChanged");
static_assert(offsetof(EndNewQuickMateriaMenu_OnArmorMateriaSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnArmorMateriaSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnArmorMateriaSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewQuickMateriaMenu_OnArmorMateriaSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewQuickMateriaMenu_OnArmorMateriaSetupItem) == 0x000008, "Wrong alignment on EndNewQuickMateriaMenu_OnArmorMateriaSetupItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnArmorMateriaSetupItem) == 0x000010, "Wrong size on EndNewQuickMateriaMenu_OnArmorMateriaSetupItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnArmorMateriaSetupItem, ItemWidget) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnArmorMateriaSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnArmorMateriaSetupItem, CellIndex) == 0x000008, "Member 'EndNewQuickMateriaMenu_OnArmorMateriaSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnEditListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewQuickMateriaMenu_OnEditListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnEditListMeasureItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnEditListMeasureItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnEditListMeasureItem) == 0x00000C, "Wrong size on EndNewQuickMateriaMenu_OnEditListMeasureItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnEditListMeasureItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnEditListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnEditListMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewQuickMateriaMenu_OnEditListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnEditListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnEditListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnEditListPressedItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnEditListPressedItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnEditListPressedItem) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnEditListPressedItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnEditListPressedItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnEditListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnEditListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnEditListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnEditListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnEditListSelectedIndexChanged");
static_assert(sizeof(EndNewQuickMateriaMenu_OnEditListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnEditListSelectedIndexChanged");
static_assert(offsetof(EndNewQuickMateriaMenu_OnEditListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnEditListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnEditListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewQuickMateriaMenu_OnEditListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewQuickMateriaMenu_OnEditListSetupItem) == 0x000008, "Wrong alignment on EndNewQuickMateriaMenu_OnEditListSetupItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnEditListSetupItem) == 0x000010, "Wrong size on EndNewQuickMateriaMenu_OnEditListSetupItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnEditListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnEditListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnEditListSetupItem, CellIndex) == 0x000008, "Member 'EndNewQuickMateriaMenu_OnEditListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaEditCategoryListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaEditCategoryListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListMeasureItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaEditCategoryListMeasureItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListMeasureItem) == 0x00000C, "Wrong size on EndNewQuickMateriaMenu_OnMateriaEditCategoryListMeasureItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListMeasureItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaEditCategoryListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewQuickMateriaMenu_OnMateriaEditCategoryListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaEditCategoryListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaEditCategoryListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListPressedItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaEditCategoryListPressedItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListPressedItem) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnMateriaEditCategoryListPressedItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListPressedItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaEditCategoryListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaEditCategoryListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaEditCategoryListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaEditCategoryListSelectedIndexChanged");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnMateriaEditCategoryListSelectedIndexChanged");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaEditCategoryListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaEditCategoryListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaEditCategoryListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListSetupItem) == 0x000008, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaEditCategoryListSetupItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListSetupItem) == 0x000010, "Wrong size on EndNewQuickMateriaMenu_OnMateriaEditCategoryListSetupItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaEditCategoryListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaEditCategoryListSetupItem, CellIndex) == 0x000008, "Member 'EndNewQuickMateriaMenu_OnMateriaEditCategoryListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaEditListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaEditListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaEditListPressedItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaEditListPressedItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaEditListPressedItem) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnMateriaEditListPressedItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaEditListPressedItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaEditListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaEditListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaEditListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaEditListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaEditListSelectedIndexChanged");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaEditListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnMateriaEditListSelectedIndexChanged");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaEditListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaEditListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaEditListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaEditListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaEditListSetupItem) == 0x000008, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaEditListSetupItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaEditListSetupItem) == 0x000010, "Wrong size on EndNewQuickMateriaMenu_OnMateriaEditListSetupItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaEditListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaEditListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaEditListSetupItem, CellIndex) == 0x000008, "Member 'EndNewQuickMateriaMenu_OnMateriaEditListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaListMeasureItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaListMeasureItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaListMeasureItem) == 0x00000C, "Wrong size on EndNewQuickMateriaMenu_OnMateriaListMeasureItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaListMeasureItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaListMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewQuickMateriaMenu_OnMateriaListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaListPressedItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaListPressedItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaListPressedItem) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnMateriaListPressedItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaListPressedItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaListSelectedIndexChanged");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnMateriaListSelectedIndexChanged");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnMateriaListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewQuickMateriaMenu_OnMateriaListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewQuickMateriaMenu_OnMateriaListSetupItem) == 0x000008, "Wrong alignment on EndNewQuickMateriaMenu_OnMateriaListSetupItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnMateriaListSetupItem) == 0x000010, "Wrong size on EndNewQuickMateriaMenu_OnMateriaListSetupItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnMateriaListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnMateriaListSetupItem, CellIndex) == 0x000008, "Member 'EndNewQuickMateriaMenu_OnMateriaListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnSortListPressedItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnSortListPressedItem) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnSortListPressedItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnSummonMateriaEditListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnSummonMateriaEditListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnSummonMateriaEditListPressedItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnSummonMateriaEditListPressedItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnSummonMateriaEditListPressedItem) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnSummonMateriaEditListPressedItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnSummonMateriaEditListPressedItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnSummonMateriaEditListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnSummonMateriaEditListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnSummonMateriaEditListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnSummonMateriaEditListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnSummonMateriaEditListSelectedIndexChanged");
static_assert(sizeof(EndNewQuickMateriaMenu_OnSummonMateriaEditListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnSummonMateriaEditListSelectedIndexChanged");
static_assert(offsetof(EndNewQuickMateriaMenu_OnSummonMateriaEditListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnSummonMateriaEditListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnSummonMateriaEditListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewQuickMateriaMenu_OnSummonMateriaEditListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewQuickMateriaMenu_OnSummonMateriaEditListSetupItem) == 0x000008, "Wrong alignment on EndNewQuickMateriaMenu_OnSummonMateriaEditListSetupItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnSummonMateriaEditListSetupItem) == 0x000010, "Wrong size on EndNewQuickMateriaMenu_OnSummonMateriaEditListSetupItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnSummonMateriaEditListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnSummonMateriaEditListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnSummonMateriaEditListSetupItem, CellIndex) == 0x000008, "Member 'EndNewQuickMateriaMenu_OnSummonMateriaEditListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnWeaponMateriaMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewQuickMateriaMenu_OnWeaponMateriaMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnWeaponMateriaMeasureItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnWeaponMateriaMeasureItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnWeaponMateriaMeasureItem) == 0x00000C, "Wrong size on EndNewQuickMateriaMenu_OnWeaponMateriaMeasureItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnWeaponMateriaMeasureItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnWeaponMateriaMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnWeaponMateriaMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewQuickMateriaMenu_OnWeaponMateriaMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnWeaponMateriaPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnWeaponMateriaPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnWeaponMateriaPressedItem) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnWeaponMateriaPressedItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnWeaponMateriaPressedItem) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnWeaponMateriaPressedItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnWeaponMateriaPressedItem, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnWeaponMateriaPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnWeaponMateriaSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewQuickMateriaMenu_OnWeaponMateriaSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewQuickMateriaMenu_OnWeaponMateriaSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewQuickMateriaMenu_OnWeaponMateriaSelectedIndexChanged");
static_assert(sizeof(EndNewQuickMateriaMenu_OnWeaponMateriaSelectedIndexChanged) == 0x000004, "Wrong size on EndNewQuickMateriaMenu_OnWeaponMateriaSelectedIndexChanged");
static_assert(offsetof(EndNewQuickMateriaMenu_OnWeaponMateriaSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnWeaponMateriaSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewQuickMateriaMenu.OnWeaponMateriaSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewQuickMateriaMenu_OnWeaponMateriaSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewQuickMateriaMenu_OnWeaponMateriaSetupItem) == 0x000008, "Wrong alignment on EndNewQuickMateriaMenu_OnWeaponMateriaSetupItem");
static_assert(sizeof(EndNewQuickMateriaMenu_OnWeaponMateriaSetupItem) == 0x000010, "Wrong size on EndNewQuickMateriaMenu_OnWeaponMateriaSetupItem");
static_assert(offsetof(EndNewQuickMateriaMenu_OnWeaponMateriaSetupItem, ItemWidget) == 0x000000, "Member 'EndNewQuickMateriaMenu_OnWeaponMateriaSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewQuickMateriaMenu_OnWeaponMateriaSetupItem, CellIndex) == 0x000008, "Member 'EndNewQuickMateriaMenu_OnWeaponMateriaSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndRopeActor.AddRopeContactIgnoreActor
// 0x0008 (0x0008 - 0x0000)
struct EndRopeActor_AddRopeContactIgnoreActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeActor_AddRopeContactIgnoreActor) == 0x000008, "Wrong alignment on EndRopeActor_AddRopeContactIgnoreActor");
static_assert(sizeof(EndRopeActor_AddRopeContactIgnoreActor) == 0x000008, "Wrong size on EndRopeActor_AddRopeContactIgnoreActor");
static_assert(offsetof(EndRopeActor_AddRopeContactIgnoreActor, Actor) == 0x000000, "Member 'EndRopeActor_AddRopeContactIgnoreActor::Actor' has a wrong offset!");

// Function EndGame.EndRopeActor.AttachRopeEndPointToActor
// 0x0010 (0x0010 - 0x0000)
struct EndRopeActor_AttachRopeEndPointToActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeActor_AttachRopeEndPointToActor) == 0x000008, "Wrong alignment on EndRopeActor_AttachRopeEndPointToActor");
static_assert(sizeof(EndRopeActor_AttachRopeEndPointToActor) == 0x000010, "Wrong size on EndRopeActor_AttachRopeEndPointToActor");
static_assert(offsetof(EndRopeActor_AttachRopeEndPointToActor, Actor) == 0x000000, "Member 'EndRopeActor_AttachRopeEndPointToActor::Actor' has a wrong offset!");
static_assert(offsetof(EndRopeActor_AttachRopeEndPointToActor, SocketName) == 0x000008, "Member 'EndRopeActor_AttachRopeEndPointToActor::SocketName' has a wrong offset!");

// Function EndGame.EndRopeActor.AttachRopeEndPointToLocation
// 0x000C (0x000C - 0x0000)
struct EndRopeActor_AttachRopeEndPointToLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeActor_AttachRopeEndPointToLocation) == 0x000004, "Wrong alignment on EndRopeActor_AttachRopeEndPointToLocation");
static_assert(sizeof(EndRopeActor_AttachRopeEndPointToLocation) == 0x00000C, "Wrong size on EndRopeActor_AttachRopeEndPointToLocation");
static_assert(offsetof(EndRopeActor_AttachRopeEndPointToLocation, Location) == 0x000000, "Member 'EndRopeActor_AttachRopeEndPointToLocation::Location' has a wrong offset!");

// Function EndGame.EndRopeActor.AttachRopeEndPointToSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct EndRopeActor_AttachRopeEndPointToSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeActor_AttachRopeEndPointToSkeletalMesh) == 0x000008, "Wrong alignment on EndRopeActor_AttachRopeEndPointToSkeletalMesh");
static_assert(sizeof(EndRopeActor_AttachRopeEndPointToSkeletalMesh) == 0x000010, "Wrong size on EndRopeActor_AttachRopeEndPointToSkeletalMesh");
static_assert(offsetof(EndRopeActor_AttachRopeEndPointToSkeletalMesh, Mesh) == 0x000000, "Member 'EndRopeActor_AttachRopeEndPointToSkeletalMesh::Mesh' has a wrong offset!");
static_assert(offsetof(EndRopeActor_AttachRopeEndPointToSkeletalMesh, SocketName) == 0x000008, "Member 'EndRopeActor_AttachRopeEndPointToSkeletalMesh::SocketName' has a wrong offset!");

// Function EndGame.EndRopeActor.AttachRopeRootToActor
// 0x0010 (0x0010 - 0x0000)
struct EndRopeActor_AttachRopeRootToActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeActor_AttachRopeRootToActor) == 0x000008, "Wrong alignment on EndRopeActor_AttachRopeRootToActor");
static_assert(sizeof(EndRopeActor_AttachRopeRootToActor) == 0x000010, "Wrong size on EndRopeActor_AttachRopeRootToActor");
static_assert(offsetof(EndRopeActor_AttachRopeRootToActor, Actor) == 0x000000, "Member 'EndRopeActor_AttachRopeRootToActor::Actor' has a wrong offset!");
static_assert(offsetof(EndRopeActor_AttachRopeRootToActor, SocketName) == 0x000008, "Member 'EndRopeActor_AttachRopeRootToActor::SocketName' has a wrong offset!");

// Function EndGame.EndRopeActor.AttachRopeRootToSkeletamMesh
// 0x0010 (0x0010 - 0x0000)
struct EndRopeActor_AttachRopeRootToSkeletamMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeActor_AttachRopeRootToSkeletamMesh) == 0x000008, "Wrong alignment on EndRopeActor_AttachRopeRootToSkeletamMesh");
static_assert(sizeof(EndRopeActor_AttachRopeRootToSkeletamMesh) == 0x000010, "Wrong size on EndRopeActor_AttachRopeRootToSkeletamMesh");
static_assert(offsetof(EndRopeActor_AttachRopeRootToSkeletamMesh, Mesh) == 0x000000, "Member 'EndRopeActor_AttachRopeRootToSkeletamMesh::Mesh' has a wrong offset!");
static_assert(offsetof(EndRopeActor_AttachRopeRootToSkeletamMesh, SocketName) == 0x000008, "Member 'EndRopeActor_AttachRopeRootToSkeletamMesh::SocketName' has a wrong offset!");

// Function EndGame.EndRopeActor.AttachRopeRootToTransform
// 0x0030 (0x0030 - 0x0000)
struct EndRopeActor_AttachRopeRootToTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeActor_AttachRopeRootToTransform) == 0x000010, "Wrong alignment on EndRopeActor_AttachRopeRootToTransform");
static_assert(sizeof(EndRopeActor_AttachRopeRootToTransform) == 0x000030, "Wrong size on EndRopeActor_AttachRopeRootToTransform");
static_assert(offsetof(EndRopeActor_AttachRopeRootToTransform, Transform) == 0x000000, "Member 'EndRopeActor_AttachRopeRootToTransform::Transform' has a wrong offset!");

// Function EndGame.EndRopeActor.RemoveRopeContactIgnoreActor
// 0x0008 (0x0008 - 0x0000)
struct EndRopeActor_RemoveRopeContactIgnoreActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRopeActor_RemoveRopeContactIgnoreActor) == 0x000008, "Wrong alignment on EndRopeActor_RemoveRopeContactIgnoreActor");
static_assert(sizeof(EndRopeActor_RemoveRopeContactIgnoreActor) == 0x000008, "Wrong size on EndRopeActor_RemoveRopeContactIgnoreActor");
static_assert(offsetof(EndRopeActor_RemoveRopeContactIgnoreActor, Actor) == 0x000000, "Member 'EndRopeActor_RemoveRopeContactIgnoreActor::Actor' has a wrong offset!");

// Function EndGame.EndNewSortWindow.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewSortWindow_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewSortWindow_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndNewSortWindow_OnSortListPressedItem");
static_assert(sizeof(EndNewSortWindow_OnSortListPressedItem) == 0x000004, "Wrong size on EndNewSortWindow_OnSortListPressedItem");
static_assert(offsetof(EndNewSortWindow_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndNewSortWindow_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewSortWindow.OnSortListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewSortWindow_OnSortListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewSortWindow_OnSortListSetupItem) == 0x000008, "Wrong alignment on EndNewSortWindow_OnSortListSetupItem");
static_assert(sizeof(EndNewSortWindow_OnSortListSetupItem) == 0x000010, "Wrong size on EndNewSortWindow_OnSortListSetupItem");
static_assert(offsetof(EndNewSortWindow_OnSortListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewSortWindow_OnSortListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewSortWindow_OnSortListSetupItem, CellIndex) == 0x000008, "Member 'EndNewSortWindow_OnSortListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndPartyAPI.CallTeleported
// 0x0018 (0x0018 - 0x0000)
struct EndPartyAPI_CallTeleported final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InLeader;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_CallTeleported) == 0x000008, "Wrong alignment on EndPartyAPI_CallTeleported");
static_assert(sizeof(EndPartyAPI_CallTeleported) == 0x000018, "Wrong size on EndPartyAPI_CallTeleported");
static_assert(offsetof(EndPartyAPI_CallTeleported, NewLocation) == 0x000000, "Member 'EndPartyAPI_CallTeleported::NewLocation' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_CallTeleported, InLeader) == 0x000010, "Member 'EndPartyAPI_CallTeleported::InLeader' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetAliveBattleMemberCount
// 0x0004 (0x0004 - 0x0000)
struct EndPartyAPI_GetAliveBattleMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetAliveBattleMemberCount) == 0x000004, "Wrong alignment on EndPartyAPI_GetAliveBattleMemberCount");
static_assert(sizeof(EndPartyAPI_GetAliveBattleMemberCount) == 0x000004, "Wrong size on EndPartyAPI_GetAliveBattleMemberCount");
static_assert(offsetof(EndPartyAPI_GetAliveBattleMemberCount, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetAliveBattleMemberCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetAllPartyMember
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetAllPartyMember final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetAllPartyMember) == 0x000008, "Wrong alignment on EndPartyAPI_GetAllPartyMember");
static_assert(sizeof(EndPartyAPI_GetAllPartyMember) == 0x000010, "Wrong size on EndPartyAPI_GetAllPartyMember");
static_assert(offsetof(EndPartyAPI_GetAllPartyMember, Index_0) == 0x000000, "Member 'EndPartyAPI_GetAllPartyMember::Index_0' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetAllPartyMember, ReturnValue) == 0x000008, "Member 'EndPartyAPI_GetAllPartyMember::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetAllPartyMemberCount
// 0x0004 (0x0004 - 0x0000)
struct EndPartyAPI_GetAllPartyMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetAllPartyMemberCount) == 0x000004, "Wrong alignment on EndPartyAPI_GetAllPartyMemberCount");
static_assert(sizeof(EndPartyAPI_GetAllPartyMemberCount) == 0x000004, "Wrong size on EndPartyAPI_GetAllPartyMemberCount");
static_assert(offsetof(EndPartyAPI_GetAllPartyMemberCount, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetAllPartyMemberCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetAllPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetAllPartyMembers final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetAllPartyMembers) == 0x000008, "Wrong alignment on EndPartyAPI_GetAllPartyMembers");
static_assert(sizeof(EndPartyAPI_GetAllPartyMembers) == 0x000010, "Wrong size on EndPartyAPI_GetAllPartyMembers");
static_assert(offsetof(EndPartyAPI_GetAllPartyMembers, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetAllPartyMembers::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetAllPartyMemberType
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_GetAllPartyMemberType final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPartyAPI_GetAllPartyMemberType) == 0x000004, "Wrong alignment on EndPartyAPI_GetAllPartyMemberType");
static_assert(sizeof(EndPartyAPI_GetAllPartyMemberType) == 0x000008, "Wrong size on EndPartyAPI_GetAllPartyMemberType");
static_assert(offsetof(EndPartyAPI_GetAllPartyMemberType, Slot) == 0x000000, "Member 'EndPartyAPI_GetAllPartyMemberType::Slot' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetAllPartyMemberType, ReturnValue) == 0x000004, "Member 'EndPartyAPI_GetAllPartyMemberType::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetBattleAway
// 0x0002 (0x0002 - 0x0000)
struct EndPartyAPI_GetBattleAway final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetBattleAway) == 0x000001, "Wrong alignment on EndPartyAPI_GetBattleAway");
static_assert(sizeof(EndPartyAPI_GetBattleAway) == 0x000002, "Wrong size on EndPartyAPI_GetBattleAway");
static_assert(offsetof(EndPartyAPI_GetBattleAway, Type) == 0x000000, "Member 'EndPartyAPI_GetBattleAway::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetBattleAway, ReturnValue) == 0x000001, "Member 'EndPartyAPI_GetBattleAway::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetBattleMember
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetBattleMember final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetBattleMember) == 0x000008, "Wrong alignment on EndPartyAPI_GetBattleMember");
static_assert(sizeof(EndPartyAPI_GetBattleMember) == 0x000010, "Wrong size on EndPartyAPI_GetBattleMember");
static_assert(offsetof(EndPartyAPI_GetBattleMember, Index_0) == 0x000000, "Member 'EndPartyAPI_GetBattleMember::Index_0' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetBattleMember, ReturnValue) == 0x000008, "Member 'EndPartyAPI_GetBattleMember::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetBattleMemberCount
// 0x0004 (0x0004 - 0x0000)
struct EndPartyAPI_GetBattleMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetBattleMemberCount) == 0x000004, "Wrong alignment on EndPartyAPI_GetBattleMemberCount");
static_assert(sizeof(EndPartyAPI_GetBattleMemberCount) == 0x000004, "Wrong size on EndPartyAPI_GetBattleMemberCount");
static_assert(offsetof(EndPartyAPI_GetBattleMemberCount, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetBattleMemberCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetBattleMembers
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetBattleMembers final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetBattleMembers) == 0x000008, "Wrong alignment on EndPartyAPI_GetBattleMembers");
static_assert(sizeof(EndPartyAPI_GetBattleMembers) == 0x000010, "Wrong size on EndPartyAPI_GetBattleMembers");
static_assert(offsetof(EndPartyAPI_GetBattleMembers, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetBattleMembers::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetBattleMemberType
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_GetBattleMemberType final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPartyAPI_GetBattleMemberType) == 0x000004, "Wrong alignment on EndPartyAPI_GetBattleMemberType");
static_assert(sizeof(EndPartyAPI_GetBattleMemberType) == 0x000008, "Wrong size on EndPartyAPI_GetBattleMemberType");
static_assert(offsetof(EndPartyAPI_GetBattleMemberType, Slot) == 0x000000, "Member 'EndPartyAPI_GetBattleMemberType::Slot' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetBattleMemberType, ReturnValue) == 0x000004, "Member 'EndPartyAPI_GetBattleMemberType::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetBattleSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_GetBattleSlotIndex final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetBattleSlotIndex) == 0x000004, "Wrong alignment on EndPartyAPI_GetBattleSlotIndex");
static_assert(sizeof(EndPartyAPI_GetBattleSlotIndex) == 0x000008, "Wrong size on EndPartyAPI_GetBattleSlotIndex");
static_assert(offsetof(EndPartyAPI_GetBattleSlotIndex, Type) == 0x000000, "Member 'EndPartyAPI_GetBattleSlotIndex::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetBattleSlotIndex, ReturnValue) == 0x000004, "Member 'EndPartyAPI_GetBattleSlotIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetEquipmentMenuMembers
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetEquipmentMenuMembers final
{
public:
	TArray<EPlayerType>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetEquipmentMenuMembers) == 0x000008, "Wrong alignment on EndPartyAPI_GetEquipmentMenuMembers");
static_assert(sizeof(EndPartyAPI_GetEquipmentMenuMembers) == 0x000010, "Wrong size on EndPartyAPI_GetEquipmentMenuMembers");
static_assert(offsetof(EndPartyAPI_GetEquipmentMenuMembers, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetEquipmentMenuMembers::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyLeaderName
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_GetPartyLeaderName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyLeaderName) == 0x000004, "Wrong alignment on EndPartyAPI_GetPartyLeaderName");
static_assert(sizeof(EndPartyAPI_GetPartyLeaderName) == 0x000008, "Wrong size on EndPartyAPI_GetPartyLeaderName");
static_assert(offsetof(EndPartyAPI_GetPartyLeaderName, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetPartyLeaderName::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyLeaderOrVehicle
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetPartyLeaderOrVehicle final
{
public:
	bool                                          bIsFatMoogleIgnore;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyLeaderOrVehicle) == 0x000008, "Wrong alignment on EndPartyAPI_GetPartyLeaderOrVehicle");
static_assert(sizeof(EndPartyAPI_GetPartyLeaderOrVehicle) == 0x000010, "Wrong size on EndPartyAPI_GetPartyLeaderOrVehicle");
static_assert(offsetof(EndPartyAPI_GetPartyLeaderOrVehicle, bIsFatMoogleIgnore) == 0x000000, "Member 'EndPartyAPI_GetPartyLeaderOrVehicle::bIsFatMoogleIgnore' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPartyLeaderOrVehicle, ReturnValue) == 0x000008, "Member 'EndPartyAPI_GetPartyLeaderOrVehicle::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyLeaderType
// 0x0001 (0x0001 - 0x0000)
struct EndPartyAPI_GetPartyLeaderType final
{
public:
	EPlayerType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyLeaderType) == 0x000001, "Wrong alignment on EndPartyAPI_GetPartyLeaderType");
static_assert(sizeof(EndPartyAPI_GetPartyLeaderType) == 0x000001, "Wrong size on EndPartyAPI_GetPartyLeaderType");
static_assert(offsetof(EndPartyAPI_GetPartyLeaderType, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetPartyLeaderType::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyMemberCountForPartyStatus
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_GetPartyMemberCountForPartyStatus final
{
public:
	EPlayerStatus                                 findPlayerStatus;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyMemberCountForPartyStatus) == 0x000004, "Wrong alignment on EndPartyAPI_GetPartyMemberCountForPartyStatus");
static_assert(sizeof(EndPartyAPI_GetPartyMemberCountForPartyStatus) == 0x000008, "Wrong size on EndPartyAPI_GetPartyMemberCountForPartyStatus");
static_assert(offsetof(EndPartyAPI_GetPartyMemberCountForPartyStatus, findPlayerStatus) == 0x000000, "Member 'EndPartyAPI_GetPartyMemberCountForPartyStatus::findPlayerStatus' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPartyMemberCountForPartyStatus, ReturnValue) == 0x000004, "Member 'EndPartyAPI_GetPartyMemberCountForPartyStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPlayerActor
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetPlayerActor final
{
public:
	EEquipmentType                                Equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPlayerActor) == 0x000008, "Wrong alignment on EndPartyAPI_GetPlayerActor");
static_assert(sizeof(EndPartyAPI_GetPlayerActor) == 0x000010, "Wrong size on EndPartyAPI_GetPlayerActor");
static_assert(offsetof(EndPartyAPI_GetPlayerActor, Equipment) == 0x000000, "Member 'EndPartyAPI_GetPlayerActor::Equipment' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerActor, Type) == 0x000001, "Member 'EndPartyAPI_GetPlayerActor::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerActor, ReturnValue) == 0x000008, "Member 'EndPartyAPI_GetPlayerActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPlayerActorName
// 0x000C (0x000C - 0x0000)
struct EndPartyAPI_GetPlayerActorName final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPlayerActorName) == 0x000004, "Wrong alignment on EndPartyAPI_GetPlayerActorName");
static_assert(sizeof(EndPartyAPI_GetPlayerActorName) == 0x00000C, "Wrong size on EndPartyAPI_GetPlayerActorName");
static_assert(offsetof(EndPartyAPI_GetPlayerActorName, Type) == 0x000000, "Member 'EndPartyAPI_GetPlayerActorName::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerActorName, ReturnValue) == 0x000004, "Member 'EndPartyAPI_GetPlayerActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPlayerStatus
// 0x0002 (0x0002 - 0x0000)
struct EndPartyAPI_GetPlayerStatus final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerStatus                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPlayerStatus) == 0x000001, "Wrong alignment on EndPartyAPI_GetPlayerStatus");
static_assert(sizeof(EndPartyAPI_GetPlayerStatus) == 0x000002, "Wrong size on EndPartyAPI_GetPlayerStatus");
static_assert(offsetof(EndPartyAPI_GetPlayerStatus, Type) == 0x000000, "Member 'EndPartyAPI_GetPlayerStatus::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerStatus, ReturnValue) == 0x000001, "Member 'EndPartyAPI_GetPlayerStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetReserveMember
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetReserveMember final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetReserveMember) == 0x000008, "Wrong alignment on EndPartyAPI_GetReserveMember");
static_assert(sizeof(EndPartyAPI_GetReserveMember) == 0x000010, "Wrong size on EndPartyAPI_GetReserveMember");
static_assert(offsetof(EndPartyAPI_GetReserveMember, Index_0) == 0x000000, "Member 'EndPartyAPI_GetReserveMember::Index_0' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetReserveMember, ReturnValue) == 0x000008, "Member 'EndPartyAPI_GetReserveMember::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetReserveMemberCount
// 0x0004 (0x0004 - 0x0000)
struct EndPartyAPI_GetReserveMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetReserveMemberCount) == 0x000004, "Wrong alignment on EndPartyAPI_GetReserveMemberCount");
static_assert(sizeof(EndPartyAPI_GetReserveMemberCount) == 0x000004, "Wrong size on EndPartyAPI_GetReserveMemberCount");
static_assert(offsetof(EndPartyAPI_GetReserveMemberCount, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetReserveMemberCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetReserveMembers
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetReserveMembers final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetReserveMembers) == 0x000008, "Wrong alignment on EndPartyAPI_GetReserveMembers");
static_assert(sizeof(EndPartyAPI_GetReserveMembers) == 0x000010, "Wrong size on EndPartyAPI_GetReserveMembers");
static_assert(offsetof(EndPartyAPI_GetReserveMembers, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetReserveMembers::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetReserveMemberType
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_GetReserveMemberType final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPartyAPI_GetReserveMemberType) == 0x000004, "Wrong alignment on EndPartyAPI_GetReserveMemberType");
static_assert(sizeof(EndPartyAPI_GetReserveMemberType) == 0x000008, "Wrong size on EndPartyAPI_GetReserveMemberType");
static_assert(offsetof(EndPartyAPI_GetReserveMemberType, Slot) == 0x000000, "Member 'EndPartyAPI_GetReserveMemberType::Slot' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetReserveMemberType, ReturnValue) == 0x000004, "Member 'EndPartyAPI_GetReserveMemberType::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.InitPartyLevel
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_InitPartyLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_InitPartyLevel) == 0x000008, "Wrong alignment on EndPartyAPI_InitPartyLevel");
static_assert(sizeof(EndPartyAPI_InitPartyLevel) == 0x000008, "Wrong size on EndPartyAPI_InitPartyLevel");
static_assert(offsetof(EndPartyAPI_InitPartyLevel, WorldContextObject) == 0x000000, "Member 'EndPartyAPI_InitPartyLevel::WorldContextObject' has a wrong offset!");

// Function EndGame.EndPartyAPI.IsAllPartyMember
// 0x0002 (0x0002 - 0x0000)
struct EndPartyAPI_IsAllPartyMember final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_IsAllPartyMember) == 0x000001, "Wrong alignment on EndPartyAPI_IsAllPartyMember");
static_assert(sizeof(EndPartyAPI_IsAllPartyMember) == 0x000002, "Wrong size on EndPartyAPI_IsAllPartyMember");
static_assert(offsetof(EndPartyAPI_IsAllPartyMember, Type) == 0x000000, "Member 'EndPartyAPI_IsAllPartyMember::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_IsAllPartyMember, ReturnValue) == 0x000001, "Member 'EndPartyAPI_IsAllPartyMember::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.IsBattleMember
// 0x0002 (0x0002 - 0x0000)
struct EndPartyAPI_IsBattleMember final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_IsBattleMember) == 0x000001, "Wrong alignment on EndPartyAPI_IsBattleMember");
static_assert(sizeof(EndPartyAPI_IsBattleMember) == 0x000002, "Wrong size on EndPartyAPI_IsBattleMember");
static_assert(offsetof(EndPartyAPI_IsBattleMember, Type) == 0x000000, "Member 'EndPartyAPI_IsBattleMember::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_IsBattleMember, ReturnValue) == 0x000001, "Member 'EndPartyAPI_IsBattleMember::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.IsFinishPlayerStream
// 0x0001 (0x0001 - 0x0000)
struct EndPartyAPI_IsFinishPlayerStream final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_IsFinishPlayerStream) == 0x000001, "Wrong alignment on EndPartyAPI_IsFinishPlayerStream");
static_assert(sizeof(EndPartyAPI_IsFinishPlayerStream) == 0x000001, "Wrong size on EndPartyAPI_IsFinishPlayerStream");
static_assert(offsetof(EndPartyAPI_IsFinishPlayerStream, ReturnValue) == 0x000000, "Member 'EndPartyAPI_IsFinishPlayerStream::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.IsReserveMember
// 0x0002 (0x0002 - 0x0000)
struct EndPartyAPI_IsReserveMember final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_IsReserveMember) == 0x000001, "Wrong alignment on EndPartyAPI_IsReserveMember");
static_assert(sizeof(EndPartyAPI_IsReserveMember) == 0x000002, "Wrong size on EndPartyAPI_IsReserveMember");
static_assert(offsetof(EndPartyAPI_IsReserveMember, Type) == 0x000000, "Member 'EndPartyAPI_IsReserveMember::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_IsReserveMember, ReturnValue) == 0x000001, "Member 'EndPartyAPI_IsReserveMember::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetBattleAway
// 0x0002 (0x0002 - 0x0000)
struct EndPartyAPI_SetBattleAway final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlag;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_SetBattleAway) == 0x000001, "Wrong alignment on EndPartyAPI_SetBattleAway");
static_assert(sizeof(EndPartyAPI_SetBattleAway) == 0x000002, "Wrong size on EndPartyAPI_SetBattleAway");
static_assert(offsetof(EndPartyAPI_SetBattleAway, Type) == 0x000000, "Member 'EndPartyAPI_SetBattleAway::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetBattleAway, bFlag) == 0x000001, "Member 'EndPartyAPI_SetBattleAway::bFlag' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetBattleSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_SetBattleSlotIndex final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_SetBattleSlotIndex) == 0x000004, "Wrong alignment on EndPartyAPI_SetBattleSlotIndex");
static_assert(sizeof(EndPartyAPI_SetBattleSlotIndex) == 0x000008, "Wrong size on EndPartyAPI_SetBattleSlotIndex");
static_assert(offsetof(EndPartyAPI_SetBattleSlotIndex, Type) == 0x000000, "Member 'EndPartyAPI_SetBattleSlotIndex::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetBattleSlotIndex, Slot) == 0x000004, "Member 'EndPartyAPI_SetBattleSlotIndex::Slot' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetPartyLeader
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_SetPartyLeader final
{
public:
	class AActor*                                 InLeader;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInputTrigered;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPartyAPI_SetPartyLeader) == 0x000008, "Wrong alignment on EndPartyAPI_SetPartyLeader");
static_assert(sizeof(EndPartyAPI_SetPartyLeader) == 0x000010, "Wrong size on EndPartyAPI_SetPartyLeader");
static_assert(offsetof(EndPartyAPI_SetPartyLeader, InLeader) == 0x000000, "Member 'EndPartyAPI_SetPartyLeader::InLeader' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPartyLeader, bIsInputTrigered) == 0x000008, "Member 'EndPartyAPI_SetPartyLeader::bIsInputTrigered' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetPartyLeaderType
// 0x0003 (0x0003 - 0x0000)
struct EndPartyAPI_SetPartyLeaderType final
{
public:
	EPlayerType                                   InLeader;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInputTrigered;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_SetPartyLeaderType) == 0x000001, "Wrong alignment on EndPartyAPI_SetPartyLeaderType");
static_assert(sizeof(EndPartyAPI_SetPartyLeaderType) == 0x000003, "Wrong size on EndPartyAPI_SetPartyLeaderType");
static_assert(offsetof(EndPartyAPI_SetPartyLeaderType, InLeader) == 0x000000, "Member 'EndPartyAPI_SetPartyLeaderType::InLeader' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPartyLeaderType, bIsInputTrigered) == 0x000001, "Member 'EndPartyAPI_SetPartyLeaderType::bIsInputTrigered' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPartyLeaderType, bForce) == 0x000002, "Member 'EndPartyAPI_SetPartyLeaderType::bForce' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetPlayerActor
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_SetPlayerActor final
{
public:
	EEquipmentType                                Equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_SetPlayerActor) == 0x000008, "Wrong alignment on EndPartyAPI_SetPlayerActor");
static_assert(sizeof(EndPartyAPI_SetPlayerActor) == 0x000010, "Wrong size on EndPartyAPI_SetPlayerActor");
static_assert(offsetof(EndPartyAPI_SetPlayerActor, Equipment) == 0x000000, "Member 'EndPartyAPI_SetPlayerActor::Equipment' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPlayerActor, Type) == 0x000001, "Member 'EndPartyAPI_SetPlayerActor::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPlayerActor, Actor) == 0x000008, "Member 'EndPartyAPI_SetPlayerActor::Actor' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetPlayerStatus
// 0x0002 (0x0002 - 0x0000)
struct EndPartyAPI_SetPlayerStatus final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerStatus                                 Status;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_SetPlayerStatus) == 0x000001, "Wrong alignment on EndPartyAPI_SetPlayerStatus");
static_assert(sizeof(EndPartyAPI_SetPlayerStatus) == 0x000002, "Wrong size on EndPartyAPI_SetPlayerStatus");
static_assert(offsetof(EndPartyAPI_SetPlayerStatus, Type) == 0x000000, "Member 'EndPartyAPI_SetPlayerStatus::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPlayerStatus, Status) == 0x000001, "Member 'EndPartyAPI_SetPlayerStatus::Status' has a wrong offset!");

// Function EndGame.EndPartyAPI.StartPlayerStream
// 0x0001 (0x0001 - 0x0000)
struct EndPartyAPI_StartPlayerStream final
{
public:
	EPlayerStreamType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_StartPlayerStream) == 0x000001, "Wrong alignment on EndPartyAPI_StartPlayerStream");
static_assert(sizeof(EndPartyAPI_StartPlayerStream) == 0x000001, "Wrong size on EndPartyAPI_StartPlayerStream");
static_assert(offsetof(EndPartyAPI_StartPlayerStream, Type) == 0x000000, "Member 'EndPartyAPI_StartPlayerStream::Type' has a wrong offset!");

// Function EndGame.EndPianoButtonWidget.SetTextToWidget
// 0x0018 (0x0018 - 0x0000)
struct EndPianoButtonWidget_SetTextToWidget final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPianoButtonWidget_SetTextToWidget) == 0x000008, "Wrong alignment on EndPianoButtonWidget_SetTextToWidget");
static_assert(sizeof(EndPianoButtonWidget_SetTextToWidget) == 0x000018, "Wrong size on EndPianoButtonWidget_SetTextToWidget");
static_assert(offsetof(EndPianoButtonWidget_SetTextToWidget, WidgetName) == 0x000000, "Member 'EndPianoButtonWidget_SetTextToWidget::WidgetName' has a wrong offset!");
static_assert(offsetof(EndPianoButtonWidget_SetTextToWidget, Text) == 0x000008, "Member 'EndPianoButtonWidget_SetTextToWidget::Text' has a wrong offset!");

// Function EndGame.EndPianoMusicSelectListWidget.OnMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndPianoMusicSelectListWidget_OnMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPianoMusicSelectListWidget_OnMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndPianoMusicSelectListWidget_OnMenuSelectedIndexChanged");
static_assert(sizeof(EndPianoMusicSelectListWidget_OnMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndPianoMusicSelectListWidget_OnMenuSelectedIndexChanged");
static_assert(offsetof(EndPianoMusicSelectListWidget_OnMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndPianoMusicSelectListWidget_OnMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndPianoMusicSelectListWidget.OnSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndPianoMusicSelectListWidget_OnSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPianoMusicSelectListWidget_OnSetupItem) == 0x000008, "Wrong alignment on EndPianoMusicSelectListWidget_OnSetupItem");
static_assert(sizeof(EndPianoMusicSelectListWidget_OnSetupItem) == 0x000010, "Wrong size on EndPianoMusicSelectListWidget_OnSetupItem");
static_assert(offsetof(EndPianoMusicSelectListWidget_OnSetupItem, ItemWidget) == 0x000000, "Member 'EndPianoMusicSelectListWidget_OnSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndPianoMusicSelectListWidget_OnSetupItem, ItemIndex) == 0x000008, "Member 'EndPianoMusicSelectListWidget_OnSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndPieImage.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndPieImage_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndPieImage_GetDynamicMaterial");
static_assert(sizeof(EndPieImage_GetDynamicMaterial) == 0x000008, "Wrong size on EndPieImage_GetDynamicMaterial");
static_assert(offsetof(EndPieImage_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndPieImage_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndPieImage.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndPieImage_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetBlendMode) == 0x000001, "Wrong alignment on EndPieImage_SetBlendMode");
static_assert(sizeof(EndPieImage_SetBlendMode) == 0x000001, "Wrong size on EndPieImage_SetBlendMode");
static_assert(offsetof(EndPieImage_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndPieImage_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndPieImage.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct EndPieImage_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetBrush) == 0x000008, "Wrong alignment on EndPieImage_SetBrush");
static_assert(sizeof(EndPieImage_SetBrush) == 0x000088, "Wrong size on EndPieImage_SetBrush");
static_assert(offsetof(EndPieImage_SetBrush, InBrush) == 0x000000, "Member 'EndPieImage_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndPieImage.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndPieImage_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndPieImage_SetBrushFromAsset");
static_assert(sizeof(EndPieImage_SetBrushFromAsset) == 0x000008, "Wrong size on EndPieImage_SetBrushFromAsset");
static_assert(offsetof(EndPieImage_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndPieImage_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndPieImage.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndPieImage_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndPieImage_SetBrushFromMaterial");
static_assert(sizeof(EndPieImage_SetBrushFromMaterial) == 0x000008, "Wrong size on EndPieImage_SetBrushFromMaterial");
static_assert(offsetof(EndPieImage_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndPieImage_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndPieImage.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct EndPieImage_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPieImage_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndPieImage_SetBrushFromTexture");
static_assert(sizeof(EndPieImage_SetBrushFromTexture) == 0x000010, "Wrong size on EndPieImage_SetBrushFromTexture");
static_assert(offsetof(EndPieImage_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndPieImage_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(EndPieImage_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'EndPieImage_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function EndGame.EndPieImage.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct EndPieImage_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPieImage_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on EndPieImage_SetBrushFromTextureDynamic");
static_assert(sizeof(EndPieImage_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on EndPieImage_SetBrushFromTextureDynamic");
static_assert(offsetof(EndPieImage_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'EndPieImage_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(EndPieImage_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'EndPieImage_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function EndGame.EndPieImage.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndPieImage_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndPieImage_SetColorAndOpacity");
static_assert(sizeof(EndPieImage_SetColorAndOpacity) == 0x000010, "Wrong size on EndPieImage_SetColorAndOpacity");
static_assert(offsetof(EndPieImage_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndPieImage_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndPieImage.SetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct EndPieImage_SetEndAngle final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetEndAngle) == 0x000004, "Wrong alignment on EndPieImage_SetEndAngle");
static_assert(sizeof(EndPieImage_SetEndAngle) == 0x000004, "Wrong size on EndPieImage_SetEndAngle");
static_assert(offsetof(EndPieImage_SetEndAngle, InAngle) == 0x000000, "Member 'EndPieImage_SetEndAngle::InAngle' has a wrong offset!");

// Function EndGame.EndPieImage.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndPieImage_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetOpacity) == 0x000004, "Wrong alignment on EndPieImage_SetOpacity");
static_assert(sizeof(EndPieImage_SetOpacity) == 0x000004, "Wrong size on EndPieImage_SetOpacity");
static_assert(offsetof(EndPieImage_SetOpacity, InOpacity) == 0x000000, "Member 'EndPieImage_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndPieImage.SetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct EndPieImage_SetStartAngle final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetStartAngle) == 0x000004, "Wrong alignment on EndPieImage_SetStartAngle");
static_assert(sizeof(EndPieImage_SetStartAngle) == 0x000004, "Wrong size on EndPieImage_SetStartAngle");
static_assert(offsetof(EndPieImage_SetStartAngle, InAngle) == 0x000000, "Member 'EndPieImage_SetStartAngle::InAngle' has a wrong offset!");

// Function EndGame.EndPlayerBuggyCoordinator.GetRiderCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndPlayerBuggyCoordinator_GetRiderCharacter final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacterBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayerBuggyCoordinator_GetRiderCharacter) == 0x000008, "Wrong alignment on EndPlayerBuggyCoordinator_GetRiderCharacter");
static_assert(sizeof(EndPlayerBuggyCoordinator_GetRiderCharacter) == 0x000010, "Wrong size on EndPlayerBuggyCoordinator_GetRiderCharacter");
static_assert(offsetof(EndPlayerBuggyCoordinator_GetRiderCharacter, Index_0) == 0x000000, "Member 'EndPlayerBuggyCoordinator_GetRiderCharacter::Index_0' has a wrong offset!");
static_assert(offsetof(EndPlayerBuggyCoordinator_GetRiderCharacter, ReturnValue) == 0x000008, "Member 'EndPlayerBuggyCoordinator_GetRiderCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndPlayerBuggyCoordinator.GetVehicleCharacter
// 0x0008 (0x0008 - 0x0000)
struct EndPlayerBuggyCoordinator_GetVehicleCharacter final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayerBuggyCoordinator_GetVehicleCharacter) == 0x000008, "Wrong alignment on EndPlayerBuggyCoordinator_GetVehicleCharacter");
static_assert(sizeof(EndPlayerBuggyCoordinator_GetVehicleCharacter) == 0x000008, "Wrong size on EndPlayerBuggyCoordinator_GetVehicleCharacter");
static_assert(offsetof(EndPlayerBuggyCoordinator_GetVehicleCharacter, ReturnValue) == 0x000000, "Member 'EndPlayerBuggyCoordinator_GetVehicleCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndPlayerStatusPanel.OnSetupStatusPanel
// 0x0001 (0x0001 - 0x0000)
struct EndPlayerStatusPanel_OnSetupStatusPanel final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayerStatusPanel_OnSetupStatusPanel) == 0x000001, "Wrong alignment on EndPlayerStatusPanel_OnSetupStatusPanel");
static_assert(sizeof(EndPlayerStatusPanel_OnSetupStatusPanel) == 0x000001, "Wrong size on EndPlayerStatusPanel_OnSetupStatusPanel");
static_assert(offsetof(EndPlayerStatusPanel_OnSetupStatusPanel, PlayerType) == 0x000000, "Member 'EndPlayerStatusPanel_OnSetupStatusPanel::PlayerType' has a wrong offset!");

// Function EndGame.EndQuestMenu.OnQuestScrollBoxPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndQuestMenu_OnQuestScrollBoxPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuestMenu_OnQuestScrollBoxPressedItem) == 0x000004, "Wrong alignment on EndQuestMenu_OnQuestScrollBoxPressedItem");
static_assert(sizeof(EndQuestMenu_OnQuestScrollBoxPressedItem) == 0x000004, "Wrong size on EndQuestMenu_OnQuestScrollBoxPressedItem");
static_assert(offsetof(EndQuestMenu_OnQuestScrollBoxPressedItem, ItemIndex) == 0x000000, "Member 'EndQuestMenu_OnQuestScrollBoxPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndQuestMenu.OnQuestScrollBoxSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndQuestMenu_OnQuestScrollBoxSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndQuestMenu_OnQuestScrollBoxSetupItem) == 0x000008, "Wrong alignment on EndQuestMenu_OnQuestScrollBoxSetupItem");
static_assert(sizeof(EndQuestMenu_OnQuestScrollBoxSetupItem) == 0x000010, "Wrong size on EndQuestMenu_OnQuestScrollBoxSetupItem");
static_assert(offsetof(EndQuestMenu_OnQuestScrollBoxSetupItem, ItemWidget) == 0x000000, "Member 'EndQuestMenu_OnQuestScrollBoxSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndQuestMenu_OnQuestScrollBoxSetupItem, ItemIndex) == 0x000008, "Member 'EndQuestMenu_OnQuestScrollBoxSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndQuestMenu2.OnAreaChangeBtnSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndQuestMenu2_OnAreaChangeBtnSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndQuestMenu2_OnAreaChangeBtnSetupItem) == 0x000008, "Wrong alignment on EndQuestMenu2_OnAreaChangeBtnSetupItem");
static_assert(sizeof(EndQuestMenu2_OnAreaChangeBtnSetupItem) == 0x000010, "Wrong size on EndQuestMenu2_OnAreaChangeBtnSetupItem");
static_assert(offsetof(EndQuestMenu2_OnAreaChangeBtnSetupItem, ItemWidget) == 0x000000, "Member 'EndQuestMenu2_OnAreaChangeBtnSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndQuestMenu2_OnAreaChangeBtnSetupItem, ItemIndex) == 0x000008, "Member 'EndQuestMenu2_OnAreaChangeBtnSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndQuestMenu2.OnLeftMenuScrollBoxMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndQuestMenu2_OnLeftMenuScrollBoxMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuestMenu2_OnLeftMenuScrollBoxMeasureItem) == 0x000004, "Wrong alignment on EndQuestMenu2_OnLeftMenuScrollBoxMeasureItem");
static_assert(sizeof(EndQuestMenu2_OnLeftMenuScrollBoxMeasureItem) == 0x00000C, "Wrong size on EndQuestMenu2_OnLeftMenuScrollBoxMeasureItem");
static_assert(offsetof(EndQuestMenu2_OnLeftMenuScrollBoxMeasureItem, ItemIndex) == 0x000000, "Member 'EndQuestMenu2_OnLeftMenuScrollBoxMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndQuestMenu2_OnLeftMenuScrollBoxMeasureItem, ReturnValue) == 0x000004, "Member 'EndQuestMenu2_OnLeftMenuScrollBoxMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndQuestMenu2.OnLeftMenuScrollBoxSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndQuestMenu2_OnLeftMenuScrollBoxSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuestMenu2_OnLeftMenuScrollBoxSelectedIndexChanged) == 0x000004, "Wrong alignment on EndQuestMenu2_OnLeftMenuScrollBoxSelectedIndexChanged");
static_assert(sizeof(EndQuestMenu2_OnLeftMenuScrollBoxSelectedIndexChanged) == 0x000004, "Wrong size on EndQuestMenu2_OnLeftMenuScrollBoxSelectedIndexChanged");
static_assert(offsetof(EndQuestMenu2_OnLeftMenuScrollBoxSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndQuestMenu2_OnLeftMenuScrollBoxSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndQuestMenu2.OnLeftMenuScrollBoxSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndQuestMenu2_OnLeftMenuScrollBoxSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndQuestMenu2_OnLeftMenuScrollBoxSetupItem) == 0x000008, "Wrong alignment on EndQuestMenu2_OnLeftMenuScrollBoxSetupItem");
static_assert(sizeof(EndQuestMenu2_OnLeftMenuScrollBoxSetupItem) == 0x000010, "Wrong size on EndQuestMenu2_OnLeftMenuScrollBoxSetupItem");
static_assert(offsetof(EndQuestMenu2_OnLeftMenuScrollBoxSetupItem, ItemWidget) == 0x000000, "Member 'EndQuestMenu2_OnLeftMenuScrollBoxSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndQuestMenu2_OnLeftMenuScrollBoxSetupItem, ItemIndex) == 0x000008, "Member 'EndQuestMenu2_OnLeftMenuScrollBoxSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndQuestMenu2.OnQuestInfoListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndQuestMenu2_OnQuestInfoListMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuestMenu2_OnQuestInfoListMeasureItem) == 0x000004, "Wrong alignment on EndQuestMenu2_OnQuestInfoListMeasureItem");
static_assert(sizeof(EndQuestMenu2_OnQuestInfoListMeasureItem) == 0x00000C, "Wrong size on EndQuestMenu2_OnQuestInfoListMeasureItem");
static_assert(offsetof(EndQuestMenu2_OnQuestInfoListMeasureItem, ItemIndex) == 0x000000, "Member 'EndQuestMenu2_OnQuestInfoListMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndQuestMenu2_OnQuestInfoListMeasureItem, ReturnValue) == 0x000004, "Member 'EndQuestMenu2_OnQuestInfoListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndQuestMenu2.OnQuestInfoListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndQuestMenu2_OnQuestInfoListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndQuestMenu2_OnQuestInfoListSetupItem) == 0x000008, "Wrong alignment on EndQuestMenu2_OnQuestInfoListSetupItem");
static_assert(sizeof(EndQuestMenu2_OnQuestInfoListSetupItem) == 0x000010, "Wrong size on EndQuestMenu2_OnQuestInfoListSetupItem");
static_assert(offsetof(EndQuestMenu2_OnQuestInfoListSetupItem, ItemWidget) == 0x000000, "Member 'EndQuestMenu2_OnQuestInfoListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndQuestMenu2_OnQuestInfoListSetupItem, ItemIndex) == 0x000008, "Member 'EndQuestMenu2_OnQuestInfoListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndRagdollSEComponent.OnHitRagdoll
// 0x00B8 (0x00B8 - 0x0000)
struct EndRagdollSEComponent_OnHitRagdoll final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndRagdollSEComponent_OnHitRagdoll) == 0x000008, "Wrong alignment on EndRagdollSEComponent_OnHitRagdoll");
static_assert(sizeof(EndRagdollSEComponent_OnHitRagdoll) == 0x0000B8, "Wrong size on EndRagdollSEComponent_OnHitRagdoll");
static_assert(offsetof(EndRagdollSEComponent_OnHitRagdoll, HitComponent) == 0x000000, "Member 'EndRagdollSEComponent_OnHitRagdoll::HitComponent' has a wrong offset!");
static_assert(offsetof(EndRagdollSEComponent_OnHitRagdoll, OtherActor) == 0x000008, "Member 'EndRagdollSEComponent_OnHitRagdoll::OtherActor' has a wrong offset!");
static_assert(offsetof(EndRagdollSEComponent_OnHitRagdoll, OtherComp) == 0x000010, "Member 'EndRagdollSEComponent_OnHitRagdoll::OtherComp' has a wrong offset!");
static_assert(offsetof(EndRagdollSEComponent_OnHitRagdoll, NormalImpulse) == 0x000018, "Member 'EndRagdollSEComponent_OnHitRagdoll::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndRagdollSEComponent_OnHitRagdoll, Hit) == 0x000024, "Member 'EndRagdollSEComponent_OnHitRagdoll::Hit' has a wrong offset!");

// Function EndGame.EndResearchTargetList.OnPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndResearchTargetList_OnPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndResearchTargetList_OnPressedItem) == 0x000004, "Wrong alignment on EndResearchTargetList_OnPressedItem");
static_assert(sizeof(EndResearchTargetList_OnPressedItem) == 0x000004, "Wrong size on EndResearchTargetList_OnPressedItem");
static_assert(offsetof(EndResearchTargetList_OnPressedItem, CellIndex) == 0x000000, "Member 'EndResearchTargetList_OnPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndResearchTargetList.OnSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndResearchTargetList_OnSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndResearchTargetList_OnSelectedIndexChanged) == 0x000004, "Wrong alignment on EndResearchTargetList_OnSelectedIndexChanged");
static_assert(sizeof(EndResearchTargetList_OnSelectedIndexChanged) == 0x000004, "Wrong size on EndResearchTargetList_OnSelectedIndexChanged");
static_assert(offsetof(EndResearchTargetList_OnSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndResearchTargetList_OnSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndResearchTargetList.OnSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndResearchTargetList_OnSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndResearchTargetList_OnSetupItem) == 0x000008, "Wrong alignment on EndResearchTargetList_OnSetupItem");
static_assert(sizeof(EndResearchTargetList_OnSetupItem) == 0x000010, "Wrong size on EndResearchTargetList_OnSetupItem");
static_assert(offsetof(EndResearchTargetList_OnSetupItem, ItemWidget) == 0x000000, "Member 'EndResearchTargetList_OnSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndResearchTargetList_OnSetupItem, CellIndex) == 0x000008, "Member 'EndResearchTargetList_OnSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndResearchTargetWindow.OnListPressedItem
// 0x0008 (0x0008 - 0x0000)
struct EndResearchTargetWindow_OnListPressedItem final
{
public:
	int32                                         Category;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndResearchTargetWindow_OnListPressedItem) == 0x000004, "Wrong alignment on EndResearchTargetWindow_OnListPressedItem");
static_assert(sizeof(EndResearchTargetWindow_OnListPressedItem) == 0x000008, "Wrong size on EndResearchTargetWindow_OnListPressedItem");
static_assert(offsetof(EndResearchTargetWindow_OnListPressedItem, Category) == 0x000000, "Member 'EndResearchTargetWindow_OnListPressedItem::Category' has a wrong offset!");
static_assert(offsetof(EndResearchTargetWindow_OnListPressedItem, CellIndex) == 0x000004, "Member 'EndResearchTargetWindow_OnListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndResearchTargetWindow.OnListSelectedIndexChanged
// 0x0008 (0x0008 - 0x0000)
struct EndResearchTargetWindow_OnListSelectedIndexChanged final
{
public:
	int32                                         Category;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndResearchTargetWindow_OnListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndResearchTargetWindow_OnListSelectedIndexChanged");
static_assert(sizeof(EndResearchTargetWindow_OnListSelectedIndexChanged) == 0x000008, "Wrong size on EndResearchTargetWindow_OnListSelectedIndexChanged");
static_assert(offsetof(EndResearchTargetWindow_OnListSelectedIndexChanged, Category) == 0x000000, "Member 'EndResearchTargetWindow_OnListSelectedIndexChanged::Category' has a wrong offset!");
static_assert(offsetof(EndResearchTargetWindow_OnListSelectedIndexChanged, CellIndex) == 0x000004, "Member 'EndResearchTargetWindow_OnListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndResearchTargetWindow.OnListSetupItem
// 0x0018 (0x0018 - 0x0000)
struct EndResearchTargetWindow_OnListSetupItem final
{
public:
	int32                                         Category;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ItemWidget;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndResearchTargetWindow_OnListSetupItem) == 0x000008, "Wrong alignment on EndResearchTargetWindow_OnListSetupItem");
static_assert(sizeof(EndResearchTargetWindow_OnListSetupItem) == 0x000018, "Wrong size on EndResearchTargetWindow_OnListSetupItem");
static_assert(offsetof(EndResearchTargetWindow_OnListSetupItem, Category) == 0x000000, "Member 'EndResearchTargetWindow_OnListSetupItem::Category' has a wrong offset!");
static_assert(offsetof(EndResearchTargetWindow_OnListSetupItem, ItemWidget) == 0x000008, "Member 'EndResearchTargetWindow_OnListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndResearchTargetWindow_OnListSetupItem, CellIndex) == 0x000010, "Member 'EndResearchTargetWindow_OnListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndShootingGamePhaseIconWidget.OnMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndShootingGamePhaseIconWidget_OnMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndShootingGamePhaseIconWidget_OnMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndShootingGamePhaseIconWidget_OnMenuSelectedIndexChanged");
static_assert(sizeof(EndShootingGamePhaseIconWidget_OnMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndShootingGamePhaseIconWidget_OnMenuSelectedIndexChanged");
static_assert(offsetof(EndShootingGamePhaseIconWidget_OnMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndShootingGamePhaseIconWidget_OnMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopCategolyMenu.OnPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndShopCategolyMenu_OnPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndShopCategolyMenu_OnPressedItem) == 0x000004, "Wrong alignment on EndShopCategolyMenu_OnPressedItem");
static_assert(sizeof(EndShopCategolyMenu_OnPressedItem) == 0x000004, "Wrong size on EndShopCategolyMenu_OnPressedItem");
static_assert(offsetof(EndShopCategolyMenu_OnPressedItem, ItemIndex) == 0x000000, "Member 'EndShopCategolyMenu_OnPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopCategolyMenu.OnShopCategolyCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopCategolyMenu_OnShopCategolyCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopCategolyMenu_OnShopCategolyCellSetup) == 0x000008, "Wrong alignment on EndShopCategolyMenu_OnShopCategolyCellSetup");
static_assert(sizeof(EndShopCategolyMenu_OnShopCategolyCellSetup) == 0x000010, "Wrong size on EndShopCategolyMenu_OnShopCategolyCellSetup");
static_assert(offsetof(EndShopCategolyMenu_OnShopCategolyCellSetup, ItemWidget) == 0x000000, "Member 'EndShopCategolyMenu_OnShopCategolyCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopCategolyMenu_OnShopCategolyCellSetup, ItemIndex) == 0x000008, "Member 'EndShopCategolyMenu_OnShopCategolyCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndSortWindow.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndSortWindow_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSortWindow_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndSortWindow_OnSortListPressedItem");
static_assert(sizeof(EndSortWindow_OnSortListPressedItem) == 0x000004, "Wrong size on EndSortWindow_OnSortListPressedItem");
static_assert(offsetof(EndSortWindow_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndSortWindow_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndSortWindow.OnSortListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndSortWindow_OnSortListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSortWindow_OnSortListSetupItem) == 0x000008, "Wrong alignment on EndSortWindow_OnSortListSetupItem");
static_assert(sizeof(EndSortWindow_OnSortListSetupItem) == 0x000010, "Wrong size on EndSortWindow_OnSortListSetupItem");
static_assert(offsetof(EndSortWindow_OnSortListSetupItem, ItemWidget) == 0x000000, "Member 'EndSortWindow_OnSortListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndSortWindow_OnSortListSetupItem, CellIndex) == 0x000008, "Member 'EndSortWindow_OnSortListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnCharaFaceSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStartMenu_OnCharaFaceSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStartMenu_OnCharaFaceSetupItem) == 0x000008, "Wrong alignment on EndStartMenu_OnCharaFaceSetupItem");
static_assert(sizeof(EndStartMenu_OnCharaFaceSetupItem) == 0x000010, "Wrong size on EndStartMenu_OnCharaFaceSetupItem");
static_assert(offsetof(EndStartMenu_OnCharaFaceSetupItem, ItemWidget) == 0x000000, "Member 'EndStartMenu_OnCharaFaceSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStartMenu_OnCharaFaceSetupItem, ItemIndex) == 0x000008, "Member 'EndStartMenu_OnCharaFaceSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnListMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndStartMenu_OnListMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStartMenu_OnListMenuPressedItem) == 0x000004, "Wrong alignment on EndStartMenu_OnListMenuPressedItem");
static_assert(sizeof(EndStartMenu_OnListMenuPressedItem) == 0x000004, "Wrong size on EndStartMenu_OnListMenuPressedItem");
static_assert(offsetof(EndStartMenu_OnListMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndStartMenu_OnListMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnListMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndStartMenu_OnListMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStartMenu_OnListMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndStartMenu_OnListMenuSelectedIndexChanged");
static_assert(sizeof(EndStartMenu_OnListMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndStartMenu_OnListMenuSelectedIndexChanged");
static_assert(offsetof(EndStartMenu_OnListMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndStartMenu_OnListMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnListMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStartMenu_OnListMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStartMenu_OnListMenuSetupItem) == 0x000008, "Wrong alignment on EndStartMenu_OnListMenuSetupItem");
static_assert(sizeof(EndStartMenu_OnListMenuSetupItem) == 0x000010, "Wrong size on EndStartMenu_OnListMenuSetupItem");
static_assert(offsetof(EndStartMenu_OnListMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndStartMenu_OnListMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStartMenu_OnListMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndStartMenu_OnListMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnSaveDataClicked
// 0x0008 (0x0008 - 0x0000)
struct EndStartMenu_OnSaveDataClicked final
{
public:
	class UUserWidget*                            Cell;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStartMenu_OnSaveDataClicked) == 0x000008, "Wrong alignment on EndStartMenu_OnSaveDataClicked");
static_assert(sizeof(EndStartMenu_OnSaveDataClicked) == 0x000008, "Wrong size on EndStartMenu_OnSaveDataClicked");
static_assert(offsetof(EndStartMenu_OnSaveDataClicked, Cell) == 0x000000, "Member 'EndStartMenu_OnSaveDataClicked::Cell' has a wrong offset!");

// Function EndGame.EndStartMenu.OnSaveDataPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndStartMenu_OnSaveDataPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStartMenu_OnSaveDataPressedItem) == 0x000004, "Wrong alignment on EndStartMenu_OnSaveDataPressedItem");
static_assert(sizeof(EndStartMenu_OnSaveDataPressedItem) == 0x000004, "Wrong size on EndStartMenu_OnSaveDataPressedItem");
static_assert(offsetof(EndStartMenu_OnSaveDataPressedItem, ItemIndex) == 0x000000, "Member 'EndStartMenu_OnSaveDataPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnSaveDataSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndStartMenu_OnSaveDataSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStartMenu_OnSaveDataSelectedIndexChanged) == 0x000004, "Wrong alignment on EndStartMenu_OnSaveDataSelectedIndexChanged");
static_assert(sizeof(EndStartMenu_OnSaveDataSelectedIndexChanged) == 0x000004, "Wrong size on EndStartMenu_OnSaveDataSelectedIndexChanged");
static_assert(offsetof(EndStartMenu_OnSaveDataSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndStartMenu_OnSaveDataSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnSaveDataSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStartMenu_OnSaveDataSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStartMenu_OnSaveDataSetupItem) == 0x000008, "Wrong alignment on EndStartMenu_OnSaveDataSetupItem");
static_assert(sizeof(EndStartMenu_OnSaveDataSetupItem) == 0x000010, "Wrong size on EndStartMenu_OnSaveDataSetupItem");
static_assert(offsetof(EndStartMenu_OnSaveDataSetupItem, ItemWidget) == 0x000000, "Member 'EndStartMenu_OnSaveDataSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStartMenu_OnSaveDataSetupItem, ItemIndex) == 0x000008, "Member 'EndStartMenu_OnSaveDataSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStoryMenu.OnChapterChangeBtnSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStoryMenu_OnChapterChangeBtnSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStoryMenu_OnChapterChangeBtnSetupItem) == 0x000008, "Wrong alignment on EndStoryMenu_OnChapterChangeBtnSetupItem");
static_assert(sizeof(EndStoryMenu_OnChapterChangeBtnSetupItem) == 0x000010, "Wrong size on EndStoryMenu_OnChapterChangeBtnSetupItem");
static_assert(offsetof(EndStoryMenu_OnChapterChangeBtnSetupItem, ItemWidget) == 0x000000, "Member 'EndStoryMenu_OnChapterChangeBtnSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStoryMenu_OnChapterChangeBtnSetupItem, ItemIndex) == 0x000008, "Member 'EndStoryMenu_OnChapterChangeBtnSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStoryMenu.OnLeftMenuCanFocus
// 0x0008 (0x0008 - 0x0000)
struct EndStoryMenu_OnLeftMenuCanFocus final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStoryMenu_OnLeftMenuCanFocus) == 0x000004, "Wrong alignment on EndStoryMenu_OnLeftMenuCanFocus");
static_assert(sizeof(EndStoryMenu_OnLeftMenuCanFocus) == 0x000008, "Wrong size on EndStoryMenu_OnLeftMenuCanFocus");
static_assert(offsetof(EndStoryMenu_OnLeftMenuCanFocus, ItemIndex) == 0x000000, "Member 'EndStoryMenu_OnLeftMenuCanFocus::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndStoryMenu_OnLeftMenuCanFocus, ReturnValue) == 0x000004, "Member 'EndStoryMenu_OnLeftMenuCanFocus::ReturnValue' has a wrong offset!");

// Function EndGame.EndStoryMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndStoryMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStoryMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndStoryMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndStoryMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndStoryMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndStoryMenu_OnLeftMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndStoryMenu_OnLeftMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStoryMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndStoryMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStoryMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndStoryMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndStoryMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndStoryMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndStoryMenu_OnLeftMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndStoryMenu_OnLeftMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndStoryMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStoryMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStoryMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndStoryMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndStoryMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndStoryMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndStoryMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndStoryMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStoryMenu_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndStoryMenu_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStreamingGrid.EnableStreamingGrid
// 0x0001 (0x0001 - 0x0000)
struct EndStreamingGrid_EnableStreamingGrid final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStreamingGrid_EnableStreamingGrid) == 0x000001, "Wrong alignment on EndStreamingGrid_EnableStreamingGrid");
static_assert(sizeof(EndStreamingGrid_EnableStreamingGrid) == 0x000001, "Wrong size on EndStreamingGrid_EnableStreamingGrid");
static_assert(offsetof(EndStreamingGrid_EnableStreamingGrid, bEnable) == 0x000000, "Member 'EndStreamingGrid_EnableStreamingGrid::bEnable' has a wrong offset!");

// Function EndGame.EndStreamingGrid.PauseStreamingGrid
// 0x0001 (0x0001 - 0x0000)
struct EndStreamingGrid_PauseStreamingGrid final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStreamingGrid_PauseStreamingGrid) == 0x000001, "Wrong alignment on EndStreamingGrid_PauseStreamingGrid");
static_assert(sizeof(EndStreamingGrid_PauseStreamingGrid) == 0x000001, "Wrong size on EndStreamingGrid_PauseStreamingGrid");
static_assert(offsetof(EndStreamingGrid_PauseStreamingGrid, bEnable) == 0x000000, "Member 'EndStreamingGrid_PauseStreamingGrid::bEnable' has a wrong offset!");

// Function EndGame.EndStringListBox.SetDesiredCount
// 0x0004 (0x0004 - 0x0000)
struct EndStringListBox_SetDesiredCount final
{
public:
	int32                                         InDesiredCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringListBox_SetDesiredCount) == 0x000004, "Wrong alignment on EndStringListBox_SetDesiredCount");
static_assert(sizeof(EndStringListBox_SetDesiredCount) == 0x000004, "Wrong size on EndStringListBox_SetDesiredCount");
static_assert(offsetof(EndStringListBox_SetDesiredCount, InDesiredCount) == 0x000000, "Member 'EndStringListBox_SetDesiredCount::InDesiredCount' has a wrong offset!");

// Function EndGame.EndStringListBox.SetItems
// 0x0010 (0x0010 - 0x0000)
struct EndStringListBox_SetItems final
{
public:
	TArray<class FString>                         InItems;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringListBox_SetItems) == 0x000008, "Wrong alignment on EndStringListBox_SetItems");
static_assert(sizeof(EndStringListBox_SetItems) == 0x000010, "Wrong size on EndStringListBox_SetItems");
static_assert(offsetof(EndStringListBox_SetItems, InItems) == 0x000000, "Member 'EndStringListBox_SetItems::InItems' has a wrong offset!");

// Function EndGame.EndStringListBox.GetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct EndStringListBox_GetSelectedIndex final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringListBox_GetSelectedIndex) == 0x000004, "Wrong alignment on EndStringListBox_GetSelectedIndex");
static_assert(sizeof(EndStringListBox_GetSelectedIndex) == 0x000008, "Wrong size on EndStringListBox_GetSelectedIndex");
static_assert(offsetof(EndStringListBox_GetSelectedIndex, UserIndex) == 0x000000, "Member 'EndStringListBox_GetSelectedIndex::UserIndex' has a wrong offset!");
static_assert(offsetof(EndStringListBox_GetSelectedIndex, ReturnValue) == 0x000004, "Member 'EndStringListBox_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct EndStringScrollBox_SetColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetColorAndOpacity) == 0x000008, "Wrong alignment on EndStringScrollBox_SetColorAndOpacity");
static_assert(sizeof(EndStringScrollBox_SetColorAndOpacity) == 0x000028, "Wrong size on EndStringScrollBox_SetColorAndOpacity");
static_assert(offsetof(EndStringScrollBox_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndStringScrollBox_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetCullingBoundsExtension
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_SetCullingBoundsExtension final
{
public:
	struct FMargin                                InCullingBoundsExtension;                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetCullingBoundsExtension) == 0x000004, "Wrong alignment on EndStringScrollBox_SetCullingBoundsExtension");
static_assert(sizeof(EndStringScrollBox_SetCullingBoundsExtension) == 0x000010, "Wrong size on EndStringScrollBox_SetCullingBoundsExtension");
static_assert(offsetof(EndStringScrollBox_SetCullingBoundsExtension, InCullingBoundsExtension) == 0x000000, "Member 'EndStringScrollBox_SetCullingBoundsExtension::InCullingBoundsExtension' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetDesiredCount
// 0x0004 (0x0004 - 0x0000)
struct EndStringScrollBox_SetDesiredCount final
{
public:
	int32                                         InDesiredCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetDesiredCount) == 0x000004, "Wrong alignment on EndStringScrollBox_SetDesiredCount");
static_assert(sizeof(EndStringScrollBox_SetDesiredCount) == 0x000004, "Wrong size on EndStringScrollBox_SetDesiredCount");
static_assert(offsetof(EndStringScrollBox_SetDesiredCount, InDesiredCount) == 0x000000, "Member 'EndStringScrollBox_SetDesiredCount::InDesiredCount' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetFont
// 0x0008 (0x0008 - 0x0000)
struct EndStringScrollBox_SetFont final
{
public:
	class UEndFont*                               InFont;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetFont) == 0x000008, "Wrong alignment on EndStringScrollBox_SetFont");
static_assert(sizeof(EndStringScrollBox_SetFont) == 0x000008, "Wrong size on EndStringScrollBox_SetFont");
static_assert(offsetof(EndStringScrollBox_SetFont, InFont) == 0x000000, "Member 'EndStringScrollBox_SetFont::InFont' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetOutline
// 0x0001 (0x0001 - 0x0000)
struct EndStringScrollBox_SetOutline final
{
public:
	bool                                          bInOutline;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetOutline) == 0x000001, "Wrong alignment on EndStringScrollBox_SetOutline");
static_assert(sizeof(EndStringScrollBox_SetOutline) == 0x000001, "Wrong size on EndStringScrollBox_SetOutline");
static_assert(offsetof(EndStringScrollBox_SetOutline, bInOutline) == 0x000000, "Member 'EndStringScrollBox_SetOutline::bInOutline' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetOutlineColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_SetOutlineColorAndOpacity final
{
public:
	struct FLinearColor                           InOutlineColorAndOpacity;                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetOutlineColorAndOpacity) == 0x000004, "Wrong alignment on EndStringScrollBox_SetOutlineColorAndOpacity");
static_assert(sizeof(EndStringScrollBox_SetOutlineColorAndOpacity) == 0x000010, "Wrong size on EndStringScrollBox_SetOutlineColorAndOpacity");
static_assert(offsetof(EndStringScrollBox_SetOutlineColorAndOpacity, InOutlineColorAndOpacity) == 0x000000, "Member 'EndStringScrollBox_SetOutlineColorAndOpacity::InOutlineColorAndOpacity' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetPadding) == 0x000004, "Wrong alignment on EndStringScrollBox_SetPadding");
static_assert(sizeof(EndStringScrollBox_SetPadding) == 0x000010, "Wrong size on EndStringScrollBox_SetPadding");
static_assert(offsetof(EndStringScrollBox_SetPadding, InPadding) == 0x000000, "Member 'EndStringScrollBox_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetScrollBarPosition
// 0x0001 (0x0001 - 0x0000)
struct EndStringScrollBox_SetScrollBarPosition final
{
public:
	EEndMenuScrollBarPosition                     InScrollBarPosition;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetScrollBarPosition) == 0x000001, "Wrong alignment on EndStringScrollBox_SetScrollBarPosition");
static_assert(sizeof(EndStringScrollBox_SetScrollBarPosition) == 0x000001, "Wrong size on EndStringScrollBox_SetScrollBarPosition");
static_assert(offsetof(EndStringScrollBox_SetScrollBarPosition, InScrollBarPosition) == 0x000000, "Member 'EndStringScrollBox_SetScrollBarPosition::InScrollBarPosition' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct EndStringScrollBox_SetScrollOffset final
{
public:
	float                                         NewScrollOffset;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetScrollOffset) == 0x000004, "Wrong alignment on EndStringScrollBox_SetScrollOffset");
static_assert(sizeof(EndStringScrollBox_SetScrollOffset) == 0x000004, "Wrong size on EndStringScrollBox_SetScrollOffset");
static_assert(offsetof(EndStringScrollBox_SetScrollOffset, NewScrollOffset) == 0x000000, "Member 'EndStringScrollBox_SetScrollOffset::NewScrollOffset' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetShadowColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_SetShadowColorAndOpacity final
{
public:
	struct FLinearColor                           InShadowColorAndOpacity;                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetShadowColorAndOpacity) == 0x000004, "Wrong alignment on EndStringScrollBox_SetShadowColorAndOpacity");
static_assert(sizeof(EndStringScrollBox_SetShadowColorAndOpacity) == 0x000010, "Wrong size on EndStringScrollBox_SetShadowColorAndOpacity");
static_assert(offsetof(EndStringScrollBox_SetShadowColorAndOpacity, InShadowColorAndOpacity) == 0x000000, "Member 'EndStringScrollBox_SetShadowColorAndOpacity::InShadowColorAndOpacity' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct EndStringScrollBox_SetShadowOffset final
{
public:
	struct FVector2D                              InShadowOffset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetShadowOffset) == 0x000004, "Wrong alignment on EndStringScrollBox_SetShadowOffset");
static_assert(sizeof(EndStringScrollBox_SetShadowOffset) == 0x000008, "Wrong size on EndStringScrollBox_SetShadowOffset");
static_assert(offsetof(EndStringScrollBox_SetShadowOffset, InShadowOffset) == 0x000000, "Member 'EndStringScrollBox_SetShadowOffset::InShadowOffset' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetText
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_SetText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetText) == 0x000008, "Wrong alignment on EndStringScrollBox_SetText");
static_assert(sizeof(EndStringScrollBox_SetText) == 0x000010, "Wrong size on EndStringScrollBox_SetText");
static_assert(offsetof(EndStringScrollBox_SetText, InText) == 0x000000, "Member 'EndStringScrollBox_SetText::InText' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct EndStringScrollBox_SetWrapTextAt final
{
public:
	float                                         InWrapTextAt;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetWrapTextAt) == 0x000004, "Wrong alignment on EndStringScrollBox_SetWrapTextAt");
static_assert(sizeof(EndStringScrollBox_SetWrapTextAt) == 0x000004, "Wrong size on EndStringScrollBox_SetWrapTextAt");
static_assert(offsetof(EndStringScrollBox_SetWrapTextAt, InWrapTextAt) == 0x000000, "Member 'EndStringScrollBox_SetWrapTextAt::InWrapTextAt' has a wrong offset!");

// Function EndGame.EndStringScrollBox.GetLineCount
// 0x0004 (0x0004 - 0x0000)
struct EndStringScrollBox_GetLineCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_GetLineCount) == 0x000004, "Wrong alignment on EndStringScrollBox_GetLineCount");
static_assert(sizeof(EndStringScrollBox_GetLineCount) == 0x000004, "Wrong size on EndStringScrollBox_GetLineCount");
static_assert(offsetof(EndStringScrollBox_GetLineCount, ReturnValue) == 0x000000, "Member 'EndStringScrollBox_GetLineCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndStringScrollBox.GetMaxScrollOffset
// 0x0008 (0x0008 - 0x0000)
struct EndStringScrollBox_GetMaxScrollOffset final
{
public:
	float                                         InScrollHeight;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_GetMaxScrollOffset) == 0x000004, "Wrong alignment on EndStringScrollBox_GetMaxScrollOffset");
static_assert(sizeof(EndStringScrollBox_GetMaxScrollOffset) == 0x000008, "Wrong size on EndStringScrollBox_GetMaxScrollOffset");
static_assert(offsetof(EndStringScrollBox_GetMaxScrollOffset, InScrollHeight) == 0x000000, "Member 'EndStringScrollBox_GetMaxScrollOffset::InScrollHeight' has a wrong offset!");
static_assert(offsetof(EndStringScrollBox_GetMaxScrollOffset, ReturnValue) == 0x000004, "Member 'EndStringScrollBox_GetMaxScrollOffset::ReturnValue' has a wrong offset!");

// Function EndGame.EndStringScrollBox.GetScrollBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct EndStringScrollBox_GetScrollBarVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_GetScrollBarVisibility) == 0x000001, "Wrong alignment on EndStringScrollBox_GetScrollBarVisibility");
static_assert(sizeof(EndStringScrollBox_GetScrollBarVisibility) == 0x000001, "Wrong size on EndStringScrollBox_GetScrollBarVisibility");
static_assert(offsetof(EndStringScrollBox_GetScrollBarVisibility, ReturnValue) == 0x000000, "Member 'EndStringScrollBox_GetScrollBarVisibility::ReturnValue' has a wrong offset!");

// Function EndGame.EndStringScrollBox.GetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct EndStringScrollBox_GetScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_GetScrollOffset) == 0x000004, "Wrong alignment on EndStringScrollBox_GetScrollOffset");
static_assert(sizeof(EndStringScrollBox_GetScrollOffset) == 0x000004, "Wrong size on EndStringScrollBox_GetScrollOffset");
static_assert(offsetof(EndStringScrollBox_GetScrollOffset, ReturnValue) == 0x000000, "Member 'EndStringScrollBox_GetScrollOffset::ReturnValue' has a wrong offset!");

// Function EndGame.EndStringScrollBox.GetText
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_GetText) == 0x000008, "Wrong alignment on EndStringScrollBox_GetText");
static_assert(sizeof(EndStringScrollBox_GetText) == 0x000010, "Wrong size on EndStringScrollBox_GetText");
static_assert(offsetof(EndStringScrollBox_GetText, ReturnValue) == 0x000000, "Member 'EndStringScrollBox_GetText::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.EnableWorldShift
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_EnableWorldShift final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_EnableWorldShift) == 0x000001, "Wrong alignment on EndSystemAPI_EnableWorldShift");
static_assert(sizeof(EndSystemAPI_EnableWorldShift) == 0x000001, "Wrong size on EndSystemAPI_EnableWorldShift");
static_assert(offsetof(EndSystemAPI_EnableWorldShift, bActive) == 0x000000, "Member 'EndSystemAPI_EnableWorldShift::bActive' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetBuildRevisionString
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_GetBuildRevisionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetBuildRevisionString) == 0x000008, "Wrong alignment on EndSystemAPI_GetBuildRevisionString");
static_assert(sizeof(EndSystemAPI_GetBuildRevisionString) == 0x000010, "Wrong size on EndSystemAPI_GetBuildRevisionString");
static_assert(offsetof(EndSystemAPI_GetBuildRevisionString, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetBuildRevisionString::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetBuildTimeString
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_GetBuildTimeString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetBuildTimeString) == 0x000008, "Wrong alignment on EndSystemAPI_GetBuildTimeString");
static_assert(sizeof(EndSystemAPI_GetBuildTimeString) == 0x000010, "Wrong size on EndSystemAPI_GetBuildTimeString");
static_assert(offsetof(EndSystemAPI_GetBuildTimeString, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetBuildTimeString::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetCommandLineOptionValue
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_GetCommandLineOptionValue final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetCommandLineOptionValue) == 0x000008, "Wrong alignment on EndSystemAPI_GetCommandLineOptionValue");
static_assert(sizeof(EndSystemAPI_GetCommandLineOptionValue) == 0x000020, "Wrong size on EndSystemAPI_GetCommandLineOptionValue");
static_assert(offsetof(EndSystemAPI_GetCommandLineOptionValue, Option) == 0x000000, "Member 'EndSystemAPI_GetCommandLineOptionValue::Option' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_GetCommandLineOptionValue, ReturnValue) == 0x000010, "Member 'EndSystemAPI_GetCommandLineOptionValue::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetCurrentLocation_End2
// 0x0008 (0x0008 - 0x0000)
struct EndSystemAPI_GetCurrentLocation_End2 final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetCurrentLocation_End2) == 0x000004, "Wrong alignment on EndSystemAPI_GetCurrentLocation_End2");
static_assert(sizeof(EndSystemAPI_GetCurrentLocation_End2) == 0x000008, "Wrong size on EndSystemAPI_GetCurrentLocation_End2");
static_assert(offsetof(EndSystemAPI_GetCurrentLocation_End2, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetCurrentLocation_End2::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetCurrentLocationNumber_End2
// 0x0004 (0x0004 - 0x0000)
struct EndSystemAPI_GetCurrentLocationNumber_End2 final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetCurrentLocationNumber_End2) == 0x000004, "Wrong alignment on EndSystemAPI_GetCurrentLocationNumber_End2");
static_assert(sizeof(EndSystemAPI_GetCurrentLocationNumber_End2) == 0x000004, "Wrong size on EndSystemAPI_GetCurrentLocationNumber_End2");
static_assert(offsetof(EndSystemAPI_GetCurrentLocationNumber_End2, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetCurrentLocationNumber_End2::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsEndGameMode
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsEndGameMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsEndGameMode) == 0x000001, "Wrong alignment on EndSystemAPI_IsEndGameMode");
static_assert(sizeof(EndSystemAPI_IsEndGameMode) == 0x000001, "Wrong size on EndSystemAPI_IsEndGameMode");
static_assert(offsetof(EndSystemAPI_IsEndGameMode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsEndGameMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsExpansion2Mode
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsExpansion2Mode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsExpansion2Mode) == 0x000001, "Wrong alignment on EndSystemAPI_IsExpansion2Mode");
static_assert(sizeof(EndSystemAPI_IsExpansion2Mode) == 0x000001, "Wrong size on EndSystemAPI_IsExpansion2Mode");
static_assert(offsetof(EndSystemAPI_IsExpansion2Mode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsExpansion2Mode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsExpansion3Mode
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsExpansion3Mode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsExpansion3Mode) == 0x000001, "Wrong alignment on EndSystemAPI_IsExpansion3Mode");
static_assert(sizeof(EndSystemAPI_IsExpansion3Mode) == 0x000001, "Wrong size on EndSystemAPI_IsExpansion3Mode");
static_assert(offsetof(EndSystemAPI_IsExpansion3Mode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsExpansion3Mode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInEastLocation_End2
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsInEastLocation_End2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsInEastLocation_End2) == 0x000001, "Wrong alignment on EndSystemAPI_IsInEastLocation_End2");
static_assert(sizeof(EndSystemAPI_IsInEastLocation_End2) == 0x000001, "Wrong size on EndSystemAPI_IsInEastLocation_End2");
static_assert(offsetof(EndSystemAPI_IsInEastLocation_End2, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsInEastLocation_End2::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInNorthLocation_End2
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsInNorthLocation_End2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsInNorthLocation_End2) == 0x000001, "Wrong alignment on EndSystemAPI_IsInNorthLocation_End2");
static_assert(sizeof(EndSystemAPI_IsInNorthLocation_End2) == 0x000001, "Wrong size on EndSystemAPI_IsInNorthLocation_End2");
static_assert(offsetof(EndSystemAPI_IsInNorthLocation_End2, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsInNorthLocation_End2::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInOceanLocation_End2
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsInOceanLocation_End2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsInOceanLocation_End2) == 0x000001, "Wrong alignment on EndSystemAPI_IsInOceanLocation_End2");
static_assert(sizeof(EndSystemAPI_IsInOceanLocation_End2) == 0x000001, "Wrong size on EndSystemAPI_IsInOceanLocation_End2");
static_assert(offsetof(EndSystemAPI_IsInOceanLocation_End2, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsInOceanLocation_End2::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInputKeyDown
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_IsInputKeyDown final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_IsInputKeyDown) == 0x000008, "Wrong alignment on EndSystemAPI_IsInputKeyDown");
static_assert(sizeof(EndSystemAPI_IsInputKeyDown) == 0x000020, "Wrong size on EndSystemAPI_IsInputKeyDown");
static_assert(offsetof(EndSystemAPI_IsInputKeyDown, Key) == 0x000000, "Member 'EndSystemAPI_IsInputKeyDown::Key' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_IsInputKeyDown, ReturnValue) == 0x000018, "Member 'EndSystemAPI_IsInputKeyDown::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInputKeyPressed
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_IsInputKeyPressed final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_IsInputKeyPressed) == 0x000008, "Wrong alignment on EndSystemAPI_IsInputKeyPressed");
static_assert(sizeof(EndSystemAPI_IsInputKeyPressed) == 0x000020, "Wrong size on EndSystemAPI_IsInputKeyPressed");
static_assert(offsetof(EndSystemAPI_IsInputKeyPressed, Key) == 0x000000, "Member 'EndSystemAPI_IsInputKeyPressed::Key' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_IsInputKeyPressed, ReturnValue) == 0x000018, "Member 'EndSystemAPI_IsInputKeyPressed::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInputKeyReleased
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_IsInputKeyReleased final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_IsInputKeyReleased) == 0x000008, "Wrong alignment on EndSystemAPI_IsInputKeyReleased");
static_assert(sizeof(EndSystemAPI_IsInputKeyReleased) == 0x000020, "Wrong size on EndSystemAPI_IsInputKeyReleased");
static_assert(offsetof(EndSystemAPI_IsInputKeyReleased, Key) == 0x000000, "Member 'EndSystemAPI_IsInputKeyReleased::Key' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_IsInputKeyReleased, ReturnValue) == 0x000018, "Member 'EndSystemAPI_IsInputKeyReleased::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInputKeyRepeat
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_IsInputKeyRepeat final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_IsInputKeyRepeat) == 0x000008, "Wrong alignment on EndSystemAPI_IsInputKeyRepeat");
static_assert(sizeof(EndSystemAPI_IsInputKeyRepeat) == 0x000020, "Wrong size on EndSystemAPI_IsInputKeyRepeat");
static_assert(offsetof(EndSystemAPI_IsInputKeyRepeat, Key) == 0x000000, "Member 'EndSystemAPI_IsInputKeyRepeat::Key' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_IsInputKeyRepeat, ReturnValue) == 0x000018, "Member 'EndSystemAPI_IsInputKeyRepeat::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInWestLocation_End2
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsInWestLocation_End2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsInWestLocation_End2) == 0x000001, "Wrong alignment on EndSystemAPI_IsInWestLocation_End2");
static_assert(sizeof(EndSystemAPI_IsInWestLocation_End2) == 0x000001, "Wrong size on EndSystemAPI_IsInWestLocation_End2");
static_assert(offsetof(EndSystemAPI_IsInWestLocation_End2, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsInWestLocation_End2::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsMaster
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsMaster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsMaster) == 0x000001, "Wrong alignment on EndSystemAPI_IsMaster");
static_assert(sizeof(EndSystemAPI_IsMaster) == 0x000001, "Wrong size on EndSystemAPI_IsMaster");
static_assert(offsetof(EndSystemAPI_IsMaster, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsMaster::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsMediaDemoMode
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsMediaDemoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsMediaDemoMode) == 0x000001, "Wrong alignment on EndSystemAPI_IsMediaDemoMode");
static_assert(sizeof(EndSystemAPI_IsMediaDemoMode) == 0x000001, "Wrong size on EndSystemAPI_IsMediaDemoMode");
static_assert(offsetof(EndSystemAPI_IsMediaDemoMode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsMediaDemoMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsPlayableDemoMode
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsPlayableDemoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsPlayableDemoMode) == 0x000001, "Wrong alignment on EndSystemAPI_IsPlayableDemoMode");
static_assert(sizeof(EndSystemAPI_IsPlayableDemoMode) == 0x000001, "Wrong size on EndSystemAPI_IsPlayableDemoMode");
static_assert(offsetof(EndSystemAPI_IsPlayableDemoMode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsPlayableDemoMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsPreviewEventMode
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsPreviewEventMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsPreviewEventMode) == 0x000001, "Wrong alignment on EndSystemAPI_IsPreviewEventMode");
static_assert(sizeof(EndSystemAPI_IsPreviewEventMode) == 0x000001, "Wrong size on EndSystemAPI_IsPreviewEventMode");
static_assert(offsetof(EndSystemAPI_IsPreviewEventMode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsPreviewEventMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsTrialMode
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsTrialMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsTrialMode) == 0x000001, "Wrong alignment on EndSystemAPI_IsTrialMode");
static_assert(sizeof(EndSystemAPI_IsTrialMode) == 0x000001, "Wrong size on EndSystemAPI_IsTrialMode");
static_assert(offsetof(EndSystemAPI_IsTrialMode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsTrialMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndTalkAPI.DisableBattleTalkEventBox
// 0x0008 (0x0008 - 0x0000)
struct EndTalkAPI_DisableBattleTalkEventBox final
{
public:
	class FName                                   TriggerBoxName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTalkAPI_DisableBattleTalkEventBox) == 0x000004, "Wrong alignment on EndTalkAPI_DisableBattleTalkEventBox");
static_assert(sizeof(EndTalkAPI_DisableBattleTalkEventBox) == 0x000008, "Wrong size on EndTalkAPI_DisableBattleTalkEventBox");
static_assert(offsetof(EndTalkAPI_DisableBattleTalkEventBox, TriggerBoxName) == 0x000000, "Member 'EndTalkAPI_DisableBattleTalkEventBox::TriggerBoxName' has a wrong offset!");

// Function EndGame.EndTalkAPI.EnableBattleTalkEventBox
// 0x0008 (0x0008 - 0x0000)
struct EndTalkAPI_EnableBattleTalkEventBox final
{
public:
	class FName                                   TriggerBoxName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTalkAPI_EnableBattleTalkEventBox) == 0x000004, "Wrong alignment on EndTalkAPI_EnableBattleTalkEventBox");
static_assert(sizeof(EndTalkAPI_EnableBattleTalkEventBox) == 0x000008, "Wrong size on EndTalkAPI_EnableBattleTalkEventBox");
static_assert(offsetof(EndTalkAPI_EnableBattleTalkEventBox, TriggerBoxName) == 0x000000, "Member 'EndTalkAPI_EnableBattleTalkEventBox::TriggerBoxName' has a wrong offset!");

// Function EndGame.EndTalkAPI.ExportPVSaveData
// 0x0001 (0x0001 - 0x0000)
struct EndTalkAPI_ExportPVSaveData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTalkAPI_ExportPVSaveData) == 0x000001, "Wrong alignment on EndTalkAPI_ExportPVSaveData");
static_assert(sizeof(EndTalkAPI_ExportPVSaveData) == 0x000001, "Wrong size on EndTalkAPI_ExportPVSaveData");
static_assert(offsetof(EndTalkAPI_ExportPVSaveData, ReturnValue) == 0x000000, "Member 'EndTalkAPI_ExportPVSaveData::ReturnValue' has a wrong offset!");

// Function EndGame.EndTalkAPI.GetBattleTalkableRandomMemberName
// 0x0020 (0x0020 - 0x0000)
struct EndTalkAPI_GetBattleTalkableRandomMemberName final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ignoreActorNameList;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTalkAPI_GetBattleTalkableRandomMemberName) == 0x000008, "Wrong alignment on EndTalkAPI_GetBattleTalkableRandomMemberName");
static_assert(sizeof(EndTalkAPI_GetBattleTalkableRandomMemberName) == 0x000020, "Wrong size on EndTalkAPI_GetBattleTalkableRandomMemberName");
static_assert(offsetof(EndTalkAPI_GetBattleTalkableRandomMemberName, ActorName) == 0x000000, "Member 'EndTalkAPI_GetBattleTalkableRandomMemberName::ActorName' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_GetBattleTalkableRandomMemberName, ignoreActorNameList) == 0x000008, "Member 'EndTalkAPI_GetBattleTalkableRandomMemberName::ignoreActorNameList' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_GetBattleTalkableRandomMemberName, ReturnValue) == 0x000018, "Member 'EndTalkAPI_GetBattleTalkableRandomMemberName::ReturnValue' has a wrong offset!");

// Function EndGame.EndTalkAPI.IsBattleTalkRunning
// 0x000C (0x000C - 0x0000)
struct EndTalkAPI_IsBattleTalkRunning final
{
public:
	class FName                                   PlannerEventId;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTalkAPI_IsBattleTalkRunning) == 0x000004, "Wrong alignment on EndTalkAPI_IsBattleTalkRunning");
static_assert(sizeof(EndTalkAPI_IsBattleTalkRunning) == 0x00000C, "Wrong size on EndTalkAPI_IsBattleTalkRunning");
static_assert(offsetof(EndTalkAPI_IsBattleTalkRunning, PlannerEventId) == 0x000000, "Member 'EndTalkAPI_IsBattleTalkRunning::PlannerEventId' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_IsBattleTalkRunning, ReturnValue) == 0x000008, "Member 'EndTalkAPI_IsBattleTalkRunning::ReturnValue' has a wrong offset!");

// Function EndGame.EndTalkAPI.IsPlannerEventRunning
// 0x000C (0x000C - 0x0000)
struct EndTalkAPI_IsPlannerEventRunning final
{
public:
	class FName                                   PlannerEventId;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTalkAPI_IsPlannerEventRunning) == 0x000004, "Wrong alignment on EndTalkAPI_IsPlannerEventRunning");
static_assert(sizeof(EndTalkAPI_IsPlannerEventRunning) == 0x00000C, "Wrong size on EndTalkAPI_IsPlannerEventRunning");
static_assert(offsetof(EndTalkAPI_IsPlannerEventRunning, PlannerEventId) == 0x000000, "Member 'EndTalkAPI_IsPlannerEventRunning::PlannerEventId' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_IsPlannerEventRunning, ReturnValue) == 0x000008, "Member 'EndTalkAPI_IsPlannerEventRunning::ReturnValue' has a wrong offset!");

// Function EndGame.EndTalkAPI.PlayBattleTalkStateByBP
// 0x000C (0x000C - 0x0000)
struct EndTalkAPI_PlayBattleTalkStateByBP final
{
public:
	class FName                                   TalkStateID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForced;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableToStable;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTalkAPI_PlayBattleTalkStateByBP) == 0x000004, "Wrong alignment on EndTalkAPI_PlayBattleTalkStateByBP");
static_assert(sizeof(EndTalkAPI_PlayBattleTalkStateByBP) == 0x00000C, "Wrong size on EndTalkAPI_PlayBattleTalkStateByBP");
static_assert(offsetof(EndTalkAPI_PlayBattleTalkStateByBP, TalkStateID) == 0x000000, "Member 'EndTalkAPI_PlayBattleTalkStateByBP::TalkStateID' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_PlayBattleTalkStateByBP, bForced) == 0x000008, "Member 'EndTalkAPI_PlayBattleTalkStateByBP::bForced' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_PlayBattleTalkStateByBP, bEnableToStable) == 0x000009, "Member 'EndTalkAPI_PlayBattleTalkStateByBP::bEnableToStable' has a wrong offset!");

// Function EndGame.EndTalkAPI.RequestBattleTalk
// 0x001C (0x001C - 0x0000)
struct EndTalkAPI_RequestBattleTalk final
{
public:
	EndBattleTalkPriority                         Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlannerEventId;                                    // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EndTalkRepeatType                             PlayType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval_seconds;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndWithBattle;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStack;                                          // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStackWithouDuplicatedTalker;                    // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndWithLocation;                                   // 0x0017(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipPrevTalk;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreventSkipTalk;                                   // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipOnBadStatus;                                   // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTalkAPI_RequestBattleTalk) == 0x000004, "Wrong alignment on EndTalkAPI_RequestBattleTalk");
static_assert(sizeof(EndTalkAPI_RequestBattleTalk) == 0x00001C, "Wrong size on EndTalkAPI_RequestBattleTalk");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, Priority) == 0x000000, "Member 'EndTalkAPI_RequestBattleTalk::Priority' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, PlannerEventId) == 0x000004, "Member 'EndTalkAPI_RequestBattleTalk::PlannerEventId' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, PlayType) == 0x00000C, "Member 'EndTalkAPI_RequestBattleTalk::PlayType' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, Interval_seconds) == 0x000010, "Member 'EndTalkAPI_RequestBattleTalk::Interval_seconds' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, EndWithBattle) == 0x000014, "Member 'EndTalkAPI_RequestBattleTalk::EndWithBattle' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, UseStack) == 0x000015, "Member 'EndTalkAPI_RequestBattleTalk::UseStack' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, UseStackWithouDuplicatedTalker) == 0x000016, "Member 'EndTalkAPI_RequestBattleTalk::UseStackWithouDuplicatedTalker' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, EndWithLocation) == 0x000017, "Member 'EndTalkAPI_RequestBattleTalk::EndWithLocation' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, SkipPrevTalk) == 0x000018, "Member 'EndTalkAPI_RequestBattleTalk::SkipPrevTalk' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, PreventSkipTalk) == 0x000019, "Member 'EndTalkAPI_RequestBattleTalk::PreventSkipTalk' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_RequestBattleTalk, SkipOnBadStatus) == 0x00001A, "Member 'EndTalkAPI_RequestBattleTalk::SkipOnBadStatus' has a wrong offset!");

// Function EndGame.EndTalkAPI.StartBattleTalk
// 0x0018 (0x0018 - 0x0000)
struct EndTalkAPI_StartBattleTalk final
{
public:
	EndBattleTalkPriority                         Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlannerEventId;                                    // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EndTalkRepeatType                             PlayType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval_seconds;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipOnBadStatus;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTalkAPI_StartBattleTalk) == 0x000004, "Wrong alignment on EndTalkAPI_StartBattleTalk");
static_assert(sizeof(EndTalkAPI_StartBattleTalk) == 0x000018, "Wrong size on EndTalkAPI_StartBattleTalk");
static_assert(offsetof(EndTalkAPI_StartBattleTalk, Priority) == 0x000000, "Member 'EndTalkAPI_StartBattleTalk::Priority' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_StartBattleTalk, PlannerEventId) == 0x000004, "Member 'EndTalkAPI_StartBattleTalk::PlannerEventId' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_StartBattleTalk, PlayType) == 0x00000C, "Member 'EndTalkAPI_StartBattleTalk::PlayType' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_StartBattleTalk, Interval_seconds) == 0x000010, "Member 'EndTalkAPI_StartBattleTalk::Interval_seconds' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_StartBattleTalk, SkipOnBadStatus) == 0x000014, "Member 'EndTalkAPI_StartBattleTalk::SkipOnBadStatus' has a wrong offset!");

// Function EndGame.EndTalkAPI.StartPlannerEvent
// 0x0008 (0x0008 - 0x0000)
struct EndTalkAPI_StartPlannerEvent final
{
public:
	class FName                                   PlannerEventId;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTalkAPI_StartPlannerEvent) == 0x000004, "Wrong alignment on EndTalkAPI_StartPlannerEvent");
static_assert(sizeof(EndTalkAPI_StartPlannerEvent) == 0x000008, "Wrong size on EndTalkAPI_StartPlannerEvent");
static_assert(offsetof(EndTalkAPI_StartPlannerEvent, PlannerEventId) == 0x000000, "Member 'EndTalkAPI_StartPlannerEvent::PlannerEventId' has a wrong offset!");

// Function EndGame.EndTextBlock.SetAllowMacro
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetAllowMacro final
{
public:
	bool                                          bInAllowMacro;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetAllowMacro) == 0x000001, "Wrong alignment on EndTextBlock_SetAllowMacro");
static_assert(sizeof(EndTextBlock_SetAllowMacro) == 0x000001, "Wrong size on EndTextBlock_SetAllowMacro");
static_assert(offsetof(EndTextBlock_SetAllowMacro, bInAllowMacro) == 0x000000, "Member 'EndTextBlock_SetAllowMacro::bInAllowMacro' has a wrong offset!");

// Function EndGame.EndTextBlock.SetAutoShrinkText
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetAutoShrinkText final
{
public:
	bool                                          bInAutoShrinkText;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetAutoShrinkText) == 0x000001, "Wrong alignment on EndTextBlock_SetAutoShrinkText");
static_assert(sizeof(EndTextBlock_SetAutoShrinkText) == 0x000001, "Wrong size on EndTextBlock_SetAutoShrinkText");
static_assert(offsetof(EndTextBlock_SetAutoShrinkText, bInAutoShrinkText) == 0x000000, "Member 'EndTextBlock_SetAutoShrinkText::bInAutoShrinkText' has a wrong offset!");

// Function EndGame.EndTextBlock.SetAutoUpdateButtons
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetAutoUpdateButtons final
{
public:
	bool                                          bInAutoUpdateButtons;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetAutoUpdateButtons) == 0x000001, "Wrong alignment on EndTextBlock_SetAutoUpdateButtons");
static_assert(sizeof(EndTextBlock_SetAutoUpdateButtons) == 0x000001, "Wrong size on EndTextBlock_SetAutoUpdateButtons");
static_assert(offsetof(EndTextBlock_SetAutoUpdateButtons, bInAutoUpdateButtons) == 0x000000, "Member 'EndTextBlock_SetAutoUpdateButtons::bInAutoUpdateButtons' has a wrong offset!");

// Function EndGame.EndTextBlock.SetAutoWrapText
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetAutoWrapText final
{
public:
	bool                                          bInAutoWrapText;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetAutoWrapText) == 0x000001, "Wrong alignment on EndTextBlock_SetAutoWrapText");
static_assert(sizeof(EndTextBlock_SetAutoWrapText) == 0x000001, "Wrong size on EndTextBlock_SetAutoWrapText");
static_assert(offsetof(EndTextBlock_SetAutoWrapText, bInAutoWrapText) == 0x000000, "Member 'EndTextBlock_SetAutoWrapText::bInAutoWrapText' has a wrong offset!");

// Function EndGame.EndTextBlock.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetBlendMode) == 0x000001, "Wrong alignment on EndTextBlock_SetBlendMode");
static_assert(sizeof(EndTextBlock_SetBlendMode) == 0x000001, "Wrong size on EndTextBlock_SetBlendMode");
static_assert(offsetof(EndTextBlock_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndTextBlock_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndTextBlock.SetBottomColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct EndTextBlock_SetBottomColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetBottomColorAndOpacity) == 0x000008, "Wrong alignment on EndTextBlock_SetBottomColorAndOpacity");
static_assert(sizeof(EndTextBlock_SetBottomColorAndOpacity) == 0x000028, "Wrong size on EndTextBlock_SetBottomColorAndOpacity");
static_assert(offsetof(EndTextBlock_SetBottomColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndTextBlock_SetBottomColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetBottomOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndTextBlock_SetBottomOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetBottomOpacity) == 0x000004, "Wrong alignment on EndTextBlock_SetBottomOpacity");
static_assert(sizeof(EndTextBlock_SetBottomOpacity) == 0x000004, "Wrong size on EndTextBlock_SetBottomOpacity");
static_assert(offsetof(EndTextBlock_SetBottomOpacity, InOpacity) == 0x000000, "Member 'EndTextBlock_SetBottomOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetButtonLayoutMode
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetButtonLayoutMode final
{
public:
	EEndMenuTextButtonLayoutMode                  InButtonLayoutMode;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetButtonLayoutMode) == 0x000001, "Wrong alignment on EndTextBlock_SetButtonLayoutMode");
static_assert(sizeof(EndTextBlock_SetButtonLayoutMode) == 0x000001, "Wrong size on EndTextBlock_SetButtonLayoutMode");
static_assert(offsetof(EndTextBlock_SetButtonLayoutMode, InButtonLayoutMode) == 0x000000, "Member 'EndTextBlock_SetButtonLayoutMode::InButtonLayoutMode' has a wrong offset!");

// Function EndGame.EndTextBlock.SetColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct EndTextBlock_SetColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetColorAndOpacity) == 0x000008, "Wrong alignment on EndTextBlock_SetColorAndOpacity");
static_assert(sizeof(EndTextBlock_SetColorAndOpacity) == 0x000028, "Wrong size on EndTextBlock_SetColorAndOpacity");
static_assert(offsetof(EndTextBlock_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndTextBlock_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetColoredButtons
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetColoredButtons final
{
public:
	bool                                          bInColoredButtons;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetColoredButtons) == 0x000001, "Wrong alignment on EndTextBlock_SetColoredButtons");
static_assert(sizeof(EndTextBlock_SetColoredButtons) == 0x000001, "Wrong size on EndTextBlock_SetColoredButtons");
static_assert(offsetof(EndTextBlock_SetColoredButtons, bInColoredButtons) == 0x000000, "Member 'EndTextBlock_SetColoredButtons::bInColoredButtons' has a wrong offset!");

// Function EndGame.EndTextBlock.SetFont
// 0x0008 (0x0008 - 0x0000)
struct EndTextBlock_SetFont final
{
public:
	class UEndFont*                               InFont;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetFont) == 0x000008, "Wrong alignment on EndTextBlock_SetFont");
static_assert(sizeof(EndTextBlock_SetFont) == 0x000008, "Wrong size on EndTextBlock_SetFont");
static_assert(offsetof(EndTextBlock_SetFont, InFont) == 0x000000, "Member 'EndTextBlock_SetFont::InFont' has a wrong offset!");

// Function EndGame.EndTextBlock.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetJustification final
{
public:
	ETextJustify                                  InJustification;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetJustification) == 0x000001, "Wrong alignment on EndTextBlock_SetJustification");
static_assert(sizeof(EndTextBlock_SetJustification) == 0x000001, "Wrong size on EndTextBlock_SetJustification");
static_assert(offsetof(EndTextBlock_SetJustification, InJustification) == 0x000000, "Member 'EndTextBlock_SetJustification::InJustification' has a wrong offset!");

// Function EndGame.EndTextBlock.SetLeftAlignedCenter
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetLeftAlignedCenter final
{
public:
	bool                                          bInLeftAlignedCenter;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetLeftAlignedCenter) == 0x000001, "Wrong alignment on EndTextBlock_SetLeftAlignedCenter");
static_assert(sizeof(EndTextBlock_SetLeftAlignedCenter) == 0x000001, "Wrong size on EndTextBlock_SetLeftAlignedCenter");
static_assert(offsetof(EndTextBlock_SetLeftAlignedCenter, bInLeftAlignedCenter) == 0x000000, "Member 'EndTextBlock_SetLeftAlignedCenter::bInLeftAlignedCenter' has a wrong offset!");

// Function EndGame.EndTextBlock.SetMinDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct EndTextBlock_SetMinDesiredWidth final
{
public:
	float                                         InMinDesiredWidth;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetMinDesiredWidth) == 0x000004, "Wrong alignment on EndTextBlock_SetMinDesiredWidth");
static_assert(sizeof(EndTextBlock_SetMinDesiredWidth) == 0x000004, "Wrong size on EndTextBlock_SetMinDesiredWidth");
static_assert(offsetof(EndTextBlock_SetMinDesiredWidth, InMinDesiredWidth) == 0x000000, "Member 'EndTextBlock_SetMinDesiredWidth::InMinDesiredWidth' has a wrong offset!");

// Function EndGame.EndTextBlock.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndTextBlock_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetOpacity) == 0x000004, "Wrong alignment on EndTextBlock_SetOpacity");
static_assert(sizeof(EndTextBlock_SetOpacity) == 0x000004, "Wrong size on EndTextBlock_SetOpacity");
static_assert(offsetof(EndTextBlock_SetOpacity, InOpacity) == 0x000000, "Member 'EndTextBlock_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetOutline
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetOutline final
{
public:
	bool                                          bInOutline;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetOutline) == 0x000001, "Wrong alignment on EndTextBlock_SetOutline");
static_assert(sizeof(EndTextBlock_SetOutline) == 0x000001, "Wrong size on EndTextBlock_SetOutline");
static_assert(offsetof(EndTextBlock_SetOutline, bInOutline) == 0x000000, "Member 'EndTextBlock_SetOutline::bInOutline' has a wrong offset!");

// Function EndGame.EndTextBlock.SetOutlineColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndTextBlock_SetOutlineColorAndOpacity final
{
public:
	struct FLinearColor                           InOutlineColorAndOpacity;                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetOutlineColorAndOpacity) == 0x000004, "Wrong alignment on EndTextBlock_SetOutlineColorAndOpacity");
static_assert(sizeof(EndTextBlock_SetOutlineColorAndOpacity) == 0x000010, "Wrong size on EndTextBlock_SetOutlineColorAndOpacity");
static_assert(offsetof(EndTextBlock_SetOutlineColorAndOpacity, InOutlineColorAndOpacity) == 0x000000, "Member 'EndTextBlock_SetOutlineColorAndOpacity::InOutlineColorAndOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetShadowColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndTextBlock_SetShadowColorAndOpacity final
{
public:
	struct FLinearColor                           InShadowColorAndOpacity;                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetShadowColorAndOpacity) == 0x000004, "Wrong alignment on EndTextBlock_SetShadowColorAndOpacity");
static_assert(sizeof(EndTextBlock_SetShadowColorAndOpacity) == 0x000010, "Wrong size on EndTextBlock_SetShadowColorAndOpacity");
static_assert(offsetof(EndTextBlock_SetShadowColorAndOpacity, InShadowColorAndOpacity) == 0x000000, "Member 'EndTextBlock_SetShadowColorAndOpacity::InShadowColorAndOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct EndTextBlock_SetShadowOffset final
{
public:
	struct FVector2D                              InShadowOffset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetShadowOffset) == 0x000004, "Wrong alignment on EndTextBlock_SetShadowOffset");
static_assert(sizeof(EndTextBlock_SetShadowOffset) == 0x000008, "Wrong size on EndTextBlock_SetShadowOffset");
static_assert(offsetof(EndTextBlock_SetShadowOffset, InShadowOffset) == 0x000000, "Member 'EndTextBlock_SetShadowOffset::InShadowOffset' has a wrong offset!");

// Function EndGame.EndTextBlock.SetText
// 0x0010 (0x0010 - 0x0000)
struct EndTextBlock_SetText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetText) == 0x000008, "Wrong alignment on EndTextBlock_SetText");
static_assert(sizeof(EndTextBlock_SetText) == 0x000010, "Wrong size on EndTextBlock_SetText");
static_assert(offsetof(EndTextBlock_SetText, InText) == 0x000000, "Member 'EndTextBlock_SetText::InText' has a wrong offset!");

// Function EndGame.EndTextBlock.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct EndTextBlock_SetWrapTextAt final
{
public:
	float                                         InWrapTextAt;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetWrapTextAt) == 0x000004, "Wrong alignment on EndTextBlock_SetWrapTextAt");
static_assert(sizeof(EndTextBlock_SetWrapTextAt) == 0x000004, "Wrong size on EndTextBlock_SetWrapTextAt");
static_assert(offsetof(EndTextBlock_SetWrapTextAt, InWrapTextAt) == 0x000000, "Member 'EndTextBlock_SetWrapTextAt::InWrapTextAt' has a wrong offset!");

// Function EndGame.EndTextBlock.GetText
// 0x0010 (0x0010 - 0x0000)
struct EndTextBlock_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_GetText) == 0x000008, "Wrong alignment on EndTextBlock_GetText");
static_assert(sizeof(EndTextBlock_GetText) == 0x000010, "Wrong size on EndTextBlock_GetText");
static_assert(offsetof(EndTextBlock_GetText, ReturnValue) == 0x000000, "Member 'EndTextBlock_GetText::ReturnValue' has a wrong offset!");

// Function EndGame.EndTiledImage.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndTiledImage_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndTiledImage_GetDynamicMaterial");
static_assert(sizeof(EndTiledImage_GetDynamicMaterial) == 0x000008, "Wrong size on EndTiledImage_GetDynamicMaterial");
static_assert(offsetof(EndTiledImage_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndTiledImage_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndTiledImage_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetBlendMode) == 0x000001, "Wrong alignment on EndTiledImage_SetBlendMode");
static_assert(sizeof(EndTiledImage_SetBlendMode) == 0x000001, "Wrong size on EndTiledImage_SetBlendMode");
static_assert(offsetof(EndTiledImage_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndTiledImage_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct EndTiledImage_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetBrush) == 0x000008, "Wrong alignment on EndTiledImage_SetBrush");
static_assert(sizeof(EndTiledImage_SetBrush) == 0x000088, "Wrong size on EndTiledImage_SetBrush");
static_assert(offsetof(EndTiledImage_SetBrush, InBrush) == 0x000000, "Member 'EndTiledImage_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndTiledImage_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndTiledImage_SetBrushFromAsset");
static_assert(sizeof(EndTiledImage_SetBrushFromAsset) == 0x000008, "Wrong size on EndTiledImage_SetBrushFromAsset");
static_assert(offsetof(EndTiledImage_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndTiledImage_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndTiledImage_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndTiledImage_SetBrushFromMaterial");
static_assert(sizeof(EndTiledImage_SetBrushFromMaterial) == 0x000008, "Wrong size on EndTiledImage_SetBrushFromMaterial");
static_assert(offsetof(EndTiledImage_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndTiledImage_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct EndTiledImage_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTiledImage_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndTiledImage_SetBrushFromTexture");
static_assert(sizeof(EndTiledImage_SetBrushFromTexture) == 0x000010, "Wrong size on EndTiledImage_SetBrushFromTexture");
static_assert(offsetof(EndTiledImage_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndTiledImage_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(EndTiledImage_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'EndTiledImage_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct EndTiledImage_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTiledImage_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on EndTiledImage_SetBrushFromTextureDynamic");
static_assert(sizeof(EndTiledImage_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on EndTiledImage_SetBrushFromTextureDynamic");
static_assert(offsetof(EndTiledImage_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'EndTiledImage_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(EndTiledImage_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'EndTiledImage_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function EndGame.EndTiledImage.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndTiledImage_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndTiledImage_SetColorAndOpacity");
static_assert(sizeof(EndTiledImage_SetColorAndOpacity) == 0x000010, "Wrong size on EndTiledImage_SetColorAndOpacity");
static_assert(offsetof(EndTiledImage_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndTiledImage_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndTiledImage.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndTiledImage_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetOpacity) == 0x000004, "Wrong alignment on EndTiledImage_SetOpacity");
static_assert(sizeof(EndTiledImage_SetOpacity) == 0x000004, "Wrong size on EndTiledImage_SetOpacity");
static_assert(offsetof(EndTiledImage_SetOpacity, InOpacity) == 0x000000, "Member 'EndTiledImage_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndTrophyListWindow.OnTrophyListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndTrophyListWindow_OnTrophyListSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTrophyListWindow_OnTrophyListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndTrophyListWindow_OnTrophyListSelectedIndexChanged");
static_assert(sizeof(EndTrophyListWindow_OnTrophyListSelectedIndexChanged) == 0x000004, "Wrong size on EndTrophyListWindow_OnTrophyListSelectedIndexChanged");
static_assert(offsetof(EndTrophyListWindow_OnTrophyListSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndTrophyListWindow_OnTrophyListSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndTrophyListWindow.OnTrophyListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndTrophyListWindow_OnTrophyListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTrophyListWindow_OnTrophyListSetupItem) == 0x000008, "Wrong alignment on EndTrophyListWindow_OnTrophyListSetupItem");
static_assert(sizeof(EndTrophyListWindow_OnTrophyListSetupItem) == 0x000010, "Wrong size on EndTrophyListWindow_OnTrophyListSetupItem");
static_assert(offsetof(EndTrophyListWindow_OnTrophyListSetupItem, ItemWidget) == 0x000000, "Member 'EndTrophyListWindow_OnTrophyListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndTrophyListWindow_OnTrophyListSetupItem, ItemIndex) == 0x000008, "Member 'EndTrophyListWindow_OnTrophyListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWeaponUpgradeCoreRingWindow.OnCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponUpgradeCoreRingWindow_OnCellPressed final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponUpgradeCoreRingWindow_OnCellPressed) == 0x000004, "Wrong alignment on EndWeaponUpgradeCoreRingWindow_OnCellPressed");
static_assert(sizeof(EndWeaponUpgradeCoreRingWindow_OnCellPressed) == 0x000004, "Wrong size on EndWeaponUpgradeCoreRingWindow_OnCellPressed");
static_assert(offsetof(EndWeaponUpgradeCoreRingWindow_OnCellPressed, CellIndex) == 0x000000, "Member 'EndWeaponUpgradeCoreRingWindow_OnCellPressed::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponUpgradeCoreRingWindow.OnCellSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndWeaponUpgradeCoreRingWindow_OnCellSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWeaponUpgradeCoreRingWindow_OnCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndWeaponUpgradeCoreRingWindow_OnCellSelectedIndexChanged");
static_assert(sizeof(EndWeaponUpgradeCoreRingWindow_OnCellSelectedIndexChanged) == 0x000004, "Wrong size on EndWeaponUpgradeCoreRingWindow_OnCellSelectedIndexChanged");
static_assert(offsetof(EndWeaponUpgradeCoreRingWindow_OnCellSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndWeaponUpgradeCoreRingWindow_OnCellSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndWeaponUpgradeCoreRingWindow.OnCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndWeaponUpgradeCoreRingWindow_OnCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWeaponUpgradeCoreRingWindow_OnCellSetup) == 0x000008, "Wrong alignment on EndWeaponUpgradeCoreRingWindow_OnCellSetup");
static_assert(sizeof(EndWeaponUpgradeCoreRingWindow_OnCellSetup) == 0x000010, "Wrong size on EndWeaponUpgradeCoreRingWindow_OnCellSetup");
static_assert(offsetof(EndWeaponUpgradeCoreRingWindow_OnCellSetup, ItemWidget) == 0x000000, "Member 'EndWeaponUpgradeCoreRingWindow_OnCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWeaponUpgradeCoreRingWindow_OnCellSetup, CellIndex) == 0x000008, "Member 'EndWeaponUpgradeCoreRingWindow_OnCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndWheeledVehicleAnimInstance.GetVehicle
// 0x0008 (0x0008 - 0x0000)
struct EndWheeledVehicleAnimInstance_GetVehicle final
{
public:
	class AEndWheeledVehicle*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWheeledVehicleAnimInstance_GetVehicle) == 0x000008, "Wrong alignment on EndWheeledVehicleAnimInstance_GetVehicle");
static_assert(sizeof(EndWheeledVehicleAnimInstance_GetVehicle) == 0x000008, "Wrong size on EndWheeledVehicleAnimInstance_GetVehicle");
static_assert(offsetof(EndWheeledVehicleAnimInstance_GetVehicle, ReturnValue) == 0x000000, "Member 'EndWheeledVehicleAnimInstance_GetVehicle::ReturnValue' has a wrong offset!");

// Function EndGame.EndWheeledVehicleMovementComponent.OnComponentHit
// 0x00B8 (0x00B8 - 0x0000)
struct EndWheeledVehicleMovementComponent_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWheeledVehicleMovementComponent_OnComponentHit) == 0x000008, "Wrong alignment on EndWheeledVehicleMovementComponent_OnComponentHit");
static_assert(sizeof(EndWheeledVehicleMovementComponent_OnComponentHit) == 0x0000B8, "Wrong size on EndWheeledVehicleMovementComponent_OnComponentHit");
static_assert(offsetof(EndWheeledVehicleMovementComponent_OnComponentHit, HitComponent) == 0x000000, "Member 'EndWheeledVehicleMovementComponent_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndWheeledVehicleMovementComponent_OnComponentHit, OtherActor) == 0x000008, "Member 'EndWheeledVehicleMovementComponent_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndWheeledVehicleMovementComponent_OnComponentHit, OtherComp) == 0x000010, "Member 'EndWheeledVehicleMovementComponent_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndWheeledVehicleMovementComponent_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndWheeledVehicleMovementComponent_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndWheeledVehicleMovementComponent_OnComponentHit, Hit) == 0x000024, "Member 'EndWheeledVehicleMovementComponent_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndWorldReportActor.OnMediaOpened
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportActor_OnMediaOpened final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWorldReportActor_OnMediaOpened) == 0x000008, "Wrong alignment on EndWorldReportActor_OnMediaOpened");
static_assert(sizeof(EndWorldReportActor_OnMediaOpened) == 0x000010, "Wrong size on EndWorldReportActor_OnMediaOpened");
static_assert(offsetof(EndWorldReportActor_OnMediaOpened, OpenedUrl) == 0x000000, "Member 'EndWorldReportActor_OnMediaOpened::OpenedUrl' has a wrong offset!");

// Function EndGame.EndWorldReportAreaPage.OnAreaReportListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportAreaPage_OnAreaReportListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportAreaPage_OnAreaReportListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportAreaPage_OnAreaReportListSetupItem");
static_assert(sizeof(EndWorldReportAreaPage_OnAreaReportListSetupItem) == 0x000010, "Wrong size on EndWorldReportAreaPage_OnAreaReportListSetupItem");
static_assert(offsetof(EndWorldReportAreaPage_OnAreaReportListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportAreaPage_OnAreaReportListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportAreaPage_OnAreaReportListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportAreaPage_OnAreaReportListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportAreaPage.OnBtnListSetupItemCorel
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportAreaPage_OnBtnListSetupItemCorel final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportAreaPage_OnBtnListSetupItemCorel) == 0x000008, "Wrong alignment on EndWorldReportAreaPage_OnBtnListSetupItemCorel");
static_assert(sizeof(EndWorldReportAreaPage_OnBtnListSetupItemCorel) == 0x000010, "Wrong size on EndWorldReportAreaPage_OnBtnListSetupItemCorel");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemCorel, ItemWidget) == 0x000000, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemCorel::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemCorel, ItemIndex) == 0x000008, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemCorel::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportAreaPage.OnBtnListSetupItemCosmo
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportAreaPage_OnBtnListSetupItemCosmo final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportAreaPage_OnBtnListSetupItemCosmo) == 0x000008, "Wrong alignment on EndWorldReportAreaPage_OnBtnListSetupItemCosmo");
static_assert(sizeof(EndWorldReportAreaPage_OnBtnListSetupItemCosmo) == 0x000010, "Wrong size on EndWorldReportAreaPage_OnBtnListSetupItemCosmo");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemCosmo, ItemWidget) == 0x000000, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemCosmo::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemCosmo, ItemIndex) == 0x000008, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemCosmo::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportAreaPage.OnBtnListSetupItemGlasslands
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportAreaPage_OnBtnListSetupItemGlasslands final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportAreaPage_OnBtnListSetupItemGlasslands) == 0x000008, "Wrong alignment on EndWorldReportAreaPage_OnBtnListSetupItemGlasslands");
static_assert(sizeof(EndWorldReportAreaPage_OnBtnListSetupItemGlasslands) == 0x000010, "Wrong size on EndWorldReportAreaPage_OnBtnListSetupItemGlasslands");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemGlasslands, ItemWidget) == 0x000000, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemGlasslands::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemGlasslands, ItemIndex) == 0x000008, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemGlasslands::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportAreaPage.OnBtnListSetupItemGongaga
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportAreaPage_OnBtnListSetupItemGongaga final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportAreaPage_OnBtnListSetupItemGongaga) == 0x000008, "Wrong alignment on EndWorldReportAreaPage_OnBtnListSetupItemGongaga");
static_assert(sizeof(EndWorldReportAreaPage_OnBtnListSetupItemGongaga) == 0x000010, "Wrong size on EndWorldReportAreaPage_OnBtnListSetupItemGongaga");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemGongaga, ItemWidget) == 0x000000, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemGongaga::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemGongaga, ItemIndex) == 0x000008, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemGongaga::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportAreaPage.OnBtnListSetupItemJunon
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportAreaPage_OnBtnListSetupItemJunon final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportAreaPage_OnBtnListSetupItemJunon) == 0x000008, "Wrong alignment on EndWorldReportAreaPage_OnBtnListSetupItemJunon");
static_assert(sizeof(EndWorldReportAreaPage_OnBtnListSetupItemJunon) == 0x000010, "Wrong size on EndWorldReportAreaPage_OnBtnListSetupItemJunon");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemJunon, ItemWidget) == 0x000000, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemJunon::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemJunon, ItemIndex) == 0x000008, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemJunon::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportAreaPage.OnBtnListSetupItemNibel
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportAreaPage_OnBtnListSetupItemNibel final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportAreaPage_OnBtnListSetupItemNibel) == 0x000008, "Wrong alignment on EndWorldReportAreaPage_OnBtnListSetupItemNibel");
static_assert(sizeof(EndWorldReportAreaPage_OnBtnListSetupItemNibel) == 0x000010, "Wrong size on EndWorldReportAreaPage_OnBtnListSetupItemNibel");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemNibel, ItemWidget) == 0x000000, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemNibel::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportAreaPage_OnBtnListSetupItemNibel, ItemIndex) == 0x000008, "Member 'EndWorldReportAreaPage_OnBtnListSetupItemNibel::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnAreaReportListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnAreaReportListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnAreaReportListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnAreaReportListSetupItem");
static_assert(sizeof(EndWorldReportVrPage_OnAreaReportListSetupItem) == 0x000010, "Wrong size on EndWorldReportVrPage_OnAreaReportListSetupItem");
static_assert(offsetof(EndWorldReportVrPage_OnAreaReportListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnAreaReportListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnAreaReportListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnAreaReportListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnBtnListSetupItem0
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnBtnListSetupItem0 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnBtnListSetupItem0) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnBtnListSetupItem0");
static_assert(sizeof(EndWorldReportVrPage_OnBtnListSetupItem0) == 0x000010, "Wrong size on EndWorldReportVrPage_OnBtnListSetupItem0");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem0, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnBtnListSetupItem0::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem0, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnBtnListSetupItem0::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnBtnListSetupItem1
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnBtnListSetupItem1 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnBtnListSetupItem1) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnBtnListSetupItem1");
static_assert(sizeof(EndWorldReportVrPage_OnBtnListSetupItem1) == 0x000010, "Wrong size on EndWorldReportVrPage_OnBtnListSetupItem1");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem1, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnBtnListSetupItem1::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem1, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnBtnListSetupItem1::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnBtnListSetupItem2
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnBtnListSetupItem2 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnBtnListSetupItem2) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnBtnListSetupItem2");
static_assert(sizeof(EndWorldReportVrPage_OnBtnListSetupItem2) == 0x000010, "Wrong size on EndWorldReportVrPage_OnBtnListSetupItem2");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem2, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnBtnListSetupItem2::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem2, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnBtnListSetupItem2::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnBtnListSetupItem3
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnBtnListSetupItem3 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnBtnListSetupItem3) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnBtnListSetupItem3");
static_assert(sizeof(EndWorldReportVrPage_OnBtnListSetupItem3) == 0x000010, "Wrong size on EndWorldReportVrPage_OnBtnListSetupItem3");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem3, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnBtnListSetupItem3::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem3, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnBtnListSetupItem3::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnBtnListSetupItem4
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnBtnListSetupItem4 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnBtnListSetupItem4) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnBtnListSetupItem4");
static_assert(sizeof(EndWorldReportVrPage_OnBtnListSetupItem4) == 0x000010, "Wrong size on EndWorldReportVrPage_OnBtnListSetupItem4");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem4, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnBtnListSetupItem4::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem4, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnBtnListSetupItem4::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnBtnListSetupItem5
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnBtnListSetupItem5 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnBtnListSetupItem5) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnBtnListSetupItem5");
static_assert(sizeof(EndWorldReportVrPage_OnBtnListSetupItem5) == 0x000010, "Wrong size on EndWorldReportVrPage_OnBtnListSetupItem5");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem5, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnBtnListSetupItem5::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem5, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnBtnListSetupItem5::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnBtnListSetupItem6
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnBtnListSetupItem6 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnBtnListSetupItem6) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnBtnListSetupItem6");
static_assert(sizeof(EndWorldReportVrPage_OnBtnListSetupItem6) == 0x000010, "Wrong size on EndWorldReportVrPage_OnBtnListSetupItem6");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem6, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnBtnListSetupItem6::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem6, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnBtnListSetupItem6::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnBtnListSetupItem7
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnBtnListSetupItem7 final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnBtnListSetupItem7) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnBtnListSetupItem7");
static_assert(sizeof(EndWorldReportVrPage_OnBtnListSetupItem7) == 0x000010, "Wrong size on EndWorldReportVrPage_OnBtnListSetupItem7");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem7, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnBtnListSetupItem7::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnBtnListSetupItem7, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnBtnListSetupItem7::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnPrizeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnPrizeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnPrizeListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnPrizeListSetupItem");
static_assert(sizeof(EndWorldReportVrPage_OnPrizeListSetupItem) == 0x000010, "Wrong size on EndWorldReportVrPage_OnPrizeListSetupItem");
static_assert(offsetof(EndWorldReportVrPage_OnPrizeListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnPrizeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnPrizeListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnPrizeListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnTermListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndWorldReportVrPage_OnTermListMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWorldReportVrPage_OnTermListMeasureItem) == 0x000004, "Wrong alignment on EndWorldReportVrPage_OnTermListMeasureItem");
static_assert(sizeof(EndWorldReportVrPage_OnTermListMeasureItem) == 0x00000C, "Wrong size on EndWorldReportVrPage_OnTermListMeasureItem");
static_assert(offsetof(EndWorldReportVrPage_OnTermListMeasureItem, ItemIndex) == 0x000000, "Member 'EndWorldReportVrPage_OnTermListMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnTermListMeasureItem, ReturnValue) == 0x000004, "Member 'EndWorldReportVrPage_OnTermListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndWorldReportVrPage.OnTermListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndWorldReportVrPage_OnTermListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndWorldReportVrPage_OnTermListSetupItem) == 0x000008, "Wrong alignment on EndWorldReportVrPage_OnTermListSetupItem");
static_assert(sizeof(EndWorldReportVrPage_OnTermListSetupItem) == 0x000010, "Wrong size on EndWorldReportVrPage_OnTermListSetupItem");
static_assert(offsetof(EndWorldReportVrPage_OnTermListSetupItem, ItemWidget) == 0x000000, "Member 'EndWorldReportVrPage_OnTermListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndWorldReportVrPage_OnTermListSetupItem, ItemIndex) == 0x000008, "Member 'EndWorldReportVrPage_OnTermListSetupItem::ItemIndex' has a wrong offset!");

}

