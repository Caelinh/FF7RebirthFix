#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NewSenseRight

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass NewSenseRight.NewSenseRight_C
// 0x0028 (0x0418 - 0x03F0)
class UNewSenseRight_C final : public UEndNewSenseRight
{
public:
	class UWidgetAnimation*                       RightInfo_Switching;                               // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              Img_Base_R;                                        // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Base_R_2;                                      // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Base_R_3;                                      // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Base_R_4;                                      // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NewSenseRight_C">();
	}
	static class UNewSenseRight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNewSenseRight_C>();
	}
};
static_assert(alignof(UNewSenseRight_C) == 0x000008, "Wrong alignment on UNewSenseRight_C");
static_assert(sizeof(UNewSenseRight_C) == 0x000418, "Wrong size on UNewSenseRight_C");
static_assert(offsetof(UNewSenseRight_C, RightInfo_Switching) == 0x0003F0, "Member 'UNewSenseRight_C::RightInfo_Switching' has a wrong offset!");
static_assert(offsetof(UNewSenseRight_C, Img_Base_R) == 0x0003F8, "Member 'UNewSenseRight_C::Img_Base_R' has a wrong offset!");
static_assert(offsetof(UNewSenseRight_C, Img_Base_R_2) == 0x000400, "Member 'UNewSenseRight_C::Img_Base_R_2' has a wrong offset!");
static_assert(offsetof(UNewSenseRight_C, Img_Base_R_3) == 0x000408, "Member 'UNewSenseRight_C::Img_Base_R_3' has a wrong offset!");
static_assert(offsetof(UNewSenseRight_C, Img_Base_R_4) == 0x000410, "Member 'UNewSenseRight_C::Img_Base_R_4' has a wrong offset!");

}

