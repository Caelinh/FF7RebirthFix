#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LimitLevel

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass LimitLevel.LimitLevel_C
// 0x0030 (0x03F8 - 0x03C8)
class ULimitLevel_C final : public UEndUserWidget
{
public:
	class UWidgetAnimation*                       Use;                                               // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LevelUp;                                           // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              Effect_Circle;                                     // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_Circle_1;                                   // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_LimitLevel_00;                              // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           Icon_LimitLevel;                                   // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LimitLevel_C">();
	}
	static class ULimitLevel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULimitLevel_C>();
	}
};
static_assert(alignof(ULimitLevel_C) == 0x000008, "Wrong alignment on ULimitLevel_C");
static_assert(sizeof(ULimitLevel_C) == 0x0003F8, "Wrong size on ULimitLevel_C");
static_assert(offsetof(ULimitLevel_C, Use) == 0x0003C8, "Member 'ULimitLevel_C::Use' has a wrong offset!");
static_assert(offsetof(ULimitLevel_C, LevelUp) == 0x0003D0, "Member 'ULimitLevel_C::LevelUp' has a wrong offset!");
static_assert(offsetof(ULimitLevel_C, Effect_Circle) == 0x0003D8, "Member 'ULimitLevel_C::Effect_Circle' has a wrong offset!");
static_assert(offsetof(ULimitLevel_C, Effect_Circle_1) == 0x0003E0, "Member 'ULimitLevel_C::Effect_Circle_1' has a wrong offset!");
static_assert(offsetof(ULimitLevel_C, Effect_LimitLevel_00) == 0x0003E8, "Member 'ULimitLevel_C::Effect_LimitLevel_00' has a wrong offset!");
static_assert(offsetof(ULimitLevel_C, Icon_LimitLevel) == 0x0003F0, "Member 'ULimitLevel_C::Icon_LimitLevel' has a wrong offset!");

}

