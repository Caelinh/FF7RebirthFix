#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkillTree_ReleaseText

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SkillTree_ReleaseText.SkillTree_ReleaseText_C
// 0x0058 (0x0420 - 0x03C8)
class USkillTree_ReleaseText_C final : public UEndUserWidget
{
public:
	class UWidgetAnimation*                       Out;                                               // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              BG_LevelRelease;                                   // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Circle1;                                           // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Circle2;                                           // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Deco1;                                             // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Deco2;                                             // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Icon_Unlock;                                       // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Line1;                                             // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Line1_1;                                           // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Line2;                                             // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SkillTree_ReleaseText_C">();
	}
	static class USkillTree_ReleaseText_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillTree_ReleaseText_C>();
	}
};
static_assert(alignof(USkillTree_ReleaseText_C) == 0x000008, "Wrong alignment on USkillTree_ReleaseText_C");
static_assert(sizeof(USkillTree_ReleaseText_C) == 0x000420, "Wrong size on USkillTree_ReleaseText_C");
static_assert(offsetof(USkillTree_ReleaseText_C, Out) == 0x0003C8, "Member 'USkillTree_ReleaseText_C::Out' has a wrong offset!");
static_assert(offsetof(USkillTree_ReleaseText_C, In) == 0x0003D0, "Member 'USkillTree_ReleaseText_C::In' has a wrong offset!");
static_assert(offsetof(USkillTree_ReleaseText_C, BG_LevelRelease) == 0x0003D8, "Member 'USkillTree_ReleaseText_C::BG_LevelRelease' has a wrong offset!");
static_assert(offsetof(USkillTree_ReleaseText_C, Circle1) == 0x0003E0, "Member 'USkillTree_ReleaseText_C::Circle1' has a wrong offset!");
static_assert(offsetof(USkillTree_ReleaseText_C, Circle2) == 0x0003E8, "Member 'USkillTree_ReleaseText_C::Circle2' has a wrong offset!");
static_assert(offsetof(USkillTree_ReleaseText_C, Deco1) == 0x0003F0, "Member 'USkillTree_ReleaseText_C::Deco1' has a wrong offset!");
static_assert(offsetof(USkillTree_ReleaseText_C, Deco2) == 0x0003F8, "Member 'USkillTree_ReleaseText_C::Deco2' has a wrong offset!");
static_assert(offsetof(USkillTree_ReleaseText_C, Icon_Unlock) == 0x000400, "Member 'USkillTree_ReleaseText_C::Icon_Unlock' has a wrong offset!");
static_assert(offsetof(USkillTree_ReleaseText_C, Line1) == 0x000408, "Member 'USkillTree_ReleaseText_C::Line1' has a wrong offset!");
static_assert(offsetof(USkillTree_ReleaseText_C, Line1_1) == 0x000410, "Member 'USkillTree_ReleaseText_C::Line1_1' has a wrong offset!");
static_assert(offsetof(USkillTree_ReleaseText_C, Line2) == 0x000418, "Member 'USkillTree_ReleaseText_C::Line2' has a wrong offset!");

}

