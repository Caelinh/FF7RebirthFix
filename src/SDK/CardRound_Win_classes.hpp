#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CardRound_Win

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CardRound_Win.CardRound_Win_C
// 0x00A0 (0x0468 - 0x03C8)
class UCardRound_Win_C final : public UEndUserWidget
{
public:
	class UWidgetAnimation*                       RankUp_Final;                                      // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       RankUp;                                            // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out;                                               // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              Img_Bg_01;                                         // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Bg_02;                                         // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Bg_03;                                         // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Light1;                                        // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Line1;                                         // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Round1;                                        // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Round1_Light;                                  // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Round2;                                        // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Round2_Light;                                  // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Round_L;                                       // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Round_L_Light;                                 // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Round_R;                                       // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Round_R_Light;                                 // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Shadow;                                        // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           ImgSet_IconNew;                                    // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           ImgSet_IconOld;                                    // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CardRound_Win_C">();
	}
	static class UCardRound_Win_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCardRound_Win_C>();
	}
};
static_assert(alignof(UCardRound_Win_C) == 0x000008, "Wrong alignment on UCardRound_Win_C");
static_assert(sizeof(UCardRound_Win_C) == 0x000468, "Wrong size on UCardRound_Win_C");
static_assert(offsetof(UCardRound_Win_C, RankUp_Final) == 0x0003C8, "Member 'UCardRound_Win_C::RankUp_Final' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, RankUp) == 0x0003D0, "Member 'UCardRound_Win_C::RankUp' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Out) == 0x0003D8, "Member 'UCardRound_Win_C::Out' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, In) == 0x0003E0, "Member 'UCardRound_Win_C::In' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Bg_01) == 0x0003E8, "Member 'UCardRound_Win_C::Img_Bg_01' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Bg_02) == 0x0003F0, "Member 'UCardRound_Win_C::Img_Bg_02' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Bg_03) == 0x0003F8, "Member 'UCardRound_Win_C::Img_Bg_03' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Light1) == 0x000400, "Member 'UCardRound_Win_C::Img_Light1' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Line1) == 0x000408, "Member 'UCardRound_Win_C::Img_Line1' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Round1) == 0x000410, "Member 'UCardRound_Win_C::Img_Round1' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Round1_Light) == 0x000418, "Member 'UCardRound_Win_C::Img_Round1_Light' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Round2) == 0x000420, "Member 'UCardRound_Win_C::Img_Round2' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Round2_Light) == 0x000428, "Member 'UCardRound_Win_C::Img_Round2_Light' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Round_L) == 0x000430, "Member 'UCardRound_Win_C::Img_Round_L' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Round_L_Light) == 0x000438, "Member 'UCardRound_Win_C::Img_Round_L_Light' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Round_R) == 0x000440, "Member 'UCardRound_Win_C::Img_Round_R' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Round_R_Light) == 0x000448, "Member 'UCardRound_Win_C::Img_Round_R_Light' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, Img_Shadow) == 0x000450, "Member 'UCardRound_Win_C::Img_Shadow' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, ImgSet_IconNew) == 0x000458, "Member 'UCardRound_Win_C::ImgSet_IconNew' has a wrong offset!");
static_assert(offsetof(UCardRound_Win_C, ImgSet_IconOld) == 0x000460, "Member 'UCardRound_Win_C::ImgSet_IconOld' has a wrong offset!");

}

