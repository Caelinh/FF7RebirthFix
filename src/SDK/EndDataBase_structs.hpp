#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EndDataBase

#include "Basic.hpp"


namespace SDK
{

// Enum EndDataBase.EEndBattleWeaponAbilityLearningCondition
// NumValues: 0x001C
enum class EEndBattleWeaponAbilityLearningCondition : uint8
{
	None                                     = 0,
	Activity                                 = 1,
	Hit                                      = 2,
	HitMulti                                 = 3,
	HitBurst                                 = 4,
	Burst                                    = 5,
	Kill                                     = 6,
	HitCancelNormalAttack                    = 7,
	EnergyChargeMax                          = 8,
	AerithAssistCreateDamage                 = 9,
	HitAttributeWeakInYuffieAttributeBuffAbility = 10,
	InvincibleDodge                          = 11,
	HitFirstUsedATBGaugeMAX                  = 12,
	UseSpecialBullet                         = 13,
	HitAttributeWeak                         = 14,
	KillUpgradeOffensiveModeAttack           = 15,
	ATBCharge                                = 16,
	BurstUpgradeSelfBuffNormalAttack         = 17,
	KillCastMagicFieldChangeAbility          = 18,
	PartyMemberDangerOrDead                  = 19,
	HitPartyMember3                          = 20,
	UseRevengeGaugeMax                       = 21,
	KillCloneTechnique                       = 22,
	DiceNumber                               = 23,
	KillMoogleSummon                         = 24,
	HitOnDeadCreateDamageSource              = 25,
	Danger                                   = 26,
	EEndBattleWeaponAbilityLearningCondition_MAX = 27,
};

// Enum EndDataBase.EEndBattleSpecialResist
// NumValues: 0x0005
enum class EEndBattleSpecialResist : uint8
{
	Death                                    = 0,
	Morph                                    = 1,
	Petrify                                  = 2,
	Max                                      = 3,
	None                                     = 3,
};

// Enum EndDataBase.EEndBattleStatusChangeResist
// NumValues: 0x0012
enum class EEndBattleStatusChangeResist : uint8
{
	Poison                                   = 0,
	Fury                                     = 1,
	Sadness                                  = 2,
	Silence                                  = 3,
	Sleep                                    = 4,
	Slow                                     = 5,
	Stop                                     = 6,
	GradualPetrify                           = 7,
	Berserk                                  = 8,
	Frog                                     = 9,
	DeathSentence                            = 10,
	Deprotect                                = 11,
	Deshell                                  = 12,
	Debrave                                  = 13,
	Defaith                                  = 14,
	Petrify                                  = 15,
	Max                                      = 16,
	None                                     = 16,
};

// Enum EndDataBase.EEndBattleStatusChangeEffectType
// NumValues: 0x001D
enum class EEndBattleStatusChangeEffectType : uint8
{
	None                                     = 0,
	Regene                                   = 1,
	TakePhysicsDamageCoeficient              = 2,
	TakeMagicDamageCoeficient                = 3,
	Reflect                                  = 4,
	Shield                                   = 5,
	ATBCoefficient                           = 6,
	Resist                                   = 7,
	Reraise                                  = 8,
	PhysicsAttackCoefficient                 = 9,
	PhysicsDefenseCoefficient                = 10,
	MagicAttackCoefficient                   = 11,
	MagicDefenseCoefficient                  = 12,
	Poison                                   = 13,
	TakeDamage_LimitGaugeCoefficient         = 14,
	Silence                                  = 15,
	Sleep                                    = 16,
	Stop                                     = 17,
	Berserk                                  = 18,
	Frog                                     = 19,
	Stun                                     = 20,
	GradualPetrify                           = 21,
	Petrify                                  = 22,
	Particle                                 = 23,
	LastLeave                                = 24,
	DeathSentence                            = 25,
	Darkness                                 = 26,
	CriticalRateAdd                          = 27,
	EEndBattleStatusChangeEffectType_MAX     = 28,
};

// Enum EndDataBase.EEndMateriaEffectType
// NumValues: 0x0032
enum class EEndMateriaEffectType : uint8
{
	None                                     = 0,
	UseAbility                               = 1,
	empty                                    = 2,
	UseEnemyAbility                          = 3,
	UseAbilitySummon                         = 4,
	ItemATBUnlimited                         = 5,
	MateriaUseAbility                        = 6,
	PowerUpGuard                             = 7,
	PowerUpJustGuard                         = 8,
	UseMugAbility                            = 9,
	AIPCPartyPinchUseProvocation             = 10,
	UseAbilitySpecialCommand                 = 11,
	AIPCUseWeaponAbility                     = 12,
	AIPCUseUniqueAbility                     = 13,
	AddCombinationGaugeOutsider              = 14,
	DistributeLimitGauge                     = 15,
	UseAbilityDarkness                       = 16,
	UseAbilityZeninage                       = 17,
	UseAbilityGamble                         = 18,
	Area                                     = 50,
	AddAttribute                             = 51,
	AddStatusChangeResist                    = 52,
	DamageAbsorbHP                           = 53,
	DamageAbsorbMP                           = 54,
	AIPCUCPCCommandUseMagic                  = 55,
	APScale                                  = 56,
	SubSpendMPPercent                        = 57,
	AIPCUseAbility                           = 58,
	AddMateriaLevel                          = 59,
	AddMateriaPower                          = 60,
	CastMagicShort                           = 61,
	HPScale                                  = 100,
	MPScale                                  = 101,
	BurstATB                                 = 102,
	MagicScale                               = 103,
	LuckScale                                = 104,
	GilScale                                 = 105,
	ExpScale                                 = 106,
	StartATB                                 = 107,
	VariationCommandATB                      = 108,
	SequenceCommandPartyATB                  = 109,
	ItemEffectScale                          = 110,
	StrengthScale                            = 111,
	VitalityScale                            = 112,
	SpiritScale                              = 113,
	DexterityScale                           = 114,
	SwapHPMaxMPMax                           = 115,
	SwapStrengthMagic                        = 116,
	SwapVitalitySpirit                       = 117,
	EEndMateriaEffectType_MAX                = 118,
};

// Enum EndDataBase.EEndBattleCountLogType
// NumValues: 0x004A
enum class EEndBattleCountLogType : uint8
{
	NormalAttackInvoke                       = 0,
	NormalAttackHitSuccess                   = 1,
	NormalAttackPerHitSuccess                = 2,
	NormalAttackHitFailure                   = 3,
	NormalAttackPerHitFailure                = 4,
	NormalAttackEnd                          = 5,
	WeaponAbilityInvoke                      = 6,
	WeaponAbilityHitSuccess                  = 7,
	WeaponAbilityPerHitSuccess               = 8,
	WeaponAbilityHitFailure                  = 9,
	WeaponAbilityPerHitFailure               = 10,
	WeaponAbilityEnd                         = 11,
	WeaponAbilitySuspendedByDamage           = 12,
	MagicInvoke                              = 13,
	MagicHitSuccess                          = 14,
	MagicPerHitSuccess                       = 15,
	MagicHitFailure                          = 16,
	MagicPerHitFailure                       = 17,
	MagicEnd                                 = 18,
	LimitInvoke                              = 19,
	LimitHitSuccess                          = 20,
	LimitPerHitSuccess                       = 21,
	LimitHitFailure                          = 22,
	LimitPerHitFailure                       = 23,
	LimitEnd                                 = 24,
	PerHitSuccessAttribute                   = 25,
	ItemUse                                  = 26,
	CombinationAbilityInvoke                 = 27,
	CombinationAbilityHitSuccess             = 28,
	CombinationAbilityHitSuccessComplete     = 29,
	CombinationAbilityPerHitSuccess          = 30,
	CombinationAbilityHitFailure             = 31,
	CombinationAbilityPerHitFailure          = 32,
	CombinationAbilityEnd                    = 33,
	UniqueAbilityInvoke                      = 34,
	SummonStayBegin                          = 35,
	SummonCutSceneAbilityBegin               = 36,
	SummonCutSceneAbilityEnd                 = 37,
	OverrideDamageHitReactionID              = 38,
	BreakCondition                           = 39,
	Burst                                    = 40,
	BurstEnd                                 = 41,
	IsSyncAction                             = 42,
	SyncActionState                          = 43,
	StatusChange                             = 44,
	SpecialStatusChangeState                 = 45,
	ExclusiveCondition                       = 46,
	ControledChara                           = 47,
	LeaderChange                             = 48,
	PartyCommand                             = 49,
	HPPercent                                = 50,
	LimitPercent                             = 51,
	LimitLevel                               = 52,
	ATBValue                                 = 53,
	ATBUsedValue                             = 54,
	IsDead                                   = 55,
	DeathCount                               = 56,
	AnimNotify                               = 57,
	BattleBegin                              = 58,
	UCPCBattle                               = 59,
	KilledEnemy                              = 60,
	AllKilledEnemy                           = 61,
	OwnKilledEnemy                           = 62,
	AlivePCParty                             = 63,
	UnrunnableTalkState                      = 64,
	RunnedSpecificTalkState                  = 65,
	SpecificTalkStateElapseTime              = 66,
	SpecificTalkStateIntervalTime            = 67,
	SpecificTalkStatePlayedCount             = 68,
	IsStoryFlag                              = 69,
	StateConditionTrue                       = 70,
	StateConditionFalse                      = 71,
	BattleSceneTime                          = 72,
	MAX                                      = 73,
};

// Enum EndDataBase.EEndBattleAttributeResistType
// NumValues: 0x0007
enum class EEndBattleAttributeResistType : uint8
{
	None                                     = 0,
	Weak                                     = 1,
	HalfDecrease                             = 2,
	LargeDecrease                            = 3,
	Resist                                   = 4,
	Absorb                                   = 5,
	EEndBattleAttributeResistType_MAX        = 6,
};

// Enum EndDataBase.EEndBattleAttributeBitType
// NumValues: 0x0006
enum class EEndBattleAttributeBitType : uint8
{
	None                                     = 0,
	Fire                                     = 1,
	Ice                                      = 2,
	Thunder                                  = 4,
	Wind                                     = 8,
	EEndBattleAttributeBitType_MAX           = 9,
};

// Enum EndDataBase.EEndBattleAttributeType
// NumValues: 0x0006
enum class EEndBattleAttributeType : uint8
{
	Fire                                     = 0,
	Ice                                      = 1,
	Thunder                                  = 2,
	Wind                                     = 3,
	Max                                      = 4,
	None                                     = 4,
};

// Enum EndDataBase.EEndBattlePropertyResistType
// NumValues: 0x0003
enum class EEndBattlePropertyResistType : uint8
{
	Physics                                  = 0,
	Magic                                    = 1,
	Max                                      = 2,
};

// Enum EndDataBase.EEndBattleSpecialStatusChangeType
// NumValues: 0x0060
enum class EEndBattleSpecialStatusChangeType : uint8
{
	None                                     = 0,
	Barrier                                  = 1,
	SearchLaser                              = 2,
	AIHands                                  = 4,
	RocketPunch                              = 5,
	CatchWithChain                           = 6,
	CanNotAbility                            = 7,
	CatchedByChain                           = 8,
	SyncAction                               = 9,
	Doping                                   = 10,
	LaunchByPhysics                          = 12,
	CatchWithChainDamageSource               = 13,
	ReactionDamageSource                     = 14,
	DamageInvalid                            = 15,
	LockOn                                   = 16,
	LockedOn                                 = 17,
	LocateDamageSource                       = 18,
	CatchWithHandle                          = 19,
	CatchedByHandle                          = 20,
	WarpStyle                                = 21,
	HideStyle                                = 22,
	Appear                                   = 23,
	HitSlowAttack                            = 24,
	BarretBuff                               = 25,
	ControlEnvironmentActor                  = 26,
	ReplaceEnvironmentActor                  = 27,
	ThrowEnvironmentActor                    = 28,
	TifaRiseBeat                             = 29,
	CounterMode                              = 30,
	ControlEnvironmentActorGroup             = 31,
	GhostStyle                               = 32,
	BarretHPTransferBuff                     = 33,
	BarretSpecialBullet                      = 34,
	AerithAssist                             = 35,
	PlayTouchEffect                          = 36,
	PlayTouchEffectTargetIDGroup             = 37,
	PlayTouchEffectFeet                      = 38,
	PlayBlendSpaceAction                     = 39,
	OverwriteSyncAction                      = 40,
	Bind                                     = 41,
	ApparentDeath                            = 42,
	IceAura                                  = 43,
	SoulAbsorb                               = 44,
	ThrowCharacter                           = 45,
	ResetThrowCharacter                      = 46,
	InRangeCheckDamage                       = 47,
	SephirothWarpStyle                       = 48,
	Vision                                   = 49,
	AttributeAssist                          = 50,
	YuffieCalcDamageBuff                     = 51,
	YuffieAttributeBuff                      = 52,
	TitanProtection                          = 53,
	OdinSeize                                = 54,
	RamuhPowerUp                             = 55,
	MPUnlimited                              = 56,
	ElenaPunch                               = 57,
	DroneCatcher                             = 58,
	AerithStop                               = 59,
	DisableRevival                           = 60,
	SpecifyTargetStrafing                    = 61,
	TimeAura                                 = 62,
	ThunderAura                              = 63,
	CloneTechnique                           = 64,
	IceReflect                               = 65,
	CloneBody                                = 66,
	CrimsonRocketPunch                       = 67,
	BarretATBRegene                          = 68,
	StonePillar                              = 69,
	AerithSaintCharge                        = 70,
	KickOff                                  = 71,
	MineMovement                             = 72,
	StonePillarCollapse                      = 73,
	AbilityLoopTimeManagement                = 74,
	BPDoT                                    = 75,
	OnDeadCreateDamageSource                 = 76,
	HPMaxCoefficient                         = 77,
	MPMaxCoefficient                         = 78,
	TimePassesAddATB                         = 79,
	MoveEnvironment                          = 80,
	PullBindChara                            = 81,
	CloudJenovaLifeJump                      = 82,
	OverrideDeadMotionName                   = 83,
	OdinStop                                 = 84,
	TimerEvent                               = 85,
	GenjiShield                              = 86,
	OneFrameStatusChange                     = 87,
	PullIntoArea                             = 88,
	CatchWithEffect                          = 89,
	OnLandCreateDamageSource                 = 90,
	SummonBuffTop                            = 220,
	SummonBuffRegene                         = 220,
	SummonBuffMaxHpBonus                     = 223,
	SummonBuffPhysicalAttackBonus            = 224,
	SummonBuffMagicAttackBonus               = 225,
	SummonBuffBottom                         = 226,
	MAX                                      = 227,
};

// Enum EndDataBase.EEndBattleSyncActionStateType
// NumValues: 0x000C
enum class EEndBattleSyncActionStateType : uint8
{
	Begin                                    = 0,
	BeginRightHand                           = 1,
	BeginLeftHand                            = 2,
	Loop                                     = 3,
	EndFailure                               = 4,
	EndSuccessByOthers                       = 5,
	EndTargetDead                            = 6,
	End                                      = 7,
	EndRightHand                             = 8,
	EndLeftHand                              = 9,
	EndEnableWalk                            = 10,
	EEndBattleSyncActionStateType_MAX        = 11,
};

// Enum EndDataBase.EEndBattleAbilityCommandType
// NumValues: 0x0007
enum class EEndBattleAbilityCommandType : uint8
{
	None                                     = 0,
	Ability                                  = 1,
	Magic                                    = 2,
	Limit                                    = 3,
	Item                                     = 4,
	CombinationAbility                       = 5,
	Max                                      = 6,
};

// Enum EndDataBase.EEndDataObjectDebugFlag
// NumValues: 0x0003
enum class EEndDataObjectDebugFlag : uint8
{
	NextLocationReimport                     = 0,
	NextLocationSaveLocationSaveData         = 1,
	EEndDataObjectDebugFlag_MAX              = 2,
};

// Enum EndDataBase.EDataBaseDebugLogTypeItemGet
// NumValues: 0x0006
enum class EDataBaseDebugLogTypeItemGet : uint8
{
	NONE                                     = 0,
	ENEMY_KILL                               = 1,
	SHOP                                     = 2,
	TRESURE                                  = 3,
	REWARD                                   = 4,
	EDataBaseDebugLogTypeItemGet_MAX         = 5,
};

// Enum EndDataBase.EDataBaseDebugLogTypeTertiary
// NumValues: 0x000F
enum class EDataBaseDebugLogTypeTertiary : uint8
{
	NONE                                     = 0,
	GET_TYPE                                 = 1,
	TABLE_ID                                 = 2,
	NAME                                     = 3,
	BATTLE_CHARASPEC                         = 4,
	LEVEL                                    = 5,
	EXP                                      = 6,
	GIL                                      = 7,
	AP                                       = 8,
	DROPITEM_LOTTERY                         = 9,
	CHANGE_ITEM                              = 10,
	CHARACTER_NAME                           = 11,
	EQUIP_TYPE                               = 12,
	NUM                                      = 13,
	MAX                                      = 14,
};

// Enum EndDataBase.EDataBaseDebugLogTypeSecondary
// NumValues: 0x000E
enum class EDataBaseDebugLogTypeSecondary : uint8
{
	NONE                                     = 0,
	ENEMY_KILL                               = 1,
	CHARACTER_LEVEL                          = 2,
	PLAYER_LEVELUP                           = 3,
	MATERIA_LEVELUP                          = 4,
	ITEM_ADD                                 = 5,
	ITEM_REMOVE                              = 6,
	ADD_PT_EXP                               = 7,
	PCREINFORCED                             = 8,
	CHANGE_EQUIP                             = 9,
	PARTY_CHANGE                             = 10,
	CHANGE_CHAPTER                           = 11,
	ENTER_LOCATION                           = 12,
	MAX                                      = 13,
};

// Enum EndDataBase.EDataBaseDebugLogGetType
// NumValues: 0x0005
enum class EDataBaseDebugLogGetType : uint8
{
	NONE                                     = 0,
	ACTION                                   = 1,
	HUB_STORY                                = 2,
	HUB_NOTIFIER                             = 3,
	EDataBaseDebugLogGetType_MAX             = 4,
};

// Enum EndDataBase.EEquipCacheType
// NumValues: 0x0003
enum class EEquipCacheType : uint8
{
	EEquipCacheType_Default                  = 0,
	EEquipCacheType_Reserve                  = 1,
	EEquipCacheType_Max                      = 2,
};

// Enum EndDataBase.EEndSkillEffectType
// NumValues: 0x0078
enum class EEndSkillEffectType : uint8
{
	None                                     = 0,
	HPMaxAdd                                 = 1,
	MPMaxAdd                                 = 2,
	PhysicsAttackAdd                         = 3,
	PhysicsDefenseAdd                        = 4,
	MagicAttackAdd                           = 5,
	MagicDefenseAdd                          = 6,
	CriticalRateAdd                          = 7,
	LuckAdd                                  = 8,
	DexterityAdd                             = 9,
	LimitLevelBaseAdd                        = 10,
	GiveDamageCriticalAdd                    = 20,
	GiveDamageFireAdd                        = 21,
	GiveDamageIceAdd                         = 22,
	GiveDamageThunderAdd                     = 23,
	GiveDamageWindAdd                        = 24,
	GiveDamageWeaponAbilityAdd               = 25,
	GiveDamageLimitAbilityAdd                = 26,
	GiveDamageGroundNormalAttackComboAdd     = 27,
	GiveDamageAerialNormalAttackComboAdd     = 28,
	GiveDamageStateBurstAdd                  = 29,
	GiveDamageWeakAttributeAdd               = 30,
	GiveDamageAttributeAdd                   = 31,
	GiveDamageLimitOver                      = 32,
	GiveDamageUniqueAbilityAdd               = 33,
	GiveDamageNormalAttackAdd                = 34,
	GiveDamageAerialAttackAdd                = 35,
	GiveDamageBreakablePartAdd               = 36,
	GiveDamageBackAdd                        = 37,
	GiveDamageMPFullMPSpendAdd               = 38,
	GiveDamageSelfHPRecoverAdd               = 39,
	GiveDamageHPRecoverAdd                   = 40,
	GiveDamageAddTakeDamageAdd               = 41,
	GiveDamageSubTakeDamageSub               = 42,
	GiveDamageAbilityAdd                     = 43,
	TakeDamageFireSub                        = 50,
	TakeDamageIceSub                         = 51,
	TakeDamageThunderSub                     = 52,
	TakeDamageWindSub                        = 53,
	TakeDamagePhysicsGuardSuccessSub         = 54,
	TakeDamageMagicGuardSuccessSub           = 55,
	TakeDamageAttributeSub                   = 56,
	TakeDamageSubAIPC                        = 57,
	TakeDamageDebuffZeroProbability          = 58,
	TakeBuffTimeAdd                          = 80,
	GiveBuffTimeAdd                          = 81,
	GiveDebuffTimeAdd                        = 82,
	StatusChangeResistAdd                    = 83,
	PoisonDamageSub                          = 84,
	TakeDebuffTimeSub                        = 85,
	MateriaIDEffect                          = 100,
	LimitLevelMaxFix_LimitValueSub           = 101,
	OnUseWeaponAbilityATBAdd                 = 102,
	CombinationAbilityPowerAdd               = 103,
	OnGuardLimitAdd                          = 104,
	OnBurstLimitAdd                          = 105,
	OnBurstCreateDamageSource                = 106,
	ATBRecoverAdd                            = 110,
	MPRecoverTimeSub                         = 111,
	LimitValueAdd                            = 112,
	MPSpendAttackMagicSub                    = 113,
	MPSpendHealMagicSub                      = 114,
	MateriaSlotModify                        = 115,
	HPRecoverKill                            = 116,
	MPRecoverTakeDamage                      = 117,
	WalkGetGill                              = 118,
	CriticalWeaponAbilityAdd                 = 119,
	HPRecoverBurstUniqueAbility              = 120,
	AppendAttributeDamageAdd                 = 121,
	StartATBAdd                              = 122,
	ItemDropAdd                              = 123,
	SummonLevelAdd                           = 124,
	ATBFullVision                            = 125,
	LimitAddSpendATB                         = 126,
	LimitAddSpendMP                          = 127,
	StatusChangeAddBattleBegin               = 128,
	StatusChangeUnRemovedAddBattleBegin      = 129,
	StatusChangeUnRemovedAddSwitchableBattleBegin = 130,
	LimitAddTime                             = 131,
	UseAbility                               = 132,
	AbilityStrengthenNumber                  = 133,
	WorldItemCollectAdd                      = 134,
	UseCombinationTypeCombinationAbility     = 135,
	MagicAbilityKeepAdd                      = 136,
	StealSuccessRateAdd                      = 137,
	AbilityMotionLoopTimeAdd                 = 138,
	AbilityKeepAdd                           = 139,
	OnCreateDamageSourceCreateDamageSource   = 140,
	DamageSourceHitBonusAdd                  = 141,
	StealSuccessCreateDamageSource           = 142,
	AddAP                                    = 143,
	StoryFlagSet                             = 144,
	OnJustGuardCreateDamageSource            = 145,
	LimitValueAddBattleBegin                 = 146,
	UseAbilityVariationAddSpecialStatusChange = 147,
	GiveDamageOffensiveModeCounterAdd        = 150,
	GiveDamageOffensiveModeNormalAttackAdd   = 151,
	OffensiveModeDefenseAdd                  = 152,
	TifaBuffAddBattleStart                   = 155,
	AddAttackTimeThrowWeapon                 = 156,
	TimeEnergyAdd                            = 157,
	ChargeEnergyAdd                          = 158,
	OnBurstAddEnergy                         = 159,
	SelfBuffTimeAdd                          = 160,
	SelfBuffAttackBuffLevelAdd               = 161,
	OnReviveSelfBuffLevelAdd                 = 162,
	AerithAssistTimeAdd                      = 163,
	AerithWarpCoolDownTimeSub                = 164,
	SupportFieldTimeAdd                      = 165,
	RevengeTimeAdd                           = 166,
	RevengeModeRevengeTimeAdd                = 167,
	RevengeModeCreateDamageSource            = 168,
	OnReviveRevengeTimeAdd                   = 169,
	GiveDamageRedXIIICounterAbilityAdd       = 170,
	FatMoogleGaugeLvBattleStart              = 171,
	FatMoogleRideLuckAdd                     = 172,
	TakeDamageFatMoogleAdd                   = 173,
	GiveDamageFatMoogleSub                   = 174,
	FatMoogleTargetProbAdd                   = 175,
	EEndSkillEffectType_MAX                  = 176,
};

// Enum EndDataBase.EEndSkillConditionType
// NumValues: 0x0007
enum class EEndSkillConditionType : uint8
{
	None                                     = 0,
	HPUnder                                  = 1,
	HPOver                                   = 2,
	MPUnder                                  = 3,
	MPOver                                   = 4,
	Danger                                   = 5,
	EEndSkillConditionType_MAX               = 6,
};

// Enum EndDataBase.EDataBaseEquipmentObtainmentStatus
// NumValues: 0x0004
enum class EDataBaseEquipmentObtainmentStatus : uint8
{
	Undiscovered                             = 0,
	Obtained                                 = 1,
	Displayed                                = 2,
	EDataBaseEquipmentObtainmentStatus_MAX   = 3,
};

// Enum EndDataBase.EShopItemType
// NumValues: 0x000B
enum class EShopItemType : uint8
{
	EShopItemType_Item                       = 0,
	EShopItemType_Equipment                  = 1,
	EShopItemType_Weapon                     = 1,
	EShopItemType_Materia                    = 2,
	EShopItemType_Armor                      = 3,
	EShopItemType_Accessory                  = 4,
	EShopItemType_JukeBox                    = 5,
	EShopItemType_Card                       = 6,
	EShopItemType_Material                   = 7,
	EShopItemType_MAX                        = 8,
	EShopItemType_None                       = 9,
};

// Enum EndDataBase.EEquipmentCategoryMain
// NumValues: 0x0004
enum class EEquipmentCategoryMain : uint8
{
	Weapon                                   = 0,
	Armor                                    = 1,
	Accessory                                = 2,
	EEquipmentCategoryMain_MAX               = 3,
};

// Enum EndDataBase.EHelpMateriaTypeFlag
// NumValues: 0x000D
enum class EHelpMateriaTypeFlag : uint16
{
	EHelpMateriaTypeFlag_Attribute           = 1,
	EHelpMateriaTypeFlag_AddEffect           = 2,
	EHelpMateriaTypeFlag_Trigger             = 4,
	EHelpMateriaTypeFlag_APup                = 8,
	EHelpMateriaTypeFlag_MPSave              = 16,
	EHelpMateriaTypeFlag_Range               = 32,
	EHelpMateriaTypeFlag_HPAbsorb            = 64,
	EHelpMateriaTypeFlag_MPAbsorb            = 128,
	EHelpMateriaTypeFlag_AutoMagic           = 256,
	EHelpMateriaTypeFlag_MateriaLevelUP      = 512,
	EHelpMateriaTypeFlag_MagicPowerUp        = 1024,
	EHelpMateriaTypeFlag_QuickCast           = 2048,
	EHelpMateriaTypeFlag_Max                 = 12,
};

// Enum EndDataBase.EMateriaType
// NumValues: 0x0008
enum class EMateriaType : uint8
{
	EMateriaType_Magic                       = 0,
	EMateriaType_Help                        = 1,
	EMateriaType_Command                     = 2,
	EMateriaType_Independence                = 3,
	EMateriaType_Summon                      = 4,
	EMateriaType_Party                       = 5,
	EMateriaType_MAX                         = 6,
	EMateriaType_None                        = 6,
};

// Enum EndDataBase.EDifficultyType
// NumValues: 0x0005
enum class EDifficultyType : uint8
{
	EASY                                     = 0,
	NORMAL                                   = 1,
	HARD                                     = 2,
	ADVANCE                                  = 3,
	MAX                                      = 4,
};

// Enum EndDataBase.EWeaponCoreAutoSettingType
// NumValues: 0x0005
enum class EWeaponCoreAutoSettingType : uint8
{
	NONE                                     = 0,
	BALANCE                                  = 1,
	ATTACK                                   = 2,
	DEFENSE                                  = 3,
	MAX                                      = 4,
};

// Enum EndDataBase.EWeaponUpgradeNodeCoreType
// NumValues: 0x0006
enum class EWeaponUpgradeNodeCoreType : uint8
{
	MAINCORE                                 = 1,
	SUBCORE                                  = 2,
	SKILLCORE                                = 3,
	PARAMCORE                                = 4,
	NONE                                     = 5,
	MAX                                      = 5,
};

// Enum EndDataBase.EIOGameDataRequestLayer
// NumValues: 0x0006
enum class EIOGameDataRequestLayer : uint8
{
	None                                     = 0,
	Background                               = 1,
	Field                                    = 2,
	Menu                                     = 3,
	Count                                    = 4,
	EIOGameDataRequestLayer_MAX              = 5,
};

// Enum EndDataBase.EIOGameDataState
// NumValues: 0x000B
enum class EIOGameDataState : uint8
{
	EIOGameDataState_NONE                    = 0,
	EIOGameDataState_SAVE                    = 1,
	EIOGameDataState_LOAD                    = 2,
	EIOGameDataState_EXIST                   = 3,
	EIOGameDataState_GATHER                  = 4,
	EIOGameDataState_BACKUP_SAVE             = 5,
	EIOGameDataState_BACKUP_LOAD             = 6,
	EIOGameDataState_SAVE_COMMON             = 7,
	EIOGameDataState_LOAD_COMMON             = 8,
	EIOGameDataState_GATHER_AT_SAVING        = 9,
	EIOGameDataState_Max                     = 10,
};

// Enum EndDataBase.EGameDataResult
// NumValues: 0x0004
enum class EGameDataResult : uint8
{
	EGameDataResult_NONE                     = 0,
	EGameDataResult_SUCCESS                  = 1,
	EGameDataResult_ERROR                    = 2,
	EGameDataResult_MAX                      = 3,
};

// Enum EndDataBase.EDataBaseItemCategory
// NumValues: 0x0011
enum class EDataBaseItemCategory : uint64
{
	NONE                                     = 18446744073709551615,
	USE                                      = 0,
	MATERIAL                                 = 1,
	KEYITEM                                  = 2,
	WEAPON                                   = 3,
	ARMOR                                    = 4,
	ACCESSORY                                = 5,
	MATERIA                                  = 6,
	JUKEBOX                                  = 7,
	CURRENCY                                 = 8,
	COSTUME                                  = 9,
	RECIPEBOOK                               = 10,
	SKILLBOOK                                = 11,
	CHOCOBOACCESSORY                         = 12,
	QBCARD                                   = 13,
	TROPHY                                   = 14,
	MAX                                      = 15,
};

// Enum EndDataBase.EDataBaseSceneLayerType
// NumValues: 0x0006
enum class EDataBaseSceneLayerType : uint8
{
	DEFAULT                                  = 0,
	REMEMBER                                 = 1,
	ZACK                                     = 2,
	OTHER_SCENE                              = 3,
	MAX                                      = 4,
	NONE                                     = 4,
};

// Enum EndDataBase.EChocoboEquipPartsType
// NumValues: 0x0005
enum class EChocoboEquipPartsType : uint8
{
	EChocoboEquipPartsType_Head              = 0,
	EChocoboEquipPartsType_Body              = 1,
	EChocoboEquipPartsType_Leg               = 2,
	EChocoboEquipPartsType_Max               = 3,
	EChocoboEquipPartsType_None              = 3,
};

// Enum EndDataBase.EBaseParameterValueType
// NumValues: 0x001B
enum class EBaseParameterValueType : uint8
{
	PHYSICS_ATTACK_ADD                       = 0,
	PHYSICS_ATTACK_SCALE                     = 1,
	MAGIC_ATTACK_ADD                         = 2,
	MAGIC_ATTACK_SCALE                       = 3,
	PHYSICS_DEFENSE_ADD                      = 4,
	PHYSICS_DEFENSE_SCALE                    = 5,
	MAGIC_DEFENSE_ADD                        = 6,
	MAGIC_DEFENSE_SCALE                      = 7,
	STRENGTH_ADD                             = 8,
	STRENGTH_SCALE                           = 9,
	MAGIC_ADD                                = 10,
	MAGIC_SCALE                              = 11,
	VITALITY_ADD                             = 12,
	VITALITY_SCALE                           = 13,
	SPIRIT_ADD                               = 14,
	SPIRIT_SCALE                             = 15,
	LUCK_ADD                                 = 16,
	LUCK_SCALE                               = 17,
	DEXTERITY_ADD                            = 18,
	DEXTERITY_SCALE                          = 19,
	HP_MAX_ADD                               = 20,
	HP_MAX_SCALE                             = 21,
	MP_MAX_ADD                               = 22,
	MP_MAX_SCALE                             = 23,
	CRITICAL_HIT_RATE_ADD                    = 24,
	CRITICAL_HIT_RATE_SCALE                  = 25,
	MAX                                      = 26,
};

// Enum EndDataBase.EMateriaSlotModifyType
// NumValues: 0x0004
enum class EMateriaSlotModifyType : uint8
{
	NONE                                     = 0,
	ADD                                      = 1,
	CONNECT                                  = 2,
	MAX                                      = 3,
};

// Enum EndDataBase.EEndMateriaLevelUpType
// NumValues: 0x0003
enum class EEndMateriaLevelUpType : uint8
{
	AP                                       = 0,
	ITEM                                     = 1,
	MAX                                      = 2,
};

// Enum EndDataBase.EDataBaseLearningAbilityRetType
// NumValues: 0x0005
enum class EDataBaseLearningAbilityRetType : uint64
{
	Error                                    = 18446744073709551615,
	None                                     = 0,
	Already                                  = 1,
	Learning                                 = 2,
	EDataBaseLearningAbilityRetType_MAX      = 3,
};

// Enum EndDataBase.EDataBaseCombinationRefType
// NumValues: 0x0004
enum class EDataBaseCombinationRefType : uint8
{
	Type_A                                   = 0,
	Type_B                                   = 1,
	None                                     = 2,
	Max                                      = 2,
};

// Enum EndDataBase.EDataBaseNormalCombinationTacticsType
// NumValues: 0x0004
enum class EDataBaseNormalCombinationTacticsType : uint8
{
	Attack                                   = 0,
	Defense                                  = 1,
	Max                                      = 2,
	None                                     = 2,
};

// Enum EndDataBase.EEndFieldFlag
// NumValues: 0x0013
enum class EEndFieldFlag : uint8
{
	MainMenuChapterSelect                    = 0,
	ActionStartChapter                       = 1,
	StartUninitParsistant                    = 2,
	LocationJumpBlack                        = 3,
	LocationJumpEndFadeOut                   = 4,
	LocationJumpSaveData                     = 5,
	LocationJumpSaveData_Snap2nd             = 6,
	SkipZack                                 = 7,
	CardGameBgImageSkinNone                  = 8,
	CardGameBgImageSkinCosta                 = 9,
	LocationJump                             = 10,
	FinishGameJumpActor                      = 11,
	FinishFieldManager                       = 12,
	LocationJumpTitle                        = 13,
	MainMenuChapterSelect_FinishOnSelectChapter = 14,
	SimpleMethodPlayBGM                      = 15,
	ActionLocationJump                       = 16,
	LocationJumpSaved                        = 17,
	EEndFieldFlag_MAX                        = 18,
};

// Enum EndDataBase.EEndChapterQuestResetType
// NumValues: 0x0005
enum class EEndChapterQuestResetType : uint8
{
	None                                     = 0,
	ResetQuest                               = 1,
	KeepQuest                                = 2,
	NoneResetQuest                           = 3,
	EEndChapterQuestResetType_MAX            = 4,
};

// Enum EndDataBase.EEndDebugFlag
// NumValues: 0x000A
enum class EEndDebugFlag : uint8
{
	IgnoreLocationDataTable                  = 0,
	EntryLocationFieldTest                   = 1,
	EntryLocationBattleTest                  = 2,
	EntryLocationBegining                    = 3,
	EncountLogOutput                         = 4,
	BeginEntryLocationUnInitSaveData         = 5,
	SingleLocationUmap                       = 6,
	EntryLocationAthleticLevel               = 7,
	IgnoreFieldEncount_FastTravelDebug       = 8,
	EEndDebugFlag_MAX                        = 9,
};

// Enum EndDataBase.EEndStateAttribute
// NumValues: 0x0023
enum class EEndStateAttribute : uint8
{
	OnOff                                    = 0,
	BeginOverlapTrigger                      = 1,
	Effect                                   = 2,
	PlannerLevelSet                          = 3,
	AI                                       = 4,
	TargetIcon                               = 5,
	General                                  = 6,
	Attribute07                              = 7,
	EnvironmentAnimation                     = 8,
	EndOverlapTrigger                        = 9,
	ResponseAreaAction                       = 10,
	MotionState                              = 11,
	EnvironmentAnimationInnerOuter           = 12,
	AttachActor0                             = 13,
	AttachActor1                             = 14,
	AttachActor2                             = 15,
	SideDestination                          = 16,
	DisableLookAt                            = 17,
	AttachActor3                             = 18,
	InterestPoint                            = 19,
	Attribute20                              = 20,
	Attribute21                              = 21,
	Attribute22                              = 22,
	Attribute23                              = 23,
	Attribute24                              = 24,
	Attribute25                              = 25,
	Attribute26                              = 26,
	Attribute27                              = 27,
	DebugDebugDebug                          = 28,
	BattleScene                              = 29,
	PlacementEnvironmentSet                  = 30,
	PlacementPlannerLevelSet                 = 31,
	AttributeMax                             = 32,
	None                                     = 33,
	EEndStateAttribute_MAX                   = 34,
};

// Enum EndDataBase.EndOnOffStatus
// NumValues: 0x000E
enum class EndOnOffStatus : uint8
{
	EndOnOffStatus_On                        = 0,
	EndOnOffStatus_Off                       = 1,
	EndOnOffStatus_OnOverrideHide            = 2,
	EndOnOffStatus_OnHide                    = 3,
	EndOnOffStatus_OnForce                   = 4,
	EndOnOffStatus_OnDisable                 = 5,
	EndOnOffStatus_OnOverrideHideBattle      = 6,
	EndOnOffStatus_OnPause                   = 7,
	EndOnOffStatus_OnAsset                   = 8,
	EndOnOffStatus_OnDrawPause               = 9,
	EndOnOffStatus_OnDisablePhysics          = 10,
	EndOnOffStatus_OnDisableCollision        = 11,
	EndOnOffStatus_OnCommandGrayOut          = 12,
	EndOnOffStatus_Max                       = 13,
};

// Enum EndDataBase.EEndLocationResidentLocationType
// NumValues: 0x0005
enum class EEndLocationResidentLocationType : uint8
{
	EEndLocationResidentLocationType_Sub     = 0,
	EEndLocationResidentLocationType_Main    = 1,
	EEndLocationResidentLocationType_Data    = 2,
	EEndLocationResidentLocationType_DebugMain = 3,
	EEndLocationResidentLocationType_MAX     = 4,
};

// Enum EndDataBase.EEndLocationType
// NumValues: 0x0005
enum class EEndLocationType : uint8
{
	EEndLocationType_Main                    = 0,
	EEndLocationType_Sub                     = 1,
	EEndLocationType_Common                  = 2,
	EEndLocationType_DebugMain               = 3,
	EEndLocationType_MAX                     = 4,
};

// Enum EndDataBase.EEndMenuQuestNotifyState
// NumValues: 0x0005
enum class EEndMenuQuestNotifyState : uint8
{
	None                                     = 0,
	Added                                    = 1,
	Updated                                  = 2,
	Completed                                = 3,
	EEndMenuQuestNotifyState_MAX             = 4,
};

// Enum EndDataBase.EEndMenuMapIconKind
// NumValues: 0x00C8
enum class EEndMenuMapIconKind : uint8
{
	PartyMember                              = 0,
	Enemy                                    = 1,
	MainStory                                = 2,
	SubStory                                 = 3,
	Elevator                                 = 4,
	Up                                       = 5,
	Down                                     = 6,
	Shop                                     = 7,
	Location                                 = 8,
	Inn                                      = 9,
	InnInTown                                = 10,
	MainStoryIntermediate                    = 11,
	SideDestination                          = 12,
	VendingMachine                           = 13,
	WeaponShop                               = 14,
	MateriaShop                              = 15,
	Chadley                                  = 16,
	ChocoboCarriageOld                       = 17,
	VRBattle                                 = 18,
	Colosseum                                = 19,
	MogShop                                  = 20,
	PHS                                      = 21,
	CorneoTreasure                           = 22,
	Jukebox                                  = 23,
	RoadClosed                               = 24,
	UserMarker                               = 25,
	CommunicationTowerBefore                 = 26,
	CommunicationTowerAfter                  = 27,
	CommunicationTowerClear                  = 28,
	CommunicationTowerComplete               = 29,
	CommunicationTowerBefore2                = 30,
	SubjugationPointBefore                   = 31,
	SubjugationPointAfter                    = 32,
	SubjugationPointClear                    = 33,
	SubjugationPointComplete                 = 34,
	SubjugationPointBefore2                  = 35,
	LifeSpotBefore                           = 36,
	LifeSpotAfter                            = 37,
	LifeSpotClear                            = 38,
	LifeSpotComplete                         = 39,
	LifeSpotBefore2                          = 40,
	StoryPointBefore                         = 41,
	StoryPointAfter                          = 42,
	StoryPointClear                          = 43,
	StoryPointComplete                       = 44,
	StoryPointBefore2                        = 45,
	ChocoboFootTraceBefore                   = 46,
	ChocoboFootTraceAfter                    = 47,
	ChocoboFootTraceClear                    = 48,
	ChocoboFootTraceComplete                 = 49,
	ChocoboFootTraceBefore2                  = 50,
	ChocoboFeedingGroundBefore               = 51,
	ChocoboFeedingGroundAfter                = 52,
	ChocoboFeedingGroundClear                = 53,
	ChocoboFeedingGroundComplete             = 54,
	ChocoboFeedingGroundBefore2              = 55,
	SummonMonsterSmallShrineBefore           = 56,
	SummonMonsterSmallShrineAfter            = 57,
	SummonMonsterSmallShrineClear            = 58,
	SummonMonsterSmallShrineComplete         = 59,
	SummonMonsterSmallShrineBefore2          = 60,
	CraftRecipeExcavatePointBefore           = 61,
	CraftRecipeExcavatePointAfter            = 62,
	CraftRecipeExcavatePointClear            = 63,
	CraftRecipeExcavatePointComplete         = 64,
	CraftRecipeExcavatePointBefore2          = 65,
	ChocoboCarriageBefore                    = 66,
	ChocoboCarriageAfter                     = 67,
	ChocoboCarriageClear                     = 68,
	ChocoboCarriageComplete                  = 69,
	ChocoboCarriageBefore2                   = 70,
	GatheringGrass                           = 71,
	GatheringGrassRare                       = 72,
	GatheringStones                          = 73,
	GatheringStonesRare                      = 74,
	GatheringWood                            = 75,
	GatheringWoodRare                        = 76,
	GatheringOthers                          = 77,
	GatheringOthersRare                      = 78,
	GatheringPowerUp                         = 79,
	Town                                     = 80,
	PlaceName                                = 81,
	TownBefore                               = 82,
	PlaceNameBefore                          = 83,
	BookShop                                 = 84,
	BulletinBoardWithQuest                   = 85,
	BulletinBoardNoQuest                     = 86,
	SubjugationPointRareBefore               = 87,
	SubjugationPointRareAfter                = 88,
	SubjugationPointRareClear                = 89,
	SubjugationPointRareComplete             = 90,
	SubjugationPointRareBefore2              = 91,
	MiniGameR1                               = 92,
	MiniGameR1Cleared                        = 93,
	MiniGameR2                               = 94,
	MiniGameR2Cleared                        = 95,
	MiniGameR3                               = 96,
	MiniGameR3Cleared                        = 97,
	MiniGameR4                               = 98,
	MiniGameR4Cleared                        = 99,
	MiniGameR5                               = 100,
	MiniGameR5Cleared                        = 101,
	MiniGameR6                               = 102,
	MiniGameR6Cleared                        = 103,
	ChocoboStable                            = 104,
	GatheringMetal                           = 105,
	GatheringMetalRare                       = 106,
	LikabilityLow                            = 107,
	LikabilityMiddle                         = 108,
	LikabilityHigh                           = 109,
	SubStoryActive                           = 110,
	Flag                                     = 111,
	BookVendingMachine                       = 112,
	ChangingRoom                             = 113,
	MiniGame                                 = 114,
	TalkLikabilityLow                        = 115,
	TalkLikabilityMiddle                     = 116,
	TalkLikabilityHigh                       = 117,
	LookingForLove                           = 118,
	HubDestination                           = 119,
	Port                                     = 120,
	PointWarp                                = 121,
	PointExchangeShop                        = 122,
	LifeStreamGimmick                        = 123,
	GravityGimmick                           = 124,
	Ropeway                                  = 125,
	Buggy                                    = 126,
	Ship                                     = 127,
	ChocoboCarriage                          = 128,
	JumpStand                                = 129,
	QuestAfter                               = 130,
	SubStoryIntermediate                     = 131,
	SwimsuitShop                             = 132,
	TelephoneBox                             = 133,
	Heliport                                 = 134,
	Likability1                              = 135,
	Likability2                              = 136,
	Likability3                              = 137,
	Likability4                              = 138,
	Likability5                              = 139,
	Likability6                              = 140,
	Likability7                              = 141,
	TalkLikability1                          = 142,
	TalkLikability2                          = 143,
	TalkLikability3                          = 144,
	TalkLikability4                          = 145,
	TalkLikability5                          = 146,
	TalkLikability6                          = 147,
	TalkLikability7                          = 148,
	SBScooter                                = 149,
	JumpStandDisable                         = 150,
	PhotoCleared                             = 151,
	LocationPoint                            = 152,
	Treasure                                 = 153,
	Piano                                    = 154,
	ChocoboCaptureStone                      = 155,
	ChocoboCaptureGreens                     = 156,
	MiniGameR7                               = 157,
	MiniGameR7Cleared                        = 158,
	MiniGameR8                               = 159,
	MiniGameR8Cleared                        = 160,
	MiniGameR9                               = 161,
	MiniGameR9Cleared                        = 162,
	MiniGameR10                              = 163,
	MiniGameR10Cleared                       = 164,
	Talk                                     = 165,
	PhotoModeFilter                          = 166,
	Chewing                                  = 167,
	PhotoSpot                                = 168,
	TreasureClear                            = 169,
	PhotoSpotClear                           = 170,
	SubStoryMemo                             = 171,
	SubStoryChocobo                          = 172,
	SubStoryMemoActive                       = 173,
	SubStoryChocoboActive                    = 174,
	SubStoryLifeSpot                         = 175,
	SubStoryLifeSpotActive                   = 176,
	MiniGameR11                              = 177,
	MiniGameR11Cleared                       = 178,
	VendingMachineInTown                     = 179,
	BookVendingMachineInTown                 = 180,
	ZipLine                                  = 181,
	VendingMachinesAndBench                  = 182,
	Bench                                    = 183,
	PianoMiniGame                            = 184,
	TreasureBefore                           = 185,
	ChocoboShop                              = 186,
	PianoStool                               = 187,
	CampPoint                                = 188,
	CardShop                                 = 189,
	SubStorySuspended                        = 190,
	PhotoModeFilterClear                     = 191,
	ItemAnimalClear                          = 192,
	LikabilityCaitSith                       = 193,
	MiniGameWithMission                      = 194,
	PianoMiniGameWithMission                 = 195,
	TreasurePort                             = 196,
	TreasurePortClear                        = 197,
	TreasurePortBefore                       = 198,
	EEndMenuMapIconKind_MAX                  = 199,
};

// Enum EndDataBase.EEndFavPointSortType
// NumValues: 0x0004
enum class EEndFavPointSortType : uint8
{
	EEndFavPointSortType_None                = 0,
	EEndFavPointSortType_Chapter08           = 1,
	EEndFavPointSortType_Chapter12           = 2,
	EEndFavPointSortType_MAX                 = 3,
};

// Enum EndDataBase.EPlayerStreamType
// NumValues: 0x0004
enum class EPlayerStreamType : uint8
{
	Default                                  = 0,
	VRSummon                                 = 1,
	VRSummonReturn                           = 2,
	EPlayerStreamType_MAX                    = 3,
};

// Enum EndDataBase.EPlayerStatus
// NumValues: 0x0008
enum class EPlayerStatus : uint8
{
	EPlayerType_NONE                         = 0,
	EPlayerType_PARTY                        = 1,
	EPlayerType_GUEST                        = 2,
	EPlayerType_CACHE                        = 3,
	EPlayerType_GUEST_Battle                 = 4,
	EPlayerType_RESERVE                      = 5,
	EPlayerType_BATTLE_AWAY                  = 6,
	EPlayerType_MAX                          = 7,
};

// Enum EndDataBase.EPlayerSpecType
// NumValues: 0x0004
enum class EPlayerSpecType : uint8
{
	Normal                                   = 0,
	Reserve                                  = 1,
	NoBattle                                 = 2,
	Max                                      = 3,
};

// Enum EndDataBase.EPlayerType
// NumValues: 0x0012
enum class EPlayerType : uint8
{
	CLOUD                                    = 0,
	BARRET                                   = 1,
	TIFA                                     = 2,
	AERITH                                   = 3,
	REDXIII                                  = 4,
	YUFFIE                                   = 5,
	CAITSITH                                 = 6,
	ZACK                                     = 7,
	SEPHIROTH                                = 8,
	VINCENT                                  = 9,
	CID                                      = 10,
	AERITH_AGE7                              = 11,
	Reserve_1                                = 12,
	Reserve_2                                = 13,
	Reserve_3                                = 14,
	MAX                                      = 15,
	ALL                                      = 15,
	NONE                                     = 16,
};

// Enum EndDataBase.EEquipmentType
// NumValues: 0x0003
enum class EEquipmentType : uint8
{
	EEquipmentType_PLAYER                    = 0,
	EEquipmentType_WEAPON                    = 1,
	EEquipmentType_MAX                       = 2,
};

// Enum EndDataBase.EShortCutCommandType
// NumValues: 0x0007
enum class EShortCutCommandType : uint8
{
	EShortCutCommandType_FACEBUTTON_LEFT     = 0,
	EShortCutCommandType_L1_FACEBUTTON_TOP   = 1,
	EShortCutCommandType_L1_FACEBUTTON_BOTTOM = 2,
	EShortCutCommandType_FACEBUTTON_TOP      = 3,
	EShortCutCommandType_L1_FACEBUTTON_LEFT  = 4,
	EShortCutCommandType_L1_FACEBUTTON_RIGHT = 5,
	EShortCutCommandType_MAX                 = 6,
};

// Enum EndDataBase.ECommandType
// NumValues: 0x0007
enum class ECommandType : uint8
{
	ECommandType_ABILITY                     = 0,
	ECommandType_MAGIC                       = 1,
	ECommandType_LIMIT                       = 2,
	ECommandType_SUMMON                      = 3,
	ECommandType_ITEM                        = 4,
	ECommandType_COMBINATION                 = 5,
	ECommandType_MAX                         = 6,
};

// Enum EndDataBase.ECommandInfoType
// NumValues: 0x0006
enum class ECommandInfoType : uint8
{
	BASE                                     = 0,
	MAGIC_ABILITY                            = 1,
	MUG_ABILITY                              = 2,
	WEAPON_ABILITY                           = 3,
	CHARACTER_ABILITY                        = 4,
	ECommandInfoType_MAX                     = 5,
};

// Enum EndDataBase.EEndSnapSaveDataPriority
// NumValues: 0x000A
enum class EEndSnapSaveDataPriority : uint8
{
	None                                     = 0,
	MainMenuSave                             = 1,
	SnapSave2nd                              = 2,
	EncountCaution                           = 3,
	MainMenuClose                            = 4,
	EncountStart                             = 5,
	ActionControlLift                        = 6,
	LevelPlanner                             = 7,
	ForceLevelPlanner                        = 8,
	EEndSnapSaveDataPriority_MAX             = 9,
};

// ScriptStruct EndDataBase.EndPlayerStatus
// 0x0038 (0x0038 - 0x0000)
struct FEndPlayerStatus final
{
public:
	int32                                         HPMax;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MPMax;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicsAttack;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicsDefense;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefense;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Strength;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magic;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vitality;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Spirit;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Luck;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalRate;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dexterity;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPlayerStatus) == 0x000004, "Wrong alignment on FEndPlayerStatus");
static_assert(sizeof(FEndPlayerStatus) == 0x000038, "Wrong size on FEndPlayerStatus");
static_assert(offsetof(FEndPlayerStatus, HPMax) == 0x000000, "Member 'FEndPlayerStatus::HPMax' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, MPMax) == 0x000004, "Member 'FEndPlayerStatus::MPMax' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, PhysicsAttack) == 0x000008, "Member 'FEndPlayerStatus::PhysicsAttack' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, MagicAttack) == 0x00000C, "Member 'FEndPlayerStatus::MagicAttack' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, PhysicsDefense) == 0x000010, "Member 'FEndPlayerStatus::PhysicsDefense' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, MagicDefense) == 0x000014, "Member 'FEndPlayerStatus::MagicDefense' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Strength) == 0x000018, "Member 'FEndPlayerStatus::Strength' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Magic) == 0x00001C, "Member 'FEndPlayerStatus::Magic' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Vitality) == 0x000020, "Member 'FEndPlayerStatus::Vitality' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Spirit) == 0x000024, "Member 'FEndPlayerStatus::Spirit' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Luck) == 0x000028, "Member 'FEndPlayerStatus::Luck' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, CriticalRate) == 0x00002C, "Member 'FEndPlayerStatus::CriticalRate' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Dexterity) == 0x000030, "Member 'FEndPlayerStatus::Dexterity' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Level) == 0x000034, "Member 'FEndPlayerStatus::Level' has a wrong offset!");

}

