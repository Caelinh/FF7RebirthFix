#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Slot

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Slot.Slot_C
// 0x00D8 (0x04C0 - 0x03E8)
class USlot_C final : public UEndMenuLimitBreakSlotOwner
{
public:
	class UWidgetAnimation*                       OutSuspend;                                        // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out2;                                              // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out;                                               // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              Effect;                                            // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_00;                                         // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_01;                                         // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_02;                                         // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_03;                                         // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_04;                                         // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_Frame_00;                                   // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_Frame_01;                                   // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_Frame_02;                                   // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Frame_00;                                          // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Frame_01;                                          // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Frame_02;                                          // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Line_00;                                           // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Line_01;                                           // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Ring1;                                             // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Ring2;                                             // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Ring3;                                             // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Shadow_00;                                         // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Shadow_01;                                         // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Shadow_02;                                         // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlot_Cell_C*                           Slot_Cell1;                                        // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlot_Cell_C*                           Slot_Cell2;                                        // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlot_Cell_C*                           Slot_Cell3;                                        // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Slot_C">();
	}
	static class USlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlot_C>();
	}
};
static_assert(alignof(USlot_C) == 0x000008, "Wrong alignment on USlot_C");
static_assert(sizeof(USlot_C) == 0x0004C0, "Wrong size on USlot_C");
static_assert(offsetof(USlot_C, OutSuspend) == 0x0003E8, "Member 'USlot_C::OutSuspend' has a wrong offset!");
static_assert(offsetof(USlot_C, Out2) == 0x0003F0, "Member 'USlot_C::Out2' has a wrong offset!");
static_assert(offsetof(USlot_C, Out) == 0x0003F8, "Member 'USlot_C::Out' has a wrong offset!");
static_assert(offsetof(USlot_C, In) == 0x000400, "Member 'USlot_C::In' has a wrong offset!");
static_assert(offsetof(USlot_C, Effect) == 0x000408, "Member 'USlot_C::Effect' has a wrong offset!");
static_assert(offsetof(USlot_C, Effect_00) == 0x000410, "Member 'USlot_C::Effect_00' has a wrong offset!");
static_assert(offsetof(USlot_C, Effect_01) == 0x000418, "Member 'USlot_C::Effect_01' has a wrong offset!");
static_assert(offsetof(USlot_C, Effect_02) == 0x000420, "Member 'USlot_C::Effect_02' has a wrong offset!");
static_assert(offsetof(USlot_C, Effect_03) == 0x000428, "Member 'USlot_C::Effect_03' has a wrong offset!");
static_assert(offsetof(USlot_C, Effect_04) == 0x000430, "Member 'USlot_C::Effect_04' has a wrong offset!");
static_assert(offsetof(USlot_C, Effect_Frame_00) == 0x000438, "Member 'USlot_C::Effect_Frame_00' has a wrong offset!");
static_assert(offsetof(USlot_C, Effect_Frame_01) == 0x000440, "Member 'USlot_C::Effect_Frame_01' has a wrong offset!");
static_assert(offsetof(USlot_C, Effect_Frame_02) == 0x000448, "Member 'USlot_C::Effect_Frame_02' has a wrong offset!");
static_assert(offsetof(USlot_C, Frame_00) == 0x000450, "Member 'USlot_C::Frame_00' has a wrong offset!");
static_assert(offsetof(USlot_C, Frame_01) == 0x000458, "Member 'USlot_C::Frame_01' has a wrong offset!");
static_assert(offsetof(USlot_C, Frame_02) == 0x000460, "Member 'USlot_C::Frame_02' has a wrong offset!");
static_assert(offsetof(USlot_C, Line_00) == 0x000468, "Member 'USlot_C::Line_00' has a wrong offset!");
static_assert(offsetof(USlot_C, Line_01) == 0x000470, "Member 'USlot_C::Line_01' has a wrong offset!");
static_assert(offsetof(USlot_C, Ring1) == 0x000478, "Member 'USlot_C::Ring1' has a wrong offset!");
static_assert(offsetof(USlot_C, Ring2) == 0x000480, "Member 'USlot_C::Ring2' has a wrong offset!");
static_assert(offsetof(USlot_C, Ring3) == 0x000488, "Member 'USlot_C::Ring3' has a wrong offset!");
static_assert(offsetof(USlot_C, Shadow_00) == 0x000490, "Member 'USlot_C::Shadow_00' has a wrong offset!");
static_assert(offsetof(USlot_C, Shadow_01) == 0x000498, "Member 'USlot_C::Shadow_01' has a wrong offset!");
static_assert(offsetof(USlot_C, Shadow_02) == 0x0004A0, "Member 'USlot_C::Shadow_02' has a wrong offset!");
static_assert(offsetof(USlot_C, Slot_Cell1) == 0x0004A8, "Member 'USlot_C::Slot_Cell1' has a wrong offset!");
static_assert(offsetof(USlot_C, Slot_Cell2) == 0x0004B0, "Member 'USlot_C::Slot_Cell2' has a wrong offset!");
static_assert(offsetof(USlot_C, Slot_Cell3) == 0x0004B8, "Member 'USlot_C::Slot_Cell3' has a wrong offset!");

}

