#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MobPrefabTemplate_LookAtAndContact_04

#include "Basic.hpp"

#include "MobPrefabTemplate_LookAtAndContact_04_classes.hpp"
#include "MobPrefabTemplate_LookAtAndContact_04_parameters.hpp"


namespace SDK
{

// Function MobPrefabTemplate_LookAtAndContact_04.MobPrefabTemplate_LookAtAndContact_04_C.ExecuteUbergraph_MobPrefabTemplate_LookAtAndContact_04
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMobPrefabTemplate_LookAtAndContact_04_C::ExecuteUbergraph_MobPrefabTemplate_LookAtAndContact_04(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobPrefabTemplate_LookAtAndContact_04_C", "ExecuteUbergraph_MobPrefabTemplate_LookAtAndContact_04");

	Params::MobPrefabTemplate_LookAtAndContact_04_C_ExecuteUbergraph_MobPrefabTemplate_LookAtAndContact_04 Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MobPrefabTemplate_LookAtAndContact_04.MobPrefabTemplate_LookAtAndContact_04_C.OnPreUpdateRegistry
// (Event, Public, BlueprintEvent)

void AMobPrefabTemplate_LookAtAndContact_04_C::OnPreUpdateRegistry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobPrefabTemplate_LookAtAndContact_04_C", "OnPreUpdateRegistry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MobPrefabTemplate_LookAtAndContact_04.MobPrefabTemplate_LookAtAndContact_04_C.GetContext
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MobId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnableLookAt                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EnableContact                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ContactDuringReaction                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ForwardLeftMotion                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ForwardRightMotion                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BackLeftMotion                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BackRightMotion                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ContactBlendTime                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, class FName>          ContactPropagateMotionTable                            (Parm, OutParm)
// TMap<class FName, class FName>          ContactPropagateForwardLeftMotionTable                 (Parm, OutParm)
// TMap<class FName, class FName>          ContactPropagateForwardRightMotionTable                (Parm, OutParm)
// TMap<class FName, class FName>          ContactPropagateBackLeftMotionTable                    (Parm, OutParm)
// TMap<class FName, class FName>          ContactPropagateBackRightMotionTable                   (Parm, OutParm)
// float                                   ContactPropagateBlendTime                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ContactOutMotionName                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ContactOutBlendTime                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ContactOutReplaceBaseMotionName                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMobPrefabTemplate_LookAtAndContact_04_C::GetContext(class FName MobId, bool* EnableLookAt, bool* EnableContact, bool* ContactDuringReaction, class FName* ForwardLeftMotion, class FName* ForwardRightMotion, class FName* BackLeftMotion, class FName* BackRightMotion, float* ContactBlendTime, TMap<class FName, class FName>* ContactPropagateMotionTable, TMap<class FName, class FName>* ContactPropagateForwardLeftMotionTable, TMap<class FName, class FName>* ContactPropagateForwardRightMotionTable, TMap<class FName, class FName>* ContactPropagateBackLeftMotionTable, TMap<class FName, class FName>* ContactPropagateBackRightMotionTable, float* ContactPropagateBlendTime, class FName* ContactOutMotionName, float* ContactOutBlendTime, class FName* ContactOutReplaceBaseMotionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobPrefabTemplate_LookAtAndContact_04_C", "GetContext");

	Params::MobPrefabTemplate_LookAtAndContact_04_C_GetContext Parms{};

	Parms.MobId = MobId;

	UObject::ProcessEvent(Func, &Parms);

	if (EnableLookAt != nullptr)
		*EnableLookAt = Parms.EnableLookAt;

	if (EnableContact != nullptr)
		*EnableContact = Parms.EnableContact;

	if (ContactDuringReaction != nullptr)
		*ContactDuringReaction = Parms.ContactDuringReaction;

	if (ForwardLeftMotion != nullptr)
		*ForwardLeftMotion = Parms.ForwardLeftMotion;

	if (ForwardRightMotion != nullptr)
		*ForwardRightMotion = Parms.ForwardRightMotion;

	if (BackLeftMotion != nullptr)
		*BackLeftMotion = Parms.BackLeftMotion;

	if (BackRightMotion != nullptr)
		*BackRightMotion = Parms.BackRightMotion;

	if (ContactBlendTime != nullptr)
		*ContactBlendTime = Parms.ContactBlendTime;

	if (ContactPropagateMotionTable != nullptr)
		*ContactPropagateMotionTable = std::move(Parms.ContactPropagateMotionTable);

	if (ContactPropagateForwardLeftMotionTable != nullptr)
		*ContactPropagateForwardLeftMotionTable = std::move(Parms.ContactPropagateForwardLeftMotionTable);

	if (ContactPropagateForwardRightMotionTable != nullptr)
		*ContactPropagateForwardRightMotionTable = std::move(Parms.ContactPropagateForwardRightMotionTable);

	if (ContactPropagateBackLeftMotionTable != nullptr)
		*ContactPropagateBackLeftMotionTable = std::move(Parms.ContactPropagateBackLeftMotionTable);

	if (ContactPropagateBackRightMotionTable != nullptr)
		*ContactPropagateBackRightMotionTable = std::move(Parms.ContactPropagateBackRightMotionTable);

	if (ContactPropagateBlendTime != nullptr)
		*ContactPropagateBlendTime = Parms.ContactPropagateBlendTime;

	if (ContactOutMotionName != nullptr)
		*ContactOutMotionName = Parms.ContactOutMotionName;

	if (ContactOutBlendTime != nullptr)
		*ContactOutBlendTime = Parms.ContactOutBlendTime;

	if (ContactOutReplaceBaseMotionName != nullptr)
		*ContactOutReplaceBaseMotionName = Parms.ContactOutReplaceBaseMotionName;
}

}

