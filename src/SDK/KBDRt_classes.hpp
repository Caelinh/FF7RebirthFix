#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KBDRt

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "BonamikRt_structs.hpp"
#include "KBDRt_structs.hpp"


namespace SDK
{

// Class KBDRt.SQEX_AnimNotify_Bonamik_Enable
// 0x0018 (0x0050 - 0x0038)
class USQEX_AnimNotify_Bonamik_Enable final : public UAnimNotify
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_On;                                              // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_Enable">();
	}
	static class USQEX_AnimNotify_Bonamik_Enable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_Enable>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_Enable) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_Enable");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_Enable) == 0x000050, "Wrong size on USQEX_AnimNotify_Bonamik_Enable");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Enable, m_Groups) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_Enable::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Enable, m_On) == 0x000048, "Member 'USQEX_AnimNotify_Bonamik_Enable::m_On' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_EnableGroundCollision
// 0x0018 (0x0050 - 0x0038)
class USQEX_AnimNotify_Bonamik_EnableGroundCollision final : public UAnimNotify
{
public:
	bool                                          m_Enable;                                          // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_Groups;                                          // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_EnableGroundCollision">();
	}
	static class USQEX_AnimNotify_Bonamik_EnableGroundCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_EnableGroundCollision>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_EnableGroundCollision) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_EnableGroundCollision");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_EnableGroundCollision) == 0x000050, "Wrong size on USQEX_AnimNotify_Bonamik_EnableGroundCollision");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_EnableGroundCollision, m_Enable) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_EnableGroundCollision::m_Enable' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_EnableGroundCollision, m_Groups) == 0x000040, "Member 'USQEX_AnimNotify_Bonamik_EnableGroundCollision::m_Groups' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_Ensemble
// 0x0008 (0x0040 - 0x0038)
class USQEX_AnimNotify_Bonamik_Ensemble final : public UAnimNotify
{
public:
	class FName                                   EnsembleName;                                      // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_Ensemble">();
	}
	static class USQEX_AnimNotify_Bonamik_Ensemble* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_Ensemble>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_Ensemble) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_Ensemble");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_Ensemble) == 0x000040, "Wrong size on USQEX_AnimNotify_Bonamik_Ensemble");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Ensemble, EnsembleName) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_Ensemble::EnsembleName' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_ResetAndPreRoll
// 0x0008 (0x0040 - 0x0038)
class USQEX_AnimNotify_Bonamik_ResetAndPreRoll final : public UAnimNotify
{
public:
	bool                                          m_Reset;                                           // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_PreRoll;                                         // 0x003C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_ResetAndPreRoll">();
	}
	static class USQEX_AnimNotify_Bonamik_ResetAndPreRoll* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_ResetAndPreRoll>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_ResetAndPreRoll) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_ResetAndPreRoll");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_ResetAndPreRoll) == 0x000040, "Wrong size on USQEX_AnimNotify_Bonamik_ResetAndPreRoll");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ResetAndPreRoll, m_Reset) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_ResetAndPreRoll::m_Reset' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ResetAndPreRoll, m_PreRoll) == 0x00003C, "Member 'USQEX_AnimNotify_Bonamik_ResetAndPreRoll::m_PreRoll' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_RestoreDefaultParams
// 0x0000 (0x0038 - 0x0038)
class USQEX_AnimNotify_Bonamik_RestoreDefaultParams final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_RestoreDefaultParams">();
	}
	static class USQEX_AnimNotify_Bonamik_RestoreDefaultParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_RestoreDefaultParams>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_RestoreDefaultParams) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_RestoreDefaultParams");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_RestoreDefaultParams) == 0x000038, "Wrong size on USQEX_AnimNotify_Bonamik_RestoreDefaultParams");

// Class KBDRt.SQEX_AnimNotify_Bonamik_ScaleGroupParams
// 0x00D0 (0x0108 - 0x0038)
class USQEX_AnimNotify_Bonamik_ScaleGroupParams final : public UAnimNotify
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_ChangeInnerCone;                                 // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_InnerConeScale;                                  // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeOuterCone;                                 // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_OuterConeScale;                                  // 0x0054(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeLocalForce;                                // 0x0058(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LocalForceScale;                                 // 0x005C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeWindScale;                                 // 0x0060(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupWindScale;                                  // 0x0064(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeMassScale;                                 // 0x0068(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupMassScale;                                  // 0x006C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeParkRate;                                  // 0x0070(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupParkRateScale;                              // 0x0074(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorFictitiousForce;                      // 0x0078(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorFictitiousForceScale;                  // 0x007C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorCentrifugal;                          // 0x0080(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorCentrifugalScale;                      // 0x0084(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorImpulse;                              // 0x0088(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorImpulseScale;                          // 0x008C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorRotDrag;                              // 0x0090(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorRotDragScale;                          // 0x0094(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorTransDrag;                            // 0x0098(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorTransDragScale;                        // 0x009C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootFictitiousForce;                  // 0x00A0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootFictitiousForceScale;              // 0x00A4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootCentrifugal;                      // 0x00A8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootCentrifugalScale;                  // 0x00AC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootImpulse;                          // 0x00B0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootImpulseScale;                      // 0x00B4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootRotDrag;                          // 0x00B8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootRotDragScale;                      // 0x00BC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootTransDrag;                        // 0x00C0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootTransDragScale;                    // 0x00C4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyDrag;                                  // 0x00C8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyDragScale;                              // 0x00CC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyLift;                                  // 0x00D0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyLiftScale;                              // 0x00D4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyDamping;                               // 0x00D8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyDampingScale;                           // 0x00DC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyConstraintDamping;                     // 0x00E0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyConstraintDampingScale;                 // 0x00E4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyVelocityDamping;                       // 0x00E8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyVelocityDampingScale;                   // 0x00EC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyRadius;                                // 0x00F0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyRadiusScale;                            // 0x00F4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyFriction;                              // 0x00F8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyFrictionScale;                          // 0x00FC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyGravity;                               // 0x0100(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyGravityScale;                           // 0x0104(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_ScaleGroupParams">();
	}
	static class USQEX_AnimNotify_Bonamik_ScaleGroupParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_ScaleGroupParams>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_ScaleGroupParams) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_ScaleGroupParams");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_ScaleGroupParams) == 0x000108, "Wrong size on USQEX_AnimNotify_Bonamik_ScaleGroupParams");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_Groups) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeInnerCone) == 0x000048, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeInnerCone' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_InnerConeScale) == 0x00004C, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_InnerConeScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeOuterCone) == 0x000050, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeOuterCone' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_OuterConeScale) == 0x000054, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_OuterConeScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeLocalForce) == 0x000058, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeLocalForce' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_LocalForceScale) == 0x00005C, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_LocalForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeWindScale) == 0x000060, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupWindScale) == 0x000064, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeMassScale) == 0x000068, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeMassScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupMassScale) == 0x00006C, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupMassScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeParkRate) == 0x000070, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeParkRate' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupParkRateScale) == 0x000074, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupParkRateScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeActorFictitiousForce) == 0x000078, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeActorFictitiousForce' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupActorFictitiousForceScale) == 0x00007C, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupActorFictitiousForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeActorCentrifugal) == 0x000080, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeActorCentrifugal' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupActorCentrifugalScale) == 0x000084, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupActorCentrifugalScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeActorImpulse) == 0x000088, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeActorImpulse' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupActorImpulseScale) == 0x00008C, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupActorImpulseScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeActorRotDrag) == 0x000090, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeActorRotDrag' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupActorRotDragScale) == 0x000094, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupActorRotDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeActorTransDrag) == 0x000098, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeActorTransDrag' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupActorTransDragScale) == 0x00009C, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupActorTransDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeChainRootFictitiousForce) == 0x0000A0, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeChainRootFictitiousForce' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupChainRootFictitiousForceScale) == 0x0000A4, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupChainRootFictitiousForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeChainRootCentrifugal) == 0x0000A8, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeChainRootCentrifugal' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupChainRootCentrifugalScale) == 0x0000AC, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupChainRootCentrifugalScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeChainRootImpulse) == 0x0000B0, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeChainRootImpulse' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupChainRootImpulseScale) == 0x0000B4, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupChainRootImpulseScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeChainRootRotDrag) == 0x0000B8, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeChainRootRotDrag' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupChainRootRotDragScale) == 0x0000BC, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupChainRootRotDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeChainRootTransDrag) == 0x0000C0, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeChainRootTransDrag' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupChainRootTransDragScale) == 0x0000C4, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupChainRootTransDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeBodyDrag) == 0x0000C8, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeBodyDrag' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupBodyDragScale) == 0x0000CC, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupBodyDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeBodyLift) == 0x0000D0, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeBodyLift' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupBodyLiftScale) == 0x0000D4, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupBodyLiftScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeBodyDamping) == 0x0000D8, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeBodyDamping' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupBodyDampingScale) == 0x0000DC, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupBodyDampingScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeBodyConstraintDamping) == 0x0000E0, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeBodyConstraintDamping' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupBodyConstraintDampingScale) == 0x0000E4, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupBodyConstraintDampingScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeBodyVelocityDamping) == 0x0000E8, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeBodyVelocityDamping' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupBodyVelocityDampingScale) == 0x0000EC, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupBodyVelocityDampingScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeBodyRadius) == 0x0000F0, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeBodyRadius' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupBodyRadiusScale) == 0x0000F4, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupBodyRadiusScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeBodyFriction) == 0x0000F8, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeBodyFriction' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupBodyFrictionScale) == 0x0000FC, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupBodyFrictionScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeBodyGravity) == 0x000100, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeBodyGravity' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupBodyGravityScale) == 0x000104, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupBodyGravityScale' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset
// 0x0018 (0x0050 - 0x0038)
class USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset final : public UAnimNotify
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USQEX_Bonamik_ScaleGroupParamsPreset*   m_Preset;                                          // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset">();
	}
	static class USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset) == 0x000050, "Wrong size on USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset, m_Groups) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset, m_Preset) == 0x000048, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParamsPreset::m_Preset' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_SpeedRate
// 0x0008 (0x0040 - 0x0038)
class USQEX_AnimNotify_Bonamik_SpeedRate final : public UAnimNotify
{
public:
	float                                         m_SpeedRate;                                       // 0x0038(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Time;                                            // 0x003C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_SpeedRate">();
	}
	static class USQEX_AnimNotify_Bonamik_SpeedRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_SpeedRate>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_SpeedRate) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_SpeedRate");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_SpeedRate) == 0x000040, "Wrong size on USQEX_AnimNotify_Bonamik_SpeedRate");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_SpeedRate, m_SpeedRate) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_SpeedRate::m_SpeedRate' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_SpeedRate, m_Time) == 0x00003C, "Member 'USQEX_AnimNotify_Bonamik_SpeedRate::m_Time' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_Weight
// 0x0018 (0x0050 - 0x0038)
class USQEX_AnimNotify_Bonamik_Weight final : public UAnimNotify
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_BonamikWeight;                                   // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Time;                                            // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_Weight">();
	}
	static class USQEX_AnimNotify_Bonamik_Weight* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_Weight>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_Weight) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_Weight");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_Weight) == 0x000050, "Wrong size on USQEX_AnimNotify_Bonamik_Weight");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Weight, m_Groups) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_Weight::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Weight, m_BonamikWeight) == 0x000048, "Member 'USQEX_AnimNotify_Bonamik_Weight::m_BonamikWeight' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Weight, m_Time) == 0x00004C, "Member 'USQEX_AnimNotify_Bonamik_Weight::m_Time' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_Enable
// 0x0018 (0x0048 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_Enable final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_On;                                              // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_Enable">();
	}
	static class USQEX_AnimNotifyState_Bonamik_Enable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_Enable>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_Enable) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_Enable");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_Enable) == 0x000048, "Wrong size on USQEX_AnimNotifyState_Bonamik_Enable");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Enable, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_Enable::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Enable, m_On) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_Enable::m_On' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_EnableGroundCollision
// 0x0018 (0x0048 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_EnableGroundCollision final : public UAnimNotifyState
{
public:
	bool                                          m_Enable;                                          // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_Groups;                                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_EnableGroundCollision">();
	}
	static class USQEX_AnimNotifyState_Bonamik_EnableGroundCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_EnableGroundCollision>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_EnableGroundCollision) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_EnableGroundCollision");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_EnableGroundCollision) == 0x000048, "Wrong size on USQEX_AnimNotifyState_Bonamik_EnableGroundCollision");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_EnableGroundCollision, m_Enable) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_EnableGroundCollision::m_Enable' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_EnableGroundCollision, m_Groups) == 0x000038, "Member 'USQEX_AnimNotifyState_Bonamik_EnableGroundCollision::m_Groups' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_Ensemble
// 0x0008 (0x0038 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_Ensemble final : public UAnimNotifyState
{
public:
	class FName                                   EnsembleName;                                      // 0x0030(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_Ensemble">();
	}
	static class USQEX_AnimNotifyState_Bonamik_Ensemble* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_Ensemble>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_Ensemble) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_Ensemble");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_Ensemble) == 0x000038, "Wrong size on USQEX_AnimNotifyState_Bonamik_Ensemble");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Ensemble, EnsembleName) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_Ensemble::EnsembleName' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_Lerp
// 0x0010 (0x0040 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_Lerp final : public UAnimNotifyState
{
public:
	float                                         Lerp;                                              // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0034(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0038(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_Lerp">();
	}
	static class USQEX_AnimNotifyState_Bonamik_Lerp* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_Lerp>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_Lerp) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_Lerp");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_Lerp) == 0x000040, "Wrong size on USQEX_AnimNotifyState_Bonamik_Lerp");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Lerp, Lerp) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_Lerp::Lerp' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Lerp, BlendInTime) == 0x000034, "Member 'USQEX_AnimNotifyState_Bonamik_Lerp::BlendInTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Lerp, BlendOutTime) == 0x000038, "Member 'USQEX_AnimNotifyState_Bonamik_Lerp::BlendOutTime' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_LocalWind
// 0x0028 (0x0058 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_LocalWind final : public UAnimNotifyState
{
public:
	class USQEX_BonamikWind_Asset*                WindAsset;                                         // 0x0030(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetTranslation;                                 // 0x0038(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0044(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0050(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableWorldWind;                                 // 0x0054(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_LocalWind">();
	}
	static class USQEX_AnimNotifyState_Bonamik_LocalWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_LocalWind>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_LocalWind) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_LocalWind");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_LocalWind) == 0x000058, "Wrong size on USQEX_AnimNotifyState_Bonamik_LocalWind");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_LocalWind, WindAsset) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_LocalWind::WindAsset' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_LocalWind, OffsetTranslation) == 0x000038, "Member 'USQEX_AnimNotifyState_Bonamik_LocalWind::OffsetTranslation' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_LocalWind, OffsetRotation) == 0x000044, "Member 'USQEX_AnimNotifyState_Bonamik_LocalWind::OffsetRotation' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_LocalWind, Scale) == 0x000050, "Member 'USQEX_AnimNotifyState_Bonamik_LocalWind::Scale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_LocalWind, bDisableWorldWind) == 0x000054, "Member 'USQEX_AnimNotifyState_Bonamik_LocalWind::bDisableWorldWind' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_LocalWindDirect
// 0x0280 (0x02B0 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_LocalWindDirect final : public UAnimNotifyState
{
public:
	struct FSQEX_BonamikWind_Desc                 WindDesc;                                          // 0x0030(0x0260)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector                                OffsetTranslation;                                 // 0x0290(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x029C(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x02A8(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableWorldWind;                                 // 0x02AC(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_LocalWindDirect">();
	}
	static class USQEX_AnimNotifyState_Bonamik_LocalWindDirect* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_LocalWindDirect>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_LocalWindDirect) == 0x000010, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_LocalWindDirect");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_LocalWindDirect) == 0x0002B0, "Wrong size on USQEX_AnimNotifyState_Bonamik_LocalWindDirect");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_LocalWindDirect, WindDesc) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_LocalWindDirect::WindDesc' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_LocalWindDirect, OffsetTranslation) == 0x000290, "Member 'USQEX_AnimNotifyState_Bonamik_LocalWindDirect::OffsetTranslation' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_LocalWindDirect, OffsetRotation) == 0x00029C, "Member 'USQEX_AnimNotifyState_Bonamik_LocalWindDirect::OffsetRotation' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_LocalWindDirect, Scale) == 0x0002A8, "Member 'USQEX_AnimNotifyState_Bonamik_LocalWindDirect::Scale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_LocalWindDirect, bDisableWorldWind) == 0x0002AC, "Member 'USQEX_AnimNotifyState_Bonamik_LocalWindDirect::bDisableWorldWind' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_ResetAndPreRoll
// 0x0008 (0x0038 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll final : public UAnimNotifyState
{
public:
	bool                                          m_Reset;                                           // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_PreRoll;                                         // 0x0034(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_ResetAndPreRoll">();
	}
	static class USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll) == 0x000038, "Wrong size on USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll, m_Reset) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll::m_Reset' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll, m_PreRoll) == 0x000034, "Member 'USQEX_AnimNotifyState_Bonamik_ResetAndPreRoll::m_PreRoll' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_ScaleGroupParams
// 0x00D0 (0x0100 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_ScaleGroupParams final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_ChangeInnerCone;                                 // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_InnerConeScale;                                  // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeOuterCone;                                 // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_OuterConeScale;                                  // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeLocalForce;                                // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LocalForceScale;                                 // 0x0054(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeWindScale;                                 // 0x0058(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupWindScale;                                  // 0x005C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeMassScale;                                 // 0x0060(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupMassScale;                                  // 0x0064(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeParkRate;                                  // 0x0068(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupParkRateScale;                              // 0x006C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorFictitiousForce;                      // 0x0070(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorFictitiousForceScale;                  // 0x0074(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorCentrifugal;                          // 0x0078(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorCentrifugalScale;                      // 0x007C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorImpulse;                              // 0x0080(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorImpulseScale;                          // 0x0084(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorRotDrag;                              // 0x0088(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorRotDragScale;                          // 0x008C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorTransDrag;                            // 0x0090(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorTransDragScale;                        // 0x0094(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootFictitiousForce;                  // 0x0098(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootFictitiousForceScale;              // 0x009C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootCentrifugal;                      // 0x00A0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootCentrifugalScale;                  // 0x00A4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootImpulse;                          // 0x00A8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootImpulseScale;                      // 0x00AC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootRotDrag;                          // 0x00B0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootRotDragScale;                      // 0x00B4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootTransDrag;                        // 0x00B8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootTransDragScale;                    // 0x00BC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyDrag;                                  // 0x00C0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyDragScale;                              // 0x00C4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyLift;                                  // 0x00C8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyLiftScale;                              // 0x00CC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyDamping;                               // 0x00D0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyDampingScale;                           // 0x00D4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyConstraintDamping;                     // 0x00D8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyConstraintDampingScale;                 // 0x00DC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyVelocityDamping;                       // 0x00E0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyVelocityDampingScale;                   // 0x00E4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyRadius;                                // 0x00E8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyRadiusScale;                            // 0x00EC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyFriction;                              // 0x00F0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyFrictionScale;                          // 0x00F4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyGravity;                               // 0x00F8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyGravityScale;                           // 0x00FC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_ScaleGroupParams">();
	}
	static class USQEX_AnimNotifyState_Bonamik_ScaleGroupParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_ScaleGroupParams>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_ScaleGroupParams");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams) == 0x000100, "Wrong size on USQEX_AnimNotifyState_Bonamik_ScaleGroupParams");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeInnerCone) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeInnerCone' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_InnerConeScale) == 0x000044, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_InnerConeScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeOuterCone) == 0x000048, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeOuterCone' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_OuterConeScale) == 0x00004C, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_OuterConeScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeLocalForce) == 0x000050, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeLocalForce' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_LocalForceScale) == 0x000054, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_LocalForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeWindScale) == 0x000058, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupWindScale) == 0x00005C, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeMassScale) == 0x000060, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeMassScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupMassScale) == 0x000064, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupMassScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeParkRate) == 0x000068, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeParkRate' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupParkRateScale) == 0x00006C, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupParkRateScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeActorFictitiousForce) == 0x000070, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeActorFictitiousForce' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupActorFictitiousForceScale) == 0x000074, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupActorFictitiousForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeActorCentrifugal) == 0x000078, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeActorCentrifugal' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupActorCentrifugalScale) == 0x00007C, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupActorCentrifugalScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeActorImpulse) == 0x000080, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeActorImpulse' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupActorImpulseScale) == 0x000084, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupActorImpulseScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeActorRotDrag) == 0x000088, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeActorRotDrag' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupActorRotDragScale) == 0x00008C, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupActorRotDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeActorTransDrag) == 0x000090, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeActorTransDrag' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupActorTransDragScale) == 0x000094, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupActorTransDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeChainRootFictitiousForce) == 0x000098, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeChainRootFictitiousForce' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupChainRootFictitiousForceScale) == 0x00009C, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupChainRootFictitiousForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeChainRootCentrifugal) == 0x0000A0, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeChainRootCentrifugal' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupChainRootCentrifugalScale) == 0x0000A4, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupChainRootCentrifugalScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeChainRootImpulse) == 0x0000A8, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeChainRootImpulse' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupChainRootImpulseScale) == 0x0000AC, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupChainRootImpulseScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeChainRootRotDrag) == 0x0000B0, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeChainRootRotDrag' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupChainRootRotDragScale) == 0x0000B4, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupChainRootRotDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeChainRootTransDrag) == 0x0000B8, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeChainRootTransDrag' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupChainRootTransDragScale) == 0x0000BC, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupChainRootTransDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeBodyDrag) == 0x0000C0, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeBodyDrag' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupBodyDragScale) == 0x0000C4, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupBodyDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeBodyLift) == 0x0000C8, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeBodyLift' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupBodyLiftScale) == 0x0000CC, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupBodyLiftScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeBodyDamping) == 0x0000D0, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeBodyDamping' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupBodyDampingScale) == 0x0000D4, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupBodyDampingScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeBodyConstraintDamping) == 0x0000D8, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeBodyConstraintDamping' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupBodyConstraintDampingScale) == 0x0000DC, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupBodyConstraintDampingScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeBodyVelocityDamping) == 0x0000E0, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeBodyVelocityDamping' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupBodyVelocityDampingScale) == 0x0000E4, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupBodyVelocityDampingScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeBodyRadius) == 0x0000E8, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeBodyRadius' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupBodyRadiusScale) == 0x0000EC, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupBodyRadiusScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeBodyFriction) == 0x0000F0, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeBodyFriction' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupBodyFrictionScale) == 0x0000F4, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupBodyFrictionScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeBodyGravity) == 0x0000F8, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeBodyGravity' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupBodyGravityScale) == 0x0000FC, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupBodyGravityScale' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset
// 0x0018 (0x0048 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USQEX_Bonamik_ScaleGroupParamsPreset*   m_Preset;                                          // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset">();
	}
	static class USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset) == 0x000048, "Wrong size on USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset, m_Preset) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParamsPreset::m_Preset' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_SpeedRate
// 0x0018 (0x0048 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_SpeedRate final : public UAnimNotifyState
{
public:
	float                                         m_BeginSpeedRate;                                  // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BeginBlendTime;                                  // 0x0034(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_RestoreOriginalSpeedRate;                        // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_EndSpeedRate;                                    // 0x003C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EndBlendTime;                                    // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_SpeedRate">();
	}
	static class USQEX_AnimNotifyState_Bonamik_SpeedRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_SpeedRate>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_SpeedRate) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_SpeedRate");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_SpeedRate) == 0x000048, "Wrong size on USQEX_AnimNotifyState_Bonamik_SpeedRate");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_BeginSpeedRate) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_BeginSpeedRate' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_BeginBlendTime) == 0x000034, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_BeginBlendTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_RestoreOriginalSpeedRate) == 0x000038, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_RestoreOriginalSpeedRate' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_EndSpeedRate) == 0x00003C, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_EndSpeedRate' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_EndBlendTime) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_EndBlendTime' has a wrong offset!");

// Class KBDRt.SQEX_Bonamik_TemporaryCollisionActor
// 0x0000 (0x0228 - 0x0228)
class ASQEX_Bonamik_TemporaryCollisionActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_Bonamik_TemporaryCollisionActor">();
	}
	static class ASQEX_Bonamik_TemporaryCollisionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_Bonamik_TemporaryCollisionActor>();
	}
};
static_assert(alignof(ASQEX_Bonamik_TemporaryCollisionActor) == 0x000008, "Wrong alignment on ASQEX_Bonamik_TemporaryCollisionActor");
static_assert(sizeof(ASQEX_Bonamik_TemporaryCollisionActor) == 0x000228, "Wrong size on ASQEX_Bonamik_TemporaryCollisionActor");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_TemporaryCollision
// 0x00D0 (0x0100 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_TemporaryCollision final : public UAnimNotifyState
{
public:
	TArray<class FName>                           Groups;                                            // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	ESQEX_AnimNotifyState_Bonamik_TemporaryCollision_CollisionType ShapeType;                                         // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxSize;                                           // 0x0044(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Radius;                                            // 0x0050(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CapsuleHalfHeight;                                 // 0x0054(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CollisionTransform;                                // 0x0060(0x0030)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bAttachToSocket;                                   // 0x0090(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0094(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSQEX_AnimNotifyState_Bonamik_TemporaryCollision_ConstraintTransformRules ConstraintTransform;                               // 0x009C(0x0009)(Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bDebugVisibility;                                  // 0x00A5(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugLineThickness;                                // 0x00A8(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 DebugLineColor;                                    // 0x00AC(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B0[0x50];                                      // 0x00B0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_TemporaryCollision">();
	}
	static class USQEX_AnimNotifyState_Bonamik_TemporaryCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_TemporaryCollision>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision) == 0x000010, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_TemporaryCollision");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision) == 0x000100, "Wrong size on USQEX_AnimNotifyState_Bonamik_TemporaryCollision");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, ShapeType) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::ShapeType' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, BoxSize) == 0x000044, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::BoxSize' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, Radius) == 0x000050, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::Radius' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, CapsuleHalfHeight) == 0x000054, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, CollisionTransform) == 0x000060, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::CollisionTransform' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, bAttachToSocket) == 0x000090, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::bAttachToSocket' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, SocketName) == 0x000094, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::SocketName' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, ConstraintTransform) == 0x00009C, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::ConstraintTransform' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, bDebugVisibility) == 0x0000A5, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::bDebugVisibility' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, DebugLineThickness) == 0x0000A8, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::DebugLineThickness' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, DebugLineColor) == 0x0000AC, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::DebugLineColor' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_Weight
// 0x0020 (0x0050 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_Weight final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_BeginBonamikWeight;                              // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BeginTime;                                       // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EndBonamikWeight;                                // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EndTime;                                         // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_Weight">();
	}
	static class USQEX_AnimNotifyState_Bonamik_Weight* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_Weight>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_Weight) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_Weight");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_Weight) == 0x000050, "Wrong size on USQEX_AnimNotifyState_Bonamik_Weight");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_BeginBonamikWeight) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_BeginBonamikWeight' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_BeginTime) == 0x000044, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_BeginTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_EndBonamikWeight) == 0x000048, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_EndBonamikWeight' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_EndTime) == 0x00004C, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_EndTime' has a wrong offset!");

// Class KBDRt.SQEX_Bonamik_ScaleGroupParamsPreset
// 0x00C0 (0x00F0 - 0x0030)
class USQEX_Bonamik_ScaleGroupParamsPreset final : public UDataAsset
{
public:
	bool                                          m_ChangeInnerCone;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_InnerConeScale;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeOuterCone;                                 // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_OuterConeScale;                                  // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeLocalForce;                                // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LocalForceScale;                                 // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeWindScale;                                 // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupWindScale;                                  // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeMassScale;                                 // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupMassScale;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeParkRate;                                  // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupParkRateScale;                              // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorFictitiousForce;                      // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorFictitiousForceScale;                  // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorCentrifugal;                          // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorCentrifugalScale;                      // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorImpulse;                              // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorImpulseScale;                          // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorRotDrag;                              // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorRotDragScale;                          // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeActorTransDrag;                            // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupActorTransDragScale;                        // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootFictitiousForce;                  // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootFictitiousForceScale;              // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootCentrifugal;                      // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootCentrifugalScale;                  // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootImpulse;                          // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootImpulseScale;                      // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootRotDrag;                          // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootRotDragScale;                      // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeChainRootTransDrag;                        // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupChainRootTransDragScale;                    // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyDrag;                                  // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyDragScale;                              // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyLift;                                  // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyLiftScale;                              // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyDamping;                               // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyDampingScale;                           // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyConstraintDamping;                     // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyConstraintDampingScale;                 // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyVelocityDamping;                       // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyVelocityDampingScale;                   // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyRadius;                                // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyRadiusScale;                            // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyFriction;                              // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyFrictionScale;                          // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeBodyGravity;                               // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupBodyGravityScale;                           // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_Bonamik_ScaleGroupParamsPreset">();
	}
	static class USQEX_Bonamik_ScaleGroupParamsPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_Bonamik_ScaleGroupParamsPreset>();
	}
};
static_assert(alignof(USQEX_Bonamik_ScaleGroupParamsPreset) == 0x000008, "Wrong alignment on USQEX_Bonamik_ScaleGroupParamsPreset");
static_assert(sizeof(USQEX_Bonamik_ScaleGroupParamsPreset) == 0x0000F0, "Wrong size on USQEX_Bonamik_ScaleGroupParamsPreset");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeInnerCone) == 0x000030, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeInnerCone' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_InnerConeScale) == 0x000034, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_InnerConeScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeOuterCone) == 0x000038, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeOuterCone' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_OuterConeScale) == 0x00003C, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_OuterConeScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeLocalForce) == 0x000040, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeLocalForce' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_LocalForceScale) == 0x000044, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_LocalForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeWindScale) == 0x000048, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupWindScale) == 0x00004C, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeMassScale) == 0x000050, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeMassScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupMassScale) == 0x000054, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupMassScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeParkRate) == 0x000058, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeParkRate' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupParkRateScale) == 0x00005C, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupParkRateScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeActorFictitiousForce) == 0x000060, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeActorFictitiousForce' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupActorFictitiousForceScale) == 0x000064, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupActorFictitiousForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeActorCentrifugal) == 0x000068, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeActorCentrifugal' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupActorCentrifugalScale) == 0x00006C, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupActorCentrifugalScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeActorImpulse) == 0x000070, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeActorImpulse' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupActorImpulseScale) == 0x000074, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupActorImpulseScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeActorRotDrag) == 0x000078, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeActorRotDrag' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupActorRotDragScale) == 0x00007C, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupActorRotDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeActorTransDrag) == 0x000080, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeActorTransDrag' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupActorTransDragScale) == 0x000084, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupActorTransDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeChainRootFictitiousForce) == 0x000088, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeChainRootFictitiousForce' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupChainRootFictitiousForceScale) == 0x00008C, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupChainRootFictitiousForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeChainRootCentrifugal) == 0x000090, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeChainRootCentrifugal' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupChainRootCentrifugalScale) == 0x000094, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupChainRootCentrifugalScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeChainRootImpulse) == 0x000098, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeChainRootImpulse' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupChainRootImpulseScale) == 0x00009C, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupChainRootImpulseScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeChainRootRotDrag) == 0x0000A0, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeChainRootRotDrag' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupChainRootRotDragScale) == 0x0000A4, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupChainRootRotDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeChainRootTransDrag) == 0x0000A8, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeChainRootTransDrag' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupChainRootTransDragScale) == 0x0000AC, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupChainRootTransDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeBodyDrag) == 0x0000B0, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeBodyDrag' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupBodyDragScale) == 0x0000B4, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupBodyDragScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeBodyLift) == 0x0000B8, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeBodyLift' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupBodyLiftScale) == 0x0000BC, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupBodyLiftScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeBodyDamping) == 0x0000C0, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeBodyDamping' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupBodyDampingScale) == 0x0000C4, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupBodyDampingScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeBodyConstraintDamping) == 0x0000C8, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeBodyConstraintDamping' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupBodyConstraintDampingScale) == 0x0000CC, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupBodyConstraintDampingScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeBodyVelocityDamping) == 0x0000D0, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeBodyVelocityDamping' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupBodyVelocityDampingScale) == 0x0000D4, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupBodyVelocityDampingScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeBodyRadius) == 0x0000D8, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeBodyRadius' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupBodyRadiusScale) == 0x0000DC, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupBodyRadiusScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeBodyFriction) == 0x0000E0, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeBodyFriction' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupBodyFrictionScale) == 0x0000E4, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupBodyFrictionScale' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_ChangeBodyGravity) == 0x0000E8, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_ChangeBodyGravity' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_ScaleGroupParamsPreset, m_GroupBodyGravityScale) == 0x0000EC, "Member 'USQEX_Bonamik_ScaleGroupParamsPreset::m_GroupBodyGravityScale' has a wrong offset!");

// Class KBDRt.SQEX_KBD_AssetUserData
// 0x0050 (0x0078 - 0x0028)
class USQEX_KBD_AssetUserData final : public UAssetUserData
{
public:
	TArray<class USQEX_BonamikAsset*>             BonamikDataList;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KBD_OverrideBonamikDataList> OverrideBonamikDataList;                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USQEX_KineDriverData*>           KineDriverDataList;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USQEX_KineDriverData*>           PostKineDriverDataList;                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BonamikDefaultPreRollCount;                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonamikCinemaPreRollCount;                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHighFpsEvaluation;                          // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KBD_AssetUserData">();
	}
	static class USQEX_KBD_AssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KBD_AssetUserData>();
	}
};
static_assert(alignof(USQEX_KBD_AssetUserData) == 0x000008, "Wrong alignment on USQEX_KBD_AssetUserData");
static_assert(sizeof(USQEX_KBD_AssetUserData) == 0x000078, "Wrong size on USQEX_KBD_AssetUserData");
static_assert(offsetof(USQEX_KBD_AssetUserData, BonamikDataList) == 0x000028, "Member 'USQEX_KBD_AssetUserData::BonamikDataList' has a wrong offset!");
static_assert(offsetof(USQEX_KBD_AssetUserData, OverrideBonamikDataList) == 0x000038, "Member 'USQEX_KBD_AssetUserData::OverrideBonamikDataList' has a wrong offset!");
static_assert(offsetof(USQEX_KBD_AssetUserData, KineDriverDataList) == 0x000048, "Member 'USQEX_KBD_AssetUserData::KineDriverDataList' has a wrong offset!");
static_assert(offsetof(USQEX_KBD_AssetUserData, PostKineDriverDataList) == 0x000058, "Member 'USQEX_KBD_AssetUserData::PostKineDriverDataList' has a wrong offset!");
static_assert(offsetof(USQEX_KBD_AssetUserData, BonamikDefaultPreRollCount) == 0x000068, "Member 'USQEX_KBD_AssetUserData::BonamikDefaultPreRollCount' has a wrong offset!");
static_assert(offsetof(USQEX_KBD_AssetUserData, BonamikCinemaPreRollCount) == 0x00006C, "Member 'USQEX_KBD_AssetUserData::BonamikCinemaPreRollCount' has a wrong offset!");
static_assert(offsetof(USQEX_KBD_AssetUserData, bEnableHighFpsEvaluation) == 0x000070, "Member 'USQEX_KBD_AssetUserData::bEnableHighFpsEvaluation' has a wrong offset!");

// Class KBDRt.SQEX_KBD_Component
// 0x0450 (0x0650 - 0x0200)
class USQEX_KBD_Component final : public USceneComponent
{
public:
	uint8                                         Pad_1F8[0x248];                                    // 0x01F8(0x0248)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            CharacterMovementComponent;                        // 0x0440(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_448[0x208];                                    // 0x0448(0x0208)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SQEX_Bonamik_AddOrSetWind(class USceneComponent* Component, class USQEX_BonamikWind_Asset* Wind, const struct FTransform& Offset, float Scale, bool bDisableWorldWind, class UObject* Outer_0);
	void SQEX_Bonamik_AddOrSetWindDirect(class USceneComponent* Component, const struct FSQEX_BonamikWind_Desc& Wind, const struct FTransform& Offset, float Scale, bool bDisableWorldWind, class UObject* Outer_0);
	void SQEX_Bonamik_AddOrSetWorldWind(class USceneComponent* Component, const TArray<struct FSQEX_BonamikWind_Desc>& Winds, const struct FTransform& Offset, float Scale, class UObject* Outer_0);
	void SQEX_Bonamik_AddOrSetWorldWindModifier(class USceneComponent* Component, class USQEX_BonamikWind_Asset* Wind, float Scale, class UObject* Outer_0);
	void SQEX_Bonamik_FixedFrameRateThisFrame();
	void SQEX_Bonamik_Freeze(bool FreezeState, const TArray<class FName>& Groups);
	void SQEX_Bonamik_ReinitializeSimulationPose();
	void SQEX_Bonamik_RemoveWind(class USceneComponent* Component, class UObject* Outer_0);
	void SQEX_Bonamik_RemoveWorldWindModifier(class USceneComponent* Component, class UObject* Outer_0);
	void SQEX_Bonamik_Reset(bool bResetPose, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_ResetGravity();
	void SQEX_Bonamik_RestoreDefaultParameters();
	void SQEX_Bonamik_SetAccurateGroundCollisionAll(bool V);
	void SQEX_Bonamik_SetActorCentrifugalScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetActorFictitiousForceScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetActorImpulseScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetActorRotDragScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetActorTransDragScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetAutoDisable(bool AutoDisable);
	void SQEX_Bonamik_SetBodyConstraintDampingScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetBodyDampingScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetBodyDragScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetBodyFrictionScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetBodyGravityScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetBodyLiftScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetBodyRadiusScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetBodyVelocityDampingScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetChainRootCentrifugalScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetChainRootFictitiousForceScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetChainRootImpulseScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetChainRootRotDragScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetChainRootTransDragScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetEnable(bool NewEnable);
	void SQEX_Bonamik_SetEnableExternalColliders(const TArray<class FName>& Groups, bool V);
	void SQEX_Bonamik_SetEnableGroundCollision(const TArray<class FName>& Groups, bool bNewEnable);
	void SQEX_Bonamik_SetEnableGroundCollisionAll(bool bNewEnable);
	void SQEX_Bonamik_SetEnsemble(class FName NewEnsemble);
	void SQEX_Bonamik_SetFrozenState(bool IsFrozen);
	void SQEX_Bonamik_SetGravity(const struct FVector& Gravity);
	void SQEX_Bonamik_SetGroupFrozenState(const TArray<class FName>& Groups, bool IsFrozen);
	void SQEX_Bonamik_SetGroupWeight(const TArray<class FName>& Groups, float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight);
	void SQEX_Bonamik_SetInnerConeScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetLocalForceScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetMassScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetOuterConeScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetParkRateScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetPreRoll(int32 Step, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetSpeedRate(float SpeedRate, float SpeedRateChangeTime, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_SetWeight(float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetWorldWindScale(const TArray<class FName>& Groups, float Scale, ESQEX_Bonamik_PropagationMode PropagationMode);
	void SQEX_Bonamik_TurnOff(bool preserveLatestResult, const TArray<class FName>& Groups, float BlendTime);
	void SQEX_Bonamik_TurnOn(const TArray<class FName>& Groups, float BlendTime);
	void SQEX_KineDriver_SetEnable(bool NewEnable, class FName NewLabel);
	void SQEX_KineDriver_SetEnableBone(bool NewEnable, class FName BoneName, float PauseRate, bool bApplyBonamik, bool bApplyChildren);
	void SQEX_KineDriver_SetParam(const TMap<class FName, float>& Params_0);

	class FName SQEX_Bonamik_GetEnsemble() const;
	struct FVector SQEX_Bonamik_GetGravity() const;
	class FName SQEX_Bonamik_GetGroupName(int32 idx) const;
	int32 SQEX_Bonamik_GetNumGroups() const;
	float SQEX_Bonamik_GetSpeedRate() const;
	bool SQEX_Bonamik_IsAutoDisable() const;
	bool SQEX_Bonamik_IsEnable() const;
	bool SQEX_KineDriver_IsEnable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KBD_Component">();
	}
	static class USQEX_KBD_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KBD_Component>();
	}
};
static_assert(alignof(USQEX_KBD_Component) == 0x000010, "Wrong alignment on USQEX_KBD_Component");
static_assert(sizeof(USQEX_KBD_Component) == 0x000650, "Wrong size on USQEX_KBD_Component");
static_assert(offsetof(USQEX_KBD_Component, CharacterMovementComponent) == 0x000440, "Member 'USQEX_KBD_Component::CharacterMovementComponent' has a wrong offset!");

// Class KBDRt.SQEX_KineDriver_AnimNotify_Enable
// 0x0010 (0x0048 - 0x0038)
class USQEX_KineDriver_AnimNotify_Enable final : public UAnimNotify
{
public:
	bool                                          m_Enable;                                          // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   m_Label;                                           // 0x003C(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_AnimNotify_Enable">();
	}
	static class USQEX_KineDriver_AnimNotify_Enable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_AnimNotify_Enable>();
	}
};
static_assert(alignof(USQEX_KineDriver_AnimNotify_Enable) == 0x000008, "Wrong alignment on USQEX_KineDriver_AnimNotify_Enable");
static_assert(sizeof(USQEX_KineDriver_AnimNotify_Enable) == 0x000048, "Wrong size on USQEX_KineDriver_AnimNotify_Enable");
static_assert(offsetof(USQEX_KineDriver_AnimNotify_Enable, m_Enable) == 0x000038, "Member 'USQEX_KineDriver_AnimNotify_Enable::m_Enable' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_AnimNotify_Enable, m_Label) == 0x00003C, "Member 'USQEX_KineDriver_AnimNotify_Enable::m_Label' has a wrong offset!");

// Class KBDRt.SQEX_KineDriver_AnimNotify_EnableBone
// 0x0020 (0x0058 - 0x0038)
class USQEX_KineDriver_AnimNotify_EnableBone final : public UAnimNotify
{
public:
	bool                                          m_Enable;                                          // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_BoneNames;                                       // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_ApplyChildren;                                   // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ApplyBonamik;                                    // 0x0051(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_AnimNotify_EnableBone">();
	}
	static class USQEX_KineDriver_AnimNotify_EnableBone* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_AnimNotify_EnableBone>();
	}
};
static_assert(alignof(USQEX_KineDriver_AnimNotify_EnableBone) == 0x000008, "Wrong alignment on USQEX_KineDriver_AnimNotify_EnableBone");
static_assert(sizeof(USQEX_KineDriver_AnimNotify_EnableBone) == 0x000058, "Wrong size on USQEX_KineDriver_AnimNotify_EnableBone");
static_assert(offsetof(USQEX_KineDriver_AnimNotify_EnableBone, m_Enable) == 0x000038, "Member 'USQEX_KineDriver_AnimNotify_EnableBone::m_Enable' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_AnimNotify_EnableBone, m_BoneNames) == 0x000040, "Member 'USQEX_KineDriver_AnimNotify_EnableBone::m_BoneNames' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_AnimNotify_EnableBone, m_ApplyChildren) == 0x000050, "Member 'USQEX_KineDriver_AnimNotify_EnableBone::m_ApplyChildren' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_AnimNotify_EnableBone, m_ApplyBonamik) == 0x000051, "Member 'USQEX_KineDriver_AnimNotify_EnableBone::m_ApplyBonamik' has a wrong offset!");

// Class KBDRt.SQEX_KineDriver_AnimNotify_Param
// 0x0050 (0x0088 - 0x0038)
class USQEX_KineDriver_AnimNotify_Param final : public UAnimNotify
{
public:
	TMap<class FName, float>                      Params_0;                                          // 0x0038(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_AnimNotify_Param">();
	}
	static class USQEX_KineDriver_AnimNotify_Param* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_AnimNotify_Param>();
	}
};
static_assert(alignof(USQEX_KineDriver_AnimNotify_Param) == 0x000008, "Wrong alignment on USQEX_KineDriver_AnimNotify_Param");
static_assert(sizeof(USQEX_KineDriver_AnimNotify_Param) == 0x000088, "Wrong size on USQEX_KineDriver_AnimNotify_Param");
static_assert(offsetof(USQEX_KineDriver_AnimNotify_Param, Params_0) == 0x000038, "Member 'USQEX_KineDriver_AnimNotify_Param::Params_0' has a wrong offset!");

// Class KBDRt.SQEX_KineDriver_AnimNotifyState_Enable
// 0x0010 (0x0040 - 0x0030)
class USQEX_KineDriver_AnimNotifyState_Enable final : public UAnimNotifyState
{
public:
	bool                                          m_Enable;                                          // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   m_Label;                                           // 0x0034(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_AnimNotifyState_Enable">();
	}
	static class USQEX_KineDriver_AnimNotifyState_Enable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_AnimNotifyState_Enable>();
	}
};
static_assert(alignof(USQEX_KineDriver_AnimNotifyState_Enable) == 0x000008, "Wrong alignment on USQEX_KineDriver_AnimNotifyState_Enable");
static_assert(sizeof(USQEX_KineDriver_AnimNotifyState_Enable) == 0x000040, "Wrong size on USQEX_KineDriver_AnimNotifyState_Enable");
static_assert(offsetof(USQEX_KineDriver_AnimNotifyState_Enable, m_Enable) == 0x000030, "Member 'USQEX_KineDriver_AnimNotifyState_Enable::m_Enable' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_AnimNotifyState_Enable, m_Label) == 0x000034, "Member 'USQEX_KineDriver_AnimNotifyState_Enable::m_Label' has a wrong offset!");

// Class KBDRt.SQEX_KineDriver_AnimNotifyState_EnableBone
// 0x0020 (0x0050 - 0x0030)
class USQEX_KineDriver_AnimNotifyState_EnableBone final : public UAnimNotifyState
{
public:
	bool                                          m_Enable;                                          // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_BoneNames;                                       // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_ApplyChildren;                                   // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ApplyBonamik;                                    // 0x0049(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_AnimNotifyState_EnableBone">();
	}
	static class USQEX_KineDriver_AnimNotifyState_EnableBone* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_AnimNotifyState_EnableBone>();
	}
};
static_assert(alignof(USQEX_KineDriver_AnimNotifyState_EnableBone) == 0x000008, "Wrong alignment on USQEX_KineDriver_AnimNotifyState_EnableBone");
static_assert(sizeof(USQEX_KineDriver_AnimNotifyState_EnableBone) == 0x000050, "Wrong size on USQEX_KineDriver_AnimNotifyState_EnableBone");
static_assert(offsetof(USQEX_KineDriver_AnimNotifyState_EnableBone, m_Enable) == 0x000030, "Member 'USQEX_KineDriver_AnimNotifyState_EnableBone::m_Enable' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_AnimNotifyState_EnableBone, m_BoneNames) == 0x000038, "Member 'USQEX_KineDriver_AnimNotifyState_EnableBone::m_BoneNames' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_AnimNotifyState_EnableBone, m_ApplyChildren) == 0x000048, "Member 'USQEX_KineDriver_AnimNotifyState_EnableBone::m_ApplyChildren' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_AnimNotifyState_EnableBone, m_ApplyBonamik) == 0x000049, "Member 'USQEX_KineDriver_AnimNotifyState_EnableBone::m_ApplyBonamik' has a wrong offset!");

}

