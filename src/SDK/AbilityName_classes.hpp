#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AbilityName

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AbilityName.AbilityName_C
// 0x0028 (0x0408 - 0x03E0)
class UAbilityName_C final : public UEndAbilityName
{
public:
	class UEndImage*                              Bg;                                                // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Bg_1;                                              // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              EndImage_107;                                      // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              ListPoint_1;                                       // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              ListPoint_2;                                       // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AbilityName_C">();
	}
	static class UAbilityName_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityName_C>();
	}
};
static_assert(alignof(UAbilityName_C) == 0x000008, "Wrong alignment on UAbilityName_C");
static_assert(sizeof(UAbilityName_C) == 0x000408, "Wrong size on UAbilityName_C");
static_assert(offsetof(UAbilityName_C, Bg) == 0x0003E0, "Member 'UAbilityName_C::Bg' has a wrong offset!");
static_assert(offsetof(UAbilityName_C, Bg_1) == 0x0003E8, "Member 'UAbilityName_C::Bg_1' has a wrong offset!");
static_assert(offsetof(UAbilityName_C, EndImage_107) == 0x0003F0, "Member 'UAbilityName_C::EndImage_107' has a wrong offset!");
static_assert(offsetof(UAbilityName_C, ListPoint_1) == 0x0003F8, "Member 'UAbilityName_C::ListPoint_1' has a wrong offset!");
static_assert(offsetof(UAbilityName_C, ListPoint_2) == 0x000400, "Member 'UAbilityName_C::ListPoint_2' has a wrong offset!");

}

