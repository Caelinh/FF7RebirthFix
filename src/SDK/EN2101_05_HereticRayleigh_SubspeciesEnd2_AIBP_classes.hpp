#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP

#include "Basic.hpp"

#include "EndDataBase_structs.hpp"
#include "Engine_structs.hpp"
#include "EB_Base_AIBP_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "EndGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP.EN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C
// 0x0080 (0x10F0 - 0x1070)
class AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C : public AEB_Base_AIBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_EN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C; // 0x1068(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	bool                                          CheckWarp;                                         // 0x1070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1071[0x3];                                     // 0x1071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActivateWarpCounter;                               // 0x1074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ReinForcementActor;                                // 0x1078(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         LimitReinForcement;                                // 0x1088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_108C[0x4];                                     // 0x108C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  GroundPoisonTarget;                                // 0x1090(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                WarpLocation;                                      // 0x10A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10AC[0x4];                                     // 0x10AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TargetDistanceDistribution;                        // 0x10B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AEndCharacter*>                  GetAllMember;                                      // 0x10C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          CheckReadyDeepMist;                                // 0x10D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CheckWarpAfterDeepMist;                            // 0x10D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D2[0x6];                                     // 0x10D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  EnemyList;                                         // 0x10D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          CheckDestructionPartsCreate;                       // 0x10E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverRideHitReaction;                               // 0x10E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_EN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP(int32 EntryPoint);
	void OnShowPreloadedWaveReinforcement(class FName reinforcementActorName);
	void OnMoveTimeOutInvoke(EEndAIActionMoveTimeOut TimeOutType, class FName MoveDefTag, class FName ActionDefTag, class FName ComboDefTag);
	void OnTakeDamagePhaseChangeHpLineInvoke(int32 Phase);
	void OnCreateDamageSource(class AEndCharacter* InOwner, const class FName& DamageSourceID);
	void OnChangeSyncActionState(const class FName& SyncActionID, EEndBattleSyncActionStateType StateType, class AEndCharacter* targetChara, const class FName& DetachDamageSourceID);
	void OnReactionSensingInvoke(class AEndCharacter* CauserChara, int32 HandleId, EEndBattleReactionNotificationType NotificationType, EEndBattleAttackDirectionType AttackDirectionType);
	void OnDestroyDamageSource(const class FName& DamageSourceID, const struct FVector& Location, const struct FQuat& Quat);
	void OnEndAbilityInvoke(class FName AbilityId, bool createdDamageSource, bool suspended, bool suspendedSummonCutScene);
	void OnUseAbilityInvoke(class FName AbilityId);
	void OnEndActionDefinitionInvoke(class FName ActionDefTag, class FName SuspendAbilityId, bool bSuspendSummonCutScene);
	void OnEndBurst(bool instant);
	void OnBeginBurst();
	void OnActionTopPriorityInvoke(class FName TopPriorityActionId);
	void AsyncCheckConditionInvoke();
	void OnPartsBreak(class FName PartsID);
	void OnActionInvoke(EEndAIIntervalType IntervalType, class FName ExtraIntervalId);
	void OnProwlInvoke(EEndAIProwlCallType CallType);
	void OnStartActionRestrictionInvoke();
	void Request_Broken_Destruction_Tentacle();
	void Request_Create_Destruction_Tentacle();
	void DestroyTentacleBladeDamagesource();
	void SetVisivle(bool Visible);
	void GetBattleAllMemberChara();
	void ChangeAttackInterval(bool DeepMist);
	void CheckReinForcementLimit();
	void OnDestroyDeepMist();
	void OnExtraConditionInvoke(class FName ConditionTag);
	void OnAITimerInvoke(class FName ID);
	void OnDead(bool AtBurst);
	void OnStartBattleInvoke();
	void OnChangePhaseReadyInvoke(int32 PrevPhase, int32 NextPhase);
	void OnChangePhaseFinishInvoke(int32 PrevPhase, int32 NextPhase);
	void OnMotionStateMessageBegin(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InTotalDuration);
	void OnMotionMessageInvoke(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnDefinitionLockTargetInvoke(class FName LockTargetTag);
	void OnGroupMessageInvoke(const struct FEndAIBattleGroupNotifyInfo& NotifyInfo);
	void OnSummonCutSceneBegin();
	void OnSummonCutSceneEnd();
	void InpActEvt_R_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_O_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Y_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Z_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_X_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_L_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_J_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_I_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_H_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_G_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_F_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_E_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_D_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_C_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_B_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_A_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_One_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void InpActEvt_Two_K2Node_InputKeyEvent_18(const struct FKey& Key);
	void InpActEvt_Q_K2Node_InputKeyEvent_19(const struct FKey& Key);
	void Set_Warp_Progress(bool* SuccessRequest);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C">();
	}
	static class AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C>();
	}
};
static_assert(alignof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C) == 0x000010, "Wrong alignment on AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C");
static_assert(sizeof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C) == 0x0010F0, "Wrong size on AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, UberGraphFrame_EN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C) == 0x001068, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::UberGraphFrame_EN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, CheckWarp) == 0x001070, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::CheckWarp' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, ActivateWarpCounter) == 0x001074, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::ActivateWarpCounter' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, ReinForcementActor) == 0x001078, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::ReinForcementActor' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, LimitReinForcement) == 0x001088, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::LimitReinForcement' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, GroundPoisonTarget) == 0x001090, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::GroundPoisonTarget' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, WarpLocation) == 0x0010A0, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::WarpLocation' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, TargetDistanceDistribution) == 0x0010B0, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::TargetDistanceDistribution' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, GetAllMember) == 0x0010C0, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::GetAllMember' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, CheckReadyDeepMist) == 0x0010D0, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::CheckReadyDeepMist' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, CheckWarpAfterDeepMist) == 0x0010D1, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::CheckWarpAfterDeepMist' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, EnemyList) == 0x0010D8, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::EnemyList' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, CheckDestructionPartsCreate) == 0x0010E8, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::CheckDestructionPartsCreate' has a wrong offset!");
static_assert(offsetof(AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C, OverRideHitReaction) == 0x0010E9, "Member 'AEN2101_05_HereticRayleigh_SubspeciesEnd2_AIBP_C::OverRideHitReaction' has a wrong offset!");

}

