#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Slot_Cell

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Slot_Cell.Slot_Cell_C
// 0x0058 (0x0480 - 0x0428)
class USlot_Cell_C final : public UEndMenuLimitBreakSlot
{
public:
	class UWidgetAnimation*                       Stop_Effect;                                       // 0x0428(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stop;                                              // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Loop;                                              // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UEndImage*                              Base_00;                                           // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_00;                                         // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Effect_Ring;                                       // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           Gradation;                                         // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlot_Icon_C*                           Icon_00;                                           // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlot_Icon_C*                           Icon_01;                                           // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlot_Icon_C*                           Icon_02;                                           // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlot_Icon_C*                           Icon_03;                                           // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Slot_Cell_C">();
	}
	static class USlot_Cell_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlot_Cell_C>();
	}
};
static_assert(alignof(USlot_Cell_C) == 0x000008, "Wrong alignment on USlot_Cell_C");
static_assert(sizeof(USlot_Cell_C) == 0x000480, "Wrong size on USlot_Cell_C");
static_assert(offsetof(USlot_Cell_C, Stop_Effect) == 0x000428, "Member 'USlot_Cell_C::Stop_Effect' has a wrong offset!");
static_assert(offsetof(USlot_Cell_C, Stop) == 0x000430, "Member 'USlot_Cell_C::Stop' has a wrong offset!");
static_assert(offsetof(USlot_Cell_C, Loop) == 0x000438, "Member 'USlot_Cell_C::Loop' has a wrong offset!");
static_assert(offsetof(USlot_Cell_C, Base_00) == 0x000440, "Member 'USlot_Cell_C::Base_00' has a wrong offset!");
static_assert(offsetof(USlot_Cell_C, Effect_00) == 0x000448, "Member 'USlot_Cell_C::Effect_00' has a wrong offset!");
static_assert(offsetof(USlot_Cell_C, Effect_Ring) == 0x000450, "Member 'USlot_Cell_C::Effect_Ring' has a wrong offset!");
static_assert(offsetof(USlot_Cell_C, Gradation) == 0x000458, "Member 'USlot_Cell_C::Gradation' has a wrong offset!");
static_assert(offsetof(USlot_Cell_C, Icon_00) == 0x000460, "Member 'USlot_Cell_C::Icon_00' has a wrong offset!");
static_assert(offsetof(USlot_Cell_C, Icon_01) == 0x000468, "Member 'USlot_Cell_C::Icon_01' has a wrong offset!");
static_assert(offsetof(USlot_Cell_C, Icon_02) == 0x000470, "Member 'USlot_Cell_C::Icon_02' has a wrong offset!");
static_assert(offsetof(USlot_Cell_C, Icon_03) == 0x000478, "Member 'USlot_Cell_C::Icon_03' has a wrong offset!");

}

